*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="exportcsv.scx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
#INCLUDE "..\custom\pdf.h"

DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="1" />

	AutoOpenTables = .F.
	DataSource = .NULL.
	Height = 200
	Left = 40
	Name = "Dataenvironment"
	Top = 235
	Width = 520

ENDDEFINE

DEFINE CLASS frmexportcsv AS frmformcustom OF "..\custom\cforms.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Cntgetfile1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblCntFile1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cntokcancelcustom1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkShowFile" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkSendEmail" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblFileName" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: createbatchfile		&& Creates the batch file to copy the required XFRX files from swquery
		*m: csv_output		&& Creates CSV Output file format.
		*m: dbf_output		&& Creates DBF file output format
		*m: exceldataonly		&& Creates the Excel Data Only Format
		*m: initpdf
		*m: loadoutputtype		&& Loads the output type dropdown
		*m: pdfoutput
		*m: process
		*m: runbatchfile		&& Copies the required fll and dll files from the swquery folder to the executable folder the 1st time.
		*m: sendemail
		*p: activationcode
		*p: calias
		*p: cfilename
		*p: creportname
		*p: cselect
		*p: csortorder
		*p: ctitle1
		*p: ctitle2
		*p: excludetype		&& Lists the types of output to exclude
		*p: ldataonly		&& Excel Data Only Format?
		*p: licensedto
		*p: lownerstmt
		*p: lpdfexcelonly
		*p: lpdfinit
		*p: opdf
		*p: _memberdata		&& XML Metadata for customizable properties
	*</DefinedPropArrayMethod>

	activationcode = .F.
	Caption = "Export to Excel or Email Report"
	cfilename = .F.
	DoCreate = .T.
	excludetype = 		&& Lists the types of output to exclude
	Height = 233
	licensedto = .F.
	lownerstmt = .F.
	lpdfexcelonly = .F.
	lpdfinit = .F.
	Name = "FrmExportCSV"
	opdf = .F.
	Width = 692
	_memberdata = <VFPData>
		<memberdata name="ldataonly" display="lDataOnly"/>
		<memberdata name="exceldataonly" display="ExcelDataOnly"/>
		<memberdata name="csv_output" display="CSV_Output"/>
		<memberdata name="dbf_output" display="DBF_Output"/>
		<memberdata name="runbatchfile" display="RunBatchFile"/>
		<memberdata name="createbatchfile" display="CreateBatchFile"/>
		<memberdata name="excludetype" display="ExcludeType"/>
		</VFPData>		&& XML Metadata for customizable properties
	Mwresize1.lblHighLight.Name = "lblHighLight"
	Mwresize1.lblShading.Name = "lblShading"
	Mwresize1.Name = "Mwresize1"

	ADD OBJECT 'chkSendEmail' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Send File Attached to Email", ;
		Left = 388, ;
		Name = "chkSendEmail", ;
		TabIndex = 5, ;
		Top = 121, ;
		Value = .F.
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkShowFile' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Show File After Creating It", ;
		Left = 208, ;
		Name = "chkShowFile", ;
		TabIndex = 4, ;
		Top = 121, ;
		Value = .T.
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'Cntgetfile1' AS cntgetfile WITH ;
		cdefaultextension = , ;
		cextensionlist = Comma Separated (CSV):CSV;Microsoft Excel Workbook (XLSX):XLSX;Excel (XLS):XLS;Adobe PDF:PDF, ;
		Height = 24, ;
		Left = 106, ;
		lfullpath = .T., ;
		lmustexist = .F., ;
		Name = "Cntgetfile1", ;
		TabIndex = 2, ;
		Top = 60, ;
		Width = 578, ;
		cmdPath.Left = 547, ;
		cmdPath.Name = "cmdPath", ;
		cmdPath.TabIndex = 2, ;
		cmdPath.TabStop = .F., ;
		cmdPath.Top = 0, ;
		edtPath.FontSize = 8, ;
		edtPath.Height = 20, ;
		edtPath.Left = 0, ;
		edtPath.Margin = 1, ;
		edtPath.Name = "edtPath", ;
		edtPath.TabIndex = 1, ;
		edtPath.Top = 0, ;
		edtPath.Width = 542
		*< END OBJECT: ClassLib="..\custom\cgadget.vcx" BaseClass="container" />

	ADD OBJECT 'Cntokcancelcustom1' AS cntokcancelcustom WITH ;
		Height = 58, ;
		Left = 249, ;
		Name = "Cntokcancelcustom1", ;
		TabIndex = 6, ;
		Top = 168, ;
		Width = 205, ;
		cmdcancel.Caption = "\<Close", ;
		cmdcancel.Height = 44, ;
		cmdcancel.Left = 113, ;
		cmdcancel.Name = "cmdcancel", ;
		cmdcancel.Top = 2, ;
		cmdcancel.Width = 75, ;
		cmdok.Height = 44, ;
		cmdok.Left = 1, ;
		cmdok.Name = "cmdok", ;
		cmdok.Top = 2, ;
		cmdok.Width = 75
		*< END OBJECT: ClassLib="..\custom\cbutton.vcx" BaseClass="container" />

	ADD OBJECT 'lblCntFile1' AS lbllabelcustom WITH ;
		Caption = "Output File Name", ;
		Left = 12, ;
		Name = "lblCntFile1", ;
		TabIndex = 3, ;
		Top = 62
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblFileName' AS lbllabelcustom WITH ;
		Caption = "Lbllabelcustom1", ;
		Left = 300, ;
		Name = "lblFileName", ;
		Top = 62
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />
	
	PROCEDURE createbatchfile		&& Creates the batch file to copy the required XFRX files from swquery
		LOCAL lcFullPath, lcQueryFolder, lcCurDir, llSuccess
		LOCAL llReturn, loError, FH
		
		llReturn = .T.
		
		TRY
		   llSuccess     = .T.
		   lcFullPath    = 'datafiles\xfrx.bat'
		   lcQueryFolder = FULLPATH(ALLTRIM(m.goapp.cQueryFolder))
		   lcCurDir      = FULLPATH(ADDBS(ALLTRIM(CURDIR())))
		
		
		   fh = FCREATE(lcFullPath)
		   IF fh > 0
		      = FPUTS(fh, 'COPY "' + lcQueryFolder + 'msvcp71.dll" "' + lcCurDir + 'msvcp71.dll"')
		      = FPUTS(fh, 'COPY "' + lcQueryFolder + 'msvcr71.dll" "' + lcCurDir + 'msvcr71.dll"')
		      = FPUTS(fh, 'COPY "' + lcQueryFolder + 'gdiplus.dll" "' + lcCurDir + 'gdiplus.dll"')
		      = FPUTS(fh, 'COPY "' + lcQueryFolder + 'zlib.dll" "' + lcCurDir + 'zlib.dll"')
		      = FPUTS(fh, 'COPY "' + lcQueryFolder + 'hndlib.dll" "' + lcCurDir + 'hndlib.dll"')
		      = FPUTS(fh, 'COPY "' + lcQueryFolder + 'xfrxlib.fll" "' + lcCurDir + 'xfrxlib.fll"')
		      = FFLUSH(fh)
		      = FCLOSE(fh)
		   ENDIF
		CATCH TO loError
		   llReturn = .F.
		   DO errorlog WITH 'CreateBatchFile', loError.LINENO, 'Report Export', loError.ERRORNO, loError.MESSAGE
		   MESSAGEBOX('Unable to process the report at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		        'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		RETURN llReturn
		
		
	ENDPROC

	PROCEDURE csv_output		&& Creates CSV Output file format.
		LOCAL lcOutputFile
		LOCAL lcMessage, llReturn, loError
		
		llReturn = .T.
		
		TRY
		   lcOutputFile = THISFORM.cntgetfile1.edtPath.VALUE
		
		   TRY
		      SELECT (THIS.calias)
		      COPY TO (lcOutputFile) TYPE CSV
		   CATCH TO loError
		      llReturn  = .F.
		      lcMessage = loError.MESSAGE
		      MESSAGEBOX('Unable to create the export file ' + ALLTRIM(lcoutputfile) + CHR(13)+CHR(13) + ;
		                 lcMessage,16,thisform.Caption)
		   ENDTRY
		
		CATCH TO loError
		   llReturn = .F.
		   DO CASE
		        CASE loError.ERRORNO = 202
		            MESSAGEBOX("The file name you're trying to export to is invalid. Change the name of this export file " + ;
		                  "to continue.", 16, "File Name Invalid")
		        CASE loError.ERRORNO = 1705
		            MESSAGEBOX("The file you're trying to export to is in use. Change the name of this export file " + ;
		                  "to continue or close the appliation that has the file open.", 16, "File In Use")
		        OTHERWISE
		            DO errorlog WITH 'ExcelDataOnly', loError.LINENO, 'Report Export', loError.ERRORNO, loError.MESSAGE, '', loError
		            MESSAGEBOX('Unable to process the report at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		                  'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		    ENDCASE
		ENDTRY
		
		RETURN llReturn
		
		
	ENDPROC

	PROCEDURE dbf_output		&& Creates DBF file output format
		LOCAL lcOutputFile
		LOCAL llReturn, loError
		
		llReturn = .T.
		
		TRY
		   lcOutputFile = THISFORM.cntgetfile1.edtPath.VALUE
		
		   SELECT (THIS.calias)
		   COPY TO (lcOutputFile)
		
		CATCH TO loError
		   llReturn = .F.
		   DO CASE
		        CASE loError.ERRORNO = 202
		            MESSAGEBOX("The file name you're trying to export to is invalid. Change the name of this export file " + ;
		                  "to continue.", 16, "File Name Invalid")
		        CASE loError.ERRORNO = 1705
		            MESSAGEBOX("The file you're trying to export to is in use. Change the name of this export file " + ;
		                  "to continue or close the appliation that has the file open.", 16, "File In Use")
		        OTHERWISE
		            DO errorlog WITH 'ExcelDataOnly', loError.LINENO, 'Report Export', loError.ERRORNO, loError.MESSAGE, '', loError
		            MESSAGEBOX('Unable to process the report at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		                  'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		    ENDCASE
		ENDTRY
		
		RETURN llReturn
	ENDPROC

	PROCEDURE exceldataonly		&& Creates the Excel Data Only Format
		LOCAL lcFields, lcOutputFile, lcMessage
		LOCAL llReturn, loError
		
		llReturn = .T.
		
		TRY
		*
		* Creates the Excel file that contains only the data on the report
		*
		    lcFields  = ''
		    lcMessage = ''
		
		    lcOutputFile = THISFORM.cntgetfile1.edtPath.VALUE
		
		    IF 'Account Activity' $ THISFORM.cfilename
		        THISFORM.calias = 'glmast'
		    ENDIF
		    SET CENTURY ON
		
		    SELECT (THIS.calias)
		    COPY TO (lcOutputFile) TYPE XL5
		
		CATCH TO loError
		    llReturn = .F.
		    DO CASE
		        CASE loError.ErrorNo = 1426
		           MESSAGEBOX("The file you're trying to export to is in use. Change the name of this export file " + ;
		                  "to continue or close the appliation that has the file open.", 16, "File In Use")
		        CASE loError.ERRORNO = 202
		            MESSAGEBOX("The file name you're trying to export to is invalid. Change the name of this export file " + ;
		                  "to continue.", 16, "File Name Invalid")
		        CASE loError.ERRORNO = 1705
		            MESSAGEBOX("The file you're trying to export to is in use. Change the name of this export file " + ;
		                  "to continue or close the appliation that has the file open.", 16, "File In Use")
		        OTHERWISE
		            DO errorlog WITH 'ExcelDataOnly', loError.LINENO, 'Report Export', loError.ERRORNO, loError.MESSAGE, '', loError
		            MESSAGEBOX('Unable to process the report at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		                  'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		    ENDCASE
		ENDTRY
		
		RETURN llReturn
		
		
		
		
		
		
		
		
		
	ENDPROC

	PROCEDURE Init
		LPARA tcFriendlyName, tcReportName, tcAlias, tcTitle1, tcTitle2, tcSortOrder, tcSelect
		LOCAL lcQuery
		
		IF VARTYPE(tcReportName) <> 'C'
		   tcReportName = 'Output'
		ENDIF 
		
		IF TYPE('tcAlias') <> 'C'
		   thisform.cAlias = ''
		ELSE
		   thisform.calias = tcAlias   
		ENDIF   
		
		IF EMPTY(thisform.cAlias)
		   thisform.cAlias = ALIAS()
		ENDIF 
		
		thisform.cReportName = tcReportName
		thisform.cTitle1     = tcTitle1
		thisform.cTitle2     = tcTitle2
		thisform.cSortOrder  = tcSortOrder
		thisform.cSelect     = tcSelect
		
		tcfilename1   = alltrim(STRTRAN(tcFriendlyName,'\',' '))
		tcfilename1   = alltrim(STRTRAN(tcFileName1,'/',' '))
		tcfilename   = m.goapp.cCommonFolder + alltrim(STRTRAN(tcFileName1,'.',' ')) + '.csv'
		
		IF m.goapp.lCloudServer
		   thisform.cntgetfile1.edtPath.Value = "S:\" + tcFileName1 + '.csv'
		   thisform.cntgetfile1.Visible = .f.
		   thisform.lblfileName.Caption = "S:\" + tcFileName1 + '.csv'
		   thisform.cFileName = tcFileName1
		   thisform.lblCntFile1.Left = 204
		ELSE 
		   thisform.cFileName = tcFileName
		   thisform.cnTGETFILE1.edtPath.Value = thisform.cfilename
		   thisform.lblfileName.Visible = .f.
		   thisform.lblCntFile1.Left = 12
		ENDIF 
		
		  
		DODEFAULT()
	ENDPROC

	PROCEDURE initpdf
	ENDPROC

	PROCEDURE loadoutputtype		&& Loads the output type dropdown
	ENDPROC

	PROCEDURE pdfoutput
	ENDPROC

	PROCEDURE process
		PRIV lcTitle1, lcTitle2, lcSortOrder, lcSelect
		LOCAL lcQuery, lcPath, lcOutputFile, lcOutputType, llResult, oXFRX
		LOCAL lcRecipient, lcSelect, lcSortOrder, lcTitle1, lcTitle2, llReturn, llShowFile, loError
		
		llReturn = .T.
		
		lcSafety = SET('safety')
		SET SAFETY OFF 
		
		TRY
		   lcAlias      = thisform.calias
		   lcTitle1     = THISFORM.cTitle1
		   lcTitle2     = THISFORM.cTitle2
		   lcSortOrder  = THISFORM.cSortOrder
		   lcSelect     = THISFORM.cSelect
		   llShowFile   = NOT THISFORM.chkshowFile.VALUE
		   lcOutputFile = THISFORM.cntgetfile1.edtPath.VALUE
		   thisform.lDataOnly = .F. 
		   
		   IF RIGHT(ALLTRIM(lcOutputFile),1) = '.'
		      lnLen = LEN(ALLTRIM(lcOutputFile))
		      lcoutputFile = SUBSTR(lcOutputFile,1,lnLen-1)
		   ENDIF 
		      
		   IF thisform.chkSendEmail.Value = .t.
		      lcOutputType = "PDF"
		      thisform.lDataOnly = .f.
		   ELSE
		      lcOutputType = UPPER(JUSTEXT(lcOutputFile))
		      IF 'CSV' $ UPPER(lcOutputType) OR ('XLS' $ UPPER(lcOutputType) AND NOT 'XLSX' $ UPPER(lcOutputType))
		         thisform.lDataOnly = .t.
		      ENDIF    
		   ENDIF    
		   llResult     = .T.
		   
		   IF NOT EMPTY(lcOutputFile)
		
		* Check on the existence of the application object
		* if it doesn't exist, we're running in development
		* mode and need to initialize the company address info.
		      IF TYPE('m.goApp') = 'O'
		         m.cProducer = m.goApp.ccompanyname
		         m.paddr1    = m.goApp.cAddress1
		         m.paddr2    = m.goApp.cAddress2
		         m.paddr3    = m.goApp.cAddress3
		         m.pcontact  = m.goApp.cContact
		         m.pphone    = m.goApp.cPhoneNo
		      ELSE
		         m.cProducer = 'SherWare, Inc.'
		         m.paddr1    = 'PO Box 223'
		         m.paddr2    = 'Wooster, OH  44691'
		         m.paddr3    = ''
		         m.ptax      = '99-9999999'
		         m.pcontact  = 'Phil Sherwood'
		         m.pphone    = '3302623115'
		         m.pcity     = 'Wooster'
		         m.pState    = 'OH'
		         m.pZip      = '44691'
		      ENDIF
		
		      IF TYPE('m.goApp') = 'O'
		         m.cProducer = m.goApp.ccompanyname
		         IF m.goApp.lDemo
		            m.cProducer = 'Demo Version of Software'
		            m.cGrpName  = m.cProducer
		         ENDIF
		      ELSE
		         m.cProducer = 'Development Company, Inc.'
		      ENDIF
		
		      IF TYPE('m.cProcessor') <> 'C'
		         m.cProcessor = ''
		      ENDIF
		
		      glGrpName = .F.
		
		      oXFRX = CREATEOBJECT('swXFRX')
		
		      IF NOT oXFRX.SetupXFRX()
		         llReturn = .F.
		         EXIT
		      ENDIF
		
		* Select the passed cursor before running the report
		      TRY
		         IF USED('glmast')
		            SELECT glmast
		            lcAlias = 'glmast'
		            thisform.calias = 'glmast'
		         ELSE 
		            SELECT (THISFORM.cAlias)
		         ENDIF    
		      CATCH
		      ENDTRY
		
		      IF NOT THISFORM.lDataOnly AND NOT INLIST(lcOutputType, 'CSV', 'DBF')
		         IF lcOutputType = 'TXT'
		            lcOutputType = 'PLAIN'
		            TRY
		               IF LOWER(thisform.cAlias) = 'balance'
		                  SELECT glmast
		               ENDIF 
		            CATCH
		            ENDTRY 
		         ENDIF
		         
		         IF UPPER(lcOutputType) = 'XLSX'
		            lcOutputType = 'NATIVE_PFXLSX'
		         ENDIF 
		         
		         IF FILE('datafiles\debug.txt')
		             WAIT WINDOW 'Output Type: ' + lcOutputType
		         ENDIF 
		
		         TRY
		            lcTemp = ADDBS(SYS(2023))
		            lcReport = SYS(3)+'.frx'
		            USE (THIS.cReportName) IN 0 ALIAS oldrpt
		            SELECT oldrpt
		            COPY TO (lcTemp+lcReport)
		            USE IN oldrpt
		            USE (lcTemp+lcReport) IN 0 ALIAS rpt
		            SELECT rpt
		            SCAN FOR LOWER(LEFT(ALLTRIM(expr),1)) = 'c' OR ;
		                     '.c' $ LOWER(expr)
		               REPLACE COMMENT WITH [#UR XLSF="TEXT"]
		               THISFORM.cReportName = lcTemp+lcReport
		            ENDSCAN
		         CATCH
		         ENDTRY
		         
		         TRY
		           SELECT (THISFORM.cAlias)
		         CATCH
		         ENDTRY
		
		         oXFRX.cOutputFile = lcOutputFile
		         oXFRX.cOutputType = lcOutputType
		         oXFRX.cTitle1     = THIS.cTitle1
		         oXFRX.cTitle2     = THIS.cTitle2
		         oXFRX.cSortOrder  = THIS.cSortOrder
		         oXFRX.cSelect     = THIS.cSelect
		         oXFRX.cReportName = THIS.cReportName
		         SELECT (lcAlias)
		         llResult          = oXFRX.CallXFRX()
		      ELSE
		         SELECT(lcAlias)
		         IF lcOutputType = 'CSV'
		            llResult = THISFORM.CSV_Output()
		         ELSE
		            llResult = thisform.ExcelDataOnly()
		         ENDIF    
		         oXFRX.cOutputFile = lcOutputFile
		      ENDIF
		
		* Bring up the file after creation?
		      IF THISFORM.chkshowFile.VALUE AND llResult
		         IF NOT oXFRX.ViewDocument()
		            DO CASE
		               CASE oXFRX.nReturnValue = 2
		                  MESSAGEBOX('Unable to view exported file: ' + lcOutputFile + ' File Not Found.', 16, 'View File Error')
		               CASE oXFRX.nReturnValue = 3
		                  MESSAGEBOX('Unable to view exported file: ' + lcOutputFile + ' Path Not Found.', 16, 'View File Error')
		               CASE oXFRX.nReturnValue = 31
		                  MESSAGEBOX('There is no application assocated with the given export type: ' + lcOutputType + ' Unable to view the file.', 16, 'View File Error')
		               OTHERWISE
		                  MESSAGEBOX('Unable to view exported file: ' + lcOutputFile + ' Return Code: ' + TRANSFORM(oXFRX.nReturnValue), 16, 'View File Error')
		            ENDCASE
		         ENDIF
		      ENDIF
		
		      RELEASE oXFRX
		      oXFRX = NULL
		
		* Email the resulting file?
		      IF THISFORM.chksendEmail.VALUE AND llResult
		         lcRecipient  = THISFORM.omessage.gettext('Enter email address to send report to', 'Recipient Email Address')
		         IF ISNULL(lcRecipient) OR NOT '@' $ lcRecipient
		            MESSAGEBOX('You must provide an email address for the report to be send. Report Email Failed.', 16, 'No Email Address')
		            llReturn = .F.
		            EXIT
		         ENDIF
		         oSendMail = swEmailReport(lcRecipient, JUSTSTEM(THISFORM.cfilename), lcOutputFile)
		         llResult  = oSendMail.lResult
		         RELEASE oSendMail
		         IF llResult
		            MESSAGEBOX('The report was emailed successfully to ' + CHR(10) + ALLTRIM(lcRecipient) + '.', 64, 'Email Reports')
		         ELSE
		            MESSAGEBOX('There was a problem emailing the report to ' + ALLTRIM(lcRecipient) + ' Please check the email address and try again.', 16, 'Email Reports')
		         ENDIF
		      ENDIF
		   ELSE
		      THISFORM.omessage.warning('The filename must be provided.')
		      THISFORM.setnextcontrol(THISFORM.cntgetfile1.edtPath)
		   ENDIF
		CATCH TO loError
		   llReturn = .F.
		   IF loError.ERRORNO = 1705
		      MESSAGEBOX("The file you're trying to export to is in use. Change the name of this export file " + ;
		           "to continue or close the appliation that has the file open.", 16, "File In Use")
		   ELSE
		      DO errorlog WITH 'Process', loError.LINENO, 'Export Report', loError.ERRORNO, loError.MESSAGE, '', loError
		      MESSAGEBOX('Unable to export the report at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		           'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		   ENDIF
		ENDTRY
		
		SET SAFETY &lcSafety
		RETURN llReturn
		
		
		
	ENDPROC

	PROCEDURE runbatchfile		&& Copies the required fll and dll files from the swquery folder to the executable folder the 1st time.
		lparameters tcFileName, ;
		  tcOperation, ;
		  tcWorkDir, ;
		  tcParameters
		local lcFileName, ;
		  lcWorkDir, ;
		  lcOperation, ;
		  lcParameters, ;
		  lnShow
		if empty(tcFileName)
		  return -1
		endif empty(tcFileName)
		lcFileName   = alltrim(tcFileName)
		lcWorkDir    = iif(vartype(tcWorkDir) = 'C', alltrim(tcWorkDir), '')
		lcOperation  = iif(vartype(tcOperation) = 'C' and not empty(tcOperation), ;
		  alltrim(tcOperation), 'Open')
		lcParameters = iif(vartype(tcParameters) = 'C', alltrim(tcParameters), '')
		lnShow       = iif(upper(lcOperation) = 'Print', 0, 1)
		declare integer ShellExecute in SHELL32.DLL ;
		  integer nWinHandle, ; && handle of parent window
		  string cOperation, ; && operation to perform
		  string cFileName, ;  && filename
		  string cParameters, ; && parameters for the executable
		  string cDirectory, ; && default directory
		  integer nShowWindow  && window state
		  lnReturn = ShellExecute(0, lcOperation, lcFilename, lcParameters, lcWorkDir, lnShow)
		return (lnReturn)
	ENDPROC

	PROCEDURE sendemail
	ENDPROC

	PROCEDURE chkSendEmail.Click
		LOCAL lcOutputType
		
		IF this.Value
		   IF NOT swIsEmailSetup()
		      MESSAGEBOX('The email preferences are not setup. Reports cannot be emailed at this time.',16,'Email Preferences Missing')
		      this.Value = .f.
		   ELSE 
		      thisform.chkshowFile.Value = .f.
		      lcPath     = LOWER(JUSTPATH(thisform.cntgetfile1.edtPath.Value))
		      lcFileName = ADDBS(lcPath) + lower(JUSTSTEM(thisform.cntgetfile1.edtPath.value))
		      thisform.cntgetfile1.edtPath.Value = lcFileName + '.pdf'
		   ENDIF    
		ENDIF 
	ENDPROC

	PROCEDURE chkShowFile.Click
		IF this.Value
		   thisform.chkSendEmail.Value = .f.
		ENDIF 
	ENDPROC

	PROCEDURE Cntgetfile1.edtPath.Valid
		
		   IF thisform.chkSendEmail.Value 
		      lcPath     = LOWER(JUSTPATH(thisform.cntgetfile1.edtPath.Value))
		      lcFileName = ADDBS(lcPath) + LOWER(JUSTSTEM(this.Value))
		      thisform.cntgetfile1.edtPath.Value = lcFileName + '.pdf'
		   ENDIF
		
		      
	ENDPROC

	PROCEDURE Cntokcancelcustom1.cmdok.Click
		thisform.process()
		
	ENDPROC

ENDDEFINE
