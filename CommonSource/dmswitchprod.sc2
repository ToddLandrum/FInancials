*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="dmswitchprod.scx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="2" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Cursor1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor6" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor7" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor8" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor9" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor10" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor11" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor12" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor13" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor14" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor15" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor16" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor17" UniqueID="" Timestamp="" />

	AutoOpenTables = .F.
	DataSource = .NULL.
	Height = 819
	Left = 40
	Name = "Dataenvironment"
	Top = 235
	Width = 995

	ADD OBJECT 'Cursor1' AS cursor WITH ;
		Alias = "wells", ;
		CursorSource = "wells", ;
		Database = ..\datafiles\provenreservesdata\appdata.dbc, ;
		Height = 90, ;
		Left = 125, ;
		Name = "Cursor1", ;
		Top = 18, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor10' AS cursor WITH ;
		Alias = "incsusp", ;
		BufferModeOverride = 5, ;
		CursorSource = "incsusp", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 176, ;
		Left = 445, ;
		Name = "Cursor10", ;
		Top = 386, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor11' AS cursor WITH ;
		Alias = "expsusp", ;
		BufferModeOverride = 5, ;
		CursorSource = "expsusp", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 213, ;
		Left = 430, ;
		Name = "Cursor11", ;
		Top = 140, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor12' AS cursor WITH ;
		Alias = "ownpcts", ;
		BufferModeOverride = 5, ;
		CursorSource = "ownpcts", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 588, ;
		Name = "Cursor12", ;
		Top = 317, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor13' AS cursor WITH ;
		Alias = "disbhist1", ;
		CursorSource = "disbhist", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 851, ;
		Name = "Cursor13", ;
		Top = 255, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor14' AS cursor WITH ;
		Alias = "wellhist1", ;
		CursorSource = "wellhist", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 850, ;
		Name = "Cursor14", ;
		Top = 140, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor15' AS cursor WITH ;
		Alias = "suspense1", ;
		CursorSource = "suspense", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor15", ;
		Top = 260, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor16' AS cursor WITH ;
		Alias = "invdet", ;
		CursorSource = "invdet", ;
		Database = ..\datafiles\provenreservesdata\appdata.dbc, ;
		Height = 90, ;
		Left = 209, ;
		Name = "Cursor16", ;
		Top = 281, ;
		Width = 124
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor17' AS cursor WITH ;
		Alias = "invhdr", ;
		CursorSource = "invhdr", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 290, ;
		Name = "Cursor17", ;
		Top = 453, ;
		Width = 124
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor2' AS cursor WITH ;
		Alias = "expense", ;
		BufferModeOverride = 5, ;
		CursorSource = "expense", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 254, ;
		Left = 570, ;
		Name = "Cursor2", ;
		Top = 20, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor3' AS cursor WITH ;
		Alias = "income", ;
		BufferModeOverride = 5, ;
		CursorSource = "income", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 710, ;
		Name = "Cursor3", ;
		Top = 20, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor4' AS cursor WITH ;
		Alias = "wellhist", ;
		BufferModeOverride = 5, ;
		CursorSource = "wellhist", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 233, ;
		Left = 764, ;
		Name = "Cursor4", ;
		Top = 449, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor5' AS cursor WITH ;
		Alias = "sysctl", ;
		CursorSource = "sysctl", ;
		Database = ..\datafiles\provenreservesdata\appdata.dbc, ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor5", ;
		Top = 20, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor6' AS cursor WITH ;
		Alias = "disbhist", ;
		BufferModeOverride = 5, ;
		CursorSource = "disbhist", ;
		Database = ..\datafiles\provenreservesdata\appdata.dbc, ;
		Height = 232, ;
		Left = 9, ;
		Name = "Cursor6", ;
		Top = 2, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor7' AS cursor WITH ;
		Alias = "suspense", ;
		BufferModeOverride = 5, ;
		CursorSource = "suspense", ;
		Database = ..\datafiles\provenreservesdata\appdata.dbc, ;
		Height = 517, ;
		Left = 17, ;
		Name = "Cursor7", ;
		Top = 268, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor8' AS cursor WITH ;
		Alias = "csrctdet", ;
		BufferModeOverride = 5, ;
		CursorSource = "csrctdet", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 311, ;
		Left = 290, ;
		Name = "Cursor8", ;
		Top = 20, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor9' AS cursor WITH ;
		Alias = "appurchd", ;
		BufferModeOverride = 5, ;
		CursorSource = "appurchd", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 363, ;
		Left = 150, ;
		Name = "Cursor9", ;
		Top = 140, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

ENDDEFINE

DEFINE CLASS formdmswitchprod AS frmdatamanagerformcustom OF "..\custom\cforms.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Shpshapecustom2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Shpshapecustom1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdExit" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdCopy" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Shpshapecustom3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtYear1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtPeriod1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Shpshapecustom4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Runcombo1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom6" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom7" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom8" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom9" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtYear2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtPeriod2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Shpshapecustom5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom11" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom12" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkRevenue" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkExpenses" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom10" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkAllWells" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkOneWell" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcWellID" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcwellname" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdLookWell" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: process
	*</DefinedPropArrayMethod>

	Caption = "Switch Production Periods in a Closed Run"
	DoCreate = .T.
	Height = 430
	HelpContextID = 719
	Icon = ..\
	Name = "FormDMSwitchProd"
	Width = 410
	cmdatamanager.Name = "cmdatamanager"
	cmdatamanager.ZOrderSet = 0
	cmlookupmanager.Name = "cmlookupmanager"
	Mwresize1.lblHighLight.Name = "lblHighLight"
	Mwresize1.lblShading.Name = "lblShading"
	Mwresize1.Name = "Mwresize1"

	ADD OBJECT 'chkAllWells' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "All wells that used the incorrect year/period", ;
		Left = 30, ;
		Name = "chkAllWells", ;
		TabIndex = 20, ;
		Top = 309, ;
		Value = .T., ;
		ZOrderSet = 28
		*< END OBJECT: ClassLib="..\..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkExpenses' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Expenses", ;
		Left = 243, ;
		Name = "chkExpenses", ;
		TabIndex = 12, ;
		Top = 186, ;
		Value = .F., ;
		ZOrderSet = 26
		*< END OBJECT: ClassLib="..\..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkOneWell' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Just one well", ;
		Left = 30, ;
		Name = "chkOneWell", ;
		TabIndex = 21, ;
		Top = 338, ;
		Value = .F., ;
		ZOrderSet = 29
		*< END OBJECT: ClassLib="..\..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkRevenue' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Revenue/Taxes", ;
		Left = 100, ;
		Name = "chkRevenue", ;
		TabIndex = 11, ;
		Top = 186, ;
		Value = .F., ;
		ZOrderSet = 25
		*< END OBJECT: ClassLib="..\..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'cmdCopy' AS cmdcommandbuttoncustom WITH ;
		Caption = "\<Process", ;
		Height = 26, ;
		Left = 123, ;
		Name = "cmdCopy", ;
		TabIndex = 25, ;
		Top = 392, ;
		Width = 75, ;
		ZOrderSet = 4
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdExit' AS cmdcommandbuttoncustom WITH ;
		Caption = "E\<xit", ;
		Height = 26, ;
		Left = 211, ;
		Name = "cmdExit", ;
		TabIndex = 26, ;
		Top = 392, ;
		Width = 75, ;
		ZOrderSet = 3
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdLookWell' AS swlookupbutton WITH ;
		Left = 119, ;
		Name = "cmdLookWell", ;
		TabIndex = 22, ;
		Top = 338, ;
		Visible = .F., ;
		ZOrderSet = 32
		*< END OBJECT: ClassLib="..\custom\swcontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'Lbllabelcustom1' AS lbllabelcustom WITH ;
		Caption = "/", ;
		FontSize = 12, ;
		Left = 331, ;
		Name = "Lbllabelcustom1", ;
		TabIndex = 6, ;
		Top = 110, ;
		ZOrderSet = 24
		*< END OBJECT: ClassLib="..\..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom10' AS lbllabelcustom WITH ;
		Caption = "/", ;
		FontSize = 12, ;
		Left = 331, ;
		Name = "Lbllabelcustom10", ;
		TabIndex = 15, ;
		Top = 231, ;
		ZOrderSet = 27
		*< END OBJECT: ClassLib="..\..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom11' AS lbllabelcustom WITH ;
		Caption = "Should this change be made to all wells or just one well?", ;
		Height = 16, ;
		Left = 30, ;
		Name = "Lbllabelcustom11", ;
		TabIndex = 19, ;
		Top = 284, ;
		Width = 273, ;
		WordWrap = .T., ;
		ZOrderSet = 21
		*< END OBJECT: ClassLib="..\..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom12' AS lbllabelcustom WITH ;
		BackStyle = 1, ;
		Caption = "Step 5", ;
		FontBold = .T., ;
		FontSize = 10, ;
		ForeColor = 255,0,0, ;
		Left = 21, ;
		Name = "Lbllabelcustom12", ;
		TabIndex = 18, ;
		Top = 257, ;
		ZOrderSet = 22
		*< END OBJECT: ClassLib="..\..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom2' AS lbllabelcustom WITH ;
		Caption = " Was the incorrect entry made for revenue or expenses?", ;
		Left = 30, ;
		Name = "Lbllabelcustom2", ;
		TabIndex = 10, ;
		Top = 164, ;
		ZOrderSet = 10
		*< END OBJECT: ClassLib="..\..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom3' AS lbllabelcustom WITH ;
		BackStyle = 1, ;
		Caption = "Step 3", ;
		FontBold = .T., ;
		FontSize = 10, ;
		ForeColor = 255,0,0, ;
		Left = 21, ;
		Name = "Lbllabelcustom3", ;
		TabIndex = 9, ;
		Top = 139, ;
		ZOrderSet = 14
		*< END OBJECT: ClassLib="..\..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom4' AS lbllabelcustom WITH ;
		Caption = "Select the revenue run when the incorrect entry was made:", ;
		Left = 30, ;
		Name = "Lbllabelcustom4", ;
		TabIndex = 2, ;
		Top = 30, ;
		ZOrderSet = 15
		*< END OBJECT: ClassLib="..\..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom5' AS lbllabelcustom WITH ;
		BackStyle = 1, ;
		Caption = "Step 1", ;
		FontBold = .T., ;
		FontSize = 10, ;
		ForeColor = 255,0,0, ;
		Left = 21, ;
		Name = "Lbllabelcustom5", ;
		TabIndex = 1, ;
		Top = 5, ;
		ZOrderSet = 11
		*< END OBJECT: ClassLib="..\..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom6' AS lbllabelcustom WITH ;
		Caption = "Select the INCORRECT production year/period used:", ;
		Left = 30, ;
		Name = "Lbllabelcustom6", ;
		TabIndex = 8, ;
		Top = 112, ;
		ZOrderSet = 12
		*< END OBJECT: ClassLib="..\..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom7' AS lbllabelcustom WITH ;
		BackStyle = 1, ;
		Caption = "Step 2", ;
		FontBold = .T., ;
		FontSize = 10, ;
		ForeColor = 255,0,0, ;
		Left = 21, ;
		Name = "Lbllabelcustom7", ;
		TabIndex = 4, ;
		Top = 85, ;
		ZOrderSet = 13
		*< END OBJECT: ClassLib="..\..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom8' AS lbllabelcustom WITH ;
		Caption = "Select the CORRECT production year/period to use:", ;
		Height = 16, ;
		Left = 30, ;
		Name = "Lbllabelcustom8", ;
		TabIndex = 17, ;
		Top = 233, ;
		Width = 247, ;
		WordWrap = .T., ;
		ZOrderSet = 16
		*< END OBJECT: ClassLib="..\..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom9' AS lbllabelcustom WITH ;
		BackStyle = 1, ;
		Caption = "Step 4", ;
		FontBold = .T., ;
		FontSize = 10, ;
		ForeColor = 255,0,0, ;
		Left = 21, ;
		Name = "Lbllabelcustom9", ;
		TabIndex = 13, ;
		Top = 209, ;
		ZOrderSet = 17
		*< END OBJECT: ClassLib="..\..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Runcombo1' AS runcombo WITH ;
		cshowwhat = , ;
		Height = 20, ;
		Left = 36, ;
		lshownew = .F., ;
		Name = "Runcombo1", ;
		TabIndex = 3, ;
		Top = 54, ;
		Width = 261, ;
		ZOrderSet = 9
		*< END OBJECT: ClassLib="..\custom\swcontrol.vcx" BaseClass="combobox" />

	ADD OBJECT 'Shpshapecustom1' AS shpshapecustom WITH ;
		BackStyle = 0, ;
		Height = 82, ;
		Left = 12, ;
		Name = "Shpshapecustom1", ;
		Top = 12, ;
		Width = 385, ;
		ZOrderSet = 2
		*< END OBJECT: ClassLib="..\..\custom\ccontrol.vcx" BaseClass="shape" />

	ADD OBJECT 'Shpshapecustom2' AS shpshapecustom WITH ;
		BackStyle = 0, ;
		Height = 56, ;
		Left = 12, ;
		Name = "Shpshapecustom2", ;
		Top = 92, ;
		Width = 385, ;
		ZOrderSet = 1
		*< END OBJECT: ClassLib="..\..\custom\ccontrol.vcx" BaseClass="shape" />

	ADD OBJECT 'Shpshapecustom3' AS shpshapecustom WITH ;
		BackStyle = 0, ;
		Height = 72, ;
		Left = 12, ;
		Name = "Shpshapecustom3", ;
		Top = 146, ;
		Width = 385, ;
		ZOrderSet = 5
		*< END OBJECT: ClassLib="..\..\custom\ccontrol.vcx" BaseClass="shape" />

	ADD OBJECT 'Shpshapecustom4' AS shpshapecustom WITH ;
		BackStyle = 0, ;
		Height = 50, ;
		Left = 12, ;
		Name = "Shpshapecustom4", ;
		Top = 216, ;
		Width = 385, ;
		ZOrderSet = 8
		*< END OBJECT: ClassLib="..\..\custom\ccontrol.vcx" BaseClass="shape" />

	ADD OBJECT 'Shpshapecustom5' AS shpshapecustom WITH ;
		BackStyle = 0, ;
		Height = 111, ;
		Left = 12, ;
		Name = "Shpshapecustom5", ;
		Top = 264, ;
		Width = 385, ;
		ZOrderSet = 20
		*< END OBJECT: ClassLib="..\..\custom\ccontrol.vcx" BaseClass="shape" />

	ADD OBJECT 'txtcWellID' AS txtquickfill WITH ;
		clistexpression = cwellid, ;
		clistworkarea = wells, ;
		Height = 20, ;
		Left = 143, ;
		Name = "txtcWellID", ;
		TabIndex = 23, ;
		Top = 338, ;
		Visible = .F., ;
		Width = 79, ;
		ZOrderSet = 30
		*< END OBJECT: ClassLib="..\common\cmgadget.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcwellname' AS txtquickfill WITH ;
		BackColor = 212,208,200, ;
		clistexpression = cwellname, ;
		clistworkarea = wells, ;
		Height = 20, ;
		Left = 224, ;
		Name = "txtcwellname", ;
		TabIndex = 24, ;
		Top = 338, ;
		Visible = .F., ;
		Width = 166, ;
		ZOrderSet = 31
		*< END OBJECT: ClassLib="..\common\cmgadget.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtPeriod1' AS swperiod WITH ;
		Height = 20, ;
		Left = 339, ;
		Name = "txtPeriod1", ;
		TabIndex = 7, ;
		Top = 110, ;
		Width = 24, ;
		ZOrderSet = 7
		*< END OBJECT: ClassLib="..\custom\swcontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtPeriod2' AS swperiod WITH ;
		Height = 20, ;
		Left = 339, ;
		Name = "txtPeriod2", ;
		TabIndex = 16, ;
		Top = 231, ;
		Width = 24, ;
		ZOrderSet = 19
		*< END OBJECT: ClassLib="..\custom\swcontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtYear1' AS txttextboxcustom WITH ;
		Alignment = 2, ;
		DateFormat = 0, ;
		Format = "K", ;
		Height = 20, ;
		InputMask = "9999", ;
		Left = 287, ;
		Margin = 1, ;
		Name = "txtYear1", ;
		StrictDateEntry = 1, ;
		TabIndex = 5, ;
		Top = 110, ;
		Value = transform(year(date())), ;
		Width = 40, ;
		ZOrderSet = 6
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtYear2' AS txttextboxcustom WITH ;
		Alignment = 2, ;
		DateFormat = 0, ;
		Format = "K", ;
		Height = 20, ;
		InputMask = "9999", ;
		Left = 287, ;
		Margin = 1, ;
		Name = "txtYear2", ;
		StrictDateEntry = 1, ;
		TabIndex = 14, ;
		Top = 231, ;
		Value = transform(year(date())), ;
		Width = 40, ;
		ZOrderSet = 18
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />
	
	PROCEDURE Init
		DODEFAULT()
		
		THISFORM.oRegistry = FindGlobalObject('cmRegistry')
		
		lcTypeClose = THISFORM.runcombo1.LISTITEM(THISFORM.runcombo1.LISTITEMID,6)
		
		IF lcTypeClose = 'J'
		   thisform.chkexpenses.Value = .t.
		ENDIF 
	ENDPROC

	PROCEDURE process
		LOCAL lnRunno, lcRunYear, lcYear1, lcYear2, lcPeriod1, lcPeriod2, lcDMBatch
		LOCAL llRevenue, llExpenses, llAllWells, lcWellID, lnRecNo, llExisting, llAnyRecords, lcTypeClose
		
		lnRunno     = VAL(THISFORM.runcombo1.LISTITEM(THISFORM.runcombo1.LISTITEMID,3))
		lcRunYear   = THISFORM.runcombo1.LISTITEM(THISFORM.runcombo1.LISTITEMID,2)
		lcTypeClose = THISFORM.runcombo1.LISTITEM(THISFORM.runcombo1.LISTITEMID,6)
		lcDMBatch   = THISFORM.runcombo1.LISTITEM(THISFORM.runcombo1.LISTITEMID,5)
		lcYear1     = THISFORM.txtYear1.VALUE
		lcYear2     = THISFORM.txtYear2.VALUE
		lcPeriod1   = THISFORM.txtPeriod1.VALUE
		lcPeriod2   = THISFORM.txtperiod2.VALUE
		llRevenue   = THISFORM.chkRevenue.VALUE
		llExpenses  = THISFORM.chkExpenses.VALUE
		llAllWells  = THISFORM.chkAllWells.VALUE
		lcWellID    = THISFORM.txtcwellID.VALUE
		
		llAnyRecords = .F.
		
		IF lcTypeClose = 'J'
		   llExpenses = .T.
		   llRevenue  = .F.
		ENDIF
		
		IF NOT llRevenue AND NOT llExpenses
		   THISFORM.omessage.warning('You must select either revenue or expenses to process.')
		   RETURN
		ENDIF
		
		IF lcYear1 = lcYear2 AND lcPeriod1 = lcPeriod2
		   THISFORM.omessage.warning('The incorrect period must be set to a different month than the correct period before any replacements can be made.')
		   THISFORM.setnextcontrol(THISFORM.txtYear2)
		   RETURN
		ENDIF
		
		IF NOT llAllWells AND EMPTY(lcWellID)
		   THISFORM.omessage.warning('You have selected to process just one well, but no well has been selected. Please correct before proceeding.')
		   THISFORM.setnextcontrol(THISFORM.txtcwellID)
		   RETURN
		ENDIF
		
		DO CASE
		   CASE llRevenue AND NOT llExpenses
		      lcConfirmText = 'revenue'
		   CASE llExpenses AND NOT llRevenue
		      lcConfirmText = 'expenses'
		   CASE llRevenue AND llExpenses
		      lcConfirmText = 'both revenue and expenses'
		ENDCASE
		
		IF NOT THISFORM.omessage.CONFIRM('Are you sure you want to switch ' + lcConfirmText + ' from period ' + lcYear1 + '/' + lcPeriod1 +  ;
		      ' to period ' + lcYear2 + '/' + lcPeriod2 + ' for' + IIF(llAllWells,' all wells',' well ' + ALLTRIM(lcWellID)) + ' for run ' +  ;
		      PADL(ALLTRIM(STR(lnRunno)),3,'0') + '/' + lcRunYear + '?')
		   RETURN
		ENDIF
		
		WAIT WINDOW NOWAIT 'Checking for potential conflicts...'
		*  Check to see if the history being transferred will be getting merged in with existing history.
		*  If it will be, warn them that the transfer can't be undone.
		llExisting = .F.
		swselect('disbhist')
		SCAN FOR IIF(EMPTY(cSuspType),nRunno = lnRunno AND cRunYear = lcRunYear,nRunno_in = lnRunno AND cRunYear_In = lcRunYear)  ;
		      AND IIF(NOT llAllWells,cWellID = lcWellID,.T.) AND hYear = lcYear1 AND hPeriod = lcPeriod1 AND NOT lManual AND cRecType = lcTypeClose
		
		   SCATTER MEMVAR
		   swselect('disbhist1')
		   LOCATE FOR IIF(EMPTY(cSuspType),nRunno = lnRunno AND cRunYear = lcRunYear,nRunno_in = lnRunno AND cRunYear_In = lcRunYear)  ;
		      AND cWellID = m.cWellID AND hYear = lcYear2 AND hPeriod = lcPeriod2 AND NOT lManual AND cRecType = lcTypeClose AND lFlat = m.lFlat
		
		   IF FOUND()
		      llExisting = .T.
		      IF NOT THISFORM.omessage.CONFIRM('There is existing history for the selected year/period you chose in Step 4. ' + ;
		            'That means that any incorrect history being switched to this period will be ' + ;
		            'MERGED with the existing data. That makes this switch irreversible. Continue?')
		         RETURN .F.
		      ENDIF
		   ENDIF
		
		   IF llExisting
		      EXIT
		   ENDIF
		ENDSCAN
		
		*  If switching expenses or both revenue/expenses, check to see if any of the expenses that would get switched were processed during a JIB run closing.
		*  If there are any, bail on the whole thing.
		IF llExpenses
		   SELECT expense
		   IF lcTypeClose = 'R'
		      LOCATE FOR nRunnoRev = lnRunno AND cRunYearRev = lcRunYear AND cYear = lcYear1 AND cPeriod = lcPeriod1  ;
		         AND IIF(NOT llAllWells, cWellID = lcWellID,.T.) AND crunyearjib <> '1900'
		      IF FOUND()
		         THISFORM.omessage.warning('One or more expenses that would be included in the transfer have been or will be ' + ;
		            'processed during a JIB run closing. They cannot be included in the processing, so ' + ;
		            'no expenses can be switched for this year/period.')
		         RETURN .F.
		      ENDIF
		   ELSE
		      LOCATE FOR nRunnoJIB = lnRunno AND crunyearjib = lcRunYear AND cYear = lcYear1 AND cPeriod = lcPeriod1  ;
		         AND IIF(NOT llAllWells, cWellID = lcWellID,.T.) AND cRunYearRev <> '1900' AND cRunYearRev # '1901'
		      IF FOUND()
		         THISFORM.omessage.warning('One or more expenses that would be included in the transfer have been or will be ' + ;
		            'processed during a Revenue run closing. They cannot be included in the processing, ' + ;
		            'so no expenses can be switched for this year/period.')
		         RETURN .F.
		      ENDIF
		   ENDIF
		ENDIF
		WAIT CLEAR
		
		*  Regardless of whether income/expenses are chosen to be processed, switching the income/expense files if necessary is an easy step
		
		*  Income
		IF llRevenue
		   WAIT WINDOW NOWAIT 'Processing Income'
		   swselect('income')
		   SCAN FOR nRunno = lnRunno AND cRunYear = lcRunYear AND cYear = lcYear1 AND cPeriod = lcPeriod1 AND IIF(NOT llAllWells, cWellID = lcWellID,.T.)
		      REPLACE cYear WITH lcYear2, cPeriod WITH lcPeriod2
		
		*  So we know whether anything is actually being switched during the processing
		      llAnyRecords = .T.
		
		*  If it came from a production receipt, match back and change the period on the receipt, too
		      IF lCSTran
		         WAIT WINDOW NOWAIT 'Processing Income - Cash Receipt Detail'
		         swselect('csrctdet')
		         SCAN FOR cBatch = income.cBatch AND cProdPeriod = lcPeriod1 AND cProdYear = lcYear1 AND IIF(NOT llAllWells, cWellID = lcWellID,.T.)
		            REPLACE cProdPeriod WITH lcPeriod2, cProdYear WITH lcYear2
		         ENDSCAN
		      ENDIF
		
		*  It's possible (though unlikely) that some revenue from a receipt was processed in a run closing,
		*  but some wasn't, and one or more entries with the wrong period are still in the allocation file.
		*  Check there and switch them, too.
		*  Yeah, I know it's unlikely, but as soon as we don't put it in, some 'tard will need to do it.
		      WAIT WINDOW NOWAIT 'Processing Income - Allocation File'
		      SELECT incsusp
		      SCAN FOR cBatch = income.cBatch AND cPeriod = lcPeriod1 AND cYear = lcYear1 AND nTotalInc = income.nTotalInc AND IIF(NOT llAllWells, cWellID = lcWellID,.T.)
		         REPLACE cPeriod WITH lcPeriod2, cYear WITH lcYear2
		      ENDSCAN
		   ENDSCAN
		ENDIF
		
		*  Expenses
		IF llExpenses
		   WAIT WINDOW NOWAIT 'Processing Expenses'
		   IF lcTypeClose = 'R'
		      swselect('expense')
		      SCAN FOR nRunnoRev = lnRunno AND cRunYearRev = lcRunYear AND cYear = lcYear1 AND cPeriod = lcPeriod1 AND IIF(NOT llAllWells, cWellID = lcWellID,.T.)
		         REPLACE cYear WITH lcYear2, cPeriod WITH lcPeriod2
		
		*  So we know whether anything is actually being switched during the processing
		         llAnyRecords = .T.
		
		*  If it came from a bill, match back to that bill and change the year/period on the bill detail, too
		         IF lAPTran
		            WAIT WINDOW NOWAIT 'Processing Expenses - Bill Detail'
		            swselect('appurchd')
		            SCAN FOR cBatch = expense.cBatch AND cProdPeriod = lcPeriod1 AND cProdYear = lcYear1 AND IIF(NOT llAllWells, cWellID = lcWellID,.T.)
		               REPLACE cProdPeriod WITH lcPeriod2, cProdYear WITH lcYear2
		            ENDSCAN
		         ENDIF
		
		*  It's possible (though unlikely) that some expense from a bill was processed in a run closing,
		*  but some wasn't, and one or more entries with the wrong period are still in the allocation file.
		*  Check there and switch them, too.
		         WAIT WINDOW NOWAIT 'Processing Expense - Allocation File'
		         SELECT expsusp
		         SCAN FOR cBatch = expense.cBatch AND cPeriod = lcPeriod1 AND cYear = lcYear1 AND nAmount = expense.nAmount AND IIF(NOT llAllWells, cWellID = lcWellID,.T.)
		            REPLACE cPeriod WITH lcPeriod2, cYear WITH lcYear2
		         ENDSCAN
		      ENDSCAN
		   ELSE
		      swselect('expense')
		      SCAN FOR nRunnoJIB = lnRunno AND crunyearjib = lcRunYear AND cYear = lcYear1 AND cPeriod = lcPeriod1 AND IIF(NOT llAllWells, cWellID = lcWellID,.T.)
		         REPLACE cYear WITH lcYear2, cPeriod WITH lcPeriod2
		
		*  So we know whether anything is actually being switched during the processing
		         llAnyRecords = .T.
		
		*  If it came from a bill, match back to that bill and change the year/period on the bill detail, too
		         IF lAPTran
		            WAIT WINDOW NOWAIT 'Processing Expenses - Bill Detail'
		            swselect('appurchd')
		            SCAN FOR cBatch = expense.cBatch AND cProdPeriod = lcPeriod1 AND cProdYear = lcYear1 AND IIF(NOT llAllWells, cWellID = lcWellID,.T.)
		               REPLACE cProdPeriod WITH lcPeriod2, cProdYear WITH lcYear2
		            ENDSCAN
		         ENDIF
		
		*  It's possible (though unlikely) that some expense from a bill was processed in a run closing,
		*  but some wasn't, and one or more entries with the wrong period are still in the allocation file.
		*  Check there and switch them, too.
		         WAIT WINDOW NOWAIT 'Processing Expense - Allocation File'
		         SELECT expsusp
		         SCAN FOR cBatch = expense.cBatch AND cPeriod = lcPeriod1 AND cYear = lcYear1 AND nAmount = expense.nAmount AND IIF(NOT llAllWells, cWellID = lcWellID,.T.)
		            REPLACE cPeriod WITH lcPeriod2, cYear WITH lcYear2
		         ENDSCAN
		      ENDSCAN
		   ENDIF
		ENDIF
		
		
		*  Look at nrunno/crunyear for entries that were never in suspense, and nrunno_in/crunyear_in
		*  if the record was ever in suspense.
		*  Also exclude "J" records and lmanual records
		WAIT WINDOW NOWAIT 'Processing Owner History'
		swselect('disbhist')
		SCAN FOR IIF(EMPTY(cSuspType),nRunno = lnRunno AND cRunYear = lcRunYear,nRunno_in = lnRunno AND cRunYear_In = lcRunYear)  ;
		      AND IIF(NOT llAllWells, cWellID = lcWellID,.T.) AND hYear = lcYear1 AND hPeriod = lcPeriod1 AND NOT lManual AND cRecType = lcTypeClose AND RECNO() > 0
		
		*  Store what recno() we're on, and then check to see if there's an existing disbhist record for this same year/period for this run.
		*  If there is, add this record's totals to it, and then delete/update the original record
		   lnRecNo = RECNO()
		   SCATTER MEMVAR
		
		*  So we know whether anything is actually being switched during the processing
		   llAnyRecords = .T.
		
		   LOCATE FOR cOwnerID == m.cOwnerID AND IIF(EMPTY(cSuspType),nRunno = lnRunno AND cRunYear = lcRunYear,nRunno_in = lnRunno AND cRunYear_In = lcRunYear)  ;
		      AND cWellID == m.cWellID AND hYear = lcYear2 AND hPeriod = lcPeriod2 AND NOT lManual AND cRecType = lcTypeClose AND lFlat = m.lFlat
		   IF FOUND()
		      IF llRevenue
		         REPLACE nIncome WITH nIncome+m.nIncome, nSevTaxes WITH nSevTaxes+m.nSevTaxes, nNetCheck WITH nNetCheck+m.nNetCheck,  ;
		            nFlatRate WITH nFlatRate+m.nFlatRate, nOilRev WITH nOilRev+m.nOilRev, nGasRev WITH nGasRev+m.nGasRev,  ;
		            nOthRev WITH nOthRev+m.nOthRev, nTrpRev WITH nTrpRev+m.nTrpRev, nMiscRev1 WITH nMiscRev1+m.nMiscRev1,  ;
		            nMiscRev2 WITH nMiscRev2+m.nMiscRev2, nGather WITH nGather+m.nGather, nCompress WITH nCompress+m.nCompress,  ;
		            nOilTax1 WITH nOilTax1+m.nOilTax1, nOilTax2 WITH nOilTax2+m.nOilTax2, nOilTax3 WITH nOilTax3+m.nOilTax3,  ;
		            nOilTax4 WITH nOilTax4+m.nOilTax4, nGasTax1 WITH nGasTax1+m.nGasTax1, nGasTax2 WITH nGasTax2+m.nGasTax2,  ;
		            nGasTax3 WITH nGasTax3+m.nGasTax3, nGasTax4 WITH nGasTax4+m.nGasTax4, nOthTax1 WITH nOthTax1+m.nOthTax1,  ;
		            nOthTax2 WITH nOthTax2+m.nOthTax2, nOthTax3 WITH nOthTax3+m.nOthTax3, nOthTax4 WITH nOthTax4+m.nOthTax4,  ;
		            nTaxWith WITH nTaxWith+m.nTaxWith, nBackWith WITH nBackWith+m.nBackWith
		      ENDIF
		
		      IF llExpenses
		         REPLACE nMktgExp WITH nMktgExp+m.nMktgExp, nExpense WITH nExpense+m.nExpense, nTotalE1 WITH nTotalE1+m.nTotalE1,  ;
		            nTotalE2 WITH nTotalE2+m.nTotalE2, nTotalE3 WITH nTotalE3+m.nTotalE3, nTotalE4 WITH nTotalE4+m.nTotalE4,  ;
		            nTotalE5 WITH nTotalE5+m.nTotalE5, nTotalEA WITH nTotalEA+m.nTotalEA, nTotalEB WITH nTotalEB+m.nTotalEB
		      ENDIF
		
		*  Now we're going to go back to the original record.  If switching both rev/exp, we can delete it.  Otherwise, subtract off
		*  whatever is being switched
		      GOTO lnRecNo
		
		      DO CASE
		         CASE llRevenue AND NOT llExpenses
		            REPLACE nIncome WITH 0, nSevTaxes WITH 0, nNetCheck WITH m.nExpense*-1, nFlatRate WITH 0,  ;
		               nOilRev WITH 0, nGasRev WITH 0, nOthRev WITH 0, nTrpRev WITH 0, nMiscRev1 WITH 0, nMiscRev2 WITH 0, nGather WITH 0,  ;
		               nCompress WITH 0, lFlat WITH .F., nFlatFreq WITH 0, nOilTax1 WITH 0, nOilTax2 WITH 0, nOilTax3 WITH 0, nOilTax4 WITH 0,  ;
		               nGasTax1 WITH 0, nGasTax2 WITH 0, nGasTax3 WITH 0, nGasTax4 WITH 0, nOthTax1 WITH 0, nOthTax2 WITH 0, nOthTax3 WITH 0,  ;
		               nOthTax4 WITH 0, nTaxWith WITH 0, nBackWith WITH 0
		
		*  If they're direct paid, we have to subtract that revenue back off the net check amount, since it was never
		*  included in that figure in the first place.
		            IF m.cDirect = 'O' OR m.cDirect = 'B'
		               REPLACE nNetCheck WITH nNetCheck - m.nOilRev
		            ENDIF
		            IF m.cDirect = 'G' OR m.cDirect = 'B'
		               REPLACE nNetCheck WITH nNetCheck - m.nGasRev
		            ENDIF
		
		         CASE llExpenses AND NOT llRevenue
		            REPLACE nMktgExp WITH 0, nExpense WITH 0, nTotalE1 WITH 0, nTotalE2 WITH 0, nTotalE3 WITH 0, nTotalE4 WITH 0,  ;
		               nTotalE5 WITH 0, nTotalEA WITH 0, nTotalEB WITH 0, nNetCheck WITH nNetCheck+m.nExpense
		
		         CASE llRevenue AND llExpenses
		            DELETE NEXT 1
		      ENDCASE
		
		   ELSE
		*  There's no other record for this well for this year/period for this run, so just switch the existing record to the new year/period
		*  Depending on whether it's only being done for revenue/expense, it may require new records to be inserted
		      GOTO lnRecNo
		
		      DO CASE
		         CASE llRevenue AND NOT llExpenses
		*  Now replace the income parts of the disbhist record with zeros.
		*  Then insert a new disbhist/ownpcts record with just the income numbers
		            REPLACE nIncome WITH 0, nSevTaxes WITH 0, nNetCheck WITH m.nExpense*-1, nFlatRate WITH 0,  ;
		               nOilRev WITH 0, nGasRev WITH 0, nOthRev WITH 0, nTrpRev WITH 0, nMiscRev1 WITH 0, nMiscRev2 WITH 0, nGather WITH 0,  ;
		               nCompress WITH 0, lFlat WITH .F., nFlatFreq WITH 0, nOilTax1 WITH 0, nOilTax2 WITH 0, nOilTax3 WITH 0, nOilTax4 WITH 0,  ;
		               nGasTax1 WITH 0, nGasTax2 WITH 0, nGasTax3 WITH 0, nGasTax4 WITH 0, nOthTax1 WITH 0, nOthTax2 WITH 0, nOthTax3 WITH 0,  ;
		               nOthTax4 WITH 0, nTaxWith WITH 0, nBackWith WITH 0
		
		            swselect('ownpcts')
		            SET ORDER TO ciddisb
		            IF SEEK(m.ciddisb)
		               SCATTER MEMVAR
		            ENDIF
		
		            lciddisb = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Owner History')
		            SELECT disbhist1
		            SET ORDER TO ciddisb
		            SET DELE OFF
		            DO WHILE SEEK(lciddisb)
		               lciddisb = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Owner History')
		            ENDDO
		            SELECT ownpcts
		            DO WHILE SEEK(lciddisb)
		               lciddisb = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Owner History')
		            ENDDO
		            SET DELE ON
		
		*  Now re-assign m.ciddisb to the new value, and then insert into disbhist/ownpcts
		            m.ciddisb = lciddisb
		            m.nNetCheck = m.nIncome - m.nSevTaxes - m.nCompress - m.nGather
		
		*  If they're direct paid, we have to subtract that revenue back off the net check amount, since it was never
		*  included in that figure in the first place.
		            IF m.cDirect = 'O' OR m.cDirect = 'B'
		               m.nNetCheck = m.nNetCheck - m.nOilRev
		            ENDIF
		            IF m.cDirect = 'G' OR m.cDirect = 'B'
		               m.nNetCheck = m.nNetCheck - m.nGasRev
		            ENDIF
		
		*  Blank out the expense values from disbhist before inserting, since this should be revenue only
		            STORE 0 TO m.nMktgExp, m.nExpense, m.nTotalE1, m.nTotalE2, m.nTotalE3, m.nTotalE4, m.nTotalE5, m.nTotalEA, m.nTotalEB
		            m.hYear = lcYear2
		            m.hPeriod = lcPeriod2
		
		            INSERT INTO ownpcts FROM MEMVAR
		            INSERT INTO disbhist FROM MEMVAR
		
		*  Back to original record
		            SELECT disbhist
		            GOTO lnRecNo
		
		         CASE llExpenses AND NOT llRevenue
		*  Now replace the expense parts of the disbhist record with zeros.
		*  Then insert a new disbhist/ownpcts record with just the expense numbers
		            REPLACE nMktgExp WITH 0, nExpense WITH 0, nTotalE1 WITH 0, nTotalE2 WITH 0, nTotalE3 WITH 0, nTotalE4 WITH 0,  ;
		               nTotalE5 WITH 0, nTotalEA WITH 0, nTotalEB WITH 0, nNetCheck WITH nNetCheck + m.nExpense
		
		            swselect('ownpcts')
		            SET ORDER TO ciddisb
		            IF SEEK(m.ciddisb)
		               SCATTER MEMVAR
		            ENDIF
		
		            lciddisb = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Owner History')
		            SELECT disbhist1
		            SET ORDER TO ciddisb
		            SET DELE OFF
		            DO WHILE SEEK(lciddisb)
		               lciddisb = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Owner History')
		            ENDDO
		            SELECT ownpcts
		            DO WHILE SEEK(lciddisb)
		               lciddisb = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Owner History')
		            ENDDO
		            SET DELE ON
		
		*  Now re-assign m.ciddisb to the new value, and then insert into disbhist/ownpcts
		            m.ciddisb = lciddisb
		            m.nNetCheck = m.nExpense * -1
		            m.lFlat = .F.
		            m.nFlatFreq = 0
		
		*  Blank out the income values from disbhist before inserting, since this should be expenses only
		            STORE 0 TO m.nIncome, m.nSevTaxes, m.nFlatRate, m.nOilRev, m.nGasRev, m.nOthRev, m.nTrpRev, m.nMiscRev1,  ;
		               m.nMiscRev2, m.nGather, m.nCompress, m.nOilTax1, m.nOilTax2, m.nOilTax3, m.nOilTax4, m.nGasTax1,  ;
		               m.nGasTax2, m.nGasTax3, m.nGasTax4, m.nOthTax1, m.nOthTax2, m.nOthTax3, m.nOthTax4, m.nTaxWith,  ;
		               m.nTaxPct, m.nBackWith
		
		            m.hYear = lcYear2
		            m.hPeriod = lcPeriod2
		
		            INSERT INTO ownpcts FROM MEMVAR
		            INSERT INTO disbhist FROM MEMVAR
		
		*  Back to original record
		            SELECT disbhist
		            GOTO lnRecNo
		
		         CASE llRevenue AND llExpenses
		            REPLACE hPeriod WITH lcPeriod2, hYear WITH lcYear2
		
		      ENDCASE
		
		   ENDIF
		ENDSCAN
		
		*  Suspense - exclude lmanual records
		IF lcTypeClose = 'R'
		   WAIT WINDOW NOWAIT 'Processing Suspense History'
		   swselect('suspense')
		   SCAN FOR nRunno_in = lnRunno AND cRunYear_In = lcRunYear AND IIF(NOT llAllWells, cWellID = lcWellID,.T.)  ;
		         AND hYear = lcYear1 AND hPeriod = lcPeriod1 AND NOT lManual AND RECNO() > 0
		
		*  Store what recno() we're on, and then check to see if there's an existing disbhist record for this same year/period for this run.
		*  If there is, add this record's totals to it, and then delete/update the original record
		      lnRecNo = RECNO()
		      SCATTER MEMVAR
		
		*  So we know whether anything is actually being switched during the processing
		      llAnyRecords = .T.
		
		      LOCATE FOR cOwnerID == m.cOwnerID AND nRunno_in = lnRunno AND cRunYear_In = lcRunYear AND cWellID == m.cWellID AND hYear = lcYear2  ;
		         AND hPeriod = lcPeriod2 AND NOT lManual AND cRecType = 'R' AND lFlat = m.lFlat
		      IF FOUND()
		         IF llRevenue
		            REPLACE nIncome WITH nIncome+m.nIncome, nSevTaxes WITH nSevTaxes+m.nSevTaxes, nNetCheck WITH nNetCheck+m.nNetCheck,  ;
		               nFlatRate WITH nFlatRate+m.nFlatRate, nOilRev WITH nOilRev+m.nOilRev, nGasRev WITH nGasRev+m.nGasRev,  ;
		               nOthRev WITH nOthRev+m.nOthRev, nTrpRev WITH nTrpRev+m.nTrpRev, nMiscRev1 WITH nMiscRev1+m.nMiscRev1,  ;
		               nMiscRev2 WITH nMiscRev2+m.nMiscRev2, nGather WITH nGather+m.nGather, nCompress WITH nCompress+m.nCompress,  ;
		               nOilTax1 WITH nOilTax1+m.nOilTax1, nOilTax2 WITH nOilTax2+m.nOilTax2, nOilTax3 WITH nOilTax3+m.nOilTax3,  ;
		               nOilTax4 WITH nOilTax4+m.nOilTax4, nGasTax1 WITH nGasTax1+m.nGasTax1, nGasTax2 WITH nGasTax2+m.nGasTax2,  ;
		               nGasTax3 WITH nGasTax3+m.nGasTax3, nGasTax4 WITH nGasTax4+m.nGasTax4, nOthTax1 WITH nOthTax1+m.nOthTax1,  ;
		               nOthTax2 WITH nOthTax2+m.nOthTax2, nOthTax3 WITH nOthTax3+m.nOthTax3, nOthTax4 WITH nOthTax4+m.nOthTax4,  ;
		               nTaxWith WITH nTaxWith+m.nTaxWith, nBackWith WITH nBackWith+m.nBackWith
		         ENDIF
		
		         IF llExpenses
		            REPLACE nMktgExp WITH nMktgExp+m.nMktgExp, nExpense WITH nExpense+m.nExpense, nTotalE1 WITH nTotalE1+m.nTotalE1,  ;
		               nTotalE2 WITH nTotalE2+m.nTotalE2, nTotalE3 WITH nTotalE3+m.nTotalE3, nTotalE4 WITH nTotalE4+m.nTotalE4,  ;
		               nTotalE5 WITH nTotalE5+m.nTotalE5, nTotalEA WITH nTotalEA+m.nTotalEA, nTotalEB WITH nTotalEB+m.nTotalEB
		         ENDIF
		
		*  Now we're going to go back to the original record.  If switching both rev/exp, we can delete it.  Otherwise, subtract off
		*  whatever is being switched
		         GOTO lnRecNo
		
		         DO CASE
		            CASE llRevenue AND NOT llExpenses
		               REPLACE nIncome WITH 0, nSevTaxes WITH 0, nNetCheck WITH m.nExpense*-1, nFlatRate WITH 0,  ;
		                  nOilRev WITH 0, nGasRev WITH 0, nOthRev WITH 0, nTrpRev WITH 0, nMiscRev1 WITH 0, nMiscRev2 WITH 0, nGather WITH 0,  ;
		                  nCompress WITH 0, lFlat WITH .F., nFlatFreq WITH 0, nOilTax1 WITH 0, nOilTax2 WITH 0, nOilTax3 WITH 0, nOilTax4 WITH 0,  ;
		                  nGasTax1 WITH 0, nGasTax2 WITH 0, nGasTax3 WITH 0, nGasTax4 WITH 0, nOthTax1 WITH 0, nOthTax2 WITH 0, nOthTax3 WITH 0,  ;
		                  nOthTax4 WITH 0, nTaxWith WITH 0, nBackWith WITH 0
		            CASE llExpenses AND NOT llRevenue
		               REPLACE nMktgExp WITH 0, nExpense WITH 0, nTotalE1 WITH 0, nTotalE2 WITH 0, nTotalE3 WITH 0, nTotalE4 WITH 0,  ;
		                  nTotalE5 WITH 0, nTotalEA WITH 0, nTotalEB WITH 0, nNetCheck WITH nNetCheck+m.nExpense
		            CASE llRevenue AND llExpenses
		               DELETE NEXT 1
		         ENDCASE
		
		      ELSE
		*  There's no other record for this well for this year/period for this run, so just switch the existing record to the new year/period
		*  Depending on whether it's only being done for revenue/expense, it may require new records to be inserted
		         GOTO lnRecNo
		
		         DO CASE
		            CASE llRevenue AND NOT llExpenses
		*  Now replace the income parts of the suspense record with zeros.
		*  Then insert a new disbhist/ownpcts record with just the income numbers
		               REPLACE nIncome WITH 0, nSevTaxes WITH 0, nNetCheck WITH m.nExpense*-1, nFlatRate WITH 0,  ;
		                  nOilRev WITH 0, nGasRev WITH 0, nOthRev WITH 0, nTrpRev WITH 0, nMiscRev1 WITH 0, nMiscRev2 WITH 0, nGather WITH 0,  ;
		                  nCompress WITH 0, lFlat WITH .F., nFlatFreq WITH 0, nOilTax1 WITH 0, nOilTax2 WITH 0, nOilTax3 WITH 0, nOilTax4 WITH 0,  ;
		                  nGasTax1 WITH 0, nGasTax2 WITH 0, nGasTax3 WITH 0, nGasTax4 WITH 0, nOthTax1 WITH 0, nOthTax2 WITH 0, nOthTax3 WITH 0,  ;
		                  nOthTax4 WITH 0, nTaxWith WITH 0, nBackWith WITH 0
		
		               lciddisb = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Owner History')
		               SELECT suspense1
		               SET ORDER TO ciddisb
		               SET DELE OFF
		               DO WHILE SEEK(lciddisb)
		                  lciddisb = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Owner History')
		               ENDDO
		               SET DELE ON
		
		*  Now re-assign m.ciddisb to the new value, and then insert into suspense
		               m.ciddisb = lciddisb
		               m.nNetCheck = m.nIncome - m.nSevTaxes - m.nCompress - m.nGather
		
		*  Blank out the expense values from suspense before inserting, since this should be revenue only
		               STORE 0 TO m.nMktgExp, m.nExpense, m.nTotalE1, m.nTotalE2, m.nTotalE3, m.nTotalE4, m.nTotalE5, m.nTotalEA, m.nTotalEB
		
		*  If they're direct paid, we have to subtract that revenue back off the net check amount, since it was never
		*  included in that figure in the first place.
		               IF m.cDirect = 'O' OR m.cDirect = 'B'
		                  m.nNetCheck = m.nNetCheck - m.nOilRev
		               ENDIF
		               IF m.cDirect = 'G' OR m.cDirect = 'B'
		                  m.nNetCheck = m.nNetCheck - m.nGasRev
		               ENDIF
		
		               m.hYear = lcYear2
		               m.hPeriod = lcPeriod2
		
		               INSERT INTO suspense FROM MEMVAR
		
		*  Back to original record
		               SELECT suspense
		               GOTO lnRecNo
		
		            CASE llExpenses AND NOT llRevenue
		*  Now replace the expense parts of the suspense record with zeros.
		*  Then insert a new suspense record with just the expense numbers
		               REPLACE nMktgExp WITH 0, nExpense WITH 0, nTotalE1 WITH 0, nTotalE2 WITH 0, nTotalE3 WITH 0, nTotalE4 WITH 0,  ;
		                  nTotalE5 WITH 0, nTotalEA WITH 0, nTotalEB WITH 0, nNetCheck WITH nNetCheck + m.nExpense
		
		               lciddisb = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Owner History')
		               SELECT suspense1
		               SET ORDER TO ciddisb
		               SET DELE OFF
		               DO WHILE SEEK(lciddisb)
		                  lciddisb = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Owner History')
		               ENDDO
		               SET DELE ON
		
		*  Now re-assign m.ciddisb to the new value, and then insert into suspense
		               m.ciddisb = lciddisb
		               m.nNetCheck = m.nExpense * -1
		               m.lFlat = .F.
		               m.nFlatFreq = 0
		
		*  Blank out the income values from suspense before inserting, since this should be expenses only
		               STORE 0 TO m.nIncome, m.nSevTaxes, m.nFlatRate, m.nOilRev, m.nGasRev, m.nOthRev, m.nTrpRev, m.nMiscRev1,  ;
		                  m.nMiscRev2, m.nGather, m.nCompress, m.nOilTax1, m.nOilTax2, m.nOilTax3, m.nOilTax4, m.nGasTax1,  ;
		                  m.nGasTax2, m.nGasTax3, m.nGasTax4, m.nOthTax1, m.nOthTax2, m.nOthTax3, m.nOthTax4, m.nTaxWith,  ;
		                  m.nTaxPct, m.nBackWith
		
		               m.hYear = lcYear2
		               m.hPeriod = lcPeriod2
		
		               INSERT INTO suspense FROM MEMVAR
		
		*  Back to original record
		               SELECT suspense
		               GOTO lnRecNo
		
		            CASE llRevenue AND llExpenses
		               REPLACE hPeriod WITH lcPeriod2, hYear WITH lcYear2
		
		         ENDCASE
		      ENDIF
		   ENDSCAN
		ENDIF
		
		*  Wellhist - exclude manual records and "J" records
		WAIT WINDOW NOWAIT 'Processing Well History'
		swselect('wellhist')
		SCAN FOR nRunno = lnRunno AND cRunYear = lcRunYear AND IIF(NOT llAllWells, cWellID = lcWellID,.T.)  ;
		      AND hYear = lcYear1 AND hPeriod = lcPeriod1 AND NOT lManual AND cRecType = lcTypeClose AND RECNO() > 0
		
		*  Store what recno() we're on, and then check to see if there's an existing wellhist record for this same year/period for this run.
		*  If there is, add this record's totals to it, and then delete/update the original record
		   lnRecNo = RECNO()
		   SCATTER MEMVAR
		
		*  So we know whether anything is actually being switched during the processing
		   llAnyRecords = .T.
		
		*  Look for an existing record for the same year/period.  If it exists, add to it.
		   LOCATE FOR nRunno = lnRunno AND cRunYear = lcRunYear AND cWellID = m.cWellID  ;
		      AND hYear = lcYear2 AND hPeriod = lcPeriod2 AND NOT lManual AND cRecType = lcTypeClose
		
		   IF FOUND()
		      IF llRevenue
		         REPLACE nGasInc WITH nGasInc+m.nGasInc, nGrossGas WITH nGrossGas+m.nGrossGas, nOilInc WITH nOilInc+m.nOilInc,  ;
		            nGrossOil WITH nGrossOil+m.nGrossOil, nOthInc WITH nOthInc+m.nOthInc, nTrpInc WITH nTrpInc+m.nTrpInc,  ;
		            nMiscInc1 WITH nMiscInc1+m.nMiscInc1, nMiscInc2 WITH nMiscInc2+m.nMiscInc2, nTotMCF WITH nTotMCF+m.nTotMCF,  ;
		            nTotBBL WITH nTotBBL+m.nTotBBL, nTotProd WITH nTotProd+m.nTotProd, nTotSalt WITH nTotSalt+m.nTotSalt,  ;
		            nGrossMCF WITH nGrossMCF+m.nGrossMCF, nGrossBBL WITH nGrossBBL+m.nGrossBBL, nFlatGas WITH nFlatGas+m.nFlatGas,  ;
		            nFlatOil WITH nFlatOil+m.nFlatOil, nGather WITH nGather+m.nGather, nCompress WITH nCompress+m.nCompress,  ;
		            nTotMCFTxR WITH nTotMCFTxR+m.nTotMCFTxR, nTotMCFTxW WITH nTotMCFTxW+m.nTotMCFTxW, nTotBBLTxR WITH nTotBBLTxR+m.nTotBBLTxR,  ;
		            nTotBBLTxW WITH nTotBBLTxW+m.nTotBBLTxW, nTotBBLTx1 WITH nTotBBLTx1+m.nTotBBLTx1, nTotBBLTx2 WITH nTotBBLTx2+m.nTotBBLTx2,  ;
		            nTotBBLtx3 WITH nTotBBLtx3+m.nTotBBLtx3, nTotBBLTx4 WITH nTotBBLTx4+m.nTotBBLTx4, nTotMCFTx1 WITH nTotMCFTx1+m.nTotMCFTx1,  ;
		            nTotMCFTx2 WITH nTotMCFTx2+m.nTotMCFTx2, nTotMCFTx3 WITH nTotMCFTx3+m.nTotMCFTx3, nTotMCFTx4 WITH nTotMCFTx4+m.nTotMCFTx4,  ;
		            nTotOthTx1 WITH nTotOthTx1+m.nTotOthTx1, nTotOthTx2 WITH nTotOthTx2+m.nTotOthTx2, nTotOthTx3 WITH nTotOthTx3+m.nTotOthTx3,  ;
		            nTotOthTx4 WITH nTotOthTx4+m.nTotOthTx4, ngBBLTax1 WITH ngBBLTax1+m.ngBBLTax1, ngMCFTax1 WITH ngMCFTax1+m.ngMCFTax1,  ;
		            ngOthTax1 WITH ngOthTax1+m.ngOthTax1, ngBBLTax2 WITH ngBBLTax2+m.ngBBLTax2, ngMCFTax2 WITH ngMCFTax2+m.ngMCFTax2,  ;
		            ngOthTax2 WITH ngOthTax2+m.ngOthTax2, ngBBLTax3 WITH ngBBLTax3+m.ngBBLTax3, ngMCFTax3 WITH ngMCFTax3+m.ngMCFTax3,  ;
		            ngOthTax3 WITH ngOthTax3+m.ngOthTax3, ngBBLTax4 WITH ngBBLTax4+m.ngBBLTax4, ngMCFTax4 WITH ngMCFTax4+m.ngMCFTax4,  ;
		            ngOthTax4 WITH ngOthTax4+m.ngOthTax4
		      ENDIF
		
		      IF llExpenses
		         REPLACE nTotMktg WITH nTotMktg+m.nTotMktg, nTotalE WITH nTotalE+m.nTotalE, nExpCl1 WITH nExpCl1+m.nExpCl1,  ;
		            nExpCl2 WITH nExpCl2+m.nExpCl2, nExpCl3 WITH nExpCl3+m.nExpCl3, nExpCl4 WITH nExpCl4+m.nExpCl4,  ;
		            nExpCl5 WITH nExpCl5+m.nExpCl5, nExpClA WITH nExpClA+m.nExpClA, nExpClB WITH nExpClB+m.nExpClB,  ;
		            nNetExp WITH nNetExp+m.nNetExp
		      ENDIF
		
		*  Now we're going to go back to the original record.  If switching both rev/exp, we can delete it.  Otherwise, subtract off
		*  whatever is being switched
		      GOTO lnRecNo
		
		      DO CASE
		         CASE llRevenue AND NOT llExpenses
		            REPLACE nGasInc WITH 0, nGrossGas WITH 0, nOilInc WITH 0, nGrossOil WITH 0, nOthInc WITH 0, nTrpInc WITH 0,  ;
		               nMiscInc1 WITH 0, nMiscInc2 WITH 0, nTotMCF WITH 0, nTotBBL WITH 0, nTotProd WITH 0, nTotSalt WITH 0,  ;
		               nGrossMCF WITH 0, nGrossBBL WITH 0, nFlatGas WITH 0, nFlatOil WITH 0, nGather WITH 0, nCompress WITH 0,  ;
		               nTotMCFTxR WITH 0, nTotMCFTxW WITH 0, nTotBBLTxR WITH 0, nTotBBLTxW WITH 0, nTotBBLTx1 WITH 0, nTotBBLTx2 WITH 0,  ;
		               nTotBBLtx3 WITH 0, nTotBBLTx4 WITH 0, nTotMCFTx1 WITH 0, nTotMCFTx2 WITH 0, nTotMCFTx3 WITH 0, nTotMCFTx4 WITH 0, ;
		               nTotOthTx1 WITH 0, nTotOthTx2 WITH 0, nTotOthTx3 WITH 0, nTotOthTx4 WITH 0, ngBBLTax1 WITH 0, ngMCFTax1 WITH 0, ngOthTax1 WITH 0,  ;
		               ngBBLTax2 WITH 0, ngMCFTax2 WITH 0, ngOthTax2 WITH 0, ngBBLTax3 WITH 0, ngMCFTax3 WITH 0, ngOthTax3 WITH 0,  ;
		               ngBBLTax4 WITH 0, ngMCFTax4 WITH 0, ngOthTax4 WITH 0
		
		         CASE llExpenses AND NOT llRevenue
		            REPLACE nTotMktg WITH 0, nTotalE WITH 0, nExpCl1 WITH 0, nExpCl2 WITH 0, nExpCl3 WITH 0, nExpCl4 WITH 0, nExpCl5 WITH 0,  ;
		               nExpClA WITH 0, nExpClB WITH 0, nNetExp WITH 0
		
		         CASE llRevenue AND llExpenses
		            DELETE NEXT 1
		
		      ENDCASE
		
		   ELSE
		*  There's no other record for this well for this year/period for this run, so just switch the existing record to the new year/period
		*  Depending on whether it's only being done for revenue/expense, it may require new records to be inserted
		      GOTO lnRecNo
		
		      DO CASE
		         CASE llRevenue AND NOT llExpenses
		
		*  Now replace the income parts of the wellhist record with zeros.
		*  Then insert a new wellhist record with just the income numbers
		            REPLACE nGasInc WITH 0, nGrossGas WITH 0, nOilInc WITH 0, nGrossOil WITH 0, nOthInc WITH 0, nTrpInc WITH 0,  ;
		               nMiscInc1 WITH 0, nMiscInc2 WITH 0, nTotMCF WITH 0, nTotBBL WITH 0, nTotProd WITH 0, nTotSalt WITH 0,  ;
		               nGrossMCF WITH 0, nGrossBBL WITH 0, nFlatGas WITH 0, nFlatOil WITH 0, nGather WITH 0, nCompress WITH 0,  ;
		               nTotMCFTxR WITH 0, nTotMCFTxW WITH 0, nTotBBLTxR WITH 0, nTotBBLTxW WITH 0, nTotBBLTx1 WITH 0, nTotBBLTx2 WITH 0,  ;
		               nTotBBLtx3 WITH 0, nTotBBLTx4 WITH 0, nTotMCFTx1 WITH 0, nTotMCFTx2 WITH 0, nTotMCFTx3 WITH 0, nTotMCFTx4 WITH 0, ;
		               nTotOthTx1 WITH 0, nTotOthTx2 WITH 0, nTotOthTx3 WITH 0, nTotOthTx4 WITH 0, ngBBLTax1 WITH 0, ngMCFTax1 WITH 0, ngOthTax1 WITH 0,  ;
		               ngBBLTax2 WITH 0, ngMCFTax2 WITH 0, ngOthTax2 WITH 0, ngBBLTax3 WITH 0, ngMCFTax3 WITH 0, ngOthTax3 WITH 0,  ;
		               ngBBLTax4 WITH 0, ngMCFTax4 WITH 0, ngOthTax4 WITH 0, nroyint WITH 0, nwrkint WITH 0
		
		            lcidwhst = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Well History')
		            SELECT wellhist1
		            SET DELE OFF
		            SET ORDER TO cidwhst
		            DO WHILE SEEK(lcidwhst)
		               lcidwhst = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Well History')
		            ENDDO
		            SET DELE ON
		
		*  Now re-assign m.cidwhst to the new value, and then insert into wellhist
		            m.cidwhst = lcidwhst
		
		*  Blank out the expense values from wellhist before inserting, since this should be revenue only
		            STORE 0 TO m.nTotMktg, m.nTotalE, m.nExpCl1, m.nExpCl2, m.nExpCl3, m.nExpCl4, m.nExpCl5, m.nExpClA, m.nExpClB, m.nNetExp
		
		            m.hYear = lcYear2
		            m.hPeriod = lcPeriod2
		
		            INSERT INTO wellhist FROM MEMVAR
		
		*  Since the record pointer got moved when incrementing the counter, go back to current record
		            SELECT wellhist
		            GOTO lnRecNo
		
		         CASE llExpenses AND NOT llRevenue
		*  Now replace the expense parts of the wellhist record with zeros.
		*  Then insert a new wellhist record with just the expense numbers
		            REPLACE nTotMktg WITH 0, nTotalE WITH 0, nExpCl1 WITH 0, nExpCl2 WITH 0, nExpCl3 WITH 0, nExpCl4 WITH 0, nExpCl5 WITH 0,  ;
		               nExpClA WITH 0, nExpClB WITH 0, nNetExp WITH 0, nroyint WITH 0, nwrkint WITH 0
		
		
		            lcidwhst = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Well History')
		            SELECT wellhist1
		            SET DELE OFF
		            SET ORDER TO cidwhst
		            DO WHILE SEEK(lcidwhst)
		               lcidwhst = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Well History')
		            ENDDO
		            SET DELE ON
		
		*  Now re-assign m.cidwhst to the new value, and then insert into wellhist
		            m.cidwhst = lcidwhst
		
		*  Blank out the income values from wellhist before inserting, since this should be expense only
		            STORE 0 TO m.nGasInc, m.nGrossGas, m.nOilInc, m.nGrossOil, m.nOthInc, m.nTrpInc,  ;
		               m.nMiscInc1, m.nMiscInc2, m.nTotMCF, m.nTotBBL, m.nTotProd, m.nTotSalt,  ;
		               m.nGrossMCF, m.nGrossBBL, m.nFlatGas, m.nFlatOil, m.nGather, m.nCompress,  ;
		               m.nTotNCFTxR, m.nTotMCFTxW, m.nTotBBLTxR, m.nTotBBLTxW, m.nTotBBLTx1, m.nTotBBLTx2,  ;
		               m.nTotBBLtx3, m.nTotBBLTx4, m.nTotMCFTx1, m.nTotMCFTx2, m.nTotMCFTx3, m.nTotMCFTx4, ;
		               m.nTotOthTx1, m.nTotOthTx2, m.nTotOthTx3, m.nTotOthTx4, m.ngBBLTx1, m.ngMCFTx1, m.ngOthTax1,  ;
		               m.ngBBLTx2, m.ngMCFTx2, m.ngOthTax2, m.ngBBLTx3, m.ngMCFTx3, m.ngOthTax3,  ;
		               m.ngBBLTx4, m.ngMCFTx4, m.ngOthTax4, nroyint, nwrkint
		
		            m.hYear = lcYear2
		            m.hPeriod = lcPeriod2
		
		            INSERT INTO wellhist FROM MEMVAR
		
		*  Since the record pointer got moved when incrementing the counter, go back to current record
		            SELECT wellhist
		            GOTO lnRecNo
		
		         CASE llRevenue AND llExpenses
		            REPLACE hPeriod WITH lcPeriod2, hYear WITH lcYear2
		
		      ENDCASE
		   ENDIF
		
		ENDSCAN
		
		* Change the prod period on invoices if this is a JIB closing
		IF lcTypeClose = 'J'
		   swselect('invhdr')
		   SCAN FOR cDMBatch == lcDMBatch
		      lcBatch = cBatch
		      swselect('invdet')
		      SCAN FOR cBatch == lcBatch AND cProdYear == lcYear1 AND cProdPrd == lcPeriod1
		         REPLACE cProdYear WITH lcYear2, ;
		            cProdPrd  WITH lcPeriod2
		         llAnyRecords = .T.
		      ENDSCAN
		   ENDSCAN
		ENDIF
		
		
		*  Only create the transferlog record if it actually did something
		IF llAnyRecords
		
		   WAIT WINDOW NOWAIT 'Creating Log of Changes...'
		
		   CREATE CURSOR TransferLogTemp  ;
		      (dDate         d,      ;
		      cTime          c(8),   ;
		      cUser          c(20),  ;
		      cOrigOwner     c(10),  ;
		      lAll           L,      ;
		      cWellID        c(10),  ;
		      cTypeInv       c(1),   ;
		      cOwnerID1      c(10),  ;
		      Interest1      N(11, 7),  ;
		      cOwnerID2      c(10),  ;
		      Interest2      N(11, 7),  ;
		      cOwnerID3      c(10),  ;
		      Interest3      N(11, 7),  ;
		      cOwnerID4      c(10),  ;
		      Interest4      N(11, 7),  ;
		      cOwnerID5      c(10),  ;
		      Interest5      N(11, 7),  ;
		      cOwnerID6      c(10),  ;
		      Interest6      N(11, 7),  ;
		      cOwnerID7      c(10),  ;
		      Interest7      N(11, 7),  ;
		      cOwnerID8      c(10),  ;
		      Interest8      N(11, 7),  ;
		      cOwnerID9      c(10),  ;
		      Interest9      N(11, 7),  ;
		      cOwnerID10     c(10),  ;
		      Interest10     N(11, 7),  ;
		      cOwnerID11     c(10),  ;
		      Interest11     N(11, 7),  ;
		      cOwnerID12     c(10),  ;
		      Interest12     N(11, 7),  ;
		      cOwnerID13     c(10),  ;
		      Interest13     N(11, 7),  ;
		      cOwnerID14     c(10),  ;
		      Interest14     N(11, 7),  ;
		      cOwnerID15     c(10),  ;
		      Interest15     N(11, 7),  ;
		      cOwnerID16     c(10),  ;
		      Interest16     N(11, 7),  ;
		      cOwnerID17     c(10),  ;
		      Interest17     N(11, 7),  ;
		      cOwnerID18     c(10),  ;
		      Interest18     N(11, 7),  ;
		      cOwnerID19     c(10),  ;
		      Interest19     N(11, 7),  ;
		      cOwnerID20     c(10),  ;
		      Interest20     N(11, 7),  ;
		      lHistory       L,        ;
		      cRunNo         c(33),  ;
		      lAnyDOI        L,  ;
		      lAnyHist       L,  ;
		      lAnySusp       L)
		
		   m.dDate      = DATE()
		   m.cTime      = TIME()
		   m.cUser      = m.goapp.cUser
		   m.cOrigOwner = ALLTRIM(lcYear1) + '/' + ALLTRIM(lcPeriod1) + IIF(llRevenue,'R','') + IIF(llExpenses,'E','')
		   m.lAll       = llAllWells
		   m.cWellID    = lcWellID
		   m.cOwnerID1  = lcYear2 + '/' + lcPeriod2
		   m.cTypeInv   = ''
		
		   INSERT INTO TransferLogTemp FROM MEMVAR
		
		   IF NOT FILE(ALLT(m.goapp.cDataFilePath) + 'transferlog.dbf')
		      SELECT TransferLogTemp
		      COPY TO ALLT(m.goapp.cDataFilePath) + 'transferlog'
		   ELSE
		      IF NOT USED('transferlog')
		         USE ALLT(m.goapp.cDataFilePath) + 'transferlog' IN 0
		      ENDIF
		      SELECT transferlog
		      APPEND FROM DBF('transferlogtemp')
		      USE IN transferlog
		   ENDIF
		   USE IN TransferLogTemp
		   WAIT CLEAR
		ENDIF
		
		
		BEGIN TRANSACTION
		SELECT wellhist
		=TABLEUPDATE(.T.)
		SELECT disbhist
		=TABLEUPDATE(.T.)
		SELECT suspense
		=TABLEUPDATE(.T.)
		SELECT appurchd
		=TABLEUPDATE(.T.)
		SELECT csrctdet
		=TABLEUPDATE(.T.)
		SELECT expsusp
		=TABLEUPDATE(.T.)
		SELECT incsusp
		=TABLEUPDATE(.T.)
		SELECT expense
		=TABLEUPDATE(.T.)
		SELECT ownpcts
		=TABLEUPDATE(.T.)
		SELECT income
		=TABLEUPDATE(.T.)
		END TRANSACTION
		
		IF NOT llAnyRecords
		   THISFORM.omessage.DISPLAY('No matching history records were found for the year/period in Step 2, so no past data was switched.')
		ELSE
		   THISFORM.omessage.DISPLAY('Finished switching the past data.')
		ENDIF
		
	ENDPROC

	PROCEDURE chkAllWells.Click
		IF THIS.VALUE
		   thisform.chkOneWell.Value = .f.
		   THIS.PARENT.cmdLookWell.VISIBLE = .f.
		   THIS.PARENT.txtcWellID.VISIBLE = .f.
		   THIS.PARENT.txtcwellName.VISIBLE = .f.
		ELSE
		   thisform.chkOneWell.Value = .t.
		   THIS.PARENT.cmdLookWell.VISIBLE = .t.
		   THIS.PARENT.txtcWellID.VISIBLE = .t.
		   THIS.PARENT.txtcwellName.VISIBLE = .t.
		ENDIF
		
		DODEFAULT()
		
	ENDPROC

	PROCEDURE chkExpenses.Click
		IF NOT this.Value
		   lcTypeClose = THISFORM.runcombo1.LISTITEM(THISFORM.runcombo1.LISTITEMID,6)
		   IF lcTypeClose = 'J'
		      this.set('value',.t.)
		   ENDIF
		ENDIF
		
	ENDPROC

	PROCEDURE chkOneWell.Click
		IF THIS.VALUE
		   thisform.chkAllWells.Value = .f.
		   THIS.PARENT.cmdLookWell.VISIBLE = .T.
		   THIS.PARENT.txtcWellID.VISIBLE = .T.
		   THIS.PARENT.txtcwellName.VISIBLE = .T.
		ELSE
		   thisform.chkAllWells.Value = .t.
		   THIS.PARENT.cmdLookWell.VISIBLE = .F.
		   THIS.PARENT.txtcWellID.VISIBLE = .F.
		   THIS.PARENT.txtcwellName.VISIBLE = .F.
		ENDIF
		
		DODEFAULT()
		
	ENDPROC

	PROCEDURE chkRevenue.When
		lcTypeClose = THISFORM.runcombo1.LISTITEM(THISFORM.runcombo1.LISTITEMID,6)
		IF lcTypeClose <> 'R'
		   RETURN .f.
		ELSE
		   RETURN .t.   
		ENDIF 
	ENDPROC

	PROCEDURE cmdCopy.Click
		thisform.process()
	ENDPROC

	PROCEDURE cmdExit.Click
		thisform.release()
	ENDPROC

	PROCEDURE cmdLookWell.Click
		LOCAL lcList
		PRIV llOK
		
		llOK = .T.
		lcList = 'cwellid,cwellname,cgroup,cwellstat'
		
		DO FORM ..\CUSTOM\picklist WITH 'Wells', lcList, THISFORM.txtcwellid.VALUE, 4
		
		IF llOK
		   THISFORM.txtcwellid.VALUE = wells.cwellid
		   THISFORM.txtcwellid.REFRESH()
		   THISFORM.txtcWellName.VALUE = wells.cwellname
		   THISFORM.txtcWellName.REFRESH()
		ENDIF
		
		THISFORM.setnextcontrol(THISFORM.txtcwellid)
		
	ENDPROC

	PROCEDURE Runcombo1.Init
		IF DODEFAULT()
		   this.listitemid = 1
		ENDIF   
	ENDPROC

	PROCEDURE Runcombo1.Valid
		IF DODEFAULT()
		   IF THISFORM.runcombo1.LISTITEM(THISFORM.runcombo1.LISTITEMID,6) = 'J'
		      thisform.chkRevenue.Enabled = .f.
		      thisform.chkexpenses.set('Value',.t.)
		      thisform.chkRevenue.set('Value',.f.)
		   ELSE
		      thisform.chkrevenue.Enabled = .t.
		   ENDIF
		ENDIF 
	ENDPROC

	PROCEDURE txtcWellID.GotFocus
		ON KEY LABEL F2 _SCREEN.ACTIVEFORM.cmdLookWell.CLICK()
		DODEFAULT()
		
	ENDPROC

	PROCEDURE txtcWellID.InteractiveChange
		IF DODEFAULT()
		   SELECT wells
		   LOCATE FOR cwellid == this.Value
		   IF FOUND()
		      thisform.txtcWellName.set('value',wells.cWellName)
		   ELSE
		      thisform.txtcWellName.set('value','')
		   ENDIF 
		ENDIF    
	ENDPROC

	PROCEDURE txtcWellID.LostFocus
		ON KEY LABEL F2 *
		DODEFAULT()
		
	ENDPROC

	PROCEDURE txtcwellname.When
		RETURN .f.
		
	ENDPROC

	PROCEDURE txtPeriod1.Valid
		IF EMPTY(this.Value)
		   this.value = PADL(STR(MONTH(DATE()),2),2,'0')
		ENDIF
		
		DODEFAULT()
	ENDPROC

	PROCEDURE txtPeriod2.Valid
		IF EMPTY(this.Value)
		   this.value = PADL(STR(MONTH(DATE()),2),2,'0')
		ENDIF
		
		DODEFAULT()
	ENDPROC

	PROCEDURE txtYear1.Init
		DODEFAULT()
		this.value = STR(YEAR(DATE()),4)
		
	ENDPROC

	PROCEDURE txtYear1.Valid
		IF EMPTY(this.Value)
		   this.value = STR(YEAR(DATE()),4)
		ENDIF
		
		DODEFAULT()
	ENDPROC

	PROCEDURE txtYear2.Init
		DODEFAULT()
		this.value = STR(YEAR(DATE()),4)
		
	ENDPROC

	PROCEDURE txtYear2.Valid
		IF EMPTY(this.Value)
		   this.value = STR(YEAR(DATE()),4)
		ENDIF
		
		DODEFAULT()
	ENDPROC

ENDDEFINE
