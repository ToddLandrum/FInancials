*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="ten99mag.scx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
#INCLUDE "..\..\..\3rdparty\vfp2c32\vfp2c32\vfp2c.h"

DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="2" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Cursor1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor5" UniqueID="" Timestamp="" />

	AutoOpenTables = .F.
	DataSource = .NULL.
	Height = 519
	Left = 40
	Name = "Dataenvironment"
	Top = 235
	Width = 594

	ADD OBJECT 'Cursor1' AS cursor WITH ;
		Alias = "tax1099", ;
		CursorSource = "tax1099", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Filter = "NOT DELETED()", ;
		Height = 91, ;
		Left = 17, ;
		Name = "Cursor1", ;
		Top = 17, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor2' AS cursor WITH ;
		Alias = "vendor", ;
		CursorSource = "vendor", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 150, ;
		Name = "Cursor2", ;
		Order = "cvendorid", ;
		Top = 20, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor3' AS cursor WITH ;
		Alias = "investor", ;
		CursorSource = "investor", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 290, ;
		Name = "Cursor3", ;
		Top = 20, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor5' AS cursor WITH ;
		Alias = "tax1099st", ;
		CursorSource = "tax1099st", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 23, ;
		Name = "Cursor5", ;
		Top = 162, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

ENDDEFINE

DEFINE CLASS form1099mag AS frmformcustom OF "..\custom\cforms.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="chkCorrect" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chk2Part2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chk2Part1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdCreate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdExit" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcTCC" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcYear" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom6" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chklByWell" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cntgetfile1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkSelected" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblSelected" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkTestFile" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chk1099Misc" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chk1099NEC" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: buildreca		&& Builds an "A" record
		*m: buildrecb		&& Builds a "B" record
		*m: buildrecc		&& Builds a "C" record
		*m: buildrecf		&& Builds an "F" record
		*m: buildrect		&& Creates a "T" record
		*m: createcorrection1
		*m: createcorrection2
		*m: createfile		&& Creates the 1099 file for magnetic media
		*m: fileio		&& Low-level file I/O
		*m: getstatecodes
		*m: lookup
		*m: numfmt		&& Format Numbers
		*p: currentyear		&& Holds the current year of 1099s in the tax1099 file so we know if they are reporting prior years
		*p: _memberdata		&& XML Metadata for customizable properties
	*</DefinedPropArrayMethod>

	BufferMode = 0
	Caption = "Magnetic Media 1099's"
	currentyear = 2021		&& Holds the current year of 1099s in the tax1099 file so we know if they are reporting prior years
	DataSession = 2
	DoCreate = .T.
	Height = 372
	HelpContextID = 255
	lcloseonescape = .T.
	Name = "Form1099mag"
	Width = 490
	_memberdata = <VFPData>
		<memberdata name="getstatecodes" display="GetStateCodes"/>
		<memberdata name="createcorrection2" display="CreateCorrection2"/>
		<memberdata name="createcorrection1" display="CreateCorrection1"/>
		</VFPData>		&& XML Metadata for customizable properties
	Mwresize1.lblHighLight.Name = "lblHighLight"
	Mwresize1.lblShading.Name = "lblShading"
	Mwresize1.Left = 468
	Mwresize1.Name = "Mwresize1"
	Mwresize1.TabIndex = 1
	Mwresize1.Top = 384

	ADD OBJECT 'chk1099Misc' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Create 1099-Misc File", ;
		Left = 93, ;
		Name = "chk1099Misc", ;
		TabIndex = 9, ;
		Top = 157, ;
		Value = .F.
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chk1099NEC' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Create 1099-NEC File", ;
		Left = 238, ;
		Name = "chk1099NEC", ;
		TabIndex = 10, ;
		Top = 157, ;
		Value = .F.
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chk2Part1' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		AutoSize = .T., ;
		Caption = "Wrong TIN or Name Corrections", ;
		Left = 273, ;
		Name = "chk2Part1", ;
		TabIndex = 14, ;
		Top = 226, ;
		Value = .F., ;
		Visible = .F., ;
		ZOrderSet = 2
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chk2Part2' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		AutoSize = .T., ;
		Caption = "Wrong Amount Corrections", ;
		Left = 273, ;
		Name = "chk2Part2", ;
		TabIndex = 13, ;
		Top = 250, ;
		Value = .F., ;
		Visible = .F., ;
		ZOrderSet = 2
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkCorrect' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		AutoSize = .T., ;
		Caption = "Include Only Corrected Returns", ;
		Left = 238, ;
		Name = "chkCorrect", ;
		TabIndex = 12, ;
		Top = 206, ;
		Value = .F., ;
		ZOrderSet = 2
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chklByWell' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Build File By Well", ;
		Left = 93, ;
		Name = "chklByWell", ;
		TabIndex = 11, ;
		Top = 206, ;
		Value = .F.
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkSelected' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Choose Selected 1099s", ;
		Left = 93, ;
		Name = "chkSelected", ;
		TabIndex = 15, ;
		Top = 237, ;
		Value = .F.
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkTestFile' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = 'Mark the File as a "Test" File', ;
		Left = 252, ;
		Name = "chkTestFile", ;
		TabIndex = 3, ;
		Top = 24, ;
		Value = .F.
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'cmdCreate' AS cmdcommandbuttoncustom WITH ;
		Caption = "Create \<File", ;
		Height = 36, ;
		Left = 156, ;
		Name = "cmdCreate", ;
		TabIndex = 16, ;
		Top = 304, ;
		Width = 72, ;
		ZOrderSet = 3
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdExit' AS cmdcommandbuttoncustom WITH ;
		Caption = "E\<xit", ;
		Height = 36, ;
		Left = 258, ;
		Name = "cmdExit", ;
		TabIndex = 17, ;
		Top = 304, ;
		Width = 72, ;
		ZOrderSet = 4
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'Cntgetfile1' AS cntgetfile WITH ;
		cdefaultextension = , ;
		cextensionlist = , ;
		Height = 20, ;
		Left = 141, ;
		lfullpath = .T., ;
		lmustexist = .F., ;
		lpathonly = .T., ;
		Name = "Cntgetfile1", ;
		TabIndex = 7, ;
		Top = 98, ;
		Width = 300, ;
		cmdPath.FontBold = .T., ;
		cmdPath.FontSize = 10, ;
		cmdPath.Height = 20, ;
		cmdPath.Left = 273, ;
		cmdPath.Name = "cmdPath", ;
		cmdPath.TabStop = .F., ;
		cmdPath.Top = 0, ;
		edtPath.FontSize = 8, ;
		edtPath.Height = 20, ;
		edtPath.Left = 0, ;
		edtPath.Margin = 1, ;
		edtPath.Name = "edtPath", ;
		edtPath.Top = 0, ;
		edtPath.Width = 266
		*< END OBJECT: ClassLib="..\common\cmgadget.vcx" BaseClass="container" />

	ADD OBJECT 'Lbllabelcustom2' AS lbllabelcustom WITH ;
		Caption = "Accounting Year:", ;
		Height = 16, ;
		Left = 41, ;
		Name = "Lbllabelcustom2", ;
		TabIndex = 4, ;
		Top = 22, ;
		Width = 87, ;
		ZOrderSet = 11
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom5' AS lbllabelcustom WITH ;
		Caption = "TCC:", ;
		Height = 16, ;
		Left = 103, ;
		Name = "Lbllabelcustom5", ;
		TabIndex = 6, ;
		Top = 65, ;
		Width = 25, ;
		ZOrderSet = 13
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom6' AS lbllabelcustom WITH ;
		Caption = "File Location:", ;
		Height = 16, ;
		Left = 64, ;
		Name = "Lbllabelcustom6", ;
		TabIndex = 8, ;
		Top = 102, ;
		Width = 65, ;
		ZOrderSet = 8
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblSelected' AS lbllabelcustom WITH ;
		Caption = " ", ;
		ForeColor = 255,0,0, ;
		Left = 93, ;
		Name = "lblSelected", ;
		TabIndex = 18, ;
		Top = 262
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'txtcTCC' AS txttextboxcustom WITH ;
		Height = 20, ;
		InputMask = "XXXXX", ;
		Left = 141, ;
		Margin = 1, ;
		Name = "txtcTCC", ;
		TabIndex = 5, ;
		Top = 62, ;
		Width = 60, ;
		ZOrderSet = 5
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcYear' AS swyear WITH ;
		ldefvalue = .T., ;
		Left = 141, ;
		Name = "txtcYear", ;
		TabIndex = 2, ;
		Top = 20, ;
		ZOrderSet = 6
		*< END OBJECT: ClassLib="..\custom\swcontrol.vcx" BaseClass="textbox" />
	
	PROCEDURE buildreca		&& Builds an "A" record
	ENDPROC

	PROCEDURE buildrecb		&& Builds a "B" record
	ENDPROC

	PROCEDURE buildrecc		&& Builds a "C" record
	ENDPROC

	PROCEDURE buildrecf		&& Builds an "F" record
	ENDPROC

	PROCEDURE buildrect		&& Creates a "T" record
	ENDPROC

	PROCEDURE createcorrection1
		*
		*  Creates the magnetic media 1099 file
		*
		LOCAL m.totrecs, m.maxrecs, m.nreccount, m.bcount, m.total2, m.total7
		LOCAL m.diskno, fh, lc1099File, lcMagFile, oProgress, lnFCount
		LOCAL tcDrive, tcYear, tcTCC, tnType, tcCorrect, tcID1, tcID2, lnTotal
		LOCAL lcWellID, llReturn, lnCount, lnMax, lnPos, lnProgress, loError
		LOCAL  AAddress, AAmtcodes, ABlank1, ABlank2, ABlank3, ABlank4, ABlank5, ACity, ACorrect, AForeign
		LOCAL  ANamectl, AOrig, APayer, APayer2, APhone, ARecSeq, AReplace, AState, ATransfer, AZipCode
		LOCAL  Acombined, Acrlf, Alast, Arettype, Atin, Atype, Ayear, B2ndTIN, BAcct, BBlank, BBlank2
		LOCAL  BBlank3, BBlank4, BBlank5, BBlank6, BBlank7, BBlank8, BCRLF, BCode, BCorrected, BDirect
		LOCAL  BNamectl, BPayAddr, BPayCity, BPayState, BPayZip, BPayee, BPayee2, BPmt1, BPmt2, BPmt3
		LOCAL  BPmt4, BPmt5, BPmt6, BPmt7, BPmt8, BPmt9, BPmtA, BPmtB, BPmtC, BRecSeq, BTin, BType
		LOCAL  BTypeTin, BYear, Bforeign, CBlank, CBlank2, CBlank3, CCRLF, CPayeeNum, CRecSec, CRecSeq
		LOCAL  CTotal1, CTotal2, CTotal3, CTotal4, CTotal5, CTotal6, CTotal7, CTotal8, CTotal9, CTotalA
		LOCAL  CTotalB, CTotalC, CType, FBlanks, FBlanks2, FBlanks3, FCRLF, FPayerNum, FPayerNum2, FRecSeq
		LOCAL  FType, FZeros, TAddress, TBlank, TBlank2, TBlank3, TBlank4, TBlank5, TCRLF, TCity
		LOCAL  TCompCont, TCompany, TContact, TEmail, TForeign, TMagInd, TName, TNameCont, TOrigFile
		LOCAL  TPayeeNo, TPhone, TPrior, TRecSeq, TReplace, TState, TTCC, TTest, TTransTIN, TType
		LOCAL  TVendAdd, TVendCity, TVendCon, TVendEmail, TVendName, TVendPhone, TVendState, TVendZip
		LOCAL  TVendor, TYear, TZip, bcount, cProducer, czip, diskno, dsk, maxrecs, paddr1, paddr2
		LOCAL  paddr3, pcity, pcontact, pphone, pstate, ptax, pzip, tcPath, test, tlByWell
		LOCAL  total1, total2, total3, total4, total7, totalC, totrecs
		LOCAL  BLocalWH, BSpecial, BStateCode, BStateWH, CTotalD, CTotalE, CTotalF, CTotalG, KBlank1
		LOCAL  KBlank2, KBlank3, KBlank4, KCRLF, KLocalWH, KPayeeNum, KRecSeq, KStateCode, KStateWH
		LOCAL  KTotal1, KTotal2, KTotal3, KTotal4, KTotal5, KTotal6, KTotal7, KTotal8, KTotal9, KTotalA
		LOCAL  KTotalB, KTotalC, KTotalD, KTotalE, KTotalF, KTotalG, KType, cRedSeq, tlCombined
		LOCAL  nKTotal1, nKTotal2, nKTotal3, nKTotal4, nKTotal5, nKTotal6, nKTotal7, nKTotal8
		LOCAL  nKTotal9, nKTotalA, nKTotalB, nKTotalC, nKTotalD, nKTotalE, nKTotalF, nKTotalG
		LOCAL  lnRecordSeq, llCorrection
		
		llReturn = .T.
		
		IF NOT THISFORM.chk1099Misc.VALUE AND NOT THISFORM.chk1099nEC.VALUE
		   MESSAGEBOX('Choose to create the magnetic file for either the 1099-Misc or 1099-Nec.',48,'Choose Type of Return')
		   RETURN
		ENDIF
		
		IF THISFORM.chkcorrect.VALUE = .F.
		   THISFORM.CreateFile()
		   RETURN
		ENDIF
		
		lnBCountTotal = 0
		lnBCount      = 0
		
		TRY
		   tcPath     = THISFORM.cntgetfile1.edtpath.VALUE
		   tcYear     = THISFORM.txtcYear.VALUE
		   tcTCC      = THISFORM.txtcTCC.VALUE
		   tcCorrect  = IIF(THISFORM.chkcorrect.VALUE, 'Y', 'N')
		   llCorrection = THISFORM.chkcorrect.VALUE
		   tlByWell   = THISFORM.chklByWell.VALUE
		   tlCombined = .F.
		   tlSelect   = THISFORM.chkSelected.VALUE
		   ll1099Misc = THISFORM.chk1099Misc.VALUE
		   ll1099NEC  = THISFORM.chk1099nEC.VALUE
		
		   * Determine what type of corrections we have to process
		   SELECT iCorrectionType FROM tax1099Corrections INTO CURSOR temp ORDER BY iCorrectionType GROUP BY iCorrectionType
		
		   SELECT temp
		   LOCATE FOR iCorrectionType = 1
		   IF FOUND()
		      IF ll1099Misc
		         SELECT * FROM tax1099Corrections WHERE cYear = tcYear AND NOT lNEC AND iCorrectionType = 1 INTO CURSOR temp1099c ORDER BY cid
		         SELECT * FROM tax1099 WHERE cYear = tcYear AND cid IN (SELECT cid FROM temp1099c) INTO CURSOR temp1099s ORDER BY cid
		      ELSE
		         SELECT * FROM tax1099Corrections WHERE cYear = tcYear AND lNEC AND iCorrectionType = 1 INTO CURSOR temp1099c ORDER BY cid
		         SELECT * FROM tax1099 WHERE cYear = tcYear AND cid IN (SELECT cid FROM temp1099c) INTO CURSOR temp1099s ORDER BY cid
		      ENDIF
		      IF NOT tlSelect
		         SELECT cid FROM tax1099Corrections WHERE cYear = tcYear AND iCorrectionType = 1 INTO CURSOR ten99sel ORDER BY cid
		      ENDIF
		
		      STORE 0 TO nKTotal1, nKTotal2, nKTotal3, nKTotal4, nKTotal5, nKTotal6, nKTotal7, nKTotal8
		      STORE 0 TO nKTotal9, nKTotalA, nKTotalB, nKTotalC, nKTotalD, nKTotalE, nKTotalF, nKTotalG
		
		      lnFCount    = 0
		      lnRecordSeq = 1
		
		      IF LEN(ALLT(tcTCC)) < 5 OR EMPTY(tcTCC)
		         THISFORM.oMessage.Warning('You must specify a 5-character TCC number before the magnetic file can be built.')
		         THISFORM.setnextcontrol(THISFORM.txtcTCC)
		         llReturn = .F.
		         EXIT
		      ENDIF
		
		      IF NOT tlByWell
		         SELECT * FROM tax1099Corrections WHERE cYear = tcYear AND NOT EMPTY(cwellid) AND NOT DELETED() INTO CURSOR temp
		         IF _TALLY > 0
		            THISFORM.oMessage.Warning('The 1099 file was created by well for this year. You must create the magnetic file by well.')
		            llReturn = .F.
		            EXIT
		         ENDIF
		      ELSE
		         SELECT * FROM tax1099Corrections WHERE cYear = tcYear AND NOT EMPTY(cwellid) AND NOT cidtype = 'V' AND NOT DELETED() INTO CURSOR temp
		         IF _TALLY = 0
		            THISFORM.oMessage.Warning('The 1099 file was not created by well for this year. You cannot create the magnetic file by well.')
		            llReturn = .F.
		            EXIT
		         ENDIF
		      ENDIF
		
		      IF NOT DIRECTORY(tcPath)
		         THISFORM.oMessage.Warning('The given file location does not exist. Please choose a valid location.')
		         llReturn = .F.
		         EXIT
		      ENDIF
		
		      * Check on the existence of the application object
		      * if it doesn't exist, we're running in development
		      * mode and need to initialize the company address info.
		      IF TYPE('m.goApp') = 'O'
		         m.cProducer = m.goApp.ccompanyname
		         m.paddr1    = m.goApp.cAddress1
		         m.paddr2    = m.goApp.cAddress2
		         m.paddr3    = m.goApp.cAddress3
		         m.ptax      = cmEncrypt(m.goApp.cTaxid,m.goApp.cEncryptionKey)
		         m.pcity     = m.goApp.ccity
		         m.pzip      = STRTRAN(m.goApp.czip,'-','')
		         m.pzip      = STRTRAN(m.pzip,' ','')
		         m.pstate    = m.goApp.cstate
		         m.pcontact  = m.goApp.cContact
		         m.pphone    = STRTRAN(m.goApp.cPhoneno,'-','')
		         m.pphone    = STRTRAN(m.pphone,'(','')
		         m.pphone    = STRTRAN(m.pphone,')','')
		         m.pphone    = STRTRAN(m.pphone,' ','')
		
		         **  Force them to make sure all the T-record fields are specified, so we ensure that the file doesn't get rejected for something bogus
		         **  like leaving off the company phone number or contact name
		         IF EMPTY(m.cProducer)
		            THISFORM.oMessage.Warning('Please specify a valid company name on the Maintain >> Company Information screen before creating the magnetic file.')
		            llReturn = .F.
		            EXIT
		         ENDIF
		         IF EMPTY(m.paddr1)
		            THISFORM.oMessage.Warning('Please specify a valid company address on the Maintain >> Company Information screen before creating the magnetic file.')
		            llReturn = .F.
		            EXIT
		         ENDIF
		         IF EMPTY(m.ptax)
		            THISFORM.oMessage.Warning('Please specify a valid company tax ID on the Maintain >> Company Information screen before creating the magnetic file.')
		            llReturn = .F.
		            EXIT
		         ENDIF
		         IF EMPTY(m.pcity)
		            THISFORM.oMessage.Warning('Please specify a valid city in the address on the Maintain >> Company Information screen before creating the magnetic file.')
		            llReturn = .F.
		            EXIT
		         ENDIF
		         IF EMPTY(m.pstate)
		            THISFORM.oMessage.Warning('Please specify a valid state in the address on the Maintain >> Company Information screen before creating the magnetic file.')
		            llReturn = .F.
		            EXIT
		         ENDIF
		         IF EMPTY(m.pzip)
		            THISFORM.oMessage.Warning('Please specify a valid zip code in the address on the Maintain >> Company Information screen before creating the magnetic file.')
		            llReturn = .F.
		            EXIT
		         ENDIF
		         IF EMPTY(m.pcontact)
		            THISFORM.oMessage.Warning('Please specify a valid contact name on the Maintain >> Company Information screen before creating the magnetic file.')
		            llReturn = .F.
		            EXIT
		         ENDIF
		         IF EMPTY(m.pphone)
		            THISFORM.oMessage.Warning('Please specify a valid phone number on the Maintain >> Company Information screen before creating the magnetic file.')
		            llReturn = .F.
		            EXIT
		         ENDIF
		      ELSE
		         m.cProducer = 'SherWare, Inc.'
		         m.paddr1    = '2098 Portage Rd Suite 250'
		         m.paddr2    = 'Wooster, OH  44691'
		         m.paddr3    = ''
		         m.ptax      = '99-9999999'
		         m.pcontact  = 'Phil Sherwood'
		         m.pphone    = '3302620200'
		         m.pcity     = 'Wooster'
		         m.pstate    = 'OH'
		         m.pzip      = '44691'
		      ENDIF
		
		      IF NOT tlByWell
		         SELECT  tcCorrect AS correct, ;
		            m.paddr1 AS paddr1, ;
		            m.paddr2 AS paddr2, ;
		            m.paddr3 AS paddr3, ;
		            m.ptax   AS ptax, ;
		            m.pphone AS pphone, ;
		            m.pcontact AS pcontact, ;
		            m.cProducer AS cProducer, ;
		            temp1099s.cYear, ;
		            temp1099s.cid, ;
		            temp1099s.cidtype, ;
		            temp1099s.cprogcode, ;
		            temp1099s.cname, ;
		            temp1099s.cName2,  ;
		            temp1099s.caddr1, ;
		            temp1099s.caddr2, ;
		            temp1099s.ccity, ;
		            temp1099s.cstate, ;
		            temp1099s.czip, ;
		            temp1099s.cTaxid, ;
		            temp1099s.nother, ;
		            temp1099s.nroyalty, ;
		            temp1099s.nrents, ;
		            temp1099s.nNonEmp,  ;
		            temp1099s.nAttorney,  ;
		            temp1099s.ctaxstate1, ;
		            temp1099s.nstatetax1, ;
		            temp1099s.cstatepayerno1, ;
		            temp1099s.ctaxstate2, ;
		            temp1099s.nstatetax2, ;
		            temp1099s.cstatepayerno2, ;
		            temp1099s.nfedtax ;
		            FROM temp1099s ;
		            WHERE cYear = tcYear ;
		            AND cid IN (SELECT  cid ;
		            FROM ten99sel);
		            AND NOT DELETED() ;
		            INTO CURSOR temp1099 READWRITE ;
		            ORDER BY cid
		
		         SELECT  tcCorrect AS correct, ;
		            m.paddr1 AS paddr1, ;
		            m.paddr2 AS paddr2, ;
		            m.paddr3 AS paddr3, ;
		            m.ptax   AS ptax, ;
		            m.pphone AS pphone, ;
		            m.pcontact AS pcontact, ;
		            m.cProducer AS cProducer, ;
		            temp1099c.cYear, ;
		            temp1099c.cid, ;
		            temp1099c.cidtype, ;
		            temp1099c.cprogcode, ;
		            temp1099c.cname, ;
		            temp1099c.cName2,  ;
		            temp1099c.caddr1, ;
		            temp1099c.caddr2, ;
		            temp1099c.ccity, ;
		            temp1099c.cstate, ;
		            temp1099c.czip, ;
		            temp1099c.cTaxid, ;
		            temp1099c.nother, ;
		            temp1099c.nroyalty, ;
		            temp1099c.nrents, ;
		            temp1099c.nNonEmp,  ;
		            temp1099c.nAttorney,  ;
		            temp1099c.ctaxstate1, ;
		            temp1099c.nstatetax1, ;
		            temp1099c.cstatepayerno1, ;
		            temp1099c.ctaxstate2, ;
		            temp1099c.nstatetax2, ;
		            temp1099c.cstatepayerno2, ;
		            temp1099c.nfedtax ;
		            FROM temp1099c ;
		            WHERE cYear = tcYear ;
		            AND cid IN (SELECT  cid ;
		            FROM ten99sel);
		            AND NOT DELETED() ;
		            INTO CURSOR temp1099Cor READWRITE ;
		            ORDER BY cid
		
		      ELSE
		         SELECT  tcCorrect AS correct, ;
		            m.paddr1 AS paddr1, ;
		            m.paddr2 AS paddr2, ;
		            m.paddr3 AS paddr3, ;
		            m.ptax   AS ptax, ;
		            m.pphone AS pphone, ;
		            m.pcontact AS pcontact, ;
		            temp1099s.cwellid, ;
		            m.cProducer AS cProducer, ;
		            temp1099s.cYear, ;
		            temp1099s.cid, ;
		            temp1099s.cidtype, ;
		            temp1099s.cprogcode, ;
		            temp1099s.cname, ;
		            temp1099s.cName2,  ;
		            temp1099s.caddr1, ;
		            temp1099s.caddr2, ;
		            temp1099s.ccity, ;
		            temp1099s.cstate, ;
		            temp1099s.czip, ;
		            temp1099s.cTaxid, ;
		            temp1099s.nother, ;
		            temp1099s.nroyalty, ;
		            temp1099s.nrents, ;
		            temp1099s.nNonEmp,  ;
		            temp1099s.nAttorney,  ;
		            temp1099s.ctaxstate1, ;
		            temp1099s.nstatetax1, ;
		            temp1099s.cstatepayerno1, ;
		            temp1099s.ctaxstate2, ;
		            temp1099s.nstatetax2, ;
		            temp1099s.cstatepayerno2, ;
		            temp1099s.nfedtax ;
		            FROM temp1099s ;
		            WHERE cYear = tcYear ;
		            AND cid IN (SELECT  cid ;
		            FROM ten99sel);
		            AND NOT DELETED() ;
		            INTO CURSOR temp1099 READWRITE ;
		            ORDER BY cid
		
		         SELECT  tcCorrect AS correct, ;
		            m.paddr1 AS paddr1, ;
		            m.paddr2 AS paddr2, ;
		            m.paddr3 AS paddr3, ;
		            m.ptax   AS ptax, ;
		            m.pphone AS pphone, ;
		            m.pcontact AS pcontact, ;
		            temp1099c.cwellid, ;
		            m.cProducer AS cProducer, ;
		            temp1099c.cYear, ;
		            temp1099c.cid, ;
		            temp1099c.cidtype, ;
		            temp1099c.cprogcode, ;
		            temp1099c.cname, ;
		            temp1099c.cName2,  ;
		            temp1099c.caddr1, ;
		            temp1099c.caddr2, ;
		            temp1099c.ccity, ;
		            temp1099c.cstate, ;
		            temp1099c.czip, ;
		            temp1099c.cTaxid, ;
		            temp1099c.nother, ;
		            temp1099c.nroyalty, ;
		            temp1099c.nrents, ;
		            temp1099c.nNonEmp,  ;
		            temp1099c.nAttorney,  ;
		            temp1099c.ctaxstate1, ;
		            temp1099c.nstatetax1, ;
		            temp1099c.cstatepayerno1, ;
		            temp1099c.ctaxstate2, ;
		            temp1099c.nstatetax2, ;
		            temp1099c.cstatepayerno2, ;
		            temp1099c.nfedtax ;
		            FROM temp1099c ;
		            WHERE cYear = tcYear ;
		            AND cid IN (SELECT  cid ;
		            FROM ten99sel);
		            AND NOT DELETED() ;
		            INTO CURSOR temp1099Cor READWRITE ;
		            ORDER BY cid
		      ENDIF
		
		      IF RECCOUNT('temp1099') = 0
		         THISFORM.oMessage.Warning('There were no 1099 records for the given year. Please check your data.')
		         llReturn = .F.
		         EXIT
		      ENDIF
		
		      SELECT temp1099
		      INDEX ON cid TAG cid
		
		      lnFCount  = 0
		      m.totrecs = 0
		      m.bcount  = 0
		      m.total1  = 0
		      m.total2  = 0
		      m.total3  = 0
		      m.total4  = 0
		      m.total7  = 0
		      m.totalC  = 0
		      m.diskno  = 1
		      m.creturn    = CHR(13) + CHR(10)
		      fh        = ' '
		
		      m.test = ' '
		
		      IF 'SHERWARE' $ UPPER(m.cProducer)
		         IF THISFORM.oMessage.CONFIRM('Is This A Test File?')
		            m.test = 'T'
		         ENDIF
		      ENDIF
		
		      IF THISFORM.chkTestFile.VALUE
		         m.test = 'T'
		      ENDIF
		
		      *
		      *  Transmitter Record
		      *
		      TType      = 'T'			&& Record Type						1
		      TYear      = tcYear         && Payment Year						2-5
		      TPrior     = ' '            && Prior Year Data Indicator		6
		      TTransTIN  = THISFORM.numfmt(m.ptax, 9)  && Transmitter's taxid #			7-15
		      TTCC       = tcTCC			&& Transmitter Control Code			16-20
		      TReplace   = SPACE(2)    	&& Replacement File Character		21-22
		      TBlank     = SPACE(5)		&& Blank							23-27
		      TTest      = m.test			&& Test Indicator					28
		      TForeign   = ' '			&& Foreign Entity Indicator, blank means no	29
		      TName      = UPPER(PADR(ALLTRIM(m.cProducer), 40, ' '))  	&&		30-69
		      TNameCont  = SPACE(40)      && Transmitter Name Continuation	70-109
		      TCompany   = UPPER(PADR(ALLTRIM(m.cProducer), 40, ' '))	&&		110-149
		      TCompCont  = SPACE(40)		&& Company Name Continuation		150-189
		      TAddress   = UPPER(PADR(ALLTRIM(m.paddr1), 40, ' '))		&&		190-229
		      TCity      = UPPER(PADR(ALLTRIM(m.pcity), 40, ' '))		&&		230-269
		      TState     = UPPER(m.pstate) && Transmitter State Code			270-271
		      TZip       = UPPER(PADR(TRANSFORM(m.pzip), 9, ' ')) 		&&		272-280
		      TBlank2    = SPACE(15)		&& Blank					&&		281-295
		      TPayeeNo   = '00000000'		&& Number of B Payee records		296-303
		      TContact   = UPPER(PADR(ALLTRIM(m.pcontact), 40, ' '))	&&		304-343
		      TPhone     = PADR(ALLTRIM(m.pphone), 15, ' ')				&&		344-358
		      TEmail     = SPACE(35)      && Contact email address            359-393
		      TMagInd    = SPACE(2)		&& Magnetic Tape Indicator			394-395
		      TOrigFile  = SPACE(15)		&& Original File Name				396-410
		      TBlank3    = SPACE(89 )     && Blank							411-499
		      TRecSeq    = '00000001'     && Record sequence number           500-507
		      TBlank4    = SPACE(10)      && Blank                            508-517
		      TVendor    = 'V'            && Vendor indicator.  SherWare is the vendor 518
		      TVendName  = 'SherWare, Inc.                          '  && Vendor Name 519-558
		      TVendAdd   = '4182 Clemmons Road Box 285              '  && Vendor Address 559-598
		      TVendCity  = 'Clemmons                                '  &&  Vendor City 599-638
		      TVendState = 'NC'           && Vendor state                     639-640
		      TVendZip   = '27012    '    && Vendor Zip                       641-649
		      TVendCon   = 'Phil Sherwood                           '  && Vendor contact 650-689
		      TVendPhone = '3302620200     '  &&  Vendor phone                690-704
		      TVendEmail = 'sales@sherware.com                 '  &&  Vendor email  705-739
		      TBlank5    = '         '    &&  Blank                           740-748
		      TCRLF      = m.creturn         && Carriage Return and Line Feed	749-750
		
		      *
		      *  Record "A"
		      *
		      Atype     = 'A'			&& Record Type						1
		      Ayear     = tcYear			&& Payment Year						2-5
		      Acombined = ' '			&& Combined federal/state filer		6
		      ABlank1   = SPACE(5)       && Blank							7-11
		      Atin      = THISFORM.numfmt(m.ptax, 9) && Payer's TIN			12-20
		      ANamectl  = SPACE(4)   	&& Payer Name Control				21-24
		      Alast     = ' '			&& Last filing indicator			25
		      IF ll1099Misc
		         Arettype  = 'A '			&& Return type   1099-misc = "A"	26-27
		      ELSE
		         Arettype  = 'NE'			&& Return type   1099-NEC = "NE"	26-27
		      ENDIF
		      IF ll1099Misc
		         AAmtcodes = '1234C       '	&& Amount codes						28-45
		      ELSE
		         AAmtcodes = '14           '	&& Amount codes						28-45
		      ENDIF
		      ABlank2   = SPACE(8)       && Blank							40-47
		      AOrig     = ' ' 			&& Original File Indicator			48  &&  Blanked out original file marker, per IRS instructions for 2007 files - BH 12/03/2007
		      AReplace  = ' ' 			&& Replacement File Indicator		49
		      ACorrect  = ' '			&& Corrected File Indicator			50
		      ABlank3   = ' '       		&& Blank							51
		      AForeign  = ' '			&& Foreign Corporation				52
		      APayer    = UPPER(PADR(ALLTRIM(m.cProducer), 40, ' '))	&&		53-92
		      APayer2   = SPACE(40)		&& Payer name line 2				93-132
		      ATransfer = '0'			&& 2nd payer type					133
		      AAddress  = UPPER(PADR(ALLTRIM(m.paddr1), 40, ' '))		&&		134-173
		      ACity     = UPPER(PADR(ALLTRIM(m.pcity), 40, ' '))		&&		174-213
		      AState    = UPPER(m.pstate) && Payer State						214-215
		      AZipCode  = UPPER(PADR(TRANSFORM(m.pzip), 9, ' ')) && Payer Zip Cd	216-224
		      APhone    = PADR(ALLTRIM(m.pphone), 15, ' ')	&& Payer Phone Num	225-239
		      ABlank4   = SPACE(260)     && Blank							240-499
		      ARecSeq   = '00000002'     && Record sequence                  500-507
		      ABlank5   = SPACE(241)     && Blanks                           508-748
		      Acrlf     = m.creturn			&& Carriage Return/Line Feed		749-750
		      *
		      *  Record "B"
		      *
		      BType      = 'B'			    && Record Type						1
		      BYear      = tcYear			&& Payment year						2-5
		      BCorrected = ' '			    && Corrected Return Indicator		6
		      BNamectl   = SPACE(4)  		&& Name control						7-10
		      BTypeTin   = ' '			    && Type of Tin						11
		      BTin       = SPACE(9)		&& TIN								12-20
		      BAcct      = SPACE(20)		&& Payer's acct # for payee			21-40
		      BCode      = SPACE(4)		&& Payer's office code				41-44
		      BBlank     = SPACE(10) 		&& Blank							45-54
		      BPmt1      = '000000000000'  && Payment amount 1  				55-66
		      BPmt2      = '000000000000'  && Payment amount 2					67-78
		      BPmt3      = '000000000000'  && Payment amount 3					79-90
		      BPmt4      = '000000000000'  && Payment amount 4					91-102
		      BPmt5      = '000000000000'  && Payment amount 5					103-114
		      BPmt6      = '000000000000'  && Payment amount 6					115-126
		      BPmt7      = '000000000000'  && Payment amount 7					127-138
		      BPmt8      = '000000000000'	&& Payment amount 8					139-150
		      BPmt9      = '000000000000'	&& Payment amount 9					151-162
		      BPmtA      = '000000000000'	&& Payment amount A					163-174
		      BPmtB      = '000000000000'	&& Payment amount B					175-186
		      BPmtC      = '000000000000'	&& Payment amount C					187-198
		      BPmtD      = '000000000000'	&& Payment amount D					199-210
		      BPmtE      = '000000000000'	&& Payment amount E					211-222
		      BPmtF      = '000000000000'	&& Payment amount F					223-234
		      BPmtG      = '000000000000'	&& Payment amount G					235-246
		      BPmtH      = '000000000000'	&& Payment amount H					247-258
		      BPmtI      = '000000000000'	&& Payment amount I					259-270
		      BBlanks    = SPACE(16)      && Blanks							271-286
		      Bforeign   = SPACE(1)	    && Foreign country indicator		287
		      BPayee     = SPACE(40) 		&& Payee name						288-327
		      BPayee2    = SPACE(40)		&& Payee name 2						328-367
		      BPayAddr   = SPACE(40)		&& Payee address					368-407
		      BBlank2    = SPACE(40) 		&& Blank							408-447
		      BBlank3    = SPACE(40) 		&& Blank							408-447
		      BBlank4    = SPACE(40) 		&& Blank							408-447
		      BPayCity   = SPACE(40)		&& Payee city						448-487
		      BPayState  = SPACE(2) 		&& Payee state						488-489
		      BPayZip    = SPACE(9)		&& Payee zip						490-498
		      BBlank5    = SPACE(1)		&& blanks							499
		      BRecSeq    = '00000001'      && Record sequence                  500-507
		      BBlank6    = SPACE(36)       && Blanks                           508-543
		
		      B2ndTIN    = ' '	 	    	&& 2nd TIN Notice					544
		      BBlank7    = SPACE(2)		&& Blank							545-546
		      BDirect    = ' ' 			&& Direct sales indicator			547
		      BBlank8    = SPACE(115)		&& Blank							548-662
		      BSpecial   = SPACE(60)       && Special Data Entries             553-722
		      BStateWH   = SPACE(12)       && State Income Tax Withheld        723-734
		      BLocalWH   = SPACE(12)       && Local Income Tax Withheld        735-746
		      BStateCode = SPACE(2)        && Combined Federal/State Code      747-748
		      BCRLF      = m.creturn			&& Carriage Return/Line Feed		749-750
		
		
		      *
		      * Record "C"
		      *
		      CType     = 'C'			&& Record Type						1
		      CPayeeNum = '00000000'		&& Number of B records				2-9
		      CBlank    = SPACE(6)   	&& Blanks							10-15
		      CTotal1   = '000000000000000000'	&& Control Total 1			16-33
		      CTotal2   = '000000000000000000'	&& Control Total 2			34-51
		      CTotal3   = '000000000000000000'	&& Control Total 3			52-69
		      CTotal4   = '000000000000000000'	&& Control Total 4			70-87
		      CTotal5   = '000000000000000000'	&& Control Total 5			88-105
		      CTotal6   = '000000000000000000'	&& Control Total 6			106-123
		      CTotal7   = '000000000000000000'	&& Control Total 7			124-141
		      CTotal8   = '000000000000000000'	&& Control Total 8			142-159
		      CTotal9   = '000000000000000000'	&& Control Total 9			160-177
		      CTotalA   = '000000000000000000'	&& Control Total A			178-195
		      CTotalB   = '000000000000000000'	&& Control Total B			196-213
		      CTotalC   = '000000000000000000'	&& Control Total C			214-231
		      CTotalD   = '000000000000000000'	&& Control Total D			232-249
		      CTotalE   = '000000000000000000'	&& Control Total E			250-267
		      CTotalF   = '000000000000000000'	&& Control Total F			268-285
		      CTotalG   = '000000000000000000'	&& Control Total G			286-303
		      CTotalH   = '000000000000000000'	&& Control Total H			304-321
		      CTotalI   = '000000000000000000'	&& Control Total I			322-339
		      CBlank2   = SPACE(160)			&& Blank					340-499
		      CRecSeq   = '00000001'           && Record sequence          500-507
		      CBlank3   = SPACE(241)           && Blank                    508-748
		      CCRLF     = m.creturn				&& Carriage Ret/Line Feed	749-750
		      *
		      * Record "K"
		      *
		      KType      = 'K'                  && Record Type              1
		      KPayeeNum  = '00000000'           && Number of B Recs for St  2-9
		      KBlank1    = SPACE(6)             && Blank                    10-15
		      KTotal1    = '000000000000000000' && Control Total 1          16-33
		      KTotal2    = '000000000000000000' && Control Total 2          34-51
		      KTotal3    = '000000000000000000' && Control Total 3          52-69
		      KTotal4    = '000000000000000000' && Control Total 4          70-87
		      KTotal5    = '000000000000000000' && Control Total 5          88-105
		      KTotal6    = '000000000000000000' && Control Total 6          106-123
		      KTotal7    = '000000000000000000' && Control Total 7          124-141
		      KTotal8    = '000000000000000000' && Control Total 8          142-159
		      KTotal9    = '000000000000000000' && Control Total 9          160-177
		      KTotalA    = '000000000000000000' && Control Total A          178-195
		      KTotalB    = '000000000000000000' && Control Total B          196-213
		      KTotalC    = '000000000000000000' && Control Total C          214-231
		      KTotalD    = '000000000000000000' && Control Total D          232-249
		      KTotalE    = '000000000000000000' && Control Total E          250-267
		      KTotalF    = '000000000000000000' && Control Total F          268-285
		      KTotalG    = '000000000000000000' && Control Total G          286-303
		      KTotalH    = '000000000000000000' && Control Total H          304-321
		      KTotalI    = '000000000000000000' && Control Total I          322-339
		      KBlank2    = SPACE(160)           && Blank                    340-499
		      KRecSeq    = '00000001'           && Record Sequence          500-507
		      KBlank3    = SPACE(199)           && Blank                    508-706
		      KStateWH   = '000000000000000000' && State Income Tax WH      707-724
		      KLocalWH   = '000000000000000000' && Local Income Tax WH      725-742
		      KBlank4    = SPACE(4)             && Blank                    743-746
		      KStateCode = SPACE(2)             && State Code               747-748
		      KCRLF      = m.creturn               && Carriage ret/line feed   749-750
		
		
		      *
		      * Record "F"
		      *
		      FType      = 'F'			        && Record Type						1
		      FPayerNum  = '00000001'	        && Number of A records				2-9
		      FZeros     = '000000000000000000000'  && Zeros					10-30
		      FBlanks    = SPACE(19)  	        && Blanks							31-49
		      FPayerNum2 = '00000001'          && Number of B records              50-57
		      FBlanks2   = SPACE(442)          && Blanks                           58-499
		      FRecSeq    = '00000001'          && Record sequence number           500-508
		      FBlanks3   = SPACE(241)          && Blanks                           509-748
		      FCRLF      = m.creturn			    && Carriage Ret/Line Feed			749-750
		
		      * Check to see if this is a prior year
		      IF YEAR(DATE()) - VAL(tcYear) > 1
		         TPrior = 'P'
		      ELSE
		         TPrior = ' '
		      ENDIF
		
		      SELECT temp1099
		      COUNT FOR cYear = tcYear TO lnMax
		      IF ll1099Misc
		         IF tcCorrect = 'Y'
		            COUNT FOR cYear = tcYear TO lnBRecs
		         ELSE
		            COUNT FOR cYear = tcYear AND (nroyalty # 0 OR nother # 0 OR nAttorney # 0 OR nrents # 0)  TO lnBRecs
		         ENDIF
		      ELSE
		         IF tcCorrect = 'Y'
		            COUNT FOR cYear = tcYear TO lnBRecs
		         ELSE
		            COUNT FOR cYear = tcYear AND nNonEmp # 0 TO lnBRecs
		         ENDIF
		      ENDIF
		      GO TOP
		      lnProgress = 1
		      oProgress  = THISFORM.oMessage.ProgressBar('Creating 1099 Magnetic File For ' + tcYear + '....')
		      oProgress.SetProgressRange(0, lnMax)
		
		      m.maxrecs  = 999999999
		      m.nreccount = 999999999
		      lnTotal    = 0
		      lnAcount   = 0
		
		      IF NOT tlByWell
		
		         lnCount = 1
		         IF ll1099Misc
		            lcMagFile = 'IRSTAX_MISC_' + TYear + '_0.TXT'
		         ELSE
		            lcMagFile = 'IRSTAX_NEC_' + TYear + '_0.TXT'
		         ENDIF
		         DO WHILE FILE(ADDBS(tcPath)+lcMagFile)
		            IF ll1099Misc
		               lcMagFile = 'IRSTAX_MISC_' + TYear + '_' + TRANSFORM(lnCount) + '.TXT'
		            ELSE
		               lcMagFile = 'IRSTAX_NEC_' + TYear + '_' + TRANSFORM(lnCount) + '.TXT'
		            ENDIF
		            lnCount = lnCount + 1
		         ENDDO
		
		         fh       = FCREATE(ADDBS(tcPath) + lcMagFile)
		
		         TRecSeq     = PADL(TRANSFORM(lnRecordSeq), 8, '0')
		         lnRecordSeq = lnRecordSeq + 1
		
		         IF TYear < THISFORM.CurrentYear
		            TPrior = 'P'
		         ENDIF
		         TPayeeNo = PADL(ALLTRIM(STR(lnBRecs, 8)), 8, '0')
		         THISFORM.fileio(fh, TType)
		         THISFORM.fileio(fh, TYear + TPrior + TTransTIN + TTCC + TReplace + TBlank + TTest)
		         THISFORM.fileio(fh, TForeign + TName + TNameCont + TCompany + TCompCont + TAddress)
		         THISFORM.fileio(fh, TCity + TState + TZip + TBlank2 + TPayeeNo + TContact + TPhone)
		         THISFORM.fileio(fh, TEmail + TMagInd + TOrigFile + TBlank3 + TRecSeq + TBlank4)
		         THISFORM.fileio(fh, TVendor + TVendName + TVendAdd + TVendCity + TVendState + TVendZip)
		         THISFORM.fileio(fh, TVendCon + TVendPhone + TVendEmail + TBlank5 + TCRLF)
		
		         Acombined = ' '
		         ARecSeq     = PADL(TRANSFORM(lnRecordSeq), 8, '0')
		         lnRecordSeq = lnRecordSeq + 1
		         lnAcount    = 1
		
		         THISFORM.fileio(fh, "A")
		         THISFORM.fileio(fh, Ayear + Acombined + ABlank1)
		         THISFORM.fileio(fh, Atin)
		         THISFORM.fileio(fh, ANamectl + Alast + Arettype + AAmtcodes)
		         THISFORM.fileio(fh, ABlank2 + AOrig + AReplace + ACorrect + ABlank3 + AForeign)
		         THISFORM.fileio(fh, APayer + APayer2 + ATransfer + AAddress + ACity + AState + AZipCode)
		         THISFORM.fileio(fh, APhone + ABlank4 + ARecSeq + ABlank5)
		         THISFORM.fileio(fh, Acrlf)
		
		         m.nreccount = m.nreccount + 2
		
		         m.diskno   = m.diskno + 1
		         m.nreccount = 1
		         m.totrecs  = m.totrecs + 1
		         m.nreccount = m.nreccount + 1
		         STORE 0 TO m.total1, m.total2, m.total3, m.ntotal4, m.total5, m.ntotal6
		         STORE 0 TO m.total7, m.total8, m.total9, m.totalA, m.totalB, m.totalC, m.bcount
		
		
		         SELECT temp1099
		         SCAN
		            SCATTER MEMVAR
		            m.cTaxid = cmEncrypt(ALLTRIM(m.cTaxid),m.goApp.cEncryptionKey)
		            oProgress.UpdateProgress(lnProgress)
		            lnProgress = lnProgress + 1
		
		            IF ll1099NEC
		               IF NOT tcCorrect = 'Y'
		                  IF m.nNonEmp = 0
		                     LOOP
		                  ENDIF
		               ENDIF
		            ENDIF
		
		            IF ll1099Misc
		               IF NOT tcCorrect = 'Y'
		                  IF m.nroyalty = 0 AND ;
		                        m.nother   = 0 AND ;
		                        m.nrents   = 0 AND ;
		                        m.nAttorney = 0
		                     LOOP
		                  ENDIF
		               ENDIF
		            ENDIF
		
		            IF tlCombined
		               SELECT statecodes
		               LOCATE FOR cstate == m.c1099state
		               IF FOUND()
		                  BStateCode = cCode
		               ELSE
		                  BStateCode = '  '
		               ENDIF
		            ELSE
		               BStateCode = '  '
		            ENDIF
		
		            * Determine the type of tin
		            DO CASE
		               CASE SUBSTR(m.cTaxid,3,1) = '-'  && EIN
		                  BTypeTin = '1'
		               CASE SUBSTR(m.cTaxid,4,1) = '-'  && SSN
		                  BTypeTin = '2'
		               OTHERWISE
		                  BTypeTin = ' '
		            ENDCASE
		
		            BTin      = THISFORM.numfmt(m.cTaxid, 9)
		            BCorrected = 'G'
		            IF ll1099Misc
		               BPmt1     = THISFORM.numfmt(PADL(ALLTRIM(TRANSFORM(m.nrents,'999999999.99')), 12, '0'), 12)
		               BPmt2     = THISFORM.numfmt(PADL(ALLTRIM(TRANSFORM(m.nroyalty,'999999999.99')), 12, '0'), 12)
		               BPmt3     = THISFORM.numfmt(PADL(ALLTRIM(TRANSFORM(m.nother,'999999999.99')), 12, '0'), 12)
		               BPmtC     = THISFORM.numfmt(PADL(ALLTRIM(TRANSFORM(m.nAttorney,'999999999.99')), 12, '0'), 12)
		            ELSE
		               BPmt1     = THISFORM.numfmt(PADL(ALLTRIM(TRANSFORM(m.nNonEmp,'999999999.99')), 12, '0'), 12)
		            ENDIF
		
		            BPmt4     = THISFORM.numfmt(PADL(ALLTRIM(TRANSFORM(m.nfedtax,'999999999.99')), 12, '0'), 12)
		            BStateWH  = THISFORM.numfmt(PADL(ALLTRIM(TRANSFORM(m.nstatetax1,'999999999.99')), 12, '0'), 12)
		            IF tlCombined
		               BStateCode = m.ctaxstate1
		            ELSE
		               BStateCode = '  '
		            ENDIF
		            BPayee    = PADR(ALLTRIM(m.cname), 40, ' ')
		            BPayee2   = PADR(ALLTRIM(m.cName2), 40, ' ')
		            BPayAddr  = PADR(ALLTRIM(m.caddr1), 40, ' ')
		            BPayCity  = PADR(ALLTRIM(m.ccity), 40, ' ')
		            BPayState = m.cstate
		            m.czip    = STRTRAN(m.czip, '-', '')
		            BPayZip   = PADR(ALLTRIM(m.czip), 9, ' ')
		
		            IF ll1099Misc
		               m.total1  = 0
		               m.total2  = 0
		               m.total3  = 0
		               m.total4  = 0
		               m.total7  = 0
		               m.totalC  = 0
		            ELSE
		               m.total1  = 0
		               m.total4  = 0
		               STORE 0 TO m.ntotal2, m.ntotal3, m.ntotal7, m.ntotalC
		            ENDIF
		
		            BAcct     = PADR(ALLTRIM(m.cid), 20, ' ')
		
		            BRecSeq     = PADL(TRANSFORM(lnRecordSeq), 8, '0')
		            lnRecordSeq = lnRecordSeq + 1
		
		            THISFORM.fileio(fh, BType + BYear + BCorrected)
		            THISFORM.fileio(fh, BNamectl + BTypeTin + BTin)
		            THISFORM.fileio(fh, BAcct + BCode + BBlank)
		            THISFORM.fileio(fh, BPmt1 + BPmt2 + BPmt3 + BPmt4 + BPmt5 + BPmt6)
		            THISFORM.fileio(fh, BPmt7 + BPmt8 + BPmt9 + BPmtA + BPmtB + BPmtC)
		            THISFORM.fileio(fh, BPmtD + BPmtE + BPmtF + BPmtG + BPmtH + BPmtI + BBlanks + Bforeign)
		            THISFORM.fileio(fh, BPayee + BPayee2 + BPayAddr + BBlank4 + BPayCity + BPayState)
		            THISFORM.fileio(fh, BPayZip + BBlank5 + BRecSeq + BBlank6 + B2ndTIN + BBlank7 + BDirect + BBlank8)
		            THISFORM.fileio(fh, BSpecial + BStateWH + BLocalWH + BStateCode)
		            THISFORM.fileio(fh, BCRLF)
		
		            m.nreccount = m.nreccount + 1
		            lnBCount = lnBCount + 1
		            lnBCountTotal = lnBCountTotal + 1
		            lnTotal    = lnTotal + 1
		
		         ENDSCAN && temp1099
		
		
		         CPayeeNum = PADL(TRANSFORM(lnBCount), 8, '0')
		         CTotal1   = THISFORM.numfmt(PADL(ALLTRIM(TRANSFORM(m.total1,'999999999.99')), 18, '0'), 18)
		         CTotal2   = THISFORM.numfmt(PADL(ALLTRIM(TRANSFORM(m.total2,'999999999.99')), 18, '0'), 18)
		         CTotal3   = THISFORM.numfmt(PADL(ALLTRIM(TRANSFORM(m.total3,'999999999.99')), 18, '0'), 18)
		         CTotal4   = THISFORM.numfmt(PADL(ALLTRIM(TRANSFORM(m.total4,'999999999.99')), 18, '0'), 18)
		         CTotal7   = THISFORM.numfmt(PADL(ALLTRIM(TRANSFORM(m.total7,'999999999.99')), 18, '0'), 18)
		         CTotalC   = THISFORM.numfmt(PADL(ALLTRIM(TRANSFORM(m.totalC,'999999999.99')), 18, '0'), 18)
		
		         CRecSeq     = PADL(TRANSFORM(lnRecordSeq), 8, '0')
		         lnRecordSeq = lnRecordSeq + 1
		
		         THISFORM.fileio(fh, 'C' + CPayeeNum + CBlank + CTotal1 + CTotal2 + CTotal3)
		         THISFORM.fileio(fh, CTotal4 + CTotal5 + CTotal6 + CTotal7 + CTotal8 + CTotal9)
		         THISFORM.fileio(fh, CTotalA + CTotalB + CTotalC + CTotalD + CTotalE + CTotalF)
		         THISFORM.fileio(fh, CTotalG + CTotalH + CTotalI + CBlank2 + CRecSeq + CBlank3)
		         THISFORM.fileio(fh, CCRLF)
		
		         m.nreccount = m.nreccount + 1
		         lnFCount   = lnFCount + 1
		
		         *****************************************
		         * Now build the corrected entries
		         *****************************************
		         lnBCount = 0
		         Acombined = ' '
		         ARecSeq     = PADL(TRANSFORM(lnRecordSeq), 8, '0')
		         lnRecordSeq = lnRecordSeq + 1
		         lnAcount = lnAcount + 1
		
		         THISFORM.fileio(fh, "A")
		         THISFORM.fileio(fh, Ayear + Acombined + ABlank1)
		         THISFORM.fileio(fh, Atin)
		         THISFORM.fileio(fh, ANamectl + Alast + Arettype + AAmtcodes)
		         THISFORM.fileio(fh, ABlank2 + AOrig + AReplace + ACorrect + ABlank3 + AForeign)
		         THISFORM.fileio(fh, APayer + APayer2 + ATransfer + AAddress + ACity + AState + AZipCode)
		         THISFORM.fileio(fh, APhone + ABlank4 + ARecSeq + ABlank5)
		         THISFORM.fileio(fh, Acrlf)
		
		         m.nreccount = m.nreccount + 2
		
		         m.diskno   = m.diskno + 1
		         m.nreccount = 1
		         m.totrecs  = m.totrecs + 1
		         m.nreccount = m.nreccount + 1
		         STORE 0 TO m.total1, m.total2, m.total3, m.ntotal4, m.total5, m.ntotal6
		         STORE 0 TO m.total7, m.total8, m.total9, m.totalA, m.totalB, m.totalC
		
		         SELECT temp1099Cor
		         SCAN
		            SCATTER MEMVAR
		            m.cTaxid = cmEncrypt(ALLTRIM(m.cTaxid),m.goApp.cEncryptionKey)
		            oProgress.UpdateProgress(lnProgress)
		            lnProgress = lnProgress + 1
		
		            IF ll1099NEC
		               IF NOT tcCorrect = 'Y'
		                  IF m.nNonEmp = 0
		                     LOOP
		                  ENDIF
		               ENDIF
		            ENDIF
		
		            IF ll1099Misc
		               IF NOT tcCorrect = 'Y'
		                  IF m.nroyalty = 0 AND ;
		                        m.nother   = 0 AND ;
		                        m.nrents   = 0 AND ;
		                        m.nAttorney = 0
		                     LOOP
		                  ENDIF
		               ENDIF
		            ENDIF
		
		            IF tlCombined
		               SELECT statecodes
		               LOCATE FOR cstate == m.c1099state
		               IF FOUND()
		                  BStateCode = cCode
		               ELSE
		                  BStateCode = '  '
		               ENDIF
		            ELSE
		               BStateCode = '  '
		            ENDIF
		
		            * Determine the type of tin
		            DO CASE
		               CASE SUBSTR(m.cTaxid,3,1) = '-'  && EIN
		                  BTypeTin = '1'
		               CASE SUBSTR(m.cTaxid,4,1) = '-'  && SSN
		                  BTypeTin = '2'
		               OTHERWISE
		                  BTypeTin = ' '
		            ENDCASE
		
		            BTin      = THISFORM.numfmt(m.cTaxid, 9)
		            BCorrected = 'C'
		            IF ll1099Misc
		               BPmt1     = THISFORM.numfmt(PADL(ALLTRIM(TRANSFORM(m.nrents,'999999999.99')), 12, '0'), 12)
		               BPmt2     = THISFORM.numfmt(PADL(ALLTRIM(TRANSFORM(m.nroyalty,'999999999.99')), 12, '0'), 12)
		               BPmt3     = THISFORM.numfmt(PADL(ALLTRIM(TRANSFORM(m.nother,'999999999.99')), 12, '0'), 12)
		               BPmtC     = THISFORM.numfmt(PADL(ALLTRIM(TRANSFORM(m.nAttorney,'999999999.99')), 12, '0'), 12)
		            ELSE
		               BPmt1     = THISFORM.numfmt(PADL(ALLTRIM(TRANSFORM(m.nNonEmp,'999999999.99')), 12, '0'), 12)
		            ENDIF
		
		            BPmt4     = THISFORM.numfmt(PADL(ALLTRIM(TRANSFORM(m.nfedtax,'999999999.99')), 12, '0'), 12)
		            BStateWH  = THISFORM.numfmt(PADL(ALLTRIM(TRANSFORM(m.nstatetax1,'999999999.99')), 12, '0'), 12)
		            IF tlCombined
		               BStateCode = m.ctaxstate1
		            ELSE
		               BStateCode = '  '
		            ENDIF
		            BPayee    = PADR(ALLTRIM(m.cname), 40, ' ')
		            BPayee2   = PADR(ALLTRIM(m.cName2), 40, ' ')
		            BPayAddr  = PADR(ALLTRIM(m.caddr1), 40, ' ')
		            BPayCity  = PADR(ALLTRIM(m.ccity), 40, ' ')
		            BPayState = m.cstate
		            m.czip    = STRTRAN(m.czip, '-', '')
		            BPayZip   = PADR(ALLTRIM(m.czip), 9, ' ')
		
		            IF ll1099Misc
		               m.total1  = m.total1 + m.nrents
		               m.total2  = m.total2 + m.nroyalty
		               m.total3  = m.total3 + m.nother
		               m.total4  = m.total4 + m.nfedtax
		               m.total7  = 0
		               m.totalC  = m.totalC + m.nAttorney
		            ELSE
		               m.total1  = m.total1 + m.nNonEmp
		               m.total4  = m.total4 + m.nfedtax
		               STORE 0 TO m.ntotal2, m.ntotal3, m.ntotal7, m.ntotalC
		            ENDIF
		
		            BAcct     = PADR(ALLTRIM(m.cid), 20, ' ')
		
		            BRecSeq     = PADL(TRANSFORM(lnRecordSeq), 8, '0')
		            lnRecordSeq = lnRecordSeq + 1
		
		            THISFORM.fileio(fh, BType + BYear + BCorrected)
		            THISFORM.fileio(fh, BNamectl + BTypeTin + BTin)
		            THISFORM.fileio(fh, BAcct + BCode + BBlank)
		            THISFORM.fileio(fh, BPmt1 + BPmt2 + BPmt3 + BPmt4 + BPmt5 + BPmt6)
		            THISFORM.fileio(fh, BPmt7 + BPmt8 + BPmt9 + BPmtA + BPmtB + BPmtC)
		            THISFORM.fileio(fh, BPmtD + BPmtE + BPmtF + BPmtG + BPmtH + BPmtI + BBlanks + Bforeign)
		            THISFORM.fileio(fh, BPayee + BPayee2 + BPayAddr + BBlank4 + BPayCity + BPayState)
		            THISFORM.fileio(fh, BPayZip + BBlank5 + BRecSeq + BBlank6 + B2ndTIN + BBlank7 + BDirect + BBlank8)
		            THISFORM.fileio(fh, BSpecial + BStateWH + BLocalWH + BStateCode)
		            THISFORM.fileio(fh, BCRLF)
		
		            m.nreccount = m.nreccount + 1
		            lnBCount = lnBCount + 1
		            lnBCountTotal = lnBCountTotal + 1
		            lnTotal    = lnTotal + 1
		
		         ENDSCAN && temp1099
		
		
		         CPayeeNum = PADL(TRANSFORM(lnBCount), 8, '0')
		         CTotal1   = THISFORM.numfmt(PADL(ALLTRIM(TRANSFORM(m.total1,'999999999.99')), 18, '0'), 18)
		         CTotal2   = THISFORM.numfmt(PADL(ALLTRIM(TRANSFORM(m.total2,'999999999.99')), 18, '0'), 18)
		         CTotal3   = THISFORM.numfmt(PADL(ALLTRIM(TRANSFORM(m.total3,'999999999.99')), 18, '0'), 18)
		         CTotal4   = THISFORM.numfmt(PADL(ALLTRIM(TRANSFORM(m.total4,'999999999.99')), 18, '0'), 18)
		         CTotal7   = THISFORM.numfmt(PADL(ALLTRIM(TRANSFORM(m.total7,'999999999.99')), 18, '0'), 18)
		         CTotalC   = THISFORM.numfmt(PADL(ALLTRIM(TRANSFORM(m.totalC,'999999999.99')), 18, '0'), 18)
		
		         CRecSeq     = PADL(TRANSFORM(lnRecordSeq), 8, '0')
		         lnRecordSeq = lnRecordSeq + 1
		
		         THISFORM.fileio(fh, 'C' + CPayeeNum + CBlank + CTotal1 + CTotal2 + CTotal3)
		         THISFORM.fileio(fh, CTotal4 + CTotal5 + CTotal6 + CTotal7 + CTotal8 + CTotal9)
		         THISFORM.fileio(fh, CTotalA + CTotalB + CTotalC + CTotalD + CTotalE + CTotalF)
		         THISFORM.fileio(fh, CTotalG + CTotalH + CTotalI + CBlank2 + CRecSeq + CBlank3)
		         THISFORM.fileio(fh, CCRLF)
		
		         m.nreccount = m.nreccount + 1
		         lnFCount   = lnFCount + 1
		
		
		      ELSE
		         *************************************
		         * Reporting 1099s by well
		         *************************************
		         lcMagFile = 'IRSTAX_' + TYear + '.TXT'
		         IF FILE(ADDBS(tcPath) + lcMagFile)
		            ERASE ADDBS(tcPath) + lcMagFile
		         ENDIF
		
		         fh       = FCREATE(ADDBS(tcPath) + lcMagFile)
		         STORE 0 TO lnBCount, lnBCountTotal, lnACount
		
		         TRecSeq     = PADL(TRANSFORM(lnRecordSeq), 8, '0')
		         lnRecordSeq = lnRecordSeq + 1
		
		         TPayeeNo = PADL(TRANSFORM(lnMax), 8, '0')
		         THISFORM.fileio(fh, TType)
		         THISFORM.fileio(fh, TYear + TPrior + TTransTIN + TTCC + TReplace + TBlank + TTest)
		         THISFORM.fileio(fh, TForeign + TName + TNameCont + TCompany + TCompCont + TAddress)
		         THISFORM.fileio(fh, TCity + TState + TZip + TBlank2 + TPayeeNo + TContact + TPhone)
		         THISFORM.fileio(fh, TEmail + TMagInd + TOrigFile + TBlank3 + TRecSeq + TBlank4)
		         THISFORM.fileio(fh, TVendor + TVendName + TVendAdd + TVendCity + TVendState + TVendZip)
		         THISFORM.fileio(fh, TVendCon + TVendPhone + TVendEmail + TBlank5 + TCRLF)
		
		         m.nreccount = m.nreccount + 1
		
		         m.nreccount = 1
		         m.totrecs  = m.totrecs + 1
		         m.nreccount = m.nreccount + 1
		
		         SELECT cwellid, cProducer, ptax FROM temp1099 INTO CURSOR tempwell ORDER BY cwellid GROUP BY cwellid
		         SELECT tempwell
		         lnCount = 1
		         SCAN
		            SCATTER MEMVAR
		            lcWellID = cwellid
		            oProgress.UpdateProgress(lnProgress)
		            lnProgress = lnProgress + 1
		
		            APayer = UPPER(PADR(ALLTRIM(m.cProducer), 40, ' '))
		            Atin   = THISFORM.numfmt(m.ptax, 9)
		
		            ARecSeq     = PADL(TRANSFORM(lnRecordSeq), 8, '0')
		            lnRecordSeq = lnRecordSeq + 1
		
		            THISFORM.fileio(fh, "A")
		            THISFORM.fileio(fh, Ayear + ABlank1)
		            THISFORM.fileio(fh, Atin)
		            THISFORM.fileio(fh, ANamectl + Alast + Acombined + Arettype + AAmtcodes)
		            THISFORM.fileio(fh, ABlank2 + AOrig + AReplace + ACorrect + ABlank3 + AForeign)
		            THISFORM.fileio(fh, APayer + APayer2 + ATransfer + AAddress + ACity + AState + AZipCode)
		            THISFORM.fileio(fh, APhone + ABlank4 + ARecSeq + ABlank5)
		            THISFORM.fileio(fh, Acrlf)
		            lnCount = lnCount + 1
		            lnACount = lnACount + 1 
		
		            SELECT temp1099
		            SCAN FOR cwellid = lcWellID
		               SCATTER MEMVAR
		               m.cTaxid = cmEncrypt(ALLTRIM(m.cTaxid),m.goApp.cEncryptionKey)
		               IF tlCombined
		                  SELECT statecodes
		                  LOCATE FOR cstate == m.c1099state
		                  IF FOUND()
		                     BStateCode = cCode
		                  ELSE
		                     BStateCode = '  '
		                  ENDIF
		               ELSE
		                  BStateCode = '  '
		               ENDIF
		
		               BCorrected = 'G'
		               BTin      = THISFORM.numfmt(m.cTaxid, 9)
		               BPmt1     = THISFORM.numfmt(PADL(ALLTRIM(TRANSFORM(m.nrents,'999999999.99')), 12, '0'), 12)
		               BPmt2     = THISFORM.numfmt(PADL(ALLTRIM(TRANSFORM(m.nroyalty,'999999999.99')), 12, '0'), 12)
		               BPmt3     = THISFORM.numfmt(PADL(ALLTRIM(TRANSFORM(m.nother,'999999999.99')), 12, '0'), 12)
		               BPmt4     = THISFORM.numfmt(PADL(ALLTRIM(TRANSFORM(m.nfedtax,'999999999.99')), 12, '0'), 12)
		               BPmtC     = THISFORM.numfmt(PADL(ALLTRIM(TRANSFORM(m.nAttorney,'999999999.99')), 12, '0'), 12)
		               BPayee    = PADR(ALLTRIM(m.cname), 40, ' ')
		               BPayee2   = PADR(ALLTRIM(m.cName2), 40, ' ')
		               BPayAddr  = PADR(ALLTRIM(m.caddr1), 40, ' ')
		               BPayCity  = PADR(ALLTRIM(m.ccity), 40, ' ')
		               BPayState = m.cstate
		               IF '-' $ m.czip
		                  lnPos  = AT('-', m.czip)
		                  m.czip = SUBSTR(m.czip, 1, lnPos - 1) + SUBSTR(m.czip, lnPos + 1)
		               ENDIF
		               BPayZip  = PADR(ALLTRIM(m.czip), 9, ' ')
		               IF ll1099Misc
		                  m.total1  = 0
		                  m.total2  = 0
		                  m.total3  = 0
		                  m.total4  = 0
		                  m.total7  = 0
		                  m.totalC  = 0
		               ELSE
		                  m.total1  = 0
		                  m.total4  = 0
		                  STORE 0 TO m.ntotal2, m.ntotal3, m.ntotal7, m.ntotalC
		               ENDIF
		
		               BAcct    = PADR(ALLTRIM(m.cid), 20, ' ')
		               BRecSeq     = PADL(TRANSFORM(lnRecordSeq), 8, '0')
		               lnRecordSeq = lnRecordSeq + 1
		
		               THISFORM.fileio(fh, BType + BYear + BCorrected)
		               THISFORM.fileio(fh, BNamectl + BTypeTin + BTin)
		               THISFORM.fileio(fh, BAcct + BCode + BBlank)
		               THISFORM.fileio(fh, BPmt1 + BPmt2 + BPmt3 + BPmt4 + BPmt5 + BPmt6)
		               THISFORM.fileio(fh, BPmt7 + BPmt8 + BPmt9 + BPmtA + BPmtB + BPmtC)
		               THISFORM.fileio(fh, BPmtD + BPmtE + BPmtF + BPmtG + BPmtH + BPmtI + BBlanks + Bforeign)
		               THISFORM.fileio(fh, BPayee + BPayee2 + BPayAddr + BBlank4 + BPayCity + BPayState)
		               THISFORM.fileio(fh, BPayZip + BBlank5 + BRecSeq + BBlank6 + B2ndTIN + BBlank7 + BDirect + BBlank8)
		               THISFORM.fileio(fh, BSpecial + BStateWH + BLocalWH + BStateCode)
		               THISFORM.fileio(fh, BCRLF)
		
		               m.nreccount = m.nreccount + 1
		               lnBCount = lnBCount + 1
		               lnBCountTotal = lnBCountTotal + 1
		               lnTotal    = lnTotal + 1
		
		               lnCount    = lnCount + 1
		            ENDSCAN
		            
		            CPayeeNum = PADL(TRANSFORM(lnBCount), 8, '0')
		            CTotal1   = THISFORM.numfmt(PADL(ALLTRIM(TRANSFORM(m.total1,'999999999.99')), 18, '0'), 18)
		            CTotal2   = THISFORM.numfmt(PADL(ALLTRIM(TRANSFORM(m.total2,'999999999.99')), 18, '0'), 18)
		            CTotal3   = THISFORM.numfmt(PADL(ALLTRIM(TRANSFORM(m.total3,'999999999.99')), 18, '0'), 18)
		            CTotal4   = THISFORM.numfmt(PADL(ALLTRIM(TRANSFORM(m.total4,'999999999.99')), 18, '0'), 18)
		            CTotal7   = THISFORM.numfmt(PADL(ALLTRIM(TRANSFORM(m.total7,'999999999.99')), 18, '0'), 18)
		            CTotalC   = THISFORM.numfmt(PADL(ALLTRIM(TRANSFORM(m.totalC,'999999999.99')), 18, '0'), 18)
		
		            CRecSeq     = PADL(TRANSFORM(lnRecordSeq), 8, '0')
		            lnRecordSeq = lnRecordSeq + 1
		
		            THISFORM.fileio(fh, 'C' + CPayeeNum + CBlank + CTotal1 + CTotal2 + CTotal3)
		            THISFORM.fileio(fh, CTotal4 + CTotal5 + CTotal6 + CTotal7 + CTotal8 + CTotal9)
		            THISFORM.fileio(fh, CTotalA + CTotalB + CTotalC + CTotalD + CTotalE + CTotalF)
		            THISFORM.fileio(fh, CTotalG + CTotalH + CTotalI + CBlank2 + CRecSeq + CBlank3)
		            THISFORM.fileio(fh, CCRLF)
		            m.nreccount = m.nreccount + 1
		            lnFCount   = lnFCount + 1
		
		            ***********************************************************
		            * Build part2 of the transaction for the corrected entries
		            ***********************************************************
		            APayer = UPPER(PADR(ALLTRIM(m.cProducer), 40, ' '))
		            Atin   = THISFORM.numfmt(m.ptax, 9)
		
		            ARecSeq     = PADL(TRANSFORM(lnRecordSeq), 8, '0')
		            lnRecordSeq = lnRecordSeq + 1
		
		            THISFORM.fileio(fh, "A")
		            THISFORM.fileio(fh, Ayear + ABlank1)
		            THISFORM.fileio(fh, Atin)
		            THISFORM.fileio(fh, ANamectl + Alast + Acombined + Arettype + AAmtcodes)
		            THISFORM.fileio(fh, ABlank2 + AOrig + AReplace + ACorrect + ABlank3 + AForeign)
		            THISFORM.fileio(fh, APayer + APayer2 + ATransfer + AAddress + ACity + AState + AZipCode)
		            THISFORM.fileio(fh, APhone + ABlank4 + ARecSeq + ABlank5)
		            THISFORM.fileio(fh, Acrlf)
		            lnCount = lnCount + 1
		            lnACount = lnACount + 1 
		
		            SELECT temp1099Cor
		            SCAN FOR cwellid = lcWellID
		               SCATTER MEMVAR
		               m.cTaxid = cmEncrypt(ALLTRIM(m.cTaxid),m.goApp.cEncryptionKey)
		               IF tlCombined
		                  SELECT statecodes
		                  LOCATE FOR cstate == m.c1099state
		                  IF FOUND()
		                     BStateCode = cCode
		                  ELSE
		                     BStateCode = '  '
		                  ENDIF
		               ELSE
		                  BStateCode = '  '
		               ENDIF
		
		               BCorrected = 'C'
		
		               BTin      = THISFORM.numfmt(m.cTaxid, 9)
		               BPmt1     = THISFORM.numfmt(PADL(ALLTRIM(TRANSFORM(m.nrents,'999999999.99')), 12, '0'), 12)
		               BPmt2     = THISFORM.numfmt(PADL(ALLTRIM(TRANSFORM(m.nroyalty,'999999999.99')), 12, '0'), 12)
		               BPmt3     = THISFORM.numfmt(PADL(ALLTRIM(TRANSFORM(m.nother,'999999999.99')), 12, '0'), 12)
		               BPmt4     = THISFORM.numfmt(PADL(ALLTRIM(TRANSFORM(m.nfedtax,'999999999.99')), 12, '0'), 12)
		               BPmtC     = THISFORM.numfmt(PADL(ALLTRIM(TRANSFORM(m.nAttorney,'999999999.99')), 12, '0'), 12)
		               BPayee    = PADR(ALLTRIM(m.cname), 40, ' ')
		               BPayee2   = PADR(ALLTRIM(m.cName2), 40, ' ')
		               BPayAddr  = PADR(ALLTRIM(m.caddr1), 40, ' ')
		               BPayCity  = PADR(ALLTRIM(m.ccity), 40, ' ')
		               BPayState = m.cstate
		               IF '-' $ m.czip
		                  lnPos  = AT('-', m.czip)
		                  m.czip = SUBSTR(m.czip, 1, lnPos - 1) + SUBSTR(m.czip, lnPos + 1)
		               ENDIF
		               BPayZip  = PADR(ALLTRIM(m.czip), 9, ' ')
		               IF ll1099Misc
		                  m.total1  = m.total1 + m.nrents
		                  m.total2  = m.total2 + m.nroyalty
		                  m.total3  = m.total3 + m.nother
		                  m.total4  = m.total4 + m.nfedtax
		                  m.total7  = 0
		                  m.totalC  = m.totalC + m.nAttorney
		               ELSE
		                  m.total1  = m.total1 + m.nNonEmp
		                  m.total4  = m.total4 + m.nfedtax
		                  STORE 0 TO m.ntotal2, m.ntotal3, m.ntotal7, m.ntotalC
		               ENDIF
		
		               BAcct    = PADR(ALLTRIM(m.cid), 20, ' ')
		               BCorrected = 'C'
		
		               BRecSeq     = PADL(TRANSFORM(lnRecordSeq), 8, '0')
		               lnRecordSeq = lnRecordSeq + 1
		
		               THISFORM.fileio(fh, BType + BYear + BCorrected)
		               THISFORM.fileio(fh, BNamectl + BTypeTin + BTin)
		               THISFORM.fileio(fh, BAcct + BCode + BBlank)
		               THISFORM.fileio(fh, BPmt1 + BPmt2 + BPmt3 + BPmt4 + BPmt5 + BPmt6)
		               THISFORM.fileio(fh, BPmt7 + BPmt8 + BPmt9 + BPmtA + BPmtB + BPmtC)
		               THISFORM.fileio(fh, BPmtD + BPmtE + BPmtF + BPmtG + BPmtH + BPmtI + BBlanks + Bforeign)
		               THISFORM.fileio(fh, BPayee + BPayee2 + BPayAddr + BBlank4 + BPayCity + BPayState)
		               THISFORM.fileio(fh, BPayZip + BBlank5 + BRecSeq + BBlank6 + B2ndTIN + BBlank7 + BDirect + BBlank8)
		               THISFORM.fileio(fh, BSpecial + BStateWH + BLocalWH + BStateCode)
		               THISFORM.fileio(fh, BCRLF)
		
		               m.nreccount = m.nreccount + 1
		               lnBCount = lnBCount + 1 
		               lnBCountTotal = lnBCountTotal + 1 
		               lnTotal    = lnTotal + 1
		
		               lnCount    = lnCount + 1
		            ENDSCAN
		            CPayeeNum = PADL(TRANSFORM(lnBCount), 8, '0')
		            CTotal1   = THISFORM.numfmt(PADL(ALLTRIM(TRANSFORM(m.total1,'999999999.99')), 18, '0'), 18)
		            CTotal2   = THISFORM.numfmt(PADL(ALLTRIM(TRANSFORM(m.total2,'999999999.99')), 18, '0'), 18)
		            CTotal3   = THISFORM.numfmt(PADL(ALLTRIM(TRANSFORM(m.total3,'999999999.99')), 18, '0'), 18)
		            CTotal4   = THISFORM.numfmt(PADL(ALLTRIM(TRANSFORM(m.total4,'999999999.99')), 18, '0'), 18)
		            CTotal7   = THISFORM.numfmt(PADL(ALLTRIM(TRANSFORM(m.total7,'999999999.99')), 18, '0'), 18)
		            CTotalC   = THISFORM.numfmt(PADL(ALLTRIM(TRANSFORM(m.totalC,'999999999.99')), 18, '0'), 18)
		
		            CRecSeq     = PADL(TRANSFORM(lnRecordSeq), 8, '0')
		            lnRecordSeq = lnRecordSeq + 1
		
		            THISFORM.fileio(fh, 'C' + CPayeeNum + CBlank + CTotal1 + CTotal2 + CTotal3)
		            THISFORM.fileio(fh, CTotal4 + CTotal5 + CTotal6 + CTotal7 + CTotal8 + CTotal9)
		            THISFORM.fileio(fh, CTotalA + CTotalB + CTotalC + CTotalD + CTotalE + CTotalF)
		            THISFORM.fileio(fh, CTotalG + CTotalH + CTotalI + CBlank2 + CRecSeq + CBlank3)
		            THISFORM.fileio(fh, CCRLF)
		            m.nreccount = m.nreccount + 1
		            lnFCount   = lnFCount + 1
		
		            m.total1 = 0
		            m.total2 = 0
		            m.total7 = 0
		
		         ENDSCAN && temp1099
		
		      ENDIF && NOT tlByWell
		
		      FPayerNum   = PADL(TRANSFORM(lnAcount),8,'0')
		      FPayerNum2  = PADL(TRANSFORM(lnBCountTotal),8,'0')
		      FRecSeq     = PADL(TRANSFORM(lnRecordSeq), 8, '0')
		      lnRecordSeq = lnRecordSeq + 1
		
		      THISFORM.fileio(fh, FType + FPayerNum + FZeros + FBlanks + FPayerNum2 + FBlanks2 + FRecSeq + FBlanks3 + FCRLF)
		      = FFLUSH(fh)
		      = FCLOSE(fh)
		      WAIT CLEAR
		
		      IF TYPE('oProgress') = 'O'
		         oProgress.CLOSE()
		      ENDIF
		
		      IF tlByWell
		         THISFORM.oMessage.DISPLAY('Created ' + TRANSFORM(lnBCountTotal) + ' Magnetic 1099 Records.')
		      ELSE
		         THISFORM.oMessage.DISPLAY('Created ' + TRANSFORM(lnBCountTotal) + ' Magnetic 1099 Records.')
		      ENDIF
		
		      swclose('temp1099')
		   ENDIF
		CATCH TO loError
		   llReturn = .F.
		   DO errorlog WITH 'CreateCorrection1', loError.LINENO, 'Create 1099 File', loError.ERRORNO, loError.MESSAGE
		   MESSAGEBOX('Unable to process the 1099s at this time. Check the System Log found under Other Reports for more information.' + CHR(13)+CHR(13) + ;
		      'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		RETURN llReturn
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
	ENDPROC

	PROCEDURE createcorrection2
		*
		*  Creates the magnetic media 1099 file
		*
		LOCAL m.totrecs, m.maxrecs, m.nreccount, m.bcount, m.total2, m.total7
		LOCAL m.diskno, fh, lc1099File, lcMagFile, oProgress, lnFCount
		LOCAL tcDrive, tcYear, tcTCC, tnType, tcCorrect, tcID1, tcID2, lnTotal
		LOCAL lcWellID, llReturn, lnCount, lnMax, lnPos, lnProgress, loError
		LOCAL  AAddress, AAmtcodes, ABlank1, ABlank2, ABlank3, ABlank4, ABlank5, ACity, ACorrect, AForeign
		LOCAL  ANamectl, AOrig, APayer, APayer2, APhone, ARecSeq, AReplace, AState, ATransfer, AZipCode
		LOCAL  Acombined, Acrlf, Alast, Arettype, Atin, Atype, Ayear, B2ndTIN, BAcct, BBlank, BBlank2
		LOCAL  BBlank3, BBlank4, BBlank5, BBlank6, BBlank7, BBlank8, BCRLF, BCode, BCorrected, BDirect
		LOCAL  BNamectl, BPayAddr, BPayCity, BPayState, BPayZip, BPayee, BPayee2, BPmt1, BPmt2, BPmt3
		LOCAL  BPmt4, BPmt5, BPmt6, BPmt7, BPmt8, BPmt9, BPmtA, BPmtB, BPmtC, BRecSeq, BTin, BType
		LOCAL  BTypeTin, BYear, Bforeign, CBlank, CBlank2, CBlank3, CCRLF, CPayeeNum, CRecSec, CRecSeq
		LOCAL  CTotal1, CTotal2, CTotal3, CTotal4, CTotal5, CTotal6, CTotal7, CTotal8, CTotal9, CTotalA
		LOCAL  CTotalB, CTotalC, CType, FBlanks, FBlanks2, FBlanks3, FCRLF, FPayerNum, FPayerNum2, FRecSeq
		LOCAL  FType, FZeros, TAddress, TBlank, TBlank2, TBlank3, TBlank4, TBlank5, TCRLF, TCity
		LOCAL  TCompCont, TCompany, TContact, TEmail, TForeign, TMagInd, TName, TNameCont, TOrigFile
		LOCAL  TPayeeNo, TPhone, TPrior, TRecSeq, TReplace, TState, TTCC, TTest, TTransTIN, TType
		LOCAL  TVendAdd, TVendCity, TVendCon, TVendEmail, TVendName, TVendPhone, TVendState, TVendZip
		LOCAL  TVendor, TYear, TZip, bcount, cProducer, czip, diskno, dsk, maxrecs, paddr1, paddr2
		LOCAL  paddr3, pcity, pcontact, pphone, pstate, ptax, pzip, tcPath, test, tlByWell
		LOCAL  total1, total2, total3, total4, total7, totalC, totrecs
		LOCAL  BLocalWH, BSpecial, BStateCode, BStateWH, CTotalD, CTotalE, CTotalF, CTotalG, KBlank1
		LOCAL  KBlank2, KBlank3, KBlank4, KCRLF, KLocalWH, KPayeeNum, KRecSeq, KStateCode, KStateWH
		LOCAL  KTotal1, KTotal2, KTotal3, KTotal4, KTotal5, KTotal6, KTotal7, KTotal8, KTotal9, KTotalA
		LOCAL  KTotalB, KTotalC, KTotalD, KTotalE, KTotalF, KTotalG, KType, cRedSeq, tlCombined
		LOCAL  nKTotal1, nKTotal2, nKTotal3, nKTotal4, nKTotal5, nKTotal6, nKTotal7, nKTotal8
		LOCAL  nKTotal9, nKTotalA, nKTotalB, nKTotalC, nKTotalD, nKTotalE, nKTotalF, nKTotalG
		LOCAL  lnRecordSeq, llCorrection
		
		llReturn = .T.
		
		IF NOT THISFORM.chk1099Misc.VALUE AND NOT THISFORM.chk1099nEC.VALUE
		   MESSAGEBOX('Choose to create the magnetic file for either the 1099-Misc or 1099-Nec.',48,'Choose Type of Return')
		   RETURN
		ENDIF
		
		IF THISFORM.chkcorrect.VALUE = .F.
		   THISFORM.CreateFile()
		   RETURN
		ENDIF
		
		TRY
		   tcPath     = THISFORM.cntgetfile1.edtpath.VALUE
		   tcYear     = THISFORM.txtcYear.VALUE
		   tcTCC      = THISFORM.txtcTCC.VALUE
		   tcCorrect  = IIF(THISFORM.chkcorrect.VALUE, 'Y', 'N')
		   llCorrection = THISFORM.chkcorrect.VALUE
		   tlByWell   = THISFORM.chklByWell.VALUE
		   tlCombined = .F.
		   tlSelect   = THISFORM.chkSelected.VALUE
		   ll1099Misc = THISFORM.chk1099Misc.VALUE
		   ll1099NEC  = THISFORM.chk1099nEC.VALUE
		
		
		
		   IF tlCombined
		      * Get the latest statecodes table
		      llReturn = THISFORM.getstatecodes()
		      IF NOT llReturn
		         EXIT
		      ENDIF
		   ENDIF
		
		   * Determine what type of corrections we have to process
		   SELECT iCorrectionType FROM tax1099Corrections INTO CURSOR temp ORDER BY iCorrectionType GROUP BY iCorrectionType
		
		   SELECT temp
		   LOCATE FOR iCorrectionType = 2
		   IF FOUND()
		      IF ll1099Misc
		         SELECT * FROM tax1099Corrections WHERE cYear = tcYear AND NOT lNEC AND iCorrectionType = 2 INTO CURSOR temp1099s ORDER BY cid
		      ELSE
		         SELECT * FROM tax1099Corrections WHERE cYear = tcYear AND lNEC AND iCorrectionType = 2 INTO CURSOR temp1099s ORDER BY cid
		      ENDIF
		      IF NOT tlSelect
		         SELECT cid FROM tax1099Corrections WHERE cYear = tcYear AND iCorrectionType = 2 INTO CURSOR ten99sel ORDER BY cid
		      ENDIF
		
		      STORE 0 TO nKTotal1, nKTotal2, nKTotal3, nKTotal4, nKTotal5, nKTotal6, nKTotal7, nKTotal8
		      STORE 0 TO nKTotal9, nKTotalA, nKTotalB, nKTotalC, nKTotalD, nKTotalE, nKTotalF, nKTotalG
		
		      lnFCount    = 0
		      lnRecordSeq = 1
		
		      IF LEN(ALLT(tcTCC)) < 5 OR EMPTY(tcTCC)
		         THISFORM.oMessage.Warning('You must specify a 5-character TCC number before the magnetic file can be built.')
		         THISFORM.setnextcontrol(THISFORM.txtcTCC)
		         llReturn = .F.
		         EXIT
		      ENDIF
		
		      IF NOT llCorrection
		         IF NOT tlByWell
		            SELECT * FROM tax1099 WHERE cYear = tcYear AND NOT EMPTY(cwellid) AND NOT DELETED() INTO CURSOR temp
		            IF _TALLY > 0
		               THISFORM.oMessage.Warning('The 1099 file was created by well for this year. You must create the magnetic file by well.')
		               llReturn = .F.
		               EXIT
		            ENDIF
		         ELSE
		            SELECT * FROM tax1099 WHERE cYear = tcYear AND NOT EMPTY(cwellid) AND NOT cidtype = 'V' AND NOT DELETED() INTO CURSOR temp
		            IF _TALLY = 0
		               THISFORM.oMessage.Warning('The 1099 file was not created by well for this year. You cannot create the magnetic file by well.')
		               llReturn = .F.
		               EXIT
		            ENDIF
		         ENDIF
		      ELSE
		         IF NOT tlByWell
		            SELECT * FROM tax1099Corrections WHERE cYear = tcYear AND NOT EMPTY(cwellid) AND NOT DELETED() INTO CURSOR temp
		            IF _TALLY > 0
		               THISFORM.oMessage.Warning('The 1099 file was created by well for this year. You must create the magnetic file by well.')
		               llReturn = .F.
		               EXIT
		            ENDIF
		         ELSE
		            SELECT * FROM tax1099Corrections WHERE cYear = tcYear AND NOT EMPTY(cwellid) AND NOT cidtype = 'V' AND NOT DELETED() INTO CURSOR temp
		            IF _TALLY = 0
		               THISFORM.oMessage.Warning('The 1099 file was not created by well for this year. You cannot create the magnetic file by well.')
		               llReturn = .F.
		               EXIT
		            ENDIF
		         ENDIF
		      ENDIF
		
		      IF NOT DIRECTORY(tcPath)
		         THISFORM.oMessage.Warning('The given file location does not exist. Please choose a valid location.')
		         llReturn = .F.
		         EXIT
		      ENDIF
		
		      * Check on the existence of the application object
		      * if it doesn't exist, we're running in development
		      * mode and need to initialize the company address info.
		      IF TYPE('m.goApp') = 'O'
		         m.cProducer = m.goApp.ccompanyname
		         m.paddr1    = m.goApp.cAddress1
		         m.paddr2    = m.goApp.cAddress2
		         m.paddr3    = m.goApp.cAddress3
		         m.ptax      = cmEncrypt(m.goApp.cTaxid,m.goApp.cEncryptionKey)
		         m.pcity     = m.goApp.ccity
		         m.pzip      = STRTRAN(m.goApp.czip,'-','')
		         m.pzip      = STRTRAN(m.pzip,' ','')
		         m.pstate    = m.goApp.cstate
		         m.pcontact  = m.goApp.cContact
		         m.pphone    = STRTRAN(m.goApp.cPhoneno,'-','')
		         m.pphone    = STRTRAN(m.pphone,'(','')
		         m.pphone    = STRTRAN(m.pphone,')','')
		         m.pphone    = STRTRAN(m.pphone,' ','')
		
		         **  Force them to make sure all the T-record fields are specified, so we ensure that the file doesn't get rejected for something bogus
		         **  like leaving off the company phone number or contact name
		         IF EMPTY(m.cProducer)
		            THISFORM.oMessage.Warning('Please specify a valid company name on the Maintain >> Company Information screen before creating the magnetic file.')
		            llReturn = .F.
		            EXIT
		         ENDIF
		         IF EMPTY(m.paddr1)
		            THISFORM.oMessage.Warning('Please specify a valid company address on the Maintain >> Company Information screen before creating the magnetic file.')
		            llReturn = .F.
		            EXIT
		         ENDIF
		         IF EMPTY(m.ptax)
		            THISFORM.oMessage.Warning('Please specify a valid company tax ID on the Maintain >> Company Information screen before creating the magnetic file.')
		            llReturn = .F.
		            EXIT
		         ENDIF
		         IF EMPTY(m.pcity)
		            THISFORM.oMessage.Warning('Please specify a valid city in the address on the Maintain >> Company Information screen before creating the magnetic file.')
		            llReturn = .F.
		            EXIT
		         ENDIF
		         IF EMPTY(m.pstate)
		            THISFORM.oMessage.Warning('Please specify a valid state in the address on the Maintain >> Company Information screen before creating the magnetic file.')
		            llReturn = .F.
		            EXIT
		         ENDIF
		         IF EMPTY(m.pzip)
		            THISFORM.oMessage.Warning('Please specify a valid zip code in the address on the Maintain >> Company Information screen before creating the magnetic file.')
		            llReturn = .F.
		            EXIT
		         ENDIF
		         IF EMPTY(m.pcontact)
		            THISFORM.oMessage.Warning('Please specify a valid contact name on the Maintain >> Company Information screen before creating the magnetic file.')
		            llReturn = .F.
		            EXIT
		         ENDIF
		         IF EMPTY(m.pphone)
		            THISFORM.oMessage.Warning('Please specify a valid phone number on the Maintain >> Company Information screen before creating the magnetic file.')
		            llReturn = .F.
		            EXIT
		         ENDIF
		      ELSE
		         m.cProducer = 'SherWare, Inc.'
		         m.paddr1    = '2098 Portage Rd Suite 250'
		         m.paddr2    = 'Wooster, OH  44691'
		         m.paddr3    = ''
		         m.ptax      = '99-9999999'
		         m.pcontact  = 'Phil Sherwood'
		         m.pphone    = '3302620200'
		         m.pcity     = 'Wooster'
		         m.pstate    = 'OH'
		         m.pzip      = '44691'
		      ENDIF
		
		      IF NOT tlByWell
		         IF NOT tlCombined
		            SELECT  tcCorrect AS correct, ;
		               m.paddr1 AS paddr1, ;
		               m.paddr2 AS paddr2, ;
		               m.paddr3 AS paddr3, ;
		               m.ptax   AS ptax, ;
		               m.pphone AS pphone, ;
		               m.pcontact AS pcontact, ;
		               m.cProducer AS cProducer, ;
		               temp1099s.cYear, ;
		               temp1099s.cid, ;
		               temp1099s.cidtype, ;
		               temp1099s.cprogcode, ;
		               temp1099s.cname, ;
		               temp1099s.cName2,  ;
		               temp1099s.caddr1, ;
		               temp1099s.caddr2, ;
		               temp1099s.ccity, ;
		               temp1099s.cstate, ;
		               temp1099s.czip, ;
		               temp1099s.cTaxid, ;
		               temp1099s.nother, ;
		               temp1099s.nroyalty, ;
		               temp1099s.nrents, ;
		               temp1099s.nNonEmp,  ;
		               temp1099s.nAttorney,  ;
		               temp1099s.ctaxstate1, ;
		               temp1099s.nstatetax1, ;
		               temp1099s.cstatepayerno1, ;
		               temp1099s.ctaxstate2, ;
		               temp1099s.nstatetax2, ;
		               temp1099s.cstatepayerno2, ;
		               temp1099s.nfedtax ;
		               FROM temp1099s ;
		               WHERE cYear = tcYear ;
		               AND cid IN (SELECT  cid ;
		               FROM ten99sel);
		               AND NOT DELETED() ;
		               INTO CURSOR temp1099 READWRITE ;
		               ORDER BY cid
		         ELSE
		            SELECT  tcCorrect AS correct, ;
		               m.paddr1 AS paddr1, ;
		               m.paddr2 AS paddr2, ;
		               m.paddr3 AS paddr3, ;
		               m.ptax   AS ptax, ;
		               m.pphone AS pphone, ;
		               m.pcontact AS pcontact, ;
		               m.cProducer AS cProducer, ;
		               IIF(EMPTY(c1099state), 'ZZ', tax1099ST.c1099state) AS c1099state, ;
		               tax1099ST.cYear, ;
		               tax1099ST.cid, ;
		               tax1099ST.cidtype, ;
		               tax1099ST.cprogcode, ;
		               tax1099ST.cname, ;
		               tax1099ST.cName2,  ;
		               tax1099ST.caddr1, ;
		               tax1099ST.caddr2, ;
		               tax1099ST.ccity, ;
		               tax1099ST.cstate, ;
		               tax1099ST.czip, ;
		               tax1099ST.cTaxid, ;
		               tax1099ST.nother, ;
		               tax1099ST.nroyalty, ;
		               tax1099ST.nrents, ;
		               tax1099ST.nNonEmp,  ;
		               tax1099ST.nAttorney,  ;
		               temp1099s.ctaxstate1, ;
		               temp1099s.nstatetax1, ;
		               temp1099s.cstatepayerno1, ;
		               temp1099s.ctaxstate2, ;
		               temp1099s.nstatetax2, ;
		               temp1099s.cstatepayerno2, ;
		               tax1099ST.nfedtax ;
		               FROM tax1099ST ;
		               WHERE cYear = tcYear ;
		               AND cid IN (SELECT  cid ;
		               FROM ten99sel);
		               AND NOT DELETED() ;
		               INTO CURSOR temp1099 READWRITE ;
		               ORDER BY c1099state, cid
		
		
		            SELECT temp1099
		            REPLACE c1099state WITH 'ZZ' FOR EMPTY(c1099state)
		
		
		            * Get the totals for the K records
		            IF ll1099Misc
		               SELECT  tax1099ST.c1099state, ;
		                  COUNT(*) AS nKPayeeCount, ;
		                  SUM(tax1099ST.nother) AS nKTotal3, ;
		                  SUM(tax1099ST.nroyalty) AS nKTotal2, ;
		                  SUM(tax1099ST.nrents) AS nKTotal1, ;
		                  SUM(tax1099ST.nNonEmp) AS nKTotal7,  ;
		                  SUM(tax1099ST.nAttorney) AS nKTotalC,  ;
		                  SUM(tax1099ST.nfedtax) AS nKTotal4 ;
		                  FROM tax1099ST ;
		                  WHERE cYear = tcYear ;
		                  AND NOT EMPTY(c1099state) ;
		                  AND c1099state IN (SELECT  cstate ;
		                  FROM statecodes) ;
		                  AND cid IN (SELECT  cid ;
		                  FROM ten99sel);
		                  AND NOT DELETED() ;
		                  INTO CURSOR tempK ;
		                  ORDER BY c1099state ;
		                  GROUP BY c1099state
		            ELSE
		               SELECT  tax1099ST.c1099state, ;
		                  COUNT(*) AS nKPayeeCount, ;
		                  0.00 AS nKTotal3, ;
		                  0.00 AS nKTotal2, ;
		                  0.00 AS nKTotal1, ;
		                  SUM(tax1099ST.nNonEmp) AS nKTotal7,  ;
		                  0.00 AS nKTotalC,  ;
		                  SUM(tax1099ST.nfedtax) AS nKTotal4 ;
		                  FROM tax1099ST ;
		                  WHERE cYear = tcYear ;
		                  AND NOT EMPTY(c1099state) ;
		                  AND c1099state IN (SELECT  cstate ;
		                  FROM statecodes) ;
		                  AND cid IN (SELECT  cid ;
		                  FROM ten99sel);
		                  AND NOT DELETED() ;
		                  INTO CURSOR tempK ;
		                  ORDER BY c1099state ;
		                  GROUP BY c1099state
		            ENDIF
		
		         ENDIF
		      ELSE
		         IF NOT tlCombined
		            SELECT  tcCorrect AS correct, ;
		               m.paddr1 AS paddr1, ;
		               m.paddr2 AS paddr2, ;
		               m.paddr3 AS paddr3, ;
		               m.ptax   AS ptax, ;
		               m.pphone AS pphone, ;
		               m.pcontact AS pcontact, ;
		               temp1099s.cwellid, ;
		               m.cProducer AS cProducer, ;
		               temp1099s.cYear, ;
		               temp1099s.cid, ;
		               temp1099s.cidtype, ;
		               temp1099s.cprogcode, ;
		               temp1099s.cname, ;
		               temp1099s.cName2,  ;
		               temp1099s.caddr1, ;
		               temp1099s.caddr2, ;
		               temp1099s.ccity, ;
		               temp1099s.cstate, ;
		               temp1099s.czip, ;
		               temp1099s.cTaxid, ;
		               temp1099s.nother, ;
		               temp1099s.nroyalty, ;
		               temp1099s.nrents, ;
		               temp1099s.nNonEmp,  ;
		               temp1099s.nAttorney,  ;
		               temp1099s.ctaxstate1, ;
		               temp1099s.nstatetax1, ;
		               temp1099s.cstatepayerno1, ;
		               temp1099s.ctaxstate2, ;
		               temp1099s.nstatetax2, ;
		               temp1099s.cstatepayerno2, ;
		               temp1099s.nfedtax ;
		               FROM temp1099s ;
		               WHERE cYear = tcYear ;
		               AND cid IN (SELECT  cid ;
		               FROM ten99sel);
		               AND NOT DELETED() ;
		               INTO CURSOR temp1099 READWRITE ;
		               ORDER BY cid
		         ELSE
		            SELECT  tcCorrect AS correct, ;
		               m.paddr1 AS paddr1, ;
		               m.paddr2 AS paddr2, ;
		               m.paddr3 AS paddr3, ;
		               tax1099ST.cwelltax AS ptax, ;
		               m.pphone AS pphone, ;
		               m.pcontact AS pcontact, ;
		               tax1099ST.c1099state, ;
		               tax1099ST.cwellid, ;
		               tax1099ST.cwellname AS cProducer, ;
		               tax1099ST.cYear, ;
		               tax1099ST.cid, ;
		               tax1099ST.cidtype, ;
		               tax1099ST.cprogcode, ;
		               tax1099ST.cname, ;
		               tax1099ST.cName2,  ;
		               tax1099ST.caddr1, ;
		               tax1099ST.caddr2, ;
		               tax1099ST.ccity, ;
		               tax1099ST.cstate, ;
		               tax1099ST.czip, ;
		               tax1099ST.cTaxid, ;
		               tax1099ST.nother, ;
		               tax1099ST.nroyalty, ;
		               tax1099ST.nrents, ;
		               tax1099ST.nNonEmp,  ;
		               tax1099ST.nAttorney,  ;
		               temp1099s.ctaxstate1, ;
		               temp1099s.nstatetax1, ;
		               temp1099s.cstatepayerno1, ;
		               temp1099s.ctaxstate2, ;
		               temp1099s.nstatetax2, ;
		               temp1099s.cstatepayerno2, ;
		               tax1099ST.nfedtax ;
		               FROM tax1099ST ;
		               WHERE cYear = tcYear ;
		               AND cid IN (SELECT  cid ;
		               FROM ten99sel);
		               AND NOT DELETED() ;
		               INTO CURSOR temp1099 READWRITE ;
		               ORDER BY c1099state, cid
		
		            SELECT  tcCorrect AS correct, ;
		               m.paddr1 AS paddr1, ;
		               m.paddr2 AS paddr2, ;
		               m.paddr3 AS paddr3, ;
		               temp1099s.cwelltax   AS ptax, ;
		               m.pphone AS pphone, ;
		               m.pcontact AS pcontact, ;
		               m.cProducer AS cProducer, ;
		               temp1099s.cYear, ;
		               temp1099s.cid, ;
		               temp1099s.cidtype, ;
		               temp1099s.cprogcode, ;
		               temp1099s.cname, ;
		               temp1099s.cName2,  ;
		               temp1099s.caddr1, ;
		               temp1099s.caddr2, ;
		               temp1099s.ccity, ;
		               temp1099s.cstate, ;
		               temp1099s.czip, ;
		               temp1099s.cTaxid, ;
		               temp1099s.nother, ;
		               temp1099s.nroyalty, ;
		               temp1099s.nrents, ;
		               temp1099s.nNonEmp,  ;
		               temp1099s.nAttorney,  ;
		               temp1099s.ctaxstate1, ;
		               temp1099s.nstatetax1, ;
		               temp1099s.cstatepayerno1, ;
		               temp1099s.ctaxstate2, ;
		               temp1099s.nstatetax2, ;
		               temp1099s.cstatepayerno2, ;
		               temp1099s.nfedtax ;
		               FROM temp1099s ;
		               WHERE cYear = tcYear ;
		               AND cidtype = 'V' ;
		               AND cid IN (SELECT  cid ;
		               FROM ten99sel);
		               AND NOT DELETED() ;
		               INTO CURSOR temp1099x  ;
		               ORDER BY cid
		
		            IF _TALLY > 0
		               SELECT temp1099
		               APPEND FROM DBF('temp1099x')
		            ENDIF
		            SELECT temp1099
		            REPLACE c1099state WITH 'ZZ' FOR EMPTY(c1099state)
		
		            * Get the totals for the K records
		            SELECT  tax1099ST.c1099state, ;
		               COUNT(*) AS nKPayeeCount, ;
		               SUM(tax1099ST.nother) AS nKTotal3, ;
		               SUM(tax1099ST.nroyalty) AS nKTotal2, ;
		               SUM(tax1099ST.nrents) AS nKTotal1, ;
		               SUM(tax1099ST.nNonEmp) AS nKTotal7,  ;
		               SUM(tax1099ST.nAttorney) AS nKTotalC,  ;
		               SUM(tax1099ST.nfedtax) AS nKTotal4 ;
		               FROM tax1099ST ;
		               WHERE cYear = tcYear ;
		               AND NOT EMPTY(c1099state) ;
		               AND c1099state IN (SELECT  cstate ;
		               FROM statecodes) ;
		               AND cid IN (SELECT  cid ;
		               FROM ten99sel);
		               AND NOT DELETED() ;
		               INTO CURSOR tempK ;
		               ORDER BY c1099state ;
		               GROUP BY c1099state
		         ENDIF
		      ENDIF
		
		      IF RECCOUNT('temp1099') = 0
		         THISFORM.oMessage.Warning('There were no 1099 records for the given year. Please check your data.')
		         llReturn = .F.
		         EXIT
		      ENDIF
		
		      IF tlCombined
		         SELECT temp1099
		         INDEX ON c1099state + cid TAG cid
		      ELSE
		         SELECT temp1099
		         INDEX ON cid TAG cid
		      ENDIF
		
		      lnFCount  = 0
		      m.totrecs = 0
		      m.bcount  = 0
		      m.total1  = 0
		      m.total2  = 0
		      m.total3  = 0
		      m.total4  = 0
		      m.total7  = 0
		      m.totalC  = 0
		      m.diskno  = 1
		      m.creturn    = CHR(13) + CHR(10)
		      fh        = ' '
		
		      m.test = ' '
		
		      IF 'SHERWARE' $ UPPER(m.cProducer)
		         IF THISFORM.oMessage.CONFIRM('Is This A Test File?')
		            m.test = 'T'
		         ENDIF
		      ENDIF
		
		      IF THISFORM.chkTestFile.VALUE
		         m.test = 'T'
		      ENDIF
		
		      *
		      *  Transmitter Record
		      *
		      TType      = 'T'			&& Record Type						1
		      TYear      = tcYear         && Payment Year						2-5
		      TPrior     = ' '            && Prior Year Data Indicator		6
		      TTransTIN  = THISFORM.numfmt(m.ptax, 9)  && Transmitter's taxid #			7-15
		      TTCC       = tcTCC			&& Transmitter Control Code			16-20
		      TReplace   = SPACE(2)    	&& Replacement File Character		21-22
		      TBlank     = SPACE(5)		&& Blank							23-27
		      TTest      = m.test			&& Test Indicator					28
		      TForeign   = ' '			&& Foreign Entity Indicator, blank means no	29
		      TName      = UPPER(PADR(ALLTRIM(m.cProducer), 40, ' '))  	&&		30-69
		      TNameCont  = SPACE(40)      && Transmitter Name Continuation	70-109
		      TCompany   = UPPER(PADR(ALLTRIM(m.cProducer), 40, ' '))	&&		110-149
		      TCompCont  = SPACE(40)		&& Company Name Continuation		150-189
		      TAddress   = UPPER(PADR(ALLTRIM(m.paddr1), 40, ' '))		&&		190-229
		      TCity      = UPPER(PADR(ALLTRIM(m.pcity), 40, ' '))		&&		230-269
		      TState     = UPPER(m.pstate) && Transmitter State Code			270-271
		      TZip       = UPPER(PADR(TRANSFORM(m.pzip), 9, ' ')) 		&&		272-280
		      TBlank2    = SPACE(15)		&& Blank					&&		281-295
		      TPayeeNo   = '00000000'		&& Number of B Payee records		296-303
		      TContact   = UPPER(PADR(ALLTRIM(m.pcontact), 40, ' '))	&&		304-343
		      TPhone     = PADR(ALLTRIM(m.pphone), 15, ' ')				&&		344-358
		      TEmail     = SPACE(35)      && Contact email address            359-393
		      TMagInd    = SPACE(2)		&& Magnetic Tape Indicator			394-395
		      TOrigFile  = SPACE(15)		&& Original File Name				396-410
		      TBlank3    = SPACE(89 )     && Blank							411-499
		      TRecSeq    = '00000001'     && Record sequence number           500-507
		      TBlank4    = SPACE(10)      && Blank                            508-517
		      TVendor    = 'V'            && Vendor indicator.  SherWare is the vendor 518
		      TVendName  = 'SherWare, Inc.                          '  && Vendor Name 519-558
		      TVendAdd   = '4182 Clemmons Road Box 285              '  && Vendor Address 559-598
		      TVendCity  = 'Clemmons                                '  &&  Vendor City 599-638
		      TVendState = 'NC'           && Vendor state                     639-640
		      TVendZip   = '27012    '    && Vendor Zip                       641-649
		      TVendCon   = 'Phil Sherwood                           '  && Vendor contact 650-689
		      TVendPhone = '3302620200     '  &&  Vendor phone                690-704
		      TVendEmail = 'sales@sherware.com                 '  &&  Vendor email  705-739
		      TBlank5    = '         '    &&  Blank                           740-748
		      TCRLF      = m.creturn         && Carriage Return and Line Feed	749-750
		
		      *
		      *  Record "A"
		      *
		      Atype     = 'A'			&& Record Type						1
		      Ayear     = tcYear			&& Payment Year						2-5
		      Acombined = ' '			&& Combined federal/state filer		6
		      ABlank1   = SPACE(5)       && Blank							7-11
		      Atin      = THISFORM.numfmt(m.ptax, 9) && Payer's TIN			12-20
		      ANamectl  = SPACE(4)   	&& Payer Name Control				21-24
		      Alast     = ' '			&& Last filing indicator			25
		      IF ll1099Misc
		         Arettype  = 'A '			&& Return type   1099-misc = "A"	26-27
		      ELSE
		         Arettype  = 'NE'			&& Return type   1099-NEC = "NE"	26-27
		      ENDIF
		      IF ll1099Misc
		         AAmtcodes = '1234C       '	&& Amount codes						28-45
		      ELSE
		         AAmtcodes = '14           '	&& Amount codes						28-45
		      ENDIF
		      ABlank2   = SPACE(8)       && Blank							40-47
		      AOrig     = ' ' 			&& Original File Indicator			48  &&  Blanked out original file marker, per IRS instructions for 2007 files - BH 12/03/2007
		      AReplace  = ' ' 			&& Replacement File Indicator		49
		      ACorrect  = ' '			&& Corrected File Indicator			50
		      ABlank3   = ' '       		&& Blank							51
		      AForeign  = ' '			&& Foreign Corporation				52
		      APayer    = UPPER(PADR(ALLTRIM(m.cProducer), 40, ' '))	&&		53-92
		      APayer2   = SPACE(40)		&& Payer name line 2				93-132
		      ATransfer = '0'			&& 2nd payer type					133
		      AAddress  = UPPER(PADR(ALLTRIM(m.paddr1), 40, ' '))		&&		134-173
		      ACity     = UPPER(PADR(ALLTRIM(m.pcity), 40, ' '))		&&		174-213
		      AState    = UPPER(m.pstate) && Payer State						214-215
		      AZipCode  = UPPER(PADR(TRANSFORM(m.pzip), 9, ' ')) && Payer Zip Cd	216-224
		      APhone    = PADR(ALLTRIM(m.pphone), 15, ' ')	&& Payer Phone Num	225-239
		      ABlank4   = SPACE(260)     && Blank							240-499
		      ARecSeq   = '00000002'     && Record sequence                  500-507
		      ABlank5   = SPACE(241)     && Blanks                           508-748
		      Acrlf     = m.creturn			&& Carriage Return/Line Feed		749-750
		      *
		      *  Record "B"
		      *
		      BType      = 'B'			    && Record Type						1
		      BYear      = tcYear			&& Payment year						2-5
		      BCorrected = ' '			    && Corrected Return Indicator		6
		      BNamectl   = SPACE(4)  		&& Name control						7-10
		      BTypeTin   = ' '			    && Type of Tin						11
		      BTin       = SPACE(9)		&& TIN								12-20
		      BAcct      = SPACE(20)		&& Payer's acct # for payee			21-40
		      BCode      = SPACE(4)		&& Payer's office code				41-44
		      BBlank     = SPACE(10) 		&& Blank							45-54
		      BPmt1      = '000000000000'  && Payment amount 1  				55-66
		      BPmt2      = '000000000000'  && Payment amount 2					67-78
		      BPmt3      = '000000000000'  && Payment amount 3					79-90
		      BPmt4      = '000000000000'  && Payment amount 4					91-102
		      BPmt5      = '000000000000'  && Payment amount 5					103-114
		      BPmt6      = '000000000000'  && Payment amount 6					115-126
		      BPmt7      = '000000000000'  && Payment amount 7					127-138
		      BPmt8      = '000000000000'	&& Payment amount 8					139-150
		      BPmt9      = '000000000000'	&& Payment amount 9					151-162
		      BPmtA      = '000000000000'	&& Payment amount A					163-174
		      BPmtB      = '000000000000'	&& Payment amount B					175-186
		      BPmtC      = '000000000000'	&& Payment amount C					187-198
		      BPmtD      = '000000000000'	&& Payment amount D					199-210
		      BPmtE      = '000000000000'	&& Payment amount E					211-222
		      BPmtF      = '000000000000'	&& Payment amount F					223-234
		      BPmtG      = '000000000000'	&& Payment amount G					235-246
		      BPmtH      = '000000000000'	&& Payment amount H					247-258
		      BPmtI      = '000000000000'	&& Payment amount I					259-270
		      BBlanks    = SPACE(16)      && Blanks							271-286
		      Bforeign   = SPACE(1)	    && Foreign country indicator		287
		      BPayee     = SPACE(40) 		&& Payee name						288-327
		      BPayee2    = SPACE(40)		&& Payee name 2						328-367
		      BPayAddr   = SPACE(40)		&& Payee address					368-407
		      BBlank2    = SPACE(40) 		&& Blank							408-447
		      BBlank3    = SPACE(40) 		&& Blank							408-447
		      BBlank4    = SPACE(40) 		&& Blank							408-447
		      BPayCity   = SPACE(40)		&& Payee city						448-487
		      BPayState  = SPACE(2) 		&& Payee state						488-489
		      BPayZip    = SPACE(9)		&& Payee zip						490-498
		      BBlank5    = SPACE(1)		&& blanks							499
		      BRecSeq    = '00000001'      && Record sequence                  500-507
		      BBlank6    = SPACE(36)       && Blanks                           508-543
		
		      B2ndTIN    = ' '	 	    	&& 2nd TIN Notice					544
		      BBlank7    = SPACE(2)		&& Blank							545-546
		      BDirect    = ' ' 			&& Direct sales indicator			547
		      BBlank8    = SPACE(115)		&& Blank							548-662
		      BSpecial   = SPACE(60)       && Special Data Entries             553-722
		      BStateWH   = SPACE(12)       && State Income Tax Withheld        723-734
		      BLocalWH   = SPACE(12)       && Local Income Tax Withheld        735-746
		      BStateCode = SPACE(2)        && Combined Federal/State Code      747-748
		      BCRLF      = m.creturn			&& Carriage Return/Line Feed		749-750
		
		
		      *
		      * Record "C"
		      *
		      CType     = 'C'			&& Record Type						1
		      CPayeeNum = '00000000'		&& Number of B records				2-9
		      CBlank    = SPACE(6)   	&& Blanks							10-15
		      CTotal1   = '000000000000000000'	&& Control Total 1			16-33
		      CTotal2   = '000000000000000000'	&& Control Total 2			34-51
		      CTotal3   = '000000000000000000'	&& Control Total 3			52-69
		      CTotal4   = '000000000000000000'	&& Control Total 4			70-87
		      CTotal5   = '000000000000000000'	&& Control Total 5			88-105
		      CTotal6   = '000000000000000000'	&& Control Total 6			106-123
		      CTotal7   = '000000000000000000'	&& Control Total 7			124-141
		      CTotal8   = '000000000000000000'	&& Control Total 8			142-159
		      CTotal9   = '000000000000000000'	&& Control Total 9			160-177
		      CTotalA   = '000000000000000000'	&& Control Total A			178-195
		      CTotalB   = '000000000000000000'	&& Control Total B			196-213
		      CTotalC   = '000000000000000000'	&& Control Total C			214-231
		      CTotalD   = '000000000000000000'	&& Control Total D			232-249
		      CTotalE   = '000000000000000000'	&& Control Total E			250-267
		      CTotalF   = '000000000000000000'	&& Control Total F			268-285
		      CTotalG   = '000000000000000000'	&& Control Total G			286-303
		      CTotalH   = '000000000000000000'	&& Control Total H			304-321
		      CTotalI   = '000000000000000000'	&& Control Total I			322-339
		      CBlank2   = SPACE(160)			&& Blank					340-499
		      CRecSeq   = '00000001'           && Record sequence          500-507
		      CBlank3   = SPACE(241)           && Blank                    508-748
		      CCRLF     = m.creturn				&& Carriage Ret/Line Feed	749-750
		      *
		      * Record "K"
		      *
		      KType      = 'K'                  && Record Type              1
		      KPayeeNum  = '00000000'           && Number of B Recs for St  2-9
		      KBlank1    = SPACE(6)             && Blank                    10-15
		      KTotal1    = '000000000000000000' && Control Total 1          16-33
		      KTotal2    = '000000000000000000' && Control Total 2          34-51
		      KTotal3    = '000000000000000000' && Control Total 3          52-69
		      KTotal4    = '000000000000000000' && Control Total 4          70-87
		      KTotal5    = '000000000000000000' && Control Total 5          88-105
		      KTotal6    = '000000000000000000' && Control Total 6          106-123
		      KTotal7    = '000000000000000000' && Control Total 7          124-141
		      KTotal8    = '000000000000000000' && Control Total 8          142-159
		      KTotal9    = '000000000000000000' && Control Total 9          160-177
		      KTotalA    = '000000000000000000' && Control Total A          178-195
		      KTotalB    = '000000000000000000' && Control Total B          196-213
		      KTotalC    = '000000000000000000' && Control Total C          214-231
		      KTotalD    = '000000000000000000' && Control Total D          232-249
		      KTotalE    = '000000000000000000' && Control Total E          250-267
		      KTotalF    = '000000000000000000' && Control Total F          268-285
		      KTotalG    = '000000000000000000' && Control Total G          286-303
		      KTotalH    = '000000000000000000' && Control Total H          304-321
		      KTotalI    = '000000000000000000' && Control Total I          322-339
		      KBlank2    = SPACE(160)           && Blank                    340-499
		      KRecSeq    = '00000001'           && Record Sequence          500-507
		      KBlank3    = SPACE(199)           && Blank                    508-706
		      KStateWH   = '000000000000000000' && State Income Tax WH      707-724
		      KLocalWH   = '000000000000000000' && Local Income Tax WH      725-742
		      KBlank4    = SPACE(4)             && Blank                    743-746
		      KStateCode = SPACE(2)             && State Code               747-748
		      KCRLF      = m.creturn               && Carriage ret/line feed   749-750
		
		
		      *
		      * Record "F"
		      *
		      FType      = 'F'			        && Record Type						1
		      FPayerNum  = '00000001'	        && Number of A records				2-9
		      FZeros     = '000000000000000000000'  && Zeros					10-30
		      FBlanks    = SPACE(19)  	        && Blanks							31-49
		      FPayerNum2 = '00000001'          && Number of B records              50-57
		      FBlanks2   = SPACE(442)          && Blanks                           58-499
		      FRecSeq    = '00000001'          && Record sequence number           500-508
		      FBlanks3   = SPACE(241)          && Blanks                           509-748
		      FCRLF      = m.creturn			    && Carriage Ret/Line Feed			749-750
		
		      * Check to see if this is a prior year
		      IF YEAR(DATE()) - VAL(tcYear) > 1
		         TPrior = 'P'
		      ELSE
		         TPrior = ' '
		      ENDIF
		
		      SELECT temp1099
		      COUNT FOR cYear = tcYear TO lnMax
		      IF ll1099Misc
		         IF tcCorrect = 'Y'
		            COUNT FOR cYear = tcYear TO lnBRecs
		         ELSE
		            COUNT FOR cYear = tcYear AND (nroyalty # 0 OR nother # 0 OR nAttorney # 0 OR nrents # 0)  TO lnBRecs
		         ENDIF
		      ELSE
		         IF tcCorrect = 'Y'
		            COUNT FOR cYear = tcYear TO lnBRecs
		         ELSE
		            COUNT FOR cYear = tcYear AND nNonEmp # 0 TO lnBRecs
		         ENDIF
		      ENDIF
		      GO TOP
		      lnProgress = 1
		      oProgress  = THISFORM.oMessage.ProgressBar('Creating 1099 Magnetic File For ' + tcYear + '....')
		      oProgress.SetProgressRange(0, lnMax)
		
		      m.maxrecs  = 999999999
		      m.nreccount = 999999999
		      lnTotal    = 0
		
		      BCorrected = 'G'
		      
		      IF NOT tlByWell
		
		         lnCount = 1
		         IF ll1099Misc
		            lcMagFile = 'IRSTAX_MISC_' + TYear + '_0.TXT'
		         ELSE
		            lcMagFile = 'IRSTAX_NEC_' + TYear + '_0.TXT'
		         ENDIF
		         DO WHILE FILE(ADDBS(tcPath)+lcMagFile)
		            IF ll1099Misc
		               lcMagFile = 'IRSTAX_MISC_' + TYear + '_' + TRANSFORM(lnCount) + '.TXT'
		            ELSE
		               lcMagFile = 'IRSTAX_NEC_' + TYear + '_' + TRANSFORM(lnCount) + '.TXT'
		            ENDIF
		            lnCount = lnCount + 1
		         ENDDO
		
		         fh       = FCREATE(ADDBS(tcPath) + lcMagFile)
		
		         TRecSeq     = PADL(TRANSFORM(lnRecordSeq), 8, '0')
		         lnRecordSeq = lnRecordSeq + 1
		
		         IF TYear < THISFORM.CurrentYear
		            TPrior = 'P'
		         ENDIF
		         TPayeeNo = PADL(ALLTRIM(STR(lnBRecs, 8)), 8, '0')
		         THISFORM.fileio(fh, TType)
		         THISFORM.fileio(fh, TYear + TPrior + TTransTIN + TTCC + TReplace + TBlank + TTest)
		         THISFORM.fileio(fh, TForeign + TName + TNameCont + TCompany + TCompCont + TAddress)
		         THISFORM.fileio(fh, TCity + TState + TZip + TBlank2 + TPayeeNo + TContact + TPhone)
		         THISFORM.fileio(fh, TEmail + TMagInd + TOrigFile + TBlank3 + TRecSeq + TBlank4)
		         THISFORM.fileio(fh, TVendor + TVendName + TVendAdd + TVendCity + TVendState + TVendZip)
		         THISFORM.fileio(fh, TVendCon + TVendPhone + TVendEmail + TBlank5 + TCRLF)
		
		         * Combined Federal/State Filing
		         IF tlCombined
		            IF RECCOUNT('tempk') > 0
		               Acombined = '1'
		            ELSE
		               Acombined = ' '
		            ENDIF
		         ELSE
		            Acombined = ' '
		         ENDIF
		
		         ARecSeq     = PADL(TRANSFORM(lnRecordSeq), 8, '0')
		         lnRecordSeq = lnRecordSeq + 1
		
		         THISFORM.fileio(fh, "A")
		         THISFORM.fileio(fh, Ayear + Acombined + ABlank1)
		         THISFORM.fileio(fh, Atin)
		         THISFORM.fileio(fh, ANamectl + Alast + Arettype + AAmtcodes)
		         THISFORM.fileio(fh, ABlank2 + AOrig + AReplace + ACorrect + ABlank3 + AForeign)
		         THISFORM.fileio(fh, APayer + APayer2 + ATransfer + AAddress + ACity + AState + AZipCode)
		         THISFORM.fileio(fh, APhone + ABlank4 + ARecSeq + ABlank5)
		         THISFORM.fileio(fh, Acrlf)
		
		         m.nreccount = m.nreccount + 2
		
		         m.diskno   = m.diskno + 1
		         m.nreccount = 1
		         m.totrecs  = m.totrecs + 1
		         m.nreccount = m.nreccount + 1
		         STORE 0 TO m.total1, m.total2, m.total3, m.ntotal4, m.total5, m.ntotal6
		         STORE 0 TO m.total7, m.total8, m.total9, m.totalA, m.totalB, m.totalC
		
		
		         SELECT temp1099
		         SCAN
		            SCATTER MEMVAR
		            m.cTaxid = cmEncrypt(ALLTRIM(m.cTaxid),m.goApp.cEncryptionKey)
		            oProgress.UpdateProgress(lnProgress)
		            lnProgress = lnProgress + 1
		
		            IF ll1099NEC
		               IF NOT tcCorrect = 'Y'
		                  IF m.nNonEmp = 0
		                     LOOP
		                  ENDIF
		               ENDIF
		            ENDIF
		
		            IF ll1099Misc
		               IF NOT tcCorrect = 'Y'
		                  IF m.nroyalty = 0 AND ;
		                        m.nother   = 0 AND ;
		                        m.nrents   = 0 AND ;
		                        m.nAttorney = 0
		                     LOOP
		                  ENDIF
		               ENDIF
		            ENDIF
		
		            IF tlCombined
		               SELECT statecodes
		               LOCATE FOR cstate == m.c1099state
		               IF FOUND()
		                  BStateCode = cCode
		               ELSE
		                  BStateCode = '  '
		               ENDIF
		            ELSE
		               BStateCode = '  '
		            ENDIF
		
		            * Determine the type of tin
		            DO CASE
		               CASE SUBSTR(m.cTaxid,3,1) = '-'  && EIN
		                  BTypeTin = '1'
		               CASE SUBSTR(m.cTaxid,4,1) = '-'  && SSN
		                  BTypeTin = '2'
		               OTHERWISE
		                  BTypeTin = ' '
		            ENDCASE
		
		            BTin      = THISFORM.numfmt(m.cTaxid, 9)
		            IF ll1099Misc
		               BPmt1     = THISFORM.numfmt(PADL(ALLTRIM(TRANSFORM(m.nrents,'999999999.99')), 12, '0'), 12)
		               BPmt2     = THISFORM.numfmt(PADL(ALLTRIM(TRANSFORM(m.nroyalty,'999999999.99')), 12, '0'), 12)
		               BPmt3     = THISFORM.numfmt(PADL(ALLTRIM(TRANSFORM(m.nother,'999999999.99')), 12, '0'), 12)
		               BPmtC     = THISFORM.numfmt(PADL(ALLTRIM(TRANSFORM(m.nAttorney,'999999999.99')), 12, '0'), 12)
		            ELSE
		               BPmt1     = THISFORM.numfmt(PADL(ALLTRIM(TRANSFORM(m.nNonEmp,'999999999.99')), 12, '0'), 12)
		            ENDIF
		
		            BPmt4     = THISFORM.numfmt(PADL(ALLTRIM(TRANSFORM(m.nfedtax,'999999999.99')), 12, '0'), 12)
		            BStateWH  = THISFORM.numfmt(PADL(ALLTRIM(TRANSFORM(m.nstatetax1,'999999999.99')), 12, '0'), 12)
		            IF tlCombined
		               BStateCode = m.ctaxstate1
		            ELSE
		               BStateCode = '  '
		            ENDIF
		            BPayee    = PADR(ALLTRIM(m.cname), 40, ' ')
		            BPayee2   = PADR(ALLTRIM(m.cName2), 40, ' ')
		            BPayAddr  = PADR(ALLTRIM(m.caddr1), 40, ' ')
		            BPayCity  = PADR(ALLTRIM(m.ccity), 40, ' ')
		            BPayState = m.cstate
		            m.czip    = STRTRAN(m.czip, '-', '')
		            BPayZip   = PADR(ALLTRIM(m.czip), 9, ' ')
		
		            IF ll1099Misc
		               m.total1  = m.total1 + m.nrents
		               m.total2  = m.total2 + m.nroyalty
		               m.total3  = m.total3 + m.nother
		               m.total4  = m.total4 + m.nfedtax
		               m.total7  = 0
		               m.totalC  = m.totalC + m.nAttorney
		            ELSE
		               m.total1  = m.total1 + m.nNonEmp
		               m.total4  = m.total4 + m.nfedtax
		               STORE 0 TO m.ntotal2, m.ntotal3, m.ntotal7, m.ntotalC
		            ENDIF
		
		            BAcct     = PADR(ALLTRIM(m.cid), 20, ' ')
		
		            BRecSeq     = PADL(TRANSFORM(lnRecordSeq), 8, '0')
		            lnRecordSeq = lnRecordSeq + 1
		
		            THISFORM.fileio(fh, BType + BYear + BCorrected)
		            THISFORM.fileio(fh, BNamectl + BTypeTin + BTin)
		            THISFORM.fileio(fh, BAcct + BCode + BBlank)
		            THISFORM.fileio(fh, BPmt1 + BPmt2 + BPmt3 + BPmt4 + BPmt5 + BPmt6)
		            THISFORM.fileio(fh, BPmt7 + BPmt8 + BPmt9 + BPmtA + BPmtB + BPmtC)
		            THISFORM.fileio(fh, BPmtD + BPmtE + BPmtF + BPmtG + BPmtH + BPmtI + BBlanks + Bforeign)
		            THISFORM.fileio(fh, BPayee + BPayee2 + BPayAddr + BBlank4 + BPayCity + BPayState)
		            THISFORM.fileio(fh, BPayZip + BBlank5 + BRecSeq + BBlank6 + B2ndTIN + BBlank7 + BDirect + BBlank8)
		            THISFORM.fileio(fh, BSpecial + BStateWH + BLocalWH + BStateCode)
		            THISFORM.fileio(fh, BCRLF)
		
		            m.nreccount = m.nreccount + 1
		            m.bcount   = m.bcount + 1
		            lnTotal    = lnTotal + 1
		
		         ENDSCAN && temp1099
		
		
		         CPayeeNum = PADL(TRANSFORM(m.bcount), 8, '0')
		         CTotal1   = THISFORM.numfmt(PADL(ALLTRIM(TRANSFORM(m.total1,'999999999.99')), 18, '0'), 18)
		         CTotal2   = THISFORM.numfmt(PADL(ALLTRIM(TRANSFORM(m.total2,'999999999.99')), 18, '0'), 18)
		         CTotal3   = THISFORM.numfmt(PADL(ALLTRIM(TRANSFORM(m.total3,'999999999.99')), 18, '0'), 18)
		         CTotal4   = THISFORM.numfmt(PADL(ALLTRIM(TRANSFORM(m.total4,'999999999.99')), 18, '0'), 18)
		         CTotal7   = THISFORM.numfmt(PADL(ALLTRIM(TRANSFORM(m.total7,'999999999.99')), 18, '0'), 18)
		         CTotalC   = THISFORM.numfmt(PADL(ALLTRIM(TRANSFORM(m.totalC,'999999999.99')), 18, '0'), 18)
		
		         CRecSeq     = PADL(TRANSFORM(lnRecordSeq), 8, '0')
		         lnRecordSeq = lnRecordSeq + 1
		
		         THISFORM.fileio(fh, 'C' + CPayeeNum + CBlank + CTotal1 + CTotal2 + CTotal3)
		         THISFORM.fileio(fh, CTotal4 + CTotal5 + CTotal6 + CTotal7 + CTotal8 + CTotal9)
		         THISFORM.fileio(fh, CTotalA + CTotalB + CTotalC + CTotalD + CTotalE + CTotalF)
		         THISFORM.fileio(fh, CTotalG + CTotalH + CTotalI + CBlank2 + CRecSeq + CBlank3)
		         THISFORM.fileio(fh, CCRLF)
		
		         m.nreccount = m.nreccount + 1
		         lnFCount   = lnFCount + 1
		
		         IF tlCombined
		            SELECT tempK
		            SCAN
		               SCATTER MEMVAR
		
		               SELECT statecodes
		               LOCATE FOR cstate == m.c1099state
		               IF FOUND()
		                  KStateCode = cCode
		               ELSE
		                  * Not a supported state
		                  LOOP
		               ENDIF
		
		               KPayeeNum = PADL(TRANSFORM(m.nKPayeeCount), 8, '0')
		               KTotal1   = THISFORM.numfmt(PADL(ALLTRIM(TRANSFORM(m.nKTotal1,'999999999.99')), 18, '0'), 18)
		               KTotal2   = THISFORM.numfmt(PADL(ALLTRIM(TRANSFORM(m.nKTotal2,'999999999.99')), 18, '0'), 18)
		               KTotal3   = THISFORM.numfmt(PADL(ALLTRIM(TRANSFORM(m.nKTotal3,'999999999.99')), 18, '0'), 18)
		               KTotal4   = THISFORM.numfmt(PADL(ALLTRIM(TRANSFORM(m.nKTotal4,'999999999.99')), 18, '0'), 18)
		               KTotal7   = THISFORM.numfmt(PADL(ALLTRIM(TRANSFORM(m.nKTotal7,'999999999.99')), 18, '0'), 18)
		               KTotalC   = THISFORM.numfmt(PADL(ALLTRIM(TRANSFORM(m.nKTotalC,'999999999.99')), 18, '0'), 18)
		
		               KRecSeq     = PADL(TRANSFORM(lnRecordSeq), 8, '0')
		               lnRecordSeq = lnRecordSeq + 1
		
		               THISFORM.fileio(fh, KType + KPayeeNum + KBlank1)
		               THISFORM.fileio(fh, KTotal1 + KTotal2 + KTotal3 + KTotal4 + KTotal5 + KTotal6 + KTotal7 + KTotal8)
		               THISFORM.fileio(fh, KTotal9 + KTotalA + KTotalB + KTotalC + KTotalD + KTotalE + KTotalF + KTotalG)
		               THISFORM.fileio(fh, KTotalH + KTotalI + KBlank2 + KRecSeq + KBlank3 + KStateWH + KLocalWH + KBlank4 + KStateCode + KCRLF)
		            ENDSCAN && tempK
		         ENDIF
		
		      ELSE
		         *************************************
		         * Reporting 1099s by well
		         *************************************
		         lcMagFile = 'IRSTAX_' + TYear + '.TXT'
		         IF FILE(ADDBS(tcPath) + lcMagFile)
		            ERASE ADDBS(tcPath) + lcMagFile
		         ENDIF
		
		         fh       = FCREATE(ADDBS(tcPath) + lcMagFile)
		
		
		         TRecSeq     = PADL(TRANSFORM(lnRecordSeq), 8, '0')
		         lnRecordSeq = lnRecordSeq + 1
		
		         TPayeeNo = PADL(TRANSFORM(lnMax), 8, '0')
		         THISFORM.fileio(fh, TType)
		         THISFORM.fileio(fh, TYear + TPrior + TTransTIN + TTCC + TReplace + TBlank + TTest)
		         THISFORM.fileio(fh, TForeign + TName + TNameCont + TCompany + TCompCont + TAddress)
		         THISFORM.fileio(fh, TCity + TState + TZip + TBlank2 + TPayeeNo + TContact + TPhone)
		         THISFORM.fileio(fh, TEmail + TMagInd + TOrigFile + TBlank3 + TRecSeq + TBlank4)
		         THISFORM.fileio(fh, TVendor + TVendName + TVendAdd + TVendCity + TVendState + TVendZip)
		         THISFORM.fileio(fh, TVendCon + TVendPhone + TVendEmail + TBlank5 + TCRLF)
		
		         m.nreccount = m.nreccount + 1
		
		         m.nreccount = 1
		         m.totrecs  = m.totrecs + 1
		         m.nreccount = m.nreccount + 1
		
		         SELECT cwellid, cProducer, ptax FROM temp1099 INTO CURSOR tempwell ORDER BY cwellid GROUP BY cwellid
		         SELECT tempwell
		         lnCount = 1
		         SCAN
		            SCATTER MEMVAR
		            lcWellID = cwellid
		            oProgress.UpdateProgress(lnProgress)
		            lnProgress = lnProgress + 1
		
		            APayer = UPPER(PADR(ALLTRIM(m.cProducer), 40, ' '))
		            Atin   = THISFORM.numfmt(m.ptax, 9)
		
		            ARecSeq     = PADL(TRANSFORM(lnRecordSeq), 8, '0')
		            lnRecordSeq = lnRecordSeq + 1
		
		            THISFORM.fileio(fh, "A")
		            THISFORM.fileio(fh, Ayear + ABlank1)
		            THISFORM.fileio(fh, Atin)
		            THISFORM.fileio(fh, ANamectl + Alast + Acombined + Arettype + AAmtcodes)
		            THISFORM.fileio(fh, ABlank2 + AOrig + AReplace + ACorrect + ABlank3 + AForeign)
		            THISFORM.fileio(fh, APayer + APayer2 + ATransfer + AAddress + ACity + AState + AZipCode)
		            THISFORM.fileio(fh, APhone + ABlank4 + ARecSeq + ABlank5)
		            THISFORM.fileio(fh, Acrlf)
		            lnCount = lnCount + 1
		
		            SELECT temp1099
		            SCAN FOR cwellid = lcWellID
		               SCATTER MEMVAR
		               m.cTaxid = cmEncrypt(ALLTRIM(m.cTaxid),m.goApp.cEncryptionKey)
		               IF tlCombined
		                  SELECT statecodes
		                  LOCATE FOR cstate == m.c1099state
		                  IF FOUND()
		                     BStateCode = cCode
		                  ELSE
		                     BStateCode = '  '
		                  ENDIF
		               ELSE
		                  BStateCode = '  '
		               ENDIF
		
		               BTin      = THISFORM.numfmt(m.cTaxid, 9)
		               BPmt1     = THISFORM.numfmt(PADL(ALLTRIM(TRANSFORM(m.nrents,'999999999.99')), 12, '0'), 12)
		               BPmt2     = THISFORM.numfmt(PADL(ALLTRIM(TRANSFORM(m.nroyalty,'999999999.99')), 12, '0'), 12)
		               BPmt3     = THISFORM.numfmt(PADL(ALLTRIM(TRANSFORM(m.nother,'999999999.99')), 12, '0'), 12)
		               BPmt4     = THISFORM.numfmt(PADL(ALLTRIM(TRANSFORM(m.nfedtax,'999999999.99')), 12, '0'), 12)
		               BPmtC     = THISFORM.numfmt(PADL(ALLTRIM(TRANSFORM(m.nAttorney,'999999999.99')), 12, '0'), 12)
		               BPayee    = PADR(ALLTRIM(m.cname), 40, ' ')
		               BPayee2   = PADR(ALLTRIM(m.cName2), 40, ' ')
		               BPayAddr  = PADR(ALLTRIM(m.caddr1), 40, ' ')
		               BPayCity  = PADR(ALLTRIM(m.ccity), 40, ' ')
		               BPayState = m.cstate
		               IF '-' $ m.czip
		                  lnPos  = AT('-', m.czip)
		                  m.czip = SUBSTR(m.czip, 1, lnPos - 1) + SUBSTR(m.czip, lnPos + 1)
		               ENDIF
		               BPayZip  = PADR(ALLTRIM(m.czip), 9, ' ')
		               IF ll1099Misc
		                  m.total1  = m.total1 + m.nrents
		                  m.total2  = m.total2 + m.nroyalty
		                  m.total3  = m.total3 + m.nother
		                  m.total4  = m.total4 + m.nfedtax
		                  m.total7  = 0
		                  m.totalC  = m.totalC + m.nAttorney
		               ELSE
		                  m.total1  = m.total1 + m.nNonEmp
		                  m.total4  = m.total4 + m.nfedtax
		                  STORE 0 TO m.ntotal2, m.ntotal3, m.ntotal7, m.ntotalC
		               ENDIF
		
		               BAcct    = PADR(ALLTRIM(m.cid), 20, ' ')
		               IF tcCorrect = 'Y'
		                  BCorrected = 'G'
		               ENDIF
		
		               BRecSeq     = PADL(TRANSFORM(lnRecordSeq), 8, '0')
		               lnRecordSeq = lnRecordSeq + 1
		
		               THISFORM.fileio(fh, BType + BYear + BCorrected)
		               THISFORM.fileio(fh, BNamectl + BTypeTin + BTin)
		               THISFORM.fileio(fh, BAcct + BCode + BBlank)
		               THISFORM.fileio(fh, BPmt1 + BPmt2 + BPmt3 + BPmt4 + BPmt5 + BPmt6)
		               THISFORM.fileio(fh, BPmt7 + BPmt8 + BPmt9 + BPmtA + BPmtB + BPmtC)
		               THISFORM.fileio(fh, BPmtD + BPmtE + BPmtF + BPmtG + BPmtH + BPmtI + BBlanks + Bforeign)
		               THISFORM.fileio(fh, BPayee + BPayee2 + BPayAddr + BBlank4 + BPayCity + BPayState)
		               THISFORM.fileio(fh, BPayZip + BBlank5 + BRecSeq + BBlank6 + B2ndTIN + BBlank7 + BDirect + BBlank8)
		               THISFORM.fileio(fh, BSpecial + BStateWH + BLocalWH + BStateCode)
		               THISFORM.fileio(fh, BCRLF)
		
		               m.nreccount = m.nreccount + 1
		               m.bcount   = m.bcount + 1
		               lnTotal    = lnTotal + 1
		
		               lnCount    = lnCount + 1
		            ENDSCAN
		            CPayeeNum = PADL(TRANSFORM(m.bcount), 8, '0')
		            CTotal1   = THISFORM.numfmt(PADL(ALLTRIM(TRANSFORM(m.total1,'999999999.99')), 18, '0'), 18)
		            CTotal2   = THISFORM.numfmt(PADL(ALLTRIM(TRANSFORM(m.total2,'999999999.99')), 18, '0'), 18)
		            CTotal3   = THISFORM.numfmt(PADL(ALLTRIM(TRANSFORM(m.total3,'999999999.99')), 18, '0'), 18)
		            CTotal4   = THISFORM.numfmt(PADL(ALLTRIM(TRANSFORM(m.total4,'999999999.99')), 18, '0'), 18)
		            CTotal7   = THISFORM.numfmt(PADL(ALLTRIM(TRANSFORM(m.total7,'999999999.99')), 18, '0'), 18)
		            CTotalC   = THISFORM.numfmt(PADL(ALLTRIM(TRANSFORM(m.totalC,'999999999.99')), 18, '0'), 18)
		
		            CRecSeq     = PADL(TRANSFORM(lnRecordSeq), 8, '0')
		            lnRecordSeq = lnRecordSeq + 1
		
		            THISFORM.fileio(fh, 'C' + CPayeeNum + CBlank + CTotal1 + CTotal2 + CTotal3)
		            THISFORM.fileio(fh, CTotal4 + CTotal5 + CTotal6 + CTotal7 + CTotal8 + CTotal9)
		            THISFORM.fileio(fh, CTotalA + CTotalB + CTotalC + CTotalD + CTotalE + CTotalF)
		            THISFORM.fileio(fh, CTotalG + CTotalH + CTotalI + CBlank2 + CRecSeq + CBlank3)
		            THISFORM.fileio(fh, CCRLF)
		            IF tlCombined
		               SELECT tempK
		               SCAN
		                  SCATTER MEMVAR
		
		                  SELECT statecodes
		                  LOCATE FOR cstate == m.c1099state
		                  IF FOUND()
		                     KStateCode = cCode
		                  ELSE
		                     * Not a supported state
		                     LOOP
		                  ENDIF
		
		                  KPayeeNum = PADL(TRANSFORM(m.nKPayeeCount), 8, '0')
		                  KTotal1   = THISFORM.numfmt(PADL(ALLTRIM(TRANSFORM(m.nKTotal1,'999999999.99')), 18, '0'), 18)
		                  KTotal2   = THISFORM.numfmt(PADL(ALLTRIM(TRANSFORM(m.nKTotal2,'999999999.99')), 18, '0'), 18)
		                  KTotal3   = THISFORM.numfmt(PADL(ALLTRIM(TRANSFORM(m.nKTotal3,'999999999.99')), 18, '0'), 18)
		                  KTotal4   = THISFORM.numfmt(PADL(ALLTRIM(TRANSFORM(m.nKTotal4,'999999999.99')), 18, '0'), 18)
		                  KTotal7   = THISFORM.numfmt(PADL(ALLTRIM(TRANSFORM(m.nKTotal7,'999999999.99')), 18, '0'), 18)
		                  KTotalC   = THISFORM.numfmt(PADL(ALLTRIM(TRANSFORM(m.nKTotalC,'999999999.99')), 18, '0'), 18)
		
		                  KRecSeq     = PADL(TRANSFORM(lnRecordSeq), 8, '0')
		                  lnRecordSeq = lnRecordSeq + 1
		
		                  THISFORM.fileio(fh, KType + KPayeeNum + KBlank1)
		                  THISFORM.fileio(fh, KTotal1 + KTotal2 + KTotal3 + KTotal4 + KTotal5 + KTotal6 + KTotal7 + KTotal8)
		                  THISFORM.fileio(fh, KTotal9 + KTotalA + KTotalB + KTotalC + KTotalD + KTotalE + KTotalF + KTotalG)
		                  THISFORM.fileio(fh, KBlank2 + KRecSeq + KBlank3 + KStateWH + KLocalWH + KBlank4 + KStateCode + KCRLF)
		               ENDSCAN && tempK
		
		            ENDIF
		            m.nreccount = m.nreccount + 1
		            lnFCount   = lnFCount + 1
		
		            m.total1 = 0
		            m.total2 = 0
		            m.total7 = 0
		
		         ENDSCAN && temp1099
		
		      ENDIF && NOT tlByWell
		
		      FPayerNum2  = CPayeeNum
		      FRecSeq     = PADL(TRANSFORM(lnRecordSeq), 8, '0')
		      lnRecordSeq = lnRecordSeq + 1
		
		      THISFORM.fileio(fh, FType + FPayerNum + FZeros + FBlanks + FPayerNum2 + FBlanks2 + FRecSeq + FBlanks3 + FCRLF)
		      = FFLUSH(fh)
		      = FCLOSE(fh)
		      WAIT CLEAR
		
		      IF TYPE('oProgress') = 'O'
		         oProgress.CLOSE()
		      ENDIF
		
		      IF tlByWell
		         THISFORM.oMessage.DISPLAY('Created ' + TRANSFORM(m.bcount) + ' Magnetic 1099 Records.')
		      ELSE
		         THISFORM.oMessage.DISPLAY('Created ' + TRANSFORM(m.bcount) + ' Magnetic 1099 Records.')
		      ENDIF
		
		      swclose('temp1099')
		   ENDIF
		CATCH TO loError
		   llReturn = .F.
		   DO errorlog WITH 'CreateCorrection2', loError.LINENO, 'Create 1099 File', loError.ERRORNO, loError.MESSAGE
		   MESSAGEBOX('Unable to process the 1099s at this time. Check the System Log found under Other Reports for more information.' + m.creturn+m.creturn + ;
		      'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		RETURN llReturn
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
	ENDPROC

	PROCEDURE createfile		&& Creates the 1099 file for magnetic media
		*
		*  Creates the magnetic media 1099 file
		*
		LOCAL m.totrecs, m.maxrecs, m.nreccount, m.bcount, m.total2, m.total7
		LOCAL m.diskno, fh, lc1099File, lcMagFile, oProgress, lnFCount
		LOCAL tcDrive, tcYear, tcTCC, tnType, tcCorrect, tcID1, tcID2, lnTotal
		LOCAL lcWellID, llReturn, lnCount, lnMax, lnPos, lnProgress, loError
		LOCAL  AAddress, AAmtcodes, ABlank1, ABlank2, ABlank3, ABlank4, ABlank5, ACity, ACorrect, AForeign
		LOCAL  ANamectl, AOrig, APayer, APayer2, APhone, ARecSeq, AReplace, AState, ATransfer, AZipCode
		LOCAL  Acombined, Acrlf, Alast, Arettype, Atin, Atype, Ayear, B2ndTIN, BAcct, BBlank, BBlank2
		LOCAL  BBlank3, BBlank4, BBlank5, BBlank6, BBlank7, BBlank8, BCRLF, BCode, BCorrected, BDirect
		LOCAL  BNamectl, BPayAddr, BPayCity, BPayState, BPayZip, BPayee, BPayee2, BPmt1, BPmt2, BPmt3
		LOCAL  BPmt4, BPmt5, BPmt6, BPmt7, BPmt8, BPmt9, BPmtA, BPmtB, BPmtC, BRecSeq, BTin, BType
		LOCAL  BTypeTin, BYear, Bforeign, CBlank, CBlank2, CBlank3, CCRLF, CPayeeNum, CRecSec, CRecSeq
		LOCAL  CTotal1, CTotal2, CTotal3, CTotal4, CTotal5, CTotal6, CTotal7, CTotal8, CTotal9, CTotalA
		LOCAL  CTotalB, CTotalC, CType, FBlanks, FBlanks2, FBlanks3, FCRLF, FPayerNum, FPayerNum2, FRecSeq
		LOCAL  FType, FZeros, TAddress, TBlank, TBlank2, TBlank3, TBlank4, TBlank5, TCRLF, TCity
		LOCAL  TCompCont, TCompany, TContact, TEmail, TForeign, TMagInd, TName, TNameCont, TOrigFile
		LOCAL  TPayeeNo, TPhone, TPrior, TRecSeq, TReplace, TState, TTCC, TTest, TTransTIN, TType
		LOCAL  TVendAdd, TVendCity, TVendCon, TVendEmail, TVendName, TVendPhone, TVendState, TVendZip
		LOCAL  TVendor, TYear, TZip, bcount, cProducer, czip, diskno, dsk, maxrecs, paddr1, paddr2
		LOCAL  paddr3, pcity, pcontact, pphone, pstate, ptax, pzip, tcPath, test, tlByWell
		LOCAL  total1, total2, total3, total4, total7, totalC, totrecs
		LOCAL  BLocalWH, BSpecial, BStateCode, BStateWH, CTotalD, CTotalE, CTotalF, CTotalG, KBlank1
		LOCAL  KBlank2, KBlank3, KBlank4, KCRLF, KLocalWH, KPayeeNum, KRecSeq, KStateCode, KStateWH
		LOCAL  KTotal1, KTotal2, KTotal3, KTotal4, KTotal5, KTotal6, KTotal7, KTotal8, KTotal9, KTotalA
		LOCAL  KTotalB, KTotalC, KTotalD, KTotalE, KTotalF, KTotalG, KType, cRedSeq, tlCombined
		LOCAL  nKTotal1, nKTotal2, nKTotal3, nKTotal4, nKTotal5, nKTotal6, nKTotal7, nKTotal8
		LOCAL  nKTotal9, nKTotalA, nKTotalB, nKTotalC, nKTotalD, nKTotalE, nKTotalF, nKTotalG
		LOCAL  lnRecordSeq, llCorrection
		
		llReturn = .T.
		
		IF NOT THISFORM.chk1099Misc.VALUE AND NOT THISFORM.chk1099nEC.VALUE
		    MESSAGEBOX('Choose to create the magnetic file for either the 1099-Misc or 1099-Nec.',48,'Choose Type of Return')
		    RETURN
		ENDIF
		
		TRY
		    tcPath     = THISFORM.cntgetfile1.edtpath.VALUE
		    tcYear     = THISFORM.txtcYear.VALUE
		    tcTCC      = THISFORM.txtcTCC.VALUE
		    tcCorrect  = IIF(THISFORM.chkCorrect.VALUE, 'Y', 'N')
		    llCorrection = thisform.chkcorrect.Value 
		    tlByWell   = THISFORM.chklByWell.VALUE
		    tlCombined = .F.
		    tlSelect   = THISFORM.chkSelected.VALUE
		    ll1099Misc = THISFORM.chk1099Misc.VALUE
		    ll1099NEC  = THISFORM.chk1099nEC.VALUE
		
		
		    IF llCorrection
		       thisform.CreateCorrections()
		       EXIT
		    ENDIF 
		
		    IF tlCombined
		* Get the latest statecodes table
		        llReturn = THISFORM.getstatecodes()
		        IF NOT llReturn
		            EXIT
		        ENDIF
		    ENDIF
		
		    IF llCorrection
		        IF ll1099Misc
		            SELECT * FROM tax1099corrections WHERE cYear = tcYear AND NOT lNEC INTO CURSOR temp1099s ORDER BY cid
		        ELSE
		            SELECT * FROM tax1099corrections WHERE cYear = tcYear AND lNEC INTO CURSOR temp1099s ORDER BY cid
		        ENDIF
		        IF NOT tlSelect
		            SELECT cid FROM tax1099corrections WHERE cYear = tcYear INTO CURSOR ten99sel ORDER BY cid
		        ENDIF
		    ELSE
		        SELECT * FROM tax1099 WHERE cYear = tcYear INTO CURSOR temp1099s ORDER BY cid
		        IF NOT tlSelect
		            SELECT cid FROM tax1099 WHERE cYear = tcYear INTO CURSOR ten99sel ORDER BY cid
		        ENDIF
		    ENDIF
		
		    STORE 0 TO nKTotal1, nKTotal2, nKTotal3, nKTotal4, nKTotal5, nKTotal6, nKTotal7, nKTotal8
		    STORE 0 TO nKTotal9, nKTotalA, nKTotalB, nKTotalC, nKTotalD, nKTotalE, nKTotalF, nKTotalG
		
		    lnFCount    = 0
		    lnRecordSeq = 1
		
		    IF LEN(ALLT(tcTCC)) < 5 OR EMPTY(tcTCC)
		        THISFORM.oMessage.Warning('You must specify a 5-character TCC number before the magnetic file can be built.')
		        THISFORM.setnextcontrol(THISFORM.txtcTCC)
		        llReturn = .F.
		        EXIT
		    ENDIF
		
		    IF NOT llCorrection
		        IF NOT tlByWell
		            SELECT * FROM tax1099 WHERE cYear = tcYear AND NOT EMPTY(cwellid) AND NOT DELETED() INTO CURSOR temp
		            IF _TALLY > 0
		                THISFORM.oMessage.Warning('The 1099 file was created by well for this year. You must create the magnetic file by well.')
		                llReturn = .F.
		                EXIT
		            ENDIF
		        ELSE
		            SELECT * FROM tax1099 WHERE cYear = tcYear AND NOT EMPTY(cwellid) AND NOT cidtype = 'V' AND NOT DELETED() INTO CURSOR temp
		            IF _TALLY = 0
		                THISFORM.oMessage.Warning('The 1099 file was not created by well for this year. You cannot create the magnetic file by well.')
		                llReturn = .F.
		                EXIT
		            ENDIF
		        ENDIF
		    ELSE
		        IF NOT tlByWell
		            SELECT * FROM tax1099corrections WHERE cYear = tcYear AND NOT EMPTY(cwellid) AND NOT DELETED() INTO CURSOR temp
		            IF _TALLY > 0
		                THISFORM.oMessage.Warning('The 1099 file was created by well for this year. You must create the magnetic file by well.')
		                llReturn = .F.
		                EXIT
		            ENDIF
		        ELSE
		            SELECT * FROM tax1099corrections WHERE cYear = tcYear AND NOT EMPTY(cwellid) AND NOT cidtype = 'V' AND NOT DELETED() INTO CURSOR temp
		            IF _TALLY = 0
		                THISFORM.oMessage.Warning('The 1099 file was not created by well for this year. You cannot create the magnetic file by well.')
		                llReturn = .F.
		                EXIT
		            ENDIF
		        ENDIF
		    ENDIF
		
		    IF NOT DIRECTORY(tcPath)
		        THISFORM.oMessage.Warning('The given file location does not exist. Please choose a valid location.')
		        llReturn = .F.
		        EXIT
		    ENDIF
		
		* Check on the existence of the application object
		* if it doesn't exist, we're running in development
		* mode and need to initialize the company address info.
		    IF TYPE('m.goApp') = 'O'
		        m.cProducer = m.goApp.ccompanyname
		        m.paddr1    = m.goApp.cAddress1
		        m.paddr2    = m.goApp.cAddress2
		        m.paddr3    = m.goApp.cAddress3
		        m.ptax      = cmEncrypt(m.goApp.cTaxid,m.goApp.cEncryptionKey)
		        m.pcity     = m.goApp.ccity
		        m.pzip      = STRTRAN(m.goApp.czip,'-','')
		        m.pzip      = STRTRAN(m.pzip,' ','')
		        m.pstate    = m.goApp.cstate
		        m.pcontact  = m.goApp.cContact
		        m.pphone    = STRTRAN(m.goApp.cPhoneno,'-','')
		        m.pphone    = STRTRAN(m.pphone,'(','')
		        m.pphone    = STRTRAN(m.pphone,')','')
		        m.pphone    = STRTRAN(m.pphone,' ','')
		
		**  Force them to make sure all the T-record fields are specified, so we ensure that the file doesn't get rejected for something bogus
		**  like leaving off the company phone number or contact name
		        IF EMPTY(m.cProducer)
		            THISFORM.oMessage.Warning('Please specify a valid company name on the Maintain >> Company Information screen before creating the magnetic file.')
		            llReturn = .F.
		            EXIT
		        ENDIF
		        IF EMPTY(m.paddr1)
		            THISFORM.oMessage.Warning('Please specify a valid company address on the Maintain >> Company Information screen before creating the magnetic file.')
		            llReturn = .F.
		            EXIT
		        ENDIF
		        IF EMPTY(m.ptax)
		            THISFORM.oMessage.Warning('Please specify a valid company tax ID on the Maintain >> Company Information screen before creating the magnetic file.')
		            llReturn = .F.
		            EXIT
		        ENDIF
		        IF EMPTY(m.pcity)
		            THISFORM.oMessage.Warning('Please specify a valid city in the address on the Maintain >> Company Information screen before creating the magnetic file.')
		            llReturn = .F.
		            EXIT
		        ENDIF
		        IF EMPTY(m.pstate)
		            THISFORM.oMessage.Warning('Please specify a valid state in the address on the Maintain >> Company Information screen before creating the magnetic file.')
		            llReturn = .F.
		            EXIT
		        ENDIF
		        IF EMPTY(m.pzip)
		            THISFORM.oMessage.Warning('Please specify a valid zip code in the address on the Maintain >> Company Information screen before creating the magnetic file.')
		            llReturn = .F.
		            EXIT
		        ENDIF
		        IF EMPTY(m.pcontact)
		            THISFORM.oMessage.Warning('Please specify a valid contact name on the Maintain >> Company Information screen before creating the magnetic file.')
		            llReturn = .F.
		            EXIT
		        ENDIF
		        IF EMPTY(m.pphone)
		            THISFORM.oMessage.Warning('Please specify a valid phone number on the Maintain >> Company Information screen before creating the magnetic file.')
		            llReturn = .F.
		            EXIT
		        ENDIF
		    ELSE
		        m.cProducer = 'SherWare, Inc.'
		        m.paddr1    = '2098 Portage Rd Suite 250'
		        m.paddr2    = 'Wooster, OH  44691'
		        m.paddr3    = ''
		        m.ptax      = '99-9999999'
		        m.pcontact  = 'Phil Sherwood'
		        m.pphone    = '3302620200'
		        m.pcity     = 'Wooster'
		        m.pstate    = 'OH'
		        m.pzip      = '44691'
		    ENDIF
		
		    IF NOT tlByWell
		        IF NOT tlCombined
		            SELECT  tcCorrect AS correct, ;
		                m.paddr1 AS paddr1, ;
		                m.paddr2 AS paddr2, ;
		                m.paddr3 AS paddr3, ;
		                m.ptax   AS ptax, ;
		                m.pphone AS pphone, ;
		                m.pcontact AS pcontact, ;
		                m.cProducer AS cProducer, ;
		                temp1099s.cYear, ;
		                temp1099s.cid, ;
		                temp1099s.cidtype, ;
		                temp1099s.cprogcode, ;
		                temp1099s.cname, ;
		                temp1099s.cName2,  ;
		                temp1099s.caddr1, ;
		                temp1099s.caddr2, ;
		                temp1099s.ccity, ;
		                temp1099s.cstate, ;
		                temp1099s.czip, ;
		                temp1099s.cTaxid, ;
		                temp1099s.nother, ;
		                temp1099s.nroyalty, ;
		                temp1099s.nrents, ;
		                temp1099s.nNonEmp,  ;
		                temp1099s.nAttorney,  ;
		                temp1099s.ctaxstate1, ;
		                temp1099s.nstatetax1, ;
		                temp1099s.cstatepayerno1, ;
		                temp1099s.ctaxstate2, ;
		                temp1099s.nstatetax2, ;
		                temp1099s.cstatepayerno2, ;
		                temp1099s.nfedtax ;
		                FROM temp1099s ;
		                WHERE cYear = tcYear ;
		                AND cid IN (SELECT  cid ;
		                FROM ten99sel);
		                AND NOT DELETED() ;
		                INTO CURSOR temp1099 READWRITE ;
		                ORDER BY cid
		        ELSE
		            SELECT  tcCorrect AS correct, ;
		                m.paddr1 AS paddr1, ;
		                m.paddr2 AS paddr2, ;
		                m.paddr3 AS paddr3, ;
		                m.ptax   AS ptax, ;
		                m.pphone AS pphone, ;
		                m.pcontact AS pcontact, ;
		                m.cProducer AS cProducer, ;
		                IIF(EMPTY(c1099state), 'ZZ', tax1099ST.c1099state) AS c1099state, ;
		                tax1099ST.cYear, ;
		                tax1099ST.cid, ;
		                tax1099ST.cidtype, ;
		                tax1099ST.cprogcode, ;
		                tax1099ST.cname, ;
		                tax1099ST.cName2,  ;
		                tax1099ST.caddr1, ;
		                tax1099ST.caddr2, ;
		                tax1099ST.ccity, ;
		                tax1099ST.cstate, ;
		                tax1099ST.czip, ;
		                tax1099ST.cTaxid, ;
		                tax1099ST.nother, ;
		                tax1099ST.nroyalty, ;
		                tax1099ST.nrents, ;
		                tax1099ST.nNonEmp,  ;
		                tax1099ST.nAttorney,  ;
		                temp1099s.ctaxstate1, ;
		                temp1099s.nstatetax1, ;
		                temp1099s.cstatepayerno1, ;
		                temp1099s.ctaxstate2, ;
		                temp1099s.nstatetax2, ;
		                temp1099s.cstatepayerno2, ;
		                tax1099ST.nfedtax ;
		                FROM tax1099ST ;
		                WHERE cYear = tcYear ;
		                AND cid IN (SELECT  cid ;
		                FROM ten99sel);
		                AND NOT DELETED() ;
		                INTO CURSOR temp1099 READWRITE ;
		                ORDER BY c1099state, cid
		
		
		            SELECT temp1099
		            REPLACE c1099state WITH 'ZZ' FOR EMPTY(c1099state)
		
		
		* Get the totals for the K records
		            IF ll1099Misc
		                SELECT  tax1099ST.c1099state, ;
		                    COUNT(*) AS nKPayeeCount, ;
		                    SUM(tax1099ST.nother) AS nKTotal3, ;
		                    SUM(tax1099ST.nroyalty) AS nKTotal2, ;
		                    SUM(tax1099ST.nrents) AS nKTotal1, ;
		                    SUM(tax1099ST.nNonEmp) AS nKTotal7,  ;
		                    SUM(tax1099ST.nAttorney) AS nKTotalC,  ;
		                    SUM(tax1099ST.nfedtax) AS nKTotal4 ;
		                    FROM tax1099ST ;
		                    WHERE cYear = tcYear ;
		                    AND NOT EMPTY(c1099state) ;
		                    AND c1099state IN (SELECT  cstate ;
		                    FROM statecodes) ;
		                    AND cid IN (SELECT  cid ;
		                    FROM ten99sel);
		                    AND NOT DELETED() ;
		                    INTO CURSOR tempK ;
		                    ORDER BY c1099state ;
		                    GROUP BY c1099state
		            ELSE
		                SELECT  tax1099ST.c1099state, ;
		                    COUNT(*) AS nKPayeeCount, ;
		                    0.00 AS nKTotal3, ;
		                    0.00 AS nKTotal2, ;
		                    0.00 AS nKTotal1, ;
		                    SUM(tax1099ST.nNonEmp) AS nKTotal7,  ;
		                    0.00 AS nKTotalC,  ;
		                    SUM(tax1099ST.nfedtax) AS nKTotal4 ;
		                    FROM tax1099ST ;
		                    WHERE cYear = tcYear ;
		                    AND NOT EMPTY(c1099state) ;
		                    AND c1099state IN (SELECT  cstate ;
		                    FROM statecodes) ;
		                    AND cid IN (SELECT  cid ;
		                    FROM ten99sel);
		                    AND NOT DELETED() ;
		                    INTO CURSOR tempK ;
		                    ORDER BY c1099state ;
		                    GROUP BY c1099state
		            ENDIF
		
		        ENDIF
		    ELSE
		        IF NOT tlCombined
		            SELECT  tcCorrect AS correct, ;
		                m.paddr1 AS paddr1, ;
		                m.paddr2 AS paddr2, ;
		                m.paddr3 AS paddr3, ;
		                m.ptax   AS ptax, ;
		                m.pphone AS pphone, ;
		                m.pcontact AS pcontact, ;
		                temp1099s.cwellid, ;
		                m.cProducer AS cProducer, ;
		                temp1099s.cYear, ;
		                temp1099s.cid, ;
		                temp1099s.cidtype, ;
		                temp1099s.cprogcode, ;
		                temp1099s.cname, ;
		                temp1099s.cName2,  ;
		                temp1099s.caddr1, ;
		                temp1099s.caddr2, ;
		                temp1099s.ccity, ;
		                temp1099s.cstate, ;
		                temp1099s.czip, ;
		                temp1099s.cTaxid, ;
		                temp1099s.nother, ;
		                temp1099s.nroyalty, ;
		                temp1099s.nrents, ;
		                temp1099s.nNonEmp,  ;
		                temp1099s.nAttorney,  ;
		                temp1099s.ctaxstate1, ;
		                temp1099s.nstatetax1, ;
		                temp1099s.cstatepayerno1, ;
		                temp1099s.ctaxstate2, ;
		                temp1099s.nstatetax2, ;
		                temp1099s.cstatepayerno2, ;
		                temp1099s.nfedtax ;
		                FROM temp1099s ;
		                WHERE cYear = tcYear ;
		                AND cid IN (SELECT  cid ;
		                FROM ten99sel);
		                AND NOT DELETED() ;
		                INTO CURSOR temp1099 READWRITE ;
		                ORDER BY cid
		        ELSE
		            SELECT  tcCorrect AS correct, ;
		                m.paddr1 AS paddr1, ;
		                m.paddr2 AS paddr2, ;
		                m.paddr3 AS paddr3, ;
		                tax1099ST.cwelltax AS ptax, ;
		                m.pphone AS pphone, ;
		                m.pcontact AS pcontact, ;
		                tax1099ST.c1099state, ;
		                tax1099ST.cwellid, ;
		                tax1099ST.cwellname AS cProducer, ;
		                tax1099ST.cYear, ;
		                tax1099ST.cid, ;
		                tax1099ST.cidtype, ;
		                tax1099ST.cprogcode, ;
		                tax1099ST.cname, ;
		                tax1099ST.cName2,  ;
		                tax1099ST.caddr1, ;
		                tax1099ST.caddr2, ;
		                tax1099ST.ccity, ;
		                tax1099ST.cstate, ;
		                tax1099ST.czip, ;
		                tax1099ST.cTaxid, ;
		                tax1099ST.nother, ;
		                tax1099ST.nroyalty, ;
		                tax1099ST.nrents, ;
		                tax1099ST.nNonEmp,  ;
		                tax1099ST.nAttorney,  ;
		                temp1099s.ctaxstate1, ;
		                temp1099s.nstatetax1, ;
		                temp1099s.cstatepayerno1, ;
		                temp1099s.ctaxstate2, ;
		                temp1099s.nstatetax2, ;
		                temp1099s.cstatepayerno2, ;
		                tax1099ST.nfedtax ;
		                FROM tax1099ST ;
		                WHERE cYear = tcYear ;
		                AND cid IN (SELECT  cid ;
		                FROM ten99sel);
		                AND NOT DELETED() ;
		                INTO CURSOR temp1099 READWRITE ;
		                ORDER BY c1099state, cid
		
		            SELECT  tcCorrect AS correct, ;
		                m.paddr1 AS paddr1, ;
		                m.paddr2 AS paddr2, ;
		                m.paddr3 AS paddr3, ;
		                temp1099s.cwelltax   AS ptax, ;
		                m.pphone AS pphone, ;
		                m.pcontact AS pcontact, ;
		                m.cProducer AS cProducer, ;
		                temp1099s.cYear, ;
		                temp1099s.cid, ;
		                temp1099s.cidtype, ;
		                temp1099s.cprogcode, ;
		                temp1099s.cname, ;
		                temp1099s.cName2,  ;
		                temp1099s.caddr1, ;
		                temp1099s.caddr2, ;
		                temp1099s.ccity, ;
		                temp1099s.cstate, ;
		                temp1099s.czip, ;
		                temp1099s.cTaxid, ;
		                temp1099s.nother, ;
		                temp1099s.nroyalty, ;
		                temp1099s.nrents, ;
		                temp1099s.nNonEmp,  ;
		                temp1099s.nAttorney,  ;
		                temp1099s.ctaxstate1, ;
		                temp1099s.nstatetax1, ;
		                temp1099s.cstatepayerno1, ;
		                temp1099s.ctaxstate2, ;
		                temp1099s.nstatetax2, ;
		                temp1099s.cstatepayerno2, ;
		                temp1099s.nfedtax ;
		                FROM temp1099s ;
		                WHERE cYear = tcYear ;
		                AND cidtype = 'V' ;
		                AND cid IN (SELECT  cid ;
		                FROM ten99sel);
		                AND NOT DELETED() ;
		                INTO CURSOR temp1099x  ;
		                ORDER BY cid
		
		            IF _TALLY > 0
		                SELECT temp1099
		                APPEND FROM DBF('temp1099x')
		            ENDIF
		            SELECT temp1099
		            REPLACE c1099state WITH 'ZZ' FOR EMPTY(c1099state)
		
		* Get the totals for the K records
		            SELECT  tax1099ST.c1099state, ;
		                COUNT(*) AS nKPayeeCount, ;
		                SUM(tax1099ST.nother) AS nKTotal3, ;
		                SUM(tax1099ST.nroyalty) AS nKTotal2, ;
		                SUM(tax1099ST.nrents) AS nKTotal1, ;
		                SUM(tax1099ST.nNonEmp) AS nKTotal7,  ;
		                SUM(tax1099ST.nAttorney) AS nKTotalC,  ;
		                SUM(tax1099ST.nfedtax) AS nKTotal4 ;
		                FROM tax1099ST ;
		                WHERE cYear = tcYear ;
		                AND NOT EMPTY(c1099state) ;
		                AND c1099state IN (SELECT  cstate ;
		                FROM statecodes) ;
		                AND cid IN (SELECT  cid ;
		                FROM ten99sel);
		                AND NOT DELETED() ;
		                INTO CURSOR tempK ;
		                ORDER BY c1099state ;
		                GROUP BY c1099state
		        ENDIF
		    ENDIF
		
		    IF RECCOUNT('temp1099') = 0
		        THISFORM.oMessage.Warning('There were no 1099 records for the given year. Please check your data.')
		        llReturn = .F.
		        EXIT
		    ENDIF
		
		    IF tlCombined
		        SELECT temp1099
		        INDEX ON c1099state + cid TAG cid
		    ELSE
		        SELECT temp1099
		        INDEX ON cid TAG cid
		    ENDIF
		
		    lnFCount  = 0
		    m.totrecs = 0
		    m.bcount  = 0
		    m.total1  = 0
		    m.total2  = 0
		    m.total3  = 0
		    m.total4  = 0
		    m.total7  = 0
		    m.totalC  = 0
		    m.diskno  = 1
		    m.creturn    = CHR(13) + CHR(10)
		    fh        = ' '
		
		    m.test = ' '
		
		    IF 'SHERWARE' $ UPPER(m.cProducer)
		        IF THISFORM.oMessage.CONFIRM('Is This A Test File?')
		            m.test = 'T'
		        ENDIF
		    ENDIF
		
		    IF THISFORM.chkTestFile.VALUE
		        m.test = 'T'
		    ENDIF
		
		*
		*  Transmitter Record
		*
		    TType      = 'T'			&& Record Type						1
		    TYear      = tcYear         && Payment Year						2-5
		    TPrior     = ' '            && Prior Year Data Indicator		6
		    TTransTIN  = THISFORM.numfmt(m.ptax, 9)  && Transmitter's taxid #			7-15
		    TTCC       = tcTCC			&& Transmitter Control Code			16-20
		    TReplace   = SPACE(2)    	&& Replacement File Character		21-22
		    TBlank     = SPACE(5)		&& Blank							23-27
		    TTest      = m.test			&& Test Indicator					28
		    TForeign   = ' '			&& Foreign Entity Indicator, blank means no	29
		    TName      = UPPER(PADR(ALLTRIM(m.cProducer), 40, ' '))  	&&		30-69
		    TNameCont  = SPACE(40)      && Transmitter Name Continuation	70-109
		    TCompany   = UPPER(PADR(ALLTRIM(m.cProducer), 40, ' '))	&&		110-149
		    TCompCont  = SPACE(40)		&& Company Name Continuation		150-189
		    TAddress   = UPPER(PADR(ALLTRIM(m.paddr1), 40, ' '))		&&		190-229
		    TCity      = UPPER(PADR(ALLTRIM(m.pcity), 40, ' '))		&&		230-269
		    TState     = UPPER(m.pstate) && Transmitter State Code			270-271
		    TZip       = UPPER(PADR(TRANSFORM(m.pzip), 9, ' ')) 		&&		272-280
		    TBlank2    = SPACE(15)		&& Blank					&&		281-295
		    TPayeeNo   = '00000000'		&& Number of B Payee records		296-303
		    TContact   = UPPER(PADR(ALLTRIM(m.pcontact), 40, ' '))	&&		304-343
		    TPhone     = PADR(ALLTRIM(m.pphone), 15, ' ')				&&		344-358
		    TEmail     = SPACE(35)      && Contact email address            359-393
		    TMagInd    = SPACE(2)		&& Magnetic Tape Indicator			394-395
		    TOrigFile  = SPACE(15)		&& Original File Name				396-410
		    TBlank3    = SPACE(89 )     && Blank							411-499
		    TRecSeq    = '00000001'     && Record sequence number           500-507
		    TBlank4    = SPACE(10)      && Blank                            508-517
		    TVendor    = 'V'            && Vendor indicator.  SherWare is the vendor 518
		    TVendName  = 'SherWare, Inc.                          '  && Vendor Name 519-558
		    TVendAdd   = '4182 Clemmons Road Box 285              '  && Vendor Address 559-598
		    TVendCity  = 'Clemmons                                '  &&  Vendor City 599-638
		    TVendState = 'NC'           && Vendor state                     639-640
		    TVendZip   = '27012    '    && Vendor Zip                       641-649
		    TVendCon   = 'Phil Sherwood                           '  && Vendor contact 650-689
		    TVendPhone = '3302620200     '  &&  Vendor phone                690-704
		    TVendEmail = 'sales@sherware.com                 '  &&  Vendor email  705-739
		    TBlank5    = '         '    &&  Blank                           740-748
		    TCRLF      = m.creturn         && Carriage Return and Line Feed	749-750
		
		*
		*  Record "A"
		*
		    Atype     = 'A'			&& Record Type						1
		    Ayear     = tcYear			&& Payment Year						2-5
		    Acombined = ' '			&& Combined federal/state filer		6
		    ABlank1   = SPACE(5)       && Blank							7-11
		    Atin      = THISFORM.numfmt(m.ptax, 9) && Payer's TIN			12-20
		    ANamectl  = SPACE(4)   	&& Payer Name Control				21-24
		    Alast     = ' '			&& Last filing indicator			25
		    IF ll1099Misc
		        Arettype  = 'A '			&& Return type   1099-misc = "A"	26-27
		    ELSE
		        Arettype  = 'NE'			&& Return type   1099-NEC = "NE"	26-27
		    ENDIF
		    IF ll1099Misc
		        AAmtcodes = '1234C       '	&& Amount codes						28-45
		    ELSE
		        AAmtcodes = '14          '	&& Amount codes						28-45
		    ENDIF
		    ABlank2   = SPACE(8)       && Blank							40-47
		    AOrig     = ' ' 			&& Original File Indicator			48  &&  Blanked out original file marker, per IRS instructions for 2007 files - BH 12/03/2007
		    AReplace  = ' ' 			&& Replacement File Indicator		49
		    ACorrect  = ' '			&& Corrected File Indicator			50
		    ABlank3   = ' '       		&& Blank							51
		    AForeign  = ' '			&& Foreign Corporation				52
		    APayer    = UPPER(PADR(ALLTRIM(m.cProducer), 40, ' '))	&&		53-92
		    APayer2   = SPACE(40)		&& Payer name line 2				93-132
		    ATransfer = '0'			&& 2nd payer type					133
		    AAddress  = UPPER(PADR(ALLTRIM(m.paddr1), 40, ' '))		&&		134-173
		    ACity     = UPPER(PADR(ALLTRIM(m.pcity), 40, ' '))		&&		174-213
		    AState    = UPPER(m.pstate) && Payer State						214-215
		    AZipCode  = UPPER(PADR(TRANSFORM(m.pzip), 9, ' ')) && Payer Zip Cd	216-224
		    APhone    = PADR(ALLTRIM(m.pphone), 15, ' ')	&& Payer Phone Num	225-239
		    ABlank4   = SPACE(260)     && Blank							240-499
		    ARecSeq   = '00000002'     && Record sequence                  500-507
		    ABlank5   = SPACE(241)     && Blanks                           508-748
		    Acrlf     = m.creturn			&& Carriage Return/Line Feed		749-750
		*
		*  Record "B"
		*
		    BType      = 'B'			    && Record Type						1
		    BYear      = tcYear			&& Payment year						2-5
		    BCorrected = ' '			    && Corrected Return Indicator		6
		    BNamectl   = SPACE(4)  		&& Name control						7-10
		    BTypeTin   = ' '			    && Type of Tin						11
		    BTin       = SPACE(9)		&& TIN								12-20
		    BAcct      = SPACE(20)		&& Payer's acct # for payee			21-40
		    BCode      = SPACE(4)		&& Payer's office code				41-44
		    BBlank     = SPACE(10) 		&& Blank							45-54
		    BPmt1      = '000000000000'  && Payment amount 1  				55-66
		    BPmt2      = '000000000000'  && Payment amount 2					67-78
		    BPmt3      = '000000000000'  && Payment amount 3					79-90
		    BPmt4      = '000000000000'  && Payment amount 4					91-102
		    BPmt5      = '000000000000'  && Payment amount 5					103-114
		    BPmt6      = '000000000000'  && Payment amount 6					115-126
		    BPmt7      = '000000000000'  && Payment amount 7					127-138
		    BPmt8      = '000000000000'	&& Payment amount 8					139-150
		    BPmt9      = '000000000000'	&& Payment amount 9					151-162
		    BPmtA      = '000000000000'	&& Payment amount A					163-174
		    BPmtB      = '000000000000'	&& Payment amount B					175-186
		    BPmtC      = '000000000000'	&& Payment amount C					187-198
		    BPmtD      = '000000000000'	&& Payment amount D					199-210
		    BPmtE      = '000000000000'	&& Payment amount E					211-222
		    BPmtF      = '000000000000'	&& Payment amount F					223-234
		    BPmtG      = '000000000000'	&& Payment amount G					235-246
		    BPmtH      = '000000000000'	&& Payment amount H					247-258
		    BPmtI      = '000000000000'	&& Payment amount I					259-270
		    BBlanks    = SPACE(16)      && Blanks							271-286
		    Bforeign   = SPACE(1)	    && Foreign country indicator		287
		    BPayee     = SPACE(40) 		&& Payee name						288-327
		    BPayee2    = SPACE(40)		&& Payee name 2						328-367
		    BPayAddr   = SPACE(40)		&& Payee address					368-407
		    BBlank2    = SPACE(40) 		&& Blank							408-447
		    BBlank3    = SPACE(40) 		&& Blank							408-447
		    BBlank4    = SPACE(40) 		&& Blank							408-447
		    BPayCity   = SPACE(40)		&& Payee city						448-487
		    BPayState  = SPACE(2) 		&& Payee state						488-489
		    BPayZip    = SPACE(9)		&& Payee zip						490-498
		    BBlank5    = SPACE(1)		&& blanks							499
		    BRecSeq    = '00000001'      && Record sequence                  500-507
		    BBlank6    = SPACE(36)       && Blanks                           508-543
		
		    B2ndTIN    = ' '	 	    	&& 2nd TIN Notice					544
		    BBlank7    = SPACE(2)		&& Blank							545-546
		    BDirect    = ' ' 			&& Direct sales indicator			547
		    BBlank8    = SPACE(115)		&& Blank							548-662
		    BSpecial   = SPACE(60)       && Special Data Entries             553-722
		    BStateWH   = SPACE(12)       && State Income Tax Withheld        723-734
		    BLocalWH   = SPACE(12)       && Local Income Tax Withheld        735-746
		    BStateCode = SPACE(2)        && Combined Federal/State Code      747-748
		    BCRLF      = m.creturn			&& Carriage Return/Line Feed		749-750
		
		
		*
		* Record "C"
		*
		    CType     = 'C'			&& Record Type						1
		    CPayeeNum = '00000000'		&& Number of B records				2-9
		    CBlank    = SPACE(6)   	&& Blanks							10-15
		    CTotal1   = '000000000000000000'	&& Control Total 1			16-33
		    CTotal2   = '000000000000000000'	&& Control Total 2			34-51
		    CTotal3   = '000000000000000000'	&& Control Total 3			52-69
		    CTotal4   = '000000000000000000'	&& Control Total 4			70-87
		    CTotal5   = '000000000000000000'	&& Control Total 5			88-105
		    CTotal6   = '000000000000000000'	&& Control Total 6			106-123
		    CTotal7   = '000000000000000000'	&& Control Total 7			124-141
		    CTotal8   = '000000000000000000'	&& Control Total 8			142-159
		    CTotal9   = '000000000000000000'	&& Control Total 9			160-177
		    CTotalA   = '000000000000000000'	&& Control Total A			178-195
		    CTotalB   = '000000000000000000'	&& Control Total B			196-213
		    CTotalC   = '000000000000000000'	&& Control Total C			214-231
		    CTotalD   = '000000000000000000'	&& Control Total D			232-249
		    CTotalE   = '000000000000000000'	&& Control Total E			250-267
		    CTotalF   = '000000000000000000'	&& Control Total F			268-285
		    CTotalG   = '000000000000000000'	&& Control Total G			286-303
		    CTotalH   = '000000000000000000'	&& Control Total H			304-321
		    CTotalI   = '000000000000000000'	&& Control Total I			322-339
		    CBlank2   = SPACE(160)			&& Blank					340-499
		    CRecSeq   = '00000001'           && Record sequence          500-507
		    CBlank3   = SPACE(241)           && Blank                    508-748
		    CCRLF     = m.creturn				&& Carriage Ret/Line Feed	749-750
		*
		* Record "K"
		*
		    KType      = 'K'                  && Record Type              1
		    KPayeeNum  = '00000000'           && Number of B Recs for St  2-9
		    KBlank1    = SPACE(6)             && Blank                    10-15
		    KTotal1    = '000000000000000000' && Control Total 1          16-33
		    KTotal2    = '000000000000000000' && Control Total 2          34-51
		    KTotal3    = '000000000000000000' && Control Total 3          52-69
		    KTotal4    = '000000000000000000' && Control Total 4          70-87
		    KTotal5    = '000000000000000000' && Control Total 5          88-105
		    KTotal6    = '000000000000000000' && Control Total 6          106-123
		    KTotal7    = '000000000000000000' && Control Total 7          124-141
		    KTotal8    = '000000000000000000' && Control Total 8          142-159
		    KTotal9    = '000000000000000000' && Control Total 9          160-177
		    KTotalA    = '000000000000000000' && Control Total A          178-195
		    KTotalB    = '000000000000000000' && Control Total B          196-213
		    KTotalC    = '000000000000000000' && Control Total C          214-231
		    KTotalD    = '000000000000000000' && Control Total D          232-249
		    KTotalE    = '000000000000000000' && Control Total E          250-267
		    KTotalF    = '000000000000000000' && Control Total F          268-285
		    KTotalG    = '000000000000000000' && Control Total G          286-303
		    KTotalH    = '000000000000000000' && Control Total H          304-321
		    KTotalI    = '000000000000000000' && Control Total I          322-339
		    KBlank2    = SPACE(160)           && Blank                    340-499
		    KRecSeq    = '00000001'           && Record Sequence          500-507
		    KBlank3    = SPACE(199)           && Blank                    508-706
		    KStateWH   = '000000000000000000' && State Income Tax WH      707-724
		    KLocalWH   = '000000000000000000' && Local Income Tax WH      725-742
		    KBlank4    = SPACE(4)             && Blank                    743-746
		    KStateCode = SPACE(2)             && State Code               747-748
		    KCRLF      = m.creturn               && Carriage ret/line feed   749-750
		
		
		*
		* Record "F"
		*
		    FType      = 'F'			        && Record Type						1
		    FPayerNum  = '00000001'	        && Number of A records				2-9
		    FZeros     = '000000000000000000000'  && Zeros					10-30
		    FBlanks    = SPACE(19)  	        && Blanks							31-49
		    FPayerNum2 = '00000001'          && Number of B records              50-57
		    FBlanks2   = SPACE(442)          && Blanks                           58-499
		    FRecSeq    = '00000001'          && Record sequence number           500-508
		    FBlanks3   = SPACE(241)          && Blanks                           509-748
		    FCRLF      = m.creturn			    && Carriage Ret/Line Feed			749-750
		
		* Check to see if this is a prior year
		    IF YEAR(DATE()) - VAL(tcYear) > 1
		        TPrior = 'P'
		    ELSE
		        TPrior = ' '
		    ENDIF
		
		    SELECT temp1099
		    COUNT FOR cYear = tcYear TO lnMax
		    IF ll1099Misc
		        IF tcCorrect = 'Y'
		            COUNT FOR cYear = tcYear TO lnBRecs
		        ELSE
		            COUNT FOR cYear = tcYear AND (nroyalty # 0 OR nother # 0 OR nAttorney # 0 OR nrents # 0)  TO lnBRecs
		        ENDIF
		    ELSE
		        IF tcCorrect = 'Y'
		            COUNT FOR cYear = tcYear TO lnBRecs
		        ELSE
		            COUNT FOR cYear = tcYear AND nNonEmp # 0 TO lnBRecs
		        ENDIF
		    ENDIF
		    GO TOP
		    lnProgress = 1
		    oProgress  = THISFORM.oMessage.ProgressBar('Creating 1099 Magnetic File For ' + tcYear + '....')
		    oProgress.SetProgressRange(0, lnMax)
		
		    m.maxrecs  = 999999999
		    m.nreccount = 999999999
		    lnTotal    = 0
		
		* Determine if this is a corrected record
		    IF THISFORM.chkCorrect.VALUE = .T.
		        IF THISFORM.chk2Part1.VALUE = .T.
		            BCorrected = 'G'
		        ENDIF
		        IF THISFORM.chk2part2.VALUE = .T.
		            BCorrected = 'C'
		        ENDIF
		        IF THISFORM.chk2Part1.VALUE = .F. AND ;
		                THISFORM.chk2part2.VALUE = .F.
		            BCorrected = 'G'
		        ENDIF
		    ENDIF
		
		    IF NOT tlByWell
		
		        lnCount = 1
		        IF ll1099Misc
		            lcMagFile = 'IRSTAX_MISC_' + TYear + '_0.TXT'
		        ELSE
		            lcMagFile = 'IRSTAX_NEC_' + TYear + '_0.TXT'
		        ENDIF
		        DO WHILE FILE(ADDBS(tcPath)+lcMagFile)
		            IF ll1099Misc
		                lcMagFile = 'IRSTAX_MISC_' + TYear + '_' + TRANSFORM(lnCount) + '.TXT'
		            ELSE
		                lcMagFile = 'IRSTAX_NEC_' + TYear + '_' + TRANSFORM(lnCount) + '.TXT'
		            ENDIF
		            lnCount = lnCount + 1
		        ENDDO
		
		        fh       = FCREATE(ADDBS(tcPath) + lcMagFile)
		
		        TRecSeq     = PADL(TRANSFORM(lnRecordSeq), 8, '0')
		        lnRecordSeq = lnRecordSeq + 1
		
		        TPayeeNo = PADL(ALLTRIM(STR(lnBRecs, 8)), 8, '0')
		        THISFORM.fileio(fh, TType)
		        THISFORM.fileio(fh, TYear + TPrior + TTransTIN + TTCC + TReplace + TBlank + TTest)
		        THISFORM.fileio(fh, TForeign + TName + TNameCont + TCompany + TCompCont + TAddress)
		        THISFORM.fileio(fh, TCity + TState + TZip + TBlank2 + TPayeeNo + TContact + TPhone)
		        THISFORM.fileio(fh, TEmail + TMagInd + TOrigFile + TBlank3 + TRecSeq + TBlank4)
		        THISFORM.fileio(fh, TVendor + TVendName + TVendAdd + TVendCity + TVendState + TVendZip)
		        THISFORM.fileio(fh, TVendCon + TVendPhone + TVendEmail + TBlank5 + TCRLF)
		
		* Combined Federal/State Filing
		        IF tlCombined
		            IF RECCOUNT('tempk') > 0
		                Acombined = '1'
		            ELSE
		                Acombined = ' '
		            ENDIF
		        ELSE
		            Acombined = ' '
		        ENDIF
		
		        ARecSeq     = PADL(TRANSFORM(lnRecordSeq), 8, '0')
		        lnRecordSeq = lnRecordSeq + 1
		
		        THISFORM.fileio(fh, "A")
		        THISFORM.fileio(fh, Ayear + Acombined + ABlank1)
		        THISFORM.fileio(fh, Atin)
		        THISFORM.fileio(fh, ANamectl + Alast + Arettype + AAmtcodes)
		        THISFORM.fileio(fh, ABlank2 + AOrig + AReplace + ACorrect + ABlank3 + AForeign)
		        THISFORM.fileio(fh, APayer + APayer2 + ATransfer + AAddress + ACity + AState + AZipCode)
		        THISFORM.fileio(fh, APhone + ABlank4 + ARecSeq + ABlank5)
		        THISFORM.fileio(fh, Acrlf)
		
		        m.nreccount = m.nreccount + 2
		
		        m.diskno   = m.diskno + 1
		        m.nreccount = 1
		        m.totrecs  = m.totrecs + 1
		        m.nreccount = m.nreccount + 1
		        STORE 0 TO m.total1, m.total2, m.total3, m.ntotal4, m.total5, m.ntotal6
		        STORE 0 TO m.total7, m.total8, m.total9, m.totalA, m.totalB, m.totalC
		
		
		        SELECT temp1099
		        SCAN
		            SCATTER MEMVAR
		            m.cTaxid = cmEncrypt(ALLTRIM(m.cTaxid),m.goApp.cEncryptionKey)
		            oProgress.UpdateProgress(lnProgress)
		            lnProgress = lnProgress + 1
		
		            IF ll1099NEC
		                IF NOT tcCorrect = 'Y'
		                    IF m.nNonEmp = 0
		                        LOOP
		                    ENDIF
		                ENDIF
		            ENDIF
		
		            IF ll1099Misc
		                IF NOT tcCorrect = 'Y'
		                    IF m.nroyalty = 0 AND ;
		                            m.nother   = 0 AND ;
		                            m.nrents   = 0 AND ;
		                            m.nAttorney = 0
		                        LOOP
		                    ENDIF
		                ENDIF
		            ENDIF
		
		            IF tlCombined
		                SELECT statecodes
		                LOCATE FOR cstate == m.c1099state
		                IF FOUND()
		                    BStateCode = cCode
		                ELSE
		                    BStateCode = '  '
		                ENDIF
		            ELSE
		                BStateCode = '  '
		            ENDIF
		
		* Determine the type of tin
		            DO CASE
		            CASE SUBSTR(m.cTaxid,3,1) = '-'  && EIN
		                BTypeTin = '1'
		            CASE SUBSTR(m.cTaxid,4,1) = '-'  && SSN
		                BTypeTin = '2'
		            OTHERWISE
		                BTypeTin = ' '
		            ENDCASE
		
		            BTin      = THISFORM.numfmt(m.cTaxid, 9)
		            IF ll1099Misc
		                BPmt1     = THISFORM.numfmt(PADL(ALLTRIM(TRANSFORM(m.nrents,'999999999.99')), 12, '0'), 12)
		                BPmt2     = THISFORM.numfmt(PADL(ALLTRIM(TRANSFORM(m.nroyalty,'999999999.99')), 12, '0'), 12)
		                BPmt3     = THISFORM.numfmt(PADL(ALLTRIM(TRANSFORM(m.nother,'999999999.99')), 12, '0'), 12)
		                BPmtC     = THISFORM.numfmt(PADL(ALLTRIM(TRANSFORM(m.nAttorney,'999999999.99')), 12, '0'), 12)
		            ELSE
		                BPmt1     = THISFORM.numfmt(PADL(ALLTRIM(TRANSFORM(m.nNonEmp,'999999999.99')), 12, '0'), 12)
		            ENDIF
		
		            BPmt4     = THISFORM.numfmt(PADL(ALLTRIM(TRANSFORM(m.nfedtax,'999999999.99')), 12, '0'), 12)
		            BStateWH  = THISFORM.numfmt(PADL(ALLTRIM(TRANSFORM(m.nstatetax1,'999999999.99')), 12, '0'), 12)
		            IF tlCombined
		                BStateCode = m.ctaxstate1
		            ELSE
		                BStateCode = '  '
		            ENDIF
		            BPayee    = PADR(ALLTRIM(m.cname), 40, ' ')
		            BPayee2   = PADR(ALLTRIM(m.cName2), 40, ' ')
		            BPayAddr  = PADR(ALLTRIM(m.caddr1), 40, ' ')
		            BPayCity  = PADR(ALLTRIM(m.ccity), 40, ' ')
		            BPayState = m.cstate
		            m.czip    = STRTRAN(m.czip, '-', '')
		            BPayZip   = PADR(ALLTRIM(m.czip), 9, ' ')
		
		            IF ll1099Misc
		                m.total1  = m.total1 + m.nrents
		                m.total2  = m.total2 + m.nroyalty
		                m.total3  = m.total3 + m.nother
		                m.total4  = m.total4 + m.nfedtax
		                m.total7  = 0
		                m.totalC  = m.totalC + m.nAttorney
		            ELSE
		                m.total1  = m.total1 + m.nNonEmp
		                m.total4  = m.total4 + m.nfedtax
		                STORE 0 TO m.ntotal2, m.ntotal3, m.ntotal7, m.ntotalC
		            ENDIF
		
		            BAcct     = PADR(ALLTRIM(m.cid), 20, ' ')
		
		            BRecSeq     = PADL(TRANSFORM(lnRecordSeq), 8, '0')
		            lnRecordSeq = lnRecordSeq + 1
		
		            THISFORM.fileio(fh, BType + BYear + BCorrected)
		            THISFORM.fileio(fh, BNamectl + BTypeTin + BTin)
		            THISFORM.fileio(fh, BAcct + BCode + BBlank)
		            THISFORM.fileio(fh, BPmt1 + BPmt2 + BPmt3 + BPmt4 + BPmt5 + BPmt6)
		            THISFORM.fileio(fh, BPmt7 + BPmt8 + BPmt9 + BPmtA + BPmtB + BPmtC)
		            THISFORM.fileio(fh, BPmtD + BPmtE + BPmtF + BPmtG + BPmtH + BPmtI + BBlanks + Bforeign)
		            THISFORM.fileio(fh, BPayee + BPayee2 + BPayAddr + BBlank4 + BPayCity + BPayState)
		            THISFORM.fileio(fh, BPayZip + BBlank5 + BRecSeq + BBlank6 + B2ndTIN + BBlank7 + BDirect + BBlank8)
		            THISFORM.fileio(fh, BSpecial + BStateWH + BLocalWH + BStateCode)
		            THISFORM.fileio(fh, BCRLF)
		
		            m.nreccount = m.nreccount + 1
		            m.bcount   = m.bcount + 1
		            lnTotal    = lnTotal + 1
		
		        ENDSCAN && temp1099
		
		
		        CPayeeNum = PADL(TRANSFORM(m.bcount), 8, '0')
		        CTotal1   = THISFORM.numfmt(PADL(ALLTRIM(TRANSFORM(m.total1,'999999999.99')), 18, '0'), 18)
		        CTotal2   = THISFORM.numfmt(PADL(ALLTRIM(TRANSFORM(m.total2,'999999999.99')), 18, '0'), 18)
		        CTotal3   = THISFORM.numfmt(PADL(ALLTRIM(TRANSFORM(m.total3,'999999999.99')), 18, '0'), 18)
		        CTotal4   = THISFORM.numfmt(PADL(ALLTRIM(TRANSFORM(m.total4,'999999999.99')), 18, '0'), 18)
		        CTotal7   = THISFORM.numfmt(PADL(ALLTRIM(TRANSFORM(m.total7,'999999999.99')), 18, '0'), 18)
		        CTotalC   = THISFORM.numfmt(PADL(ALLTRIM(TRANSFORM(m.totalC,'999999999.99')), 18, '0'), 18)
		
		        CRecSeq     = PADL(TRANSFORM(lnRecordSeq), 8, '0')
		        lnRecordSeq = lnRecordSeq + 1
		
		        THISFORM.fileio(fh, 'C' + CPayeeNum + CBlank + CTotal1 + CTotal2 + CTotal3)
		        THISFORM.fileio(fh, CTotal4 + CTotal5 + CTotal6 + CTotal7 + CTotal8 + CTotal9)
		        THISFORM.fileio(fh, CTotalA + CTotalB + CTotalC + CTotalD + CTotalE + CTotalF)
		        THISFORM.fileio(fh, CTotalG + CTotalH + CTotalI + CBlank2 + CRecSeq + CBlank3)
		        THISFORM.fileio(fh, CCRLF)
		
		        m.nreccount = m.nreccount + 1
		        lnFCount   = lnFCount + 1
		
		        IF tlCombined
		            SELECT tempK
		            SCAN
		                SCATTER MEMVAR
		
		                SELECT statecodes
		                LOCATE FOR cstate == m.c1099state
		                IF FOUND()
		                    KStateCode = cCode
		                ELSE
		* Not a supported state
		                    LOOP
		                ENDIF
		
		                KPayeeNum = PADL(TRANSFORM(m.nKPayeeCount), 8, '0')
		                KTotal1   = THISFORM.numfmt(PADL(ALLTRIM(TRANSFORM(m.nKTotal1,'999999999.99')), 18, '0'), 18)
		                KTotal2   = THISFORM.numfmt(PADL(ALLTRIM(TRANSFORM(m.nKTotal2,'999999999.99')), 18, '0'), 18)
		                KTotal3   = THISFORM.numfmt(PADL(ALLTRIM(TRANSFORM(m.nKTotal3,'999999999.99')), 18, '0'), 18)
		                KTotal4   = THISFORM.numfmt(PADL(ALLTRIM(TRANSFORM(m.nKTotal4,'999999999.99')), 18, '0'), 18)
		                KTotal7   = THISFORM.numfmt(PADL(ALLTRIM(TRANSFORM(m.nKTotal7,'999999999.99')), 18, '0'), 18)
		                KTotalC   = THISFORM.numfmt(PADL(ALLTRIM(TRANSFORM(m.nKTotalC,'999999999.99')), 18, '0'), 18)
		
		                KRecSeq     = PADL(TRANSFORM(lnRecordSeq), 8, '0')
		                lnRecordSeq = lnRecordSeq + 1
		
		                THISFORM.fileio(fh, KType + KPayeeNum + KBlank1)
		                THISFORM.fileio(fh, KTotal1 + KTotal2 + KTotal3 + KTotal4 + KTotal5 + KTotal6 + KTotal7 + KTotal8)
		                THISFORM.fileio(fh, KTotal9 + KTotalA + KTotalB + KTotalC + KTotalD + KTotalE + KTotalF + KTotalG)
		                THISFORM.fileio(fh, KTotalH + KTotalI + KBlank2 + KRecSeq + KBlank3 + KStateWH + KLocalWH + KBlank4 + KStateCode + KCRLF)
		            ENDSCAN && tempK
		        ENDIF
		
		    ELSE
		        *************************************
		        * Reporting 1099s by well
		        *************************************
		        lcMagFile = 'IRSTAX_' + TYear + '.TXT'
		        IF FILE(ADDBS(tcPath) + lcMagFile)
		            ERASE ADDBS(tcPath) + lcMagFile
		        ENDIF
		
		        fh       = FCREATE(ADDBS(tcPath) + lcMagFile)
		
		
		        TRecSeq     = PADL(TRANSFORM(lnRecordSeq), 8, '0')
		        lnRecordSeq = lnRecordSeq + 1
		
		        TPayeeNo = PADL(TRANSFORM(lnMax), 8, '0')
		        THISFORM.fileio(fh, TType)
		        THISFORM.fileio(fh, TYear + TPrior + TTransTIN + TTCC + TReplace + TBlank + TTest)
		        THISFORM.fileio(fh, TForeign + TName + TNameCont + TCompany + TCompCont + TAddress)
		        THISFORM.fileio(fh, TCity + TState + TZip + TBlank2 + TPayeeNo + TContact + TPhone)
		        THISFORM.fileio(fh, TEmail + TMagInd + TOrigFile + TBlank3 + TRecSeq + TBlank4)
		        THISFORM.fileio(fh, TVendor + TVendName + TVendAdd + TVendCity + TVendState + TVendZip)
		        THISFORM.fileio(fh, TVendCon + TVendPhone + TVendEmail + TBlank5 + TCRLF)
		
		        m.nreccount = m.nreccount + 1
		
		        m.nreccount = 1
		        m.totrecs  = m.totrecs + 1
		        m.nreccount = m.nreccount + 1
		
		        SELECT cwellid, cProducer, ptax FROM temp1099 INTO CURSOR tempwell ORDER BY cwellid GROUP BY cwellid
		        SELECT tempwell
		        lnCount = 1
		        SCAN
		            SCATTER MEMVAR
		            lcWellID = cwellid
		            oProgress.UpdateProgress(lnProgress)
		            lnProgress = lnProgress + 1
		
		            APayer = UPPER(PADR(ALLTRIM(m.cProducer), 40, ' '))
		            Atin   = THISFORM.numfmt(m.ptax, 9)
		
		            ARecSeq     = PADL(TRANSFORM(lnRecordSeq), 8, '0')
		            lnRecordSeq = lnRecordSeq + 1
		
		            THISFORM.fileio(fh, "A")
		            THISFORM.fileio(fh, Ayear + ABlank1)
		            THISFORM.fileio(fh, Atin)
		            THISFORM.fileio(fh, ANamectl + Alast + Acombined + Arettype + AAmtcodes)
		            THISFORM.fileio(fh, ABlank2 + AOrig + AReplace + ACorrect + ABlank3 + AForeign)
		            THISFORM.fileio(fh, APayer + APayer2 + ATransfer + AAddress + ACity + AState + AZipCode)
		            THISFORM.fileio(fh, APhone + ABlank4 + ARecSeq + ABlank5)
		            THISFORM.fileio(fh, Acrlf)
		            lnCount = lnCount + 1
		
		            SELECT temp1099
		            SCAN FOR cwellid = lcWellID
		                SCATTER MEMVAR
		                m.cTaxid = cmEncrypt(ALLTRIM(m.cTaxid),m.goApp.cEncryptionKey)
		                IF tlCombined
		                    SELECT statecodes
		                    LOCATE FOR cstate == m.c1099state
		                    IF FOUND()
		                        BStateCode = cCode
		                    ELSE
		                        BStateCode = '  '
		                    ENDIF
		                ELSE
		                    BStateCode = '  '
		                ENDIF
		
		                BTin      = THISFORM.numfmt(m.cTaxid, 9)
		                BPmt1     = THISFORM.numfmt(PADL(ALLTRIM(TRANSFORM(m.nrents,'999999999.99')), 12, '0'), 12)
		                BPmt2     = THISFORM.numfmt(PADL(ALLTRIM(TRANSFORM(m.nroyalty,'999999999.99')), 12, '0'), 12)
		                BPmt3     = THISFORM.numfmt(PADL(ALLTRIM(TRANSFORM(m.nother,'999999999.99')), 12, '0'), 12)
		                BPmt4     = THISFORM.numfmt(PADL(ALLTRIM(TRANSFORM(m.nfedtax,'999999999.99')), 12, '0'), 12)
		                BPmtC     = THISFORM.numfmt(PADL(ALLTRIM(TRANSFORM(m.nAttorney,'999999999.99')), 12, '0'), 12)
		                BPayee    = PADR(ALLTRIM(m.cname), 40, ' ')
		                BPayee2   = PADR(ALLTRIM(m.cName2), 40, ' ')
		                BPayAddr  = PADR(ALLTRIM(m.caddr1), 40, ' ')
		                BPayCity  = PADR(ALLTRIM(m.ccity), 40, ' ')
		                BPayState = m.cstate
		                IF '-' $ m.czip
		                    lnPos  = AT('-', m.czip)
		                    m.czip = SUBSTR(m.czip, 1, lnPos - 1) + SUBSTR(m.czip, lnPos + 1)
		                ENDIF
		                BPayZip  = PADR(ALLTRIM(m.czip), 9, ' ')
		                IF ll1099Misc
		                    m.total1  = m.total1 + m.nrents
		                    m.total2  = m.total2 + m.nroyalty
		                    m.total3  = m.total3 + m.nother
		                    m.total4  = m.total4 + m.nfedtax
		                    m.total7  = 0
		                    m.totalC  = m.totalC + m.nAttorney
		                ELSE
		                    m.total1  = m.total1 + m.nNonEmp
		                    m.total4  = m.total4 + m.nfedtax
		                    STORE 0 TO m.ntotal2, m.ntotal3, m.ntotal7, m.ntotalC
		                ENDIF
		
		                BAcct    = PADR(ALLTRIM(m.cid), 20, ' ')
		                IF tcCorrect = 'Y'
		                    BCorrected = 'G'
		                ENDIF
		
		                BRecSeq     = PADL(TRANSFORM(lnRecordSeq), 8, '0')
		                lnRecordSeq = lnRecordSeq + 1
		
		                THISFORM.fileio(fh, BType + BYear + BCorrected)
		                THISFORM.fileio(fh, BNamectl + BTypeTin + BTin)
		                THISFORM.fileio(fh, BAcct + BCode + BBlank)
		                THISFORM.fileio(fh, BPmt1 + BPmt2 + BPmt3 + BPmt4 + BPmt5 + BPmt6)
		                THISFORM.fileio(fh, BPmt7 + BPmt8 + BPmt9 + BPmtA + BPmtB + BPmtC)
		                THISFORM.fileio(fh, BPmtD + BPmtE + BPmtF + BPmtG + BPmtH + BPmtI + BBlanks + Bforeign)
		                THISFORM.fileio(fh, BPayee + BPayee2 + BPayAddr + BBlank4 + BPayCity + BPayState)
		                THISFORM.fileio(fh, BPayZip + BBlank5 + BRecSeq + BBlank6 + B2ndTIN + BBlank7 + BDirect + BBlank8)
		                THISFORM.fileio(fh, BSpecial + BStateWH + BLocalWH + BStateCode)
		                THISFORM.fileio(fh, BCRLF)
		
		                m.nreccount = m.nreccount + 1
		                m.bcount   = m.bcount + 1
		                lnTotal    = lnTotal + 1
		
		                lnCount    = lnCount + 1
		            ENDSCAN
		            CPayeeNum = PADL(TRANSFORM(m.bcount), 8, '0')
		            CTotal1   = THISFORM.numfmt(PADL(ALLTRIM(TRANSFORM(m.total1,'999999999.99')), 18, '0'), 18)
		            CTotal2   = THISFORM.numfmt(PADL(ALLTRIM(TRANSFORM(m.total2,'999999999.99')), 18, '0'), 18)
		            CTotal3   = THISFORM.numfmt(PADL(ALLTRIM(TRANSFORM(m.total3,'999999999.99')), 18, '0'), 18)
		            CTotal4   = THISFORM.numfmt(PADL(ALLTRIM(TRANSFORM(m.total4,'999999999.99')), 18, '0'), 18)
		            CTotal7   = THISFORM.numfmt(PADL(ALLTRIM(TRANSFORM(m.total7,'999999999.99')), 18, '0'), 18)
		            CTotalC   = THISFORM.numfmt(PADL(ALLTRIM(TRANSFORM(m.totalC,'999999999.99')), 18, '0'), 18)
		
		            CRecSeq     = PADL(TRANSFORM(lnRecordSeq), 8, '0')
		            lnRecordSeq = lnRecordSeq + 1
		
		            THISFORM.fileio(fh, 'C' + CPayeeNum + CBlank + CTotal1 + CTotal2 + CTotal3)
		            THISFORM.fileio(fh, CTotal4 + CTotal5 + CTotal6 + CTotal7 + CTotal8 + CTotal9)
		            THISFORM.fileio(fh, CTotalA + CTotalB + CTotalC + CTotalD + CTotalE + CTotalF)
		            THISFORM.fileio(fh, CTotalG + CTotalH + CTotalI + CBlank2 + CRecSeq + CBlank3)
		            THISFORM.fileio(fh, CCRLF)
		            IF tlCombined
		                SELECT tempK
		                SCAN
		                    SCATTER MEMVAR
		
		                    SELECT statecodes
		                    LOCATE FOR cstate == m.c1099state
		                    IF FOUND()
		                        KStateCode = cCode
		                    ELSE
		* Not a supported state
		                        LOOP
		                    ENDIF
		
		                    KPayeeNum = PADL(TRANSFORM(m.nKPayeeCount), 8, '0')
		                    KTotal1   = THISFORM.numfmt(PADL(ALLTRIM(TRANSFORM(m.nKTotal1,'999999999.99')), 18, '0'), 18)
		                    KTotal2   = THISFORM.numfmt(PADL(ALLTRIM(TRANSFORM(m.nKTotal2,'999999999.99')), 18, '0'), 18)
		                    KTotal3   = THISFORM.numfmt(PADL(ALLTRIM(TRANSFORM(m.nKTotal3,'999999999.99')), 18, '0'), 18)
		                    KTotal4   = THISFORM.numfmt(PADL(ALLTRIM(TRANSFORM(m.nKTotal4,'999999999.99')), 18, '0'), 18)
		                    KTotal7   = THISFORM.numfmt(PADL(ALLTRIM(TRANSFORM(m.nKTotal7,'999999999.99')), 18, '0'), 18)
		                    KTotalC   = THISFORM.numfmt(PADL(ALLTRIM(TRANSFORM(m.nKTotalC,'999999999.99')), 18, '0'), 18)
		
		                    KRecSeq     = PADL(TRANSFORM(lnRecordSeq), 8, '0')
		                    lnRecordSeq = lnRecordSeq + 1
		
		                    THISFORM.fileio(fh, KType + KPayeeNum + KBlank1)
		                    THISFORM.fileio(fh, KTotal1 + KTotal2 + KTotal3 + KTotal4 + KTotal5 + KTotal6 + KTotal7 + KTotal8)
		                    THISFORM.fileio(fh, KTotal9 + KTotalA + KTotalB + KTotalC + KTotalD + KTotalE + KTotalF + KTotalG)
		                    THISFORM.fileio(fh, KBlank2 + KRecSeq + KBlank3 + KStateWH + KLocalWH + KBlank4 + KStateCode + KCRLF)
		                ENDSCAN && tempK
		
		            ENDIF
		            m.nreccount = m.nreccount + 1
		            lnFCount   = lnFCount + 1
		
		            m.total1 = 0
		            m.total2 = 0
		            m.total7 = 0
		
		        ENDSCAN && temp1099
		
		    ENDIF && NOT tlByWell
		
		    FPayerNum2  = CPayeeNum
		    FRecSeq     = PADL(TRANSFORM(lnRecordSeq), 8, '0')
		    lnRecordSeq = lnRecordSeq + 1
		
		    THISFORM.fileio(fh, FType + FPayerNum + FZeros + FBlanks + FPayerNum2 + FBlanks2 + FRecSeq + FBlanks3 + FCRLF)
		    = FFLUSH(fh)
		    = FCLOSE(fh)
		    WAIT CLEAR
		
		    IF TYPE('oProgress') = 'O'
		        oProgress.CLOSE()
		    ENDIF
		
		    IF tlByWell
		        THISFORM.oMessage.DISPLAY('Created ' + TRANSFORM(m.bcount) + ' Magnetic 1099 Records.')
		    ELSE
		        THISFORM.oMessage.DISPLAY('Created ' + TRANSFORM(m.bcount) + ' Magnetic 1099 Records.')
		    ENDIF
		
		    swclose('temp1099')
		
		CATCH TO loError
		    llReturn = .F.
		    DO errorlog WITH 'CreateFile', loError.LINENO, 'Create 1099 File', loError.ERRORNO, loError.MESSAGE
		    MESSAGEBOX('Unable to process the 1099s at this time. Check the System Log found under Other Reports for more information.' + m.creturn+m.creturn + ;
		        'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		RETURN llReturn
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
	ENDPROC

	PROCEDURE fileio		&& Low-level file I/O
		LPARA handle, bytes
		
		=FWRITE(handle,bytes)
		IF ferror() > 0
		   DO CASE
		      CASE ferror() = 4
		           m.msg = 'TOO MANY FILE OPEN (OUT OF HANDLES)'
		      CASE ferror() = 5
		           m.msg = 'FILE ACCESS DENIED'
		      CASE ferror() = 8
		           m.msg = 'OUT OF MEMORY'
		      CASE ferror() = 29
		           m.msg = 'DISK FULL (OUT OF SPACE)'
		      CASE ferror() = 31
		           m.msg = 'GENERAL FAILURE'
		      OTHERWISE     
		           m.msg = 'UNKNOWN DISK FAILURE' + STR(ferror(),3)
		   ENDCASE                            
		   WAIT WIND 'FILE WRITE ERROR: ' + m.msg
		ENDIF  
		
		RETURN 
		
	ENDPROC

	PROCEDURE getstatecodes
		LOCAL loIP AS 'wwftp'
		LOCAL lcLibrary, lcSourceFile, lcTargetFile, lcYear, llReturn, lnResult, loError
		
		llReturn = .T.
		
		TRY
		
		    lcSourceFile = 'statecodes.dbf'
		    lcTargetFile = m.goapp.cCommonFolder+'statecodes.dbf'
		    loUpdate = m.goApp.oUpdate
		    loUpdate.cSourceFile  = lcSourceFile
		    loUpdate.cTargetFile  = lcTargetFile
		    loUpdate.cDescription = '1099 State Codes'
		    loUpdate.cUnzipTo     = m.goapp.cCommonFolder
		    llReturn              = loUpdate.GetUpdate()
		
		CATCH TO loError
		    llReturn = .F.
		    DO errorlog WITH 'GetStateCodes', loError.LINENO, 'Create 1099 Magnetic File', loError.ERRORNO, loError.MESSAGE
		    MESSAGEBOX('Unable to process the 1099 file at this time. Check the System Log found under Other Reports for more information.' + m.creturn+m.creturn + ;
		          'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		RETURN llReturn
		
		
		
	ENDPROC

	PROCEDURE Init
		IF DODEFAULT()
		
		   swselect('tax1099')
		   SET ORDER to cyear
		   GO bott
		   
		   THISFORM.txtcYear.VALUE = cyear
		   thisform.currentyear = cYear
		
		   THISFORM.txtcTCC.VALUE = ' '
		   THISFORM.chkCorrect.VALUE = .F.
		   THISFORM.chklByWell.VALUE = .F.
		   
		   IF m.goapp.lCloudServer
		      thisform.cntgetfile1.edtpath.value = specialfolders('Personal')
		   ELSE
		      thisform.cntgetfile1.edtpath.value = specialfolders('CommonDocuments')
		   ENDIF       
		   
		    IF NOT m.goapp.oSecurity.HasPrivilege('Tax Ids')
		      MESSAGEBOX('You must have Tax IDs privilege to create the magnetic media 1099 file',16,'Need Tax IDs Privilege')
		      RETURN .f.
		   ENDIF 
		ENDIF
		
	ENDPROC

	PROCEDURE lookup
	ENDPROC

	PROCEDURE numfmt		&& Format Numbers
		*
		*  numfmt - format a number to specified length removing extra chars
		*
		LPARA m.num, m.dlen
		
		m.len = LEN(m.num)
		
		m.num = STRTRAN(m.num,'.','')
		
		FOR zx = 1 TO m.len
		    IF zx > m.len
		       EXIT
		    ENDIF   
		    IF !ISDIGIT(SUBSTR(m.num,zx,1))
		       IF zx > 1
		          m.num = SUBSTR(m.num,1,zx-1) + SUBSTR(m.num,zx+1,m.len-zx+1)
		          m.len = m.len - 1
		       ELSE
		          m.num = SUBSTR(m.num,zx+1,m.len-zx+1)
		          m.len = m.len - 1
		       ENDIF
		    ENDIF
		ENDFOR
		
		m.len1 = LEN(ALLTRIM(m.num))
		
		IF m.len1 = m.dlen
		   RETURN (ALLTRIM(m.num))
		ENDIF
		
		IF m.len1 > m.dlen
		   RETURN (SUBSTR(m.num,1,m.dlen))
		ENDIF
		
		m.num = ALLTRIM(m.num)
		
		m.num = PADL(m.num,m.dlen,'0')   
		
		RETURN (m.num)
		                   
	ENDPROC

	PROCEDURE chk1099Misc.Click
		IF this.Value
		   thisform.chk1099NEC.Value = .f.
		ENDIF 
	ENDPROC

	PROCEDURE chk1099NEC.Click
		IF this.Value
		   thisform.chk1099Misc.Value = .F.
		ENDIF 
	ENDPROC

	PROCEDURE chk1099NEC.When
		IF thisform.txtcyear.Value < '2020'
		   MESSAGEBOX('The 1099 NEC form cannot be processed for years before 2020!',64,thisform.Caption)
		   RETURN .f.
		ENDIF 
	ENDPROC

	PROCEDURE chk2Part1.Click
		IF this.Value
		   thisform.chk2Part2.Value = .f.
		ENDIF 
	ENDPROC

	PROCEDURE chk2Part2.Click
		IF this.Value
		   thisform.chk2Part1.Value = .f.
		ENDIF 
	ENDPROC

	PROCEDURE chkCorrect.Click
		IF this.Value = .t.
		   thisform.chk2Part1.Visible = .t.
		   thisform.chk2Part2.Visible = .t.
		   thisform.chk2part1.Value = .t.
		ELSE
		   thisform.chk2Part1.Visible = .f.
		   thisform.chk2Part2.Visible = .f.
		   thisform.chk2part1.Value = .f.
		   thisform.chk2part2.Value = .f.
		ENDIF 
	ENDPROC

	PROCEDURE chkSelected.Click
		LOCAL lnCount
		
		IF this.value
		   do form commonsource\ten99selected NAME oTen99Sel LINKED WITH thisform.txtcyear.value, .T.
		   RELEASE oTen99Sel
		   SELECT ten99sel
		   lnCount = RECCOUNT()
		   thisform.lblselected.Caption = TRANSFORM(lnCount) + ' Owners Selected'
		ELSE
		   thisform.lblselected.Caption = ''   
		ENDIF   
	ENDPROC

	PROCEDURE cmdCreate.Click
		DO CASE 
		   CASE thisform.chkCorrect.Value = .F.
		      thisform.CreateFile()
		   CASE thisform.chk2Part1.Value = .T.
		      thisform.CreateCorrection1()
		   CASE thisform.chk2Part2.Value = .T.
		      thisform.CreateCorrection2()
		   OTHERWISE
		      thisform.createfile()
		ENDCASE          
	ENDPROC

	PROCEDURE cmdExit.Click
		thisform.release()
	ENDPROC

	PROCEDURE Cntgetfile1.cmdPath.Click
		LOCAL llReturn, loError
		llReturn = .T.
		
		TRY
		    IF NOT DIRECTORY(THISFORM.cntgetfile1.edtpath.VALUE)
		        THISFORM.cntgetfile1.edtpath.VALUE = ''
		    ENDIF
		
		    LOCAL cPath
		    IF THIS.PARENT.lPathOnly
		
		        IF NOT FILE(m.goapp.cCommonFolder+'bin\vfp2c32.fll')
		            llReturn = GetVFPc32()
		        ENDIF
		
		        IF llReturn
		            SET LIBRARY TO (m.goapp.cCommonFolder + 'bin\vfp2c32.fll') ADDITIVE
		            INITVFP2C32(VFP2C_INIT_ALL)
		
		            LOCAL lcFolder
		
		            SHBROWSEFOLDER('Choose a Folder', BIF_NEWDIALOGSTYLE, @cPath)
		        ELSE
		            m.cPath = GETDIR(CURDIR(), 'Choose the location for the electronic file', 'Choose File Location', 64)
		        ENDIF
		    ELSE
		        m.cPath = GETFILE(THIS.PARENT.cExtensionList)
		    ENDIF
		    IF NOT EMPTY(m.cPath)
		        THIS.PARENT.SetValue(m.cPath)
		    ENDIF
		
		    THISFORM.cntgetfile1.edtpath.VALUE = ADDBS(ALLTRIM(THISFORM.cntgetfile1.edtpath.VALUE))
		
		CATCH TO loError
		    llReturn = .F.
		    DO errorlog WITH 'cmdPath.click', loError.LINENO, 'Ten99Mag', loError.ERRORNO, loError.MESSAGE
		    MESSAGEBOX('Unable to choose the file location at this time. Check the System Log found under Other Reports for more information.' + m.creturn+m.creturn + ;
		          'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		RETURN llReturn
		
		
		
		
		
		
	ENDPROC

ENDDEFINE
