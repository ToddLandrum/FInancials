*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="hggasimport.scx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="2" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Cursor1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor6" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor7" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor8" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor9" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor10" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor11" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor12" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor13" UniqueID="" Timestamp="" />

	AutoOpenTables = .F.
	DataSource = .NULL.
	Height = 516
	InitialSelectedAlias = "gasuse"
	Left = -2
	Name = "Dataenvironment"
	Top = 94
	Width = 792

	ADD OBJECT 'Cursor1' AS cursor WITH ;
		Alias = "gasown", ;
		BufferModeOverride = 5, ;
		CursorSource = "gasown", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 9, ;
		Name = "Cursor1", ;
		Top = 20, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor10' AS cursor WITH ;
		Alias = "coabal", ;
		BufferModeOverride = 5, ;
		CursorSource = "coabal", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 570, ;
		Name = "Cursor10", ;
		Top = 140, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor11' AS cursor WITH ;
		Alias = "gasuse1", ;
		CursorSource = "gasuse", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 187, ;
		Left = 10, ;
		Name = "Cursor11", ;
		Top = 260, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor12' AS cursor WITH ;
		Alias = "arpmtdet", ;
		CursorSource = "arpmtdet", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 170, ;
		Left = 150, ;
		Name = "Cursor12", ;
		Top = 260, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor13' AS cursor WITH ;
		Alias = "expsusp", ;
		BufferModeOverride = 5, ;
		CursorSource = "expsusp", ;
		Database = ..\newdbc\appdata.dbc, ;
		Height = 90, ;
		Left = 451, ;
		Name = "Cursor13", ;
		Top = 412, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor2' AS cursor WITH ;
		Alias = "investor", ;
		CursorSource = "investor", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 150, ;
		Name = "Cursor2", ;
		Top = 20, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor3' AS cursor WITH ;
		Alias = "gasuse", ;
		CursorSource = "gasuse", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 323, ;
		Left = 288, ;
		Name = "Cursor3", ;
		Top = 19, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor4' AS cursor WITH ;
		Alias = "gasopt", ;
		CursorSource = "gasopt", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 430, ;
		Name = "Cursor4", ;
		Top = 20, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor5' AS cursor WITH ;
		Alias = "gasinv", ;
		CursorSource = "gasinv", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 228, ;
		Left = 570, ;
		Name = "Cursor5", ;
		Top = 20, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor6' AS cursor WITH ;
		Alias = "aropt", ;
		CursorSource = "aropt", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor6", ;
		Top = 140, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor7' AS cursor WITH ;
		Alias = "terms", ;
		CursorSource = "terms", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 150, ;
		Name = "Cursor7", ;
		Top = 140, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor8' AS cursor WITH ;
		Alias = "glmaster", ;
		BufferModeOverride = 5, ;
		CursorSource = "glmaster", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 577, ;
		Name = "Cursor8", ;
		Top = 270, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor9' AS cursor WITH ;
		Alias = "glopt", ;
		CursorSource = "glopt", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 430, ;
		Name = "Cursor9", ;
		Top = 140, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

ENDDEFINE

DEFINE CLASS hgimport AS frmdatamanagerformcustom OF "..\custom\cforms.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="txtcOwnerName" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcDescription" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbltextcustom1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbltextcustom2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcOwnerID" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbltextcustom3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcCurrent" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbltextcustom4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtnMultiplier" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Linlinecustom1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbltextcustom5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtnUsed" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbltextcustom6" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcMeterNo" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbltextcustom7" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtnPrice" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbltextcustom8" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdLookOwner" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtnPriceAdj" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Linlinecustom2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Linlinecustom3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Linlinecustom4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtdInvDate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtdDate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbltextcustom9" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Linlinecustom5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Linlinecustom6" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtnDue" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbltextcustom10" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtnUsedPrior" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbltextcustom11" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbltextcustom12" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtnUsedCurrent" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Linlinecustom7" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Linlinecustom8" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtnUsedYTD" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbltextcustom13" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbltextcustom14" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtnYearlyAmt" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblDifference" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtnDifference" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbltextcustom15" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chklRollOver" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcLast" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Glmaint" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbltextcustom16" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtNpressure" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblNpressure" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtCcharge" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtNcharge" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblNcharge" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: buildimportfile		&& Parses the given Excel file and puts the data into a cursor that can be used by the import
		*m: buildinvoices
		*m: calcmcf
		*m: calculate
		*m: createexpentry
		*p: ddate
		*p: dinvdate
		*p: ledit		&& Will be .t. when the record is new or is otherwise being edited.
		*p: lfromclose
		*p: lnewrecord
		*p: ncounterlen
		*p: ninvcount
		*p: ntotalinv
		*p: ntotreadings
		*p: savedowner
		*a: laterms[1,0]
	*</DefinedPropArrayMethod>

	Caption = "Import Meter Readings"
	clistexpression = gasuse.ddate
	cnavworkarea = 
	cworkarea = 
	ddate = {}
	dinvdate = {}
	DoCreate = .T.
	Height = 518
	HelpContextID = 121
	lallownavigation = .F.
	ledit = .F.		&& Will be .t. when the record is new or is otherwise being edited.
	lexpliciteditmode = .F.
	lnewrecord = .F.
	lnonewask = .T.
	Name = "HGImport"
	ncounterlen = 0
	ninvcount = 0
	ntotalinv = 0
	ntotreadings = 0
	savedowner = XXXXX
	Visible = .F.
	Width = 418
	WindowState = 0
	_memberdata = <VFPData>
		<memberdata name="buildimportfile" display="BuildImportFile"/>
		<memberdata name="buildinvoices" display="BuildInvoices"/>
		<memberdata name="ntotalinv" display="nTotalInv"/>
		<memberdata name="ninvcount" display="nInvCount"/>
		<memberdata name="ntotreadings" display="nTotReadings"/>
		<memberdata name="createexpentry" display="CreateExpEntry"/>
		</VFPData>
	cmdatamanager.Name = "cmdatamanager"
	cmdatamanager.TabIndex = 1
	cmlookupmanager.Name = "cmlookupmanager"
	Mwresize1.lblHighLight.Name = "lblHighLight"
	Mwresize1.lblShading.Name = "lblShading"
	Mwresize1.Name = "Mwresize1"

	ADD OBJECT 'chklRollOver' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Rollover", ;
		Left = 210, ;
		Name = "chklRollOver", ;
		TabIndex = 17, ;
		Top = 146, ;
		Value = .F., ;
		Visible = .F.
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'cmdLookOwner' AS cmdcommandbuttoncustom WITH ;
		Caption = "Owner ID", ;
		Height = 20, ;
		Left = 54, ;
		Name = "cmdLookOwner", ;
		TabIndex = 2, ;
		TabStop = .F., ;
		Top = 8, ;
		Width = 60, ;
		ZOrderSet = 20
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'Glmaint' AS glmaint WITH ;
		Height = 12, ;
		Left = 0, ;
		Name = "Glmaint", ;
		Top = 304, ;
		Width = 24
		*< END OBJECT: ClassLib="..\custom\swgl.vcx" BaseClass="custom" />

	ADD OBJECT 'lblDifference' AS lbltextcustom WITH ;
		Caption = "Excess This Month", ;
		Left = 213, ;
		Name = "lblDifference", ;
		TabIndex = 24, ;
		Top = 248, ;
		Visible = .F.
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblNcharge' AS lblfieldlabelcustom WITH ;
		Caption = "+ Extra Charge", ;
		Height = 16, ;
		Left = 40, ;
		Name = "lblNcharge", ;
		TabIndex = 34, ;
		Top = 358, ;
		Width = 74
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblNpressure' AS lblfieldlabelcustom WITH ;
		Alignment = 0, ;
		Caption = "Pressure (PSI)", ;
		Height = 16, ;
		Left = 42, ;
		Name = "lblNpressure", ;
		TabIndex = 21, ;
		Top = 205, ;
		Width = 72
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbltextcustom1' AS lbltextcustom WITH ;
		Caption = "Description", ;
		Left = 58, ;
		Name = "Lbltextcustom1", ;
		TabIndex = 14, ;
		Top = 112
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbltextcustom10' AS lbltextcustom WITH ;
		Caption = "Prior Usage", ;
		Left = 61, ;
		Name = "Lbltextcustom10", ;
		TabIndex = 37, ;
		Top = 427
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbltextcustom11' AS lbltextcustom WITH ;
		Caption = "+", ;
		FontSize = 10, ;
		Left = 141, ;
		Name = "Lbltextcustom11", ;
		TabIndex = 43, ;
		Top = 449
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbltextcustom12' AS lbltextcustom WITH ;
		Caption = "Current Usage", ;
		Left = 166, ;
		Name = "Lbltextcustom12", ;
		TabIndex = 38, ;
		Top = 427
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbltextcustom13' AS lbltextcustom WITH ;
		Caption = "YTD Usage", ;
		Left = 300, ;
		Name = "Lbltextcustom13", ;
		TabIndex = 39, ;
		Top = 427
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbltextcustom14' AS lbltextcustom WITH ;
		Caption = "Yearly Allowance", ;
		Left = 246, ;
		Name = "Lbltextcustom14", ;
		TabIndex = 12, ;
		Top = 87
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbltextcustom15' AS lbltextcustom WITH ;
		Caption = "Reading Date", ;
		Left = 48, ;
		Name = "Lbltextcustom15", ;
		TabIndex = 6, ;
		Top = 37
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbltextcustom16' AS lbltextcustom WITH ;
		Caption = "Invoice Date", ;
		Left = 53, ;
		Name = "Lbltextcustom16", ;
		TabIndex = 8, ;
		Top = 62
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbltextcustom2' AS lbltextcustom WITH ;
		Caption = "- Reading Last Month", ;
		Left = 10, ;
		Name = "Lbltextcustom2", ;
		TabIndex = 19, ;
		Top = 176
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbltextcustom3' AS lbltextcustom WITH ;
		Caption = "Reading This Month", ;
		Left = 18, ;
		Name = "Lbltextcustom3", ;
		TabIndex = 16, ;
		Top = 145
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbltextcustom4' AS lbltextcustom WITH ;
		Caption = "x Multiplier", ;
		Left = 62, ;
		Name = "Lbltextcustom4", ;
		TabIndex = 23, ;
		Top = 234
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbltextcustom5' AS lbltextcustom WITH ;
		Caption = "MCF Used", ;
		Left = 63, ;
		Name = "Lbltextcustom5", ;
		TabIndex = 27, ;
		Top = 270
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbltextcustom6' AS lbltextcustom WITH ;
		Caption = "Meter No.", ;
		Left = 66, ;
		Name = "Lbltextcustom6", ;
		TabIndex = 11, ;
		Top = 87
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbltextcustom7' AS lbltextcustom WITH ;
		Caption = "x Price", ;
		Left = 79, ;
		Name = "Lbltextcustom7", ;
		TabIndex = 29, ;
		Top = 299
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbltextcustom8' AS lbltextcustom WITH ;
		Caption = "+ Price Adjust", ;
		Left = 45, ;
		Name = "Lbltextcustom8", ;
		TabIndex = 31, ;
		Top = 328
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbltextcustom9' AS lbltextcustom WITH ;
		Caption = "Current Charges", ;
		Left = 32, ;
		Name = "Lbltextcustom9", ;
		TabIndex = 36, ;
		Top = 394
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Linlinecustom1' AS linlinecustom WITH ;
		Height = 0, ;
		Left = 120, ;
		Name = "Linlinecustom1", ;
		Top = 257, ;
		Width = 81
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="line" />

	ADD OBJECT 'Linlinecustom2' AS linlinecustom WITH ;
		Height = 0, ;
		Left = 53, ;
		Name = "Linlinecustom2", ;
		Top = 275, ;
		Width = 5
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="line" />

	ADD OBJECT 'Linlinecustom3' AS linlinecustom WITH ;
		Height = 0, ;
		Left = 53, ;
		Name = "Linlinecustom3", ;
		Top = 278, ;
		Width = 5
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="line" />

	ADD OBJECT 'Linlinecustom4' AS linlinecustom WITH ;
		Height = 0, ;
		Left = 120, ;
		Name = "Linlinecustom4", ;
		Top = 383, ;
		Width = 81
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="line" />

	ADD OBJECT 'Linlinecustom5' AS linlinecustom WITH ;
		Height = 0, ;
		Left = 24, ;
		Name = "Linlinecustom5", ;
		Top = 402, ;
		Width = 5
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="line" />

	ADD OBJECT 'Linlinecustom6' AS linlinecustom WITH ;
		Height = 0, ;
		Left = 24, ;
		Name = "Linlinecustom6", ;
		Top = 400, ;
		Width = 5
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="line" />

	ADD OBJECT 'Linlinecustom7' AS linlinecustom WITH ;
		Height = 0, ;
		Left = 263, ;
		Name = "Linlinecustom7", ;
		Top = 457, ;
		Width = 5
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="line" />

	ADD OBJECT 'Linlinecustom8' AS linlinecustom WITH ;
		Height = 0, ;
		Left = 263, ;
		Name = "Linlinecustom8", ;
		Top = 460, ;
		Width = 5
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="line" />

	ADD OBJECT 'txtCcharge' AS txttextboxcustom WITH ;
		ControlSource = "gasuse.ccharge", ;
		Height = 20, ;
		Left = 202, ;
		MaxLength = 30, ;
		Name = "txtCcharge", ;
		TabIndex = 33, ;
		Top = 356, ;
		Width = 209
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcCurrent' AS txttextboxcustom WITH ;
		Alignment = 1, ;
		ControlSource = "gasuse.ccurrent", ;
		Height = 20, ;
		InputMask = "9999999999", ;
		Left = 120, ;
		lrequired = .T., ;
		MaxLength = 10, ;
		Name = "txtcCurrent", ;
		ReadOnly = .F., ;
		TabIndex = 15, ;
		Top = 143, ;
		Width = 78
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcDescription' AS txttextboxcustom WITH ;
		ControlSource = "", ;
		Height = 20, ;
		lautoremember = .F., ;
		Left = 120, ;
		lrequired = .T., ;
		MaxLength = 25, ;
		Name = "txtcDescription", ;
		ReadOnly = .T., ;
		TabIndex = 13, ;
		Top = 110, ;
		Width = 274
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcLast' AS txttextboxcustom WITH ;
		Alignment = 1, ;
		ControlSource = "gasuse.clast", ;
		Height = 20, ;
		InputMask = "9999999999", ;
		Left = 120, ;
		lrequired = .T., ;
		MaxLength = 10, ;
		Name = "txtcLast", ;
		ReadOnly = .F., ;
		TabIndex = 18, ;
		Top = 174, ;
		Width = 78
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcMeterNo' AS txttextboxcustom WITH ;
		ControlSource = "gasuse.cmeterno", ;
		Height = 20, ;
		Left = 120, ;
		MaxLength = 15, ;
		Name = "txtcMeterNo", ;
		ReadOnly = .T., ;
		TabIndex = 9, ;
		Top = 85, ;
		Width = 106
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcOwnerID' AS txtquickfill WITH ;
		clistexpression = gasown.cownerid, ;
		clistworkarea = gasown, ;
		ControlSource = "gasuse.cownerid", ;
		Height = 20, ;
		InputMask = "XXXXXXXXXX", ;
		lautoremember = .F., ;
		Left = 120, ;
		lrequired = .T., ;
		MaxLength = 10, ;
		Name = "txtcOwnerID", ;
		TabIndex = 3, ;
		Top = 8, ;
		Width = 79, ;
		ZOrderSet = 7
		*< END OBJECT: ClassLib="..\custom\cgadget.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcOwnerName' AS txttextboxcustom WITH ;
		BackColor = 212,208,200, ;
		Height = 20, ;
		lautoremember = .F., ;
		Left = 204, ;
		Name = "txtcOwnerName", ;
		TabIndex = 4, ;
		Top = 8, ;
		Width = 192, ;
		ZOrderSet = 89
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtdDate' AS dpk WITH ;
		ControlSource = "gasuse.ddate", ;
		Height = 20, ;
		Left = 120, ;
		Name = "txtdDate", ;
		TabIndex = 5, ;
		Top = 36, ;
		Width = 69, ;
		ZOrderSet = 25
		*< END OBJECT: ClassLib="..\custom\swdate.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtdInvDate' AS dpk WITH ;
		ControlSource = "gasuse.dinvdate", ;
		Height = 20, ;
		Left = 120, ;
		Name = "txtdInvDate", ;
		TabIndex = 7, ;
		Top = 60, ;
		Width = 69, ;
		ZOrderSet = 25
		*< END OBJECT: ClassLib="..\custom\swdate.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtNcharge' AS txttextboxcustom WITH ;
		ControlSource = "gasuse.ncharge", ;
		FontSize = 8, ;
		Height = 20, ;
		Left = 120, ;
		Name = "txtNcharge", ;
		TabIndex = 32, ;
		Top = 356, ;
		Width = 78
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtnDifference' AS txttextboxcustom WITH ;
		ControlSource = "gasuse.nbillable", ;
		FontBold = .T., ;
		ForeColor = 255,0,0, ;
		Height = 20, ;
		Left = 219, ;
		Name = "txtnDifference", ;
		ReadOnly = .T., ;
		TabIndex = 26, ;
		Top = 268, ;
		Visible = .F., ;
		Width = 80
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtnDue' AS txttextboxcustom WITH ;
		ControlSource = "gasuse.ndue", ;
		Height = 20, ;
		InputMask = "$$,$$$.99", ;
		Left = 120, ;
		Name = "txtnDue", ;
		ReadOnly = .T., ;
		TabIndex = 35, ;
		Top = 392, ;
		Width = 78
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtnMultiplier' AS txttextboxcustom WITH ;
		ControlSource = "gasuse.nmultiplier", ;
		Height = 20, ;
		Left = 120, ;
		Name = "txtnMultiplier", ;
		TabIndex = 22, ;
		Top = 232, ;
		Width = 78
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtNpressure' AS txttextboxcustom WITH ;
		ControlSource = "gasuse.npressure", ;
		FontSize = 8, ;
		Height = 20, ;
		InputMask = "99999.9999", ;
		Left = 120, ;
		Name = "txtNpressure", ;
		TabIndex = 20, ;
		Top = 203, ;
		Width = 76
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtnPrice' AS txttextboxcustom WITH ;
		ControlSource = "gasuse.nprice", ;
		Height = 20, ;
		Left = 120, ;
		Name = "txtnPrice", ;
		TabIndex = 28, ;
		Top = 297, ;
		Width = 78
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtnPriceAdj' AS txttextboxcustom WITH ;
		ControlSource = "gasuse.npriceadj", ;
		Height = 20, ;
		Left = 120, ;
		Name = "txtnPriceAdj", ;
		TabIndex = 30, ;
		Top = 326, ;
		Width = 78
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtnUsed' AS txttextboxcustom WITH ;
		ControlSource = "gasuse.nused", ;
		Height = 20, ;
		Left = 120, ;
		Name = "txtnUsed", ;
		ReadOnly = .T., ;
		TabIndex = 25, ;
		Top = 268, ;
		Width = 78
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtnUsedCurrent' AS txttextboxcustom WITH ;
		Alignment = 3, ;
		Left = 152, ;
		Name = "txtnUsedCurrent", ;
		ReadOnly = .T., ;
		TabIndex = 41, ;
		Top = 448, ;
		Value = 0
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtnUsedPrior' AS txttextboxcustom WITH ;
		Alignment = 3, ;
		Left = 39, ;
		Name = "txtnUsedPrior", ;
		ReadOnly = .T., ;
		TabIndex = 40, ;
		Top = 448, ;
		Value = 0
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtnUsedYTD' AS txttextboxcustom WITH ;
		Alignment = 3, ;
		Left = 278, ;
		Name = "txtnUsedYTD", ;
		ReadOnly = .T., ;
		TabIndex = 42, ;
		Top = 448, ;
		Value = 0
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtnYearlyAmt' AS txttextboxcustom WITH ;
		Alignment = 3, ;
		Height = 20, ;
		Left = 340, ;
		Name = "txtnYearlyAmt", ;
		ReadOnly = .T., ;
		TabIndex = 10, ;
		Top = 85, ;
		Value = 0, ;
		Width = 56
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />
	
	PROCEDURE Activate
		thisform.Release()
		
	ENDPROC

	PROCEDURE buildimportfile		&& Parses the given Excel file and puts the data into a cursor that can be used by the import
		LPARAMETERS tcExcelFileName
		
		llReturn = .T.
		
		TRY
		   STORE .F. TO llCatchAllID, llCatchAllLO, llCatchAllLC, llCatchAllTC
		
		   LOCAL oexcel AS "excel.application"
		
		   SET AUTOINCERROR OFF
		
		   oexcel = CREATEOBJECT("excel.application")
		
		   lcdatapath = ALLT(m.goapp.cdatafilepath)
		   IF EMPTY(lcdatapath)
		      lcdatapath = 'Data\'
		   ENDIF
		
		   CREATE CURSOR baddata ;
		      (ccode   c(10), ;
		      ctype   c(20), ;
		      irow    i, ;
		      csheet  c(20))
		
		   m.timpdate = DATETIME()
		
		   oexcel.APPLICATION.workbooks.OPEN(tcExcelFileName)
		
		
		   CREATE CURSOR importfile ;
		      (cownerid        c(10), ;
		      cOwnName        c(60), ;
		      cAddress        c(60), ;
		      cphone          c(15), ;
		      cmeterno        c(15), ;
		      crouteno        c(15), ;
		      cgroup          c(2), ;
		      nsequence       i, ;
		      clast           c(10), ;
		      npressure       N(5), ;
		      dlast           D, ;
		      nReading        c(10), ;
		      nPrice          N(12,2), ;
		      dReading        D, ;
		      dInvDate        D)
		   INDEX ON cownerid TAG cownerid
		   lnBad = 0
		   SELECT importfile
		   SCATTER MEMVAR BLANK
		
		   FOR lnX = 1 TO 5000
		      lcOwnerCell    = 'A' + ALLTRIM(STR(lnX))
		      lcNameCell     = 'B' + ALLTRIM(STR(lnX))
		      lcAddrCell     = 'C' + TRANSFORM(lnX)
		      lcPhoneCell    = 'D' + TRANSFORM(lnX)
		      lcMeterCell    = 'E' + TRANSFORM(lnX)
		      lcRouteCell    = 'F' + TRANSFORM(lnX)
		      lcGroupCell    = 'G' + TRANSFORM(lnX)
		      lcSeqCell      = 'H' + TRANSFORM(lnX)
		      lcLastCell     = 'I' + TRANSFORM(lnX)
		      lcPressureCell = 'J' + TRANSFORM(lnX)
		      lcLastDateCell = 'K' + TRANSFORM(lnX)
		      lcReadingCell  = 'L' + TRANSFORM(lnX)
		      lcDateReadCell = 'M' + TRANSFORM(lnX)
		      lcInvDateCell  = 'N' + TRANSFORM(lnX)
		      lcPriceCell    = 'O' + TRANSFORM(lnX)
		      m.irow      = lnX
		      WAIT WIND NOWAIT 'Processing spreadsheet row: ' +TRANSFORM(m.irow) + ' of ' + ALLTRIM(tcExcelFileName)
		      m.cownerid  = oexcel.RANGE(lcOwnerCell).VALUE
		
		      IF NOT ISNULL(m.cownerid) AND TYPE('m.cOwnerID') = 'C' AND NOT EMPTY(m.cownerid)
		         m.cmeterno = TRANSFORM(oexcel.RANGE(lcMeterCell).VALUE)
		
		         IF NOT ISNULL(m.cmeterno) AND NOT EMPTY(m.cmeterno)
		            swselect('investor')
		            LOCATE FOR cownerid = ALLTRIM(m.cownerid)
		            IF FOUND()
		
		               lnBad = 0
		
		               m.cOwnName  = cOwnName
		               m.cAddress  = TRANSFORM(oexcel.RANGE(lcAddrCell).VALUE)
		               m.cphone    = TRANSFORM(oexcel.RANGE(lcPhoneCell).VALUE)
		               m.crouteno  = TRANSFORM(oexcel.RANGE(lcRouteCell).VALUE)
		               m.cgroup    = TRANSFORM(oexcel.RANGE(lcRouteCell).VALUE)
		               m.nsequence = CAST(NVL(oexcel.RANGE(lcSeqCell).VALUE,0) AS i)
		               m.clast     = TRANSFORM(oexcel.RANGE(lcLastCell).VALUE)
		               m.npressure = CAST(NVL(oexcel.RANGE(lcPressureCell).VALUE,0) AS i)
		               m.dlast     = CAST(NVL(oexcel.RANGE(lcLastDateCell).VALUE,{}) AS D)
		               m.nReading  = TRANSFORM(oexcel.RANGE(lcReadingCell).VALUE)
		               m.dReading  = CAST(NVL(oexcel.RANGE(lcDateReadCell).VALUE,{}) AS D)
		               m.dInvDate  = CAST(NVL(oexcel.RANGE(lcInvDateCell).VALUE,{}) AS D)
		               m.nPrice    = CAST(NVL(oexcel.RANGE(lcPriceCell).VALUE,0) AS N(12,2))
		
		               IF ISNULL(m.nReading) OR m.nReading == '0' OR EMPTY(m.nReading)
		                  LOOP
		               ENDIF
		               IF ISNULL(m.dReading) OR (VARTYPE(m.dReading) # 'D' AND VARTYPE(m.dReading) # 'T')
		                  LOOP
		               ENDIF
		               IF ISNULL(m.dInvDate) OR (VARTYPE(m.dInvDate) # 'D' AND VARTYPE(m.dInvDate) # 'T')
		                  LOOP
		               ENDIF
		               IF ISNULL(m.npressure)
		                  m.npressure = 0
		               ENDIF
		               IF ISNULL(m.nsequence)
		                  m.nsequence = 1
		               ENDIF
		               IF ISNULL(m.cgroup)
		                  m.cgroup = '00'
		               ENDIF
		               IF ISNULL(m.nPrice)
		                  m.nPrice = 0
		               ENDIF
		               IF ISNULL(m.clast)
		                  m.clast = '000000'
		               ENDIF
		               IF ISNULL(m.dlast)
		                  m.dlast = {}
		               ENDIF
		               IF ISNULL(m.npressure)
		                  m.npressure = 0
		               ENDIF
		               IF ISNULL(m.crouteno)
		                  m.crouteno = ''
		               ENDIF
		               INSERT INTO importfile FROM MEMVAR
		               THISFORM.nTotReadings = THISFORM.nTotReadings + 1
		            ELSE
		               lnBad = lnBad + 1
		            ENDIF
		         ELSE
		            lnBad = lnBad + 1
		         ENDIF
		      ELSE
		         lnBad = lnBad + 1
		      ENDIF
		      IF lnBad > 10
		         EXIT
		      ENDIF
		   ENDFOR
		
		
		   WAIT WIND NOWAIT 'Closing Excel Spreadsheet...'
		
		   oexcel.QUIT()
		   RELEASE oexcel
		
		   SELE baddata
		   IF RECC() <> 0
		      *        REPORT FORM T:\CUSTOMCODE\revjibrpt.frx TO PRINTER PREVIEW NOCONSOLE
		   ENDIF
		
		   WAIT CLEAR
		
		CATCH TO loError
		   llReturn = .F.
		   DO errorlog WITH 'ImportExcel', loError.LINENO, 'Import Revenue', loError.ERRORNO, loError.MESSAGE, '', loError
		   MESSAGEBOX('Unable to process the import at this time. Check the System Log found under Reports for more information.' + CHR(10) + CHR(10) + ;
		      'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		RETURN llReturn
		
		
		
		
		
		
		
	ENDPROC

	PROCEDURE buildinvoices
		LOCAL lPrinted, lcCurrent, lcLast, lcMeterNo, ldDate, ldStartDate, llRollOver, lnCount, lnCounterLen
		LOCAL lnDifference, lnDiscIn, lnDiscPct, lnDue, lnExtra, lnMCFUsed, lnMax, lnMaxCounter
		LOCAL lnMultiplier, lnNetDueIn, lnPressure, lnPrice, lnPriceAdj, lnUsedYTD, lnYearlyAmount
		*:Global cCurrent, cInvNum, cInvToken, ccharge, cidgasinv, cidterm, clast, cownname, dDiscDate
		*:Global dDueDate, ddate, nBalance, nBillable, nDiscTot, nPmts, nTotal, nUsed, ncharge, ndue
		lnMax        = RECCOUNT('importfile')
		lnMaxCounter = '1'
		lnCount      = 1
		
		SELECT gasuse
		SCATTER MEMVAR BLANK
		
		SELECT importfile
		SCAN
		   SCATTER MEMVAR
		
		   LOCAL llFound, lcMonth, lcYear
		
		   lcYear = ALLTRIM(STR(YEAR(DATE())))
		   SELECT gasopt
		   GO TOP
		   IF NOT EMPTY(gasopt.CMONTH)  &&  Determine what the first month to report on should be, based on the statement start month in gas options
		      IF gasopt.CMONTH # '01'
		         lcMonth = PADL(ALLT(STR((VAL(gasopt.CMONTH) - 1) + MONTH(DATE()))), 2, '0')
		         IF lcMonth > '12'
		            lcMonth = PADL(ALLT(STR(VAL(lcMonth) - 12)), 2, '0')
		            IF lcMonth < gasopt.CMONTH
		               lcYear = ALLTRIM(STR(VAL(lcYear) - 1))
		            ENDIF
		         ENDIF
		      ELSE
		         lcMonth = '01'
		      ENDIF
		   ELSE
		      lcMonth = '01'
		      SELECT gasopt
		      REPLACE gasopt.CMONTH WITH '01'  &&  If blank, fill it in with the default
		      = TABLEUPDATE()
		   ENDIF
		
		
		   SELECT investor
		   SET ORDER TO cownerid
		   IF SEEK(m.cownerid)
		      m.cownname = investor.cownname
		   ELSE
		      m.cownname = 'Unknown'
		   ENDIF
		
		   SELECT gasown
		   LOCATE FOR UPPER(cownerid) = UPPER(m.cownerid) ;
		      AND UPPER(cmeterno) = UPPER(m.cmeterno)
		   IF FOUND()
		      SCATTER MEMVAR
		
		      lnCounterLen = gasown.nCounterLen
		
		      WAIT WINDOW NOWAIT 'Processing reading for: ' + ALLTRIM(m.cownname)
		
		      lcMonth = gasopt.CMONTH  &&  First month of year, so we can calculate YTD usage
		      ldDate  = m.dReading
		      lcYear  = ALLTRIM(STR(YEAR(ldDate)))
		
		      IF lcMonth = '01'  &&  Calendar year basis, so the starting date will just be the first day of the year the reading is for
		         ldStartDate = CTOD('01/01/' + lcYear)
		      ELSE
		         IF ldDate < CTOD(lcMonth + '/01/' + lcYear)  &&  If the reading date is less than the first day of the first month, we need to wrap back to the last year to get our numbers
		            ldStartDate = GOMONTH(CTOD(lcMonth + '/01/' + lcYear), -12)  &&  A year earlier
		         ELSE
		            ldStartDate = CTOD(lcMonth + '/01/' + lcYear)
		         ENDIF
		      ENDIF
		
		      SELECT gasuse1
		      SUM(nUsed) FOR BETWEEN(ddate, ldStartDate, ldDate) AND cmeterno == m.cmeterno AND ;
		         RECNO('gasuse1') # RECNO('gasuse') TO lnUsedPrior
		
		      lnYearlyAmount = gasown.nYearlyAmt
		      lcMeterNo      = gasown.cmeterno
		      IF gasown.nMultiplier = 0
		         lnMultiplier = 1
		         SELECT gasown
		         REPLACE nMultiplier WITH 1
		      ELSE
		         lnMultiplier   = gasown.nMultiplier
		      ENDIF
		      lnPriceAdj     = gasown.nPriceAdj
		      lnPressure     = gasown.nPressure
		      
		      SELECT gasuse1
		      SET ORDER to LASTUSE   && CMETERNO+COWNERID
		      LOCATE FOR cmeterno = m.cmeterno AND cownerid = m.cownerid ;
		             AND dinvdate # m.dinvdate
		      IF FOUND()
		         lcLast         = gasuse1.ccurrent
		      ELSE
		         lcLast      = gasown.clast
		      ENDIF 
		      lnCounterLen   = gasown.nCounterLen
		      lcCurrent      = m.nReading
		      lnExtra        = gasopt.ncharge
		      lnPrice        = m.nPrice
		
		      llRollOver     = VAL(m.nReading) < VAL(lcLast)
		      thisform.chklRollOver.Set('value',llRollOver)
		
		      IF NOT gasopt.lActual
		         IF VAL(lcCurrent) # 0
		            IF llRollOver
		               IF lnCounterLen > 0 AND lnCounterLen >= LEN(ALLT(lcCurrent))
		                  lnMaxCounter = VAL(PADR(lnMaxCounter, lnCounterLen + 1, '0'))
		               ELSE
		                  lnMaxCounter = VAL(PADR(lnMaxCounter, LEN(ALLTRIM(lcLast)) + 1, '0'))
		               ENDIF
		               lnMCFUsed = ROUND(((lnMaxCounter - VAL(lcLast) + VAL(lcCurrent)) / 1000) * lnMultiplier, 2)
		            ELSE
		               lnMCFUsed = ROUND(((VAL(lcCurrent) - VAL(lcLast)) / 1000) * lnMultiplier, 2)
		            ENDIF
		         ELSE
		            lnMCFUsed = ROUND(((VAL(lcCurrent) - VAL(lcLast))) * lnMultiplier, 2)
		         ENDIF
		      ELSE
		         lcCurrent = TRANSFORM(ROUND(VAL(lcCurrent),2))
		         IF llRollOver
		            lnCounterLen = LEN(TRANSFORM(INT(VAL(lcLast))))
		            lcRollOver   = PADR('1',lnCounterLen+1,'0')
		            lcNewCurrent    = TRANSFORM(VAL(lcCurrent) + VAL(lcRollOver))
		            lnMCFUsed = ROUND(((VAL(lcNewCurrent) - VAL(lcLast))) * lnMultiplier, 2)
		         ELSE
		            lnMCFUsed = ROUND(((VAL(lcCurrent) - VAL(lcLast))) * lnMultiplier, 2)
		         ENDIF
		      ENDIF
		
		      lnUsedYTD      = lnUsedPrior + lnMCFUsed
		
		      IF lnUsedYTD > lnYearlyAmount  &&  If they're over their limit
		
		         IF lnUsedPrior < lnYearlyAmount  &&  If this is the reading that puts them over the limit
		            lnDifference = lnUsedYTD - lnYearlyAmount
		            lnDue = ROUND((lnUsedYTD - lnYearlyAmount) * (lnPrice), 2) + ROUND((lnUsedYTD - lnYearlyAmount) * (lnPriceAdj), 2)
		         ELSE  &&  They're already over the limit before this reading
		            lnDifference = lnMCFUsed
		            lnDue = ROUND(lnMCFUsed * (lnPrice), 2) + ROUND(lnMCFUsed * (lnPriceAdj), 2)
		         ENDIF
		         lnDue = lnDue + lnExtra
		      ELSE
		         lnDue        = lnExtra
		         lnDifference = 0
		      ENDIF
		
		      m.ddate     = m.dReading
		      m.clast     = lcLast
		      m.cCurrent  = lcCurrent
		      m.nUsed     = lnMCFUsed
		      m.ndue      = lnDue
		      m.nBillable = lnDifference
		      m.ncharge   = lnExtra
		      m.ccharge   = gasopt.ccharge
		
		      m.cidgasinv = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Batch')
		      SELECT gasinv
		      SET ORDER TO cidgasinv
		      SET DELETED OFF
		      DO WHILE INDEXSEEK(m.cidgasinv)
		         m.cidgasinv = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Batch')
		      ENDDO
		      SET DELETED ON
		
		      m.cInvToken = m.cidgasinv
		      m.nBalance  = m.ndue
		      m.nTotal    = m.ndue
		      m.lPrinted  = .F.
		      m.nPmts     = 0
		      m.cidterm   = gasopt.cidterm
		      IF NOT EMPTY(gasopt.cidterm)  &&  If terms are specified, calculate the due and discount dates
		         SELECT terms
		         SET ORDER TO cidterm
		         IF SEEK(gasopt.cidterm)
		            lnNetDueIn = nNetDueIn
		            lnDiscIn   = nDiscIn
		            lnDiscPct  = nDiscPct
		         ELSE
		            *  Terms have not been selected for this invoice so assume
		            *  COD.
		            STORE 0 TO lnNetDueIn, lnDiscIn, lnDiscPct
		         ENDIF
		         *
		         *  Calculate and set the values of the due date and
		         *  discount date fields
		         *
		         m.dDueDate  = m.dInvDate + lnNetDueIn
		         m.dDiscDate = m.dInvDate + lnDiscIn
		         m.nDiscTot  = m.nTotal * (lnDiscPct / 100)
		      ELSE
		         m.dDiscDate = m.dInvDate
		         m.dDueDate  = m.dInvDate
		         m.nDiscTot  = 0
		      ENDIF
		
		      IF m.ndue > 0  &&  Only generate invoice numbers if they owe money
		         m.cInvNum = ALLTRIM(STR(VAL(THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Invoice Number'))))
		         SELECT aropt
		         REPLACE aropt.cInvNum WITH STR(VAL(m.cInvNum) + 1)
		      ELSE
		         m.cInvNum = ''
		      ENDIF
		
		      INSERT INTO gasuse FROM MEMVAR
		
		      IF m.ndue # 0
		         THISFORM.nInvCount = THIS.nInvCount + 1
		         THISFORM.nTotalInv = THIS.nTotalInv + m.ndue
		      ENDIF
		
		      INSERT INTO gasinv FROM MEMVAR
		
		      IF m.ndue # 0 AND m.goapp.lAMVersion  &&  If an invoice is to be created, set up the g/l info - ONLY IF NOT DISBMGR
		         *  A/R entry
		         THISFORM.glmaint.cSource    = 'AR'
		         THISFORM.glmaint.cBatch     = m.cidgasinv
		         THISFORM.glmaint.dGLDate    = m.dInvDate
		         THISFORM.glmaint.cReference = 'Inv: ' + ALLTRIM(m.cInvNum)
		         THISFORM.glmaint.cDesc      = 'House Gas Invoice for owner: ' + ALLTRIM(m.cownerid)
		         THISFORM.glmaint.cAcctNo    = gasopt.cArAcct
		         THISFORM.glmaint.cId        = m.cownerid
		         THISFORM.glmaint.nAmount    = m.ndue
		         THISFORM.glmaint.mNotes     = ''
		         THISFORM.glmaint.cUnitNo    = m.cmeterno
		         THISFORM.glmaint.cDeptNo    = ''
		
		         THISFORM.glmaint.updatebatch()
		
		         *  A/R Sales Entry
		         THISFORM.glmaint.cAcctNo = gasopt.cSalesAcct
		         THISFORM.glmaint.nAmount = m.ndue * -1
		
		         THISFORM.glmaint.updatebatch()
		
		      ENDIF
		
		      SELECT gasown
		      LOCATE FOR cmeterno = gasuse.cmeterno
		      IF FOUND()
		         REPLACE clast WITH gasuse.cCurrent, nUsed WITH lnMCFUsed
		         IF gasown.lNet AND m.ndue # 0
		            * Create a one-man item for the charge
		            THISFORM.CreateExpEntry(m.cownerid, gasown.cWellID, m.ndue, m.cmeterno, m.dInvDate, m.cInvToken)
		         ENDIF
		      ENDIF
		   ENDIF
		   lnCount = lnCount + 1
		ENDSCAN
		
		TABLEUPDATE(.T., .T., 'Gasuse')
		TABLEUPDATE(.T., .T., 'Gasinv')
		TABLEUPDATE(.T., .T., 'Gasown')
		TABLEUPDATE(.T., .T., 'Gasopt')
		TABLEUPDATE(.T., .T., 'Glmaster')
		TABLEUPDATE(.T., .T., 'Expsusp')
		
		
		
		
		
		
		
		
		
		
	ENDPROC

	PROCEDURE calcmcf
	ENDPROC

	PROCEDURE calculate
	ENDPROC

	PROCEDURE createexpentry
		LPARAMETERS tcOwnerid, tcWellID, tnDue, tcMeterNo, tdDate, tcBatch
		
		LOCAL lcBatch, lcYear, lcPeriod, m.cOwnerID, llCloseRun, lcWellStat
		LOCAL lAPTran, lAllocated, lClosed, lFixed, lOneMan, lcWellID1, lcWellID2, llAllocexp, llReturn
		LOCAL loError
		*:Global cBatch, cCateg, cMemo, cPaidByCk, cPayee, cPeriod, cPrdPaid, cRunYearJIB, cRunYearRev
		*:Global cWellID, cYear, cidexpe, cidexph, cidexps, crefid, cvendorid, dExpDate, dPostDate, nAmount
		*:Global nRunNoJIB, nRunNoRev, nSaltWater
		
		llReturn = .T.
		llSendToAllocate = .T.
		
		TRY
		   *********************************************************************
		   *  Adds the expense entries to the disbursement manager EXPSUSP
		   *  table
		   *********************************************************************
		   llSendToAllocate         = .T.
		
		   lcBatch = tcBatch
		
		   swselect('gasopt')
		   GO TOP
		   m.cVendorID   = gasopt.cVendorID
		   m.cCatCode    = gasopt.cCatCode
		
		   swselect('vendor')
		   SET ORDER TO cVendorID
		   IF SEEK(m.cVendorID)
		      m.cPayee = cvendname
		   ELSE
		      m.cPayee = m.goapp.cCompanyName
		   ENDIF
		   IF NOT EMPTY(m.cCatCode)
		      swselect('expcat')
		      LOCATE FOR cCatCode = m.cCatCode
		      IF FOUND()
		         m.ccateg = ccateg
		         m.cexpclass = '0'
		      ELSE
		         m.ccateg = 'House Gas Pmt'
		         m.cexpclass = '0'
		      ENDIF
		   ELSE
		      swselect('expcat')
		      LOCATE FOR cCatCode = 'HGAS'
		      IF NOT FOUND()
		         m.cCatCode = 'HGAS'
		         m.ccateg   = 'House Gas Pmt'
		         m.cdescrip = 'House Gas Pmt'
		         m.cexpclass = '0'
		         INSERT INTO expcat FROM MEMVAR
		      ENDIF
		      m.cCatCode = 'HGAS'
		      m.ccateg   = 'House Gas Pmt'
		      m.cexpclass = '0'
		   ENDIF
		   m.dExpDate    = tdDate
		   lcYear        = THISFORM.glmaint.getperiod(m.dExpDate, .T.)
		   lcPeriod      = THISFORM.glmaint.getperiod(m.dExpDate, .F.)
		   m.crefid      = ''
		   m.lAPTran     = .T.
		   m.cBatch      = lcBatch
		   m.dPostDate   = tdDate
		   m.cMemo       = ''
		   m.cPaidByCk   = ''
		   m.cPrdPaid    = ''
		   m.lFixed      = .F.
		   m.lClosed     = .F.
		   m.lAllocated  = .F.
		   m.nRunNoRev   = 0
		   m.nRunNoJIB   = 0
		   m.cRunYearRev = ''
		   m.cRunYearJIB = ''
		   m.cWellID     = tcWellID
		   m.cOwnerID    = tcOwnerid
		   m.nSaltWater  = 0
		   m.cMemo      = 'House Gas Usage Owed: ' + DTOC(tdDate)
		   m.nAmount = tnDue
		
		   m.cYear   = lcYear
		   m.cPeriod = lcPeriod
		
		   IF NOT EMPTY(m.cOwnerID)
		      m.lOneMan = .T.
		   ELSE
		      m.lOneMan = .F.
		   ENDIF
		
		   m.cidexps    = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Expense')
		   SET DELETED OFF
		   swselect('expsusp')
		   SET ORDER TO cidexps
		   DO WHILE SEEK(m.cidexps)
		      m.cidexps    = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Expense')
		   ENDDO
		   SET DELETED ON
		   INSERT INTO expsusp FROM MEMVAR
		CATCH TO loError
		   llReturn = .F.
		   DO errorlog WITH 'CreateExpEntry', loError.LINENO, 'Gas Meter Usage', loError.ERRORNO, loError.MESSAGE, '', loError
		   MESSAGEBOX('Unable to process the meter entry at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		      'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		RETURN llReturn
		
		
	ENDPROC

	PROCEDURE Init
		LOCAL llUpdate
		
		llUpdate         = .F.
		llReturn         = .T.
		THISFORM.Left = -1000
		TRY
		
		    lcFile = GETFILE('Microsoft Excel:xlsx,xls,csv', 'Where is the import file?', 'Choose', 0, 'File To Import')
		
		    IF EMPTY(lcFile)
		        llReturn = .F.
		        EXIT
		    ENDIF
		
		*  Get rid of invalid entries
		    WAIT WINDOW NOWAIT 'Preparing to import. Please wait.'
		
		    SELECT gasuse
		    SCAN FOR EMPTY(dDate) OR EMPTY(cMeterNo)
		        SELECT gasinv
		        LOCATE FOR cidgasinv = gasuse.cInvToken
		        IF FOUND()
		            DELETE NEXT 1
		            llUpdate = .T.
		        ENDIF
		        SELECT gasuse
		        DELETE NEXT 1
		        llUpdate = .T.
		    ENDSCAN
		
			SELECT  cidgasinv ;
				FROM gasinv ;
				WHERE cidgasinv NOT IN(SELECT  cInvToken ;
										   FROM gasuse)  ;
					AND UPPER(LEFT(cinvnum, 2)) <> 'CR'  ;
				INTO CURSOR gastemp
		
		    IF _TALLY > 0
		        SELECT gastemp
		        SET DELETED OFF
		        SCAN
		            lcidgasinv = gastemp.cidgasinv
		            IF m.goapp.lAMVersion
		                SELECT gasuse
		                SCAN FOR cInvToken = lcidgasinv AND DELETED()
		                    SELECT glmaster
		                    SCAN FOR cBatch = gasuse.cInvToken
		                        DELETE NEXT 1
		                    ENDSCAN
		                ENDSCAN
		            ENDIF
		            SELECT gasinv
		            LOCATE FOR cidgasinv = lcidgasinv
		            IF FOUND()
		                DELETE NEXT 1
		            ENDIF
		        ENDSCAN
		        SET DELETED ON
		    ENDIF
		
		    SELECT gasuse
		    TABLEUPDATE(.T.)
		    SELECT gasinv
		    TABLEUPDATE(.T.)
		    SELECT glmaster
		    TABLEUPDATE(.T.)
		
		    WAIT CLEAR
		
		    SET DELETED ON
		
		    DODEFAULT()
		
		    IF NOT gasopt.lShowPSI  &&  If the option to show PSI is not marked, make the PSI textbox and label invisible
		        THISFORM.txtnPressure.VISIBLE = .F.
		        THISFORM.lblnPressure.VISIBLE = .F.
		    ENDIF
		
		    THISFORM.new('GasUse')
		    llReturn = THISFORM.BuildImportFile(lcFile)
		
		    IF llReturn
		        llReturn = THISFORM.BuildInvoices()
		    ENDIF
		
		    IF llReturn
		        IF thisform.nTotReadings = 0
		           MESSAGEBOX('There were no meter readings imported from this file.',64,'Import Meter Readings')
		        ELSE 
		           MESSAGEBOX('Finished importing meter readings...' + CHR(10) + ;
		              'Imported ' + TRANSFORM(thisform.nTotReadings) + ' meter readings' + CHR(10) + ;
		              'Created ' + TRANSFORM(THISFORM.nInvCount) + ' invoices totaling: ' + ;
		              TRANSFORM(THISFORM.nTotalInv, '$$$,$$$,$$$.99'),64, 'Import Meter Readings')
		        ENDIF       
		    ENDIF
		
		CATCH TO loError
		    llReturn = .F.
		    DO errorlog WITH 'Init', loError.LINENO, 'House Gas Import', loError.ERRORNO, loError.MESSAGE, '', loError
		    MESSAGEBOX('Unable to process the import at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		          'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		thisform.Release()
	ENDPROC

	PROCEDURE chklRollOver.Click
		THISFORM.calcMCF()
		
	ENDPROC

	PROCEDURE cmdatamanager.afternav
		LPARAMETERS cworkarea
		
		DODEFAULT(cworkarea)
		
		SELECT investor
		SET ORDER TO cOwnerID
		IF SEEK(gasuse.cOwnerID)
		   THISFORM.txtcOwnerName.value = investor.cOwnName
		ELSE
		   THISFORM.txtcOwnerName.value = investor.cOwnName
		ENDIF
		
		SELECT gasown
		SET ORDER TO cOwnerID
		IF SEEK(gasuse.cOwnerID)
		   THISFORM.txtcDescription.value = gasown.cDescription
		ENDIF
		
		IF gasuse.nBillable <> 0
		   thisform.txtndifference.Visible = .t.
		   thisform.lblDifference.Visible = .t.
		ENDIF 
	ENDPROC

	PROCEDURE cmdatamanager.afternew
		LPARAMETERS cworkarea
		
		THISFORM.txtcOwnerName.SET('value','')
		IF EMPTY(THISFORM.txtdDate.VALUE)  &&  Only reset the dates if it's the first time into the screen, otherwise, leave it how they had it
		   THISFORM.txtdDate.SET('value',DATE())
		   THISFORM.txtdInvDate.SET('value',DATE())
		ELSE
		   THISFORM.txtdDate.SET('value',THISFORM.dDate)
		   THISFORM.txtdInvDate.SET('value',THISFORM.dInvDate)
		ENDIF
		
		STORE 0 TO THISFORM.txtccurrent.VALUE,THISFORM.txtclast.VALUE,THISFORM.txtnMultiplier.VALUE,  ;
		   THISFORM.txtnUsed.VALUE,THISFORM.txtnPrice.VALUE,THISFORM.txtnPriceAdj.VALUE
		
		THISFORM.txtcDescription.SET('value','')
		THISFORM.txtnPrice.SET('value',gasopt.nPrice)
		THISFORM.txtnCharge.SET('value',gasopt.nCharge)
		THISFORM.txtcCharge.SET('value',gasopt.cCharge)
		THISFORM.txtnDifference.VISIBLE = .F.
		THISFORM.lblDifference.VISIBLE = .F.
		THISFORM.txtnYearlyAmt.SET('value',0)
		THISFORM.txtnUsedPrior.SET('value',0)
		THISFORM.txtnUsedCurrent.SET('value',0)
		THISFORM.txtnUsedYTD.SET('value',0)
		THISFORM.setnextcontrol(THISFORM.txtcOwnerID)
		THISFORM.nCounterLen = 0
		thisform.chklRollOver.set('value',.f.)
		
		*  Set the flag that tells us that it's a new record or is being edited
		thisform.ledit = .t.
		thisform.lNewrecord = .t.
		
		DODEFAULT()
		
	ENDPROC

	PROCEDURE cmdatamanager.afterupdate
		LPARAMETERS cWorkareaList, lCurrentRecordOnly
		
		thisform.ledit = .f.
		thisform.lnewrecord = .f.
		
		DODEFAULT(cWorkareaList,lCurrentRecordOnly)
	ENDPROC

	PROCEDURE cmdatamanager.beforedelete
		LPARAMETERS cWorkarea
		
		*  Check to see if there were any readings entered after this
		SELECT gasuse1
		LOCATE FOR cMeterNo == gasuse.cMeterNo AND dDate > gasuse.dDate
		IF FOUND()
		   THISFORM.omessage.warning('A reading has been entered for this meter with a reading date later than the date on this reading, so this one cannot be deleted.')
		   RETURN .F.
		ENDIF
		
		*  Check to see if this created an invoice, and if it did, has there been any payments received against it
		IF NOT EMPTY(gasuse.cInvToken)
		   *  Make sure the period or year isn't closed
		   IF NOT THISFORM.glmaint.CheckPeriod(gasuse.dinvdate)
		      THISFORM.omessage.warning('Unable to delete this reading. Either the fiscal year or period represented by the invoice date has been closed.')
		      RETURN .F.
		   ENDIF
		
		   SELECT arpmtdet
		   LOCATE FOR cInvToken = gasuse.cInvToken AND nAmtApp <> 0
		   IF FOUND()
		      THISFORM.omessage.warning('This reading created an invoice, and payments have been received against that invoice.  It cannot be deleted')
		      RETURN .F.
		   ENDIF
		   
		   lcBatch = gasuse.cInvToken
		   thisform.glmaint.delbatch(lcBatch,'AR')
		ENDIF
		
		*  Delete the gasinv record that goes along with it, if necessary
		SELECT gasinv
		LOCATE FOR cidgasinv = gasuse.cInvToken
		IF FOUND()
		   DELETE NEXT 1
		ENDIF
		=TABLEUPDATE(.T.)
		
		SELECT glmaster
		=TABLEUPDATE(.t.)
		
		DODEFAULT(cWorkarea)
		
	ENDPROC

	PROCEDURE cmdLookOwner.Click
		LOCAL lcList
		PRIV llOK
		
		IF USED('temp')
		   USE IN temp
		ENDIF
		
		SELECT gasown.cOwnerID,investor.cSortField,investor.cOwnName,gasown.cmeterno,gasown.cDescription,gasown.cGroup,gasown.nYearlyAmt FROM gasown,investor  ;
		   WHERE gasown.cOwnerID = investor.cOwnerID INTO CURSOR temp1
		
		USE DBF('temp1') AGAIN IN 0 ALIAS temp
		SELECT temp
		INDEX ON cOwnerID+cMeterNo TAG cOwnerID
		INDEX ON cSortField+cMeterNo TAG cSortField
		INDEX ON cDescription+cOwnerID TAG cDescrip
		INDEX ON cmeterno TAG cmeterno
		
		llOK = .F.
		lcList = 'cownerid\Owner ID,csortfield\Owner Name,cmeterno\Meter ID,cdescription/cdescrip\Meter Description,cgroup\Group'
		
		DO FORM ..\CUSTOM\picklist WITH 'temp', lcList, THISFORM.txtcownerid.VALUE, 5, .T.,.t.
		
		IF llOK
		   IF thisform.txtcMeterNo.Value <> temp.cMeterNo
		      thisform.txtcMeterNo.set('value',temp.cMeterNo)
		   ENDIF
		   IF thisform.txtcownerID.Value <> temp.cOwnerID
		      thisform.txtcOwnerID.set('value',temp.cOwnerID)
		   ENDIF 
		   THISFORM.txtcOwnerName.set('VALUE',temp.cOwnName)
		   thisform.txtnyearlyAmt.set('value',temp.nYearlyAmt)
		   THISFORM.lchanged = .T.
		   THISFORM.setnextcontrol(THISFORM.txtcownerid)
		   THISFORM.txtcownerid.VALID()
		ENDIF
		
	ENDPROC

	PROCEDURE txtcDescription.When
		return .f.
	ENDPROC

	PROCEDURE txtcLast.Valid
		IF THISFORM.nCounterLen > LEN(ALLTRIM(THIS.VALUE))  &&  If the user has specified a valid counter length, pad to that length
		   IF this.value <> PADR(ALLTRIM(THIS.VALUE),THISFORM.nCounterLen,'0')
		      THIS.SET('value',PADR(ALLTRIM(THIS.VALUE),THISFORM.nCounterLen,'0'))
		   ENDIF 
		ENDIF
		
		IF VAL(THISFORM.txtcCurrent.VALUE) < VAL(THIS.VALUE)  &&  Possible rollover
		   THISFORM.chklRollover.VISIBLE = .T.
		ELSE
		   THISFORM.chklRollover.VISIBLE = .F.
		   THISFORM.chklRollover.value = .F.  &&  If the option disappears, the value should be set to .f., too
		ENDIF
		
		IF thisform.cmdatamanager.ischanged('gasuse')
		   thisform.lEdit = .t.
		ENDIF 
		
		DODEFAULT()
		
	ENDPROC

	PROCEDURE txtcMeterNo.When
		return .f.
	ENDPROC

	PROCEDURE txtcOwnerID.GotFocus
		ON KEY LABEL F2 _screen.activeform.cmdLookOwner.Click()
	ENDPROC

	PROCEDURE txtcOwnerID.InteractiveChange
		IF DODEFAULT()
		   SELECT investor
		   LOCATE FOR cownerid == this.Value
		   IF FOUND()
		      thisform.txtcownerName.Value = investor.cownname
		   ELSE
		      thisform.txtcownerName.Value = ''
		   ENDIF
		ENDIF          
	ENDPROC

	PROCEDURE txtcOwnerID.LostFocus
		ON KEY LABEL f2
		
	ENDPROC

	PROCEDURE txtcOwnerID.Valid
		LOCAL llFound, lcMonth, lcYear
		
		IF this.Value == thisform.savedowner
		   RETURN .t.
		ENDIF
		
		lcYear = ALLTRIM(STR(YEAR(DATE())))
		
		IF NOT EMPTY(gasopt.CMONTH)  &&  Determine what the first month to report on should be, based on the statement start month in gas options
		   IF gasopt.CMONTH <> '01'
		      lcMonth = PADL(ALLT(STR((VAL(gasopt.CMONTH)-1) + MONTH(DATE()))),2,'0')
		      IF lcMonth > '12'
		         lcMonth = PADL(ALLT(STR(VAL(lcMonth) - 12)),2,'0')
		         IF lcMonth < gasopt.CMONTH
		            lcYear = ALLTRIM(STR(VAL(lcYear)-1))
		         ENDIF
		      ENDIF
		   ELSE
		      lcMonth = '01'
		   ENDIF
		ELSE
		   lcMonth = '01'
		   SELECT gasopt
		   REPLACE gasopt.CMONTH WITH '01'  &&  If blank, fill it in with the default
		   =TABLEUPDATE()
		ENDIF
		
		
		SELECT investor
		SET ORDER TO cOwnerID
		IF SEEK(THISFORM.txtcOwnerID.VALUE)
		   THISFORM.txtcOwnerName.SET('value',investor.cOwnName)
		ELSE
		   THISFORM.txtcOwnerName.SET('value',investor.cOwnName)
		ENDIF
		
		IF THISFORM.cmdatamanager.ischanged('gasuse')
		   THISFORM.LEDIT = .T.
		ENDIF
		
		SELECT gasown
		SET ORDER TO cOwnerID
		IF SEEK(THIS.VALUE)
		   IF NOT EMPTY(THISFORM.txtcMeterNo.VALUE)  &&  Check for an existing meter number, so they can enter multiple meters for an owner
		      SELECT gasown
		      lnRecno = RECNO()
		      LOCATE FOR cOwnerID = THIS.VALUE AND cMeterNo = THISFORM.txtcMeterNo.VALUE
		      IF NOT FOUND()
		         GOTO lnRecno
		      ENDIF
		   ENDIF
		   THISFORM.txtcDescription.SET('value',gasown.cDescription)
		   THISFORM.nCounterLen = gasown.nCounterLen
		   THISFORM.txtnUsedCurrent.SET('value',THISFORM.txtnUsed.VALUE)
		   THISFORM.txtnYearlyAmt.SET('value',gasown.nYearlyAmt)
		   THISFORM.txtnUsedYTD.SET('value',THISFORM.txtnUsedPrior.VALUE+THISFORM.txtnUsedCurrent.VALUE)
		   IF gasuse.cMeterNo <> gasown.cMeterNo
		      THISFORM.txtcMeterNo.SET('value',gasown.cMeterNo)
		   ENDIF
		   IF gasuse.nMultiplier <> gasown.nMultiplier
		      THISFORM.txtnMultiplier.SET('value',gasown.nMultiplier)
		   ENDIF
		   IF gasuse.nPriceAdj <> gasown.nPriceAdj
		      THISFORM.txtnPriceAdj.SET('value',gasown.nPriceAdj)
		   ENDIF
		   IF gasuse.nPressure <> gasown.nPressure
		      THISFORM.txtnPressure.SET('value',gasown.nPressure)
		   ENDIF
		ELSE
		   IF NOT EMPTY(THIS.VALUE)
		      THISFORM.oMessage.Warning('This is not a valid house gas owner.  Please select an owner with house gas meter information defined.')
		      RETURN 0
		   ENDIF
		ENDIF
		
		
		IF THISFORM.txtclast.VALUE <> gasown.clast
		   THISFORM.txtclast.SET('value',gasown.clast)
		ENDIF
		
		IF THISFORM.LEDIT
		   IF NOT EMPTY(THISFORM.txtccurrent.VALUE)  &&  Only do the calcs if they have already filled in the current reading
		      THISFORM.calcmcf()
		   ENDIF
		ENDIF
		
		DODEFAULT()
		
	ENDPROC

	PROCEDURE txtcOwnerID.When
		IF DODEFAULT()
		   thisform.savedowner = this.Value
		ENDIF 
	ENDPROC

	PROCEDURE txtcOwnerName.When
		RETURN .F.
	ENDPROC

	PROCEDURE txtdDate.Valid
		
		
		
	ENDPROC

	PROCEDURE txtdInvDate.Valid
		IF DODEFAULT()
		*++
		*>>If value has changed, call the FieldValid() event, and store value to datasource on success.
		*--
		IF thisform.cmdatamanager.ischanged('gasuse')
		   thisform.lEdit = .t.
		ENDIF 
		
		  IF THISFORM.cmBindingManager.ValidNeeded(THIS)
		    * Convert to proper capitalization if desired
		    IF THIS.lPropercase AND VARTYPE(THIS.Value) $ 'CM'
		      IF ISNULL(THISFORM.oString)
		        THIS.Value = PROPER(THIS.Value)
		      ELSE
		        THIS.Value = THISFORM.oString.ProperCase(THIS.Value)
		      ENDIF
		    ENDIF
		
		    * Call binding manager for the remaining common control valid() processing.
		    RETURN THISFORM.cmBindingManager.Valid(THIS)
		  ENDIF
		  RETURN .T.
		ENDIF 
	ENDPROC

	PROCEDURE txtNcharge.Valid
		THISFORM.calcmcf()
		
		IF thisform.cmdatamanager.ischanged('gasuse')
		   thisform.lEdit = .t.
		ENDIF 
		
		DODEFAULT()
		
	ENDPROC

	PROCEDURE txtnDifference.When
		return .f.
		
	ENDPROC

	PROCEDURE txtnDue.When
		return .f.
	ENDPROC

	PROCEDURE txtnMultiplier.Valid
		THISFORM.calcmcf()
		
		IF thisform.cmdatamanager.ischanged('gasuse')
		   thisform.lEdit = .t.
		ENDIF 
		
		DODEFAULT()
		
	ENDPROC

	PROCEDURE txtNpressure.Valid
		DODEFAULT()
		
		lnPressure = ((14.4+THIS.VALUE)/14.7)
		
		IF THISFORM.txtnMultiplier.VALUE <> lnPressure
		   THISFORM.txtnMultiplier.SET('value',lnPressure)
		ENDIF
		
		THISFORM.calcmcf()
		
		IF thisform.cmdatamanager.ischanged('gasuse')
		   thisform.lEdit = .t.
		ENDIF 
	ENDPROC

	PROCEDURE txtnPriceAdj.Valid
		THISFORM.calcmcf()
		
		IF thisform.cmdatamanager.ischanged('gasuse')
		   thisform.lEdit = .t.
		ENDIF 
		
		DODEFAULT()
		
	ENDPROC

	PROCEDURE txtnUsed.When
		return .f.
	ENDPROC

	PROCEDURE txtnUsedCurrent.When
		return .f.
	ENDPROC

	PROCEDURE txtnUsedPrior.When
		return .f.
		
	ENDPROC

	PROCEDURE txtnUsedYTD.When
		return .f.
	ENDPROC

	PROCEDURE txtnYearlyAmt.When
		return .f.
		
	ENDPROC

ENDDEFINE
