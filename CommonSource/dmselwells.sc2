*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="dmselwells.scx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="1" />

	AutoOpenTables = .F.
	DataSource = .NULL.
	Height = 200
	Left = 40
	Name = "Dataenvironment"
	Top = 235
	Width = 520

ENDDEFINE

DEFINE CLASS formdmselwells AS frmformcustom OF "..\custom\cforms.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Cntmoverlistpair" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdOK" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Swgroup1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdCancel" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblWellSelected" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblWellTotal" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblShowWells" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chklActive" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblFixedType" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: selectwells
		*p: fixedtype
		*p: nselected		&& Count of wells selected
	*</DefinedPropArrayMethod>

	Caption = "Select Wells To Process"
	DoCreate = .T.
	fixedtype = .F.
	Height = 434
	Name = "FormDmselwells"
	nselected = 0		&& Count of wells selected
	Width = 708
	WindowType = 1

	ADD OBJECT 'chklActive' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Only Show Active Wells", ;
		Left = 464, ;
		Name = "chklActive", ;
		Top = 14, ;
		Value = .F.
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'cmdCancel' AS cmdcommandbuttoncustom WITH ;
		Caption = "\<Cancel", ;
		Height = 36, ;
		Left = 392, ;
		Name = "cmdCancel", ;
		Top = 388, ;
		Width = 75
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdOK' AS cmdcommandbuttoncustom WITH ;
		Caption = "\<OK", ;
		Height = 36, ;
		Left = 260, ;
		Name = "cmdOK", ;
		Top = 388, ;
		Width = 75
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'Cntmoverlistpair' AS cntmoverlistpair WITH ;
		Height = 288, ;
		Left = 13, ;
		Name = "Cntmoverlistpair", ;
		Top = 55, ;
		Width = 682, ;
		cmdDeselect.FontBold = .T., ;
		cmdDeselect.Left = 306, ;
		cmdDeselect.Name = "cmdDeselect", ;
		cmdDeselect.Top = 139, ;
		cmdDeselectAll.FontBold = .T., ;
		cmdDeselectAll.Left = 306, ;
		cmdDeselectAll.Name = "cmdDeselectAll", ;
		cmdDeselectAll.Top = 166, ;
		cmdSelect.FontBold = .T., ;
		cmdSelect.Left = 306, ;
		cmdSelect.Name = "cmdSelect", ;
		cmdSelect.Top = 84, ;
		cmdSelectAll.FontBold = .T., ;
		cmdSelectAll.Left = 306, ;
		cmdSelectAll.Name = "cmdSelectAll", ;
		cmdSelectAll.Top = 112, ;
		lstSelected.FontName = "Courier New", ;
		lstSelected.Height = 276, ;
		lstSelected.Left = 385, ;
		lstSelected.Name = "lstSelected", ;
		lstSelected.Top = 0, ;
		lstSelected.Width = 295, ;
		lstSource.FontName = "Courier New", ;
		lstSource.Height = 276, ;
		lstSource.Left = 0, ;
		lstSource.Name = "lstSource", ;
		lstSource.Top = 0, ;
		lstSource.Width = 295
		*< END OBJECT: ClassLib="..\custom\cgadget.vcx" BaseClass="container" />

	ADD OBJECT 'lblFixedType' AS lbllabelcustom WITH ;
		Caption = 'Wells that are missing from the "Available Wells" list have no fixed expenses.', ;
		FontBold = .T., ;
		Left = 140, ;
		Name = "lblFixedType", ;
		Top = 352, ;
		Visible = .F.
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom1' AS lbllabelcustom WITH ;
		Caption = "Available Wells", ;
		Left = 16, ;
		Name = "Lbllabelcustom1", ;
		Top = 38
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom2' AS lbllabelcustom WITH ;
		Caption = "Selected Wells", ;
		Left = 400, ;
		Name = "Lbllabelcustom2", ;
		Top = 38
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblShowWells' AS lbllabelcustom WITH ;
		Caption = "Show Wells in:", ;
		Left = 108, ;
		Name = "lblShowWells", ;
		Top = 14
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblWellSelected' AS lbllabelcustom WITH ;
		Caption = "lblWellSelected", ;
		Left = 539, ;
		Name = "lblWellSelected", ;
		Top = 400
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblWellTotal' AS lbllabelcustom WITH ;
		Caption = "lblWellTotal", ;
		Left = 95, ;
		Name = "lblWellTotal", ;
		Top = 400
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Swgroup1' AS swgroup WITH ;
		BoundColumn = 2, ;
		Left = 188, ;
		Name = "Swgroup1", ;
		TabIndex = 9, ;
		Top = 12, ;
		ZOrderSet = 4
		*< END OBJECT: ClassLib="..\custom\swcontrol.vcx" BaseClass="combobox" />
	
	PROCEDURE Init
		LPARA tcGroup, tnFixedType
		
		IF DODEFAULT()
		   STORE ' ' TO laAvail, laSelected
		
		   IF TYPE('tcGroup') <> 'C'
		      THISFORM.oMessage.Severe('An invalid group was passed to dmselwells')
		      RETURN .F.
		   ENDIF
		
		   CREATE CURSOR wellsel ;
		      (cWellID   C(10))
		   INDEX ON cWellID TAG cWellID
		
		
		   IF TYPE('tnFixedType') <> 'N'
		      THISFORM.FixedType = 0
		   ELSE
		      THISFORM.FixedType = tnFixedType
		      thisform.lblFixedType.visible = .t.
		   ENDIF
		
		   *
		   *  Load the available array with the available wells
		   *
		   THIS.selectwells(tcGroup)
		
		   IF tcGroup <> '**'    && All Well Groups
		      THISFORM.swgroup1.VISIBLE = .F.
		      THISFORM.swgroup1.VALUE = tcGroup
		      THISFORM.lblShowWells.VISIBLE = .F.
		      THISFORM.chklActive.LEFT = 286
		   ENDIF
		
		ENDIF
		
		
		
		
		
	ENDPROC

	PROCEDURE Load
		frmform::Load
	ENDPROC

	PROCEDURE selectwells
		LPARA lcGroup, lOnlyActive
		LOCAL ARRAY laAvail[1], laSelected[1]
		LOCAL lnFixedType
		
		lnFixedType = THISFORM.FixedType
		
		DO CASE
		   CASE lnFixedType = 0
		      IF NOT lOnlyActive
		         SELECT PADR(TRIM(cWellID + ' - ' + cWellName),35,' ') + ' (' + ALLT(cwellstat) + ')' ;
		            FROM wells ;
		            WHERE cwellstat <> 'I' ;  &&  Everything but inactive - BH 2-17-2004
		         AND IIF(lcGroup <> '**',cGroup = lcGroup,.T.)  ;
		            INTO ARRAY laAvail ;
		            ORDER BY cWellID
		         THISFORM.lblWellTotal.CAPTION    = ALLTRIM(STR(_TALLY)) + ' Total Wells'
		         THISFORM.lblWellSelected.CAPTION = '0 Wells Selected'
		         THISFORM.swgroup1.VALUE = lcGroup
		      ELSE
		         SELECT PADR(TRIM(cWellID + ' - ' + cWellName),35,' ') + ' (' + ALLT(cwellstat) + ')' ;
		            FROM wells ;
		            WHERE cwellstat = 'A' ;  &&  Only active wells
		         AND IIF(lcGroup <> '**',cGroup = lcGroup,.T.)  ;
		            INTO ARRAY laAvail ;
		            ORDER BY cWellID
		         THISFORM.lblWellTotal.CAPTION    = ALLTRIM(STR(_TALLY)) + ' Total Wells'
		         THISFORM.lblWellSelected.CAPTION = '0 Wells Selected'
		         THISFORM.swgroup1.VALUE = lcGroup
		      ENDIF
		   CASE lnFixedType = 1
		      IF NOT lOnlyActive
		         SELECT PADR(TRIM(cWellID + ' - ' + cWellName),35,' ') + ' (' + ALLT(cwellstat) + ')' ;
		            FROM wells ;
		            WHERE cwellstat <> 'I' ;  &&  Everything but inactive - BH 2-17-2004
		         AND IIF(lcGroup <> '**',cGroup = lcGroup,.T.)  ;
		            AND cWellID IN (SELECT cWellID FROM expense WHERE cyear='FIXD') ;
		            INTO ARRAY laAvail ;
		            ORDER BY cWellID
		         THISFORM.lblWellTotal.CAPTION    = ALLTRIM(STR(_TALLY)) + ' Total Wells'
		         THISFORM.lblWellSelected.CAPTION = '0 Wells Selected'
		         THISFORM.swgroup1.VALUE = lcGroup
		      ELSE
		         SELECT PADR(TRIM(cWellID + ' - ' + cWellName),35,' ') + ' (' + ALLT(cwellstat) + ')' ;
		            FROM wells ;
		            WHERE cwellstat = 'A' ;  &&  Only active wells
		         AND IIF(lcGroup <> '**',cGroup = lcGroup,.T.)  ;
		            AND cWellID IN (SELECT cWellID FROM expense WHERE cyear='FIXD') ;
		            INTO ARRAY laAvail ;
		            ORDER BY cWellID
		         THISFORM.lblWellTotal.CAPTION    = ALLTRIM(STR(_TALLY)) + ' Total Wells'
		         THISFORM.lblWellSelected.CAPTION = '0 Wells Selected'
		         THISFORM.swgroup1.VALUE = lcGroup
		      ENDIF
		   CASE lnFixedType = 2
		      IF NOT lOnlyActive
		         SELECT PADR(TRIM(cWellID + ' - ' + cWellName),35,' ') + ' (' + ALLT(cwellstat) + ')' ;
		            FROM wells ;
		            WHERE cwellstat <> 'I' ;  &&  Everything but inactive - BH 2-17-2004
		         AND IIF(lcGroup <> '**',cGroup = lcGroup,.T.)  ;
		            AND cWellID IN (SELECT cWellID FROM expense WHERE nrunnorev=0 AND nrunnojib=0 AND lfixed) ;
		            INTO ARRAY laAvail ;
		            ORDER BY cWellID
		         THISFORM.lblWellTotal.CAPTION    = ALLTRIM(STR(_TALLY)) + ' Total Wells'
		         THISFORM.lblWellSelected.CAPTION = '0 Wells Selected'
		         THISFORM.swgroup1.VALUE = lcGroup
		      ELSE
		         SELECT PADR(TRIM(cWellID + ' - ' + cWellName),35,' ') + ' (' + ALLT(cwellstat) + ')' ;
		            FROM wells ;
		            WHERE cwellstat = 'A' ;  &&  Only active wells
		         AND IIF(lcGroup <> '**',cGroup = lcGroup,.T.)  ;
		            AND cWellID IN (SELECT cWellID FROM expense WHERE nrunnorev=0 AND nrunnojib=0 AND lfixed) ;
		            INTO ARRAY laAvail ;
		            ORDER BY cWellID
		         THISFORM.lblWellTotal.CAPTION    = ALLTRIM(STR(_TALLY)) + ' Total Wells'
		         THISFORM.lblWellSelected.CAPTION = '0 Wells Selected'
		         THISFORM.swgroup1.VALUE = lcGroup
		      ENDIF
		ENDCASE
		THISFORM.cntmoverlistpair.setvalue(@laAvail,@laSelected)
		
	ENDPROC

	PROCEDURE Unload
		*
	ENDPROC

	PROCEDURE chklActive.Click
		THISFORM.nSelected = 0  &&  Reset variable before clearing everything out - BH 06/03/2008
		
		IF THIS.VALUE  &&  Only showing active wells
		   THISFORM.SelectWells(THISFORM.swGroup1.VALUE,.T.)
		ELSE
		   THISFORM.SelectWells(THISFORM.swGroup1.VALUE,.F.)
		ENDIF
		
		DODEFAULT()
		
	ENDPROC

	PROCEDURE cmdCancel.Click
		thisform.release()
	ENDPROC

	PROCEDURE cmdOK.Click
		LOCAL ARRAY laSelected[1]
		LOCAL lnCount, lnX
		
		laSelected = ' '
		
		thisform.cntmoverlistpair.getvalue(@laSelected)
		
		lnCount = ALEN(laSelected,1)
		
		FOR lnX = 1 TO lnCount  
		  m.cWellID = laSelected[lnX]
		  IF NOT EMPTY(m.cWellID)
		     INSERT INTO wellsel FROM MEMVAR
		  ENDIF   
		ENDFOR
		
		thisform.release()  
		 
	ENDPROC

	PROCEDURE Cntmoverlistpair.deselectitem
		LPARAMETERS nindex
		
		DODEFAULT(nindex)
		
		thisform.nSelected = thisform.nSelected - 1
		
		IF thisform.nSelected < 0
		   thisform.nSelected = 0
		ENDIF   
		
		thisform.lblWellSelected.Caption = ALLTRIM(STR(thisform.nSelected)) + ' Wells Selected'
	ENDPROC

	PROCEDURE Cntmoverlistpair.selectitem
		LPARAMETERS nindex
		
		DODEFAULT(nindex)
		
		thisform.nSelected = thisform.nSelected + 1
		
		thisform.lblWellSelected.Caption = ALLTRIM(STR(thisform.nSelected)) + ' Wells Selected'
		
	ENDPROC

	PROCEDURE Swgroup1.afterchange
		THISFORM.nSelected = 0  &&  Reset variable before clearing everything out - BH 06/03/2008
		
		THISFORM.SelectWells(THIS.VALUE,THISFORM.chklActive.VALUE)
		
		DODEFAULT()
		
	ENDPROC

ENDDEFINE
