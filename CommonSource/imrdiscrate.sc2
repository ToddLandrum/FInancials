*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="imrdiscrate.scx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="2" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Cursor1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor6" UniqueID="" Timestamp="" />

	AutoOpenTables = .F.
	DataSource = .NULL.
	Height = 383
	Left = 40
	Name = "Dataenvironment"
	Top = 235
	Width = 745

	ADD OBJECT 'Cursor1' AS cursor WITH ;
		Alias = "decline", ;
		CursorSource = "decline", ;
		Database = ..\..\..\ampro\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor1", ;
		Top = 20, ;
		Width = 101
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor2' AS cursor WITH ;
		Alias = "disbhist", ;
		CursorSource = "disbhist", ;
		Database = ..\..\..\ampro\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 150, ;
		Name = "Cursor2", ;
		Top = 20, ;
		Width = 101
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor3' AS cursor WITH ;
		Alias = "fields", ;
		CursorSource = "fields", ;
		Database = ..\..\..\ampro\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 290, ;
		Name = "Cursor3", ;
		Top = 20, ;
		Width = 101
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor4' AS cursor WITH ;
		Alias = "investor", ;
		CursorSource = "investor", ;
		Database = ..\..\..\ampro\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 430, ;
		Name = "Cursor4", ;
		Top = 20, ;
		Width = 101
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor5' AS cursor WITH ;
		Alias = "wellhist", ;
		CursorSource = "wellhist", ;
		Database = ..\..\..\ampro\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 570, ;
		Name = "Cursor5", ;
		Top = 20, ;
		Width = 101
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor6' AS cursor WITH ;
		Alias = "wells", ;
		CursorSource = "wells", ;
		Database = ..\..\..\ampro\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor6", ;
		Top = 140, ;
		Width = 101
		*< END OBJECT: BaseClass="cursor" />

ENDDEFINE

DEFINE CLASS formimrdiscrate AS frmrptcriteria OF "..\source\appforms.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Lbllabelcustom1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Swrptlook2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Swrptlook1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="opgEstimate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom5" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: calcrate		&& Calculates the rate of return
		*m: discrate		&& Discounted rate of return function
	*</DefinedPropArrayMethod>

	Caption = "Discounted Rate of Return Report"
	DoCreate = .T.
	Height = 390
	HelpContextID = 645
	Name = "FormImrdiscrate"
	Width = 419
	Swrptcriteriabuttons1.chkSendFile.Alignment = 0
	Swrptcriteriabuttons1.chkSendFile.Name = "chkSendFile"
	Swrptcriteriabuttons1.cmdclose.Name = "cmdclose"
	Swrptcriteriabuttons1.cmdPreview.Name = "cmdPreview"
	Swrptcriteriabuttons1.cmdPrint.Name = "cmdPrint"
	Swrptcriteriabuttons1.Left = 92
	Swrptcriteriabuttons1.Name = "Swrptcriteriabuttons1"
	Swrptcriteriabuttons1.TabIndex = 9
	Swrptcriteriabuttons1.Top = 323

	ADD OBJECT 'Lbllabelcustom1' AS lbllabelcustom WITH ;
		Caption = "Beginning Well", ;
		Left = 55, ;
		Name = "Lbllabelcustom1", ;
		TabIndex = 4, ;
		Top = 111
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom2' AS lbllabelcustom WITH ;
		Caption = "Ending Well", ;
		Left = 70, ;
		Name = "Lbllabelcustom2", ;
		TabIndex = 5, ;
		Top = 161
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom3' AS lbllabelcustom WITH ;
		Caption = "Beginning Owner", ;
		Left = 41, ;
		Name = "Lbllabelcustom3", ;
		TabIndex = 7, ;
		Top = 218
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom4' AS lbllabelcustom WITH ;
		Caption = "Ending Owner", ;
		Left = 56, ;
		Name = "Lbllabelcustom4", ;
		TabIndex = 8, ;
		Top = 269
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom5' AS lbllabelcustom WITH ;
		Caption = "Base Projections On", ;
		Left = 27, ;
		Name = "Lbllabelcustom5", ;
		TabIndex = 2, ;
		Top = 28
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'opgEstimate' AS opgoptiongroupcustom WITH ;
		AutoSize = .T., ;
		BorderStyle = 0, ;
		ButtonCount = 2, ;
		Left = 141, ;
		Name = "opgEstimate", ;
		TabIndex = 1, ;
		Top = 24, ;
		Option1.AutoSize = .T., ;
		Option1.Caption = "Net Revenue Received", ;
		Option1.FontSize = 8, ;
		Option1.Height = 16, ;
		Option1.Left = 5, ;
		Option1.Name = "Option1", ;
		Option1.Top = 5, ;
		Option1.Width = 128, ;
		Option2.AutoSize = .T., ;
		Option2.Caption = "Price Changes", ;
		Option2.FontSize = 8, ;
		Option2.Height = 16, ;
		Option2.Left = 5, ;
		Option2.Name = "Option2", ;
		Option2.Top = 29, ;
		Option2.Width = 88
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="optiongroup" />

	ADD OBJECT 'Swrptlook1' AS swrptlook WITH ;
		Left = 141, ;
		Name = "Swrptlook1", ;
		TabIndex = 3, ;
		Top = 107, ;
		ZOrderSet = 5, ;
		Swlookupbutton1.Name = "Swlookupbutton1", ;
		Swlookupbutton2.Name = "Swlookupbutton2", ;
		txtBegID.clistexpression = wells.cwellid, ;
		txtBegID.clistworkarea = wells, ;
		txtBegID.Name = "txtBegID", ;
		TxtBegName.Name = "TxtBegName", ;
		txtEndID.clistexpression = wells.cwellid, ;
		txtEndID.clistworkarea = wells, ;
		txtEndID.Name = "txtEndID", ;
		TxtEndName.Name = "TxtEndName"
		*< END OBJECT: ClassLib="..\custom\swcontrol.vcx" BaseClass="container" />

	ADD OBJECT 'Swrptlook2' AS swrptlook WITH ;
		Left = 141, ;
		Name = "Swrptlook2", ;
		TabIndex = 6, ;
		Top = 217, ;
		ZOrderSet = 3, ;
		Swlookupbutton1.Name = "Swlookupbutton1", ;
		Swlookupbutton2.Name = "Swlookupbutton2", ;
		txtBegID.clistexpression = investor.cownerid, ;
		txtBegID.clistworkarea = investor, ;
		txtBegID.Name = "txtBegID", ;
		TxtBegName.Name = "TxtBegName", ;
		txtEndID.clistexpression = investor.cownerid, ;
		txtEndID.clistworkarea = investor, ;
		txtEndID.Name = "txtEndID", ;
		TxtEndName.Name = "TxtEndName"
		*< END OBJECT: ClassLib="..\custom\swcontrol.vcx" BaseClass="container" />
	
	PROCEDURE builddata
		LOCAL tnDecType, tcOwner1, tcOwner2, tcLease1, tcLease2, tnYears
		
		tnDecType = thisform.opgEstimate.value
		
		tcOwner1  = thisform.swrptlook2.txtbegid.value
		tcOwner2  = thisform.swrptlook2.txtendid.value
		tcLease1  = thisform.swrptlook1.txtbegid.value
		tcLease2  = thisform.swrptlook1.txtendid.value
		
		tnYears   = 12
		
		DO calcdecl WITH tnDecType, tcOwner1, tcOwner2, tcLease1, tcLease2, tnYears
		this.calcrate()
		
		thisform.cReportName = 'imrdiscrate'
		thisform.cSelectCriteria = 'Wells: ' + ALLTRIM(tcLease1) + ' - ' + ALLTRIM(tcLease2) + ; 
		                           'Owners: ' + ALLTRIM(tcOwner1) + ' - ' + ALLTRIM(tcOwner2)
		thisform.cSortOrder      = 'Well ID'
		thisform.cTitle1         = 'Discounted Rate of Return'
		IF tnDecType = 1
		   thisform.cTitle2 = 'Estimates Based on Net Revenue Received'
		ELSE
		   thisform.cTitle2 = 'Estimates Based on Price Fluctuations' 
		ENDIF      
		
		SELECT decline
		IF RECC() > 0
		   RETURN .T.
		ELSE
		   RETURN .F.
		ENDIF      
		
		
		
	ENDPROC

	PROCEDURE calcrate		&& Calculates the rate of return
		*=================================================================================
		*  Program....: CALCRATE.PRG
		*  Version....: 1.0
		*  Author.....: Phil W. Sherwood
		*  Date.......: June 8, 1996
		*  Notice.....: Copyright (c) 1994-1996 SherWare, Inc., All Rights Reserved.
		*  Compiler...: FoxPro 2.6a
		*) Description: Calculates the discounted rate of return for each well.
		*  Parameters.:
		*  Changes....:
		*   06/10/97    pws - Changed to not take the tax out of the initial investment.
		*                     We are affecting the cash flows by the tax benefit instead.
		*   10/17/99    pws - Converted to visual foxpro
		*=================================================================================
		LOCAL lnCurYear, m.cYear
		
		IF NOT USED('decline')
		   RETURN
		ENDIF
		
		SELECT decline
		IF RECC() = 0
		   RETURN
		ENDIF
		   
		CREATE CURSOR datatemp ;
		 (cOwnname      C(40), ;
		  cleasename    C(30), ;
		  cyear         C(4),  ;
		  ninvamt       N(12,2), ;
		  ncashflow     N(12,2))
		INDEX ON cOwnname+cleasename TAG namekey
		
		
		SELECT decline
		GO TOP
		SCAN
		   m.cownname   = cownname
		   m.cleasename = cleasename
		   m.ninvamt = ninvamt
		   IF m.ninvamt = 0
		      LOOP
		   ENDIF   
		   m.cyear = cyear0
		   m.ncashflow = ncashrcv0   
		   INSERT INTO datatemp FROM MEMVAR
		   m.cyear = cyear1
		   m.ncashflow = ncashrcv1   
		   IF m.ncashflow <> 0
		      INSERT INTO datatemp FROM MEMVAR
		   ENDIF   
		   m.cyear = cyear2
		   m.ncashflow = ncashrcv2   
		   IF m.ncashflow <> 0
		      INSERT INTO datatemp FROM MEMVAR
		   ENDIF   
		   m.cyear = cyear3
		   m.ncashflow = ncashrcv3   
		   IF m.ncashflow <> 0
		      INSERT INTO datatemp FROM MEMVAR
		   ENDIF   
		   m.cyear = cyear4
		   m.ncashflow = ncashrcv4   
		   IF m.ncashflow <> 0
		      INSERT INTO datatemp FROM MEMVAR
		   ENDIF   
		   m.cyear = cyear5
		   m.ncashflow = ncashrcv5   
		   IF m.ncashflow <> 0
		      INSERT INTO datatemp FROM MEMVAR
		   ENDIF   
		   m.cyear = cyear6
		   m.ncashflow = ncashrcv6   
		   IF m.ncashflow <> 0
		      INSERT INTO datatemp FROM MEMVAR
		   ENDIF   
		   m.cyear = cyear7
		   m.ncashflow = ncashrcv7   
		   IF m.ncashflow <> 0
		      INSERT INTO datatemp FROM MEMVAR
		   ENDIF   
		   m.cyear = cyear8
		   m.ncashflow = ncashrcv8   
		   IF m.ncashflow <> 0
		      INSERT INTO datatemp FROM MEMVAR
		   ENDIF   
		   m.cyear = cyear9
		   m.ncashflow = ncashrcv9   
		   IF m.ncashflow <> 0
		      INSERT INTO datatemp FROM MEMVAR
		   ENDIF   
		   m.cyear = cyear10
		   m.ncashflow = ncashrcv10   
		   IF m.ncashflow <> 0
		      INSERT INTO datatemp FROM MEMVAR
		   ENDIF   
		   m.cyear = cyear11
		   m.ncashflow = ncashrcv11   
		   IF m.ncashflow <> 0
		      INSERT INTO datatemp FROM MEMVAR
		   ENDIF   
		   m.cyear = cyear12
		   m.ncashflow = ncashrcv12   
		   IF m.ncashflow <> 0
		      INSERT INTO datatemp FROM MEMVAR
		   ENDIF   
		ENDSCAN
		
		SELECT cownname, cleasename, ninvamt, 000.00 AS rate FROM datatemp ;
		  INTO ARRAY laRates ;
		  GROUP BY cownname, cleasename ;
		  ORDER BY cownname, cleasename
		
		IF _tally > 0
		   lnXX = ALEN(laRates,1)
		ELSE
		   lnXX = 0
		ENDIF      
		
		IF lnXX = 0
		   RETURN
		ENDIF
		
		SELECT datatemp
		GO TOP
		
		oMessage = FindGlobalObject('cmMessage')
		oProgress = oMessage.ProgressBar('Calculating Rate of Return...')
		oProgress.SetProgressRange(0,lnXX)
		
		FOR lnCounter = 1 TO lnXX
		  oProgress.UpdateProgress(lnCounter)
		  *
		  *  If there is no initial investment number, skip that well
		  *
		  IF laRates[lnCounter,3] = 0
		     LOOP
		  ENDIF   
		  *
		  *  Filter the data for the DRR routine
		  *
		  SET FILTER TO cownname = laRates[lnCounter,1] AND cleasename = laRates[lnCounter,2]
		  laRates[lnCounter,4] = thisform.discrate(laRates[lnCounter,3])   
		  
		ENDFOR &&* lnCounter = 1 TO lnXX
		
		oProgress.CloseProgress
		
		IF USED('datatemp')
		   SELECT datatemp
		   USE
		ENDIF   
		
		SELECT decline
		SET ORDER TO leasename
		DELETE FOR ninvamt = 0 
		
		FOR lnCounter = 1 TO lnXX
		   IF laRates[lnCounter,3] = 0
		      LOOP
		   ENDIF  
		   SELECT decline
		   SEEK (UPPER(laRates[lnCounter,1])+UPPER(laRates[lnCounter,2]))
		   IF FOUND()
		      REPLACE nrate WITH laRates[lnCounter,4]
		   ENDIF   
		ENDFOR &&* lnCounter = 1 TO lnXX
		
		
		
		
		
	ENDPROC

	PROCEDURE discrate		&& Discounted rate of return function
		*========================================================================================
		*  Program....: DRR.PRG
		*  Version....: 1.0
		*  Author.....: Phil W. Sherwood
		*  Date.......: March 8, 1996
		*  Notice.....: Copyright (c) 1996 SherWare, Inc., All Rights Reserved.
		*  Compiler...: FoxPro 2.6a
		*) Description: Discounted rate of return.
		*  Parameters.: tnInvest    - The initial investment.
		*  Changes....:
		*
		*========================================================================================
		LPARA tnInvest
		
		PRIV jnCurVal, jnMinVal, jnMidVal, jnMaxVal, jnXX, jnYY, lnInvest
		set talk off
		
		**-
		**-  Check the types of all our parameters. If one of them is invalid, bail out.
		**-
		IF TYPE('tnInvest') <> 'N' 
		   RETURN (-1)
		ENDIF   
		
		lnInvest  = tnInvest * -1
		jnMinVal  = -.99000000
		jnMidVal  = 3.00000000
		jnMaxVal  = 7.00000000
		jnCurVal  = 9.00000000
		jnRate    = 3.00000000
		jnXX      = 1
		**-
		**-  Make sure we're looking at the temporary cursor that has the numbers
		**-  the calculations should be done on.
		**
		SELECT datatemp
		
		DO WHILE jnCurVal <> 0 AND jnXX <> 1000
		
		   jnXX = jnXX + 1
		
		   CALCULATE NPV(jnRate, nCashFlow, lnInvest) TO jnCurVAL
		
		   DO CASE
		      CASE jnCurVal > 0
		         jnMinVal = jnRate
		      CASE jnCurVal < 0
		         jnMaxVal = jnRate
		      CASE jnCurVal = 0
		         EXIT   
		   ENDCASE
		   
		   jnRate = (jnMinVal + jnMaxVal) / 2      
		   
		ENDDO
		
		RETURN(jnRate * 100)
		
	ENDPROC

	PROCEDURE Init
		DODEFAULT()
		SELECT wells
		SET ORDER TO cwellid
		GO TOP
		thisform.swrptlook1.txtbegid.value = cwellid
		thisform.swrptlook1.txtbegname.value = cwellname
		GO BOTT
		thisform.swrptlook1.txtendid.value = cwellid
		thisform.swrptlook1.txtendname.value = cwellname
		
		SELECT investor
		SET ORDER TO cownerid
		GO TOP
		thisform.swrptlook2.txtbegid.value = cownerid
		thisform.swrptlook2.txtbegname.value = cownname
		GO BOTT
		thisform.swrptlook2.txtendid.value = cownerid
		thisform.swrptlook2.txtendname.value = cownname
		
		
		
	ENDPROC

	PROCEDURE opgEstimate.Init
		this.value = 1
	ENDPROC

	PROCEDURE Swrptlook1.Swlookupbutton1.Click
		LOCAL lcList
		PRIV llOK
		
		llOK = .F.
		lcList = 'cwellid,cwellname,cgroup,cwellstat'
		DO FORM ..\custom\picklist WITH 'Wells', lcList, 'cwellid', 4
		
		IF llOK
		   thisform.swrptlook1.txtBegId.value = cwellid
		   thisform.swrptlook1.txtBegName.value = cwellname
		   thisform.swrptlook1.txtBegId.SetFocus()
		   thisform.swrptlook1.txtBegId.refresh()
		   thisform.swrptlook1.txtBegName.refresh()
		ENDIF   
	ENDPROC

	PROCEDURE Swrptlook1.Swlookupbutton2.Click
		LOCAL lcList
		PRIV llOK
		
		llOK = .F.
		lcList = 'cwellid,cwellname,cgroup,cwellstat'
		DO FORM ..\custom\picklist WITH 'Wells', lcList, 'cwellid', 4
		
		IF llOK
		   thisform.swrptlook1.txtEndId.value = cwellid
		   thisform.swrptlook1.txtEndName.value = cwellname
		   thisform.swrptlook1.txtEndId.SetFocus()
		   thisform.swrptlook1.txtEndId.refresh()
		   thisform.swrptlook1.txtEndName.refresh()
		ENDIF   
	ENDPROC

	PROCEDURE Swrptlook2.Swlookupbutton1.Click
		LOCAL lcList
		PRIV llOK
		
		llOK = .F.
		lcList = 'cownerid,cownname'
		
		DO FORM ..\custom\picklist WITH 'Investor', lcList, thisform.swrptlook2.txtBegId.value, 2
		
		IF llOK
		   thisform.swrptlook2.txtBegId.value = cOwnerID
		   thisform.swrptlook2.txtBegName.value = cOwnname
		   thisform.swrptlook2.txtBegId.refresh()
		   thisform.swrptlook2.txtBegName.refresh()
		ENDIF   
		
		thisform.setnextcontrol(thisform.swrptlook2.txtBegId)
		
	ENDPROC

	PROCEDURE Swrptlook2.Swlookupbutton2.Click
		LOCAL lcList
		PRIV llOK
		
		llOK = .F.
		lcList = 'cownerid,cownname'
		
		DO FORM ..\custom\picklist WITH 'Investor', lcList, thisform.swrptlook2.txtEndId.value, 2
		
		IF llOK
		   thisform.swrptlook2.txtEndId.value = cOwnerID
		   thisform.swrptlook2.txtEndName.value = cOwnname
		   thisform.swrptlook2.txtEndId.refresh()
		   thisform.swrptlook2.txtEndName.refresh()
		ENDIF   
		
		thisform.setnextcontrol(thisform.swrptlook2.txtEndId)
		
	ENDPROC

	PROCEDURE Swrptlook2.txtBegID.GotFocus
		ON KEY LABEL F2 _screen.activeform.swrptlook2.swlookupbutton1.Click()
	ENDPROC

	PROCEDURE Swrptlook2.txtBegID.LostFocus
		on key label F2 *
	ENDPROC

	PROCEDURE Swrptlook2.txtEndID.Click
		IF NOT EMPTY(THIS.VALUE)
		   SELECT investor
		   IF SEEK(THIS.VALUE)
		      THISFORM.swrptlook1.txtEndName.VALUE = cownname
		      THISFORM.swrptlook1.txtEndName.REFRESH()
		   ELSE
		      WAIT WIND NOWAIT 'Invalid Owner ID Entered...'
		      THISFORM.swrptlook1.txtEndName.VALUE = ''
		      THISFORM.swrptlook1.txtEndName.REFRESH()
		      RETURN 0
		   ENDIF
		ENDIF
		
	ENDPROC

	PROCEDURE Swrptlook2.txtEndID.GotFocus
		ON KEY LABEL F2 _screen.activeform.swrptlook2.swlookupbutton2.Click()
	ENDPROC

	PROCEDURE Swrptlook2.txtEndID.LostFocus
		on key label F2 *
	ENDPROC

ENDDEFINE
