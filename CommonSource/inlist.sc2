*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="inlist.scx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="2" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Cursor1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor6" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor7" UniqueID="" Timestamp="" />

	AutoOpenTables = .F.
	DataSource = .NULL.
	Height = 771
	InitialSelectedAlias = "items"
	Left = 40
	Name = "Dataenvironment"
	Top = 235
	Width = 520

	ADD OBJECT 'Cursor1' AS cursor WITH ;
		Alias = "items", ;
		BufferModeOverride = 5, ;
		CursorSource = "items", ;
		Database = ..\amdata\appdata.dbc, ;
		Height = 177, ;
		Left = 0, ;
		Name = "Cursor1", ;
		Top = 0, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor2' AS cursor WITH ;
		Alias = "invtrans", ;
		CursorSource = "invtrans", ;
		Database = ..\amdata\appdata.dbc, ;
		Height = 90, ;
		Left = 134, ;
		Name = "Cursor2", ;
		Top = 1, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor3' AS cursor WITH ;
		Alias = "wells", ;
		CursorSource = "wells", ;
		Database = ..\amdata\appdata.dbc, ;
		Height = 90, ;
		Left = 290, ;
		Name = "Cursor3", ;
		Top = 20, ;
		Width = 91
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor4' AS cursor WITH ;
		Alias = "appurchd", ;
		CursorSource = "appurchd", ;
		Database = ..\amdata\appdata.dbc, ;
		Height = 90, ;
		Left = 316, ;
		Name = "Cursor4", ;
		Top = 145, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor5' AS cursor WITH ;
		Alias = "appurchh", ;
		CursorSource = "appurchh", ;
		Database = ..\amdata\appdata.dbc, ;
		Height = 90, ;
		Left = 150, ;
		Name = "Cursor5", ;
		Top = 140, ;
		Width = 91
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor6' AS cursor WITH ;
		Alias = "invdet", ;
		CursorSource = "invdet", ;
		Database = ..\amdata\appdata.dbc, ;
		Height = 428, ;
		Left = 14, ;
		Name = "Cursor6", ;
		Top = 198, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor7' AS cursor WITH ;
		Alias = "invhdr", ;
		CursorSource = "invhdr", ;
		Database = ..\amdata\appdata.dbc, ;
		Height = 544, ;
		Left = 132, ;
		Name = "Cursor7", ;
		Top = 194, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

ENDDEFINE

DEFINE CLASS forminitemlist AS frmrptcriteria OF "..\source\appforms.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="opgSort" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Swrptlook1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblEndID" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblBegID" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblSortBy" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lbltype" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lbldate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtdate1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtdate2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblSlash" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="opgType" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*p: crpttype
	*</DefinedPropArrayMethod>

	Caption = "Inventory/Billing Code Listing"
	DoCreate = .T.
	Height = 370
	HelpContextID = 583
	Name = "FormInitemlist"
	Width = 355
	Swrptcriteriabuttons1.chkSendFile.Alignment = 0
	Swrptcriteriabuttons1.chkSendFile.Name = "chkSendFile"
	Swrptcriteriabuttons1.cmdclose.Name = "cmdclose"
	Swrptcriteriabuttons1.cmdPreview.Name = "cmdPreview"
	Swrptcriteriabuttons1.cmdPrint.Name = "cmdPrint"
	Swrptcriteriabuttons1.Left = 57
	Swrptcriteriabuttons1.Name = "Swrptcriteriabuttons1"
	Swrptcriteriabuttons1.TabIndex = 12
	Swrptcriteriabuttons1.Top = 296
	Swrptcriteriabuttons1.ZOrderSet = 0

	ADD OBJECT 'lblBegID' AS lblfieldlabelcustom WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "Beginning Item", ;
		Height = 16, ;
		Left = 19, ;
		Name = "lblBegID", ;
		TabIndex = 6, ;
		Top = 149, ;
		Width = 71, ;
		ZOrderSet = 4
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lbldate' AS lbllabelcustom WITH ;
		Caption = "Date Range", ;
		Left = 32, ;
		Name = "lbldate", ;
		TabIndex = 11, ;
		Top = 254, ;
		Visible = .F.
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblEndID' AS lblfieldlabelcustom WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "Ending Item", ;
		Height = 16, ;
		Left = 34, ;
		Name = "lblEndID", ;
		TabIndex = 7, ;
		Top = 199, ;
		Width = 56, ;
		ZOrderSet = 3
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblSlash' AS lbllabelcustom WITH ;
		Caption = "-", ;
		FontSize = 12, ;
		Left = 202, ;
		Name = "lblSlash", ;
		TabIndex = 8, ;
		Top = 252, ;
		Visible = .F.
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblSortBy' AS lblfieldlabelcustom WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "Sort By:", ;
		Height = 16, ;
		Left = 49, ;
		Name = "lblSortBy", ;
		TabIndex = 4, ;
		Top = 76, ;
		Width = 41, ;
		ZOrderSet = 5
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lbltype' AS lbllabelcustom WITH ;
		Caption = "Type", ;
		Left = 64, ;
		Name = "lbltype", ;
		TabIndex = 2, ;
		Top = 16, ;
		Visible = .F.
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'opgSort' AS opgoptiongroupcustom WITH ;
		BorderStyle = 0, ;
		ButtonCount = 3, ;
		Height = 60, ;
		Left = 103, ;
		Name = "opgSort", ;
		TabIndex = 3, ;
		Top = 70, ;
		Width = 137, ;
		ZOrderSet = 1, ;
		Option1.AutoSize = .T., ;
		Option1.Caption = " Item ID", ;
		Option1.FontSize = 8, ;
		Option1.Height = 16, ;
		Option1.Left = 5, ;
		Option1.Name = "optItemID", ;
		Option1.Top = 5, ;
		Option1.Width = 52, ;
		Option2.AutoSize = .T., ;
		Option2.Caption = " Item Name", ;
		Option2.FontSize = 8, ;
		Option2.Height = 16, ;
		Option2.Left = 5, ;
		Option2.Name = "optItemName", ;
		Option2.Top = 24, ;
		Option2.Width = 70, ;
		Option3.AutoSize = .T., ;
		Option3.Caption = " Well and Item ID", ;
		Option3.FontSize = 8, ;
		Option3.Height = 16, ;
		Option3.Left = 5, ;
		Option3.Name = "Option3", ;
		Option3.Top = 42, ;
		Option3.Width = 96
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="optiongroup" />

	ADD OBJECT 'opgType' AS opgoptiongroupcustom WITH ;
		BorderStyle = 0, ;
		ButtonCount = 2, ;
		Left = 103, ;
		Name = "opgType", ;
		TabIndex = 1, ;
		Top = 12, ;
		Value = 1, ;
		Visible = .F., ;
		Option1.AutoSize = .T., ;
		Option1.Caption = "Detail", ;
		Option1.FontSize = 8, ;
		Option1.Height = 16, ;
		Option1.Left = 5, ;
		Option1.Name = "Option1", ;
		Option1.Top = 5, ;
		Option1.Value = 1, ;
		Option1.Width = 44, ;
		Option2.AutoSize = .T., ;
		Option2.Caption = "Summary", ;
		Option2.FontSize = 8, ;
		Option2.Height = 16, ;
		Option2.Left = 5, ;
		Option2.Name = "Option2", ;
		Option2.Top = 24, ;
		Option2.Width = 63
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="optiongroup" />

	ADD OBJECT 'Swrptlook1' AS swrptlook WITH ;
		Left = 103, ;
		Name = "Swrptlook1", ;
		TabIndex = 5, ;
		Top = 146, ;
		ZOrderSet = 2, ;
		Swlookupbutton1.Name = "Swlookupbutton1", ;
		Swlookupbutton2.Name = "Swlookupbutton2", ;
		txtBegID.clistexpression = items.citemid, ;
		txtBegID.clistworkarea = items, ;
		txtBegID.Name = "txtBegID", ;
		TxtBegName.Name = "TxtBegName", ;
		txtEndID.clistexpression = items.citemid, ;
		txtEndID.clistworkarea = items, ;
		txtEndID.Name = "txtEndID", ;
		TxtEndName.Name = "TxtEndName"
		*< END OBJECT: ClassLib="..\custom\swcontrol.vcx" BaseClass="container" />

	ADD OBJECT 'txtdate1' AS dpk WITH ;
		Height = 20, ;
		Left = 103, ;
		Name = "txtdate1", ;
		TabIndex = 9, ;
		Top = 253, ;
		Visible = .F., ;
		Width = 75
		*< END OBJECT: ClassLib="..\custom\swdate.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtdate2' AS dpk WITH ;
		Height = 20, ;
		Left = 211, ;
		Name = "txtdate2", ;
		TabIndex = 10, ;
		Top = 253, ;
		Visible = .F., ;
		Width = 75
		*< END OBJECT: ClassLib="..\custom\swdate.vcx" BaseClass="textbox" />
	
	PROCEDURE builddata
		LOCAL nchoice, cproducer
		LOCAL ldFromDate, ldThroughDate, llReturn, loError
		LOCAL cvendname, cvendorid, cwellname, npurchased
		
		llReturn = .T.
		
		TRY
		* Have to define these as public to get around a weird bug when sending the listing to a file.
		* Otherwise you get a variable lcitem2 not found on the report form  (thisform.creportname) command
		    PUBLIC lcItem1, lcItem2
		    lcItem1 = THISFORM.swrptlook1.txtbegid.VALUE
		    lcItem2 = THISFORM.swrptlook1.txtendid.VALUE
		
		    THISFORM.cselectcriteria = 'Items:  ' + ALLTRIM(lcItem1) + '  -  ' + ALLTRIM(lcItem2)
		    THISFORM.ctitle1         = ''
		    THISFORM.ctitle2         = ''
		
		    IF THISFORM.crpttype = 'List'
		        DO CASE
		            CASE THISFORM.opgsort.VALUE = 1		&&	Sort by ItemID
		                THISFORM.csortorder  = 'Item ID'
						SELECT  items.citemid, items.ctype, items.citemdesc, items.nprice1, items.nprice2, ;
								items.nprice3, items.nprice4, items.nprice5, items.cmeasure1, items.cmeasure2, ;
								items.cmeasure3, items.cmeasure4, items.cmeasure5, items.nqtyonhand ;
							FROM items ;
							ORDER BY items.citemid ;
							INTO CURSOR itemlist ;
							WHERE BETWEEN(items.citemid, lcItem1, lcItem2)
		
		            CASE THISFORM.opgsort.VALUE = 2		&&	Sort by Item Name
		                THISFORM.csortorder  = 'Item Description'
						SELECT  items.citemid, items.ctype, items.citemdesc, items.nprice1, items.nprice2, ;
								items.nprice3, items.nprice4, items.nprice5, items.cmeasure1, items.cmeasure2, ;
								items.cmeasure3, items.cmeasure4, items.cmeasure5, items.nqtyonhand ;
							FROM items ;
							ORDER BY items.citemdesc ;
							INTO CURSOR itemlist ;
							WHERE BETWEEN(items.citemid, lcItem1, lcItem2)
		        ENDCASE
		        THISFORM.creportname = 'initem1.frx'
		    ELSE
		        CREATE CURSOR itemlist ;
		            (citemid    c(10), ;
		              citemdesc  c(30), ;
		              cvendorid  c(10), ;
		              cvendname  c(40), ;
		              cdescription c(30), ;
		              npurchased N(12, 2), ;
		              ntransfer  N(12, 2), ;
		              nbalance   N(12, 2), ;
		              dtrandate  d, ;
		              cwellid    c(10), ;
		              cwellname  c(30), ;
		              cyear      c(4), ;
		              cperiod    c(2), ;
		              nprice     N(12, 2), ;
		              ntotal     N(12, 2))
		        INDEX ON citemid TAG citemid
		        INDEX ON citemdesc TAG citemdesc
		        INDEX ON citemid + DTOS(dtrandate) TAG citemidd
		        INDEX ON citemdesc + DTOS(dtrandate) TAG citemdescd
		        INDEX ON cwellid + citemid TAG wellitem
		
		        ldFromDate    = THISFORM.txtdate1.VALUE
		        ldThroughDate = THISFORM.txtdate2.VALUE
		
		        IF THISFORM.opgType.VALUE = 2  &&  Summary
					SELECT  items.citemid, items.citemdesc, ;
							SUM(appurchd.nquantity) AS npurchased ;
						FROM items, appurchd, appurchh ;
						WHERE (items.citemid BETWEEN THISFORM.swrptlook1.txtbegid.VALUE ;
							  AND THISFORM.swrptlook1.txtendid.VALUE) ;
							AND items.citemid = appurchd.citemid ;
							AND items.ctype = 'P' ;
							AND appurchh.cbatch = appurchd.cbatch ;
							AND BETWEEN(appurchh.dpostdate, ldFromDate, ldThroughDate) ;
						INTO CURSOR temp ;
						ORDER BY items.citemid ;
						GROUP BY items.citemid
		            SELECT itemlist
		            SCATTER MEMVAR blank 
		            SELE temp
		            SCAN
		                SCATTER MEMVAR
		                INSERT INTO itemlist FROM MEMVAR
		            ENDSCAN
		
					SELECT  invtrans.citemid, items.citemdesc, SUM(nqty) AS ntransfer ;
						FROM invtrans, items ;
						INTO CURSOR temp ;
						WHERE invtrans.citemid = items.citemid ;
							AND (invtrans.citemid BETWEEN THISFORM.swrptlook1.txtbegid.VALUE ;
							  AND THISFORM.swrptlook1.txtendid.VALUE) ;
							AND BETWEEN(dacctdate, ldFromDate, ldThroughDate) ;
						ORDER BY invtrans.citemid ;
						GROUP BY invtrans.citemid
		
		            SELE temp
		            SCAN
		                SCATTER MEMVAR
		                SELECT itemlist
		                LOCATE FOR citemid == m.citemid  &&  Find entry, and fill in the transferred amount.  If it can't find it, insert it.
		                IF FOUND()
		                    REPLACE ntransfer WITH ntransfer + m.ntransfer
		                ELSE
		                    INSERT INTO itemlist FROM MEMVAR
		                ENDIF
		            ENDSCAN
		
					SELECT  invhdr.cbatch, invdet.citemid, items.citemdesc, SUM(nquantity) AS ntransfer ;
						FROM invdet, invhdr, items ;
						INTO CURSOR temp ;
						WHERE invhdr.cbatch = invdet.cbatch ;
							AND items.citemid = invdet.citemid AND  ;
							(invdet.citemid BETWEEN THISFORM.swrptlook1.txtbegid.VALUE ;
							  AND THISFORM.swrptlook1.txtendid.VALUE) ;
							AND BETWEEN(dInvDate, ldFromDate, ldThroughDate) ;
						ORDER BY invdet.citemid ;
						GROUP BY invdet.citemid
		
		            SELE temp
		            SCAN
		                SCATTER MEMVAR
		                SELECT itemlist
		                LOCATE FOR citemid == m.citemid  &&  Find entry, and fill in the invoiced amount.  If it can't find it, insert it.
		                IF FOUND()
		                    REPLACE ntransfer WITH ntransfer + m.ntransfer
		                ELSE
		                    INSERT INTO itemlist FROM MEMVAR
		                ENDIF
		            ENDSCAN
		
		            SELE itemlist
		            SCAN
		                REPL nbalance  WITH npurchased - ntransfer
		            ENDSCAN
		
		            THISFORM.creportname = 'incounts.frx'
		        ELSE
					SELECT  items.citemid, items.citemdesc, ;
							appurchh.dInvDate AS dtrandate, ;
							appurchh.cvendorid, ;
							appurchd.nprice, ;
							appurchd.cunitno AS cwellid, ;
							appurchd.citemdesc AS cdescription, ;
							appurchd.nextension AS ntotal, ;
							appurchd.nquantity  AS npurchased ;
						FROM items, appurchd, appurchh ;
						WHERE (items.citemid BETWEEN THISFORM.swrptlook1.txtbegid.VALUE ;
							  AND THISFORM.swrptlook1.txtendid.VALUE) ;
							AND items.citemid = appurchd.citemid ;
							AND appurchh.cbatch = appurchd.cbatch ;
							AND BETWEEN(appurchh.dpostdate, ldFromDate, ldThroughDate) ;
							AND items.ctype = 'P' ;
						INTO CURSOR temp ;
						ORDER BY items.citemid
		
		            SELECT itemlist
		            SCATTER MEMVAR blank 
		            
		            SELE temp
		            SCAN
		                SCATTER MEMVAR
		                swselect('wells')
		                LOCATE FOR cwellid == m.cwellid
		                IF FOUND()
		                    m.cwellname = cwellname
		                ENDIF
		                swselect('vendor')
		                SET ORDER TO cvendorid
		                IF SEEK(m.cvendorid)
		                    m.cvendname = cvendname
		                ENDIF
		                INSERT INTO itemlist FROM MEMVAR
		            ENDSCAN
		
		            IF THISFORM.opgsort.VALUE <> 3
						SELECT  invtrans.citemid, items.citemdesc, nqty AS ntransfer, cwellid, ;
								cyear, cperiod, dacctdate AS dtrandate, cdescription, ;
								nprice, (ncharge * -1) AS ntotal ;
							FROM invtrans, items ;
							WHERE items.citemid = invtrans.citemid ;
								AND (invtrans.citemid BETWEEN THISFORM.swrptlook1.txtbegid.VALUE ;
								  AND THISFORM.swrptlook1.txtendid.VALUE) ;
								AND BETWEEN(invtrans.dacctdate, ldFromDate, ldThroughDate) ;
							INTO CURSOR temp ;
							ORDER BY invtrans.citemid
		            ELSE
						SELECT  invtrans.citemid, items.citemdesc, nqty AS ntransfer, cwellid, ;
								cyear, cperiod, dacctdate AS dtrandate, cdescription, ;
								nprice, (ncharge * -1) AS ntotal ;
							FROM invtrans, items ;
							WHERE items.citemid = invtrans.citemid ;
								AND (invtrans.cwellid BETWEEN THISFORM.swrptlook1.txtbegid.VALUE ;
								  AND THISFORM.swrptlook1.txtendid.VALUE) ;
								AND BETWEEN(invtrans.dacctdate, ldFromDate, ldThroughDate) ;
							INTO CURSOR temp ;
							ORDER BY invtrans.citemid
		            ENDIF
		
		            SELE temp
		            SCAN
		                SCATTER MEMVAR
		                m.npurchased = 0
		                swselect('wells')
		                LOCATE FOR cwellid == m.cwellid
		                IF FOUND()
		                    m.cwellname = cwellname
		                ENDIF
		                INSERT INTO itemlist FROM MEMVAR
		            ENDSCAN
		
		            IF THISFORM.opgsort.VALUE <> 3
						SELECT  invhdr.cbatch, invdet.citemid, invdet.citemdesc AS cdescription, nquantity AS ntransfer, invhdr.ccustid AS cwellid, ;
								invdet.cprodyear, invdet.cprodprd, dInvDate AS dtrandate, ;
								nprice, (nextension * -1) AS ntotal ;
							FROM invdet, invhdr, items ;
							INTO CURSOR temp ;
							WHERE invhdr.cbatch = invdet.cbatch ;
								AND items.citemid = invdet.citemid  ;
								AND (invdet.citemid BETWEEN THISFORM.swrptlook1.txtbegid.VALUE ;
								  AND THISFORM.swrptlook1.txtendid.VALUE) ;
								AND BETWEEN(invhdr.dInvDate, ldFromDate, ldThroughDate) ;
							ORDER BY invdet.citemid
		            ELSE
						SELECT  invhdr.cbatch, invdet.citemid, invdet.citemdesc AS cdescription, nquantity AS ntransfer, invhdr.ccustid AS cwellid, ;
								invdet.cprodyear, invdet.cprodprd, dInvDate AS dtrandate, ;
								nprice, (nextension * -1) AS ntotal ;
							FROM invdet, invhdr, items ;
							WHERE invhdr.cbatch = invdet.cbatch ;
								AND items.citemid = invdet.citemid ;
								AND (invdet.cunitno BETWEEN THISFORM.swrptlook1.txtbegid.VALUE ;
								  AND THISFORM.swrptlook1.txtendid.VALUE) ;
								AND BETWEEN(invhdr.dInvDate, ldFromDate, ldThroughDate) ;
							INTO CURSOR temp ;
							ORDER BY invdet.citemid
		            ENDIF
		            SELECT itemlist
		            SCATTER MEMVAR blank 
		            
		            SELE temp
		            SCAN
		                SCATTER MEMVAR
		                m.npurchased = 0
		                STORE '' TO m.cvendorid, m.cvendname
		                INSERT INTO itemlist FROM MEMVAR
		            ENDSCAN
		
		            THISFORM.creportname = 'incountd.frx'
		        ENDIF
		
		        THISFORM.ctitle2 = ALLT('Date Range: ' + DTOC(ldFromDate) + ' - ' + DTOC(ldThroughDate))
		        SELE itemlist
		        DO CASE
		            CASE THISFORM.opgsort.VALUE = 1
		                SET ORDER TO citemidd
		            CASE THISFORM.opgsort.VALUE = 2
		                SET ORDER TO citemdescd
		            CASE THISFORM.opgsort.VALUE = 3
		                SET ORDER TO wellitem
		        ENDCASE
		    ENDIF
		
		    SELECT itemlist
		    IF RECC() > 0
		        llReturn = .T.
		    ELSE
		        llReturn = .F.
		    ENDIF
		CATCH TO loError
		    llReturn = .F.
		    DO errorlog WITH 'Builddata', loError.LINENO, 'Inventory Reports', loError.ERRORNO, loError.MESSAGE, '', loError
		    MESSAGEBOX('Unable to process the report at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		          'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		RETURN llReturn
	ENDPROC

	PROCEDURE Destroy
		RELEASE lcItem1, lcItem2
		DODEFAULT()
	ENDPROC

	PROCEDURE Init
		LPARA tcRptType
		DODEFAULT()
		
		SELECT items
		SET ORDER TO citemid
		GO TOP
		THISFORM.swrptlook1.txtBegId.VALUE = items.citemid
		THISFORM.swrptlook1.txtBegName.value = items.citemdesc
		
		GO BOTTOM
		THISFORM.swrptlook1.txtEndId.VALUE = items.citemid
		THISFORM.swrptlook1.txtEndName.value = items.citemdesc
		
		THISFORM.opgSort.optItemID.VALUE = 1
		
		IF TYPE('tcRptType') <> 'C'
		   tcRptType = 'Count'
		ENDIF
		   
		THISFORM.cRptType = tcRptType
		
		IF tcRptType = 'List'
		   thisform.caption = 'Inventory/Billing Code Listing'
		   thisform.opgsort.option3.visible = .f.
		   thisform.HelpContextID = 583
		ELSE
		   thisform.caption = 'Inventory Counts'
		   thisform.HelpContextID = 585
		   thisform.opgType.visible = .t.
		   thisform.lbltype.visible = .t.
		   thisform.lbldate.visible = .t.
		   thisform.txtdate1.visible = .t.
		   thisform.txtdate2.visible = .t.
		   thisform.lblslash.Visible = .t.
		   thisform.txtdate1.value = DATE()-30
		   thisform.txtdate2.value = DATE()
		ENDIF      
		
		      
		
		
	ENDPROC

	PROCEDURE opgSort.optItemID.GotFocus
		THISFORM.opgSort.VALUE = 1
		
	ENDPROC

	PROCEDURE opgSort.optItemName.GotFocus
		THISFORM.opgSort.VALUE = 2
	ENDPROC

	PROCEDURE opgSort.Valid
		if this.value = 3
		   thisform.lblbegid.caption = 'Beginning Well'
		   thisform.lblendid.caption = 'Ending Well'
		   thisform.swrptlook1.txtbegid.clistexpression = 'cwellid'
		   thisform.swrptlook1.txtbegid.clistworkarea = 'Wells'
		   thisform.swrptlook1.txtendid.clistexpression = 'cwellid'
		   thisform.swrptlook1.txtendid.clistworkarea = 'Wells'
		   sele wells
		   set order to cwellid
		   go top
		   thisform.swrptlook1.txtbegid.value = cwellid
		   thisform.swrptlook1.txtbegname.value = cwellname
		   go bott
		   thisform.swrptlook1.txtendid.value = cwellid
		   thisform.swrptlook1.txtendname.value = cwellname
		else
		   thisform.lblbegid.caption = 'Beginning Item'
		   thisform.lblendid.caption = 'Ending Item'
		   thisform.swrptlook1.txtbegid.clistexpression = 'citemid'
		   thisform.swrptlook1.txtbegid.clistworkarea = 'items'
		   thisform.swrptlook1.txtendid.clistexpression = 'citemid'
		   thisform.swrptlook1.txtendid.clistworkarea = 'items'
		   sele items
		   set order to citemid
		   go top
		   thisform.swrptlook1.txtbegid.value = citemid
		   thisform.swrptlook1.txtbegname.value = citemdesc
		   go bott
		   thisform.swrptlook1.txtendid.value = citemid
		   thisform.swrptlook1.txtendname.value = citemdesc
		endif   
	ENDPROC

	PROCEDURE opgType.Valid
		IF this.value = 1
		   thisform.opgsort.option3.visible = .t.
		ELSE
		   thisform.opgsort.option3.visible = .f.
		   thisform.lblbegid.caption = 'Beginning Item'
		   thisform.lblendid.caption = 'Ending Item'
		   thisform.swrptlook1.txtbegid.clistexpression = 'citemid'
		   thisform.swrptlook1.txtbegid.clistworkarea = 'items'
		   thisform.swrptlook1.txtendid.clistexpression = 'citemid'
		   thisform.swrptlook1.txtendid.clistworkarea = 'items'
		   sele items
		   set order to citemid
		   go top
		   thisform.swrptlook1.txtbegid.value = citemid
		   thisform.swrptlook1.txtbegname.value = citemdesc
		   go bott
		   thisform.swrptlook1.txtendid.value = citemid
		   thisform.swrptlook1.txtendname.value = citemdesc
		   thisform.opgsort.value = 1
		ENDIF      
	ENDPROC

	PROCEDURE Swrptlook1.Swlookupbutton1.Click
		LOCAL lcList
		PRIV llOK
		
		llOK = .F.
		
		if thisform.opgsort.value <> 3
		   lcList = 'citemid,citemdesc'
		
		   DO FORM ..\custom\picklist WITH 'Items', lcList, THISFORM.swrptlook1.txtBegID.VALUE, 2
		 
		   IF llOK
		     THISFORM.swrptlook1.txtBegID.VALUE = items.citemid
		     THISFORM.swrptlook1.txtBegName.value = items.citemdesc
		     thisform.refresh()
		   ENDIF
		ELSE
		   lcList = 'cwellid,cwellname'
		
		   DO FORM ..\custom\picklist WITH 'Wells', lcList, THISFORM.swrptlook1.txtBegID.VALUE, 2
		 
		   IF llOK
		     THISFORM.swrptlook1.txtBegID.VALUE = wells.cwellid
		     THISFORM.swrptlook1.txtBegName.value = wells.cwellname
		     thisform.refresh()
		   ENDIF
		ENDIF   
		
	ENDPROC

	PROCEDURE Swrptlook1.Swlookupbutton2.Click
		LOCAL lcList
		PRIV llOK
		
		llOK = .F.
		
		if thisform.opgsort.value <> 3
		   lcList = 'citemid,citemdesc'
		
		   DO FORM ..\custom\picklist WITH 'Items', lcList, THISFORM.swrptlook1.txtEndID.VALUE, 2
		 
		   IF llOK
		     THISFORM.swrptlook1.txtEndID.VALUE = items.citemid
		     THISFORM.swrptlook1.txtEndName.value = items.citemdesc
		     thisform.refresh()
		   ENDIF
		ELSE
		   lcList = 'cwellid,cwellname'
		
		   DO FORM ..\custom\picklist WITH 'Wells', lcList, THISFORM.swrptlook1.txtEndID.VALUE, 2
		 
		   IF llOK
		     THISFORM.swrptlook1.txtEndID.VALUE = wells.cwellid
		     THISFORM.swrptlook1.txtEndName.value = wells.cwellname
		     thisform.refresh()
		   ENDIF
		ENDIF   
		
	ENDPROC

ENDDEFINE
