*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="meterchartimport.scx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="2" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Cursor1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor4" UniqueID="" Timestamp="" />

	AutoOpenTables = .F.
	DataSource = .NULL.
	Height = 442
	Left = 40
	Name = "Dataenvironment"
	Top = 235
	Width = 579

	ADD OBJECT 'Cursor1' AS cursor WITH ;
		Alias = "integrators", ;
		CursorSource = "integrators", ;
		Database = ..\newdbc\appdata.dbc, ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor1", ;
		Top = 20, ;
		Width = 91
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor2' AS cursor WITH ;
		Alias = "meterdata", ;
		BufferModeOverride = 5, ;
		CursorSource = "meterdata", ;
		Database = ..\newdbc\appdata.dbc, ;
		Height = 90, ;
		Left = 150, ;
		Name = "Cursor2", ;
		Top = 20, ;
		Width = 91
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor3' AS cursor WITH ;
		Alias = "meters", ;
		CursorSource = "meters", ;
		Database = ..\newdbc\appdata.dbc, ;
		Height = 90, ;
		Left = 290, ;
		Name = "Cursor3", ;
		Top = 20, ;
		Width = 91
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor4' AS cursor WITH ;
		Alias = "wells", ;
		CursorSource = "wells", ;
		Database = ..\newdbc\appdata.dbc, ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor4", ;
		Top = 140, ;
		Width = 91
		*< END OBJECT: BaseClass="cursor" />

ENDDEFINE

DEFINE CLASS formmeterread AS frmdatamanagerformcustom OF "..\custom\cforms.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="cmdImport" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboIntegrator" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Swyear1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Swperiod1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cmdcommandbuttoncustom1" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: importcharts
	*</DefinedPropArrayMethod>

	Caption = "Chart Readings Import"
	DoCreate = .T.
	Height = 285
	lnonewask = .T.
	Name = "FormMeterread"
	Width = 487
	_memberdata = <VFPData>
		<memberdata name="importcharts" display="ImportCharts"/>
		</VFPData>
	cmdatamanager.Name = "cmdatamanager"
	cmdatamanager.TabIndex = 1
	cmlookupmanager.Name = "cmlookupmanager"
	Mwresize1.lblHighLight.Name = "lblHighLight"
	Mwresize1.lblShading.Name = "lblShading"
	Mwresize1.Name = "Mwresize1"

	ADD OBJECT 'cboIntegrator' AS cbocomboboxcustom WITH ;
		Height = 22, ;
		Left = 144, ;
		Name = "cboIntegrator", ;
		TabIndex = 2, ;
		Top = 85, ;
		Width = 240
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="combobox" />

	ADD OBJECT 'Cmdcommandbuttoncustom1' AS cmdcommandbuttoncustom WITH ;
		Caption = "Exit", ;
		Height = 36, ;
		Left = 264, ;
		Name = "Cmdcommandbuttoncustom1", ;
		TabIndex = 8, ;
		Top = 216, ;
		Width = 84
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdImport' AS cmdcommandbuttoncustom WITH ;
		Caption = "Import Data", ;
		Height = 36, ;
		Left = 108, ;
		Name = "cmdImport", ;
		TabIndex = 8, ;
		Top = 216, ;
		Width = 84
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'Lbllabelcustom1' AS lbllabelcustom WITH ;
		Caption = "Integrator", ;
		Left = 89, ;
		Name = "Lbllabelcustom1", ;
		TabIndex = 3, ;
		Top = 88
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom2' AS lbllabelcustom WITH ;
		Caption = "Import Meter Readings For Production Period:", ;
		Left = 84, ;
		Name = "Lbllabelcustom2", ;
		TabIndex = 6, ;
		Top = 168
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom3' AS lbllabelcustom WITH ;
		Caption = "/", ;
		Left = 352, ;
		Name = "Lbllabelcustom3", ;
		TabIndex = 7, ;
		Top = 168
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Swperiod1' AS swperiod WITH ;
		Left = 362, ;
		Name = "Swperiod1", ;
		TabIndex = 5, ;
		Top = 166
		*< END OBJECT: ClassLib="..\custom\swcontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'Swyear1' AS swyear WITH ;
		Left = 310, ;
		Name = "Swyear1", ;
		TabIndex = 4, ;
		Top = 166
		*< END OBJECT: ClassLib="..\custom\swcontrol.vcx" BaseClass="textbox" />
	
	PROCEDURE importcharts
		LOCAL lnTotal, m.cBatch, lcRevClear, lnBad
		
		lnBad       = 0
		lnTotal     = 0
		lcyear      = THISFORM.swyear1.VALUE
		lcperiod    = THISFORM.swperiod1.VALUE
		m.cDataYear = ALLT(STR(YEAR(DATE())))
		STORE '' TO m.cYear, m.cPeriod, m.cMasterID, m.cMeterID, m.cBatch
		
		*
		*  Retrieves data from excel spreadsheet
		*
		oleExcel = CREATEOBJECT('excel.application')
		
		lcFile = GETFILE('XLS,XLSX', 'Choose Spreadsheet To Import:', 'Choose', 0, 'Where is Import Spreadsheet?')
		
		IF EMPTY(lcFile)
		   RETURN
		ENDIF
		
		oleExcel.APPLICATION.workbooks.OPEN(lcFile)
		
		lcIntegrator  = THISFORM.cboIntegrator.VALUE
		m.cIntegrator = LEFT(lcIntegrator, 10)
		SELE integrators
		LOCATE FOR cname = lcIntegrator
		IF FOUND()
		   lcWellCell    = ALLT(cwellcell)
		   lcProdPrdCell = ALLT(crange1cell)
		   lcDaysOnCell  = ALLT(cdaysoncell)
		   lcAmountCell  = ALLT(creadingcell)
		   lcMasterCell  = ALLT(cmastercell)
		   lcMeterCell   = ALLT(cmetercell)
		ELSE
		   WAIT WIND NOWAIT 'Integrator Not Found...'
		   RETURN
		ENDIF
		
		SELECT meterdata
		DELETE FOR cYear = lcyear AND cPeriod = lcperiod AND EMPTY(cBatch)
		
		llStart      = .F.
		llEnd        = .F.
		llMeterCheck = .F.
		STORE '' TO lcrange1, lcrange2, lcstart, lcend
		m.timported = DATETIME()
		
		m.cUser = m.goApp.cUser
		
		FOR lnx = 1 TO 5000
		
		   IF NOT EMPTY(lcWellCell)
		      lcWell   = lcWellCell + ALLTRIM(STR(lnx))
		   ENDIF
		
		   IF NOT EMPTY(lcProdPrdCell)
		      lcProdPrd = lcProdPrdCell + ALLTRIM(STR(lnx))
		   ENDIF
		
		   IF NOT EMPTY(lcDaysOnCell)
		      lcDaysOn = lcDaysOnCell + ALLTRIM(STR(lnx))
		   ENDIF
		
		   IF NOT EMPTY(lcAmountCell)
		      lcAmount = lcAmountCell + ALLTRIM(STR(lnx))
		   ELSE
		      THISFORM.omessage.warning('The cell for the meter reading was not defined in the integrators setup. Cannot import this integrator')
		      RETURN
		   ENDIF
		
		   IF NOT EMPTY(lcWell)
		      lcwellid  = oleExcel.RANGE(lcWell).VALUE
		   ELSE
		      THISFORM.omessage.warning('The cell for the well id was not defined in the integrators setup. Cannot import this integrator')
		      RETURN
		   ENDIF
		
		   IF ISNULL(lcwellid)
		      lnBad = lnBad + 1
		      IF lnBad > 100
		         EXIT
		      ENDIF
		      LOOP
		   ENDIF
		
		   IF TYPE('lcwellid') # 'C'
		      lcwellid = TRANSFORM(lcwellid)
		   ENDIF
		
		   lcwellid = ALLTRIM(lcwellid)
		
		
		   IF NOT EMPTY(lcwellid)
		      m.cwellid = lcwellid
		
		      SELECT wells
		      SET ORDER TO cwellid
		      IF SEEK(m.cwellid)
		         WAIT WIND NOWAIT 'Importing data for well: ' + m.cwellid
		         lnTotal   = lnTotal + 1
		         m.nAmount = oleExcel.RANGE(lcAmount).VALUE
		
		         SELE meterdata
		         LOCATE FOR cwellid = lcwellid AND cYear = lcyear AND cPeriod = lcperiod AND cIntegrator = m.cIntegrator AND EMPTY(cBatch)
		         IF FOUND()
		            REPL nAmount   WITH m.nAmount, ;
		               timported  WITH m.timported, ;
		               cDataYear  WITH m.cDataYear, ;
		               cDataMonth WITH lcperiod, ;
		               cYear      WITH lcyear, ;
		               cPeriod    WITH lcperiod, ;
		               cMeterID   WITH cwellid, ;
		               cMasterID1  WITH '', ;
		               cMasterID2 WITH '', ;
		               cMasterID3 WITH '', ;
		               cMasterID4 WITH '', ;
		               cMasterID5 WITH '', ;
		               cUser      WITH m.cUser
		         ELSE
		            m.cidmeta  = THISFORM.oregistry.incrementcounter('%shared.counters.meter sub')
		            m.cYear    = lcyear
		            m.cPeriod  = lcperiod
		            m.cMeterID = m.cwellid
		            STORE '' TO m.cMasterID1, m.cMasterID2, m.cMasterID3, m.cMasterID4, m.cMasterID5
		            INSERT INTO meterdata FROM MEMVAR
		         ENDIF
		      ELSE
		         swselect('meters')
		         LOCATE FOR cMeterID = m.cwellid
		         IF FOUND()
		            WAIT WIND NOWAIT 'Importing data for well: ' + m.cwellid
		            lnTotal   = lnTotal + 1
		            m.nAmount = oleExcel.RANGE(lcAmount).VALUE
		
		            SELE meterdata
		            LOCATE FOR cwellid = lcwellid AND cYear = lcyear AND cPeriod = lcperiod AND cIntegrator = m.cIntegrator AND EMPTY(cBatch)
		            IF FOUND()
		               REPL nAmount   WITH m.nAmount, ;
		                  timported  WITH m.timported, ;
		                  cDataYear  WITH m.cDataYear, ;
		                  cDataMonth WITH lcperiod, ;
		                  cYear      WITH lcyear, ;
		                  cPeriod    WITH lcperiod, ;
		                  cMeterID   WITH cwellid, ;
		                  cMasterID1  WITH '', ;
		                  cMasterID2 WITH '', ;
		                  cMasterID3 WITH '', ;
		                  cMasterID4 WITH '', ;
		                  cMasterID5 WITH '', ;
		                  cUser      WITH m.cUser
		            ELSE
		               m.cidmeta  = THISFORM.oregistry.incrementcounter('%shared.counters.meter sub')
		               m.cYear    = lcyear
		               m.cPeriod  = lcperiod
		               m.cMeterID = m.cwellid
		               STORE '' TO m.cMasterID1, m.cMasterID2, m.cMasterID3, m.cMasterID4, m.cMasterID5
		               INSERT INTO meterdata FROM MEMVAR
		            ENDIF
		         ELSE
		            lnBad = lnBad + 1
		         ENDIF
		
		         IF lnBad > 100
		            lnx = 5001
		         ENDIF
		      ENDIF
		   ENDIF
		ENDFOR
		
		WAIT CLEAR
		
		BEGIN TRANSACTION
		lnRetVal = TABLEUPDATE(.T.)
		IF lnRetVal
		   END TRANSACTION
		   THISFORM.omessage.DISPLAY('Imported: ' + ALLT(STR(lnTotal)) + ' chart records.')
		ELSE
		   ROLLBACK
		   THISFORM.omessage.warning('There was a problem importing the data.  Please try again.')
		ENDIF
		
		THISFORM.SAVE()
		
		oleExcel.QUIT()
		
		
		
		
		
		
		
	ENDPROC

	PROCEDURE cboIntegrator.Init
		DODEFAULT()
		lnx = 1
		swselect('integrators')
		SCAN
		    m.cname = cname
		    THIS.ADDLISTITEM(m.cname, lnx, 1)
		    lnx = lnx + 1
		ENDSCAN
		
	ENDPROC

	PROCEDURE Cmdcommandbuttoncustom1.Click
		thisform.Release()
	ENDPROC

	PROCEDURE cmdImport.Click
		thisform.ImportCharts()
	ENDPROC

ENDDEFINE
