*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="dmrwopsum.scx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="2" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Cursor1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor6" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor7" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor8" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor9" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor10" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor13" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor14" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor11" UniqueID="" Timestamp="" />

	AutoOpenTables = .F.
	DataSource = .NULL.
	Height = 429
	Left = 46
	Name = "Dataenvironment"
	Top = 82
	Width = 720

	ADD OBJECT 'Cursor1' AS cursor WITH ;
		Alias = "groups", ;
		CursorSource = "groups", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor1", ;
		Top = 20, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor10' AS cursor WITH ;
		Alias = "glopt", ;
		CursorSource = "glopt", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 415, ;
		Name = "Cursor10", ;
		Top = 20, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor11' AS cursor WITH ;
		Alias = "ownpcts", ;
		CursorSource = "ownpcts", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 448, ;
		Name = "Cursor11", ;
		Top = 295, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor13' AS cursor WITH ;
		Alias = "expcat", ;
		CursorSource = "expcat", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 560, ;
		Name = "Cursor13", ;
		Top = 15, ;
		Width = 91
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor14' AS cursor WITH ;
		Alias = "roundtmp", ;
		CursorSource = "roundtmp", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 404, ;
		Name = "Cursor14", ;
		Top = 158, ;
		Width = 91
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor2' AS cursor WITH ;
		Alias = "wells", ;
		CursorSource = "wells", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 150, ;
		Name = "Cursor2", ;
		Top = 20, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor3' AS cursor WITH ;
		Alias = "expense", ;
		CursorSource = "expense", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 290, ;
		Name = "Cursor3", ;
		Top = 20, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor4' AS cursor WITH ;
		Alias = "income", ;
		CursorSource = "income", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor4", ;
		Top = 140, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor5' AS cursor WITH ;
		Alias = "revsrc", ;
		CursorSource = "revsrc", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 150, ;
		Name = "Cursor5", ;
		Top = 140, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor6' AS cursor WITH ;
		Alias = "sevtax", ;
		CursorSource = "sevtax", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 290, ;
		Name = "Cursor6", ;
		Top = 140, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor7' AS cursor WITH ;
		Alias = "sysctl", ;
		CursorSource = "sysctl", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor7", ;
		Top = 260, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor8' AS cursor WITH ;
		Alias = "aropt", ;
		CursorSource = "aropt", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 150, ;
		Name = "Cursor8", ;
		Top = 260, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor9' AS cursor WITH ;
		Alias = "options", ;
		CursorSource = "options", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 290, ;
		Name = "Cursor9", ;
		Top = 260, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

ENDDEFINE

DEFINE CLASS formdmrwopsum AS frmrptcriteria OF "..\source\appforms.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Runcombo1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblAcctDate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtAcctDate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Swrptlook1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Swgroup1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chklGroupRoy" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblEndID" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="LblGroup" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblBegID" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chklFlatRates" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chklDummy" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkRounding" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblRunNo" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkSelected" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblSelected" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*p: ctype		&& Type of Report: R = Revenue, J = JIB
		*p: lcloserun
		*p: nnextrunno
		*p: nsaveddatasess		&& The original datasetssion id
	*</DefinedPropArrayMethod>

	Caption = "Well Operating Summary"
	ctype = R		&& Type of Report: R = Revenue, J = JIB
	DataSession = 2
	DoCreate = .T.
	Height = 460
	HelpContextID = 213
	Name = "FormDmrwopsum"
	Width = 557
	Swrptcriteriabuttons1.CHKEXPORT.Alignment = 0
	Swrptcriteriabuttons1.CHKEXPORT.Name = "CHKEXPORT"
	Swrptcriteriabuttons1.cmdclose.Name = "cmdclose"
	Swrptcriteriabuttons1.cmdPreview.Name = "cmdPreview"
	Swrptcriteriabuttons1.cmdPrint.Name = "cmdPrint"
	Swrptcriteriabuttons1.Left = 168
	Swrptcriteriabuttons1.Name = "Swrptcriteriabuttons1"
	Swrptcriteriabuttons1.TabIndex = 15
	Swrptcriteriabuttons1.Top = 384
	Swrptcriteriabuttons1.ZOrderSet = 1

	ADD OBJECT 'chklDummy' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = 'Exclude "Dummy" Owners', ;
		Left = 285, ;
		Name = "chklDummy", ;
		TabIndex = 13, ;
		Top = 343, ;
		Value = .F., ;
		Visible = .F., ;
		ZOrderSet = 11
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chklFlatRates' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Include Flat Rates on Report", ;
		Left = 103, ;
		Name = "chklFlatRates", ;
		TabIndex = 11, ;
		Top = 343, ;
		Value = .T., ;
		ZOrderSet = 11
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chklGroupRoy' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Group Royalty Owners Together", ;
		Left = 103, ;
		Name = "chklGroupRoy", ;
		TabIndex = 10, ;
		Top = 306, ;
		ZOrderSet = 8
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkRounding' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Only Print Wells With Rounding", ;
		Left = 285, ;
		Name = "chkRounding", ;
		TabIndex = 12, ;
		Top = 306, ;
		Value = .F., ;
		Visible = .T., ;
		ZOrderSet = 11
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkSelected' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Choose Selected Wells", ;
		Left = 214, ;
		Name = "chkSelected", ;
		TabIndex = 6, ;
		Top = 127, ;
		Value = .F.
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'lblAcctDate' AS lbllabelcustom WITH ;
		Caption = "Accounting Date:", ;
		Left = 54, ;
		Name = "lblAcctDate", ;
		TabIndex = 14, ;
		Top = 97, ;
		Visible = .T.
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblBegID' AS lbllabelcustom WITH ;
		Caption = "First Well:", ;
		Height = 16, ;
		Left = 54, ;
		Name = "lblBegID", ;
		TabIndex = 8, ;
		Top = 165, ;
		Width = 49, ;
		ZOrderSet = 10
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblEndID' AS lbllabelcustom WITH ;
		Caption = "Last Well:", ;
		Height = 16, ;
		Left = 54, ;
		Name = "lblEndID", ;
		TabIndex = 9, ;
		Top = 216, ;
		Width = 49, ;
		ZOrderSet = 9
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'LblGroup' AS lbllabelcustom WITH ;
		AutoSize = .T., ;
		Caption = "Group:", ;
		Height = 16, ;
		Left = 54, ;
		Name = "LblGroup", ;
		TabIndex = 3, ;
		Top = 59, ;
		Visible = .T., ;
		Width = 35, ;
		ZOrderSet = 9
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblRunNo' AS lbllabelcustom WITH ;
		Caption = "Run No", ;
		Left = 54, ;
		Name = "lblRunNo", ;
		TabIndex = 5, ;
		Top = 24, ;
		ZOrderSet = 12
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblSelected' AS lbllabelcustom WITH ;
		Caption = "All IDs Selected", ;
		ForeColor = 0,0,255, ;
		Left = 213, ;
		Name = "lblSelected", ;
		TabIndex = 16, ;
		Top = 193, ;
		Visible = .F.
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Runcombo1' AS runcombo WITH ;
		ColumnWidths = "230,0,0", ;
		cshowwhat = , ;
		Height = 20, ;
		Left = 141, ;
		lnoinit = .T., ;
		Name = "Runcombo1", ;
		TabIndex = 1, ;
		Top = 21, ;
		Width = 360, ;
		ZOrderSet = 0
		*< END OBJECT: ClassLib="..\custom\swcontrol.vcx" BaseClass="combobox" />

	ADD OBJECT 'Swgroup1' AS swgroup WITH ;
		Height = 20, ;
		Left = 141, ;
		lexcludeall = .T., ;
		Name = "Swgroup1", ;
		TabIndex = 2, ;
		Top = 57, ;
		Visible = .T., ;
		Width = 360, ;
		ZOrderSet = 7
		*< END OBJECT: ClassLib="..\custom\swcontrol.vcx" BaseClass="combobox" />

	ADD OBJECT 'Swrptlook1' AS swrptlook WITH ;
		Height = 120, ;
		Left = 141, ;
		Name = "Swrptlook1", ;
		TabIndex = 7, ;
		Top = 160, ;
		Width = 339, ;
		ZOrderSet = 6, ;
		Swlookupbutton1.Name = "Swlookupbutton1", ;
		Swlookupbutton2.Name = "Swlookupbutton2", ;
		txtBegID.clistexpression = wells.cwellid, ;
		txtBegID.clistworkarea = wells, ;
		txtBegID.Name = "txtBegID", ;
		TxtBegName.Height = 20, ;
		TxtBegName.Left = 0, ;
		TxtBegName.Name = "TxtBegName", ;
		TxtBegName.Top = 22, ;
		TxtBegName.Width = 327, ;
		txtEndID.clistexpression = wells.cwellid, ;
		txtEndID.clistworkarea = wells, ;
		txtEndID.Name = "txtEndID", ;
		TxtEndName.Height = 20, ;
		TxtEndName.Left = 0, ;
		TxtEndName.Name = "TxtEndName", ;
		TxtEndName.Top = 73, ;
		TxtEndName.Width = 327
		*< END OBJECT: ClassLib="..\custom\swcontrol.vcx" BaseClass="container" />

	ADD OBJECT 'txtAcctDate' AS dpk WITH ;
		ControlSource = "", ;
		Height = 20, ;
		Left = 141, ;
		Name = "txtAcctDate", ;
		TabIndex = 4, ;
		Top = 93, ;
		Visible = .T., ;
		Width = 75
		*< END OBJECT: ClassLib="..\custom\swdate.vcx" BaseClass="textbox" />
	
	PROCEDURE builddata
		LOCAL lcgroup, tcwellid1, tcwellid2, lcperiod1, lcperiod2, jsaveprd1, jsaveprd2, jtaxwith
		LOCAL lnreportby, jnGross, oSuspense, jTotal, m.nDirectOil, m.nDirectGas, m.nDirectTax
		LOCAL m.nBackWith, m.nTaxWith, jtaxwith, jGross
		LOCAL odist AS 'distproc'
		LOCAL lJIBOnly, lcScan3, lcorder, lcscan1, lcscan2, lcscane, lcscani, lctype, ldirgaspurch
		LOCAL ldiroilpurch, lfoundexp, lfoundinc, llReturn, llexcldummy, llexpsum, lncount, lnmax, lnx
		LOCAL loError, loneman
		LOCAL cRptGroup, cbegrange, ccatdesc, ccategory, cdirect, cendrange, cgrpname, cid, cname
		LOCAL cnamebbl1, cnamebbl2, cnamebbl3, cnamebbl4, cnamemcf1, cnamemcf2, cnamemcf3, cnamemcf4
		LOCAL cnameoth1, cnameoth2, cnameoth3, cnameoth4, cnotes, cownerid, cownname, cpayee, cperiod
		LOCAL csource, ctype, cwellid, cwellname, cwellprd, cyear, ddate, gtotal, hperiod, hyear
		LOCAL jcOwnerID, jdirecttotal, jdirgas, jdiroil, jjibtotal, jsave, jwell, nMKTG, nbackwith
		LOCAL ncompress, ndirectgas, ndirectoil, ndirecttax, ndwe, ngasint, ngastax, ngastx1, ngastx2
		LOCAL ngastx3, ngastx4, ngather, ngross, nnet, nnetcheck, noilint, noiltax, noiltx1, noiltx2
		LOCAL noiltx3, noiltx4, nothtax, nothtx1, nothtx2, nothtx3, nothtx4, nprice, nrevgas, nrevoil
		LOCAL nroygas, nroyoil, nrunno, nsev, nsevgas1, nsevgas2, nsevgas3, nsevgas4, nsevoil1, nsevoil2
		LOCAL nsevoil3, nsevoil4, nsevoth1, nsevoth2, nsevoth3, nsevoth4, ntaxes, ntaxwith, ntotal
		LOCAL ntotalbbl, ntotale, ntotali, ntotalinc, ntotalmcf, ntotalt, ntotnet, nunits, nworkint
		LOCAL oprogress, tcdmbatch, tcgroup, tcperiod1, tcperiod2, tcyear, tdacctdate, tnrunno
		LOCAL wellarray[1], wellcnt, wx, x, llSelected, oWellInv
		
		llReturn = .T.
		
		TRY
		    lnStart = SECONDS()
		    swlogging('Well Rev Op Summary', .T., lnStart)
		
		    tcyear  = THISFORM.runcombo1.LISTITEM[thisform.runcombo1.listitemid, 2]
		    tnrunno = INT(VAL(THISFORM.runcombo1.LISTITEM[thisform.runcombo1.listitemid, 3]))
		    tcwellid1 = THISFORM.swrptlook1.txtbegid.VALUE
		    tcwellid2 = THISFORM.swrptlook1.txtendid.VALUE
		    llSelected  = THISFORM.chkselected.VALUE
		
		   IF NOT llSelected
		      lcSelected = "between(cwellid,tcWellID1,tcWellID2)"
		   ELSE
		      lcSelected = "cwellid in (select cid from selected)"
		   ENDIF
		   
		   *  Get the well id range
		
		    IF llSelected
		       SELECT selected 
		       GO top
		       tcwellid1 = cid
		       GO bott
		       tcwellid2 = cid
		    ENDIF     
		    
		    IF tnrunno  = 0
		        tcgroup    = LEFT(THISFORM.swgroup1.VALUE, 2)
		        tcyear     = STR(YEAR(DATE()), 4)
		        tdacctdate = THISFORM.txtacctdate.VALUE
		    ELSE
		        tcgroup    = THISFORM.runcombo1.LISTITEM[thisform.runcombo1.listitemid, 4]
		        tdacctdate = CTOD(THISFORM.runcombo1.LISTITEM[thisform.runcombo1.listitemid, 7])
		        oSuspense  = CREATEOBJECT('suspense')
		    ENDIF
		
		    tcdmbatch   = THISFORM.runcombo1.LISTITEM[thisform.runcombo1.listitemid, 5]
		
		    IF tnrunno = 0
		        THISFORM.ctitle2 = 'New Run - Group: ' + tcgroup
		    ELSE
		        THISFORM.ctitle2 = 'Run No: ' + PADL(ALLT(STR(tnrunno)), 3, '0') + '/' + tcyear + ' Group: ' + tcgroup
		    ENDIF
		
		    THISFORM.cselectcriteria = ''
		    THISFORM.csortorder      = ''
		    THISFORM.nsaveddatasess  = THISFORM.DATASESSIONID
		
		    tcperiod1 = '01'
		    tcperiod2 = tcperiod1
		    jnGross   = 0
		
		    WAIT WIND NOWAIT 'Processing Report Request...Please Wait'
		
		    llexcldummy = THISFORM.chkldummy.VALUE
		
		*  Call distproc to create the (invtmp) and (wellwork) cursors
		*
		    IF THISFORM.ctype = 'R'
		        THISFORM.ctitle1 = 'Well Revenue Operating Summary'
		        odist = CREATEOBJECT('distproc', tcwellid1, tcwellid2, ;
		              '01', ;
		              tcyear, ;
		              tcgroup, 'W', tdacctdate, .F., tnrunno)
		        odist.dexpdate = tdacctdate
		        odist.drevdate = tdacctdate
		    ELSE
		        THISFORM.ctitle1 = 'Well JIB Operating Summary'
		        odist = CREATEOBJECT('jibproc', tcwellid1, tcwellid2, ;
		              '01', ;
		              tcyear, ;
		              tcgroup, 'W', tdacctdate, .F., tnrunno)
		        odist.dexpdate = tdacctdate
		    ENDIF
		
		    IF tnrunno <> 0 AND THISFORM.ctype = 'R'
		        oSuspense.susptemp(tnrunno, tcyear, tcgroup, .T., THISFORM.ctype)
		    ELSE
		        IF THISFORM.ctype <> 'J'
		            odist.lFlatRates = THISFORM.chklflatRates.VALUE  &&  Whether flat rates should be assumed to be getting released when viewing for the new run
		        ENDIF
		        IF NOT odist.MAIN(.F., .T.)
		            llReturn = .F.
		            EXIT
		        ENDIF
		    ENDIF
		
		    IF THISFORM.ctype = 'J'
		        IF USED('invtmp')
		            USE IN invtmp
		        ENDIF
		        IF USED('wellwork')
		            USE IN wellwork
		        ENDIF
		        IF USED('jibowner')
		            USE DBF('jibowner') AGAIN IN 0 ALIAS invtmp
		        ENDIF
		        IF USED('jibwell')
		            USE DBF('jibwell')  AGAIN IN 0 ALIAS wellwork
		        ENDIF
		    ENDIF
		**-
		**-  Get the expense summary option
		**-
		    swselect('options')
		    GO TOP
		    llexpsum   = lexpsum
		
		**-
		**-  Get the group name from the group table
		**-
		    swselect('groups')
		    SET ORDER TO cgroup
		    DO CASE
		        CASE tcgroup = '**'
		            m.cgrpname = 'All Companies'
		        CASE SEEK(tcgroup)
		            m.cgrpname = cdesc
		        OTHERWISE
		            m.cgrpname = 'Unknown Group'
		    ENDCASE
		
		    STORE 0 TO m.ntotali, m.ntotale, m.ntotalmcf, m.ntotalbbl, m.ntotalt, m.gtotal, ;
		        m.ntotnet, m.nsev
		    m.lfoundinc = .F.
		    m.lfoundexp = .F.
		    m.ntotnet   = 0
		
		    CREATE CURSOR wellop ;
		        (cwellid     c(10), ;
		          cdeck      c(10), ;
		          cyear       c(4), ;
		          cperiod     c(2), ;
		          nrunno      i, ;
		          cwellname    c(30), ;
		          crptgroup    c(2), ;
		          cwellprd     c(8), ;
		          ddate        d, ;
		          ctype        c(5), ;
		          cbegrange    c(5), ;
		          cendrange    c(5), ;
		          csource      c(40), ;
		          nunits       N(12, 2), ;
		          nprice       N(12, 4), ;
		          nroyoil      N(12, 2), ;
		          nroygas      N(12, 2), ;
		          nDirectOil   N(12, 2), ;
		          nDirectGas   N(12, 2), ;
		          nDirectTax   N(12, 2), ;
		          ntotal       N(12, 2), ;
		          cdirect      c(1),    ;
		          lflat        l,       ;
		          ctypeinv     c(1),    ;
		          cnotes       c(30),   ;
		          lprogram     l,       ;
		          ljib         l,       ;
		          loneman      l,       ;
		          cprogcode    c(10),   ;
		          nflatrate    N(12, 2), ;
		          ccategory    c(25), ;
		          ccatdesc     c(25), ;
		          cpayee       c(40), ;
		          cid          c(10), ;
		          cownname     c(25), ;
		          ngasint      N(11, 7),  ;
		          noilint      N(11, 7), ;
		          nworkint     N(11, 7), ;
		          noiltax      N(12, 2), ;
		          ngastax      N(12, 2), ;
		          nothtax      N(12, 2), ;
		          ntaxes       N(12, 2), ;
		          ngross       N(12, 2), ;
		          nTaxWith     N(12, 2), ;
		          nBackWith    N(12, 2),  ;
		          ndwe         N(12, 2), ;
		          nnet         N(12, 2))
		INDEX on cwellid+crptgroup TAG pk
		    
		    CREATE CURSOR prodwell ;
		        (cwellid     c(10), ;
		          nincome     N(12, 2), ;
		          nexpense    N(12, 2), ;
		          ntaxes      N(12,2), ;
		          ngather     N(12,2), ;
		          ncompress   N(12,2), ;
		          lusesev     l)
		*
		*  Get the income and expenses to see if the well should be
		*  included in the report.  We don't include wells without
		*  any income or expenses
		
			SELECT  cwellid, ;
					SUM(nincome + ntrprev + nmiscrev1 + nmiscrev2 + nothrev) AS nincome, ;
					SUM(nsevtaxes) as ntaxes, ;
		         SUM(ncompress) as ncompress, ;
		         SUM(ngather) as ngather, ;
					SUM(nexpense + ntotale1 + ntotale2 + ntotale3 + ntotale4 + ntotale5 + ntotalea + ntotaleb + nplugexp) AS nexpense ;
				FROM invtmp ;
				WHERE &lcSelected ;
				INTO CURSOR tempwell ;
				ORDER BY cwellid, cDeck ;
				GROUP BY cwellid, cDeck
		
		    m.wellcnt = _TALLY
		    IF m.wellcnt = 0
		        llReturn = .F.
		        EXIT
		    ENDIF
		
		    oWellInv = CREATEOBJECT('swbizobj_wellinv')
		    
		    SELECT prodwell
		    APPEND FROM DBF('tempwell') FOR (nincome <> 0 OR nexpense <> 0 OR ntaxes <> 0 OR ngather <> 0 OR ncompress <> 0)
		
		    SELECT cwellid FROM prodwell INTO ARRAY wellarray ORDER BY cwellid
		    m.wellcnt = _TALLY
		
		    lnmax   = m.wellcnt * 4
		    lncount = 0
		
		    IF tnrunno = 0
		        lcscani = "income.cwellid = m.cwellid AND nRunNo = tnRunNo AND dRevDate <= tdAcctDate"
		        IF THISFORM.ctype = 'R'
		            lcscane = "expense.cwellid = m.cwellid AND nRunNoRev = tnRunNo AND dExpDate <= tdAcctDate AND cYear <> 'FIXD'"
		        ELSE
		            lcscane = "expense.cwellid = m.cwellid AND nRunNoJIB = tnRunNo AND dExpDate <= tdAcctDate AND cYear <> 'FIXD'"
		        ENDIF
		    ELSE
		        lcscani = "income.cwellid = m.cwellid AND nRunNo = tnRunNo AND cRunYear = tcYear"
		        IF THISFORM.ctype = 'R'
		            lcscane = "expense.cwellid = m.cwellid AND nRunNoRev = tnRunNo AND cRunYearRev = tcYear AND cYear <> 'FIXD'"
		        ELSE
		            lcscane = "expense.cwellid = m.cwellid AND nRunNoJIB = tnRunNo AND cRunYearJIB = tcYear AND cYear <> 'FIXD'"
		        ENDIF
		    ENDIF
		
		    lcscan1 = "nRuNo = tnRunNo"
		    lcscan2 = " nRunNo = tnRunNo AND cRunYear = tcYear "
		    lcScan3 = " ((nRunNo_In = tnRunNo and cRunYear_In = tcYear) OR (nRunNo = tnRunNo AND cRunYear = tcYear AND EMPTY(cRunYear_In))) "
		    lcorder = "nRunNo, cwellid, ccateg, cownerid, cexpclass"
		
		    m.cnamebbl1 = 'Oil Severance Tax'
		    m.cnamemcf1 = 'Gas Severance Tax'
		    m.cnamebbl2 = 'Oil Production Tax'
		    m.cnamemcf2 = 'Gas Production Tax'
		    m.cnamebbl3 = 'Oil Tax 3'
		    m.cnamebbl4 = 'Oil Tax 4'
		    m.cnamemcf3 = 'Gas Tax 3'
		    m.cnamemcf4 = 'Gas Tax 4'
		    m.cnameoth1 = 'Other Tax 1'
		    m.cnameoth2 = 'Other Tax 2'
		    m.cnameoth3 = 'Other Tax 3'
		    m.cnameoth4 = 'Other Tax 4'
		
		    oprogress = THISFORM.omessage.progressbar('Building Well Operating Statements...')
		    oprogress.setprogressrange(0, lnmax)
		
		    CREATE CURSOR temptax ;
		        (cwellid    c(10), ;
		          cyear     c(4), ;
		          cperiod   c(2), ;
		          cDeck     c(10), ;
		          noiltx1   N(9, 2), ;
		          noiltx2   N(9, 2), ;
		          noiltx3   N(9, 2), ;
		          noiltx4   N(9, 2), ;
		          ngastx1   N(9, 2), ;
		          ngastx2   N(9, 2), ;
		          ngastx3   N(9, 2), ;
		          ngastx4   N(9, 2), ;
		          nothtx1   N(9, 2), ;
		          nothtx2   N(9, 2), ;
		          nothtx3   N(9, 2), ;
		          nothtx4   N(9, 2))
		    CREATE CURSOR temptax1 ;
		        (cwellid    c(10), ;
		          cyear     c(4), ;
		          cperiod   c(2), ;
		          cdeck     c(10), ;
		          noiltx1   N(9, 2), ;
		          noiltx2   N(9, 2), ;
		          noiltx3   N(9, 2), ;
		          noiltx4   N(9, 2), ;
		          ngastx1   N(9, 2), ;
		          ngastx2   N(9, 2), ;
		          ngastx3   N(9, 2), ;
		          ngastx4   N(9, 2), ;
		          nothtx1   N(9, 2), ;
		          nothtx2   N(9, 2), ;
		          nothtx3   N(9, 2), ;
		          nothtx4   N(9, 2))
		
		    SELECT wellop
		    SCATTER MEMVAR BLANK
		
		    IF THISFORM.ctype = 'R'
		        FOR lnx = 1 TO m.wellcnt
		            oprogress.updateprogress(lncount)
		            lncount = lncount + 1
		
		            m.cwellid = wellarray[lnX]
		            SELE wells
		            LOCATE FOR cwellid = m.cwellid
		            IF FOUND()
		                SCATTER MEMVAR
		            ENDIF
		            
		                            swselect('sevtax')
		                SET ORDER TO ctable
		                IF SEEK(m.ctable)
		                    SCATTER MEMVAR
		                    IF EMPTY(m.cnamebbl1)
		                        m.cnamebbl1   = 'Oil Severance Tax'
		                    ENDIF
		                    IF EMPTY(m.cnamebbl2)
		                        m.cnamebbl2   = 'Oil Production Tax'
		                    ENDIF
		                    IF EMPTY(m.cnamebbl3)
		                        m.cnamebbl3  = 'Oil Tax 3'
		                    ENDIF
		                    IF EMPTY(m.cnamebbl4)
		                        m.cnamebbl4  = 'Oil Tax 4'
		                    ENDIF
		                    IF EMPTY(m.cnamemcf1)
		                        m.cnamemcf1   = 'Gas Severance Tax'
		                    ENDIF
		                    IF EMPTY(m.cnamemcf2)
		                        m.cnamemcf2  = 'Gas Production Tax'
		                    ENDIF
		                    IF EMPTY(m.cnamemcf3)
		                        m.cnamemcf3  = 'Gas Tax 3'
		                    ENDIF
		                    IF EMPTY(m.cnamemcf4)
		                        m.cnamemcf4  = 'Gas Tax 4'
		                    ENDIF
		                    IF EMPTY(m.cnameoth1)
		                        m.cnameoth1  = 'Other Tax 1'
		                    ENDIF
		                    IF EMPTY(m.cnameoth2)
		                        m.cnameoth2  = 'Other Tax 2'
		                    ENDIF
		                    IF EMPTY(m.cnameoth3)
		                        m.cnameoth3  = 'Other Tax 3'
		                    ENDIF
		                    IF EMPTY(m.cnameoth4)
		                        m.cnameoth4  = 'Other Tax 4'
		                    ENDIF
		                ENDIF
		
		            STORE 0 TO m.noiltx1, m.noiltx2, m.noiltx3, m.noiltx4, ;
		                m.ngastx1, m.ngastx2, m.ngastx3, m.ngastx4, ;
		                m.nothtx1, m.nothtx2, m.nothtx3, m.nothtx4, lnCompress, lnGather
		            swselect('income')
		            SET ORDER TO wellkey
		            SCAN FOR &lcscani
		                SCATTER MEMVAR
		      
		                IF EMPTY(m.cDeck)
		                   m.cDeck = oWellInv.DOIDeckNameLookup(m.cyear, m.cperiod, m.cwellid)
		                ENDIF    
		                
		                m.cType = m.cSource
		                
		                * Only process new run taxes in this section               
		                IF tnRunNo # 0 AND 'TAX' $ m.cType
		                   LOOP
		                ENDIF 
		                
		* Store one-man owner id
		                jcOwnerID = cOwnerid
		
		                IF ALLT(m.cbegrange) = '/'
		                    m.cbegrange = ''
		                ENDIF
		                IF ALLT(m.cendrange) = '/'
		                    m.cendrange = ''
		                ENDIF
		                IF EMPTY(cOwnerid)
		                    m.loneman = .F.
		                ELSE
		                    m.loneman = .T.
		                ENDIF
		                IF LEFT(m.csource, 1) = 'N'
		* Don't include statement notes
		                    LOOP
		                ENDIF
		                m.cwellprd = m.cyear + '/' + m.cperiod
		                swselect('wells')
		                SET ORDER TO cwellid
		                IF SEEK (m.cwellid)
		                    SCATTER MEMVAR
		                ELSE
		                    LOOP
		                ENDIF
		                STORE .F. TO jdiroil, jdirgas
		                m.cdirect = 'N'
		
		                STORE ' '  TO m.ccategory, m.cpayee, m.cname
		                STORE 0    TO m.ngasint, m.noilint, m.nworkint, m.ngross, m.ndwe, m.nnet, m.nroyoil, m.nroygas
		                m.ctype    = m.csource
		                DO CASE
		                    CASE m.ctype = 'BBL'
		                        lctype      = 'O'
		                        m.crptgroup = 'A1'
		                    CASE m.ctype = 'MCF'
		                        lctype      = 'G'
		                        m.crptgroup = 'A1'
		                    CASE m.ctype = 'OTH'
		                        lctype      = 'P'
		                        m.crptgroup = 'A1'
		                    CASE m.ctype = 'TRANS'
		                        lctype      = 'T'
		                        m.crptgroup = 'A1'
		                    CASE m.ctype = 'MISC1'
		                        lctype      = '1'
		                        m.crptgroup = 'A1'
		                    CASE m.ctype = 'MISC2'
		                        lctype      = '2'
		                        m.crptgroup = 'A1'
		                    CASE m.ctype = 'COMP'
		                        lctype      = 'C'
		                        m.crptgroup = 'A1'    
		                    CASE m.ctype = 'GATH'
		                        lctype      = 'G'
		                        m.crptgroup = 'A1'    
		                    OTHERWISE  &&  Taxes
		                        lctype      = LEFT(m.ctype, 1) + RIGHT(TRIM(m.ctype), 1)
		                        m.crptgroup = 'A2'
		                ENDCASE
		                IF llexcldummy AND EMPTY(jcOwnerID)
		* Exclude the dummy owners
		                    m.ntotalinc = swNetRevenue(m.cwellid, m.ntotalinc, lctype, .F., .T., .T.,,,,,m.cDeck)
		                    m.nunits    = swNetRevenue(m.cwellid, m.nunits,    lctype, .F., .T., .T.,,,,,m.cDeck)
		                ENDIF
		                jGross  = m.ntotalinc
		                jnGross = m.ntotalinc
		
		*
		*  Check for tax exempt owners and remove their share of tax from gross
		*
		                
		                DO CASE
		                    CASE INLIST(m.ctype, 'OTAX1', 'OTAX2', 'OTAX3', 'OTAX4') AND EMPTY(jcOwnerID) AND tnRunno = 0
		                        swselect('wellinv')
		                        SCAN FOR cwellid = m.cwellid AND cDeck = m.cDeck
		                            SCATTER MEMVAR
		                            SELE wells
		                            LOCATE FOR cwellid = m.cwellid
		                            m.ldiroilpurch = ldiroilpurch
		                            m.ldirgaspurch = ldirgaspurch
		                            IF wells.cgroup # tcGroup
		                               LOOP
		                            ENDIF 
		                            swselect('investor')
		                            SET ORDER TO cOwnerid
		                            IF SEEK(m.cOwnerid) AND lexempt
		                                IF m.ctype = 'OTAX1'
		                                    jGross = jGross - (jnGross * (m.nrevtax1 / 100))
		                                ENDIF
		                                IF m.ctype = 'OTAX2'
		                                    jGross = jGross - (jnGross * (m.nrevtax4 / 100))
		                                ENDIF
		                                IF m.ctype = 'OTAX3'
		                                    jGross = jGross - (jnGross * (m.nrevtax7 / 100))
		                                ENDIF
		                                IF m.ctype = 'OTAX4'
		                                    jGross = jGross - (jnGross * (m.nrevtax10 / 100))
		                                ENDIF
		                            ELSE
		                                IF (m.cdirect = 'O' OR m.cdirect = 'B') AND m.ldiroilpurch
		                                    IF m.ctype = 'OTAX1'
		                                        jGross = jGross - (jnGross * (m.nrevtax1 / 100))
		                                    ENDIF
		                                    IF m.ctype = 'OTAX2'
		                                        jGross = jGross - (jnGross * (m.nrevtax4 / 100))
		                                    ENDIF
		                                    IF m.ctype = 'OTAX3'
		                                        jGross = jGross - (jnGross * (m.nrevtax7 / 100))
		                                    ENDIF
		                                    IF m.ctype = 'OTAX4'
		                                        jGross = jGross - (jnGross * (m.nrevtax10 / 100))
		                                    ENDIF
		                                ENDIF
		                            ENDIF
		                        ENDSCAN
		
		                    CASE INLIST(m.ctype, 'GTAX1', 'GTAX2', 'GTAX3', 'GTAX4') AND EMPTY(jcOwnerID) AND tnRunno = 0
		                        swselect('wellinv')
		                        SCAN FOR cwellid = m.cwellid AND cDeck = m.cDeck
		                            SCATTER MEMVAR
		                            swselect('investor')
		                            SET ORDER TO cOwnerid
		                            IF SEEK(m.cOwnerid) AND lexempt
		                                IF m.ctype = 'GTAX1'
		                                    jGross = jGross - (jnGross * (m.nrevtax2 / 100))
		                                ENDIF
		                                IF m.ctype = 'GTAX2'
		                                    jGross = jGross - (jnGross * (m.nrevtax5 / 100))
		                                ENDIF
		                                IF m.ctype = 'GTAX3'
		                                    jGross = jGross - (jnGross * (m.nrevtax8 / 100))
		                                ENDIF
		                                IF m.ctype = 'GTAX4'
		                                    jGross = jGross - (jnGross * (m.nrevtax11 / 100))
		                                ENDIF
		                            ELSE
		                                IF (m.cdirect = 'G' OR m.cdirect = 'B') AND m.ldirgaspurch
		                                    IF m.ctype = 'GTAX1'
		                                        jGross = jGross - (jnGross * (m.nrevtax2 / 100))
		                                    ENDIF
		                                    IF m.ctype = 'GTAX2'
		                                        jGross = jGross - (jnGross * (m.nrevtax5 / 100))
		                                    ENDIF
		                                    IF m.ctype = 'GTAX3'
		                                        jGross = jGross - (jnGross * (m.nrevtax8 / 100))
		                                    ENDIF
		                                    IF m.ctype = 'GTAX4'
		                                        jGross = jGross - (jnGross * (m.nrevtax11 / 100))
		                                    ENDIF
		                                ENDIF
		                            ENDIF
		                        ENDSCAN
		
		                    CASE INLIST(m.ctype, 'PTAX1', 'PTAX2', 'PTAX3', 'PTAX4') AND EMPTY(jcOwnerID) AND tnRunno = 0
		                        swselect('wellinv')
		                        SCAN FOR cwellid = m.cwellid AND cDeck = m.cDeck
		                            SCATTER MEMVAR
		                            swselect('investor')
		                            SET ORDER TO cOwnerid
		                            IF SEEK(m.cOwnerid) AND lexempt
		                                IF m.ctype = 'PTAX1'
		                                    jGross = jGross - (jnGross * (m.nrevtax3 / 100))
		                                ENDIF
		                                IF m.ctype = 'PTAX2'
		                                    jGross = jGross - (jnGross * (m.nrevtax6 / 100))
		                                ENDIF
		                                IF m.ctype = 'PTAX3'
		                                    jGross = jGross - (jnGross * (m.nrevtax9 / 100))
		                                ENDIF
		                                IF m.ctype = 'PTAX4'
		                                    jGross = jGross - (jnGross * (m.nrevtax12 / 100))
		                                ENDIF
		                            ENDIF
		                        ENDSCAN
		                ENDCASE
		
		                m.cdirect   = 'N'
		                DO CASE
		                    CASE jdiroil AND m.ctype = 'BBL'
		                        m.cdirect = 'O'
		                    CASE jdirgas AND m.ctype = 'MCF'
		                        m.cdirect = 'G'
		                    CASE m.lsev1o AND m.ctype = 'OTAX1'
		                        m.cdirect = 'T'
		                        m.noiltx1 = m.noiltx1 + jGross
		                    CASE m.lsev2o AND m.ctype = 'OTAX2'
		                        m.cdirect = 'T'
		                        m.noiltx2 = m.noiltx2 + jGross
		                    CASE m.lsev3o AND m.ctype = 'OTAX3'
		                        m.cdirect = 'T'
		                        m.noiltx3 = m.noiltx3 + jGross
		                    CASE m.lsev4o AND m.ctype = 'OTAX4'
		                        m.cdirect = 'T'
		                        m.noiltx4 = m.noiltx4 + jGross
		                    CASE m.lsev1g AND m.ctype = 'GTAX1'
		                        m.cdirect = 'T'
		                        m.ngastx1 = m.ngastx1 + jGross
		                    CASE m.lsev2g AND m.ctype = 'GTAX2'
		                        m.cdirect = 'T'
		                        m.ngastx2 = m.ngastx2 + jGross
		                    CASE m.lsev3g AND m.ctype = 'GTAX3'
		                        m.cdirect = 'T'
		                        m.ngastx3 = m.ngastx3 + jGross
		                    CASE m.lsev4g AND m.ctype = 'GTAX4'
		                        m.cdirect = 'T'
		                        m.ngastx4 = m.ngastx4 + jGross
		                    CASE m.ctype = 'OTAX1'
		                        m.noiltx1 = m.noiltx1 + jGross
		                    CASE m.ctype = 'OTAX2'
		                        m.noiltx2 = m.noiltx2 + jGross
		                    CASE m.ctype = 'OTAX3'
		                        m.noiltx3 = m.noiltx3 + jGross
		                    CASE m.ctype = 'OTAX4'
		                        m.noiltx4 = m.noiltx4 + jGross
		                    CASE m.ctype = 'GTAX1'
		                        m.ngastx1 = m.ngastx1 + jGross
		                    CASE m.ctype = 'GTAX2'
		                        m.ngastx2 = m.ngastx2 + jGross
		                    CASE m.ctype = 'GTAX3'
		                        m.ngastx3 = m.ngastx3 + jGross
		                    CASE m.ctype = 'GTAX4'
		                        m.ngastx4 = m.ngastx4 + jGross
		                    CASE m.lsev1p AND m.ctype = 'PTAX1'
		                        m.cdirect = 'T'
		                        m.nothtx1 = m.nothtx1 + jGross
		                    CASE m.lsev2p AND m.ctype = 'PTAX2'
		                        m.cdirect = 'T'
		                        m.nothtx2 = m.nothtx2 + jGross
		                    CASE m.lsev3p AND m.ctype = 'PTAX3'
		                        m.cdirect = 'T'
		                        m.nothtx3 = m.nothtx3 + jGross
		                    CASE m.lsev4p AND m.ctype = 'PTAX4'
		                        m.cdirect = 'T'
		                        m.nothtx4 = m.nothtx4 + jGross
		                    CASE m.ctype = 'PTAX1'
		                        m.nothtx1 = m.nothtx1 + jGross
		                    CASE m.ctype = 'PTAX2'
		                        m.nothtx2 = m.nothtx2 + jGross
		                    CASE m.ctype = 'PTAX3'
		                        m.nothtx3 = m.nothtx3 + jGross
		                    CASE m.ctype = 'PTAX4'
		                        m.nothtx4 = m.nothtx4 + jGross
		                    CASE m.cType = 'COMP'
		                        loop
		                    CASE m.cType = 'GATH'
		                        loop    
		                ENDCASE
		
		                m.ntotal = jGross
		                m.gtotal = m.gtotal + m.ntotal
		                swselect('revsrc')
		                SET ORDER TO crevkey
		                IF SEEK(m.crevkey)
		                    m.csource = crevname
		                ENDIF
		                m.nrunno = tnrunno
		                INSERT INTO wellop FROM MEMVAR
		                INSERT INTO temptax1 FROM MEMVAR
		                STORE 0 TO m.noiltx1, m.noiltx2, m.noiltx3, m.noiltx4, ;
		                    m.ngastx1, m.ngastx2, m.ngastx3, m.ngastx4, ;
		                    m.nothtx1, m.nothtx2, m.nothtx3, m.nothtx4
		            ENDSCAN
		
		        ENDFOR
		        m.loneman = .F.
		
		        SELE cwellid, cyear, cperiod, cdeck,;
		            SUM(noiltx1) AS noiltx1, SUM(noiltx2) AS noiltx2, SUM(noiltx3) AS noiltx3, SUM(noiltx4) AS noiltx4, ;
		            SUM(ngastx1) AS ngastx1, SUM(ngastx2) AS ngastx2, SUM(ngastx3) AS ngastx3, SUM(ngastx4) AS ngastx4, ;
		            SUM(nothtx1) AS nothtx1, SUM(nothtx2) AS nothtx2, SUM(nothtx3) AS nothtx3, SUM(nothtx4) AS nothtx4 ;
		            FROM temptax1 ;
		            INTO CURSOR temp ;
		            ORDER BY cwellid, cyear, cperiod, cdeck ;
		            GROUP BY cwellid, cyear, cperiod, cdeck
		        IF _TALLY > 0
		            SELE temptax
		            APPEND FROM DBF('temp')
		        ENDIF
		
		    ENDIF
		
		*
		*  Process taxes
		*
		    FOR x = 1 TO m.wellcnt
		        oprogress.updateprogress(lncount)
		        swselect('wells')
		        SET ORDER TO cwellid
		        IF SEEK(wellarray[X])
		            SCATTER MEMVAR
		        ELSE
		            LOOP
		        ENDIF
		        lncount     = lncount + 1
		        m.crptgroup = 'A2'
		
		        m.cwellid = wellarray(x)
		        SELECT wellwork
		        SCAN FOR cwellid = m.cwellid AND &lcscan2
		            m.hyear   = hyear
		            m.hperiod = hperiod
		            m.cDeck   = cdeck
		
		            IF EMPTY(m.cdeck)
			            m.cDeck = oWellInv.DOIDeckNameLookup(m.hyear, m.hperiod, m.cwellid)
			        ENDIF     
		            
		            SELE temptax
		            LOCATE FOR cwellid == m.cwellid AND cyear + cperiod == m.hyear + m.hperiod AND cdeck = m.cdeck
		            IF FOUND()
		                SCATTER MEMVAR
		                REPL noiltx1 WITH 0, noiltx2 WITH 0, noiltx3 WITH 0 noiltx4 WITH 0, ;
		                    ngastx1 WITH 0, ngastx2 WITH 0, ngastx3 WITH 0 ngastx4 WITH 0
		            ELSE
		                STORE 0 TO m.noiltx1, m.noiltx2, m.noiltx3, m.noiltx4, ;
		                    m.ngastx1, m.ngastx2, m.ngastx3, m.ngastx4, ;
		                    m.nothtx1, m.nothtx2, m.nothtx3, m.nothtx4
		            ENDIF
		            STORE 0 TO m.nroyoil, m.nroygas, ;
		                m.nsevoil1, m.nsevoil2, m.nsevoil3, m.nsevoil4, ;
		                m.nsevgas1, m.nsevgas2, m.nsevgas3, m.nsevgas4, ;
		                m.nsevoth1, m.nsevoth2, m.nsevoth3, m.nsevoth4
		            m.cyear    = hyear
		            m.cperiod  = hperiod
		            m.cwellprd = m.cyear + '/' + m.cperiod
		            IF m.lsev1o AND tnRunno = 0
		                m.nsevoil1 = 0
		            ELSE
		                m.nsevoil1 = m.nsevoil1 + wellwork.ntotbbltxr + wellwork.ntotbbltxw + wellwork.ntotbbltx1 + m.noiltx1
		            ENDIF
		            IF m.lsev2o AND tnRunno = 0
		                m.nsevoil2 = 0
		            ELSE
		                m.nsevoil2 = m.nsevoil2 + wellwork.ntotbbltx2 + m.noiltx2
		            ENDIF
		            IF m.lsev3o AND tnRunno = 0
		                m.nsevoil3 = 0
		            ELSE
		                m.nsevoil3 = m.nsevoil3 + wellwork.ntotbbltx3 + m.noiltx3
		            ENDIF
		            IF m.lsev4o AND tnRunno = 0
		                m.nsevoil4 = 0
		            ELSE
		                m.nsevoil4 = m.nsevoil4 + wellwork.ntotbbltx4 + m.noiltx4
		            ENDIF
		            IF m.lsev1g AND tnRunno = 0
		                m.nsevgas1 = 0
		            ELSE
		                m.nsevgas1 = m.nsevgas1 + wellwork.ntotmcftxr + wellwork.ntotmcftxw + wellwork.ntotmcftx1 + m.ngastx1
		            ENDIF
		            IF m.lsev2g AND tnRunno = 0
		                m.nsevgas2 = 0
		            ELSE
		                m.nsevgas2 = m.nsevgas2 + wellwork.ntotmcftx2 + m.ngastx2
		            ENDIF
		            IF m.lsev3g AND tnRunno = 0
		                m.nsevgas3 = 0
		            ELSE
		                m.nsevgas3 = m.nsevgas3 + wellwork.ntotmcftx3 + m.ngastx3
		            ENDIF
		            IF m.lsev4g AND tnRunno = 0
		                m.nsevgas4 = 0
		            ELSE
		                m.nsevgas4 = m.nsevgas4 + wellwork.ntotmcftx4 + m.ngastx4
		            ENDIF
		            SELE wellwork
		            IF m.lsev1p AND tnRunno = 0
		                m.nsevoth1 = 0
		            ELSE
		                m.nsevoth1 = m.nsevoth1 + wellwork.ntotothtx1 + m.nothtx1
		            ENDIF
		            IF m.lsev2p AND tnRunno = 0
		                m.nsevoth2 = 0
		            ELSE
		                m.nsevoth2 = m.nsevoth2 + wellwork.ntotothtx2 + m.nothtx2
		            ENDIF
		            IF m.lsev3p AND tnRunno = 0
		                m.nsevoth3 = 0
		            ELSE
		                m.nsevoth3 = m.nsevoth3 + wellwork.ntotothtx3 + m.nothtx3
		            ENDIF
		            IF m.lsev4p AND tnRunno = 0
		                m.nsevoth4 = 0
		            ELSE
		                m.nsevoth4 = m.nsevoth4 + wellwork.ntotothtx4 + m.nothtx4
		            ENDIF
		            IF m.lusesev
		                m.nsevoil1 = wellwork.ntotbbltxr + wellwork.ntotbbltxw
		                m.nsevgas1 = wellwork.ntotmcftxr + wellwork.ntotmcftxw
		            ENDIF
		            m.nsev = m.nsevoil1 + m.nsevoil2 + m.nsevoil3 + m.nsevoil4 + ;
		                m.nsevgas1 + m.nsevgas2 + m.nsevgas3 + m.nsevgas4 + ;
		                m.nsevoth1 + m.nsevoth2 + m.nsevoth3 + m.nsevoth4
		
		            IF m.nsevoil1 <> 0
		                m.nsevoil1  = m.nsevoil1 * -1
		                m.crptgroup = 'A2'
		                m.csource   = m.cnamebbl1
		                m.ctype     = 'OTAX1'
		                m.nunits    = 0
		                m.nprice    = 0
		                IF llexcldummy
		                    m.ntotal    = swNetRevenue(m.cwellid, m.nsevoil1, 'O1', .F., .T., .T.,,,,,m.cDeck)
		                ELSE
		                    m.ntotal    = m.nsevoil1
		                ENDIF
		                m.cdirect = 'N'
		                m.nrunno  = tnrunno
		                INSERT INTO wellop FROM MEMVAR
		            ENDIF
		            IF m.nsevgas1 <> 0
		                m.nsevgas1  = m.nsevgas1 * -1
		                m.crptgroup = 'A2'
		                m.csource   = m.cnamemcf1
		                m.ctype     = 'GTAX1'
		                m.nunits    = 0
		                m.nprice    = 0
		                IF llexcldummy
		                    m.ntotal    = swNetRevenue(m.cwellid, m.nsevgas1, 'G1', .F., .T., .T.,,,,,m.cDeck)
		                ELSE
		                    m.ntotal    = m.nsevgas1
		                ENDIF
		                m.cdirect = 'N'
		                m.nrunno  = tnrunno
		                INSERT INTO wellop FROM MEMVAR
		            ENDIF
		            IF m.nsevoth1 <> 0
		                m.nsevoth1  = m.nsevoth1 * -1
		                m.crptgroup = 'A2'
		                m.csource   = m.cnameoth1
		                m.ctype     = 'PTAX1'
		                m.nunits    = 0
		                m.nprice    = 0
		                IF llexcldummy
		                    m.ntotal    = swNetRevenue(m.cwellid, m.nsevoth1, 'P', .F., .T., .T.,,,,,m.cDeck)
		                ELSE
		                    m.ntotal    = m.nsevoth1
		                ENDIF
		                m.cdirect = 'N'
		                m.nrunno  = tnrunno
		                INSERT INTO wellop FROM MEMVAR
		            ENDIF
		            IF m.nsevoil2 <> 0
		                m.nsevoil2  = m.nsevoil2 * -1
		                m.crptgroup = 'A2'
		                m.csource   = m.cnamebbl2
		                m.ctype     = 'OTAX2'
		                m.nunits    = 0
		                m.nprice    = 0
		                IF llexcldummy
		                    m.ntotal    = swNetRevenue(m.cwellid, m.nsevoil2, 'O2', .F., .T., .T.,,,,,m.cDeck)
		                ELSE
		                    m.ntotal    = m.nsevoil2
		                ENDIF
		                m.cdirect = 'N'
		                m.nrunno  = tnrunno
		                INSERT INTO wellop FROM MEMVAR
		            ENDIF
		            IF m.nsevgas2 <> 0
		                m.nsevgas2  = m.nsevgas2 * -1
		                m.crptgroup = 'A2'
		                m.csource   = m.cnamemcf2
		                m.ctype     = 'GTAX2'
		                m.nunits    = 0
		                m.nprice    = 0
		                IF llexcldummy
		                    m.ntotal    = swNetRevenue(m.cwellid, m.nsevgas2, 'G2', .F., .T., .T.,,,,,m.cDeck)
		                ELSE
		                    m.ntotal    = m.nsevgas2
		                ENDIF
		                m.cdirect = 'N'
		                m.nrunno  = tnrunno
		                INSERT INTO wellop FROM MEMVAR
		            ENDIF
		            IF m.nsevoth2 <> 0
		                m.nsevoth2  = m.nsevoth2 * -1
		                m.crptgroup = 'A2'
		                m.csource   = m.cnameoth2
		                m.ctype     = 'PTAX2'
		                m.nunits    = 0
		                m.nprice    = 0
		                IF llexcldummy
		                    m.ntotal    = swNetRevenue(m.cwellid, m.nsevoth2, 'P', .F., .T., .T.,,,,,m.cDeck)
		                ELSE
		                    m.ntotal    = m.nsevoth2
		                ENDIF
		                m.cdirect = 'N'
		                m.nrunno  = tnrunno
		                INSERT INTO wellop FROM MEMVAR
		            ENDIF
		            IF m.nsevoil3 <> 0
		                m.nsevoil3  = m.nsevoil3 * -1
		                m.crptgroup = 'A2'
		                m.csource   = m.cnamebbl3
		                m.ctype     = 'OTAX3'
		                m.nunits    = 0
		                m.nprice    = 0
		                IF llexcldummy
		                    m.ntotal    = swNetRevenue(m.cwellid, m.nsevoil3, 'O3', .F., .T., .T.,,,,,m.cDeck)
		                ELSE
		                    m.ntotal    = m.nsevoil3
		                ENDIF
		                m.cdirect = 'N'
		                m.nrunno  = tnrunno
		                INSERT INTO wellop FROM MEMVAR
		            ENDIF
		            IF m.nsevgas3 <> 0
		                m.nsevgas3  = m.nsevgas3 * -1
		                m.crptgroup = 'A2'
		                m.csource   = m.cnamemcf3
		                m.ctype     = 'GTAX3'
		                m.nunits    = 0
		                m.nprice    = 0
		                IF llexcldummy
		                    m.ntotal    = swNetRevenue(m.cwellid, m.nsevgas3, 'G3', .F., .T., .T.,,,,,m.cDeck)
		                ELSE
		                    m.ntotal    = m.nsevgas3
		                ENDIF
		                m.cdirect = 'N'
		                m.nrunno  = tnrunno
		                INSERT INTO wellop FROM MEMVAR
		            ENDIF
		            IF m.nsevoth3 <> 0
		                m.nsevoth3  = m.nsevoth3 * -1
		                m.crptgroup = 'A2'
		                m.csource   = m.cnameoth3
		                m.ctype     = 'PTAX3'
		                m.nunits    = 0
		                m.nprice    = 0
		                IF llexcldummy
		                    m.ntotal    = swNetRevenue(m.cwellid, m.nsevoth3, 'P', .F., .T., .T.,,,,,m.cDeck)
		                ELSE
		                    m.ntotal    = m.nsevoth3
		                ENDIF
		                m.cdirect = 'N'
		                m.nrunno  = tnrunno
		                INSERT INTO wellop FROM MEMVAR
		            ENDIF
		            IF m.nsevoil4 <> 0
		                m.nsevoil4  = m.nsevoil4 * -1
		                m.crptgroup = 'A2'
		                m.csource   = m.cnamebbl4
		                m.ctype     = 'OTAX4'
		                m.nunits    = 0
		                m.nprice    = 0
		                IF llexcldummy
		                    m.ntotal    = swNetRevenue(m.cwellid, m.nsevoil4, 'O4', .F., .T., .T.,,,,,m.cDeck)
		                ELSE
		                    m.ntotal    = m.nsevoil4
		                ENDIF
		                m.cdirect = 'N'
		                m.nrunno  = tnrunno
		                INSERT INTO wellop FROM MEMVAR
		            ENDIF
		            IF m.nsevgas4 <> 0
		                m.nsevgas4  = m.nsevgas4 * -1
		                m.crptgroup = 'A2'
		                m.csource   = m.cnamemcf4
		                m.ctype     = 'GTAX4'
		                m.nunits    = 0
		                m.nprice    = 0
		                IF llexcldummy
		                    m.ntotal    = swNetRevenue(m.cwellid, m.nsevgas4, 'G4', .F., .T., .T.,,,,,m.cDeck)
		                ELSE
		                    m.ntotal    = m.nsevgas4
		                ENDIF
		                m.cdirect = 'N'
		                m.nrunno  = tnrunno
		                INSERT INTO wellop FROM MEMVAR
		            ENDIF
		            IF m.nsevoth4 <> 0
		                m.nsevoth4  = m.nsevoth4 * -1
		                m.crptgroup = 'A2'
		                m.csource   = m.cnameoth4
		                m.ctype     = 'PTAX4'
		                m.nunits    = 0
		                m.nprice    = 0
		                IF llexcldummy
		                    m.ntotal    = swNetRevenue(m.cwellid, m.nsevoth4, 'P', .F., .T., .T.,,,,,m.cDeck)
		                ELSE
		                    m.ntotal    = m.nsevoth4
		                ENDIF
		                m.cdirect = 'N'
		                m.nrunno  = tnrunno
		                INSERT INTO wellop FROM MEMVAR
		            ENDIF
		        ENDSCAN
		    ENDFOR
		
		*
		*  Process gathering, compression and marketing charges
		*
		
		    FOR x = 1 TO m.wellcnt
		        STORE 0 TO m.nroyoil, m.nroygas
		        m.cwellid = wellarray(x)
		        STORE 0 TO m.ngather, m.ncompress, m.nMKTG
		        SELECT wellwork
		        SCAN FOR cwellid = m.cwellid AND &lcscan2
		            m.ngather   = ngather
		            m.ncompress = ncompress
		            m.nMKTG     = nTotMKTG
		            m.cyear     = hyear
		            m.cperiod   = hperiod
		            m.cwellprd  = m.cyear + '/' + m.cperiod
		            m.cdeck     = cdeck
		            
		            IF EMPTY(m.cdeck)
					    m.cDeck = oWellInv.DOIDeckNameLookup(m.cyear, m.cperiod, m.cwellid)
					ENDIF     
				
		            IF m.ngather <> 0 AND m.nGather # lnGather
		                m.ngather   = m.ngather * -1
		                m.crptgroup = 'A1'
		                m.csource   = 'Gathering Charge'
		                m.ctype     = 'TAX'
		                m.nunits    = 0
		                m.nprice    = 0
		                m.ntotal    = m.ngather
		                m.cdirect   = 'N'
		                m.nrunno    = tnrunno
		                INSERT INTO wellop FROM MEMVAR
		            ENDIF
		            IF m.ncompress <> 0 AND m.nCompress # lnCompress
		                m.ncompress = m.ncompress * -1
		                m.crptgroup = 'A1'
		                m.csource   = 'Compression Charge'
		                m.ctype     = 'TAX'
		                m.nunits    = 0
		                m.nprice    = 0
		                m.ntotal    = m.ncompress
		                m.cdirect   = 'N'
		                m.nrunno    = tnrunno
		                INSERT INTO wellop FROM MEMVAR
		            ENDIF
		            IF m.nMKTG <> 0
		                m.nMKTG     = m.nMKTG * -1
		                m.crptgroup = 'A1'
		                m.csource   = 'Marketing Charge'
		                m.ctype     = 'MKTG'
		                m.nunits    = 0
		                m.nprice    = 0
		                m.ntotal    = m.nMKTG
		                m.cdirect   = 'N'
		                m.nrunno    = tnrunno
		                INSERT INTO wellop FROM MEMVAR
		            ENDIF
		        ENDSCAN
		    ENDFOR
		
		    FOR lnx = 1 TO m.wellcnt
		        IF USED('exptemp')
		            USE IN exptemp
		        ENDIF
		
		        oprogress.updateprogress(lncount)
		        lncount   = lncount + 1
		        m.cwellid = wellarray[lnX]
		        SELE wells
		        LOCATE FOR cwellid = m.cwellid
		        IF FOUND()
		            SCATTER MEMVAR
		        ENDIF
		        IF llexpsum         && Summarize expenses
					SELECT  expense.cdeck, expense.cwellid, ccateg, cyear, cperiod, crefid, dexpdate, SUM(namount) AS namount, ;
							cpayee, cmemo, cvendorid, cpaidbyck, cexpclass, nsaltwater, cprdpaid, ccatcode, ;
							lfixed, laptran, cbatch, expense.cOwnerid, loneman, nrunnorev, crunyearrev, nrunnojib, crunyearjib ;
						FROM expense JOIN wells ON expense.cwellid == wells.cwellid ;
						WHERE &lcscane ;
						AND NOT INLIST(expense.ccatcode,'GATH','COMP') ;
						AND IIF(tcgroup <> '**', wells.cGroup = tcgroup, .T.)  ;
						INTO CURSOR exptemp ;
						ORDER BY expense.cdeck, expense.cwellid, ccateg, ccatcode, expense.cOwnerid, cexpclass ;
						GROUP BY expense.cdeck, expense.cwellid, ccateg, ccatcode, expense.cOwnerid, cexpclass
		            SELECT exptemp
		        ELSE
					SELECT  wells.cwellname, expense.* ;
						FROM expense JOIN wells ON expense.cwellid == wells.cwellid ;
						WHERE &lcscane ;
						  AND NOT INLIST(expense.ccatcode,'GATH','COMP') ;
						  AND IIF(tcgroup <> '**', wells.cGroup = tcgroup, .T.)  ;
						INTO CURSOR exptemp ;
						ORDER BY expense.cdeck, expense.cwellid, ccateg, ccatcode, expense.cOwnerid, cexpclass
		            SELECT exptemp
		        ENDIF
		        GO TOP
		        SCAN
		            SCATTER MEMVAR
		            
		            IF EMPTY(m.cDeck)
		               m.cDeck = oWellInv.DOIDeckNameLookup(m.cyear, m.cperiod, m.cwellid)
		            ENDIF    
		
		            swselect('vendor')
		            SET ORDER TO cvendorid
		            IF SEEK(m.cvendorid)
		                m.cpayee = csortfield
		            ENDIF
		
		* Check for JIB only expense codes
		            swselect('expcat')
		            SET ORDER TO ccatcode
		            IF SEEK(m.ccatcode)
		                m.lJIBOnly = lJIBOnly
		                m.ccatdesc = cdescrip
		            ELSE
		                m.ccatdesc = ''
		                m.lJIBOnly = .F.
		            ENDIF
		
		*  Don't process marketing charges here.
		            IF m.ccatcode = 'MKTG'
		                LOOP
		            ENDIF
		            IF EMPTY(m.cOwnerid)
		                m.loneman = .F.
		            ELSE
		                m.loneman = .T.
		            ENDIF
		            m.ddate = m.dexpdate
		            IF m.lfixed = .T.
		                m.cwellprd = '*' + m.cyear + '/' + m.cperiod
		            ELSE
		                m.cwellprd = m.cyear + '/' + m.cperiod
		            ENDIF
		
		            m.crptgroup = 'B'
		
		            IF THISFORM.ctype = 'R'
		* Don't process JIB only expenses here
		                IF m.lJIBOnly
		                    LOOP
		                ENDIF
		                IF llexcldummy
		                    IF NOT EMPTY(m.cOwnerid)
		                        m.ntotal = m.namount
		                    ELSE
		                        m.ntotal    = swNetExp(m.namount, m.cwellid, .T., m.cexpclass, 'N', .F., .F., m.ccatcode, m.cDeck)
		                    ENDIF
		                ELSE
		                    IF NOT EMPTY(m.cOwnerid)
		                        SELE wellinv
		                        LOCATE FOR cwellid = m.cwellid AND cOwnerid = m.cOwnerid AND cDeck = m.cDeck
		                        IF FOUND()
		                            IF wellinv.ljib = .F.
		                                m.ntotal = m.namount
		                            ELSE
		                                m.ntotal = 0
		                            ENDIF
		                        ELSE
		                            m.ntotal = 0
		                        ENDIF
		                    ELSE
		                        m.ntotal  = swNetExp(m.namount, m.cwellid, .T., m.cexpclass, 'D', .F., .F., m.ccatcode, m.cDeck)
		                    ENDIF
		                ENDIF
		            ELSE
		                IF llexcldummy
		                    IF NOT EMPTY(m.cOwnerid)
		                        m.ntotal = m.namount
		                    ELSE
		                        m.ntotal = swNetExp(m.namount, m.cwellid, .T., m.cexpclass, 'J', .F., .F., m.ccatcode, m.cDeck)
		                    ENDIF
		                ELSE
		                    IF NOT EMPTY(m.cOwnerid)
		                        SELE wellinv
		                        LOCATE FOR cwellid = m.cwellid AND cOwnerid = m.cOwnerid AND ctypeinv = 'W' AND cDeck = m.cDeck
		                        IF FOUND()
		                            IF wellinv.ljib = .T. OR m.lJIBOnly
		                                m.ntotal = m.namount
		                            ELSE
		                                m.ntotal = 0
		                            ENDIF
		                        ELSE
		                            m.ntotal = 0
		                        ENDIF
		                    ELSE
		                        m.ntotal    = swNetExp(m.namount, m.cwellid, .T., m.cexpclass, 'J', .F., .F., m.ccatcode, m.cDeck)
		                    ENDIF
		                ENDIF
		            ENDIF
		            IF m.ntotal = 0
		                LOOP
		            ENDIF
		            m.ctype     = 'EXP'
		            m.ccategory = m.ccateg
		            m.cnotes    = m.cmemo
		            STORE ' '  TO m.csource
		            STORE 0    TO m.nunits, m.nprice, m.noilint, m.ngasint, m.nworkint, m.ngross, ;
		                m.ndwe, m.nnet
		            m.nrunno = tnrunno
		            INSERT INTO wellop FROM MEMVAR
		        ENDSCAN
		    ENDFOR
		    jtaxwith = 0
		
		*
		*  Sum the owners together in case there's multiple periods being processed in this run
		*
		*  Gets the max of cdirect so direct paid oil will show when more than one record exists
		*  per owner.  This is when the division of interest has an oil interest and a gas interest.
		*  We can't have the N on direct gas affect the O on direct oil.  Needs a better solution
		*  because now it doesn't handle direct gas in these situations.
		
			SELECT  cwellid, invtmp.cOwnerid, ctypeinv, ctypeint, nworkint, lflat, ;
					cprogcode, MAX(cdirect) AS cdirect, lprogram, hperiod, hyear, nrunno, crunyear, ljib, nRunNo_In, cRunYear_In, ;
					SUM(nincome) AS nincome, SUM(nexpense) AS nexpense, SUM(noiltax1) AS noiltax1, ;
					SUM(noiltax2) AS noiltax2, SUM(noiltax3) AS noiltax3, SUM(noiltax4) AS noiltax4, ;
					SUM(ngastax1) AS ngastax1, SUM(ngastax2) AS ngastax2, SUM(ngastax3) AS ngastax3, ;
					SUM(ngastax4) AS ngastax4, SUM(nothtax1) AS nothtax1, SUM(nothtax2) AS nothtax2, ;
					SUM(nothtax3) AS nothtax3, SUM(nothtax4) AS nothtax4, SUM(ntotale1) AS ntotale1, ;
					SUM(ntotale2) AS ntotale2, SUM(ntotale3) AS ntotale3, SUM(ntotale4) AS ntotale4, ;
					SUM(ntotale5) AS ntotale5, SUM(ntotalea) AS ntotalea, SUM(ntotaleb) AS ntotaleb, ;
					SUM(nTaxWith) AS nTaxWith, SUM(nBackWith) AS nBackWith, SUM(nmktgexp) AS nmktgexp, ;
					SUM(noilrev) AS noilrev, SUM(ngasrev) AS ngasrev, SUM(ntrprev) AS ntrprev, ;
					SUM(nothrev) AS nothrev, SUM(nmiscrev1) AS nmiscrev1, SUM(nmiscrev2) AS nmiscrev2, ;
					IIF(nrevoil # 0, AVG(nrevoil), MAX(nrevoil)) AS nrevoil, IIF(nrevgas # 0, AVG(nrevgas), MAX(nrevgas)) AS nrevgas, ;
					SUM(ngather) AS ngather, SUM(ncompress) AS ncompress, SUM(nplugexp) as nplugexp,;
					SUM(nnetcheck) AS nnetcheck ;
				FROM invtmp, investor ;
				WHERE invtmp.cOwnerid = investor.cOwnerid ;
					AND &lcScan3 ;
				INTO CURSOR owntmp ;
				ORDER BY invtmp.cwellid, invtmp.cOwnerid, invtmp.cprogcode, invtmp.ctypeinv, invtmp.lflat  ;
				GROUP BY invtmp.cwellid, invtmp.cOwnerid, invtmp.cprogcode, invtmp.ctypeinv, invtmp.lflat
		
		    STORE 0 TO m.noiltax, m.ngastax, m.nothtax, m.ntaxes
		    IF THISFORM.chklgrouproy.VALUE
				SELECT  cwellid, invtmp.cOwnerid, 'L' AS ctypeinv, ctypeint, ;
						cprogcode, cdirect, lprogram, hperiod, hyear, nrunno, crunyear, ljib, nRunNo_In, cRunYear_In, ;
						SUM(nincome) AS nincome, SUM(nexpense) AS nexpense, SUM(noiltax1) AS noiltax1, ;
						SUM(noiltax2) AS noiltax2, SUM(noiltax3) AS noiltax3, SUM(noiltax4) AS noiltax4, ;
						SUM(ngastax1) AS ngastax1, SUM(ngastax2) AS ngastax2, SUM(ngastax3) AS ngastax3, ;
						SUM(ngastax4) AS ngastax4, SUM(nothtax1) AS nothtax1, SUM(nothtax2) AS nothtax2, ;
						SUM(nothtax3) AS nothtax3, SUM(nothtax4) AS nothtax4, SUM(ntotale1) AS ntotale1, ;
						SUM(ntotale2) AS ntotale2, SUM(ntotale3) AS ntotale3, SUM(ntotale4) AS ntotale4, ;
						SUM(ntotale5) AS ntotale5, SUM(ntotalea) AS ntotalea, SUM(ntotaleb) AS ntotaleb, ;
						SUM(nTaxWith) AS nTaxWith, SUM(nBackWith) AS nBackWith, SUM(nmktgexp) AS nmktgexp, ;
						SUM(noilrev) AS noilrev, SUM(ngasrev) AS ngasrev, SUM(ntrprev) AS ntrprev, ;
						SUM(nothrev) AS nothrev, SUM(nmiscrev1) AS nmiscrev1, SUM(nmiscrev2) AS nmiscrev2, ;
						AVG(nrevoil) AS nrevoil, AVG(nrevgas) AS nrevgas, ;
						SUM(ngather) AS ngather, SUM(ncompress) AS ncompress, SUM(nplugexp) as nplugexp,;
						SUM(nnetcheck) AS nnetcheck ;
					FROM invtmp, investor ;
					WHERE invtmp.cOwnerid = investor.cOwnerid ;
						AND INLIST(ctypeinv, 'L', 'O') ;
						AND &lcScan3 ;
					INTO CURSOR roytmp ;
					ORDER BY cwellid;
					GROUP BY cwellid
		    ENDIF
		
		    FOR wx = 1 TO m.wellcnt
		        oprogress.updateprogress(lncount)
		        lncount      = lncount + 1
		        m.nDirectTax = 0
		        STORE 0 TO m.nDirectTax
		        IF THISFORM.chklgrouproy.VALUE
		            SELECT roytmp
		        ELSE
		            SELECT owntmp
		        ENDIF
		        SCAN FOR cwellid = wellarray(wx) AND ;
		                (ctypeinv = 'L' OR ctypeinv = 'O') AND &lcScan3
		            SCATTER MEMVAR
		            IF THISFORM.chklgrouproy.VALUE
		                m.cOwnerid = 'ROY'
		                m.cownname = 'Royalty Owners'
		                SELE SUM(nrevoil) AS nrevoil, SUM(nrevgas) AS nrevgas ;
		                    FROM wellinv ;
		                    WHERE cwellid = m.cwellid ;
		                    AND INLIST(ctypeinv, 'L', 'O') ;
		                    INTO CURSOR tmproy ;
		                    ORDER BY cwellid ;
		                    GROUP BY cwellid
		
		                SELE tmproy
		                m.nrevoil = nrevoil
		                m.nrevgas = nrevgas
		            ELSE
		                swselect('investor')
		                SET ORDER TO cOwnerid
		                SEEK (m.cOwnerid)
		                IF FOUND()
		                    IF llexcldummy AND investor.ldummy
		                        LOOP
		                    ENDIF
		                    m.cownname = cownname
		                ELSE
		                    swselect('programs')
		                    SET ORDER TO cprogcode
		                    SEEK m.cOwnerid
		                    IF FOUND()
		                        m.cownname = cprogname
		                    ELSE
		                        m.cownname = 'Unknown'
		                    ENDIF
		                ENDIF
		            ENDIF
		            SELE wells
		            LOCATE FOR cwellid = m.cwellid
		            m.ldiroilpurch = ldiroilpurch
		            m.ldirgaspurch = ldirgaspurch
		            m.noiltax      = m.noiltax + m.noiltax1 + m.noiltax2 + m.noiltax3 + m.noiltax4
		            m.ngastax      = m.ngastax + m.ngastax1 + m.ngastax2 + m.ngastax3 + m.ngastax4
		            m.nothtax      = m.nothtax + m.nothtax1 + m.nothtax2 + m.nothtax3 + m.nothtax4
		            m.ntaxes       = m.noiltax + m.ngastax + m.nothtax + m.nTaxWith + m.nBackWith
		            jtaxwith       = jtaxwith + m.nTaxWith
		
		            m.crptgroup = 'C'
		            m.ngross    = m.nincome - m.ngather - m.ncompress - m.nmktgexp
		            m.ndwe      = m.nexpense + m.ntotale1 + m.ntotale2 + m.ntotale3 + ;
		                          m.ntotale4 + m.ntotale5 + m.ntotalea + m.ntotaleb + ;
		                          m.nPlugExp
		            IF m.lprogram = .T.
		                m.nnet   = 0
		            ELSE
		                m.nnet   = m.nnetcheck
		            ENDIF
		            DO CASE
		                CASE m.cdirect = 'O'
		                    m.nDirectOil = m.noilrev
		                    m.ngross     = m.ngross - m.noilrev
		                    m.nDirectGas = 0
		                    IF m.lsev1o AND m.ldiroilpurch
		                        m.nDirectTax = m.noiltax1
		                        m.ntaxes     = m.ntaxes - m.noiltax1
		                    ENDIF
		                    IF m.lsev2o AND m.ldiroilpurch
		                        m.nDirectTax = m.nDirectTax + m.noiltax2
		                        m.ntaxes     = m.ntaxes - m.noiltax2
		                    ENDIF
		                    IF m.lsev3o AND m.ldiroilpurch
		                        m.nDirectTax = m.nDirectTax + m.noiltax3
		                        m.ntaxes     = m.ntaxes - m.noiltax3
		                    ENDIF
		                    IF m.lsev4o AND m.ldiroilpurch
		                        m.nDirectTax = m.nDirectTax + m.noiltax4
		                        m.ntaxes     = m.ntaxes - m.noiltax4
		                    ENDIF
		                CASE m.cdirect = 'G'
		                    m.nDirectGas = m.ngasrev
		                    m.ngross     = m.ngross - m.ngasrev
		                    m.nDirectOil = 0
		                    IF m.lsev1g AND m.ldirgaspurch
		                        m.nDirectTax = m.ngastax1
		                        m.ntaxes     = m.ntaxes - m.ngastax1
		                    ENDIF
		                    IF m.lsev2g AND m.ldirgaspurch
		                        m.nDirectTax = m.nDirectTax + m.ngastax2
		                        m.ntaxes     = m.ntaxes - m.ngastax2
		                    ENDIF
		                    IF m.lsev3g AND m.ldirgaspurch
		                        m.nDirectTax = m.nDirectTax + m.ngastax3
		                        m.ntaxes     = m.ntaxes - m.ngastax3
		                    ENDIF
		                    IF m.lsev4g AND m.ldirgaspurch
		                        m.nDirectTax = m.nDirectTax + m.ngastax4
		                        m.ntaxes     = m.ntaxes - m.ngastax4
		                    ENDIF
		                CASE m.cdirect = 'B'
		                    m.nDirectGas = m.ngasrev
		                    m.nDirectOil = m.noilrev
		                    m.ngross     = m.ngross - m.noilrev - m.ngasrev
		                    IF m.lsev1o AND m.ldiroilpurch
		                        m.nDirectTax = m.noiltax1
		                        m.ntaxes     = m.ntaxes - m.noiltax1
		                    ENDIF
		                    IF m.lsev2o AND m.ldiroilpurch
		                        m.nDirectTax = m.nDirectTax + m.noiltax2
		                        m.ntaxes     = m.ntaxes - m.noiltax2
		                    ENDIF
		                    IF m.lsev3o AND m.ldiroilpurch
		                        m.nDirectTax = m.nDirectTax + m.noiltax3
		                        m.ntaxes     = m.ntaxes - m.noiltax3
		                    ENDIF
		                    IF m.lsev4o AND m.ldiroilpurch
		                        m.nDirectTax = m.nDirectTax + m.noiltax4
		                        m.ntaxes     = m.ntaxes - m.noiltax4
		                    ENDIF
		                    IF m.lsev1g AND m.ldirgaspurch
		                        m.nDirectTax = m.nDirectTax + m.ngastax1
		                        m.ntaxes     = m.ntaxes - m.ngastax1
		                    ENDIF
		                    IF m.lsev2g AND m.ldirgaspurch
		                        m.nDirectTax = m.nDirectTax + m.ngastax2
		                        m.ntaxes     = m.ntaxes - m.ngastax2
		                    ENDIF
		                    IF m.lsev3g AND m.ldirgaspurch
		                        m.nDirectTax = m.nDirectTax + m.ngastax3
		                        m.ntaxes     = m.ntaxes - m.ngastax3
		                    ENDIF
		                    IF m.lsev4g AND m.ldirgaspurch
		                        m.nDirectTax = m.nDirectTax + m.ngastax4
		                        m.ntaxes     = m.ntaxes - m.ngastax4
		                    ENDIF
		                OTHERWISE
		                    m.nDirectOil = 0
		                    m.nDirectGas = 0
		                    m.nDirectTax = 0
		            ENDCASE
		            m.ngasint = m.nrevgas
		            m.noilint = m.nrevoil
		            m.cid     = m.cOwnerid
		            m.ddate   = {}
		            STORE ' '  TO m.csource, m.ctype, m.ccategory, m.cpayee
		            STORE 0    TO m.nunits, m.nprice, m.ntotal
		            m.nrunno = tnrunno
		            INSERT INTO wellop FROM MEMVAR
		            STORE 0 TO m.noiltax, m.ngastax, m.nothtax, m.ntaxes
		        ENDSCAN
		
		        SELECT owntmp
		        SET ORDER TO 0
		        STORE 0 TO m.noiltax, m.ngastax, m.nothtax, m.ntaxes
		        GO TOP
		        SCAN FOR cwellid = wellarray(wx) AND ;
		                (ctypeinv <> 'L' AND ctypeinv <> 'O') AND &lcScan3
		            SCATTER MEMVAR
		            swselect('investor')
		            SET ORDER TO cOwnerid
		            IF SEEK (m.cOwnerid)
		                IF llexcldummy AND investor.ldummy
		                    LOOP
		                ENDIF
		                m.cownname = cownname
		            ELSE
		                swselect('programs')
		                SET ORDER TO progcode
		                SEEK m.cOwnerid
		                IF FOUND()
		                    m.cownname = cprogname
		                ELSE
		                    m.cownname = 'Unknown'
		                ENDIF
		            ENDIF
		            SELE wells
		            LOCATE FOR cwellid = m.cwellid
		            IF FOUND()
		                m.ldiroilpurch = ldiroilpurch
		                m.ldirgaspurch = ldirgaspurch
		            ELSE
		                m.ldiroilpurch = .F.
		                m.ldirgaspurch = .F.
		            ENDIF
		            m.noiltax   = m.noiltax + m.noiltax1 + m.noiltax2 + m.noiltax3 + m.noiltax4
		            m.ngastax   = m.ngastax + m.ngastax1 + m.ngastax2 + m.ngastax3 + m.ngastax4
		            m.nothtax   = m.nothtax + m.nothtax1 + m.nothtax2 + m.nothtax3 + m.nothtax4
		            m.ntaxes    = m.noiltax + m.ngastax + m.nothtax + m.nTaxWith + m.nBackWith
		            jtaxwith    = jtaxwith + m.nTaxWith
		            m.crptgroup = 'D'
		            m.ngross    = m.nincome - m.ngather - m.ncompress - m.nmktgexp
		            IF investor.ldummy AND THISFORM.ctype = 'J'
		                m.ndwe      = 0
		                m.nnetcheck = 0
		            ELSE
		                m.ndwe      = m.nexpense + m.ntotale1 + m.ntotale2 + m.ntotale3 + ;
		                              m.ntotale4 + m.ntotale5 + m.ntotalea + m.ntotaleb + ;
		                              m.nPlugExp
		            ENDIF
		
		            DO CASE
		                CASE m.cdirect = 'O'
		                    m.nDirectOil = noilrev
		                    m.nDirectGas = 0
		                    m.ngross     = m.ngross - m.noilrev
		                    IF m.lsev1o AND m.ldiroilpurch
		                        m.nDirectTax = m.noiltax1
		                        m.ntaxes     = m.ntaxes - m.noiltax1
		                    ENDIF
		                    IF m.lsev2o AND m.ldiroilpurch
		                        m.nDirectTax = m.nDirectTax + m.noiltax2
		                        m.ntaxes     = m.ntaxes - m.noiltax2
		                    ENDIF
		                    IF m.lsev3o AND m.ldiroilpurch
		                        m.nDirectTax = m.nDirectTax + m.noiltax3
		                        m.ntaxes     = m.ntaxes - m.noiltax3
		                    ENDIF
		                    IF m.lsev4o AND m.ldiroilpurch
		                        m.nDirectTax = m.nDirectTax + m.noiltax4
		                        m.ntaxes     = m.ntaxes - m.noiltax4
		                    ENDIF
		                CASE m.cdirect = 'G'
		                    m.nDirectGas = ngasrev
		                    m.nDirectOil = 0
		                    m.ngross     = m.ngross - m.ngasrev
		                    IF m.lsev1g AND m.ldirgaspurch
		                        m.nDirectTax = m.ngastax1
		                        m.ntaxes     = m.ntaxes - m.ngastax1
		                    ENDIF
		                    IF m.lsev2g AND m.ldirgaspurch
		                        m.nDirectTax = m.nDirectTax + m.ngastax2
		                        m.ntaxes     = m.ntaxes - m.ngastax2
		                    ENDIF
		                    IF m.lsev3g AND m.ldirgaspurch
		                        m.nDirectTax = m.nDirectTax + m.ngastax3
		                        m.ntaxes     = m.ntaxes - m.ngastax3
		                    ENDIF
		                    IF m.lsev4g AND m.ldirgaspurch
		                        m.nDirectTax = m.nDirectTax + m.ngastax4
		                        m.ntaxes     = m.ntaxes - m.ngastax4
		                    ENDIF
		                CASE m.cdirect = 'B'
		                    m.nDirectGas = ngasrev
		                    m.nDirectOil = noilrev
		                    m.ngross     = m.ngross - m.noilrev - m.ngasrev
		                    IF m.lsev1o AND m.ldiroilpurch
		                        m.nDirectTax = m.noiltax1
		                        m.ntaxes     = m.ntaxes - m.noiltax1
		                    ENDIF
		                    IF m.lsev2o AND m.ldiroilpurch
		                        m.nDirectTax = m.nDirectTax + m.noiltax2
		                        m.ntaxes     = m.ntaxes - m.noiltax2
		                    ENDIF
		                    IF m.lsev3o AND m.ldiroilpurch
		                        m.nDirectTax = m.nDirectTax + m.noiltax3
		                        m.ntaxes     = m.ntaxes - m.noiltax3
		                    ENDIF
		                    IF m.lsev4o AND m.ldiroilpurch
		                        m.nDirectTax = m.nDirectTax + m.noiltax4
		                        m.ntaxes     = m.ntaxes - m.noiltax4
		                    ENDIF
		                    IF m.lsev1g AND m.ldirgaspurch
		                        m.nDirectTax = m.nDirectTax + m.ngastax1
		                        m.ntaxes     = m.ntaxes - m.ngastax1
		                    ENDIF
		                    IF m.lsev2g AND m.ldirgaspurch
		                        m.nDirectTax = m.nDirectTax + m.ngastax2
		                        m.ntaxes     = m.ntaxes - m.ngastax2
		                    ENDIF
		                    IF m.lsev3g AND m.ldirgaspurch
		                        m.nDirectTax = m.nDirectTax + m.ngastax3
		                        m.ntaxes     = m.ntaxes - m.ngastax3
		                    ENDIF
		                    IF m.lsev4g AND m.ldirgaspurch
		                        m.nDirectTax = m.nDirectTax + m.ngastax4
		                        m.ntaxes     = m.ntaxes - m.ngastax4
		                    ENDIF
		                OTHERWISE
		                    m.nDirectOil = 0
		                    m.nDirectGas = 0
		                    m.nDirectTax = 0
		            ENDCASE
		
		            IF m.lprogram = .T.
		                m.nnet   = 0
		            ELSE
		                m.nnet      = m.nnetcheck
		            ENDIF
		            m.ngasint = m.nrevgas
		            m.noilint = m.nrevoil
		            m.cid     = m.cOwnerid
		            m.ddate   = {}
		            STORE ' '  TO m.csource, m.ctype, m.ccategory, m.cpayee
		            STORE 0    TO m.nunits, m.nprice, m.ntotal
		            m.nrunno = tnrunno
		            INSERT INTO wellop FROM MEMVAR
		            STORE 0 TO m.noiltax, m.ngastax, m.nothtax, m.ntaxes
		        ENDSCAN
		    ENDFOR
		
		    jwell = ' '
		    STORE 0 TO jTotal, jdirecttotal, jjibtotal, jtaxwith
		
		    SELECT wellop
		    SCAN
		        SCATTER MEMVAR
		
		        jsave = m.cwellid
		        IF jwell <> ' ' AND jwell <> m.cwellid
		            m.ntotal    = jTotal
		            m.cwellid   = jwell
		            m.crptgroup = 'E'
		            m.nrunno    = tnrunno
		            INSERT INTO wellop FROM MEMVAR
		            m.cwellid = jsave
		            jTotal    = 0
		
		            IF jdirecttotal <> 0
		                m.ntotal    = jdirecttotal
		                m.cwellid   = jwell
		                m.crptgroup = 'F'
		                m.nrunno    = tnrunno
		                INSERT INTO wellop FROM MEMVAR
		                m.cwellid    = jsave
		                jdirecttotal = 0
		            ENDIF
		            IF jjibtotal <> 0
		                m.ntotal    = jjibtotal
		                m.crptgroup = 'G'
		                m.cwellid   = jwell
		                m.nrunno    = tnrunno
		                INSERT INTO wellop FROM MEMVAR
		                jjibtotal = 0
		                m.cwellid = jsave
		            ENDIF
		            IF jtaxwith <> 0
		                m.ntotal    = jtaxwith
		                m.crptgroup = 'H'
		                m.cwellid   = jwell
		                m.nrunno    = tnrunno
		                INSERT INTO wellop FROM MEMVAR
		                jtaxwith  = 0
		                m.cwellid = jsave
		            ENDIF
		        ENDIF
		        DO CASE
		            CASE m.crptgroup = 'A'
		                jTotal = jTotal + m.ntotal             && Add income
		            CASE m.crptgroup = 'B'
		                jTotal = jTotal - m.ntotal             && Subtract expenses
		            CASE m.crptgroup = 'C'
		                jTotal       = jTotal - m.nnet - m.nDirectOil - m.nDirectGas + m.nDirectTax - m.nTaxWith - m.nBackWith        && Subtract royalty amounts
		                jdirecttotal = jdirecttotal + m.nDirectOil + m.nDirectGas - m.nDirectTax       && Add direct paid totals
		                jtaxwith     = jtaxwith + m.nTaxWith
		            CASE m.crptgroup = 'D'
		                jdirecttotal = jdirecttotal + m.nDirectOil + m.nDirectGas - m.nDirectTax         && Add direct paid totals
		                jtaxwith     = jtaxwith + m.nTaxWith
		                IF m.ljib
		                    jjibtotal = jjibtotal + m.ndwe                                           && Add JIB Totals
		                    IF THISFORM.ctype = 'R'
		                        jTotal = jTotal - m.nnet - m.nDirectOil - m.nDirectGas + m.nDirectTax + m.ndwe - m.nTaxWith - m.nBackWith  && Subtract working amounts
		                    ELSE
		                        jTotal = jTotal - m.nnet - m.nDirectOil - m.nDirectGas + m.nDirectTax - m.nTaxWith - m.nBackWith
		                    ENDIF
		                ELSE
		                    jTotal = jTotal - m.nnet - m.nDirectOil - m.nDirectGas + m.nDirectTax - m.nTaxWith - m.nBackWith   && Subtract working amounts
		                ENDIF
		        ENDCASE
		        jwell = m.cwellid
		    ENDSCAN
		
		    m.ntotal    = jTotal
		    m.crptgroup = 'E'
		    m.nrunno    = tnrunno
		    INSERT INTO wellop FROM MEMVAR
		    STORE 0 TO m.ntotal, jTotal, m.nnet, m.nDirectOil, m.nDirectGas, m.nDirectTax, m.nTaxWith, m.nBackWith
		
		    IF jdirecttotal <> 0
		        m.ntotal    = jdirecttotal
		        m.crptgroup = 'F'
		        m.nrunno    = tnrunno
		        INSERT INTO wellop FROM MEMVAR
		    ENDIF
		
		    IF jjibtotal <> 0
		        m.ntotal    = jjibtotal
		        m.crptgroup = 'G'
		        m.nrunno    = tnrunno
		        INSERT INTO wellop FROM MEMVAR
		        jjibtotal = 0
		    ENDIF
		
		    IF jtaxwith <> 0
		        m.ntotal    = jtaxwith
		        m.crptgroup = 'H'
		        m.nrunno    = tnrunno
		        INSERT INTO wellop FROM MEMVAR
		    ENDIF
		
		*
		*  Close the progress bar
		*
		
		    oprogress.CLOSE()
		
		    IF THISFORM.chkrounding.VALUE
		        SELECT cwellid, ntotal FROM wellop WHERE crptgroup = 'E' AND ntotal <> 0 INTO CURSOR wellround
		    ENDIF
		
		    WAIT CLEAR
		    SELECT wellop
		    SCAN
		        SCATTER MEMVAR
		
		*  Get rid of zero amount royalty records, b/c they shouldn't show.
		*  Only applies to wells with jib-only expenses
		        IF THISFORM.ctype = 'J'
		            IF INLIST(m.ctypeinv, 'L', 'O') AND m.nflatrate = 0 AND m.ntaxes = 0 AND m.ngross = 0 AND m.nnet = 0
		                DELETE NEXT 1
		            ENDIF
		        ENDIF
		
		
		        IF THISFORM.chkrounding.VALUE
		            SELECT wellround
		            LOCATE FOR cwellid = m.cwellid
		            IF NOT FOUND()
		                SELECT wellop
		                DELETE NEXT 1
		                LOOP
		            ENDIF
		        ENDIF
		
		*  Plug in appropriate name from wells file
		        swselect('wells')
		        LOCATE FOR wells.cwellid = m.cwellid
		        IF FOUND()
		            m.cwellname = wells.cwellname
		            SELECT wellop
		            REPLACE cwellname WITH m.cwellname
		        ENDIF
		    ENDSCAN
		
		    * Change the interests to decimal interests if preference set
		    llReturn = DecimalInts('wellop')
		    
		    SELECT wellop
		    INDEX ON cwellid + PADL(TRANSFORM(nrunno), 3, '0') + crptgroup TAG wellrpt
		    
		    SELECT wellop
		    SET ORDER TO wellrpt
		    lncount = RECCOUNT()
		    IF lncount > 0
		        llReturn = .T.
		    ELSE
		        llReturn = .F.
		    ENDIF
		    
		   swlogging('Well Rev Op Summary', .f., lnStart, SECONDS())
		CATCH TO loError
		    llReturn = .F.
		    DO errorlog WITH 'Builddata', loError.LINENO, 'Well Oper Summary', loError.ERRORNO, loError.MESSAGE, '', loError
		    MESSAGEBOX('Unable to process the report at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		          'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		RETURN llReturn
		
		
	ENDPROC

	PROCEDURE Init
		LPARA tcType
		
		*  Default to revenue if no paramter is passed.
		IF TYPE('tcType') <> 'C'
		   tcType = 'R'
		ENDIF   
		
		IF tcType = 'R'
		   this.caption = 'Well Revenue Operating Summary'
		   this.runcombo1.cshowwhat = 'R'
		   this.runcombo1.lNoInit = .F.
		   this.runcombo1.init()
		ELSE
		   this.caption = 'Well JIB Operating Summary'
		   this.runcombo1.cshowwhat = 'J'
		   this.runcombo1.lNoInit = .F.
		   this.chkldummy.visible = .t.
		   this.chklgrouproy.visible = .f.
		   this.runcombo1.init()
		   thisform.chklFlatRates.Visible = .f.
		ENDIF
		
		this.ctype = tctype 
		
		IF DODEFAULT()
		   SET DELETED ON
		   swselect('wells')
		   SET ORDER TO cWellID
		
		   GO TOP
		   THISFORM.swrptlook1.txtBegName.VALUE = cwellname
		   THISFORM.swrptlook1.txtBegID.VALUE = cWellID
		
		   GO BOTTOM
		   THISFORM.swrptlook1.txtEndName.VALUE = cwellname
		   THISFORM.swrptlook1.txtEndID.VALUE = cWellID
		
		   *  Check for existence of custom format
		   IF FILE(m.goapp.cRptsFolder+'dmrwopsumx.frx')
		      thisform.cReportName = m.goapp.cRptsFolder+'dmrwopsumx.frx'
		   ELSE
		      THISFORM.cReportName = 'dmrwopsum.frx'
		   ENDIF 
		
		   THISFORM.chklGroupRoy.VALUE = .F.
		   THISFORM.chklDummy.VALUE = .F.
		
		ENDIF
		
		
	ENDPROC

	PROCEDURE chkSelected.Click
		IF this.Value
		   DO FORM commonsource\selected-ids WITH 'WELL' LINKED 
		   lnCount = RECCOUNT('selected')
		   thisform.lblselected.Caption = TRANSFORM(lnCount) + ' Wells Selected'
		   thisform.lblselected.Visible = .T.
		   thisform.lblbegID.Visible = .F.
		   thisform.lblendID.Visible = .F.
		   thisform.swrptlook1.Visible = .F.
		ELSE
		   thisform.lblselected.Visible = .F.
		   thisform.lblbegID.Visible = .T.
		   thisform.lblendID.Visible = .T.
		   thisform.swrptlook1.Visible = .T.
		ENDIF 
	ENDPROC

	PROCEDURE Runcombo1.Init
		IF DODEFAULT()
		   this.listitemid = 1
		ENDIF   
	ENDPROC

	PROCEDURE Runcombo1.Valid
		IF 'New' $ this.value
		   thisform.swgroup1.visible = .t.
		   thisform.lblgroup.visible = .t.
		   thisform.lblacctdate.visible = .t.
		   thisform.txtacctdate.visible = .t.
		   IF thisform.ctype = 'R'
		      thisform.chklflatRates.Visible = .t.  &&  Show option about flat rates for a new run   
		   ENDIF 
		ELSE
		   thisform.swgroup1.visible = .f.
		   thisform.lblgroup.visible = .f.
		   thisform.lblacctdate.visible = .f.
		   thisform.txtacctdate.visible = .f.
		   thisform.chklflatRates.Visible = .f.  &&  Exclude option about showing flat rates if not a new run
		ENDIF   
	ENDPROC

	PROCEDURE Swrptlook1.Swlookupbutton1.Click
		LOCAL lcList
		PRIV llOK
		
		llOK = .F.
		lcList = 'cwellid,cwellname,cgroup,cwellstat'
		DO FORM ..\custom\picklist WITH 'Wells', lcList, thisform.swrptlook1.txtbegid.value, 4
		
		IF llOK
		   thisform.swrptlook1.txtBegId.value = cwellid
		   thisform.swrptlook1.txtBegName.value = cwellname
		   thisform.swrptlook1.txtBegId.refresh()
		   thisform.swrptlook1.txtBegName.refresh()
		ENDIF   
		
		thisform.setnextcontrol(thisform.swrptlook1.txtBegId)
		
	ENDPROC

	PROCEDURE Swrptlook1.Swlookupbutton2.Click
		LOCAL lcList
		PRIV llOK
		
		llOK = .F.
		lcList = 'cwellid,cwellname,cgroup,cwellstat'
		DO FORM ..\custom\picklist WITH 'Wells', lcList, thisform.swrptlook1.txtendid.value, 4
		
		IF llOK
		   thisform.swrptlook1.txtEndId.value = cwellid
		   thisform.swrptlook1.txtEndName.value = cwellname
		   thisform.swrptlook1.txtEndId.refresh()
		   thisform.swrptlook1.txtEndName.refresh()
		ENDIF   
		
		thisform.setnextcontrol(thisform.swrptlook1.txtEndId)
		
	ENDPROC

ENDDEFINE
