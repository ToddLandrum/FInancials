*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="bmrbrinerpt.scx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="2" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Cursor1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor4" UniqueID="" Timestamp="" />

	AutoOpenTables = .F.
	DataSource = .NULL.
	Height = 389
	Left = 40
	Name = "Dataenvironment"
	Top = 235
	Width = 520

	ADD OBJECT 'Cursor1' AS cursor WITH ;
		Alias = "brinelog", ;
		CursorSource = "brinelog", ;
		Database = ..\amdata\appdata.dbc, ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor1", ;
		Top = 20, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor2' AS cursor WITH ;
		Alias = "leases", ;
		CursorSource = "leases", ;
		Database = ..\amdata\appdata.dbc, ;
		Height = 90, ;
		Left = 150, ;
		Name = "Cursor2", ;
		Top = 20, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor3' AS cursor WITH ;
		Alias = "custs", ;
		CursorSource = "custs", ;
		Database = ..\amdata\appdata.dbc, ;
		Height = 90, ;
		Left = 290, ;
		Name = "Cursor3", ;
		Top = 20, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor4' AS cursor WITH ;
		Alias = "disposal", ;
		CursorSource = "disposal", ;
		Database = ..\amdata\appdata.dbc, ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor4", ;
		Top = 140, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

ENDDEFINE

DEFINE CLASS formbmrbrinerpt AS frmrptcriteria OF "..\source\appforms.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="txtcYear" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtUICNo" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: getformats		&& Downloads the latest Form10 report format from SherWare's web site
	*</DefinedPropArrayMethod>

	Caption = "Ohio Form 13 Report"
	DoCreate = .T.
	Height = 226
	HelpContextID = 653
	Name = "FormBmrbrinerpt"
	Width = 337
	_memberdata = <VFPData>
		<memberdata name="getformats" display="GetFormats"/>
		</VFPData>
	Swrptcriteriabuttons1.cmdclose.Name = "cmdclose"
	Swrptcriteriabuttons1.cmdPreview.Name = "cmdPreview"
	Swrptcriteriabuttons1.cmdPrint.Name = "cmdPrint"
	Swrptcriteriabuttons1.Left = 51
	Swrptcriteriabuttons1.Name = "Swrptcriteriabuttons1"
	Swrptcriteriabuttons1.TabIndex = 5
	Swrptcriteriabuttons1.Top = 156

	ADD OBJECT 'Lbllabelcustom1' AS lbllabelcustom WITH ;
		Caption = "UIC Number:", ;
		Left = 72, ;
		Name = "Lbllabelcustom1", ;
		TabIndex = 2, ;
		Top = 96
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom2' AS lbllabelcustom WITH ;
		Caption = "Reporting Year", ;
		Left = 72, ;
		Name = "Lbllabelcustom2", ;
		TabIndex = 1, ;
		Top = 62
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'txtcYear' AS txttextboxcustom WITH ;
		Height = 20, ;
		Left = 168, ;
		Name = "txtcYear", ;
		TabIndex = 3, ;
		Top = 60, ;
		Width = 41
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtUICNo' AS txttextboxcustom WITH ;
		Height = 20, ;
		Left = 168, ;
		Name = "txtUICNo", ;
		TabIndex = 4, ;
		Top = 92, ;
		Width = 84
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />
	
	PROCEDURE builddata
		LOCAL caddress1, caddress2, caddress3, ccompany, cpermit, cphone, creg, cyear, namount
		LOCAL laRpts[1], llFoundFormat, llGetFormats, llNewRpt, lnFiles, lnx
		LOCAL llReturn, loError
		*:Global cCounty, cDispMeth, cPermit1, cTownship, cpermit2, cpermit3, cpermit4, cpermit5, cpermit6
		
		llReturn = .T.
		
		TRY
		   THISFORM.ctitle1         = ''
		   THISFORM.ctitle2         = ''
		   THISFORM.csortorder      = ''
		   THISFORM.cselectcriteria = ''
		   m.cyear                  = THISFORM.txtcyear.VALUE
		
		* Check to see if we need new report formats
		   lnFiles       = ADIR(laRpts, m.goapp.crptsfolder + 'bmohform13.frx')
		   llGetFormats  = .F.
		   llFoundFormat = .F.
		
		   IF lnFiles > 0
		      IF LOWER(laRpts[1, 1]) = 'bmohform13.frx'
		         llFoundFormat = .T.
		         IF laRpts[1, 3] < {2/23/2014}
		            llGetFormats = .T.
		         ENDIF
		      ENDIF
		   ENDIF
		
		   llNewRpt = .F.
		
		   IF llGetFormats OR NOT llFoundFormat
		      WAIT WINDOW NOWAIT 'Copying in new report formats...'
		      llNewRpt = .T.
		      TRY
		         llNewRpt = THISFORM.getformats()
		      CATCH
		         llNewRpt = .F.
		      ENDTRY
		   ENDIF
		
		   CREATE CURSOR section1 ;
		      (creg         c(6), ;
		        cyear       c(4), ;
		        ccompany  c(30), ;
		        caddress1 c(30), ;
		        caddress2 c(30), ;
		        caddress3 c(30), ;
		        cphone    c(15))
		   INDEX ON creg TAG creg
		
		   CREATE CURSOR section2a ;
		      (dDate     D, ;
		        cyear     c(4), ;
		        clease    c(30), ;
		        ccounty   c(20), ;
		        ccustid   c(10), ;
		        cwellid   c(10), ;
		        cpermit   c(40), ;
		        cpermit2  c(40), ;
		        cpermit3  c(40), ;
		        cpermit4  c(40), ;
		        cpermit5  c(40), ;
		        cpermit6  c(40), ;
		        ccustname c(40), ;
		        creg      c(6), ;
		        namount   N(12, 2))
		
		   CREATE CURSOR section2 ;
		      (dDate     D, ;
		        cyear     c(4), ;
		        clease    c(30), ;
		        ccounty   c(20), ;
		        cpermit   c(40), ;
		        ccustname c(40), ;
		        creg      c(6), ;
		        namount   N(12, 2))
		   INDEX ON creg TAG creg
		   INDEX ON cpermit TAG cpermit
		   m.ccompany  = m.goapp.ccompanyname
		   m.cphone    = m.goapp.cphoneno
		   m.caddress1 = m.goapp.caddress1
		   m.caddress2 = m.goapp.caddress2
		   m.caddress3 = m.goapp.caddress3
		
		** Get the UIC number to use for reporting
		   m.creg      = thisform.txtuICNo.value
		   IF EMPTY(m.creg)
		      m.creg = '123456'
		   ENDIF
		   INSERT INTO section1 FROM MEMVAR
		
		
		   SELECT  brinelog.dDate, ;
				   brinelog.cwellid, ;
				   brinelog.namount  ;
			   FROM brinelog ;
			   WHERE YEAR(brinelog.dDate) = VAL(THISFORM.txtcyear.VALUE) ;
			   INTO CURSOR temp
		
		   IF _TALLY > 0
		      SELECT leases
		      SET ORDER TO cwellid
		      SELECT custs
		      SET ORDER TO ccustid
		
		      SELECT temp
		      SCAN
		         SCATTER MEMVAR
		
		         SELECT leases
		         IF SEEK(m.cwellid)
		            m.clease   = UPPER(leases.clease)
		            m.ccounty  = UPPER(leases.ccounty)
		            m.cpermit  = UPPER(leases.cpermit)
		            m.cpermit2 = UPPER(leases.cpermit2)
		            m.cpermit3 = UPPER(leases.cpermit3)
		            m.cpermit4 = UPPER(leases.cpermit4)
		            m.cpermit5 = UPPER(leases.cpermit5)
		            m.cpermit6 = UPPER(leases.cpermit6)
		            m.ccustid  = UPPER(leases.ccustid)
		            IF EMPTY(m.cpermit)
		               m.cpermit = 'N/A'
		            ENDIF
		            SELECT custs
		            IF SEEK(m.ccustid)
		               m.ccustname = UPPER(ccustname)
		            ELSE
		               m.ccustname = ALLTRIM(m.ccustid) + ' - UNKNOWN'
		            ENDIF
		         ELSE
		            STORE UPPER(ALLTRIM(m.cwellid)) TO m.clease, m.cpermit
		            STORE '' TO m.cpermit2, m.cpermit3, m.cpermit4, m.cpermit5, m.cpermit6
		            STORE '' TO m.ccounty
		            STORE 'UNKNOWN' TO m.ccustname
		         ENDIF
		         INSERT INTO section2a FROM MEMVAR
		      ENDSCAN
		
		*SELECT SUM(namount) FROM section2a INTO CURSOR bal1
		
			  SELECT  clease, ;
					  ccustname, ;
					  ccounty, ;
					  cpermit, ;
					  cpermit2, ;
					  cpermit3, ;
					  cpermit4, ;
					  cpermit5, ;
					  cpermit6, ;
					  SUM(namount) AS namount ;
				  FROM section2a ;
				  INTO CURSOR tempsection ;
				  ORDER BY ccustname, cpermit, clease, ccounty ;
				  GROUP BY ccustname, cpermit, clease, ccounty
		
		*SELECT SUM(namount) FROM tempsection INTO CURSOR bal2
		
		      SELECT tempsection
		      SCAN
		         SCATTER MEMVAR
		         DO CASE
		            CASE NOT EMPTY(m.cpermit) AND NOT EMPTY(m.cpermit2) AND NOT EMPTY(m.cpermit3) AND ;
		                  NOT EMPTY(m.cpermit4) AND NOT EMPTY(m.cpermit5) AND NOT EMPTY(m.cpermit6)
		               m.namount = m.namount / 6
		               INSERT INTO section2 FROM MEMVAR
		               m.cpermit = m.cpermit2
		               INSERT INTO section2 FROM MEMVAR
		               m.cpermit = m.cpermit3
		               INSERT INTO section2 FROM MEMVAR
		               m.cpermit = m.cpermit4
		               INSERT INTO section2 FROM MEMVAR
		               m.cpermit = m.cpermit5
		               INSERT INTO section2 FROM MEMVAR
		               m.cpermit = m.cpermit6
		               INSERT INTO section2 FROM MEMVAR
		            CASE NOT EMPTY(m.cpermit) AND NOT EMPTY(m.cpermit2) AND NOT EMPTY(m.cpermit3) AND ;
		                  NOT EMPTY(m.cpermit4) AND NOT EMPTY(m.cpermit5)
		               m.namount = m.namount / 5
		               INSERT INTO section2 FROM MEMVAR
		               m.cpermit = m.cpermit2
		               INSERT INTO section2 FROM MEMVAR
		               m.cpermit = m.cpermit3
		               INSERT INTO section2 FROM MEMVAR
		               m.cpermit = m.cpermit4
		               INSERT INTO section2 FROM MEMVAR
		               m.cpermit = m.cpermit5
		               INSERT INTO section2 FROM MEMVAR
		            CASE NOT EMPTY(m.cpermit) AND NOT EMPTY(m.cpermit2) AND NOT EMPTY(m.cpermit3) AND ;
		                  NOT EMPTY(m.cpermit4)
		               m.namount = m.namount / 4
		               INSERT INTO section2 FROM MEMVAR
		               m.cpermit = m.cpermit2
		               INSERT INTO section2 FROM MEMVAR
		               m.cpermit = m.cpermit3
		               INSERT INTO section2 FROM MEMVAR
		               m.cpermit = m.cpermit4
		               INSERT INTO section2 FROM MEMVAR
		            CASE NOT EMPTY(m.cpermit) AND NOT EMPTY(m.cpermit2) AND NOT EMPTY(m.cpermit3)
		               m.namount = m.namount / 3
		               INSERT INTO section2 FROM MEMVAR
		               m.cpermit = m.cpermit2
		               INSERT INTO section2 FROM MEMVAR
		               m.cpermit = m.cpermit3
		               INSERT INTO section2 FROM MEMVAR
		            CASE NOT EMPTY(m.cpermit) AND NOT EMPTY(m.cpermit2)
		               m.namount = m.namount / 2
		               INSERT INTO section2 FROM MEMVAR
		               m.cpermit = m.cpermit2
		               INSERT INTO section2 FROM MEMVAR
		            CASE NOT EMPTY(m.cpermit)
		               INSERT INTO section2 FROM MEMVAR
		         ENDCASE
		      ENDSCAN
		
		      CREATE CURSOR section3 ;
		         (cpermit   c(15), ;
		           cyear      c(4), ;
		           ctownship  c(30), ;
		           ccounty    c(30), ;
		           cdispmeth  c(20), ;
		           namount    N(12, 2), ;
		           creg       c(6))
		      INDEX ON creg TAG creg
		      INDEX ON cpermit TAG cpermit
		      m.ccompany  = m.goapp.ccompanyname
		      m.cphone    = m.goapp.cphoneno
		      m.caddress1 = m.goapp.caddress1
		      m.caddress2 = m.goapp.caddress2
		      m.caddress3 = m.goapp.caddress3
		
			  SELECT  disposal.ccounty AS ccounty, ;
					  disposal.ctownship AS ctownship,  ;
					  disposal.cdispmeth AS cdispmeth, ;
					  disposal.cpermit1, ;
					  disposal.cpermit2, ;
					  disposal.cpermit3, ;
					  disposal.cpermit4, ;
					  disposal.cpermit5, ;
					  disposal.cpermit6, ;
					  SUM(brinelog.namount) AS namount ;
				  FROM brinelog ;
				  LEFT OUTER JOIN disposal ;
					  ON brinelog.cdisperm == disposal.cdisperm ;
				  WHERE YEAR(dDate) = VAL(THISFORM.txtcyear.VALUE) ;
				  ORDER BY disposal.ccounty, disposal.cpermit1 ;
				  GROUP BY disposal.ccounty, disposal.cpermit1 ;
				  INTO CURSOR temp
		
		      IF _TALLY > 0
		         SELECT temp
		         SCAN
		            SCATTER MEMVAR
		            IF ISNULL(m.ccounty)
		               STORE 'UNKNOWN' TO m.ccounty, m.ctownship, m.cdispmeth, m.cpermit1
		               STORE '' TO m.cpermit2, m.cpermit3, m.cpermit4, m.cpermit5, m.cpermit6
		            ENDIF
		            DO CASE
		               CASE NOT EMPTY(m.cpermit1) AND NOT EMPTY(m.cpermit2) AND NOT EMPTY(m.cpermit3) AND ;
		                     NOT EMPTY(m.cpermit4) AND NOT EMPTY(m.cpermit5) AND NOT EMPTY(m.cpermit6)
		                  m.namount = m.namount / 6
		                  m.cpermit = m.cpermit1
		                  INSERT INTO section3 FROM MEMVAR
		                  m.cpermit = m.cpermit2
		                  INSERT INTO section3 FROM MEMVAR
		                  m.cpermit = m.cpermit3
		                  INSERT INTO section3 FROM MEMVAR
		                  m.cpermit = m.cpermit4
		                  INSERT INTO section3 FROM MEMVAR
		                  m.cpermit = m.cpermit5
		                  INSERT INTO section3 FROM MEMVAR
		                  m.cpermit = m.cpermit6
		                  INSERT INTO section3 FROM MEMVAR
		               CASE NOT EMPTY(m.cpermit1) AND NOT EMPTY(m.cpermit2) AND NOT EMPTY(m.cpermit3) AND ;
		                     NOT EMPTY(m.cpermit4) AND NOT EMPTY(m.cpermit5)
		                  m.namount = m.namount / 5
		                  m.cpermit = m.cpermit1
		                  INSERT INTO section3 FROM MEMVAR
		                  m.cpermit = m.cpermit2
		                  INSERT INTO section3 FROM MEMVAR
		                  m.cpermit = m.cpermit3
		                  INSERT INTO section3 FROM MEMVAR
		                  m.cpermit = m.cpermit4
		                  INSERT INTO section3 FROM MEMVAR
		                  m.cpermit = m.cpermit5
		                  INSERT INTO section3 FROM MEMVAR
		               CASE NOT EMPTY(m.cpermit1) AND NOT EMPTY(m.cpermit2) AND NOT EMPTY(m.cpermit3) AND ;
		                     NOT EMPTY(m.cpermit4)
		                  m.namount = m.namount / 4
		                  m.cpermit = m.cpermit1
		                  INSERT INTO section3 FROM MEMVAR
		                  m.cpermit = m.cpermit2
		                  INSERT INTO section3 FROM MEMVAR
		                  m.cpermit = m.cpermit3
		                  INSERT INTO section3 FROM MEMVAR
		                  m.cpermit = m.cpermit4
		                  INSERT INTO section3 FROM MEMVAR
		               CASE NOT EMPTY(m.cpermit1) AND NOT EMPTY(m.cpermit2) AND NOT EMPTY(m.cpermit3)
		                  m.namount = m.namount / 3
		                  m.cpermit = m.cpermit1
		                  INSERT INTO section3 FROM MEMVAR
		                  m.cpermit = m.cpermit2
		                  INSERT INTO section3 FROM MEMVAR
		                  m.cpermit = m.cpermit3
		                  INSERT INTO section3 FROM MEMVAR
		               CASE NOT EMPTY(m.cpermit1) AND NOT EMPTY(m.cpermit2)
		                  m.namount = m.namount / 2
		                  m.cpermit = m.cpermit1
		                  INSERT INTO section3 FROM MEMVAR
		                  m.cpermit = m.cpermit2
		                  INSERT INTO section3 FROM MEMVAR
		               CASE NOT EMPTY(m.cpermit1)
		                  m.cpermit = m.cpermit1
		                  INSERT INTO section3 FROM MEMVAR
		            ENDCASE
		         ENDSCAN
		
		
		         THISFORM.creportname = m.goapp.cRptsFolder+'bmohform13'
		         SELECT section2
		         SET ORDER TO creg
		         SELECT section3
		         SET ORDER TO creg
		         SELECT section1
		         SET RELATION TO creg INTO section2
		         SET RELATION TO creg INTO section3 ADDITIVE
		      ENDIF
		   ELSE
		      llReturn = .F.
		   ENDIF
		CATCH TO loError
		   llReturn = .F.
		   DO errorlog WITH 'BuildData', loError.LINENO, 'OH Form 13', loError.ERRORNO, loError.MESSAGE
		   MESSAGEBOX('Unable to process the report at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		        'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		RETURN llReturn
		
		
		
		
		
		
		
		
	ENDPROC

	PROCEDURE getformats		&& Downloads the latest Form10 report format from SherWare's web site
		LOCAL lcLibrary, llCopyError
		LOCAL loIP AS 'wwftp'
		LOCAL lcSourceFile, lcTargetFile, llReturn, llSupport, lnResult, loerror
		
		lcLibrary = SET('library')
		
		llSupport = checksupportexp()
		
		IF NOT llSupport
		   RETURN
		ENDIF
		
		IF MESSAGEBOX('This utility will download new report formats for the Ohio Brine Form 13.' + CHR(10) + ;
		        'The current formats will be copied to a backup folder under your Rpts folder.' + CHR(10) + CHR(10) + ;
		        'Do you want to continue?', 36, 'Download Form 13 Formats') = 7
		   RETURN
		ENDIF
		
		TRY
		   llCopyError = .F.
		* Copy current formats to backup folder
		   IF NOT DIRECTORY(m.goapp.crptsfolder + 'backup')
		      MD (m.goapp.crptsfolder + 'backup')
		   ENDIF
		
		   COPY FILE m.goapp.crptsfolder + 'bmoh*.*' TO m.goapp.crptsfolder + 'backup\bmoh*.*'
		CATCH TO loerror
		   IF loerror.ERRORNO # 1
		      llCopyError = .T.
		   ENDIF
		ENDTRY
		
		IF llCopyError
		   IF MESSAGEBOX('A backup copy of the current Form 13 formats could not be made at this time.' + CHR(10) + ;
		           'The error encountered: ' + CHR(10) + ;
		           'Line No: ' + TRANSFORM(loError.LineNo) + CHR(10) + ;
		           'Error No: ' + transform(loError.ErrorNo) + CHR(10) + ;
		           loerror.MESSAGE + CHR(10) + CHR(10) + ;
		           'Do you want to continue?', 36, 'Backup Form 13 Problem') = 7
		      RETURN
		   ENDIF
		ENDIF
		
		loUpdate = m.goApp.oUpdate
		loUpdate.cSourceFile = 'bmohform13.zip'
		loUpdate.cTargetFile = 'datafiles\bmohform13.zip'
		llReturn = loUpdate.GetUpdate()
		
		IF NOT llReturn
		   MESSAGEBOX(loUpdate.cerrormessage, 16, 'Update Download Problem')
		ENDIF
		
		WAIT CLEAR
		
		
		
	ENDPROC

	PROCEDURE Init
		IF DODEFAULT()
		  
		   thisform.txtcYear.value = STR(YEAR(DATE())-1,4)
		
		   swselect('options')
		   GO top
		   thisform.txtuiCNo.Value = options.cCompRptNo   
		ENDIF   
	ENDPROC

ENDDEFINE
