*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="dmprogdist.scx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="2" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Cursor2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor6" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor7" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor8" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor9" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Relation2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor10" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor11" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Relation1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor12" UniqueID="" Timestamp="" />

	AutoOpenTables = .F.
	DataSource = .NULL.
	Height = 595
	Left = 53
	Name = "Dataenvironment"
	Top = 114
	Width = 776

	ADD OBJECT 'Cursor1' AS cursor WITH ;
		Alias = "proghsth", ;
		CursorSource = "proghsth", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor1", ;
		Order = "cBatch", ;
		Top = 20, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor10' AS cursor WITH ;
		Alias = "checks", ;
		BufferModeOverride = 5, ;
		CursorSource = "checks", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 302, ;
		Name = "Cursor10", ;
		Top = 386, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor11' AS cursor WITH ;
		Alias = "progopt", ;
		CursorSource = "progopt", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 150, ;
		Name = "Cursor11", ;
		Top = 380, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor12' AS cursor WITH ;
		Alias = "proghstd1", ;
		CursorSource = "proghstd", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 485, ;
		Name = "Cursor12", ;
		Top = 24, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor2' AS cursor WITH ;
		Alias = "proghstd", ;
		CursorSource = "proghstd", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 151, ;
		Name = "Cursor2", ;
		Order = "", ;
		Top = 18, ;
		Width = 101
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor3' AS cursor WITH ;
		Alias = "programs", ;
		CursorSource = "programs", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 290, ;
		Name = "Cursor3", ;
		Top = 20, ;
		Width = 101
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor4' AS cursor WITH ;
		Alias = "investor", ;
		CursorSource = "investor", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor4", ;
		Top = 140, ;
		Width = 101
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor5' AS cursor WITH ;
		Alias = "glopt", ;
		CursorSource = "glopt", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 150, ;
		Name = "Cursor5", ;
		Top = 140, ;
		Width = 101
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor6' AS cursor WITH ;
		Alias = "glmaster", ;
		CursorSource = "glmaster", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 290, ;
		Name = "Cursor6", ;
		Top = 140, ;
		Width = 101
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor7' AS cursor WITH ;
		Alias = "coa", ;
		CursorSource = "coa", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor7", ;
		Top = 260, ;
		Width = 101
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor8' AS cursor WITH ;
		Alias = "coabal", ;
		BufferModeOverride = 5, ;
		CursorSource = "coabal", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 150, ;
		Name = "Cursor8", ;
		Top = 260, ;
		Width = 101
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor9' AS cursor WITH ;
		Alias = "progrel", ;
		CursorSource = "progrel", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 290, ;
		Name = "Cursor9", ;
		Top = 260, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Relation1' AS relation WITH ;
		ChildAlias = "investor", ;
		ChildOrder = "cownerid", ;
		Name = "Relation1", ;
		OneToMany = .T., ;
		ParentAlias = "proghstd", ;
		RelationalExpr = "cownerid"
		*< END OBJECT: BaseClass="relation" />

	ADD OBJECT 'Relation2' AS relation WITH ;
		ChildAlias = "proghstd", ;
		ChildOrder = "cbatch", ;
		Name = "Relation2", ;
		ParentAlias = "proghsth", ;
		RelationalExpr = "cbatch"
		*< END OBJECT: BaseClass="relation" />
	
	PROCEDURE Init
		IF DODEFAULT()
		
		   CREATE CURSOR progtemp ;
		      (cownerid    C(10), ;
		       cownname    C(40), ;
		       namount     N(12,2))
		     
		ENDIF       
	ENDPROC

ENDDEFINE

DEFINE CLASS formdmprogdist AS frmdatamanagerformcustom OF "..\custom\cforms.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="txtCprogcode" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtCprogname" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblCprogname" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblDpostdate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtCreference" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblCreference" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtNdistamt" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblNdistamt" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdDist" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdProgram" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdOwnAlloc" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdOwnAlloc.Column1.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdOwnAlloc.Column1.txtcOwnerID" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdOwnAlloc.Column2.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdOwnAlloc.Column2.txtcOwnerName" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdOwnAlloc.Column3.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdOwnAlloc.Column3.txtcOwnerPct" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdOwnAlloc.Column4.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdOwnAlloc.Column4.txtnAllocation" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdPrint" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdChecks" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblCCashacct" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboAcct" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtdPostDate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Glmaint" UniqueID="" Timestamp="" />

	Caption = "Partnership Distributions"
	clistexpression = proghsth.cprogcode
	cworkarea = proghsth
	DoCreate = .T.
	Height = 356
	HelpContextID = 452
	lrememberrecord = .F.
	Name = "FormDmprogdist"
	Visible = .T.
	Width = 484
	cmdatamanager.Name = "cmdatamanager"
	cmdatamanager.TabIndex = 1
	cmlookupmanager.Name = "cmlookupmanager"

	ADD OBJECT 'cboAcct' AS cbocomboboxcustom WITH ;
		BoundColumn = 2, ;
		ColumnCount = 2, ;
		ControlSource = "proghsth.ccashacct", ;
		FontName = "Courier New", ;
		Height = 20, ;
		Left = 84, ;
		lrequired = .T., ;
		Name = "cboAcct", ;
		TabIndex = 2, ;
		Top = 4, ;
		Width = 300
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="combobox" />

	ADD OBJECT 'cmdChecks' AS cmdcommandbuttoncustom WITH ;
		AutoSize = .T., ;
		Caption = "\<Create Checks", ;
		Height = 25, ;
		Left = 386, ;
		Name = "cmdChecks", ;
		TabIndex = 15, ;
		Top = 77, ;
		Width = 87
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdDist' AS cmdcommandbuttoncustom WITH ;
		Caption = "Distribute", ;
		Height = 25, ;
		Left = 196, ;
		Name = "cmdDist", ;
		TabIndex = 13, ;
		Top = 77, ;
		Width = 87
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdPrint' AS cmdcommandbuttoncustom WITH ;
		Caption = "\<Print", ;
		Height = 25, ;
		Left = 291, ;
		Name = "cmdPrint", ;
		TabIndex = 14, ;
		Top = 77, ;
		Width = 87
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdProgram' AS cmdcommandbuttoncustom WITH ;
		Caption = "Program", ;
		Height = 21, ;
		Left = 19, ;
		Name = "cmdProgram", ;
		TabIndex = 4, ;
		TabStop = .F., ;
		Top = 27, ;
		Width = 60
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'Glmaint' AS glmaint WITH ;
		Height = 18, ;
		Left = 402, ;
		Name = "Glmaint", ;
		Top = 6, ;
		Width = 42
		*< END OBJECT: ClassLib="..\custom\swgl.vcx" BaseClass="custom" />

	ADD OBJECT 'grdOwnAlloc' AS grdgridcustom WITH ;
		ColumnCount = 4, ;
		Height = 240, ;
		lallowdelete = .F., ;
		lallownew = .F., ;
		lcolumnmemory = .F., ;
		Left = 3, ;
		LinkMaster = "", ;
		Name = "grdOwnAlloc", ;
		Panel = 1, ;
		RecordSource = "proghstd", ;
		TabIndex = 17, ;
		Top = 108, ;
		Width = 477, ;
		Column1.ControlSource = "proghstd.cownerid", ;
		Column1.FontSize = 8, ;
		Column1.Name = "Column1", ;
		Column2.Alignment = 0, ;
		Column2.ControlSource = "investor.cownname", ;
		Column2.FontSize = 8, ;
		Column2.Name = "Column2", ;
		Column2.Width = 207, ;
		Column3.ControlSource = "proghstd.npercentage", ;
		Column3.FontSize = 8, ;
		Column3.Name = "Column3", ;
		Column3.Width = 77, ;
		Column4.ControlSource = "proghstd.namount", ;
		Column4.FontSize = 8, ;
		Column4.Name = "Column4", ;
		Column4.Width = 84
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="grid" />

	ADD OBJECT 'grdOwnAlloc.Column1.Header1' AS header WITH ;
		Alignment = 0, ;
		Caption = "Owner", ;
		FontSize = 8, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'grdOwnAlloc.Column1.txtcOwnerID' AS txttextboxcustom WITH ;
		ControlSource = "proghstd.cownerid", ;
		FontName = "Arial", ;
		Left = 61, ;
		Name = "txtcOwnerID", ;
		Top = 23
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'grdOwnAlloc.Column2.Header1' AS header WITH ;
		Caption = "Owner Name", ;
		FontSize = 8, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'grdOwnAlloc.Column2.txtcOwnerName' AS txttextboxcustom WITH ;
		Alignment = 0, ;
		ControlSource = "investor.cownname", ;
		FontName = "Arial", ;
		Left = 117, ;
		Name = "txtcOwnerName", ;
		Top = 23
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'grdOwnAlloc.Column3.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "Owner Pct", ;
		FontSize = 8, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'grdOwnAlloc.Column3.txtcOwnerPct' AS txttextboxcustom WITH ;
		ControlSource = "proghstd.npercentage", ;
		FontName = "Arial", ;
		Left = 59, ;
		Name = "txtcOwnerPct", ;
		Top = 23
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'grdOwnAlloc.Column4.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "Allocation", ;
		FontSize = 8, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'grdOwnAlloc.Column4.txtnAllocation' AS txttextboxcustom WITH ;
		ControlSource = "proghstd.namount", ;
		FontName = "Arial", ;
		Left = 40, ;
		Name = "txtnAllocation", ;
		Top = 35
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'lblCCashacct' AS lblfieldlabelcustom WITH ;
		AutoSize = .T., ;
		Caption = "Cash Acct:", ;
		Height = 16, ;
		Left = 19, ;
		Name = "lblCCashacct", ;
		TabIndex = 3, ;
		Top = 6, ;
		Width = 56
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblCprogname' AS lblfieldlabelcustom WITH ;
		Caption = "Program Name", ;
		Height = 16, ;
		Left = 197, ;
		Name = "lblCprogname", ;
		TabIndex = 7, ;
		Top = 30, ;
		Width = 72
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblCreference' AS lblfieldlabelcustom WITH ;
		Caption = "Reference", ;
		Height = 16, ;
		Left = 197, ;
		Name = "lblCreference", ;
		TabIndex = 11, ;
		Top = 53, ;
		Width = 53
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblDpostdate' AS lblfieldlabelcustom WITH ;
		Caption = "Post Date", ;
		Height = 16, ;
		Left = 19, ;
		Name = "lblDpostdate", ;
		TabIndex = 10, ;
		Top = 53, ;
		Width = 48
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblNdistamt' AS lblfieldlabelcustom WITH ;
		Caption = "Amount", ;
		Height = 16, ;
		Left = 19, ;
		Name = "lblNdistamt", ;
		TabIndex = 16, ;
		Top = 78, ;
		Width = 39
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'txtCprogcode' AS txtquickfill WITH ;
		clistexpression = programs.cprogcode, ;
		clistworkarea = programs, ;
		ControlSource = "proghsth.cprogcode", ;
		Format = "!", ;
		Height = 20, ;
		Left = 84, ;
		MaxLength = 10, ;
		Name = "txtCprogcode", ;
		TabIndex = 5, ;
		Top = 28, ;
		Width = 76
		*< END OBJECT: ClassLib="..\custom\cgadget.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtCprogname' AS txttextboxcustom WITH ;
		BackColor = 212,208,200, ;
		Height = 20, ;
		Left = 273, ;
		lreadonly = .T., ;
		MaxLength = 30, ;
		Name = "txtCprogname", ;
		TabIndex = 6, ;
		Top = 28, ;
		Width = 204
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtCreference' AS txttextboxcustom WITH ;
		ControlSource = "proghsth.creference", ;
		Height = 20, ;
		Left = 273, ;
		MaxLength = 30, ;
		Name = "txtCreference", ;
		TabIndex = 9, ;
		Top = 51, ;
		Width = 204
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtdPostDate' AS dpk WITH ;
		ControlSource = "proghsth.dpostdate", ;
		Height = 20, ;
		lcheckdate = .T., ;
		Left = 84, ;
		lmorethan90 = .T., ;
		Name = "txtdPostDate", ;
		TabIndex = 8, ;
		Top = 52, ;
		Visible = .T., ;
		Width = 75
		*< END OBJECT: ClassLib="..\custom\swdate.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtNdistamt' AS txttextboxcustom WITH ;
		ControlSource = "proghsth.ndistamt", ;
		Height = 20, ;
		Left = 84, ;
		Name = "txtNdistamt", ;
		TabIndex = 12, ;
		Top = 76, ;
		Width = 90
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />
	
	PROCEDURE Init
		DODEFAULT()
		
		SELECT proghstd
		SET RELATION TO cownerid INto investor 
	ENDPROC

	PROCEDURE list
		LPARAMETERS cworkarea
		LOCAL lcList, lnRecNo
		PRIV llOK
		
		llOK = .F.
		lcList = 'cProgCode,dPostDate,nDistAmt'
		
		SELECT proghsth
		IF RECC() = 0
		   RETURN
		ENDIF   
		lnRecNo = RECNO()
		
		IF this.flushcontrolbuffer() AND this.beforenav('proghsth')
		   DO FORM ..\custom\picklist WITH 'proghsth', lcList, thisform.txtcProgCode.value, 3
		ENDIF   
		
		IF llOK
		   SELECT proghsth
		   thisform.cmdatamanager.setrecordposition('Proghsth')
		   thisform.cmdatamanager.afternav('Proghsth')
		   thisform.refresh()
		ELSE
		   SELECT proghsth
		   GOTO lnRecNo   
		ENDIF   
	ENDPROC

	PROCEDURE cboAcct.Init
		*
		*  Builds the data displayed in the combo list box
		*
		
		SELECT  cAcctNo + '-' +cAcctDesc, cAcctNo, cAcctDesc FROM coa INTO ARRAY laAcct WHERE lBankacct = .T. ORDER BY cAcctNo
		
		IF _TALLY > 0
		   FOR lnX = 1 TO ALEN(laAcct,1)
		      THIS.ADDLISTITEM(laAcct[lnX,1],lnX,1)
		      THIS.ADDLISTITEM(laAcct[lnX,2],lnX,2)
		   ENDFOR
		ENDIF
		
		DODEFAULT()
		
	ENDPROC

	PROCEDURE cmdatamanager.afternav
		LPARAMETERS cworkarea
		
		IF m.cWorkarea = 'Proghsth'
		 
		   thisform.cmdChecks.set('lEnabled',NOT proghsth.lpaid)
		   thisform.cmdDist.set('lEnabled',NOT proghsth.lpaid)
		   SELECT programs
		   SET ORDER to cprogcode
		   IF SEEK(proghsth.cprogcode)
		      thisform.txtcProgName.value = programs.cProgName
		      thisform.txtcProgname.Refresh()
		   endif
		   this.requery()
		ENDIF   
		
		return(DODEFAULT(cworkarea))
	ENDPROC

	PROCEDURE cmdatamanager.afternew
		LPARAMETERS cworkarea
		
		SELE progopt
		lcAcctNo = progopt.cCashAcct
		
		IF m.cWorkArea = 'Proghsth'
		   SELE proghsth
		   REPL cBatch    WITH thisform.oRegistry.IncrementCounter('%Shared.Counters.Batch'), ;
		        cCashAcct WITH lcAcctNo, ;
		        lPaid     WITH .F.
		   thisform.setnextcontrol(thisform.txtcprogcode)
		   thisform.cmdChecks.set('Lenabled',.T.)
		   thisform.cmdDist.set('Lenabled',.T.)
		   thisform.txtCprogname.set('value','')
		   thisform.setnextcontrol(thisform.cboAcct)
		ENDIF
		
		IF m.cWorkarea = 'Proghstd'
		   m.cidprogh = thisform.oregistry.incrementcounter('%Shared.Counters.Prhist')
		   REPL cidprogh WITH m.cidprogh
		ENDIF   
	ENDPROC

	PROCEDURE cmdatamanager.beforedelete
		LPARAMETERS cworkarea
		LOCAL lcBatch, llCleared
		
		llCleared = .F.
		
		IF m.cworkarea = 'Proghsth'
		   IF proghsth.lPaid
		      *  Make sure the period or year isn't closed
		      IF NOT THISFORM.glmaint.CheckPeriod(proghsth.dPostDate,.T.)
		         THISFORM.oMessage.warning('Unable to delete this distribution. Either the fiscal year or period for this date has been closed.')
		         RETURN .F.
		      ENDIF
		      lcBatch = proghsth.cbatch
		      SELE proghstd
		      SCAN FOR cbatch == lcBatch
		         lcidchec = cidchec
		         SELE checks
		         LOCATE FOR cidchec = lcidchec AND lCleared AND NOT lVoid
		         IF FOUND()
		            llCleared = .T.
		            EXIT
		         ENDIF
		      ENDSCAN
		
		      IF llCleared
		         THISFORM.oMessage.warning('One or more checks created by this distribution have been cleared. It cannot be deleted.')
		         RETURN .F.
		      ELSE
		         THISFORM.glmaint.delcheck(lcBatch,.T.)
		         THISFORM.glmaint.delbatch(lcBatch)
		         SELE checks
		         =TABLEUPDATE(.T.)
		         SELE glmaster
		         =TABLEUPDATE(.T.)
		         SELE proghstd
		         =TABLEUPDATE(.T.)
		         SELE coabal
		         =TABLEUPDATE(.T.)
		         RETURN .T.
		      ENDIF
		   ENDIF
		ENDIF
		
		
	ENDPROC

	PROCEDURE cmdatamanager.requery
		LPARAMETERS cworkarealist
		LOCAL lcBatch
		
		lcAlias = ALIAS()
		
		lcBatch = proghsth.cbatch
		
		SELECT proghstd.cownerid, ;
		       investor.cownname, ;
		       proghstd.namount  ;
		  FROM proghstd ;
		       JOIN investor ;
		         ON proghstd.cownerid = investor.cownerid ;
		  WHERE proghstd.cbatch = lcbatch ;       
		  INTO CURSOR progtemp ;
		  ORDER BY proghstd.cownerid 
		              
		SELECT (lcAlias)
	ENDPROC

	PROCEDURE cmdChecks.Click
		LOCAL lnCount, lcExpAcct
		
		* Get global program expense account setting
		SELE progopt
		lcExpAcct = cExpAcct
		
		*  Override global program expense account setting
		SELE programs
		IF NOT EMPTY(programs.cExpAcct)
		   lcExpAcct = cExpAcct
		ENDIF
		
		IF EMPTY(lcExpAcct)
		   thisform.oMessage.Warning('You must first specify the Expense Account for this distribution in the Program/Partnerships section of the Edit >> Preferences screen.')
		   RETURN
		ENDIF
		
		IF EMPTY(proghsth.ccashacct)
		   thisform.oMessage.Warning('Please specify a cash account at the top of the screen before proceeding.')
		   RETURN
		endif
		
		lnCount = 0
		
		*  Make sure the period or year isn't closed
		IF NOT thisform.glmaint.CheckPeriod(proghsth.dpostdate)
		   THISFORM.omessage.warning('Unable to create checks. Either the fiscal year or period represented by this date has been closed.')
		   RETURN .F.
		ENDIF   
		
		WITH THISFORM
		   * Get the batch number these entries are to be posted under
		   lcBatch = proghsth.cbatch
		
		   * Remove any entries for this batch
		   .glmaint.delbatch(lcBatch)
		
		   *  Set the properties
		   .glmaint.cbatch     = lcBatch
		   .glmaint.dgldate    = proghsth.dPostDate
		   .glmaint.cdeptno    = ''
		   .glmaint.cidchec    = ''
		   .glmaint.cunitno    = proghsth.cprogcode
		   .glmaint.creference = proghsth.creference
		   .glmaint.cSource    = 'PD'
		   .glmaint.dCheckDate = proghsth.dPostDate
		   .glmaint.dPostDate  = proghsth.dPostDate
		   .glmaint.cGroup     = '00'
		   .glmaint.lPrinted   = .F.
		   .glmaint.cEntryType = 'C'
		   .glmaint.cIDType    = 'I'
		   .glmaint.ccheckno   = ''
		
		   *  Remove previous check register entries
		   .glmaint.delcheck(lcBatch,.T.)
		
		   SELE proghstd
		   SCAN
		      SCATTER MEMVAR
		      
		      *  Only increment the number of checks created if the amount isn't zero.
		      IF m.nAmount <> 0          
		         lnCount = lnCount + 1
		      ENDIF 
		      .glmaint.cid        = m.cownerid
		      SELE investor
		      LOCATE FOR cownerid = m.cownerid
		      .glmaint.cpayee     = cOwnName
		      .glmaint.cdesc      = cOwnName
		      .glmaint.nAmount    = m.nAmount
		      .glmaint.cAcctNo    = proghsth.ccashacct
		      .glmaint.addcheck()
		      lcKey = .glmaint.getkey()
		      SELE proghstd
		      REPL cidchec WITH lcKey
		
		      .glmaint.cAcctNo    = proghsth.ccashacct
		      .glmaint.nAmount    = m.nAmount * -1
		      .glmaint.updatebatch()
		
		      .glmaint.cAcctNo    = lcExpAcct
		      .glmaint.nAmount    = m.nAmount
		      .glmaint.updatebatch()
		   ENDSCAN
		   .omessage.DISPLAY('Created ' + ALLT(STR(lnCount)) + ' Checks')
		
		   .cmdatamanager.REPLACE('Proghsth','Lpaid',.T.)
		
		   SELECT checks
		   =TABLEUPDATE(.T.)
		   SELECT glmaster
		   =TABLEUPDATE(.T.)
		   SELECT proghsth
		   =TABLEUPDATE(.T.)
		   SELECT proghstd
		   =TABLEUPDATE(.T.)
		   select coabal
		   =TABLEUPDATE(.T.)
		
		   .cmdChecks.ENABLED = .F.
		   .cmdDist.ENABLED   = .F.
		
		ENDWITH
		
	ENDPROC

	PROCEDURE cmdChecks.When
		RETURN NOT proghsth.lpaid
	ENDPROC

	PROCEDURE cmdDist.Click
		*
		*  Distributes the amount among the program members
		*
		LOCAL lnTotal, lcProgCode, lcBatch, lnAlloc, lnDiff
		
		lcProgCode = proghsth.cprogcode
		lnTotal    = proghsth.nDistAmt
		lcBatch    = proghsth.cbatch
		lnAlloc    = 0
		
		CREATE CURSOR tempdist ;
		 (cownerid    C(10), ;
		  cOwnName    C(40), ;
		  cProgCode   C(10), ;
		  nPercentage N(11,7), ;
		  nAmount     N(12,2))
		INDEX ON cOwnerID TAG cOwnerID
		
		SELE proghstd
		DELE FOR cBatch = lcBatch
		
		SELE progrel
		SCAN FOR cProgCode = lcProgCode
		   SCATTER MEMVAR
		   
		   *  No point in invalid owner IDs screwing with the running total, so just exclude them if it can't match up
		   SELE investor
		   LOCATE FOR cOwnerID = m.cOwnerID
		   IF FOUND()
		      m.cOwnName = cOwnName
		      m.nAmount  = ROUND(lnTotal * (m.nPercentage/100),2)
		      lnAlloc    = lnAlloc + m.nAmount   
		      INSERT INTO tempdist FROM MEMVAR
		   ENDIF
		   
		   
		ENDSCAN
		
		lnDiff = lnTotal - lnAlloc
		IF lnDiff <> 0
		   SELE tempdist
		   GO BOTT
		   REPL nAmount WITH tempdist.nAmount + lnDiff
		ENDIF   
		
		SELE tempdist
		IF RECC() > 0
		   m.cbatch = lcbatch
		   SCAN
		      SCATTER MEMVAR
		      m.cidprogh = thisform.oregistry.incrementcounter('%Shared.Counters.Prhist')
		      SELECT proghstd1
		      SET DELETED off
		      SET ORDER to cidprogh
		      DO WHILE SEEK(m.cidprogh)
		         m.cidprogh = thisform.oregistry.incrementcounter('%Shared.Counters.Prhist')
		      ENDDO
		      SET DELETED ON 
		      INSERT INTO proghstd FROM MEMVAR      
		   ENDSCAN
		   thisform.save() 
		   *   thisform.requery()
		ENDIF      
		     
		SELECT proghstd
		GO top
		thisform.Refresh()
	ENDPROC

	PROCEDURE cmdDist.When
		RETURN NOT proghsth.lpaid
	ENDPROC

	PROCEDURE cmdPrint.Click
		PRIV lcBatch, lcTitle1, lcTitle2, lcSelect, lcSortOrder, glgrpName, m.cProducer, m.cProcessor, m.cGrpName
		
		lcTitle1 = 'Program Distribution Proof'
		lcTitle2 = 'Distribution Date: ' + DTOC(proghsth.dpostdate)
		lcSelect = ''
		lcSortOrder = ''
		glgrpName   = .f.
		m.cGrpName  = ''
		m.cProcessor = ''
		lcBatch = proghsth.cbatch
		
		IF TYPE('m.goApp') = 'O'
		   m.cProducer = m.goApp.cCompanyName
		ELSE
		   m.cProducer = 'SherWare, Inc.'
		ENDIF
		
		SELECT proghsth.dpostdate, ;
		   proghsth.cbatch, ;
		   investor.cownname AS cownname, ;
		   proghsth.creference, ;
		   proghstd.cownerid, ;
		   proghsth.cprogcode, ;
		   programs.cprogname, ;
		   proghstd.npercentage, ;
		   proghstd.namount ;
		   WHERE proghsth.cbatch = lcbatch ;
		   AND proghsth.cprogcode = programs.cprogcode ;
		   AND proghstd.cownerid = investor.cownerid ;
		   AND proghsth.cbatch   = proghstd.cbatch ;
		   FROM proghsth, proghstd, programs, investor ;
		   INTO CURSOR progdist ;
		   ORDER BY proghsth.dpostdate, proghsth.cprogcode, proghstd.cownerid
		
		IF _tally > 0
		   SELE progdist
		   REPORT FORM dmrprogdist.frx Preview NOCONSOLE NOEJECT
		   IF thisform.omessage.confirm('Send the report to the printer?')
		      REPORT FORM dmrprogdist.frx TO PRINTER PROMPT NOCONSOLE NOEJECT
		   ENDIF
		ENDIF      
	ENDPROC

	PROCEDURE cmdProgram.Click
		LOCAL lcList
		PRIV llOK
		
		llOK = .F.
		
		lcList = 'cprogcode,cprogname'
		
		DO FORM ..\custom\picklist with 'Programs',lcList,thisform.txtcProgcode.value, 2
		
		IF llOK
		   thisform.cmdatamanager.replace('proghsth','cprogcode',programs.cprogcode)
		   thisform.txtcprogcode.Refresh()
		   thisform.txtcprogname.value = programs.cprogname
		   thisform.setnextcontrol(thisform.txtdPostDate)
		   thisform.txtcprogname.refresh()
		ENDIF
		   
	ENDPROC

	PROCEDURE txtCprogcode.GotFocus
		ON KEY LABEL F2 _screen.activeform.cmdProgram.click()
		DODEFAULT()
	ENDPROC

	PROCEDURE txtCprogcode.InteractiveChange
		IF DODEFAULT()
		   SELECT programs
		   LOCATE FOR cprogcode == this.Value
		   IF FOUND()
		      thisform.txtcprogname.set('value',programs.cprogname)
		   ELSE
		      thisform.txtcprogname.set('value','')
		   ENDIF 
		ENDIF    
	ENDPROC

	PROCEDURE txtCprogcode.LostFocus
		ON KEY LABEL F2
		DODEFAULT()
	ENDPROC

	PROCEDURE txtCprogname.When
		RETURN .F.
		
	ENDPROC

ENDDEFINE
