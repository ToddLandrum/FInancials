*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="gasownlist.scx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="2" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Cursor1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor6" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor7" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor8" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor9" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor10" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor11" UniqueID="" Timestamp="" />

	AutoOpenTables = .F.
	DataSource = .NULL.
	Height = 619
	Left = 81
	Name = "Dataenvironment"
	Top = 212
	Width = 981

	ADD OBJECT 'Cursor1' AS cursor WITH ;
		Alias = "investor", ;
		CursorSource = "investor", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor1", ;
		Top = 20, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor10' AS cursor WITH ;
		Alias = "arpmthdr1", ;
		CursorSource = "arpmthdr", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 290, ;
		Name = "Cursor10", ;
		Top = 140, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor11' AS cursor WITH ;
		Alias = "groups", ;
		CursorSource = "groups", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 430, ;
		Name = "Cursor11", ;
		Top = 140, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor2' AS cursor WITH ;
		Alias = "gasown", ;
		CursorSource = "gasown", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 150, ;
		Name = "Cursor2", ;
		Top = 19, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor3' AS cursor WITH ;
		Alias = "gasopt", ;
		CursorSource = "gasopt", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 290, ;
		Name = "Cursor3", ;
		Top = 19, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor4' AS cursor WITH ;
		Alias = "gasinv", ;
		CursorSource = "gasinv", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 430, ;
		Name = "Cursor4", ;
		Top = 21, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor5' AS cursor WITH ;
		Alias = "gasuse", ;
		CursorSource = "gasuse", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 570, ;
		Name = "Cursor5", ;
		Top = 19, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor6' AS cursor WITH ;
		Alias = "custown", ;
		CursorSource = "custown", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 710, ;
		Name = "Cursor6", ;
		Top = 20, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor7' AS cursor WITH ;
		Alias = "arpmtdet", ;
		CursorSource = "arpmtdet", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 850, ;
		Name = "Cursor7", ;
		Top = 20, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor8' AS cursor WITH ;
		Alias = "arpmtdet1", ;
		CursorSource = "arpmtdet", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor8", ;
		Top = 140, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor9' AS cursor WITH ;
		Alias = "arpmthdr", ;
		CursorSource = "arpmthdr", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 150, ;
		Name = "Cursor9", ;
		Top = 140, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

ENDDEFINE

DEFINE CLASS formgasownlist AS frmrptcriteria OF "..\source\appforms.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="opgOrderBy" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="LblBegID" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="LblEndID" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Swrptlook1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcBegMeterNo" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcBegDescription" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcEndMeterNo" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcEndDescription" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblBegMeter" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblEndMeter" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboInclude" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblInclude" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Swgroup" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="LblGroup" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblOrderBy" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkSelected" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblSelected" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: ownerlisting
		*m: ownerproduction
		*m: ownerroute
		*m: ownerstatement
		*p: cwhichrpt
	*</DefinedPropArrayMethod>

	Caption = "House Gas Owner Listing"
	DataSession = 2
	DoCreate = .T.
	FontSize = 8
	Height = 505
	HelpContextID = 166
	Name = "FormGasOwnList"
	Width = 498
	Swrptcriteriabuttons1.chkExport.Alignment = 0
	Swrptcriteriabuttons1.chkExport.Name = "chkExport"
	Swrptcriteriabuttons1.cmdclose.Name = "cmdclose"
	Swrptcriteriabuttons1.cmdPreview.Name = "cmdPreview"
	Swrptcriteriabuttons1.cmdPrint.Name = "cmdPrint"
	Swrptcriteriabuttons1.Left = 132
	Swrptcriteriabuttons1.Name = "Swrptcriteriabuttons1"
	Swrptcriteriabuttons1.TabIndex = 32
	Swrptcriteriabuttons1.Top = 426
	Swrptcriteriabuttons1.ZOrderSet = 1

	ADD OBJECT 'cboInclude' AS cbocomboboxcustom WITH ;
		BoundColumn = 2, ;
		ColumnCount = 1, ;
		Height = 20, ;
		Left = 162, ;
		Name = "cboInclude", ;
		TabIndex = 22, ;
		Top = 312, ;
		Width = 124, ;
		ZOrderSet = 11
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="combobox" />

	ADD OBJECT 'chkSelected' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Choose Selected Owners", ;
		Left = 163, ;
		Name = "chkSelected", ;
		TabIndex = 7, ;
		Top = 121, ;
		Value = .F.
		*< END OBJECT: ClassLib="..\..\wellprofits\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'LblBegID' AS lbllabelcustom WITH ;
		Caption = "First Owner:", ;
		FontSize = 8, ;
		Height = 16, ;
		Left = 93, ;
		Name = "LblBegID", ;
		TabIndex = 14, ;
		Top = 152, ;
		Width = 63, ;
		ZOrderSet = 2
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblBegMeter' AS lbltextcustom WITH ;
		Caption = "Meter Description:", ;
		Left = 67, ;
		Name = "lblBegMeter", ;
		TabIndex = 17, ;
		Top = 196, ;
		ZOrderSet = 9
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'LblEndID' AS lbllabelcustom WITH ;
		Caption = "Last Owner:", ;
		FontSize = 8, ;
		Height = 16, ;
		Left = 93, ;
		Name = "LblEndID", ;
		TabIndex = 18, ;
		Top = 236, ;
		Width = 63, ;
		ZOrderSet = 3
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblEndMeter' AS lbltextcustom WITH ;
		Caption = "Meter Description:", ;
		Left = 67, ;
		Name = "lblEndMeter", ;
		TabIndex = 21, ;
		Top = 280, ;
		ZOrderSet = 10
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'LblGroup' AS lbllabelcustom WITH ;
		AutoSize = .T., ;
		Caption = "Group:", ;
		FontSize = 8, ;
		Height = 16, ;
		Left = 121, ;
		Name = "LblGroup", ;
		TabIndex = 25, ;
		Top = 344, ;
		Width = 35, ;
		ZOrderSet = 19
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblInclude' AS lbltextcustom WITH ;
		Caption = "Include:", ;
		Left = 117, ;
		Name = "lblInclude", ;
		TabIndex = 23, ;
		Top = 314, ;
		ZOrderSet = 12
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblOrderBy' AS lbltextcustom WITH ;
		Caption = "Order By:", ;
		Left = 107, ;
		Name = "lblOrderBy", ;
		TabIndex = 2, ;
		Top = 62, ;
		ZOrderSet = 25
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblSelected' AS lbllabelcustom WITH ;
		Caption = "All Owners Selected", ;
		ForeColor = 0,0,255, ;
		Left = 181, ;
		Name = "lblSelected", ;
		TabIndex = 32, ;
		Top = 179, ;
		Visible = .F.
		*< END OBJECT: ClassLib="..\..\wellprofits\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'opgOrderBy' AS opgoptiongroupcustom WITH ;
		AutoSize = .T., ;
		BorderStyle = 0, ;
		ButtonCount = 2, ;
		Left = 160, ;
		Name = "opgOrderBy", ;
		TabIndex = 1, ;
		Top = 55, ;
		Value = 1, ;
		ZOrderSet = 0, ;
		Option1.AutoSize = .T., ;
		Option1.Caption = "Owner ID", ;
		Option1.FontSize = 8, ;
		Option1.Height = 16, ;
		Option1.Left = 5, ;
		Option1.Name = "Option1", ;
		Option1.Top = 5, ;
		Option1.Value = 1, ;
		Option1.Width = 64, ;
		Option2.AutoSize = .T., ;
		Option2.Caption = "Owner Name", ;
		Option2.FontSize = 8, ;
		Option2.Height = 16, ;
		Option2.Left = 5, ;
		Option2.Name = "Option2", ;
		Option2.Top = 24, ;
		Option2.Width = 82
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="optiongroup" />

	ADD OBJECT 'Swgroup' AS swgroup WITH ;
		Left = 162, ;
		Name = "Swgroup", ;
		TabIndex = 24, ;
		Top = 341, ;
		ZOrderSet = 13
		*< END OBJECT: ClassLib="..\custom\swcontrol.vcx" BaseClass="combobox" />

	ADD OBJECT 'Swrptlook1' AS swrptlook WITH ;
		Height = 141, ;
		Left = 162, ;
		Name = "Swrptlook1", ;
		TabIndex = 13, ;
		Top = 149, ;
		Width = 243, ;
		ZOrderSet = 4, ;
		Swlookupbutton1.Name = "Swlookupbutton1", ;
		Swlookupbutton2.Left = 87, ;
		Swlookupbutton2.Name = "Swlookupbutton2", ;
		Swlookupbutton2.Top = 84, ;
		TxtBegID.clistexpression = gasown.cownerid, ;
		TxtBegID.clistworkarea = gasown, ;
		TxtBegID.Height = 20, ;
		TxtBegID.InputMask = "", ;
		TxtBegID.MaxLength = 10, ;
		TxtBegID.Name = "TxtBegID", ;
		TxtBegName.Height = 20, ;
		TxtBegName.Left = 0, ;
		TxtBegName.Name = "TxtBegName", ;
		TxtBegName.Top = 22, ;
		TxtBegName.Width = 243, ;
		TxtEndID.clistexpression = gasown.cownerid, ;
		TxtEndID.clistworkarea = gasown, ;
		TxtEndID.Height = 20, ;
		TxtEndID.Left = 0, ;
		TxtEndID.Name = "TxtEndID", ;
		TxtEndID.Top = 84, ;
		TxtEndName.Height = 20, ;
		TxtEndName.Left = 0, ;
		TxtEndName.Name = "TxtEndName", ;
		TxtEndName.Top = 105, ;
		TxtEndName.Width = 243
		*< END OBJECT: ClassLib="..\custom\swcontrol.vcx" BaseClass="container" />

	ADD OBJECT 'txtcBegDescription' AS txttextboxcustom WITH ;
		Height = 20, ;
		Left = 276, ;
		Name = "txtcBegDescription", ;
		ReadOnly = .T., ;
		TabIndex = 16, ;
		Top = 194, ;
		Width = 129, ;
		ZOrderSet = 6
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcBegMeterNo' AS txttextboxcustom WITH ;
		Height = 20, ;
		Left = 162, ;
		Name = "txtcBegMeterNo", ;
		ReadOnly = .T., ;
		TabIndex = 15, ;
		Top = 194, ;
		Width = 110, ;
		ZOrderSet = 5
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcEndDescription' AS txttextboxcustom WITH ;
		Height = 20, ;
		Left = 276, ;
		Name = "txtcEndDescription", ;
		ReadOnly = .T., ;
		TabIndex = 20, ;
		Top = 278, ;
		Width = 129, ;
		ZOrderSet = 8
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcEndMeterNo' AS txttextboxcustom WITH ;
		Height = 20, ;
		Left = 162, ;
		Name = "txtcEndMeterNo", ;
		ReadOnly = .T., ;
		TabIndex = 19, ;
		Top = 278, ;
		Width = 110, ;
		ZOrderSet = 7
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />
	
	PROCEDURE builddata
		LOCAL lnCount
		
		WAIT WINDOW NOWAIT 'Processing Request...'
		
		IF USED('owntemp')
		   USE IN owntemp
		ENDIF
		IF USED('temp')
		   USE IN temp
		ENDIF
		
		DO CASE
		   CASE THISFORM.cWhichRpt = 'OL'  &&  Owner Listing Report
		      THISFORM.ownerlisting()
		
		   CASE THISFORM.cWhichRpt = 'OS'  &&  Owner statements
		      THISFORM.ownerstatement()
		
		
		   CASE THISFORM.cWhichRpt = 'OR'  &&  Owner Route Report
		      THISFORM.ownerroute()
		
		   CASE THISFORM.cWhichRpt = 'OP'  &&  Production Report
		      THISFORM.ownerproduction()
		
		ENDCASE
		
		WAIT CLEAR
		
		IF USED('owntemp')
		   SELECT owntemp
		   SET DELETED ON
		   COUNT FOR NOT DELETED() TO lnCount
		ELSE
		   lnCount = 0
		ENDIF
		
		IF lnCount > 0
		   RETURN .T.
		ELSE
		   RETURN .F.
		ENDIF
		
		
	ENDPROC

	PROCEDURE Init
		PARA cWhichRpt
		
		DODEFAULT()
		
		IF TYPE('cWhichRpt') <> 'C'
		   cWhichRpt = 'OS'
		ENDIF
		
		swselect('gasuse')  && Fill in invoice date if it's blank
		SCAN FOR EMPTY(dinvdate)
		   REPLACE dinvdate WITH ddate
		ENDSCAN
		
		THISFORM.cWhichRpt = cWhichRpt
		
		THISFORM.CAPTION = 'House Gas Owner Listing'
		THISFORM.lblInclude.VISIBLE = .T.
		THISFORM.cboInclude.VISIBLE = .T.
		THISFORM.opgOrderBy.VISIBLE = .T.
		THISFORM.lblOrderBy.VISIBLE = .T.
		
		swselect('gasown')
		SET ORDER TO cOwnerID
		GO TOP
		THISFORM.txtcBegMeterNo.SET('value',gasown.cMeterNo)
		THISFORM.txtcBegDescription.SET('value',gasown.cDescription)
		
		swselect('investor')
		LOCATE FOR cOwnerID = gasown.cOwnerID
		IF FOUND()
		   THISFORM.swrptlook1.txtBegName.VALUE = cSortField
		   THISFORM.swrptlook1.txtBegID.VALUE = cOwnerID
		ENDIF
		
		swselect('gasown')
		SET ORDER TO cOwnerID
		GO BOTT
		THISFORM.txtcBegMeterNo.SET('value',gasown.cMeterNo)
		THISFORM.txtcBegDescription.SET('value',gasown.cDescription)
		swselect('investor')
		LOCATE FOR cOwnerID = gasown.cOwnerID
		IF FOUND()
		   THISFORM.swrptlook1.txtEndName.VALUE = cSortField
		   THISFORM.swrptlook1.txtEndID.VALUE = cOwnerID
		ENDIF
		
		swselect('gasown')
		GO BOTTOM
		THISFORM.txtcEndMeterNo.SET('value',gasown.cMeterNo)
		THISFORM.txtcEndDescription.SET('value',gasown.cDescription)
		
		* If we're in demo mode, tell the user that this is an optional module
		IF m.goapp.ldemo
		   THISFORM.omessage.warning('The House Gas module is an optional module that can be purchased separately.' + ;
		      ' It is included in the demo for evaluation purposes.')
		ENDIF
		
		
	ENDPROC

	PROCEDURE ownerlisting
		LOCAL lcWhere1, lnOrderBy, lcOrderBy, lcBegID, lcEndID
		LOCAL lcGroup, lcGroupDesc, llReturn, loError
		
		llReturn = .T.
		
		TRY
		
		    lcBegID     = THISFORM.Swrptlook1.TxtBegID.VALUE
		    lcEndID     = THISFORM.Swrptlook1.TxtEndID.VALUE
		    lcGroupDesc = THISFORM.swGroup.VALUE
		    lcGroup     = LEFT(lcGroupDesc, 2)
		    lcGroupDesc = THISFORM.swGroup.VALUE
		    lnOrderBy   = THISFORM.opgOrderBy.VALUE
		    llSelected  = thisform.chkselected.Value
		   
		   IF NOT llSelected
		      SELECT cownerid AS cid FROM gasown ;
		         INTO CURSOR SELECTED ;
		         WHERE BETWEEN(cownerid,lcBegID,lcEndID) ;
		         ORDER BY cid
		   ENDIF
		
		    DO CASE
		        CASE THISFORM.cboInclude.VALUE = '*'  &&  All Owners
		            lcWhere1         = ''
		            THISFORM.cTitle1 = 'All Owners'
		        CASE THISFORM.cboInclude.VALUE = 'Y'
		            lcWhere1         = 'AND gasown.lGPA'
		            THISFORM.cTitle1 = 'Valid GPA on File'
		        CASE THISFORM.cboInclude.VALUE = 'N'
		            lcWhere1         = 'AND not gasown.lGPA'
		            THISFORM.cTitle1 = 'No Valid GPA on File'
		    ENDCASE
		
		    IF lnOrderBy = 1  &&  Owner ID
		        lcOrderBy = 'gasown.cownerid,gasown.cMeterNo'
		    ELSE
		        lcOrderBy = 'investor.cSortField,gasown.cMeterNo'
		    ENDIF
		
			SELECT  gasown.cownerid,  ;
					investor.cOwnName,  ;
					cSortField,  ;
					cAddress1a,  ;
					ALLTRIM(cCity1) + ' ' + cState1 + '  ' + cZip1 AS cAddress1b,  ;
					cPhoneH AS cPhoneNo,  ;
					cMeterNo,  ;
					cDescription,  ;
					nMultiplier,  ;
					nPressure,  ;
					cGroup,  ;
					nYearlyAmt,  ;
					cLast,  ;
					lGPA,  ;
					cRouteNo,  ;
					nSequence,  ;
					ctype as metertype, ;
					cratetype as ratetype ;
			   FROM gasown, investor  ;
			   INTO CURSOR owntemp  ;
			   WHERE gasown.cownerid = investor.cownerid  ;
				   AND gasown.cownerid in (SELECT cid FROM selected)  ;
				   &lcWhere1  ;
				   AND IIF(lcGroup <> '**', gasown.cGroup = lcGroup, .T.)  ;
			   ORDER BY &lcOrderBy
		
		    THISFORM.cReportName     = 'dmgasownrpt'
		    THISFORM.cSelectCriteria = 'Owner: ' + lcBegID + ' - ' + lcEndID + IIF(lcGroup <> '**', ', in Group ' + lcGroupDesc, '')
		
		    IF lnOrderBy = 1  &&  Owner ID
		        THISFORM.cSortOrder = 'Owner ID, Meter No'
		    ELSE
		        THISFORM.cSortOrder = 'Owner Name, Meter No'
		    ENDIF
		CATCH TO loError
		    llReturn = .F.
		    DO errorlog WITH 'ownerlisting', loError.LINENO, 'House Gas Owner Listing', loError.ERRORNO, loError.MESSAGE, '', loError
		    MESSAGEBOX('Unable to process the report at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		          'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		RETURN llReturn
		
		
	ENDPROC

	PROCEDURE ownerproduction
		LOCAL lcBegID, lcEndID, lcFirstMonth, lcFirstYear, lcGroup, lcGroupDesc, lcLastMonth, lcLastYear
		LOCAL lcMonth, lcMonth2Txt, lcMonthTxt, lcOrderBy, lcRouteNo, lcYear, lcYear2, lnFirstMont
		LOCAL lnLastMonth, lnOrderBy, lnReportOn
		LOCAL llReturn, loError
		
		llReturn = .T.
		
		TRY
		    lcYear  = THISFORM.txtcYear.VALUE
		    lcYear2 = THISFORM.txtcYear2.VALUE
		
		    swselect('gasopt')
		    GO TOP
		
		    lcBegID     = THISFORM.Swrptlook1.TxtBegID.VALUE
		    lcEndID     = THISFORM.Swrptlook1.TxtEndID.VALUE
		    lcGroupDesc = THISFORM.swGroup.VALUE
		    lcGroup     = LEFT(lcGroupDesc, 2)
		    lcMonthTxt  = ALLTRIM(THISFORM.cboMonth.LIST[thisform.cboMonth.listitemid, 1])
		    lcMonth2Txt = ALLTRIM(THISFORM.cboMonth2.LIST[thisform.cboMonth2.listitemid, 1])
		    lcRouteNo   = THISFORM.cboRoute.VALUE
		    lnOrderBy   = THISFORM.opgOrderBy.VALUE
		    lnReportOn  = THISFORM.opgReportOn.VALUE
		
		    lcFirstYear = lcYear
		
		    lcMonth      = gasopt.CMONTH
		    lcFirstMonth = THISFORM.cboMonth.VALUE
		    lnFirstMont  = VAL(lcFirstMonth)
		    lcFirstYear  = THISFORM.txtcYear.VALUE
		
		    lcLastMonth = THISFORM.cboMonth2.VALUE
		    lnLastMonth = VAL(lcLastMonth)
		    lcLastYear  = THISFORM.txtcYear2.VALUE
		    llSelected  = thisform.chkselected.Value
		   
		   IF NOT llSelected
		      SELECT cownerid AS cid FROM gasown ;
		         INTO CURSOR SELECTED ;
		         WHERE BETWEEN(cownerid,lcBegID,lcEndID) ;
		         ORDER BY cid
		   ENDIF
		
		    IF lnOrderBy = 1  &&  Owner ID
		        lcOrderBy           = 'gasown.cownerid,gasown.cMeterNo,gasuse.ddate'
		        THISFORM.cSortOrder = 'Owner ID, Meter No'
		    ELSE
		        lcOrderBy           = 'investor.cSortField,gasown.cMeterNo,gasuse.ddate'
		        THISFORM.cSortOrder = 'Owner Name, Meter No'
		    ENDIF
		
			SELECT  gasown.cownerid,  ;
					investor.cOwnName,  ;
					gasown.cMeterNo,  ;
					cDescription,  ;
					gasown.nUsed,  ;
					gasown.cGroup,  ;
					lcYear AS cYear,  ;
					gasuse.ddate,  ;
					gasuse.cCurrent,  ;
					gasuse.nPrice,  ;
					gasuse.nPriceAdj,  ;
					gasuse.nUsed AS nCurrentUsage,  ;
					0000000.00 AS nCurrent,  ;
					nBillable,  ;
					gasuse.nDue,  ;
					gasown.cLast,  ;
					cRouteNo,  ;
					nSequence  ;
			   FROM gasown, investor, gasuse  ;
			   INTO CURSOR owntemp  ;
			   WHERE gasown.cownerid = investor.cownerid  ;
				   AND gasown.cownerid = gasuse.cownerid  ;
				   AND gasown.cMeterNo = gasuse.cMeterNo  ;
				   AND gasown.cownerid in (SELECT cid FROM selected) ;
				   AND BETWEEN(IIF(lnReportOn = 1, gasuse.ddate, gasuse.dInvDate), CTOD(lcFirstMonth + '/01/' + lcFirstYear), GOMONTH(CTOD(lcLastMonth + '/01/' + lcLastYear), 1) - 1)  ;
				   AND IIF(lcGroup <> '**', gasown.cGroup = lcGroup, .T.)  ;
			   ORDER BY &lcOrderBy
		
		    THISFORM.cReportName     = 'dmgasprodrpt'
		    THISFORM.cTitle1         = IIF(lcGroup <> '**', 'For Group ' + lcGroupDesc, 'For All Groups')
		    THISFORM.cSelectCriteria = 'Usage from ' + lcMonthTxt + ', ' + lcYear + ' - ' + lcMonth2Txt + ', ' + lcYear2
		
		CATCH TO loError
		    llReturn = .F.
		    DO errorlog WITH 'ownerproduction', loError.LINENO, 'House Gas Owner Production', loError.ERRORNO, loError.MESSAGE, '', loError
		    MESSAGEBOX('Unable to process the report at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		          'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		RETURN llReturn 
	ENDPROC

	PROCEDURE ownerroute
		LOCAL lcBegID, lcEndID, lcGroup, lcRouteNo
		LOCAL lcGroupDesc, llReturn, loError
		
		llReturn = .T.
		
		TRY
		    lcBegID = THISFORM.Swrptlook1.TxtBegID.VALUE
		    lcEndID = THISFORM.Swrptlook1.TxtEndID.VALUE
		
		    lcGroupDesc = THISFORM.swGroup.VALUE
		    lcGroup     = LEFT(lcGroupDesc, 2)
		    lcRouteNo   = THISFORM.cboRoute.VALUE
		    llSelected  = thisform.chkselected.Value
		   
		   IF NOT llSelected
		      SELECT cownerid AS cid FROM gasown ;
		         INTO CURSOR SELECTED ;
		         WHERE BETWEEN(cownerid,lcBegID,lcEndID) ;
		         ORDER BY cid
		   ENDIF
		
			SELECT  gasown.cownerid,  ;
					investor.cOwnName,  ;
					ALLT(investor.cAddress1a) + ' ' + ALLT(investor.cAddress1b) + ' ' + ALLT(cCity1) + ', ' + cState1 + '  ' + cZip1 AS cAddress,  ;
					cPhoneH AS cPhoneNo,  ;
					cMeterNo,  ;
					cRouteNo,  ;
					cGroup, ;
					nSequence,  ;
					gasown.cLast,  ;
					gasown.nPressure,  ;
					gasown.mNotes,  ;
					{} AS dLast  ;
			   FROM gasown, investor  ;
			   INTO CURSOR owntemp READWRITE   ;
			   WHERE gasown.cownerid = investor.cownerid  ;
				   AND gasown.cownerid in (select cid FROM selected)  ;
				   AND IIF(lcGroup <> '**', gasown.cGroup = lcGroup, .T.)  ;
				   AND IIF(LEFT(lcRouteNo, 1) <> '*', cRouteNo = lcRouteNo, .T.)  ;
			   ORDER BY cRouteNo, nSequence, cMeterNo
		
		    IF _TALLY > 0
		        SELECT owntemp
		        SCAN
		            SELECT gasuse
		            SET ORDER TO ddate DESC
		            LOCATE FOR cownerid = owntemp.cownerid
		            IF FOUND()
		                REPLACE owntemp.dLast WITH gasuse.ddate
		            ENDIF
		        ENDSCAN
		    ENDIF
		
		    THISFORM.cReportName = 'dmgasroute'
		CATCH TO loError
		    llReturn = .F.
		    DO errorlog WITH 'OwnerRoute', loError.LINENO, 'House Gas Owner Route', loError.ERRORNO, loError.MESSAGE, '', loError
		    MESSAGEBOX('Unable to process the report at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		          'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		RETURN llReturn
		
	ENDPROC

	PROCEDURE ownerstatement
		LOCAL lcBegID, lcCharge, lcEndID, lcFirstMonth, lcFirstYear, lcGroup, lcGroupDesc, lcInvNum
		LOCAL lcMeterNo, lcMonth, lcMonth2Txt, lcMonthTxt, lcOrderBy, lcRouteNo, lcWhere1, lcYear, lcYear2
		LOCAL lcarlist, ldDate, ldInvDate, lnBillable, lnCharge, lnCurrentUsage, lnDue, lnFirstMonth
		LOCAL lnOrderBy, lnPrice, lnPriceAdj, lnRecno, lnReportOn, lnUsed, llInvoices, tcInvNum
		LOCAL lcInclude, lcOwner, ldReadDate, llIncludePriorBal, llIncludeAllBal, lcExact
		
		#DEFINE READING 1
		#DEFINE INVOICE 2
		
		*:Global nPrior
		
		llReturn = .T.
		
		TRY
		
		   lcExact = SET('exact')
		
		   SET EXACT ON
		
		   lcYear  = THISFORM.txtcYear.VALUE
		   lcYear2 = THISFORM.txtcYear2.VALUE
		
		   swselect('gasopt')
		   GO TOP
		
		* Get the report criteria into variables so we have shorter names to work with
		   lcBegID           = THISFORM.Swrptlook1.TxtBegID.VALUE
		   lcEndID           = THISFORM.Swrptlook1.TxtEndID.VALUE
		   lcGroupDesc       = THISFORM.swGroup.VALUE
		   lcGroup           = LEFT(lcGroupDesc, 2)
		   lcMonthTxt        = ALLTRIM(THISFORM.cboMonth.LIST[thisform.cboMonth.listitemid, 1])
		   lcMonth2Txt       = ALLTRIM(THISFORM.cboMonth2.LIST[thisform.cboMonth2.listitemid, 1])
		   lcRouteNo         = THISFORM.cboRoute.VALUE
		   lnOrderBy         = THISFORM.opgOrderBy.VALUE
		   lnReportOn        = THISFORM.opgReportOn.VALUE
		   llInvoices        = THISFORM.chkinvoices.VALUE
		   tcInvNum          = ALLTRIM(THISFORM.txtinvNum.VALUE)
		   lcFirstYear       = lcYear
		   lcMonth           = THISFORM.cboMonth.VALUE
		   lcYear            = THISFORM.txtcYear.VALUE
		   lcInclude         = THISFORM.cboinclude.VALUE
		   llIncludePriorBal = THISFORM.chkInclude.VALUE
		   llIncludeAllBal   = THISFORM.chkbalall.VALUE
		   llSelected  = thisform.chkselected.Value
		   
		   IF NOT llSelected
		      SELECT cownerid AS cid FROM gasown ;
		         INTO CURSOR SELECTED ;
		         WHERE BETWEEN(cownerid,lcBegID,lcEndID) ;
		         ORDER BY cid
		   ENDIF
		
		* Get the beginning month for billing
		   IF EMPTY(gasopt.CMONTH)
		* If the option hasn't been set default to January
		      lnFirstMonth = 1
		      lcFirstMonth = '01'
		   ELSE
		      lnFirstMonth = VAL(gasopt.CMONTH)
		      lcFirstMonth = gasopt.CMONTH
		      IF lcMonth < lcFirstMonth
		         lcFirstYear = ALLTRIM(STR(VAL(lcFirstYear) - 1))
		      ENDIF
		   ENDIF
		
		* Check to see which owners to include
		   DO CASE
		   CASE lcInclude = '*'
		* All owners
		      lcWhere1 = ''
		   CASE lcInclude = 'Y'
		* GPA on File
		      lcWhere1 = 'AND gasown.lGPA'
		   CASE lcInclude = 'N'
		* No GPA on file
		      lcWhere1 = 'AND not gasown.lGPA'
		   ENDCASE
		
		   IF lnOrderBy = 1
		* Order by owner id
		      lcOrderBy = 'gasown.cownerid,gasown.cMeterNo,gasuse.ddate desc'
		   ELSE
		* Order by owner name
		      lcOrderBy = 'investor.cSortField,gasown.cMeterNo,gasuse.ddate desc'
		   ENDIF
		
		   IF lnReportOn = READING
		      lcInvDate = 'gasuse.ddate'
		   ELSE
		      lcInvDate = 'gasuse.dInvDate'
		   ENDIF
		
		   SELECT  gasown.cownerid,  ;
		      investor.cSortField,  ;
		      investor.cOwnName,  ;
		      investor.cOwnName1,  ;
		      cPhoneH AS cPhone,  ;
		      cAddress1a,  ;
		      cAddress1b,  ;
		      ALLTRIM(cCity1) + ' ' + cState1 + '  ' + cZip1 AS cAddress1c,  ;
		      gasown.cMeterNo,  ;
		      cDescription,  ;
		      0000000.00 AS nUsed,  ;
		      gasown.cGroup,  ;
		      lcMonthTxt AS CMONTH,  ;
		      lcYear AS cYear,  ;
		      gasuse.ddate AS dReadDate,  ;
		      gasuse.cCurrent,  ;
		      gasuse.nPrice,  ;
		      gasuse.nPriceAdj,  ;
		      gasuse.nPressure,  ;
		      gasuse.nMultiplier,  ;
		      gasuse.nCharge,  ;
		      gasuse.cCharge,  ;
		      gasuse.nUsed AS nCurrentUsage,  ;
		      0000000.00 AS nCurrent,  ;
		      0000000.00 AS nYTD,  ;
		      0000000.00 AS nPrior,  ;
		      gasuse.nBillable,  ;
		      dduedate,  ;
		      gasinv.dInvDate,  ;
		      cinvtoken,  ;
		      gasuse.nDue,  ;
		      gasopt.mInvNotes,  ;
		      gasown.nYearlyAmt,  ;
		      gasown.cLast,  ;
		      lGPA,  ;
		      cInvNum,  ;
		      cRouteNo,  ;
		      nSequence  ;
		      FROM gasown, investor, gasuse, gasinv, gasopt  ;
		      INTO CURSOR owntemp1 READWRITE   ;
		      WHERE gasown.cownerid = investor.cownerid  ;
		      AND gasown.cownerid = gasuse.cownerid  ;
		      AND gasown.cMeterNo = gasuse.cMeterNo  ;
		      AND gasown.cownerid in (SELECT cid in selected)  ;
		      AND BETWEEN(&lcInvDate, ;
		      CTOD(lcFirstMonth + '/01/' + lcFirstYear), GOMONTH(CTOD(lcMonth + '/01/' + lcYear), 1) - 1)  ;
		      AND gasuse.cinvtoken = gasinv.cidgasinv  ;
		      &lcWhere1  ;
		      AND IIF(lcGroup <> '**', gasown.cGroup = lcGroup, .T.)  ;
		      ORDER BY &lcOrderBy
		
		
		   SELECT owntemp1
		
		   IF llIncludePriorBal
		* If including previous balances
		      IF m.goapp.lQBVersion	
		         SELECT  * ;
		            FROM owntemp1 ;
		            WHERE PADL(ALLTRIM(STR(MONTH(dReadDate))), 2, '0') = lcMonth   ;
		            AND ALLTRIM(STR(YEAR(dReadDate))) = lcYear ;
		            INTO CURSOR tempowns
		
		         swselect('gasopt')
		         GO TOP
		         lcarlist = caracct
		
		         IF EMPTY(caracct)
		            THISFORM.oMessage.Warning('Please select the house gas receivables account in the house gas preferences screen.')
		            llReturn = .F.
		            EXIT
		         ENDIF
		
		         SELECT tempowns
		         SCAN
		            SELECT gasinv
		            ldInvDate = tempowns.dInvDate
		            LOCATE FOR cMeterNo = tempowns.cMeterNo AND dInvDate < tempowns.dInvDate
		            IF FOUND()
		               WAIT WINDOW NOWAIT 'Retrieving Previous Balance from QB for ' + ALLTRIM(owntemp1.cOwnName)
		               m.nPrior = m.goapp.oQB.qbOwnerBal(tempowns.cownerid, ldInvDate - 1, lcarlist)
		               WAIT CLEAR
		               SELECT owntemp1
		               SCAN FOR cMeterNo = tempowns.cMeterNo
		                  REPLACE nPrior WITH m.nPrior
		               ENDSCAN
		            ENDIF
		         ENDSCAN
		      ELSE
		         SELECT  * ;
		            FROM owntemp1 ;
		            WHERE PADL(ALLTRIM(STR(MONTH(IIF(lnReportOn = READING, dReadDate, dInvDate)))), 2, '0') = lcMonth   ;
		            AND ALLTRIM(STR(YEAR(IIF(lnReportOn = READING, dReadDate, dInvDate)))) = lcYear ;
		            INTO CURSOR temp
		
		         SELECT temp
		         SCAN
		            ldInvDate = temp.dInvDate
		* Calculate any prior balances
		            DO araged WITH temp.cownerid, temp.cownerid, ;
		               ldInvDate - 1, .T., IIF(lnReportOn = READING, 4, 2), .T.,.f.,.f.,.f.,llSelected
		            SELECT custbal
		            IF NOT llIncludeAllBal
		               SUM(nInvBal) TO lnPrior FOR cMeterNo == temp.cMeterNo
		               SELECT owntemp1
		               REPLACE nPrior WITH lnPrior FOR cMeterNo == temp.cMeterNo
		            ELSE
		               SUM(nInvBal) TO lnPrior FOR cCustID == temp.cownerid
		               SELECT owntemp1
		               REPLACE nPrior WITH lnPrior FOR cownerid = temp.cownerid
		            ENDIF
		         ENDSCAN
		      ENDIF
		   ENDIF
		
		*********************************************************************
		*
		   SELECT owntemp1
		   SCAN
		* Replace the second address line with the city/state/zip if the second address line is blank
		      IF EMPTY(cAddress1b) AND NOT EMPTY(cAddress1c)
		         REPLACE cAddress1b WITH cAddress1c, cAddress1c WITH ''
		      ENDIF
		
		      SELECT owntemp1
		      lcMeterNo  = cMeterNo
		      ldReadDate = dReadDate
		      lnRecno    = RECNO()
		      SUM(nCurrentUsage) FOR cMeterNo = lcMeterNo AND   ;
		         BETWEEN(IIF(lnReportOn = READING, dReadDate, dInvDate), CTOD(lcFirstMonth + '/01/' + lcFirstYear), ldReadDate) TO lnUsed
		      GOTO lnRecno
		      REPLACE nYTD WITH lnUsed
		   ENDSCAN
		
		   swselect('gasown')
		   SCAN
		      SELECT owntemp1
		      LOCATE FOR cMeterNo = gasown.cMeterNo AND ;
		         PADL(TRANSFORM(MONTH(IIF(lnReportOn = READING, dReadDate, dInvDate))), 2, '0') = lcMonth AND ;
		         YEAR(IIF(lnReportOn = READING, dReadDate, dInvDate)) = VAL(lcYear)
		      IF NOT FOUND()
		* If there are no recs for this month, delete all recs, so no report generates
		         DELETE FOR cownerid = gasown.cownerid AND cMeterNo = gasown.cMeterNo
		      ELSE
		         lcOwner = cownerid
		         SELECT gasuse
		         SUM(gasuse.nUsed) FOR cMeterNo = owntemp1.cMeterNo AND ;
		            BETWEEN(IIF(lnReportOn = READING, ddate, dInvDate), ;
		            CTOD(lcFirstMonth + '/01/' + lcFirstYear), CTOD(lcMonth + '/01/' + lcYear) - 1) TO lnMinus
		         SELECT owntemp1
		         lcMeterNo      = owntemp1.cMeterNo
		         lnPrice        = owntemp1.nPrice
		         lcInvNum       = owntemp1.cInvNum
		         lnBillable     = owntemp1.nBillable
		         lnCurrentUsage = owntemp1.nCurrentUsage
		         lnDue          = owntemp1.nDue
		         lnUsed         = owntemp1.nUsed
		         lcCharge       = owntemp1.cCharge
		         lnCharge       = owntemp1.nCharge
		         lnPriceAdj     = owntemp1.nPriceAdj
		         SELECT owntemp1
		         REPLACE nBillable WITH lnBillable, nCurrent WITH lnCurrentUsage  ;
		            nUsed WITH lnMinus, nPrice WITH lnPrice, cCharge WITH lcCharge,  ;
		            nCharge WITH lnCharge, nPriceAdj WITH lnPriceAdj FOR cMeterNo = lcMeterNo
		         IF NOT EMPTY(lcInvNum)
		            REPLACE cInvNum WITH lcInvNum FOR cownerid == lcOwner AND cMeterNo == lcMeterNo
		         ENDIF
		      ENDIF
		   ENDSCAN
		
		   SELECT owntemp1
		   IF llInvoices
		      IF EMPTY(tcInvNum)
		         DELETE FOR EMPTY(cInvNum)
		      ELSE
		         DELETE FOR cInvNum <> tcInvNum
		      ENDIF
		      DELETE FROM owntemp1 WHERE cownerid NOT IN (SELECT cownerid FROM owntemp1 WHERE MONTH(dReadDate) = VAL(lcMonth))
		      SELECT *, dReadDate AS ddate FROM owntemp1 INTO CURSOR owntemp ORDER BY cInvNum, dReadDate DESC
		   ELSE
		      IF lnOrderBy = 1  &&  Owner ID
		         SELECT *, dReadDate AS ddate FROM owntemp1 INTO CURSOR owntemp READWRITE ORDER BY cownerid, cMeterNo, dReadDate DESC
		      ELSE
		         SELECT *, dReadDate AS ddate FROM owntemp1 INTO CURSOR owntemp READWRITE ORDER BY cSortField, cMeterNo, dReadDate DESC
		      ENDIF
		
		   ENDIF
		
		   SELECT owntemp
		   GO TOP
		   ldInvDate = dInvDate
		   SCAN
		      REPLACE dInvDate WITH ldInvDate
		   ENDSCAN
		
		
		   SET EXACT &lcExact
		   THISFORM.cReportName = m.goapp.cRptsFolder + 'gasinv'
		CATCH TO loError
		   llReturn = .F.
		   DO errorlog WITH 'ownerstatement', loError.LINENO, 'House Gas Owner Statements', loError.ERRORNO, loError.MESSAGE, '', loError
		   MESSAGEBOX('Unable to process the report at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		      'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		RETURN llReturn
		
		
	ENDPROC

	PROCEDURE cboInclude.Init
		THIS.ADDLISTITEM('All Owners',1,1)
		THIS.ADDLISTITEM('*',1,2)
		THIS.ADDLISTITEM('GPA on File',2,1)
		THIS.ADDLISTITEM('Y',2,2)
		THIS.ADDLISTITEM('No GPA on File',3,1)
		THIS.ADDLISTITEM('N',3,2)
		
		THIS.LISTITEMID = 1
		
		DODEFAULT()
		
	ENDPROC

	PROCEDURE chkSelected.Click
		IF this.Value
		   DO FORM commonsource\selected-ids WITH 'OWNER' LINKED 
		   lnCount = RECCOUNT('selected')
		   thisform.lblselected.Caption = TRANSFORM(lnCount) + ' Owners Selected'
		   thisform.lblselected.Visible = .T.
		   thisform.lblbegID.Visible = .F.
		   thisform.lblendID.Visible = .F.
		   thisform.swrptlook1.Visible = .F.
		   thisform.lblbegMeter.Visible = .f.
		   thisform.txtcbegDescription.Visible = .f.
		   thisform.txtcbegMeterNo.Visible = .f.
		   thisform.txtcendDescription.Visible = .f.
		   thisform.txtcendMeterNo.Visible = .f.
		   thisform.lblendMeter.Visible = .f.
		ELSE
		   thisform.lblselected.Visible = .F.
		   thisform.lblbegID.Visible = .T.
		   thisform.lblendID.Visible = .T.
		   thisform.swrptlook1.Visible = .T.
		   thisform.lblbegMeter.Visible  = .T.
		   thisform.txtcbegDescription.Visible = .T.
		   thisform.txtcbegMeterNo.Visible = .T.
		   thisform.txtcendDescription.Visible = .T.
		   thisform.txtcendMeterNo.Visible = .T.
		   thisform.lblendMeter.Visible = .T.
		ENDIF 
	ENDPROC

	PROCEDURE Swrptlook1.Swlookupbutton1.Click
		LOCAL lcList
		PRIV llOK
		
		IF USED('temp')
		    USE IN temp
		ENDIF
		IF USED('temp1')
		    USE IN temp1
		ENDIF
		
		SELECT  gasown.cOwnerID, investor.cSortField, investor.cOwnName, gasown.cmeterno, gasown.cDescription, gasown.cGroup ;
		   FROM gasown, investor  ;
		   WHERE gasown.cOwnerID = investor.cOwnerID ;
		   INTO CURSOR temp1
		
		USE DBF('temp1') AGAIN IN 0 ALIAS temp
		SELECT temp
		INDEX ON cOwnerID TAG cOwnerID
		INDEX ON cSortField TAG cSortField
		INDEX ON cDescription TAG cDescrip
		INDEX ON cmeterno TAG cmeterno
		
		llOK   = .F.
		lcList = 'cownerid\Owner ID,csortfield\Name,cmeterno\Meter No.,cdescription/cdescrip\Description,cgroup\Group'
		
		DO FORM ..\CUSTOM\picklist WITH 'temp', lcList, THIS.PARENT.TxtBegID.VALUE, 5, .T., .T.
		
		IF llOK
		    THISFORM.txtcBegMeterNo.SET('value', temp.cmeterno)
		    THISFORM.txtcBegDescription.SET('value', temp.cDescription)
		    THIS.PARENT.TxtBegID.SET('value', temp.cOwnerID)
		    THIS.PARENT.TxtBegName.SET('VALUE', temp.cOwnName)
		    THISFORM.setnextcontrol(THIS.PARENT.TxtBegID)
		ENDIF
	ENDPROC

	PROCEDURE Swrptlook1.Swlookupbutton2.Click
		LOCAL lcList
		PRIV llOK
		
		IF USED('temp')
		    USE IN temp
		ENDIF
		IF USED('temp1')
		    USE IN temp1
		ENDIF
		
		SELECT  gasown.cOwnerID, investor.cSortField, investor.cOwnName, gasown.cmeterno, gasown.cDescription, gasown.cGroup ;
		   FROM gasown, investor  ;
		   WHERE gasown.cOwnerID = investor.cOwnerID ;
		   INTO CURSOR temp1
		
		USE DBF('temp1') AGAIN IN 0 ALIAS temp
		SELECT temp
		INDEX ON cOwnerID TAG cOwnerID
		INDEX ON cSortField TAG cSortField
		INDEX ON cDescription TAG cDescrip
		INDEX ON cmeterno TAG cmeterno
		
		llOK   = .F.
		lcList = 'cownerid\Owner ID,csortfield\Name,cmeterno\Meter No.,cdescription/cdescrip\Description,cgroup\Group'
		
		DO FORM ..\CUSTOM\picklist WITH 'temp', lcList, THIS.PARENT.TxtEndID.VALUE, 5, .T., .T.
		
		IF llOK
		    THISFORM.txtcEndMeterNo.SET('value', temp.cmeterno)
		    THISFORM.txtcEndDescription.SET('value', temp.cDescription)
		    THIS.PARENT.TxtEndID.SET('value', temp.cOwnerID)
		    THIS.PARENT.TxtEndName.SET('VALUE', temp.cOwnName)
		    THISFORM.setnextcontrol(THIS.PARENT.TxtEndID)
		ENDIF
	ENDPROC

	PROCEDURE Swrptlook1.TxtBegID.InteractiveChange
		IF DODEFAULT()
		   swselect('gasown')
		   LOCATE FOR cownerid == this.value
		   IF found()
		      swselect('investor')
		      LOCATE FOR cownerid == this.value
		      IF FOUND()
		         thisform.swRPTLOOK1.txtBEGNAME.Value = investor.csortfield
		         thisform.txtcbegDescription.Value = gasown.cdescription
		         thisform.txtcbegMeterNo.Value = gasown.cmeterno
		         thisform.swRPTLOOK1.txtENDNAME.Value = investor.csortfield
		         thisform.txtcendDescription.Value = gasown.cdescription
		         thisform.txtcendMeterNo.Value = gasown.cmeterno
		      ENDIF
		   ENDIF    
		ENDIF    
	ENDPROC

	PROCEDURE Swrptlook1.TxtBegID.Valid
		swselect('gasown')
		SET ORDER TO cownerid
		
		IF NOT SEEK(THIS.VALUE) AND NOT MDOWN()
		    THISFORM.oMessage.Warning('This owner is not a valid house gas owner.  Please select another owner.')
		    RETURN 0
		ELSE
		    THISFORM.txtcBegMeterNo.SET('value', gasown.cMeterNo)
		    THISFORM.txtcBegDescription.SET('value', gasown.cDescription)
		ENDIF
		
		DODEFAULT()
		
		
		
		
	ENDPROC

	PROCEDURE Swrptlook1.TxtEndID.InteractiveChange
		IF DODEFAULT()
		   swselect('gasown')
		   LOCATE FOR cownerid == this.value
		   IF found()
		      swselect('investor')
		      LOCATE FOR cownerid == this.value
		      IF FOUND()
		         thisform.swRPTLOOK1.txtENDNAME.Value = investor.csortfield
		         thisform.txtcendDescription.Value = gasown.cdescription
		         thisform.txtcendMeterNo.Value = gasown.cmeterno
		      ENDIF
		   ENDIF    
		ENDIF    
	ENDPROC

	PROCEDURE Swrptlook1.TxtEndID.Valid
		swselect('gasown')
		SET ORDER TO cownerid
		IF NOT SEEK(THIS.VALUE) AND NOT MDOWN()
		    THISFORM.oMessage.Warning('This owner is not a valid house gas owner.  Please select another owner.')
		    RETURN 0
		ELSE
		    THISFORM.txtcEndMeterNo.SET('value', gasown.cMeterNo)
		    THISFORM.txtcEndDescription.SET('value', gasown.cDescription)
		ENDIF
		
		
		DODEFAULT()
		
	ENDPROC

	PROCEDURE txtcBegDescription.When
		return .f.
		
	ENDPROC

	PROCEDURE txtcBegMeterNo.When
		return .f.
		
	ENDPROC

	PROCEDURE txtcEndDescription.When
		return .f.
		
	ENDPROC

	PROCEDURE txtcEndMeterNo.When
		return .f.
		
	ENDPROC

ENDDEFINE
