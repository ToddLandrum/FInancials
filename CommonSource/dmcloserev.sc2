*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="dmcloserev.scx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="2" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Cursor1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor6" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor9" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor10" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor12" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor13" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor14" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor15" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor16" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor17" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor18" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor19" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor20" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor21" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor22" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor23" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor24" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor25" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor27" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor29" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor26" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor7" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor8" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor28" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor11" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor30" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor31" UniqueID="" Timestamp="" />

	AutoOpenTables = .F.
	DataSource = .NULL.
	Height = 992
	Left = 29
	Name = "Dataenvironment"
	Top = 18
	Width = 1089

	ADD OBJECT 'Cursor1' AS cursor WITH ;
		Alias = "aropt", ;
		BufferModeOverride = 5, ;
		CursorSource = "aropt", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 11, ;
		Name = "Cursor1", ;
		Top = 17, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor10' AS cursor WITH ;
		Alias = "invdet", ;
		BufferModeOverride = 5, ;
		CursorSource = "invdet", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor10", ;
		Top = 380, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor11' AS cursor WITH ;
		Alias = "plugowner", ;
		BufferModeOverride = 5, ;
		CursorSource = "plugowner", ;
		Database = ..\newdbc\appdata.dbc, ;
		Height = 90, ;
		Left = 967, ;
		Name = "Cursor11", ;
		Top = 176, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor12' AS cursor WITH ;
		Alias = "options", ;
		CursorSource = "options", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 290, ;
		Name = "Cursor12", ;
		Top = 380, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor13' AS cursor WITH ;
		Alias = "terms", ;
		CursorSource = "terms", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor13", ;
		Top = 500, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor14' AS cursor WITH ;
		Alias = "taxcodes", ;
		CursorSource = "taxcodes", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 150, ;
		Name = "Cursor14", ;
		Top = 500, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor15' AS cursor WITH ;
		Alias = "vendor", ;
		CursorSource = "vendor", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 290, ;
		Name = "Cursor15", ;
		Order = "cvendorid", ;
		Top = 500, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor16' AS cursor WITH ;
		Alias = "wellinv", ;
		CursorSource = "wellinv", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor16", ;
		Top = 620, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor17' AS cursor WITH ;
		Alias = "wells", ;
		CursorSource = "wells", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 150, ;
		Name = "Cursor17", ;
		Top = 620, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor18' AS cursor WITH ;
		Alias = "wellhist", ;
		BufferModeOverride = 5, ;
		CursorSource = "wellhist", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 290, ;
		Name = "Cursor18", ;
		Top = 620, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor19' AS cursor WITH ;
		Alias = "disbhist", ;
		BufferModeOverride = 5, ;
		CursorSource = "disbhist", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor19", ;
		Top = 738, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor2' AS cursor WITH ;
		Alias = "arpmthdr", ;
		CursorSource = "arpmthdr", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 150, ;
		Name = "Cursor2", ;
		Top = 20, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor20' AS cursor WITH ;
		Alias = "sysctl", ;
		BufferModeOverride = 5, ;
		CursorSource = "sysctl", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 561, ;
		Name = "Cursor20", ;
		Top = 179, ;
		Width = 91
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor21' AS cursor WITH ;
		Alias = "checks", ;
		BufferModeOverride = 5, ;
		CursorSource = "checks", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 432, ;
		Name = "Cursor21", ;
		Top = 652, ;
		Width = 91
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor22' AS cursor WITH ;
		Alias = "apopt", ;
		CursorSource = "apopt", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 433, ;
		Name = "Cursor22", ;
		Top = 16, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor23' AS cursor WITH ;
		Alias = "revcat", ;
		CursorSource = "revcat", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 663, ;
		Name = "Cursor23", ;
		Top = 34, ;
		Width = 91
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor24' AS cursor WITH ;
		Alias = "revsrc", ;
		CursorSource = "revsrc", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 427, ;
		Name = "Cursor24", ;
		Top = 141, ;
		Width = 91
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor25' AS cursor WITH ;
		Alias = "groups", ;
		CursorSource = "groups", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 431, ;
		Name = "Cursor25", ;
		Top = 266, ;
		Width = 101
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor26' AS cursor WITH ;
		Alias = "suspense", ;
		BufferModeOverride = 5, ;
		CursorSource = "suspense", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 551, ;
		Name = "Cursor26", ;
		Top = 34, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor27' AS cursor WITH ;
		Alias = "income", ;
		BufferModeOverride = 5, ;
		CursorSource = "income", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 437, ;
		Name = "Cursor27", ;
		Top = 392, ;
		Width = 91
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor28' AS cursor WITH ;
		Alias = "one_man_tax", ;
		BufferModeOverride = 5, ;
		CursorSource = "one_man_tax", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 622, ;
		Name = "Cursor28", ;
		Top = 532, ;
		Width = 99
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor29' AS cursor WITH ;
		Alias = "roundtmp", ;
		BufferModeOverride = 5, ;
		CursorSource = "roundtmp", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 149, ;
		Name = "Cursor29", ;
		Top = 257, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor3' AS cursor WITH ;
		Alias = "expense", ;
		BufferModeOverride = 5, ;
		CursorSource = "expense", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 290, ;
		Name = "Cursor3", ;
		Top = 20, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor30' AS cursor WITH ;
		Alias = "plugwell", ;
		BufferModeOverride = 5, ;
		CursorSource = "plugwell", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 710, ;
		Name = "Cursor30", ;
		Top = 177, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor31' AS cursor WITH ;
		Alias = "plugwellbal", ;
		BufferModeOverride = 5, ;
		CursorSource = "plugwellbal", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 844, ;
		Name = "Cursor31", ;
		Top = 173, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor4' AS cursor WITH ;
		Alias = "expcat", ;
		BufferModeOverride = 5, ;
		CursorSource = "expcat", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 8, ;
		Name = "Cursor4", ;
		Top = 144, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor5' AS cursor WITH ;
		Alias = "glmaster", ;
		BufferModeOverride = 5, ;
		CursorSource = "glmaster", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 570, ;
		Name = "Cursor5", ;
		Top = 380, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor6' AS cursor WITH ;
		Alias = "glopt", ;
		CursorSource = "glopt", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 290, ;
		Name = "Cursor6", ;
		Top = 140, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor7' AS cursor WITH ;
		Alias = "coa", ;
		CursorSource = "coa", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 710, ;
		Name = "Cursor7", ;
		Top = 380, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor8' AS cursor WITH ;
		Alias = "coabal", ;
		BufferModeOverride = 5, ;
		CursorSource = "coabal", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 850, ;
		Name = "Cursor8", ;
		Top = 380, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor9' AS cursor WITH ;
		Alias = "invhdr", ;
		BufferModeOverride = 5, ;
		CursorSource = "invhdr", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 290, ;
		Name = "Cursor9", ;
		Order = "cbatch", ;
		Top = 260, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

ENDDEFINE

DEFINE CLASS formdmcloserev AS frmformcustom OF "..\custom\cforms.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Shpshapecustom4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Shpshapecustom3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Shpshapecustom2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Shpshapecustom1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtdPostDate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblPeriod" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblDash" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtdCheckDate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblCheckDate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Swyear1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdProcess" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdCancel" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Swgroup1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Glmaint" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblRunNo" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="nrunno" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtdRevDate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkPrintSuspense" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkUnallocated" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkClosingWell" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkRegister" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chklFlatRate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom6" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chklBackup" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblPostDate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkadvposting" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtdExpDate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chklMinimums" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkQuarterly" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom9" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="DirDepDate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblDirDepDate" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: backup		&& Performs data backup
		*m: calcsummary		&& Calculates and builds the closing summary
		*m: checkactivity
		*m: checkforflatrate		&& Checks for flat rate royalties.
		*m: checkhist
		*m: checkqtrly		&& Check for quarterly wells.
		*m: process		&& Performs the JIB close processing
		*m: qbsync		&& Checks to see if the files need to be synchronized with QB.
		*m: viewoutput
		*p: lcloserun
		*p: lrelmin		&& Release All Minimum Amounts?
		*p: odist		&& Distproc object
		*p: oprogress
	*</DefinedPropArrayMethod>

	BufferMode = 2
	Caption = "Close a Revenue Run"
	DataSession = 2
	DoCreate = .T.
	Height = 496
	HelpContextID = 114
	Name = "FormDmcloserev"
	Visible = .T.
	Width = 485
	Mwresize1.lblHighLight.Name = "lblHighLight"
	Mwresize1.lblShading.Name = "lblShading"
	Mwresize1.Name = "Mwresize1"

	ADD OBJECT 'chkadvposting' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Advanced Posting", ;
		Left = 304, ;
		Name = "chkadvposting", ;
		TabIndex = 6, ;
		Top = 51, ;
		Value = .F., ;
		ZOrderSet = 28
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkClosingWell' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Print Closing by Well Exception Rpt", ;
		Left = 36, ;
		Name = "chkClosingWell", ;
		TabIndex = 26, ;
		Top = 406, ;
		Value = .T., ;
		ZOrderSet = 22
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chklBackup' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Backup data files before processing", ;
		Left = 36, ;
		Name = "chklBackup", ;
		TabIndex = 20, ;
		Top = 284, ;
		Value = .T., ;
		ZOrderSet = 26
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chklFlatRate' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Process Flat-Rate Owners", ;
		Left = 273, ;
		Name = "chklFlatRate", ;
		TabIndex = 21, ;
		Top = 284, ;
		Value = .F., ;
		ZOrderSet = 24
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chklMinimums' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Release All Minimums from Suspense", ;
		Left = 36, ;
		Name = "chklMinimums", ;
		TabIndex = 22, ;
		Top = 313, ;
		Value = .F., ;
		ZOrderSet = 33
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkPrintSuspense' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Print Suspense Activity Detail", ;
		Left = 36, ;
		Name = "chkPrintSuspense", ;
		TabIndex = 24, ;
		Top = 377, ;
		Value = .T., ;
		ZOrderSet = 20
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkQuarterly' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Process Quarterly Wells", ;
		Left = 273, ;
		Name = "chkQuarterly", ;
		TabIndex = 23, ;
		Top = 313, ;
		Value = .F., ;
		ZOrderSet = 34
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkRegister' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Print Check Register", ;
		Left = 273, ;
		Name = "chkRegister", ;
		TabIndex = 25, ;
		Top = 377, ;
		Value = .T., ;
		ZOrderSet = 23
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkUnallocated' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Print Unallocated Rev/Exp Rpt", ;
		Left = 273, ;
		Name = "chkUnallocated", ;
		TabIndex = 27, ;
		Top = 406, ;
		Value = .T., ;
		ZOrderSet = 21
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'cmdCancel' AS cmdcommandbuttoncustom WITH ;
		Caption = "\<Cancel", ;
		Height = 36, ;
		Left = 252, ;
		Name = "cmdCancel", ;
		TabIndex = 29, ;
		Top = 452, ;
		Width = 75, ;
		ZOrderSet = 12
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdProcess' AS cmdcommandbuttoncustom WITH ;
		Caption = "\<Process", ;
		Height = 36, ;
		Left = 164, ;
		Name = "cmdProcess", ;
		TabIndex = 28, ;
		Top = 452, ;
		Width = 75, ;
		ZOrderSet = 11
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'DirDepDate' AS dpk WITH ;
		Left = 324, ;
		Name = "DirDepDate", ;
		Top = 103, ;
		Visible = .F.
		*< END OBJECT: ClassLib="..\custom\swdate.vcx" BaseClass="textbox" />

	ADD OBJECT 'Glmaint' AS glmaint WITH ;
		Left = 12, ;
		Name = "Glmaint", ;
		Top = 12
		*< END OBJECT: ClassLib="..\custom\swgl.vcx" BaseClass="custom" />

	ADD OBJECT 'lblCheckDate' AS lbllabelcustom WITH ;
		Alignment = 1, ;
		AutoSize = .F., ;
		Caption = "Check/Posting Date:", ;
		Height = 16, ;
		Left = 44, ;
		Name = "lblCheckDate", ;
		TabIndex = 10, ;
		Top = 106, ;
		Width = 144, ;
		ZOrderSet = 9
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblDash' AS lbllabelcustom WITH ;
		Caption = "/", ;
		Left = 228, ;
		Name = "lblDash", ;
		TabIndex = 3, ;
		Top = 20, ;
		ZOrderSet = 7
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblDirDepDate' AS lbllabelcustom WITH ;
		Caption = "Direct Deposit Date", ;
		Left = 321, ;
		Name = "lblDirDepDate", ;
		Top = 82, ;
		Visible = .F.
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom1' AS lbllabelcustom WITH ;
		Alignment = 1, ;
		AutoSize = .T., ;
		Caption = "Revenue", ;
		Height = 16, ;
		Left = 79, ;
		Name = "Lbllabelcustom1", ;
		TabIndex = 16, ;
		Top = 162, ;
		Width = 45, ;
		ZOrderSet = 18
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom2' AS lbllabelcustom WITH ;
		Alignment = 1, ;
		AutoSize = .T., ;
		Caption = "Expenses", ;
		Height = 16, ;
		Left = 281, ;
		Name = "Lbllabelcustom2", ;
		TabIndex = 17, ;
		Top = 162, ;
		Width = 50, ;
		ZOrderSet = 19
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom3' AS lbllabelcustom WITH ;
		BackStyle = 1, ;
		Caption = "Accounting Date To Use For Processing:", ;
		FontBold = .T., ;
		Left = 36, ;
		Name = "Lbllabelcustom3", ;
		TabIndex = 11, ;
		Top = 133, ;
		ZOrderSet = 31
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom5' AS lbllabelcustom WITH ;
		BackStyle = 1, ;
		Caption = "Processing Options", ;
		FontBold = .T., ;
		Left = 36, ;
		Name = "Lbllabelcustom5", ;
		TabIndex = 19, ;
		Top = 259, ;
		ZOrderSet = 32
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom6' AS lbllabelcustom WITH ;
		BackStyle = 1, ;
		Caption = "Reporting Options", ;
		FontBold = .T., ;
		Left = 36, ;
		Name = "Lbllabelcustom6", ;
		TabIndex = 18, ;
		Top = 352, ;
		ZOrderSet = 25
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom9' AS lbllabelcustom WITH ;
		BackStyle = 1, ;
		Caption = "Well Group to Process", ;
		FontBold = .T., ;
		Left = 36, ;
		Name = "Lbllabelcustom9", ;
		TabIndex = 12, ;
		Top = 202, ;
		ZOrderSet = 35
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblPeriod' AS lbllabelcustom WITH ;
		Caption = "Run Year:", ;
		Left = 133, ;
		Name = "lblPeriod", ;
		RightToLeft = .F., ;
		TabIndex = 2, ;
		Top = 20, ;
		ZOrderSet = 6
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblPostDate' AS lbllabelcustom WITH ;
		Alignment = 1, ;
		AutoSize = .F., ;
		Caption = "Company Share Post Date:", ;
		Height = 16, ;
		Left = 56, ;
		Name = "lblPostDate", ;
		TabIndex = 8, ;
		Top = 81, ;
		Visible = .F., ;
		Width = 132, ;
		ZOrderSet = 27
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblRunNo' AS lbllabelcustom WITH ;
		Caption = "Run No:", ;
		Left = 144, ;
		Name = "lblRunNo", ;
		TabIndex = 5, ;
		Top = 50, ;
		ZOrderSet = 15
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'nrunno' AS txttextboxcustom WITH ;
		Height = 20, ;
		Left = 202, ;
		Name = "nrunno", ;
		ReadOnly = .T., ;
		TabIndex = 4, ;
		Top = 48, ;
		Width = 37, ;
		ZOrderSet = 16
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'Shpshapecustom1' AS shpshapecustom WITH ;
		Height = 54, ;
		Left = 24, ;
		Name = "Shpshapecustom1", ;
		Top = 138, ;
		Width = 444, ;
		ZOrderSet = 3
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="shape" />

	ADD OBJECT 'Shpshapecustom2' AS shpshapecustom WITH ;
		Height = 79, ;
		Left = 24, ;
		Name = "Shpshapecustom2", ;
		Top = 265, ;
		Width = 444, ;
		ZOrderSet = 2
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="shape" />

	ADD OBJECT 'Shpshapecustom3' AS shpshapecustom WITH ;
		Height = 79, ;
		Left = 24, ;
		Name = "Shpshapecustom3", ;
		Top = 358, ;
		Width = 444, ;
		ZOrderSet = 1
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="shape" />

	ADD OBJECT 'Shpshapecustom4' AS shpshapecustom WITH ;
		Height = 43, ;
		Left = 24, ;
		Name = "Shpshapecustom4", ;
		Top = 207, ;
		Width = 444, ;
		ZOrderSet = 0
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="shape" />

	ADD OBJECT 'Swgroup1' AS swgroup WITH ;
		Height = 20, ;
		Left = 96, ;
		lexcludeall = .T., ;
		Name = "Swgroup1", ;
		TabIndex = 15, ;
		Top = 219, ;
		Width = 291, ;
		ZOrderSet = 13
		*< END OBJECT: ClassLib="..\custom\swcontrol.vcx" BaseClass="combobox" />

	ADD OBJECT 'Swyear1' AS swyear WITH ;
		Left = 202, ;
		Name = "Swyear1", ;
		SelectOnEntry = .T., ;
		TabIndex = 1, ;
		Top = 18, ;
		ZOrderSet = 10
		*< END OBJECT: ClassLib="..\custom\swcontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtdCheckDate' AS dpk WITH ;
		ControlSource = "", ;
		Height = 20, ;
		lcheckdate = .T., ;
		Left = 202, ;
		lmorethan90 = .T., ;
		Name = "txtdCheckDate", ;
		TabIndex = 9, ;
		Top = 104, ;
		Visible = .T., ;
		Width = 75, ;
		ZOrderSet = 8
		*< END OBJECT: ClassLib="..\custom\swdate.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtdExpDate' AS dpk WITH ;
		ControlSource = "", ;
		Height = 20, ;
		Left = 339, ;
		Name = "txtdExpDate", ;
		TabIndex = 14, ;
		Top = 159, ;
		Visible = .T., ;
		Width = 75, ;
		ZOrderSet = 30
		*< END OBJECT: ClassLib="..\custom\swdate.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtdPostDate' AS dpk WITH ;
		ControlSource = "", ;
		Height = 20, ;
		lcheckdate = .T., ;
		Left = 202, ;
		Name = "txtdPostDate", ;
		TabIndex = 7, ;
		Top = 79, ;
		Visible = .F., ;
		Width = 75, ;
		ZOrderSet = 5
		*< END OBJECT: ClassLib="..\custom\swdate.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtdRevDate' AS dpk WITH ;
		ControlSource = "", ;
		Height = 20, ;
		Left = 134, ;
		Name = "txtdRevDate", ;
		TabIndex = 13, ;
		Top = 159, ;
		Visible = .T., ;
		Width = 75, ;
		ZOrderSet = 17
		*< END OBJECT: ClassLib="..\custom\swdate.vcx" BaseClass="textbox" />
	
	PROCEDURE Activate
		LOCAL lcYear
		
		lcYear = thisform.swyear1.Value
		THISFORM.nRunNo.VALUE = getrunno(lcyear,.T.,'R')
		THISFORM.nRunNo.REFRESH()
		DODEFAULT()
	ENDPROC

	PROCEDURE backup		&& Performs data backup
		LOCAL lcDataPath, lcFileName, lcFolderName, lcBackupPath
		LOCAL laSessions[1], lcFolder, lcSavePath, llReturn, lnError, lnsessions, lnx, loError
		
		llReturn = .T.
		
		TRY
		   tcYear  = THISFORM.swyear1.VALUE
		   tcRunNo = PADL(ALLT(STR(THISFORM.nRunNo.VALUE)), 3, '0')
		
		   SET SAFETY OFF
		*!*	   lnsessions = ASESSIONS(laSessions)
		*!*	   FOR lnx = 1 TO lnsessions
		*!*	      SET DATASESSION TO lnsessions
		*!*	      CLOSE DATA ALL
		*!*	   ENDFOR
		
		*!*	   SET DATASESSION TO 1
		*!*	   CLOSE DATABASES ALL
		
		   IF TYPE('m.goApp') = 'O'
		      lcDataPath = ALLT(m.goApp.cDataFilePath)
		      IF NOT ':' $ lcDataPath AND NOT '\\' $ lcDataPath AND LEFT(lcDataPath, 1) <> '\'
		         lcSavePath = ALLT(CURDIR())
		         lcDataPath = SYS(5) + CURDIR() + lcDataPath
		      ENDIF
		      lcBackupPath = lcDataPath
		      lcFolderName = lcDataPath
		      lcDataPath   = '"' + lcDataPath + '*.*' + '"'
		   ELSE
		      lcBackupPath = ALLTRIM(GETDIR())
		      lcDataPath   = lcBackupPath + '*.*'
		   ENDIF
		
		   IF NOT '\' $ lcDataPath
		      lcDataPath = 'Data\*.*'
		   ENDIF
		
		* Create the backup folders if needed
		   IF NOT DIRECTORY(lcBackupPath + 'Backups')
		      MD (lcBackupPath + 'Backups')
		   ENDIF
		   lcBackupPath = lcBackupPath + 'Backups\'
		   lcFolder     = 'BKR' + tcYear + tcRunNo
		   IF NOT DIRECTORY(lcBackupPath + lcFolder)
		      MD (lcBackupPath + lcFolder)
		   ENDIF
		   lcBackupPath = lcBackupPath + lcFolder
		   lcFileName   = JUSTPATH(lcDataPath)
		   lcFileName   = ALLTRIM(SUBSTR(lcFileName, RAT('\', lcFileName) + 1))  + ;
		                  '_' + ALLT(STR(YEAR(DATE()))) + '_' + ;
		                  PADL(ALLT(STR(MONTH(DATE()))), 2, '0') + '_' ;
		                  + PADL(ALLT(STR(DAY(DATE()))), 2, '0')+ '_'+STRTRAN(TIME(),':','_')+ '.zip'
		   lcBackupPath = ADDBS(lcBackupPath)
		
		* Create the backup
		   lnError = swbackup('B', lcFolderName, ALLTRIM(lcFileName), lcBackupPath)
		
		   DO CASE
		      CASE lnError = 0
		         WAIT WIND NOWAIT 'Backup Completed'
		      CASE lnError = 4
		         THISFORM.oMessage.DISPLAY('Backup Encountered Errors. Unable to create backup file.')
		      CASE lnError = 6
		         THISFORM.oMessage.DISPLAY('Backup Encountered Errors. Unable to compress file.')
		   ENDCASE
		
		*!*	   SET DATASESSION TO 1
		*!*	   OPEN DATABASE m.goApp.cDataFilePath + 'appdata.dbc'
		*!*	   SET DATABASE TO appdata
		*!*	   oMeta.ResetError()
		*!*	   oMeta.SetDatabase(DBC())
		*!*	   llReturn = .T.
		*!*	   TRY
		*!*	      IF NOT oMeta.oSDTMgr.OpenAllTables(, .T.)
		*!*	         MESSAGEBOX('Unable to Open the files after the backup was completed', 16, 'Open Company Problem')
		*!*	         llReturn = .F.
		*!*	      ENDIF
		*!*	   CATCH
		*!*	      MESSAGEBOX('Unable to open the files after the backup completed', 16, 'Open Company Problem')
		*!*	      llReturn = .F.
		*!*	   ENDTRY
		CATCH TO loError
		   DO errorlog WITH 'Backup', loError.LINENO, 'Revenue Run Closing', loError.ERRORNO, loError.MESSAGE, '', loError
		   IF MESSAGEBOX('Unable to backup the data before closing. Do you want to continue the closing?', 36, 'Backup Problem') = 6
		      llReturn = .T.
		   ELSE
		      llReturn = .F.
		   ENDIF
		ENDTRY
		
		RETURN llReturn
		
		
		
	ENDPROC

	PROCEDURE calcsummary		&& Calculates and builds the closing summary
	ENDPROC

	PROCEDURE checkactivity
		LOCAL lnCount
		LOCAL llFound, llReturn, lnFlatG, lnFlatO, loError
		*:Global cwellid, tcGroup, tcYear
		
		llReturn = .T.
		
		TRY
		   WAIT WINDOW NOWAIT 'Checking for revenue and expenses to process...'
		*  Check for activity in the given period
		   tcYear  = THISFORM.swyear1.VALUE
		   tcGroup = LEFT(THISFORM.swgroup1.VALUE, 2)
		
		   SELE income.* FROM income, wells ;
		      WHERE nrunno = 0 ;
		      AND income.dRevDate <= THISFORM.txtdRevdate.VALUE  ;
		      AND income.cwellid = wells.cwellid ;
		      AND wells.cgroup = tcGroup ;
		      AND NOT INLIST(wells.cwellstat, 'I', 'S', 'P') ;
		      INTO CURSOR tempinc
		
		   lnCount = _TALLY
		
		   SELE expense.* FROM expense, wells ;
		      WHERE nrunnoRev = 0 ;
		      AND cyear <> "FIXD" ;
		      AND expense.dExpDate <= THISFORM.txtdExpdate.VALUE  ;
		      AND expense.cwellid = wells.cwellid ;
		      AND wells.cgroup = tcGroup ;
		      AND NOT INLIST(wells.cwellstat, 'I', 'S', 'P') ;
		      INTO CURSOR tempexp
		
		   lnCount = lnCount + _TALLY
		
		   SELE cwellid, .F. AS junk FROM wells INTO CURSOR tmpwell WHERE cgroup == tcGroup
		   STORE 0 TO lnFlatO, lnFlatG
		   llFound = .F.
		   SELE tmpwell
		   SCAN
		      IF NOT llFound
		         m.cwellid             = cwellid
		         THIS.oDist.lFlatRates = .T.  &&  Set as true, so it won't immediately drop out of the flat rate activity check - BH 12/21/2004
		         lnFlatO               = THIS.oDist.getflatamt(m.cwellid, 'O')
		         lnFlatG               = THIS.oDist.getflatamt(m.cwellid, 'G')
		         IF lnFlatO + lnFlatG > 0
		            llFound = .T.
		         ENDIF
		      ENDIF
		   ENDSCAN
		
		   lnCount = lnCount + lnFlatO + lnFlatG
		
		   IF lnCount # 0
		      llReturn = .T.
		   ELSE
		      llReturn = .F.
		   ENDIF
		CATCH TO loError
		   llReturn = .F.
		   DO errorlog WITH 'CheckActivity', loError.LINENO, 'DMCloseRev', loError.ERRORNO, loError.MESSAGE, '', loError
		   MESSAGEBOX('Unable to process the closing at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		        'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		WAIT CLEAR
		RETURN llReturn
		
		
		
		
		
	ENDPROC

	PROCEDURE checkforflatrate		&& Checks for flat rate royalties.
		*
		*  Checks for flat-rate royalties and asks if they need to be processed this run
		*
		
		IF NOT USED('wellinv')
		   USE wellinv IN 0
		ENDIF
		IF USED('tempflt')
		   USE IN tempflt
		ENDIF
		
		SELE * FROM wellinv, wells WHERE wellinv.cwellid = wells.cwellid   ;  &&  Only check to see if there are flat rates in the group that you are closing
		   AND cGroup = LEFT(THISFORM.swgroup1.VALUE,2)AND lflat = .T. INTO CURSOR tempflt
		
		llFlat = _TALLY
		
		IF _TALLY > 0
		   thisform.oDist.lFlatRates = thisform.chklflatrate.value
		ENDIF
		
	ENDPROC

	PROCEDURE checkhist
		SET DELETED ON
		
		tcYear    = THISFORM.swyear1.VALUE
		tcGroup   = LEFT(THISFORM.swgroup1.VALUE,2)
		tnRunNo   = THISFORM.nRunNo.VALUE
		
		llHist = .F.
		set multilocks on
		if not used('sysctl')
		   use sysctl in 0
		   =CURSORSETPROP("Buffering",3)
		endif
		
		SELE sysctl
		LOCATE FOR cYear = tcYear AND nRunNo = tnRunNo AND cTypeClose='R'
		llHist = FOUND()
		
		RETURN (llHist)
		
	ENDPROC

	PROCEDURE checkqtrly		&& Check for quarterly wells.
		*
		*  Checks for quarterly wells in the wells table
		*
		
		SELE wells
		LOCATE FOR nProcess = 2
		RETURN FOUND()
		
	ENDPROC

	PROCEDURE Destroy
		LOCAL oDist
		
		oDist = thisform.oDist
		IF TYPE('oDist') = 'O'
		   RELE oDist
		   thisform.oDist = .Null.
		ENDIF
		
		DODEFAULT()   
	ENDPROC

	PROCEDURE Error
		LPARAMETERS nerror,cmethod,nline
		
		if nerror <> 1540
		   dodefault(nerror,cmethod,nline)
		endif   
	ENDPROC

	PROCEDURE Init
		IF DODEFAULT()
		   THISFORM.txtdPostDate.VALUE  = DATE()
		   THISFORM.txtdCheckDate.VALUE = DATE()
		   THISFORM.txtdrevDate.VALUE   = DATE()
		   THISFORM.txtdexpDate.VALUE   = DATE()
		
		   * Don't show the advanced posting for the DM
		   IF NOT m.goapp.lAMVersion AND NOT m.goapp.lQBVersion
		      THISFORM.chkadvposting.VISIBLE = .F.
		   ENDIF
		
		   *
		   *  Check to see if we're closing by period or run no
		   *
		   THIS.lCloseRun = .T.
		   lcYear = STR(YEAR(DATE()),4)
		
		   THIS.nrunno.VISIBLE    = .T.
		   THIS.lblrunno.VISIBLE  = .T.
		   THIS.lblperiod.CAPTION = 'Run Year:'
		   THIS.swyear1.LEFT      = 203
		   THIS.lblperiod.LEFT    = 141
		   THIS.CAPTION           = 'Close a Revenue Run'
		
		   THIS.nrunno.VALUE      = getrunno(lcYear,.T.,'R')
		   THISFORM.lchanged      = .T.  &&  So that the date checking can fire.
		
		   IF m.goapp.lDirDMDep
		      swselect('investor')
		      LOCATE FOR ldirectdep
		      IF FOUND()
		         THIS.dirDepDate.VISIBLE = .T.
		         IF m.goapp.oOptions.iACHDays = 0
		            m.goapp.oOptions.iACHDays = 3
		         ENDIF 
		         * Add the # of days to the effective date
		         ldDirDepDate = DATE()+m.goapp.oOptions.iACHDays
		         IF m.goapp.oOptions.lACHSkipWeekends
		            * If we're skipping weekends make sure the date isn't a weekend
		            lnDay = DOW(ldDirDepDate,1)
		            IF lnDay = 1
		               ldDirDepDate = ldDirDepDate + 1
		            ELSE
		               IF lnDay = 7
		                  ldDirDepDate = ldDirDepDate + 2
		               ENDIF
		            ENDIF
		         ENDIF
		         THIS.dirDepDate.VALUE = ldDirDepDate
		         THIS.lbldirDepDate.VISIBLE = .T.
		      ENDIF
		   ENDIF
		   SET ESCAPE ON
		ENDIF
		
	ENDPROC

	PROCEDURE process		&& Performs the JIB close processing
		LOCAL tcYear, tdCheckDate, oDist, tcOwner1, tcOwner2, tcGroup, tnRunNo
		LOCAL llInUse, lnDataSession
		LOCAL loRep AS "csXMLPerfLogReport"
		LOCAL lcXML, lcyear, ldDirectDate, llReturn, lnCount1, lnCount2, loError
		PRIVATE m.cGrpName
		
		llReturn = .T.
		
		TRY
		
		   STORE '' TO m.cGrpName
		
		   SET ENGINEBEHAVIOR 70
		   llInUse     = .F.
		   tcYear      = THISFORM.swyear1.VALUE
		   tdCheckDate = THISFORM.txtdCheckDate.VALUE
		   tcGroup     = LEFT(THISFORM.swgroup1.VALUE, 2)
		   tnRunNo     = THISFORM.nRunNo.VALUE
		
		   lnDataSession = SET('datasession')
		
		*  They shouldn't be able to close a revenue run if they've closed runs in a later year.  Otherwise, they'd never be able to
		*  re-open it, if they need to make any corrections.
		   swselect('sysctl')
		   LOCATE FOR cRunYear > THISFORM.swyear1.VALUE AND cGroup = THISFORM.swgroup1.LISTITEM(THISFORM.swgroup1.LISTITEMID, 2) AND cTypeClose = 'R' AND lDisbman AND nrunno # 9999
		   IF FOUND()
		      THISFORM.oMessage.Warning('This group has already been closed in a year later than the one selected as the Run Year. Please choose a later Run Year before closing.')
		      THISFORM.setnextcontrol(THISFORM.swyear1)
		      llReturn = .F.
		      EXIT
		   ENDIF
		
		   IF NOT THISFORM.oMessage.CONFIRM('Please confirm that you want to close a revenue run for year: ' + tcYear + ' and run: ' + ALLT(STR(tnRunNo)))
		      llReturn = .F.
		      EXIT
		   ENDIF
		
		   IF swOpenForms(THIS.NAME)
		      THIS.oMessage.severe('All other forms must be closed before processing a revenue run.')
		      llReturn = .F.
		      EXIT
		   ENDIF
		
		* Check DOI to see if all used classes total 100%
		   IF NOT swdoicheck(tcGroup, THISFORM.txtdrevDate.VALUE, THISFORM.txtdexpDate.VALUE)
		      llReturn = .F.
		      EXIT
		   ENDIF
		
		* Check to see if the files are in use
		   llInUse = isfilelocked()
		
		   IF llInUse
		      IF NOT THISFORM.oMessage.CONFIRM('There are other users logged in to the system. Do you want to continue?')
		         llReturn = .F.
		         EXIT
		      ENDIF
		   ENDIF
		
		*  Check validity of specified quickbooks accounts
		   IF m.goapp.lQBVersion
		      WAIT WINDOW NOWAIT 'Checking QuickBooks accounts...'
		      IF NOT m.goapp.qbacctcheck()
		         llReturn = .F.
		         EXIT
		      ENDIF
		      WAIT CLEAR 
		   ENDIF
		
		*  Make sure the period or year isn't closed
		   IF NOT THISFORM.glmaint.CheckPeriod(THISFORM.txtdpostDate.VALUE)
		      THISFORM.oMessage.Warning('Unable to process the revenue closing. Either the fiscal year or period represented by this date has been closed.')
		      llReturn = .F.
		      EXIT
		   ENDIF
		
		   WAIT WIND NOWAIT 'Processing revenue run closing...'
		* Runs the performance log processing if this file exists
		   IF FILE('perflog.txt')
		* Start ther performance log
		      m.goapp.oPerfLog.cLogID = 'Closing Revenue Run: ' + ALLTRIM(m.goapp.ccompanyname)
		      m.goapp.oPerfLog.startTask( [Start Revenue Close] )
		   ENDIF
		
		* Check for unallocated revenue and expenses and warn if any are found
		   swselect('incsusp')
		   COUNT FOR NOT DELETED() TO lnCount1
		   swselect('expsusp')
		   COUNT FOR NOT DELETED() TO lnCount2
		   IF lnCount1 + lnCount2 > 0
		      IF NOT THISFORM.oMessage.CONFIRM('You have revenue or expense entries remaining in the allocation file.  Would you still like to continue with the closing?')
		         llReturn = .F.
		         EXIT
		      ENDIF
		   ENDIF
		 
		   lnStart = SECONDS()
		   swlogging('Revenue Closing', .T., lnStart)
		* Backup data if the option is checked
		   IF THISFORM.chklBackup.VALUE = .T.
		      WAIT WINDOW NOWAIT 'Backing up company data...Please Wait'
		      TRY
		         lnDataSession = SET('datasession')
		         THISFORM.backup()
		         SET DATASESSION TO (lnDataSession)
		      CATCH
		      ENDTRY
		      WAIT CLEAR
		   ENDIF
		
		   swselect('investor')
		   SET ORDER TO cownerid
		   GO TOP
		   tcOwner1  = cownerid
		   GO BOTT
		   tcOwner2  = cownerid
		
		*
		*  Call distproc to create the (invtmp) and (wellwork) cursors
		*
		   THISFORM.oDist = CREATEOBJECT('distproc', tcOwner1, tcOwner2, ;
		        '01', ;
		        tcYear, ;
		        tcGroup, 'O', tdCheckDate, .F., tnRunNo, .T., .T.)
		
		* Check for income or expense activity to process
		   IF NOT THIS.checkactivity()
		      IF MESSAGEBOX("There was not any activity for the wells in group: " + tcGroup + ". " + ;
		                    "Do you want to continue? " + CHR(10)+CHR(10) + ;
		                    "(THIS MAY RELEASE SUSPENSE FOR QUARTERLY OWNERS AND OWNERS TAKEN OFF OF HOLD STATUS!!)",36,'No Activity') = 7
		      THISFORM.oDist = .NULL.
		      llReturn       = .F.
		      EXIT
		      ENDIF 
		   ENDIF
		
		   THISFORM.oDist.dRevDate = THISFORM.txtdrevDate.VALUE
		   THISFORM.oDist.dExpDate = THISFORM.txtdexpDate.VALUE
		   THISFORM.oDist.nSeconds = DATETIME()
		
		* Get which closing reports are wanted
		   THISFORM.oDist.lRptWellExcpt = THISFORM.chkClosingWell.VALUE
		   THISFORM.oDist.lRptSuspense  = THISFORM.chkprintSuspense.VALUE
		   THISFORM.oDist.lRptRegister  = THISFORM.chkregister.VALUE
		   THISFORM.oDist.lRptUnalloc   = THISFORM.chkunallocated.VALUE
		
		* Should the company share be posted differently?
		   THISFORM.oDist.lAdvPosting    = THISFORM.chkadvposting.VALUE
		
		*  Set post date to be check date if not advanced posting
		   IF THISFORM.chkadvposting.VALUE
		      THISFORM.oDist.dPostDate     = THISFORM.txtdCheckDate.VALUE
		      THISFORM.oDist.dCheckDate    = THISFORM.txtdCheckDate.VALUE
		      THISFORM.oDist.dCompanyShare = THISFORM.txtdpostDate.VALUE
		   ELSE
		      THISFORM.oDist.dPostDate     = THISFORM.txtdCheckDate.VALUE
		      THISFORM.oDist.dCheckDate    = THISFORM.txtdCheckDate.VALUE
		      THISFORM.oDist.dCompanyShare = THISFORM.txtdCheckDate.VALUE
		   ENDIF
		
		*
		*  Check to see if the minimum amounts should be released
		*
		   THISFORM.lRelmin = THISFORM.chklminimums.VALUE
		
		*  Check for flat rate processing
		   THISFORM.checkforflatrate()
		
		*
		* Check for direct deposit entries and if get the effective date for the ach batch.
		*
		   IF m.goapp.ldirdmdep
		      swselect('investor')
		      LOCATE FOR ldirectdep
		      IF FOUND()
		         ldDirectDate = thisform.dirDepDate.Value 
		         IF VARTYPE(ldDirectDate) <> 'D' OR EMPTY(ldDirectDate)
		            ldDirectDate = DATE()
		         ENDIF 
		         IF ldDirectDate = {11/2/1960}
		            llReturn = .F.
		            MESSAGEBOX('Processing was canceled by the user.',16,'Processing Canceled')
		            EXIT
		         ELSE 
		            THISFORM.oDist.dDirectDate = ldDirectDate
		         ENDIF    
		      ENDIF
		   ENDIF
		
		* Turn FoxAudit auditing off for the close
		   IF TYPE('oFoxAudit_APPDATA') = 'O'
		      oFoxAudit_APPDATA.lLogUpdates = .F.
		   ENDIF
		
		   swselect('options')
		   GO TOP
		
		   THISFORM.oDist.lRelQtr = THISFORM.chkquarterly.VALUE
		   THISFORM.oDist.lRelmin = THISFORM.lRelmin
		
		   THISFORM.oDist.MAIN(.T.)
		   
		   swclose('tsuspense')
		   swclose('debugtime')
		
		   lcyear = tcYear
		   swlogging('Revenue Closing', .f., lnStart, SECONDS())
		CATCH TO loError
		   llReturn = .F.
		   DO errorlog WITH 'Process', loError.LINENO, 'Close Rev Run', loError.ERRORNO, loError.MESSAGE, '', loError
		   MESSAGEBOX('Unable to process the run closing at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		        'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		* Turn FoxAudit auditing on after the close
		IF TYPE('oFoxAudit_APPDATA') = 'O'
		   oFoxAudit_APPDATA.lLogUpdates = m.goapp.lAuditTrail
		ENDIF
		
		THISFORM.nRunNo.VALUE = getrunno(tcyear, .T., 'R')
		THISFORM.nRunNo.REFRESH()
		THISFORM.oDist = .NULL.
		
		RETURN llReturn
		
	ENDPROC

	PROCEDURE qbsync		&& Checks to see if the files need to be synchronized with QB.
		*
		*  Check the files that have a tie-in listid to QuickBooks
		*
		
		IF NOT m.goapp.oQB.lqbactive
		   RETURN .f.
		ENDIF
		   
		*  Wells 
		SELE wells
		SCAN FOR EMPTY(cListID) AND NOT INLIST(cwellstat,'I','S','P')
		   RETURN .T.
		ENDSCAN
		
		* Owners
		SELE investor
		SCAN FOR EMPTY(cListID)
		   RETURN .T.
		ENDSCAN
		
		* Expense Categories
		SELE expcat
		SCAN FOR EMPTY(cListID)
		   RETURN .T.
		ENDSCAN
		
		* Terms
		SELE terms
		SCAN FOR EMPTY(cListID)
		   RETURN .T.
		ENDSCAN
		
		* Vendors
		SELE vendor
		SCAN FOR EMPTY(cListID)
		   RETURN .T.
		ENDSCAN
		
		* Everythings synchronized
		RETURN .F.
	ENDPROC

	PROCEDURE Unload
		_VFP.AutoYield = .T.
		SET ESCAPE OFF 
		DODEFAULT()
	ENDPROC

	PROCEDURE viewoutput
		LPARAMETERS tcFileName, tcContent
		
		DECLARE INTEGER ShellExecute IN "Shell32.dll" ;
		  INTEGER hwnd, ;
		  STRING lpVerb, ;
		  STRING lpFile, ;
		  STRING lpParameters, ;
		  STRING lpDirectory, ;
		  LONG nShowCmd
		  
		  
		LOCAL lcSafe
		
		lcSafe = SET("SAFE")
		SET SAFETY OFF
		*-- write the report file
		strtofile( tcContent, tcFileName)
		
		SET SAFETY &lcSafe
		
		lcFile = fullpath( tcFileName )
		
		*-- view the file
		=ShellExecute( 0,"Open",lcFile,"","",1 )
		
	ENDPROC

	PROCEDURE chkadvposting.Click
		if this.value
		   thisform.lblpostdate.visible = .t.
		   thisform.txtdPostDate.visible = .t.
		   thisform.txtdCheckDate.lcheckdate = .f.
		   thisform.lblCheckDate.caption = 'Check Date:'
		else
		   thisform.lblpostdate.visible = .f.
		   thisform.txtdPostDate.visible = .f.
		   thisform.txtdCheckDate.lcheckdate = .t.
		   thisform.lblCheckDate.caption = 'Check/Posting Date:'
		endif   
	ENDPROC

	PROCEDURE chkadvposting.Init
		IF NOT m.goapp.lAMVersion AND NOT m.goapp.lQBVersion  &&  If DM, don't show this checkbox, since it means nothing in the stand-alone DM
		   THIS.VISIBLE = .F.
		ENDIF
		
		DODEFAULT()
		
	ENDPROC

	PROCEDURE cmdCancel.Click
		thisform.release()
	ENDPROC

	PROCEDURE cmdProcess.Click
		*!*	IF TYPE('m.goApp') = 'O' AND _screen.formcount > 3  &&  More than 1 form open, so make them close everything else - toolbar and other bogus stuff counts as a window, so anything over 3 means they have something else open
		*!*	   thisform.oMessage.Warning('Please close all other open windows before closing the run.')
		*!*	   RETURN .f.
		*!*	ENDIF
		
		thisform.process()
	ENDPROC

	PROCEDURE nrunno.When
		RETURN .F.
	ENDPROC

	PROCEDURE Swgroup1.Init
		DODEFAULT()
		this.listitemid = 1
		
		**
		** Check to see if there are any wells marked as quarterly in this group
		** If there are, marke the process quarterly wells checkbox
		**
		swselect('wells')
		swselect('groups')
		lcGroup = LEFT(this.Value,2)
		LOCATE FOR cgroup = lcGroup
		IF FOUND()
		   SELECT cwellid FROM wells WHERE nprocess=2 AND cgroup = lcGroup INTO CURSOR temp
		   IF _tally > 0
		      thisform.chkquarterly.Value = .t.
		   ELSE
		      thisform.chkquarterly.Value = .f.
		   ENDIF
		ENDIF 
		
		**
		** Check to see if there are any flatrates in this group
		** If there are, mark the process flat rates checkbox
		**
		llFound = .f. 
		swselect('wellinv')
		SELECT wells
		SCAN FOR cGroup == lcGroup
		   m.cwellid = cwellid
		   SELECT wellinv
		   LOCATE FOR cwellid == m.cwellid AND lflat
		   IF FOUND()
		      llFound = .t.
		      EXIT
		   ENDIF
		ENDSCAN
		IF llFound
		   thisform.chklFlatRate.Value = .t.
		ELSE
		   thisform.chklflatRate.Value = .f.
		ENDIF 
		
		
	ENDPROC

	PROCEDURE Swgroup1.Valid
		LOCAL lcGroup
		
		**
		** Check to see if there are any wells marked as quarterly in this group
		** If there are, marke the process quarterly wells checkbox
		**
		swselect('wells')
		swselect('groups')
		lcGroup = LEFT(this.Value,2)
		LOCATE FOR cgroup = lcGroup
		IF FOUND()
		   SELECT cwellid FROM wells WHERE nprocess=2 AND cgroup = lcGroup INTO CURSOR temp
		   IF _tally > 0
		      thisform.chkquarterly.Value = .t.
		   ELSE
		      thisform.chkquarterly.Value = .f.
		   ENDIF
		ENDIF 
		
		**
		** Check to see if there are any flatrates in this group
		** If there are, mark the process flat rates checkbox
		**
		llFound = .f. 
		swselect('wellinv')
		SELECT wells
		SCAN FOR cGroup == lcGroup
		   m.cwellid = cwellid
		   SELECT wellinv
		   LOCATE FOR cwellid == m.cwellid AND lflat
		   IF FOUND()
		      llFound = .t.
		      EXIT
		   ENDIF
		ENDSCAN
		IF llFound
		   thisform.chklFlatRate.Value = .t.
		ELSE
		   thisform.chklflatRate.Value = .f.
		ENDIF 
		
		DODEFAULT()
	ENDPROC

	PROCEDURE Swyear1.Valid
		DODEFAULT()
		IF thisform.lcloserun
		   thisform.nRunNo.value = getrunno(this.value,.t.,'R')
		ENDIF
		
	ENDPROC

	PROCEDURE txtdCheckDate.dropdown
		DODEFAULT()
		thisform.setnextcontrol(this)
		
	ENDPROC

	PROCEDURE txtdCheckDate.LostFocus
		IF DODEFAULT()
		   thisform.txtdRevDate.value = this.Value
		   thisform.txtdRevDate.refresh()
		   thisform.txtdExpDate.value = this.Value
		   thisform.txtdExpDate.refresh()
		ENDIF 
	ENDPROC

	PROCEDURE txtdExpDate.dropdown
		DODEFAULT()
		thisform.setnextcontrol(this)
		
	ENDPROC

	PROCEDURE txtdPostDate.dropdown
		DODEFAULT()
		thisform.setnextcontrol(this)
		
	ENDPROC

	PROCEDURE txtdRevDate.dropdown
		DODEFAULT()
		thisform.setnextcontrol(this)
		
	ENDPROC

ENDDEFINE
