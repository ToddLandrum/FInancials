*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="dmgasown.scx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="2" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Cursor1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor6" UniqueID="" Timestamp="" />

	AutoOpenTables = .F.
	DataSource = .NULL.
	Height = 516
	InitialSelectedAlias = "gasown"
	Left = 261
	Name = "Dataenvironment"
	Top = 62
	Width = 792

	ADD OBJECT 'Cursor1' AS cursor WITH ;
		Alias = "gasown", ;
		BufferModeOverride = 5, ;
		CursorSource = "gasown", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 377, ;
		Left = 9, ;
		Name = "Cursor1", ;
		Top = 20, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor2' AS cursor WITH ;
		Alias = "investor", ;
		CursorSource = "investor", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 153, ;
		Name = "Cursor2", ;
		Order = "cownerid", ;
		Top = 18, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor3' AS cursor WITH ;
		Alias = "groups", ;
		CursorSource = "groups", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 290, ;
		Name = "Cursor3", ;
		Top = 20, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor4' AS cursor WITH ;
		Alias = "gasown1", ;
		CursorSource = "gasown", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 430, ;
		Name = "Cursor4", ;
		Top = 20, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor5' AS cursor WITH ;
		Alias = "gasuse", ;
		CursorSource = "gasuse", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 379, ;
		Left = 570, ;
		Name = "Cursor5", ;
		Top = 20, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor6' AS cursor WITH ;
		Alias = "wells", ;
		CursorSource = "wells", ;
		Database = ..\newdbc\appdata.dbc, ;
		Height = 90, ;
		Left = 245, ;
		Name = "Cursor6", ;
		Top = 193, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

ENDDEFINE

DEFINE CLASS formdmgasown AS frmdatamanagerformcustom OF "..\custom\cforms.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="txtcOwnerName" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcDescription" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Swgroup1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbltextcustom1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcWellID" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcOwnerID" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbltextcustom2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbltextcustom3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkGPA" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcRouteNo" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbltextcustom4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtnSequence" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Shpshapecustom1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbltextcustom5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbltextcustom6" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbltextcustom8" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbltextcustom9" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdLookWell" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdLookOwner" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtnYearlyAmt" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtnMultiplier" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtnLast" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbltextcustom10" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtnPriceAdj" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbltextcustom11" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcMeterNo" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbltextcustom12" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtnCounterLen" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Edteditboxcustom1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbltextcustom13" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtNpressure" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblNpressure" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdPSI" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtUsedYTD" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkNet" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbltextcustom7" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtLocation" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbltextcustom14" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtRateType" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbltextcustom15" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtMeterType" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*p: lactual
		*a: laterms[1,0]
	*</DefinedPropArrayMethod>

	Caption = "House Gas Owner Information"
	clistexpression = gasown.cownerid
	cmsgconfirmdelete = Are you sure you want to delete the meter info for this owner?
	cnavworkarea = gasown
	cworkarea = gasown
	DoCreate = .T.
	Height = 516
	HelpContextID = 85
	lactual = .F.
	lexpliciteditmode = .F.
	Name = "FormDMGasOwn"
	Width = 609
	WindowState = 0
	_memberdata = <VFPData>
		<memberdata name="lactual" display="lActual"/>
		</VFPData>
	cmdatamanager.Name = "cmdatamanager"
	cmdatamanager.TabIndex = 2
	cmlookupmanager.Name = "cmlookupmanager"
	Mwresize1.lblHighLight.Name = "lblHighLight"
	Mwresize1.lblShading.Name = "lblShading"
	Mwresize1.Left = 588
	Mwresize1.Name = "Mwresize1"
	Mwresize1.TabIndex = 1
	Mwresize1.Top = 492

	ADD OBJECT 'chkGPA' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "GPA Received", ;
		ControlSource = "gasown.lgpa", ;
		Left = 296, ;
		Name = "chkGPA", ;
		TabIndex = 18, ;
		Top = 138
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkNet' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Net From Revenue", ;
		ControlSource = "gasown.lnet", ;
		Left = 456, ;
		Name = "chkNet", ;
		TabIndex = 8, ;
		Top = 60
		*< END OBJECT: ClassLib="..\..\wellprofits\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'cmdLookOwner' AS cmdcommandbuttoncustom WITH ;
		Caption = "Owner ID", ;
		Height = 20, ;
		Left = 12, ;
		Name = "cmdLookOwner", ;
		TabIndex = 3, ;
		TabStop = .F., ;
		Top = 17, ;
		Width = 60, ;
		ZOrderSet = 20
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdLookWell' AS cmdcommandbuttoncustom WITH ;
		Caption = "Well ID", ;
		Height = 20, ;
		Left = 12, ;
		Name = "cmdLookWell", ;
		TabIndex = 9, ;
		TabStop = .F., ;
		Top = 76, ;
		Width = 60, ;
		ZOrderSet = 20
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdPSI' AS cmdcommandbuttoncustom WITH ;
		Caption = "Calculate Multiplier from PSI", ;
		Height = 23, ;
		Left = 255, ;
		Name = "cmdPSI", ;
		TabIndex = 42, ;
		Top = 443, ;
		Width = 144
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'Edteditboxcustom1' AS edteditboxcustom WITH ;
		ControlSource = "gasown.mnotes", ;
		Height = 92, ;
		Left = 24, ;
		Name = "Edteditboxcustom1", ;
		TabIndex = 28, ;
		Top = 206, ;
		Width = 572
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="editbox" />

	ADD OBJECT 'Lbllabelcustom1' AS lbllabelcustom WITH ;
		Caption = "Used YTD", ;
		Left = 78, ;
		Name = "Lbllabelcustom1", ;
		TabIndex = 43, ;
		Top = 400
		*< END OBJECT: ClassLib="..\..\dmie_rv\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblNpressure' AS lblfieldlabelcustom WITH ;
		Alignment = 0, ;
		Caption = "Pressure (PSI)", ;
		Height = 16, ;
		Left = 57, ;
		Name = "lblNpressure", ;
		TabIndex = 40, ;
		Top = 446, ;
		Width = 72
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbltextcustom1' AS lbltextcustom WITH ;
		Caption = "Description", ;
		Left = 16, ;
		Name = "Lbltextcustom1", ;
		TabIndex = 15, ;
		Top = 106
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbltextcustom10' AS lbltextcustom WITH ;
		Caption = "Price Adjustment / MCF", ;
		Left = 271, ;
		Name = "Lbltextcustom10", ;
		TabIndex = 38, ;
		Top = 402
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbltextcustom11' AS lbltextcustom WITH ;
		Caption = "Meter No.", ;
		Left = 24, ;
		Name = "Lbltextcustom11", ;
		TabIndex = 12, ;
		Top = 49
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbltextcustom12' AS lbltextcustom WITH ;
		Caption = "Counter Length", ;
		Left = 269, ;
		Name = "Lbltextcustom12", ;
		TabIndex = 13, ;
		Top = 49
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbltextcustom13' AS lbltextcustom WITH ;
		Caption = "Comments", ;
		FontBold = .T., ;
		Height = 91, ;
		Left = 9, ;
		Name = "Lbltextcustom13", ;
		Rotation = 90, ;
		TabIndex = 29, ;
		Top = 209, ;
		Width = 16
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbltextcustom14' AS lbltextcustom WITH ;
		Caption = "Rate Type", ;
		Left = 500, ;
		Name = "Lbltextcustom14", ;
		TabIndex = 27, ;
		Top = 174
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbltextcustom15' AS lbltextcustom WITH ;
		Caption = "Meter Type", ;
		Left = 180, ;
		Name = "Lbltextcustom15", ;
		TabIndex = 25, ;
		Top = 78
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbltextcustom2' AS lbltextcustom WITH ;
		Caption = "Group", ;
		Left = 40, ;
		Name = "Lbltextcustom2", ;
		TabIndex = 17, ;
		Top = 138
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbltextcustom3' AS lbltextcustom WITH ;
		Caption = "Route No.", ;
		Left = 23, ;
		Name = "Lbltextcustom3", ;
		TabIndex = 23, ;
		Top = 174
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbltextcustom4' AS lbltextcustom WITH ;
		Caption = "Sequence", ;
		Left = 226, ;
		Name = "Lbltextcustom4", ;
		TabIndex = 24, ;
		Top = 174
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbltextcustom5' AS lbltextcustom WITH ;
		BackStyle = 1, ;
		Caption = "Gas Usage Details", ;
		FontBold = .T., ;
		Left = 21, ;
		Name = "Lbltextcustom5", ;
		TabIndex = 30, ;
		Top = 308
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbltextcustom6' AS lbltextcustom WITH ;
		Caption = "Yearly Allocation", ;
		Left = 45, ;
		Name = "Lbltextcustom6", ;
		TabIndex = 34, ;
		Top = 354
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbltextcustom7' AS lbltextcustom WITH ;
		Caption = "Location", ;
		Left = 370, ;
		Name = "Lbltextcustom7", ;
		TabIndex = 26, ;
		Top = 174
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbltextcustom8' AS lbltextcustom WITH ;
		Caption = "Multiplier", ;
		Left = 442, ;
		Name = "Lbltextcustom8", ;
		TabIndex = 39, ;
		Top = 449
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbltextcustom9' AS lbltextcustom WITH ;
		Caption = "Last Reading", ;
		Left = 271, ;
		Name = "Lbltextcustom9", ;
		TabIndex = 35, ;
		Top = 354
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Shpshapecustom1' AS shpshapecustom WITH ;
		FillStyle = 1, ;
		Height = 180, ;
		Left = 12, ;
		Name = "Shpshapecustom1", ;
		Top = 312, ;
		Width = 588
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="shape" />

	ADD OBJECT 'Swgroup1' AS swgroup WITH ;
		BoundColumn = 2, ;
		ControlSource = "gasown.cgroup", ;
		Height = 20, ;
		lautoremember = .F., ;
		Left = 79, ;
		lexcludeall = .T., ;
		lrequired = .T., ;
		Name = "Swgroup1", ;
		TabIndex = 16, ;
		Top = 136, ;
		Width = 184, ;
		ZOrderSet = 5
		*< END OBJECT: ClassLib="..\custom\swcontrol.vcx" BaseClass="combobox" />

	ADD OBJECT 'txtcDescription' AS txttextboxcustom WITH ;
		ControlSource = "gasown.cdescription", ;
		Height = 20, ;
		lautoremember = .F., ;
		Left = 79, ;
		lrequired = .T., ;
		MaxLength = 25, ;
		Name = "txtcDescription", ;
		TabIndex = 14, ;
		Top = 104, ;
		Width = 353
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcMeterNo' AS txttextboxcustom WITH ;
		ControlSource = "gasown.cmeterno", ;
		Height = 20, ;
		Left = 80, ;
		MaxLength = 15, ;
		Name = "txtcMeterNo", ;
		TabIndex = 6, ;
		Top = 47, ;
		Width = 126
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcOwnerID' AS txtquickfill WITH ;
		clistexpression = investor.cownerid, ;
		clistworkarea = investor, ;
		ControlSource = "gasown.cownerid", ;
		Height = 20, ;
		InputMask = "XXXXXXXXXX", ;
		lautoremember = .F., ;
		Left = 79, ;
		lrequired = .T., ;
		MaxLength = 10, ;
		Name = "txtcOwnerID", ;
		TabIndex = 4, ;
		Top = 17, ;
		Width = 79, ;
		ZOrderSet = 7
		*< END OBJECT: ClassLib="..\custom\cgadget.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcOwnerName' AS txttextboxcustom WITH ;
		BackColor = 212,208,200, ;
		Height = 20, ;
		lautoremember = .F., ;
		Left = 160, ;
		Name = "txtcOwnerName", ;
		TabIndex = 5, ;
		Top = 17, ;
		Width = 404, ;
		ZOrderSet = 89
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcRouteNo' AS txttextboxcustom WITH ;
		ControlSource = "gasown.crouteno", ;
		lautoremember = .F., ;
		Left = 79, ;
		Name = "txtcRouteNo", ;
		TabIndex = 19, ;
		Top = 172
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcWellID' AS txtquickfill WITH ;
		clistexpression = wells.cwellid, ;
		clistworkarea = wells, ;
		ControlSource = "gasown.cwellid", ;
		Height = 20, ;
		InputMask = "XXXXXXXXXX", ;
		lautoremember = .F., ;
		Left = 79, ;
		lrequired = .F., ;
		MaxLength = 10, ;
		Name = "txtcWellID", ;
		TabIndex = 10, ;
		Top = 76, ;
		Width = 79, ;
		ZOrderSet = 7
		*< END OBJECT: ClassLib="..\custom\cgadget.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtLocation' AS txttextboxcustom WITH ;
		ControlSource = "gasown.clocation", ;
		Height = 20, ;
		InputMask = "", ;
		lautoremember = .F., ;
		Left = 415, ;
		Name = "txtLocation", ;
		TabIndex = 21, ;
		Top = 172, ;
		Width = 26
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtMeterType' AS txttextboxcustom WITH ;
		ControlSource = "gasown.ctype", ;
		Height = 20, ;
		InputMask = "", ;
		lautoremember = .F., ;
		Left = 244, ;
		Name = "txtMeterType", ;
		TabIndex = 11, ;
		Top = 76, ;
		Width = 26
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtnCounterLen' AS txttextboxcustom WITH ;
		ControlSource = "gasown.ncounterlen", ;
		Height = 20, ;
		InputMask = "99", ;
		Left = 351, ;
		Name = "txtnCounterLen", ;
		TabIndex = 7, ;
		Top = 47, ;
		Width = 23
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtnLast' AS txttextboxcustom WITH ;
		Alignment = 1, ;
		ControlSource = "gasown.clast", ;
		Height = 20, ;
		InputMask = "", ;
		lautoremember = .F., ;
		Left = 390, ;
		Name = "txtnLast", ;
		TabIndex = 32, ;
		Top = 352, ;
		Width = 80
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtnMultiplier' AS txttextboxcustom WITH ;
		ControlSource = "gasown.nmultiplier", ;
		Height = 20, ;
		InputMask = "99999.9999", ;
		lautoremember = .F., ;
		Left = 488, ;
		Name = "txtnMultiplier", ;
		TabIndex = 37, ;
		Top = 447, ;
		Width = 80
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtNpressure' AS txttextboxcustom WITH ;
		ControlSource = "gasown.npressure", ;
		FontSize = 8, ;
		Height = 20, ;
		InputMask = "99999.9999", ;
		Left = 134, ;
		Name = "txtNpressure", ;
		TabIndex = 41, ;
		Top = 444, ;
		Width = 76
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtnPriceAdj' AS txttextboxcustom WITH ;
		ControlSource = "gasown.npriceadj", ;
		Height = 20, ;
		InputMask = "999.99", ;
		Left = 389, ;
		Name = "txtnPriceAdj", ;
		TabIndex = 36, ;
		Top = 400, ;
		Width = 60
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtnSequence' AS txttextboxcustom WITH ;
		ControlSource = "gasown.nsequence", ;
		Height = 20, ;
		InputMask = "9999", ;
		lautoremember = .F., ;
		Left = 280, ;
		Name = "txtnSequence", ;
		TabIndex = 20, ;
		Top = 172, ;
		Width = 36
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtnYearlyAmt' AS txttextboxcustom WITH ;
		ControlSource = "gasown.nyearlyamt", ;
		Height = 20, ;
		InputMask = "9,999,999.99", ;
		lautoremember = .F., ;
		Left = 134, ;
		Name = "txtnYearlyAmt", ;
		TabIndex = 31, ;
		Top = 352, ;
		Width = 93
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtRateType' AS txttextboxcustom WITH ;
		ControlSource = "gasown.cratetype", ;
		Height = 20, ;
		InputMask = "", ;
		lautoremember = .F., ;
		Left = 552, ;
		Name = "txtRateType", ;
		TabIndex = 22, ;
		Top = 172, ;
		Width = 26
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtUsedYTD' AS txttextboxcustom WITH ;
		ControlSource = "gasown.nused", ;
		Height = 20, ;
		InputMask = "9,999,999.99", ;
		lautoremember = .F., ;
		Left = 134, ;
		Name = "txtUsedYTD", ;
		TabIndex = 33, ;
		Top = 398, ;
		Width = 93
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />
	
	PROCEDURE Init
		IF DODEFAULT()
		   * If we're in demo mode, tell the user that this is an optional module
		   IF m.goapp.ldemo
		      thisform.omessage.warning('The House Gas module is an optional module that can be purchased separately.' + ;
		                                ' It is included in the demo for evaluation purposes.')
		   ENDIF
		   swselect('gasopt')
		   GO TOP 
		   thisform.lActual = gasopt.lActual
		ENDIF    
	ENDPROC

	PROCEDURE list
		LPARAMETERS cWorkarea
		*
		PRIV llOK
		LOCAL lcList, lnRecNo, lStatus
		LOCAL llOK, llReturn, lnCount, loError
		
		llReturn = .T.
		
		TRY
		* Default to the form's primary workarea
		    IF EMPTY(m.cWorkarea)
		        m.cWorkarea = THIS.cWorkarea
		    ENDIF
		
		    IF THIS.FlushControlBuffer()
		* If this or any child is changed, Validate it and children
		        IF THIS.BeforeNav(m.cWorkarea)
		            THIS.RefreshAll()  && In case BeforeNav() did a Revert()
		
		            IF USED('temp')
		                USE IN temp
		            ENDIF
		            IF USED('temp1')
		                USE IN temp1
		            ENDIF
		
		            llOK   = .T.
		            lcList = 'cOwnerID\Owner ID,cOwnName\Owner Name,cMeterNo\Meter Number,cDescription/cdescrip\Description'
		
					SELECT  gasown.cOwnerID, investor.cSortField AS cOwnName, gasown.cMeterNo, gasown.cDescription  ;
					   FROM gasown, investor ;
					   INTO CURSOR temp1 ;
					   WHERE gasown.cOwnerID = investor.cOwnerID
		
		            SELECT temp1
		            USE DBF('temp1') AGAIN IN 0 ALIAS temp
		            SELECT temp
		            INDEX ON cOwnerID TAG cOwnerID
		            INDEX ON cOwnName TAG cOwnName
		            INDEX ON cMeterNo TAG cMeterNo
		            INDEX ON cDescription TAG cDescrip
		
		            SELECT gasown
		            lnRecNo = RECNO()
		            COUNT FOR NOT DELETED() TO lnCount
		            IF lnCount = 0
		                llReturn = .T.
		                EXIT
		            ENDIF
		
		            DO FORM ..\CUSTOM\picklist WITH 'temp', lcList, gasown.cOwnerID, 4, .T., .T.
		
		            IF llOK
		                SELECT gasown
		                LOCATE FOR cMeterNo = temp.cMeterNo
		                THISFORM.REFRESH()
		                THISFORM.txtcownerID.VALID()  &&  Refresh the name
		            ELSE
		                SELECT gasown
		                TRY
		                    GOTO lnRecNo
		                CATCH
		                ENDTRY
		            ENDIF
		            THISFORM.RefreshAll()
		        ENDIF
		    ENDIF
		CATCH TO loError
		    llReturn = .F.
		    DO errorlog WITH 'List', loError.LINENO, 'House Gas Owners', loError.ERRORNO, loError.MESSAGE, '', loError
		    MESSAGEBOX('Unable to process the list at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		          'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		RETURN llReturn
		
		 
	ENDPROC

	PROCEDURE cmdatamanager.afterdelete
		LPARAMETERS cworkarea
		
		SELECT gasown
		=TABLEUPDATE(.t.,.t.)
		
		return(DODEFAULT(cworkarea))
	ENDPROC

	PROCEDURE cmdatamanager.afternav
		LPARAMETERS cworkarea
		
		DODEFAULT(cworkarea)
		
		SELECT investor
		SET ORDER TO cOwnerID
		IF SEEK(gasown.cOwnerID)
		   THISFORM.txtcOwnerName.value = investor.cOwnName
		ELSE
		   THISFORM.txtcOwnerName.value = ''
		ENDIF
		
	ENDPROC

	PROCEDURE cmdatamanager.afternew
		LPARAMETERS cworkarea
		
		THISFORM.txtcOwnerName.SET('value','')
		THISFORM.swGroup1.LISTITEMID = 1
		REPLACE gasown.cGroup WITH THISFORM.swGroup1.VALUE
		
		THISFORM.setnextcontrol(THISFORM.txtcOwnerID)
		
		DODEFAULT()
		
	ENDPROC

	PROCEDURE cmdatamanager.beforedelete
		LPARAMETERS cWorkarea
		LOCAL lcMeterNo
		
		lcMeterNo = thisform.txtcmeterNo.Value
		lcRecNo   = RECNO()
		
		SELECT gasuse
		SET ORDER to cmeterno 
		IF INDEXSEEK(lcMeterNo)
		   thisform.oMessage.Warning('One or more meter readings have been entered for this meter number. ' + ;
		                             'They must be deleted before the owner can be deleted.')
		   RETURN .f.
		ENDIF
		
		DODEFAULT(cWorkarea)
	ENDPROC

	PROCEDURE cmdatamanager.beforeupdate
		LPARAMETERS cWorkareaList, lCurrentRecordOnly
		
		IF EMPTY(thisform.txtcmeterNo.Value)
		   thisform.omessage.Warning('The meter no cannot be blank. Please enter a valid meter no for this owner.')
		   RETURN .f.
		ENDIF 
		
		IF NOT EMPTY(gasown.cRouteNo) AND gasown.nSequence <> 0
		   SELECT gasown1
		   LOCATE FOR cRouteNo = gasown.cRouteNo AND nSequence = gasown.nSequence AND cMeterNo <> gasown.cMeterNo AND NOT DELETED() AND RECNO() <> RECNO('gasown')
		   IF FOUND()  &&  Someone already has this route and sequence number, so don't let them save it
		      thisform.oMessage.Warning('There is already a different owner with this same route and sequence number.  Please select a different number for this owner.')
		      thisform.setnextcontrol(thisform.txtnsequence)
		      RETURN .f.
		   ENDIF
		ENDIF
		
		SELECT gasown1  &&  Locate the old copy of this record, if it exists, and see if they changed the yearly allocation amount.  If they did, check to see if there are any readings for this year, and warn them about the effects
		LOCATE FOR cOwnerID == gasown.cOwnerID AND cMeterNo == gasown.cMeterNo
		IF FOUND()
		   IF nYearlyAmt <> gasown.nYearlyAmt  &&  They changed the yearly allocation amount
		      SELECT gasuse
		      LOCATE FOR cMeterNo == gasown.cMeterNo AND YEAR(dDate) = YEAR(DATE())
		      IF FOUND()
		         thisform.oMessage.Warning('You are changing the Yearly Allocation amount for this owner, and there have been readings already entered for this year.  Be aware that making this change will affect how previous Usage Statements print.')
		      ENDIF
		   ENDIF
		ENDIF
		
		IF thisform.chknet.Value
		   IF EMPTY(thisform.txtcwellID.Value)
		      thisform.oMessage.Warning('Owners that are marked as netted also need to have a valid well associated with the meter. Please choose a well and save again.')
		      thisform.setnextcontrol(thisform.txtcwellID)
		      RETURN .f.
		   ENDIF 
		ENDIF 
	ENDPROC

	PROCEDURE cmdLookOwner.Click
		LOCAL lcList
		PRIV llOK
		
		llOK = .F.
		lcList = 'cownerid,csortfield'
		
		DO FORM ..\custom\picklist WITH 'Investor', lcList, thisform.txtcownerid.value, 2
		
		IF llOK
		   thisform.cmdatamanager.replace('gasown','cOwnerID', Investor.cownerid)
		   thisform.txtcOwnerID.refresh()
		   thisform.txtcOwnerName.value = investor.cOwnname
		   thisform.txtcOwnerName.refresh()
		   thisform.lchanged = .t.
		   thisform.setnextcontrol(thisform.txtcOwnerID)
		ENDIF   
	ENDPROC

	PROCEDURE cmdLookWell.Click
		LOCAL lcList
		PRIV llOK
		
		llOK = .F.
		lcList = 'cwellid,cwellname,cgroup, cwellstat'
		
		lcOwner = thisform.txtcownerID.Value
		swclose('tempwells')
		SELECT wellinv.cwellid, wells.cwellname, wells.cgroup, wells.cwellstat ;
		   FROM wellinv ;
		      JOIN wells ON wells.cwellid = wellinv.cwellid ;
		   WHERE wellinv.cownerid = lcOwner ;
		   INTO CURSOR tempwells READWRITE ;
		   GROUP BY wellinv.cwellid ;
		   ORDER BY wellinv.cwellid
		   
		   INDEX on cwellid TAG cwellid
		   INDEX on cwellname TAG cwellname
		   INDEX on cgroup TAG cgroup
		   INDEX on cwellstat TAG cwellstat
		   
		DO FORM ..\custom\picklist WITH 'tempwells', lcList, thisform.txtcWellID.value, 4, .t.
		
		IF llOK
		   thisform.cmdatamanager.replace('gasown','cwellid', tempwells.cwellid)
		   thisform.txtcWellID.refresh()
		   thisform.lchanged = .t.
		   thisform.setnextcontrol(thisform.txtcWellID)
		ENDIF   
	ENDPROC

	PROCEDURE cmdPSI.Click
		IF THISFORM.txtnPressure.VALUE <> 0
		   lnMultiplier = ((14.4+THISFORM.txtnPressure.VALUE)/14.7)
		   IF thisform.txtnMultiplier.VALUE <> lnMultiplier
		      THISFORM.txtnMultiplier.SET('value',lnMultiplier)
		   ENDIF
		ENDIF
		
		DODEFAULT()
		
	ENDPROC

	PROCEDURE txtcMeterNo.Valid
		If this.value <> gasown.cmeterno
			Select gasown1
			Set DELETED OFF
			Locate FOR cmeterno == THIS.VALUE
			If FOUND()
				Thisform.oMessage.Warning('There is already an owner with this meter number.  Please choose a different number.')
				Set DELETED ON
				Return 0
			Endif
		
			Set DELETED ON
		Endif
		
		DoDefault()
		
	ENDPROC

	PROCEDURE txtcOwnerID.GotFocus
		ON KEY LABEL F2 _screen.activeform.cmdLookOwner.Click()
	ENDPROC

	PROCEDURE txtcOwnerID.InteractiveChange
		IF DODEFAULT()
		   SELECT investor
		   LOCATE FOR cownerid == this.value
		   IF FOUND() 
		      THISFORM.txtcOwnerName.SET('value',investor.cOwnName)
		   ELSE
		      THISFORM.txtcOwnerName.SET('value','')
		   ENDIF 
		ENDIF       
		   
		         
		
	ENDPROC

	PROCEDURE txtcOwnerID.LostFocus
		ON KEY LABEL f2
		
	ENDPROC

	PROCEDURE txtcOwnerID.Valid
		LOCAL llFound
		
		SELECT investor
		SET ORDER TO cOwnerID
		IF SEEK(THISFORM.txtcOwnerID.VALUE)
		   THISFORM.txtcOwnerName.value = investor.cOwnName
		ELSE
		   THISFORM.txtcOwnerName.value = 'Unknown'
		ENDIF
		
		DODEFAULT()
		
	ENDPROC

	PROCEDURE txtcOwnerName.When
		RETURN .F.
	ENDPROC

	PROCEDURE txtcWellID.GotFocus
		ON KEY LABEL F2 _screen.activeform.cmdLookWell.Click()
	ENDPROC

	PROCEDURE txtcWellID.LostFocus
		ON KEY LABEL f2
		
	ENDPROC

	PROCEDURE txtcWellID.Valid
		IF DODEFAULT()
		   IF NOT EMPTY(this.Value)
		      lcWellid = this.value
		      lcOwnerid = thisform.txtcOwnerID.Value
		      swselect('wellinv')
		      LOCATE FOR cwellid = lcWellID AND cownerid = lcOwnerID
		      IF NOT FOUND()
		         MESSAGEBOX('This owner does not have an interest in the chosen well. Please choose another.',64,'House Gas Owners')
		         RETURN 0
		      ENDIF 
		   ENDIF 
		ENDIF 
	ENDPROC

	PROCEDURE txtnLast.Valid
		this.Value = TRANSFORM(this.Value)
		IF NOT thisform.lActual AND THISFORM.txtnCounterLen.value > LEN(ALLTRIM(THIS.VALUE))  &&  If the user has specified a valid counter length, pad to that length
		   THIS.SET('value',PADR(ALLTRIM(THIS.VALUE),thisform.txtnCounterLen.value,'0'))
		ENDIF
		
		dodefault()
	ENDPROC

	PROCEDURE txtUsedYTD.When
		RETURN .f.
	ENDPROC

ENDDEFINE
