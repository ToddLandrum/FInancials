*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="dmrooldrecon.scx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
#INCLUDE "..\source\appdefs.h"

DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="2" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Cursor1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor6" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor7" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor8" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor9" UniqueID="" Timestamp="" />

	AutoOpenTables = .F.
	DataSource = .NULL.
	Height = 539
	Left = 40
	Name = "Dataenvironment"
	Top = 235
	Width = 636

	ADD OBJECT 'Cursor1' AS cursor WITH ;
		Alias = "investor", ;
		CursorSource = "investor", ;
		Database = ..\amdata\appdata.dbc, ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor1", ;
		Top = 20, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor2' AS cursor WITH ;
		Alias = "disbhist", ;
		CursorSource = "disbhist", ;
		Database = ..\amdata\appdata.dbc, ;
		Height = 90, ;
		Left = 150, ;
		Name = "Cursor2", ;
		Top = 20, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor3' AS cursor WITH ;
		Alias = "options", ;
		CursorSource = "options", ;
		Database = ..\amdata\appdata.dbc, ;
		Height = 90, ;
		Left = 290, ;
		Name = "Cursor3", ;
		Top = 20, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor4' AS cursor WITH ;
		Alias = "programs", ;
		CursorSource = "programs", ;
		Database = ..\amdata\appdata.dbc, ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor4", ;
		Top = 140, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor5' AS cursor WITH ;
		Alias = "wells", ;
		CursorSource = "wells", ;
		Database = ..\amdata\appdata.dbc, ;
		Height = 90, ;
		Left = 150, ;
		Name = "Cursor5", ;
		Top = 140, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor6' AS cursor WITH ;
		Alias = "wellinv", ;
		CursorSource = "wellinv", ;
		Database = ..\amdata\appdata.dbc, ;
		Height = 90, ;
		Left = 290, ;
		Name = "Cursor6", ;
		Top = 140, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor7' AS cursor WITH ;
		Alias = "wellhist", ;
		CursorSource = "wellhist", ;
		Database = ..\amdata\appdata.dbc, ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor7", ;
		Top = 260, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor8' AS cursor WITH ;
		Alias = "susaudit", ;
		CursorSource = "susaudit", ;
		Database = ..\amdata\appdata.dbc, ;
		Height = 90, ;
		Left = 150, ;
		Name = "Cursor8", ;
		Top = 260, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor9' AS cursor WITH ;
		Alias = "sysctl", ;
		CursorSource = "sysctl", ;
		Database = ..\amdata\appdata.dbc, ;
		Height = 90, ;
		Left = 288, ;
		Name = "Cursor9", ;
		Top = 277, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

ENDDEFINE

DEFINE CLASS formdmrown1099 AS frmrptcriteria OF "..\source\appforms.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="opgReportOn" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Swrptlook1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbltextcustom1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkSuspense" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="LblLastOwner" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="LblFirstOwner" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="LblAccYear" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkNoActivity" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkExclTrans" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="swYear" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: calcboth		&& Calculates both royalty and working interest on the same report.
		*m: calcroyalty		&& Calculates royalty interest summary
		*m: calcworking		&& Calculates working interest summary
		*m: fixaudit		&& Fix suspense history
	*</DefinedPropArrayMethod>

	Caption = "Old Owner 1099 Reconciliation"
	DataSession = 2
	DoCreate = .T.
	Height = 363
	Name = "FormDmrOwn1099"
	Width = 390
	Swrptcriteriabuttons1.chkSendFile.Alignment = 0
	Swrptcriteriabuttons1.chkSendFile.Name = "chkSendFile"
	Swrptcriteriabuttons1.cmdclose.Name = "cmdclose"
	Swrptcriteriabuttons1.cmdPreview.Name = "cmdPreview"
	Swrptcriteriabuttons1.cmdPrint.Name = "cmdPrint"
	Swrptcriteriabuttons1.Left = 78
	Swrptcriteriabuttons1.Name = "Swrptcriteriabuttons1"
	Swrptcriteriabuttons1.TabIndex = 13
	Swrptcriteriabuttons1.Top = 283
	Swrptcriteriabuttons1.ZOrderSet = 0

	ADD OBJECT 'chkExclTrans' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Treat Transporation Revenue As Expense", ;
		Left = 123, ;
		Name = "chkExclTrans", ;
		TabIndex = 12, ;
		Top = 255, ;
		Value = .F.
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkNoActivity' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Include Wells With No Activity During The Year", ;
		Left = 123, ;
		Name = "chkNoActivity", ;
		TabIndex = 11, ;
		Top = 233, ;
		Visible = .F.
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkSuspense' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Include Suspense Activity", ;
		Left = 123, ;
		Name = "chkSuspense", ;
		TabIndex = 10, ;
		Top = 210
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'LblAccYear' AS lbllabelcustom WITH ;
		AutoSize = .T., ;
		Caption = "Year:", ;
		Height = 16, ;
		Left = 77, ;
		Name = "LblAccYear", ;
		TabIndex = 6, ;
		Top = 67, ;
		Width = 29, ;
		ZOrderSet = 8
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'LblFirstOwner' AS lbllabelcustom WITH ;
		AutoSize = .T., ;
		Caption = "First Owner:", ;
		Height = 16, ;
		Left = 43, ;
		Name = "LblFirstOwner", ;
		TabIndex = 7, ;
		Top = 108, ;
		Width = 63, ;
		ZOrderSet = 7
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'LblLastOwner' AS lbllabelcustom WITH ;
		AutoSize = .T., ;
		Caption = "Last Owner:", ;
		Height = 16, ;
		Left = 43, ;
		Name = "LblLastOwner", ;
		TabIndex = 9, ;
		Top = 159, ;
		Width = 63, ;
		ZOrderSet = 6
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbltextcustom1' AS lbltextcustom WITH ;
		Caption = "Base Report On:", ;
		Left = 24, ;
		Name = "Lbltextcustom1", ;
		TabIndex = 4, ;
		Top = 18
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'opgReportOn' AS opgoptiongroupcustom WITH ;
		AutoSize = .T., ;
		BorderStyle = 0, ;
		ButtonCount = 2, ;
		Left = 120, ;
		Name = "opgReportOn", ;
		TabIndex = 3, ;
		Top = 13, ;
		Value = 1, ;
		Option1.AutoSize = .T., ;
		Option1.Caption = "Accounting Year", ;
		Option1.FontSize = 8, ;
		Option1.Height = 16, ;
		Option1.Left = 5, ;
		Option1.Name = "Option1", ;
		Option1.Top = 5, ;
		Option1.Value = 1, ;
		Option1.Width = 100, ;
		Option2.AutoSize = .T., ;
		Option2.Caption = "Production Year", ;
		Option2.FontSize = 8, ;
		Option2.Height = 16, ;
		Option2.Left = 5, ;
		Option2.Name = "Option2", ;
		Option2.Top = 24, ;
		Option2.Width = 96
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="optiongroup" />

	ADD OBJECT 'Swrptlook1' AS swrptlook WITH ;
		Left = 124, ;
		Name = "Swrptlook1", ;
		TabIndex = 8, ;
		Top = 108, ;
		ZOrderSet = 3, ;
		Swlookupbutton1.Name = "Swlookupbutton1", ;
		Swlookupbutton2.Name = "Swlookupbutton2", ;
		txtBegID.clistexpression = investor.cownerid, ;
		txtBegID.clistworkarea = investor, ;
		txtBegID.Name = "txtBegID", ;
		TxtBegName.Name = "TxtBegName", ;
		txtEndID.clistexpression = investor.cownerid, ;
		txtEndID.clistworkarea = investor, ;
		txtEndID.Name = "txtEndID", ;
		TxtEndName.Name = "TxtEndName"
		*< END OBJECT: ClassLib="..\custom\swcontrol.vcx" BaseClass="container" />

	ADD OBJECT 'swYear' AS cbocomboboxcustom WITH ;
		Height = 20, ;
		Left = 124, ;
		Margin = 1, ;
		Name = "swYear", ;
		Top = 65
		*< END OBJECT: ClassLib="..\..\ampro\custom\ccontrol.vcx" BaseClass="combobox" />
	
	PROCEDURE builddata
		LOCAL tcYear, tcOwner1, tcOwner2
		LOCAL m.gtotmcf, m.gtotbbl, m.gtotimcf, lnWorkCnt
		LOCAL m.gtotibbl, m.gtotinc, m.gtotexp, m.gtotsev, m.gtotdef, m.gtotnet
		PUBLIC tlAcctYear
		
		tcYear   = THISFORM.swYear.VALUE
		tcOwner1 = THISFORM.swrptlook1.txtBegID.VALUE
		tcOwner2 = THISFORM.swrptlook1.txtEndID.VALUE
		
		IF EMPTY(tcYear)
		   thisform.oMessage.warning('Please select a valid year where closings for a prior year were done.')
		   RETURN .f.
		ENDIF 
		
		IF THISFORM.opgReportOn.VALUE = 1  &&  Accounting Year
		   tlAcctYear = .T.
		ELSE
		   tlAcctYear = .F.
		ENDIF
		
		STORE 0 TO m.gtotibbl, m.gtotinc, m.gtotexp, m.gtotsev, m.gtotdef, m.gtotnet
		STORE 0 TO m.gtotmcf, m.gtotbbl, m.gtotimcf
		
		SELECT options
		glHideComp = lHideComp
		
		WAIT WIND NOWAIT 'Processing report request...'
		
		*
		*  Build work table for both working and royalty calculations
		*
		SELECT cwellid, AVG(ngasint) AS ngasint, AVG(noilint) AS oilint, ;
		   SUM(ntotmcf) AS ntotmcf, SUM(ntotbbl) AS ntotbbl ;
		   FROM wellhist ;
		   WHERE IIF(tlAcctYear,YEAR(hdate) = VAL(tcYear),hyear = tcYear) ;
		   GROUP BY cwellid ;
		   ORDER BY cwellid ;
		   INTO CURSOR welltab
		INDEX ON cwellid TAG cwellid
		
		*  Fix suspense history
		IF THISFORM.chksuspense.VALUE = .T.
		   THISFORM.fixaudit()
		ENDIF
		
		*
		*  Process Both
		*
		THISFORM.calcboth()
		THIS.creportname = 'dmrooldrecon.frx'
		
		WAIT CLEAR
		
		SELECT histinv
		count for not deleted() to lnCount
		IF lnCount > 0
		   RETURN .T.
		ELSE
		   RETURN .F.
		ENDIF
		
		
		
		
		
	ENDPROC

	PROCEDURE calcboth		&& Calculates both royalty and working interest on the same report.
		LOCAL tcYear, tcOwner1, tcOwner2
		LOCAL m.gtotmcf, m.gtotbbl, m.gtotimcf, lnWorkCnt
		LOCAL m.gtotibbl, m.gtotinc, m.gtotexp, m.gtotsev, m.gtotdef, m.gtotnet
		
		tcYear   = THISFORM.swYear.VALUE
		tcOwner1 = THISFORM.swrptlook1.txtBegID.VALUE
		tcOwner2 = THISFORM.swrptlook1.txtEndID.VALUE
		
		STORE 0 TO m.gtotibbl, m.gtotinc, m.gtotexp, m.gtotsev, m.gtotdef, m.gtotnet
		STORE 0 TO m.gtotmcf, m.gtotbbl, m.gtotimcf
		
		THISFORM.cTitle1     = IIF(NOT tlAcctYear,'Production Year ','') + tcYear + ' Owner 1099 Reconciliation'
		THISFORM.cTitle2     = ''
		
		SELECT options
		glHideComp = lHideComp
		llGross1099 = lGross1099
		llTranExp   = THISFORM.chkexcltrans.VALUE          && Temporary option to add back transportation to gross for Dave
		
		**-
		**-  Get producer's address information
		**-
		**- Check on the existence of the application object
		**- if it doesn't exist, we're running in development
		**- mode and need to initialize the company address info.
		IF TYPE('m.goApp') = 'O'
		   m.caddr1 = m.goApp.cAddress1
		   m.caddr2 = m.goApp.cAddress2
		   m.caddr3 = m.goApp.cAddress3
		   m.ccomptax   = m.goApp.cTaxid
		ELSE
		   m.caddr1 = 'PO Box 223'
		   m.caddr2 = 'Wooster, OH  44691'
		   m.caddr3 = ''
		   m.ccomptax   = '99-9999999'
		ENDIF
		
		SELE disbhist
		REPL nincome WITH 0 FOR crectype='J'
		
		**********************************************
		*  Fix direct paid severance taxes in disbhist
		**********************************************
		swselect('disbhist')
		scan for between(cownerid,tcowner1,tcowner2) and year(hdate) = val(tcyear)
		   scatter memvar
		   sele wells
		   locate for cwellid == m.cwellid
		   if found()
		      m.ldiroilpurch = ldiroilpurch
		      m.ldirgaspurch = ldirgaspurch
		   else
		      loop
		   endif
		   sele disbhist
		   if m.ldiroilpurch 
		      if m.cdirect = "O" 
		         repl nsevtaxes with (m.ngastax1+m.ngastax2+m.ngastax3+m.ngastax4 + ;
		                              m.nothtax1+m.nothtax2+m.nothtax3+m.nothtax4)
		      endif
		      if m.cdirect = 'B'                        
		         repl nsevtaxes with (m.nothtax1+m.nothtax2+m.nothtax3+m.nothtax4)
		      endif
		   endif
		   if m.ldirgaspurch
		      if m.cdirect = 'G'
		         repl nsevtaxes with (m.noiltax1+m.noiltax2+m.noiltax3+m.noiltax4 + ;
		                              m.nothtax1+m.nothtax2+m.nothtax3+m.nothtax4)
		      endif
		      if m.cdirect = 'B'                        
		         repl nsevtaxes with (m.nothtax1+m.nothtax2+m.nothtax3+m.nothtax4)
		      endif
		   endif
		endscan      
		            
		      
		**********************************************************************
		*   Process Working Interest Owners
		**********************************************************************
		*
		CREATE CURSOR histtab ;
		   (crptgroup      C(1), ;
		   cownerid       C(10), ;
		   cwellid        C(10), ;
		   cprogcode      C(10), ;
		   cyear          C(4), ;
		   nworkint       N(11,7), ;
		   cwellname      C(30), ;
		   nrevoil        N(11,7), ;
		   nrevgas        N(11,7), ;
		   ntrprev        N(12,2), ;
		   ctypeinv       C(1), ;
		   ntotmcf        N(12,5), ;
		   nitotmcf       N(12,5), ;
		   ntotbbl        N(12,5), ;
		   nitotbbl       N(12,5), ;
		   nincome        N(12,2), ;
		   nexpense       N(12,2), ;
		   ncompgath      N(12,2), ;
		   ninvsev        N(12,2), ;
		   ndeficit       N(12,2), ;
		   nnetcheck      N(12,2))
		SELECT histtab
		INDEX ON cwellid   TAG cwellid
		INDEX ON cownerid+crptgroup TAG cownerid
		
		SELECT disbhist.cownerid, ;
		   disbhist.cwellid,   ;
		   ownpcts.nworkint,  ;
		   ctypeinv, ;
		   disbhist.cdirect,   ;
		   ownpcts.nrevgas,   ;
		   ownpcts.nrevoil,   ;
		   disbhist.cprogcode, ;
		   disbhist.ngather,   ;
		   disbhist.ncompress, ;
		   IIF(INLIST(disbhist.ctypeinv,'L','O'),'R','W') AS crptgroup, ;
		   IIF(disbhist.cdirect='O',disbhist.nincome-noilrev,IIF(disbhist.cdirect='G',disbhist.nincome-ngasrev,nincome)) AS nincome,   ;
		   disbhist.nexpense,  ;
		   disbhist.ntrprev, ;
		   disbhist.ntotale1,  ;
		   disbhist.ntotale2,  ;
		   disbhist.ntotale3,  ;
		   disbhist.ntotale4,  ;
		   disbhist.ntotale5,  ;
		   disbhist.nTotaleA,  ;
		   disbhist.nTotaleB,  ;
		   disbhist.nmktgexp,  ;
		   disbhist.noiltax1, disbhist.noiltax2, disbhist.noiltax3, disbhist.noiltax4, ;
		   disbhist.ngastax1, disbhist.ngastax2, disbhist.ngastax3, disbhist.ngastax4, ;
		   disbhist.nsevtaxes, ;
		   disbhist.nTaxWith,  ;
		   disbhist.nBackWith,  ;
		   disbhist.nnetcheck, ;
		   disbhist.nflatrate, ;
		   m.caddr1 AS caddr1, ;
		   m.caddr2 AS caddr2, ;
		   m.caddr3 AS caddr3, ;
		   m.ccomptax AS ccomptax, ;
		   IIF(disbhist.cdirect<>'O',IIF(disbhist.cdirect<>'B',disbhist.noilrev,000000.00),000000.00) AS noilrev, ;
		   IIF(disbhist.cdirect<>'G',IIF(disbhist.cdirect<>'B',disbhist.ngasrev,000000.00),000000.00) AS ngasrev, ;
		   tcYear AS cyear, ;
		   disbhist.nOthRev,  ;
		   disbhist.nmiscrev1, ;
		   disbhist.nmiscrev2  ;
		   FROM disbhist, ownpcts ;
		   WHERE IIF(tlAcctYear,YEAR(disbhist.hdate) = VAL(tcYear),disbhist.hyear = tcYear)   ;
		   AND BETWEEN(disbhist.cownerid,tcOwner1, tcOwner2)  ;
		   AND disbhist.ciddisb == ownPcts.ciddisb ;
		   INTO CURSOR tempwork ;
		   ORDER BY disbhist.ciddisb, disbhist.cownerid, disbhist.cwellid, disbhist.cprogcode  ;
		   GROUP BY disbhist.ciddisb, disbhist.cownerid, disbhist.cwellid, disbhist.cprogcode
		
		SELECT tempwork.crptgroup, tempwork.cownerid, tempwork.cwellid, MAX(tempwork.nworkint) AS nworkint, SUM(tempwork.ntrprev) AS ntrprev,;
		   wells.cwellname,  tempwork.ccomptax, tempwork.cdirect,;
		   ctypeinv, max(nrevgas) as nrevgas, max(nrevoil) as nrevoil, ;
		   SUM(noiltax1) AS noiltax1, SUM(noiltax2) AS noiltax2, SUM(noiltax3) AS noiltax3, SUM(noiltax4) AS noiltax4, ;
		   SUM(ngastax1) AS ngastax1, SUM(ngastax2) AS ngastax2, SUM(ngastax3) AS ngastax3, SUM(ngastax4) AS ngastax4, ;
		   tempwork.cprogcode, tempwork.cyear,;
		   SUM(tempwork.ngather+tempwork.ncompress) AS ncompgath, ;
		   0000000.0000 AS ntotmcf,  0000000.0000 AS ntotbbl, ;
		   0000000.0000 AS nitotmcf,  0000000.0000 AS nitotbbl, ;
		   SUM(nincome) AS nincome, ;
		   SUM(noilrev+ngasrev+ntrprev+nmiscrev1+nmiscrev2+nflatrate+nOthRev) AS nincomex, ;
		   SUM(nexpense+ntotale1+ntotale2+ntotale3+ntotale4+ntotale5+nTotaleA+nTotaleB+nMktgExp) AS nexpense, ;  &&  Include MKTG costs - BH 01/15/08
		   SUM(nsevtaxes+nTaxWith+nBackWith) AS ninvsev, 0000.00000 AS ndeficit, ;  &&  Include tax/backup withholding in taxes reported - BH 01/11/08
		   SUM(nnetcheck) AS nnetcheck ;
		   FROM tempwork, wells ;
		   WHERE tempwork.cwellid = wells.cwellid ;
		   ORDER BY tempwork.cownerid, tempwork.crptgroup, tempwork.cwellid  ;
		   GROUP BY tempwork.cownerid, tempwork.crptgroup, tempwork.cwellid, ctypeinv  ;
		   INTO CURSOR histtabw
		   
		SELECT crptgroup, cownerid, cwellid, MAX(nworkint) AS nworkint, SUM(ntrprev) AS ntrprev,;
		   cwellname,  ccomptax, cdirect,;
		   ctypeinv, sum(nrevgas) as nrevgas, sum(nrevoil) as nrevoil, ;
		   SUM(noiltax1) AS noiltax1, SUM(noiltax2) AS noiltax2, SUM(noiltax3) AS noiltax3, SUM(noiltax4) AS noiltax4, ;
		   SUM(ngastax1) AS ngastax1, SUM(ngastax2) AS ngastax2, SUM(ngastax3) AS ngastax3, SUM(ngastax4) AS ngastax4, ;
		   cprogcode, cyear,;
		   SUM(ncompgath) AS ncompgath, ;
		   0000000.0000 AS ntotmcf,  0000000.0000 AS ntotbbl, ;
		   0000000.0000 AS nitotmcf,  0000000.0000 AS nitotbbl, ;
		   SUM(nincome) AS nincome, ;
		   SUM(nincomex) AS nincomex, ;
		   SUM(nexpense) AS nexpense, ;
		   SUM(ninvsev) AS ninvsev, 0000.00000 AS ndeficit, ;
		   SUM(nnetcheck) AS nnetcheck ;
		   FROM histtabw ;
		   ORDER BY cownerid, crptgroup, cwellid, ctypeinv  ;
		   GROUP BY cownerid, crptgroup, cwellid, ctypeinv  ;
		   INTO CURSOR histtabx
		   
		   
		
		USE IN tempwork
		SELE wells
		SET ORDER TO cwellid
		
		SELECT histtabx
		SCAN
		   SCATTER MEMVAR
		   SELE wells
		   IF SEEK(m.cwellid)
		      m.ldiroilpurch = ldiroilpurch
		      m.ldirgaspurch = ldirgaspurch
		      SCATTER FIELDS LIKE lsev* MEMVAR
		   ELSE
		      LOOP
		   ENDIF
		   IF m.cdirect = 'O' OR m.cdirect = 'B'
		      IF m.lsev1o OR m.ldiroilpurch
		         m.ninvsev = m.ninvsev -  m.noiltax1
		      ENDIF
		      IF m.lsev2o OR m.ldiroilpurch
		         m.ninvsev = m.ninvsev - m.noiltax2
		      ENDIF
		      IF m.lsev3o OR m.ldiroilpurch
		         m.ninvsev = m.ninvsev - m.noiltax3
		      ENDIF
		      IF m.lsev4o OR m.ldiroilpurch
		         m.ninvsev = m.ninvsev - m.noiltax4
		      ENDIF
		   ENDIF
		   IF m.cdirect = 'G' OR m.cdirect = 'B'
		      IF m.lsev1g OR m.ldirgaspurch
		         m.ninvsev = m.ninvsev - m.ngastax1
		      ENDIF
		      IF m.lsev2g OR m.ldirgaspurch
		         m.ninvsev = m.ninvsev - m.ngastax2
		      ENDIF
		      IF m.lsev3g OR m.ldirgaspurch
		         m.ninvsev = m.ninvsev - m.ngastax3
		      ENDIF
		      IF m.lsev4g OR m.ldirgaspurch
		         m.ninvsev = m.ninvsev - m.ngastax4
		      ENDIF
		   ENDIF
		
		   IF llTranExp = .T.
		      m.nincome = m.nincome - m.ntrprev
		      m.nexpense = m.nexpense - m.ntrprev
		   ENDIF
		   INSERT INTO histtab FROM MEMVAR
		ENDSCAN
		
		SELE cownerid, cwellid, ctypeinv FROM susaudit WHERE BETWEEN(susaudit.cownerid,tcOwner1, tcOwner2) AND cwellid <> 'ALL' INTO CURSOR tempsusp ORDER BY cownerid, cwellid, ctypeinv GROUP BY cownerid, cwellid, ctypeinv
		
		SELE histtab
		SCATTER MEMVAR BLANK
		
		SELE wells
		SET ORDER TO cwellid
		
		SELE tempsusp
		SCAN
		   SCATTER MEMVAR
		   SELE histtab
		   IF m.ctypeinv = 'W'
		      LOCATE FOR cownerid=m.cownerid AND cwellid = m.cwellid AND crptgroup = 'W'
		   ELSE
		      LOCATE FOR cownerid=m.cownerid AND cwellid = m.cwellid AND crptgroup = 'R'
		   ENDIF
		   IF NOT FOUND()
		      m.crptgroup = IIF(m.ctypeinv='W','W','R')
		      SELE wells
		      IF SEEK(m.cwellid)
		         m.cwellname = cwellname
		      ELSE
		         m.cwellname = 'Unknown'
		      ENDIF
		      m.cyear = tcYear
		      INSERT INTO histtab FROM MEMVAR
		   ENDIF
		ENDSCAN
		
		tcYear1 = STR(VAL(tcYear)+1,4)
		
		*
		*  Process suspense entries
		*
		
		IF THISFORM.chksuspense.VALUE = .T.
		   SELE cdmbatch, cPeriod, cyear, ddateclose, cgroup, dacctdate ;
		      FROM sysctl INTO CURSOR tempprd ;
		      WHERE YEAR(dAcctDate) = VAL(tcYear) AND cTypeClose = 'R' ;
		      ORDER BY cdmbatch
		   SELE cownerid FROM histtab INTO CURSOR tempown ORDER BY cownerid GROUP BY cownerid
		   SELE tempown
		   SCAN
		      m.cownerid = cownerid
		      SELE histtab
		      SCAN FOR cyear = tcYear AND cownerid = m.cownerid
		         SCATTER MEMVAR
		
		         *  Look for suspense activity this year
		         SELE susaudit
		         LOCATE FOR cownerid = m.cownerid AND YEAR(dsuspdate) = VAL(tcYear)
		         IF NOT FOUND()
		            LOOP
		         ENDIF
		
		         STORE 0 TO lnGross, lnExpenses, lnTaxes, lnNet
		         WAIT WIND NOWAIT 'Processing Suspense Amounts For Owner: ' + m.cownerid
		         SELE susaudit
		         SCAN FOR cownerid = m.cownerid AND cwellid = m.cwellid AND ctypeinv = m.ctypeinv
		            m.cbatch    = cbatch
		            m.dsuspdate = dsuspdate
		            m.cgroup    = cgroup
		            SELE tempprd
		            LOCATE FOR ddateclose = m.dsuspdate AND cgroup=m.cgroup
		            IF NOT FOUND()
		               LOOP
		            ENDIF
		            SELE susaudit
		            m.cyear     = cyear
		            m.cPeriod   = cPeriod
		            m.ctypeinv  = ctypeinv
		            m.cAction   = cAction
		            m.nGross    = nincome
		            m.nexpenses = nexpenses
		            m.nTaxes    = nTaxes
		            m.nNet      = nAmount
		            m.cwellid   = cwellid
		            m.dsuspdate = dsuspdate
		            m.cgroup    = cgroup
		
		            *
		            *  Check to see that the period is closed and that it was processed
		            *  this accounting year.
		            *
		            SELE tempprd
		            LOCATE FOR nrunno = m.nrunno AND crunyear = m.crunyear
		            IF NOT FOUND()
		               LOOP
		            ELSE
		               m.ddateclose = ddateclose
		            ENDIF
		
		            IF NOT INLIST(m.ctypeinv,'L','O','W')
		               SELE wellinv
		               IF m.cwellid = 'ALL'
		                  LOCATE FOR cownerid = m.cownerid
		               ELSE
		                  LOCATE FOR cownerid = m.cownerid AND cwellid = m.cwellid
		               ENDIF
		               IF FOUND()
		                  m.ctypeinv = ctypeinv
		               ENDIF
		            ENDIF
		
		            IF m.cAction = 'I'
		               m.nincome  = m.nincome - m.nGross
		               m.nexpense = m.nexpense - m.nexpenses
		               m.ninvsev  = m.ninvsev - m.nTaxes
		               m.ndeficit = m.ndeficit - m.nNet
		            ELSE
		               m.nincome  = m.nincome + m.nGross
		               m.nexpense = m.nexpense + m.nexpenses
		               m.ninvsev  = m.ninvsev + m.nTaxes
		               m.ndeficit = m.ndeficit + m.nNet
		            ENDIF
		            SELE histtab
		            REPL ndeficit  WITH m.ndeficit, ;
		               nincome     WITH m.nincome, ;
		               nexpense    WITH m.nexpense, ;
		               ninvsev     WITH m.ninvsev, ;
		               nnetcheck   WITH m.nnetcheck + m.ndeficit
		         ENDSCAN
		      ENDSCAN
		
		      STORE 0 TO m.nincome, m.nexpense, m.ninvsev, m.ndeficit, m.nnetcheck
		
		      SELE susaudit
		      SCAN FOR cownerid = m.cownerid AND cwellid = 'ALL'
		         m.cbatch    = cbatch
		         SELE tempprd
		         LOCATE FOR cdmbatch = m.cbatch
		         IF NOT FOUND()
		            LOOP
		         ENDIF
		         SELE susaudit
		         m.cyear     = cyear
		         m.cPeriod   = cPeriod
		         m.ctypeinv  = ctypeinv
		         m.cAction   = cAction
		         m.nGross    = nincome
		         m.nexpenses = nexpenses
		         m.nTaxes    = nTaxes+nTaxWith+nBackWith
		         m.nNet      = nAmount
		         m.cwellid   = cwellid
		         m.dsuspdate = dsuspdate
		         m.cgroup    = cgroup
		
		         IF m.nNet = m.nexpenses
		            m.nexpenses = ABS(m.nexpenses)
		         ENDIF
		
		         IF NOT INLIST(m.ctypeinv,'L','O','W')
		            SELE wellinv
		            IF m.cwellid = 'ALL'
		               LOCATE FOR cownerid = m.cownerid
		            ELSE
		               LOCATE FOR cownerid = m.cownerid AND cwellid = m.cwellid
		            ENDIF
		            IF FOUND()
		               m.ctypeinv = ctypeinv
		            ENDIF
		         ENDIF
		
		         IF INLIST(m.ctypeinv,'L','O')
		            m.crptgroup = 'R'
		         ELSE
		            m.crptgroup = 'W'
		         ENDIF
		
		         IF m.cAction = 'I'
		            m.nincome   = m.nincome - m.nGross
		            m.nexpense  = m.nexpense - m.nexpenses
		            m.ninvsev   = m.ninvsev - m.nTaxes
		            m.nnetcheck = m.nnetcheck - m.nNet
		         ELSE
		            m.nincome  = m.nincome + m.nGross
		            m.nexpense = m.nexpense + m.nexpenses
		            m.ninvsev  = m.ninvsev + m.nTaxes
		            m.nnetcheck = m.nnetcheck + m.nNet
		         ENDIF
		      ENDSCAN
		      m.cwellname = 'Suspense'
		      STORE 0 TO m.ntotbbl, m.nitotbbl, m.ntotmcf, m.nitotmcf
		      INSERT INTO histtab FROM MEMVAR
		   ENDSCAN
		ENDIF
		
		
		*
		*  Add total mcf and bbls to each investors dist record
		*
		SELECT welltab
		SCAN FOR cwellid <> 'ALL'
		   m.cwellid = cwellid
		   m.ntotmcf = ntotmcf
		   m.ntotbbl = ntotbbl
		   SELECT histtab
		   SCAN FOR cwellid = m.cwellid
		      REPLACE ntotmcf  WITH m.ntotmcf, ;
		         ntotbbl  WITH m.ntotbbl, ;
		         nitotmcf WITH m.ntotmcf, ;
		         nitotbbl WITH m.ntotbbl,  ;
		         cyear    WITH tcYear
		   ENDSCAN
		   SELECT welltab
		ENDSCAN
		
		CREATE CURSOR histinv ;
		   (cownerid     C(10), ;
		   cOwnname      C(60), ;
		   caddressa     C(60), ;
		   caddressb     C(60), ;
		   caddressc     C(60), ;
		   cTaxid        C(20), ;
		   ccomptax       C(20), ;
		   caddr1         C(40), ;
		   caddr2         C(40), ;
		   caddr3         C(40))
		index on cownerid tag cownerid
		
		SELECT histtab.cownerid, investor.cOwnname, investor.caddress1a AS caddressa, ;
		   investor.caddress1b AS caddressb, investor.ccity1 AS ccity, ;
		   investor.cstate1 AS cstate, investor.czip1 AS czip, ;
		   investor.cTaxid, m.caddr1 AS caddr, m.caddr2 AS caddr2, m.caddr3 AS caddr3, m.ccomptax AS ccomptax ;
		   FROM histtab, investor ;
		   WHERE histtab.cownerid = investor.cownerid ;
		   GROUP BY histtab.cownerid ;
		   INTO CURSOR tmpinv
		
		SELE tmpinv
		SCAN
		   SCATTER MEMVAR
		   IF EMPTY(m.caddressb)
		      m.caddressb = ALLT(m.ccity) + ' ' + ALLT(m.cstate) + ' ' + m.czip
		      m.caddressc = ''
		   ELSE
		      m.caddressc = ALLT(m.ccity) + ' ' + ALLT(m.cstate) + ' ' + m.czip
		   ENDIF
		   INSERT INTO histinv FROM MEMVAR
		ENDSCAN
		
		SELECT histinv
		SCAN
		   m.cownerid = cownerid
		   SELECT investor
		   SET ORDER TO cownerid
		   SEEK m.cownerid
		   IF FOUND() AND lchktosec = .T.
		      m.caddressa = caddress2a
		      IF NOT EMPTY(caddress2b)
		         m.caddressb = caddress2b
		      ELSE
		         m.caddressb = ALLT(ccity2) + ' ' + ALLT(cstate2) + ' ' + ALLT(czip2)
		         m.caddressc = ''
		      ENDIF
		      SELECT histinv
		      REPLACE caddressa WITH m.caddressa, ;
		         caddressb WITH m.caddressb, ;
		         caddressc WITH m.caddressc
		
		   ENDIF
		
		   STORE 0 TO m.nincome, m.ndeficit, m.ninvsev, m.nnetcheck
		
		
		   SELECT disbhist
		   SET ORDER TO invwell
		   SEEK (m.cownerid+'BEGBW')
		   IF FOUND()
		      m.nAmount  = nnetcheck
		      m.nincome  = nincome
		      m.nexpense = nexpense
		      SELECT histtab
		      APPEND BLANK
		      REPLACE cownerid WITH m.cownerid
		      REPLACE cwellid   WITH 'BEGBW'
		      REPLACE cwellname WITH 'Beginning Balance'
		      REPLACE nincome   WITH m.nincome
		      REPLACE nexpense  WITH m.nexpense
		      REPLACE nnetcheck WITH m.nAmount
		   ENDIF
		ENDSCAN
		
		SELECT histtab
		SCAN
		   IF THISFORM.chknoactivity.VALUE = .F. AND nnetcheck = 0 and nincome = 0 and nexpense = 0 and ninvsev = 0
		      DELE NEXT 1
		   ENDIF
		   m.cownerid = cownerid
		   m.cwellid  = cwellid
		   IF glHideComp
		      REPL nincome WITH nincome - ncompgath
		      REPL ncompgath WITH 0
		   ENDIF
		   IF EMPTY(nrevgas)
		      SELECT wellinv
		      SET ORDER TO wellinvid
		      IF SEEK(m.cwellid+m.cownerid+'WB')
		         m.nrevgas  = nrevgas
		         m.nrevoil  = nrevoil
		         m.nworkint = nworkint
		         SELECT histtab
		         REPLACE nrevgas WITH m.nrevgas, ;
		            nrevoil WITH m.nrevoil, ;
		            nworkint WITH m.nworkint, ;
		            cyear    WITH tcYear
		      ENDIF
		   ENDIF
		ENDSCAN
		
		SELE histinv
		SCAN
		   m.cownerid = cownerid
		   SELE histtab
		   LOCATE FOR cownerid = m.cownerid
		   IF NOT FOUND()
		      SELE histinv
		      DELE NEXT 1
		   ENDIF
		ENDSCAN
		
		SELECT histinv
		IF RECC() = 0
		   RETURN .F.
		ELSE
		   SET ORDER TO cownerid
		   SELECT histinv
		   SET RELATION TO cownerid INTO histtab
		   SET SKIP TO histtab
		   GO TOP
		ENDIF
		
	ENDPROC

	PROCEDURE calcroyalty		&& Calculates royalty interest summary
	ENDPROC

	PROCEDURE calcworking		&& Calculates working interest summary
	ENDPROC

	PROCEDURE fixaudit		&& Fix suspense history
	ENDPROC

	PROCEDURE Init
		IF DODEFAULT()
		   SELECT investor
		   SET ORDER TO cownerid
		   GO TOP
		
		   THISFORM.swrptlook1.txtBegName.VALUE = cownname
		   THISFORM.swrptlook1.txtBegID.VALUE = cownerid
		   GO BOTTOM
		
		   THISFORM.swrptlook1.txtEndName.VALUE = cownname
		   THISFORM.swrptlook1.txtEndID.VALUE = cownerid
		   thisform.chksuspense.value = .t.
		   thisform.chknoactivity.value = .f.
		ENDIF
		
	ENDPROC

	PROCEDURE report
		LPARAMETERS cbutton
		LOCAL lcAlias
		
		lcAlias = ALIAS()
		
		SELECT options
		glHideComp = lHideComp
		
		SELECT (lcAlias)
		
		DODEFAULT(cbutton)
	ENDPROC

	PROCEDURE opgReportOn.Click
		if this.value = 2  &&  Production Year
		   thisform.oMessage.Warning('Running this report based on production year may cause the totals NOT to match owner 1099 amounts.')
		endif
	ENDPROC

	PROCEDURE Swrptlook1.Swlookupbutton1.Click
		LOCAL lcList
		PRIV llOK
		
		llOK = .F.
		lcList = 'cownerid,csortfield'
		
		DO FORM ..\custom\picklist WITH 'Investor', lcList, thisform.swrptlook1.txtbegid.value, 2
		
		IF llOK
		   thisform.swrptlook1.txtBegId.value = cOwnerID
		   thisform.swrptlook1.txtBegName.value = cOwnname
		   thisform.swrptlook1.txtBegId.refresh()
		   thisform.swrptlook1.txtBegName.refresh()
		ENDIF   
		
		thisform.setnextcontrol(thisform.swrptlook1.txtBegId)
		
	ENDPROC

	PROCEDURE Swrptlook1.Swlookupbutton2.Click
		LOCAL lcList
		PRIV llOK
		
		llOK = .F.
		lcList = 'cownerid,csortfield'
		
		DO FORM ..\custom\picklist WITH 'Investor', lcList, thisform.swrptlook1.txtendid.value, 2
		
		IF llOK
		   thisform.swrptlook1.txtEndId.value = cOwnerID
		   thisform.swrptlook1.txtEndName.value = cOwnname
		   thisform.swrptlook1.txtEndId.refresh()
		   thisform.swrptlook1.txtEndName.refresh()
		ENDIF   
		
		thisform.setnextcontrol(thisform.swrptlook1.txtEndId)
		
	ENDPROC

	PROCEDURE swYear.Init
		DODEFAULT()
		swselect('sysctl')
		swselect('tax1099')
		
		SELECT TRANSFORM(YEAR(dacctdate))as cyear FROM sysctl WHERE EMPTY(cversion)  ;
		   AND cTypeClose = 'R' INTO CURSOR validyr ORDER BY cyear DESC GROUP BY cyear
		SELECT cyear FROM validyr INTO CURSOR tempyr ORDER BY cyear desc GROUP BY cyear
		
		lnItemID = 1
		IF _tally > 0
		   SELECT tempyr
		   SCAN
		*!*	      SELECT validyr
		*!*	      LOCATE FOR cyear == tempyr.cyear
		*!*	      IF FOUND()
		         this.AddListItem(tempyr.cyear,lnItemID,1)
		         lnItemID = lnItemID + 1
		*!*	      ENDIF    
		   ENDSCAN
		ELSE
		   this.AddListItem('None',1,1)   
		ENDIF 
		
		this.ListItemId = 1
		
		
	ENDPROC

ENDDEFINE
