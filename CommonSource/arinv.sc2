*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="arinv.scx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="2" />

	AutoOpenTables = .F.
	DataSource = .NULL.
	Height = 575
	InitialSelectedAlias = "invhdr"
	Left = 125
	Name = "Dataenvironment"
	Top = 300
	Width = 894

ENDDEFINE

DEFINE CLASS formarinv AS frmdatamanagerformcustom OF "..\..\custom\cforms.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Glmaint" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grouptran" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtdPostDate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Shape1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtCinvnum" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblCinvnum" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblCcustid" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtdinvdate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Swlookupbutton1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtCreference" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblCreference" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblDinvdate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblDpostdate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblDduedate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtNinvtot" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblDdiscdate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblNinvtot" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtNinvbal" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblNinvbal" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcName" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboTerms" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcItemId" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcItemDesc" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtnPrice" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtnQuantity" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtnExtension" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdInvdet" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdInvdet.Column1.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdInvdet.Column1.txtcItemId" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdInvdet.Column2.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdInvdet.Column2.txtcItemDesc" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdInvdet.Column3.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdInvdet.Column3.txtnPrice" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdInvdet.Column4.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdInvdet.Column4.txtnQuantity" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdInvdet.Column7.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdInvdet.Column7.txtnExtension" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdInvdet.Column5.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdInvdet.Column5.txtcAcctNo" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdInvdet.Column6.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdInvdet.Column6.txtcTaxable" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdInvdet.Column8.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdInvdet.Column8.txtcWellID" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdInvdet.Column9.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdInvdet.Column9.cmdDelete" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdInvdet.Column10.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdInvdet.Column10.Txttextboxcustom1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdLookItem" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdLookCOA" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdLookWell" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcDeptNo" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcPriceCode" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcWellName" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcAcctDesc" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcAcctNo" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcWellID" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtNsalestax" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblNsalestax" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtNpayments" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblNpayments" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="edtNotes" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkPrintNotes" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdLookDept" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboSalesTax" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcCustID" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdRecur" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkPrinted" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboTaxable" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtdDueDate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtdDiscDate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Swgroup1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblGroup" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: adddetail
		*m: calcext		&& Calculates the detail extension total
		*m: calctot		&& Calculates the Invoice Totals
		*m: getprice		&& Gets the price for the item based upon the price code passed.
		*m: lookcoa
		*m: report		&& Print the Invoice
		*m: setstate		&& Resets the form state for non bound controls so that the save button still works.
		*m: valterms		&& Validate Terms and Set Due Date and Disc Date based on the Terms
		*m: zerotot
		*p: ccustid
		*p: ldeptrequired
		*p: lexempt
		*p: lf5
		*p: lwellrequired
		*p: nextension
		*p: nprice
		*p: nquantity
	*</DefinedPropArrayMethod>

	Caption = "Sales/Invoicing"
	cdataenvironment = ("invoices")
	cdisplayname = 
	clistexpression = invhdr.cbatch
	cnavworkarea = Invhdr
	cworkarea = Invhdr
	DoCreate = .T.
	Height = 446
	HelpContextID = 339
	lexpliciteditmode = .F.
	lrememberposition = .F.
	lremembersize = .F.
	Name = "formarinv"
	Visible = .T.
	Width = 677
	cmdatamanager.Name = "cmdatamanager"
	cmdatamanager.TabIndex = 1
	cmdatamanager.ZOrderSet = 0
	cmlookupmanager.Name = "cmlookupmanager"

	ADD OBJECT 'cboSalesTax' AS cbocomboboxcustom WITH ;
		ControlSource = "invhdr.ctaxcode", ;
		Height = 20, ;
		Left = 342, ;
		Name = "cboSalesTax", ;
		TabIndex = 48, ;
		Top = 348, ;
		ZOrderSet = 52
		*< END OBJECT: ClassLib="..\..\custom\ccontrol.vcx" BaseClass="combobox" />

	ADD OBJECT 'cboTaxable' AS cbocomboboxcustom WITH ;
		BoundColumn = 2, ;
		ColumnCount = 1, ;
		FontName = "Arial", ;
		Height = 20, ;
		Left = 602, ;
		Name = "cboTaxable", ;
		TabIndex = 39, ;
		Top = 119, ;
		Width = 64, ;
		ZOrderSet = 56
		*< END OBJECT: ClassLib="..\..\custom\ccontrol.vcx" BaseClass="combobox" />

	ADD OBJECT 'cboTerms' AS cbocomboboxcustom WITH ;
		BoundColumn = 2, ;
		ControlSource = "Invhdr.cidterm", ;
		Height = 20, ;
		Left = 454, ;
		Margin = 2, ;
		Name = "cboTerms", ;
		RowSource = "", ;
		RowSourceType = 0, ;
		TabIndex = 11, ;
		Top = 33, ;
		Width = 156, ;
		ZOrderSet = 24
		*< END OBJECT: ClassLib="..\..\custom\ccontrol.vcx" BaseClass="combobox" />

	ADD OBJECT 'chkPrinted' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Printed", ;
		ControlSource = "invhdr.lprinted", ;
		Left = 612, ;
		Name = "chkPrinted", ;
		TabIndex = 7, ;
		Top = 6, ;
		ZOrderSet = 55
		*< END OBJECT: ClassLib="..\..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkPrintNotes' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Print Notes On Invoice", ;
		ControlSource = "invhdr.lprintnotes", ;
		Left = 45, ;
		Name = "chkPrintNotes", ;
		TabIndex = 47, ;
		Top = 396, ;
		ZOrderSet = 50
		*< END OBJECT: ClassLib="..\..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'cmdLookCOA' AS cmdcommandbuttoncustom WITH ;
		Caption = "Account", ;
		Height = 20, ;
		Left = 284, ;
		Name = "cmdLookCOA", ;
		TabIndex = 23, ;
		TabStop = .F., ;
		Top = 97, ;
		Width = 72, ;
		ZOrderSet = 32
		*< END OBJECT: ClassLib="..\..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdLookDept' AS cmdcommandbuttoncustom WITH ;
		Caption = "Dept", ;
		FontName = "Arial", ;
		FontSize = 8, ;
		Height = 20, ;
		Left = 446, ;
		Name = "cmdLookDept", ;
		TabIndex = 26, ;
		TabStop = .F., ;
		Top = 96, ;
		Width = 53, ;
		ZOrderSet = 42
		*< END OBJECT: ClassLib="..\..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdLookItem' AS cmdcommandbuttoncustom WITH ;
		Caption = "Item ID", ;
		Height = 20, ;
		Left = 17, ;
		Name = "cmdLookItem", ;
		TabIndex = 22, ;
		TabStop = .F., ;
		Top = 97, ;
		Width = 72, ;
		ZOrderSet = 31
		*< END OBJECT: ClassLib="..\..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdLookWell' AS cmdcommandbuttoncustom WITH ;
		Caption = " Well/Lease", ;
		Height = 20, ;
		Left = 360, ;
		Name = "cmdLookWell", ;
		TabIndex = 24, ;
		TabStop = .F., ;
		Top = 97, ;
		Width = 77, ;
		ZOrderSet = 33
		*< END OBJECT: ClassLib="..\..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdRecur' AS cmdcommandbuttoncustom WITH ;
		Caption = "\<Recurring Invoice", ;
		Height = 23, ;
		Left = 552, ;
		Name = "cmdRecur", ;
		TabIndex = 18, ;
		TabStop = .F., ;
		Top = 60, ;
		Width = 108, ;
		ZOrderSet = 54
		*< END OBJECT: ClassLib="..\..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'edtNotes' AS edteditboxcustom WITH ;
		ControlSource = "invhdr.mnotes", ;
		Height = 64, ;
		Left = 43, ;
		Name = "edtNotes", ;
		TabIndex = 46, ;
		Top = 331, ;
		Width = 233, ;
		ZOrderSet = 48
		*< END OBJECT: ClassLib="..\..\custom\ccontrol.vcx" BaseClass="editbox" />

	ADD OBJECT 'Glmaint' AS glmaint WITH ;
		Left = 12, ;
		Name = "Glmaint", ;
		Top = 60
		*< END OBJECT: ClassLib="..\custom\swgl.vcx" BaseClass="custom" />

	ADD OBJECT 'grdInvdet' AS grdgridcustom WITH ;
		ColumnCount = 10, ;
		cworkarea = invdet, ;
		Height = 157, ;
		lallowautoappend = .F., ;
		lallownew = .F., ;
		lcolumnmemory = .F., ;
		Left = 5, ;
		LinkMaster = "", ;
		Name = "grdInvdet", ;
		Panel = 1, ;
		RecordSource = "invdet", ;
		RecordSourceType = 1, ;
		RelationalExpr = "", ;
		TabIndex = 42, ;
		Top = 167, ;
		Width = 667, ;
		ZOrderSet = 30, ;
		Column1.ColumnOrder = 2, ;
		Column1.ControlSource = "invdet.citemid", ;
		Column1.FontSize = 8, ;
		Column1.Name = "Column1", ;
		Column1.Width = 64, ;
		Column10.ColumnOrder = 8, ;
		Column10.ControlSource = "invdet.cdeptno", ;
		Column10.Name = "Column10", ;
		Column10.Width = 62, ;
		Column2.ColumnOrder = 3, ;
		Column2.ControlSource = "invdet.citemdesc", ;
		Column2.FontSize = 8, ;
		Column2.Name = "Column2", ;
		Column2.Width = 166, ;
		Column3.ColumnOrder = 4, ;
		Column3.ControlSource = "invdet.nprice", ;
		Column3.FontSize = 8, ;
		Column3.Name = "Column3", ;
		Column3.Width = 57, ;
		Column4.ColumnOrder = 5, ;
		Column4.ControlSource = "invdet.nquantity", ;
		Column4.FontSize = 8, ;
		Column4.Name = "Column4", ;
		Column4.Width = 57, ;
		Column5.ColumnOrder = 9, ;
		Column5.Comment = "Column7", ;
		Column5.ControlSource = "invdet.nextension", ;
		Column5.FontSize = 8, ;
		Column5.Name = "Column7", ;
		Column5.Width = 67, ;
		Column6.ColumnOrder = 6, ;
		Column6.ControlSource = "invdet.cacctno", ;
		Column6.FontSize = 8, ;
		Column6.Name = "Column5", ;
		Column6.Width = 52, ;
		Column7.ColumnOrder = 10, ;
		Column7.ControlSource = "invdet.ctaxable", ;
		Column7.FontSize = 8, ;
		Column7.Name = "Column6", ;
		Column7.Width = 20, ;
		Column8.ColumnOrder = 7, ;
		Column8.ControlSource = "invdet.cunitno", ;
		Column8.FontSize = 8, ;
		Column8.Name = "Column8", ;
		Column8.Width = 66, ;
		Column9.ColumnOrder = 1, ;
		Column9.Name = "Column9", ;
		Column9.Sparse = .F., ;
		Column9.Width = 12
		*< END OBJECT: ClassLib="..\..\custom\ccontrol.vcx" BaseClass="grid" />

	ADD OBJECT 'grdInvdet.Column1.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "Item ID", ;
		FontSize = 8, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'grdInvdet.Column1.txtcItemId' AS txtquickfill WITH ;
		clistexpression = items.citemid, ;
		clistworkarea = items, ;
		FontName = "Arial", ;
		FontSize = 8, ;
		Left = 37, ;
		Name = "txtcItemId", ;
		Top = 33
		*< END OBJECT: ClassLib="..\common\cmgadget.vcx" BaseClass="textbox" />

	ADD OBJECT 'grdInvdet.Column10.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "Dept", ;
		FontSize = 8, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'grdInvdet.Column10.Txttextboxcustom1' AS txttextboxcustom WITH ;
		ControlSource = "invdet.cdeptno", ;
		Left = 26, ;
		Name = "Txttextboxcustom1", ;
		Top = 24
		*< END OBJECT: ClassLib="..\..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'grdInvdet.Column2.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "Description", ;
		FontSize = 8, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'grdInvdet.Column2.txtcItemDesc' AS txttextboxcustom WITH ;
		cworkarea = invdet, ;
		FontName = "Arial", ;
		FontSize = 8, ;
		Left = 100, ;
		Name = "txtcItemDesc", ;
		Top = 35
		*< END OBJECT: ClassLib="..\..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'grdInvdet.Column3.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "Price", ;
		FontSize = 8, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'grdInvdet.Column3.txtnPrice' AS txttextboxcustom WITH ;
		cworkarea = invdet, ;
		FontName = "Arial", ;
		FontSize = 8, ;
		Left = 14, ;
		Name = "txtnPrice", ;
		Top = 23
		*< END OBJECT: ClassLib="..\..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'grdInvdet.Column4.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "Quantity", ;
		FontSize = 8, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'grdInvdet.Column4.txtnQuantity' AS txttextboxcustom WITH ;
		cworkarea = invdet, ;
		FontName = "Arial", ;
		FontSize = 8, ;
		Left = 19, ;
		Name = "txtnQuantity", ;
		Top = 35
		*< END OBJECT: ClassLib="..\..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'grdInvdet.Column5.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "Account", ;
		FontSize = 8, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'grdInvdet.Column5.txtcAcctNo' AS txtquickfill WITH ;
		clistexpression = cacctno, ;
		clistworkarea = coa, ;
		FontName = "Arial", ;
		FontSize = 8, ;
		Left = 27, ;
		Name = "txtcAcctNo", ;
		Top = 33
		*< END OBJECT: ClassLib="..\common\cmgadget.vcx" BaseClass="textbox" />

	ADD OBJECT 'grdInvdet.Column6.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "Tax", ;
		FontSize = 8, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'grdInvdet.Column6.txtcTaxable' AS txttextboxcustom WITH ;
		ControlSource = "invdet.ctaxable", ;
		cworkarea = invdet, ;
		FontName = "Arial", ;
		FontSize = 8, ;
		InputMask = "! X", ;
		Left = 61, ;
		Name = "txtcTaxable", ;
		Top = 23
		*< END OBJECT: ClassLib="..\..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'grdInvdet.Column7.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "Extension", ;
		FontSize = 8, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'grdInvdet.Column7.txtnExtension' AS txttextboxcustom WITH ;
		ControlSource = "invdet.nextension", ;
		cworkarea = invdet, ;
		FontName = "Arial", ;
		FontSize = 8, ;
		Left = 57, ;
		Name = "txtnExtension", ;
		Top = 35
		*< END OBJECT: ClassLib="..\..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'grdInvdet.Column8.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "Well ID", ;
		FontSize = 8, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'grdInvdet.Column8.txtcWellID' AS txtquickfill WITH ;
		clistexpression = wells.cwellid, ;
		clistworkarea = wells, ;
		FontSize = 8, ;
		Left = 18, ;
		Name = "txtcWellID", ;
		Top = 24
		*< END OBJECT: ClassLib="..\common\cmgadget.vcx" BaseClass="textbox" />

	ADD OBJECT 'grdInvdet.Column9.cmdDelete' AS cmdcommandbuttoncustom WITH ;
		Caption = "X", ;
		FontBold = .T., ;
		ForeColor = 255,0,0, ;
		Left = 3, ;
		Name = "cmdDelete", ;
		Top = 24
		*< END OBJECT: ClassLib="..\..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'grdInvdet.Column9.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "", ;
		FontBold = .T., ;
		ForeColor = 255,0,0, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'Grouptran' AS grouptran WITH ;
		Height = 17, ;
		Left = 8, ;
		Name = "Grouptran", ;
		Top = 381, ;
		Width = 28
		*< END OBJECT: ClassLib="..\custom\swgl.vcx" BaseClass="custom" />

	ADD OBJECT 'Label1' AS lbllabelcustom WITH ;
		Caption = "Price", ;
		Height = 16, ;
		Left = 180, ;
		Name = "Label1", ;
		TabIndex = 27, ;
		Top = 99, ;
		Width = 26, ;
		ZOrderSet = 35
		*< END OBJECT: ClassLib="..\..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Label2' AS lbllabelcustom WITH ;
		Caption = "Quantity", ;
		Height = 16, ;
		Left = 239, ;
		Name = "Label2", ;
		TabIndex = 28, ;
		Top = 99, ;
		Width = 42, ;
		ZOrderSet = 36
		*< END OBJECT: ClassLib="..\..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Label3' AS lbllabelcustom WITH ;
		Caption = "Extension", ;
		Height = 16, ;
		Left = 550, ;
		Name = "Label3", ;
		TabIndex = 29, ;
		Top = 99, ;
		Width = 49, ;
		ZOrderSet = 37
		*< END OBJECT: ClassLib="..\..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblCcustid' AS lblfieldlabelcustom WITH ;
		Alignment = 0, ;
		Caption = "Customer ID", ;
		Height = 16, ;
		Left = 24, ;
		Name = "lblCcustid", ;
		TabIndex = 5, ;
		Top = 7, ;
		Width = 60, ;
		ZOrderSet = 9
		*< END OBJECT: ClassLib="..\..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblCinvnum' AS lblfieldlabelcustom WITH ;
		Alignment = 0, ;
		Caption = "Invoice No", ;
		Height = 16, ;
		Left = 24, ;
		Name = "lblCinvnum", ;
		TabIndex = 12, ;
		Top = 35, ;
		Width = 52, ;
		ZOrderSet = 8
		*< END OBJECT: ClassLib="..\..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblCreference' AS lblfieldlabelcustom WITH ;
		Caption = "Reference", ;
		Height = 16, ;
		Left = 199, ;
		Name = "lblCreference", ;
		TabIndex = 13, ;
		Top = 35, ;
		Width = 53, ;
		ZOrderSet = 13
		*< END OBJECT: ClassLib="..\..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblDdiscdate' AS lblfieldlabelcustom WITH ;
		AutoSize = .T., ;
		Caption = "Discount Date", ;
		Height = 16, ;
		Left = 352, ;
		Name = "lblDdiscdate", ;
		TabIndex = 21, ;
		Top = 66, ;
		Width = 69, ;
		ZOrderSet = 18
		*< END OBJECT: ClassLib="..\..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblDduedate' AS lblfieldlabelcustom WITH ;
		AutoSize = .T., ;
		Caption = "Due Date", ;
		Height = 16, ;
		Left = 192, ;
		Name = "lblDduedate", ;
		TabIndex = 20, ;
		Top = 66, ;
		Width = 46, ;
		ZOrderSet = 16
		*< END OBJECT: ClassLib="..\..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblDinvdate' AS lblfieldlabelcustom WITH ;
		AutoSize = .T., ;
		Caption = "Invoice Date", ;
		Height = 16, ;
		Left = 26, ;
		Name = "lblDinvdate", ;
		TabIndex = 19, ;
		Top = 66, ;
		Width = 61, ;
		ZOrderSet = 14
		*< END OBJECT: ClassLib="..\..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblDpostdate' AS lblfieldlabelcustom WITH ;
		Caption = "Post Date", ;
		Height = 16, ;
		Left = 462, ;
		Name = "lblDpostdate", ;
		TabIndex = 8, ;
		Top = 7, ;
		Width = 48, ;
		ZOrderSet = 15
		*< END OBJECT: ClassLib="..\..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblGroup' AS lbllabelcustom WITH ;
		Caption = "Group:", ;
		Left = 168, ;
		Name = "lblGroup", ;
		Top = 422
		*< END OBJECT: ClassLib="..\..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom1' AS lbllabelcustom WITH ;
		Caption = "Terms", ;
		Height = 16, ;
		Left = 411, ;
		Name = "Lbllabelcustom1", ;
		TabIndex = 15, ;
		Top = 35, ;
		Width = 32, ;
		ZOrderSet = 23
		*< END OBJECT: ClassLib="..\..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom2' AS lbllabelcustom WITH ;
		AutoSize = .T., ;
		Caption = "PC", ;
		Height = 16, ;
		Left = 110, ;
		Name = "Lbllabelcustom2", ;
		TabIndex = 25, ;
		Top = 99, ;
		Width = 15, ;
		ZOrderSet = 40
		*< END OBJECT: ClassLib="..\..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom3' AS lbllabelcustom WITH ;
		Caption = "Sales Tax", ;
		Height = 16, ;
		Left = 290, ;
		Name = "Lbllabelcustom3", ;
		TabIndex = 49, ;
		Top = 351, ;
		Width = 50, ;
		ZOrderSet = 47
		*< END OBJECT: ClassLib="..\..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom4' AS lbllabelcustom WITH ;
		Caption = "Notes", ;
		Left = 8, ;
		Name = "Lbllabelcustom4", ;
		TabIndex = 45, ;
		Top = 331, ;
		ZOrderSet = 49
		*< END OBJECT: ClassLib="..\..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblNinvbal' AS lblfieldlabelcustom WITH ;
		Caption = "Balance Due:", ;
		Height = 16, ;
		Left = 447, ;
		Name = "lblNinvbal", ;
		TabIndex = 55, ;
		Top = 422, ;
		Width = 66, ;
		ZOrderSet = 21
		*< END OBJECT: ClassLib="..\..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblNinvtot' AS lblfieldlabelcustom WITH ;
		Caption = "Subtotal:", ;
		Height = 16, ;
		Left = 469, ;
		Name = "lblNinvtot", ;
		TabIndex = 44, ;
		Top = 350, ;
		Width = 44, ;
		ZOrderSet = 19
		*< END OBJECT: ClassLib="..\..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblNpayments' AS lblfieldlabelcustom WITH ;
		Caption = "Payments:", ;
		Height = 16, ;
		Left = 461, ;
		Name = "lblNpayments", ;
		TabIndex = 53, ;
		Top = 398, ;
		Width = 52, ;
		ZOrderSet = 46
		*< END OBJECT: ClassLib="..\..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblNsalestax' AS lblfieldlabelcustom WITH ;
		Caption = "Sales Taxes:", ;
		Height = 16, ;
		Left = 448, ;
		Name = "lblNsalestax", ;
		TabIndex = 51, ;
		Top = 374, ;
		Width = 65, ;
		ZOrderSet = 44
		*< END OBJECT: ClassLib="..\..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Shape1' AS shape WITH ;
		BackColor = 255,255,128, ;
		Height = 74, ;
		Left = 5, ;
		Name = "Shape1", ;
		SpecialEffect = 0, ;
		Top = 93, ;
		Width = 667, ;
		ZOrderSet = 6
		*< END OBJECT: BaseClass="shape" />

	ADD OBJECT 'Swgroup1' AS swgroup WITH ;
		BoundColumn = 2, ;
		ControlSource = "invhdr.cgroup", ;
		Left = 219, ;
		lexcludeall = .T., ;
		Name = "Swgroup1", ;
		Top = 420
		*< END OBJECT: ClassLib="..\..\custom\swcontrol.vcx" BaseClass="combobox" />

	ADD OBJECT 'Swlookupbutton1' AS swlookupbutton WITH ;
		Left = 171, ;
		Name = "Swlookupbutton1", ;
		TabIndex = 3, ;
		Top = 5, ;
		ZOrderSet = 11
		*< END OBJECT: ClassLib="..\..\custom\swcontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'txtcAcctDesc' AS txttextboxcustom WITH ;
		BackColor = 192,192,192, ;
		Height = 20, ;
		Left = 306, ;
		lreadonly = .T., ;
		Margin = 1, ;
		Name = "txtcAcctDesc", ;
		TabIndex = 40, ;
		TabStop = .F., ;
		Top = 141, ;
		Width = 157, ;
		ZOrderSet = 39
		*< END OBJECT: ClassLib="..\..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcAcctNo' AS txtquickfill WITH ;
		clistexpression = cacctno, ;
		clistworkarea = coa, ;
		Height = 20, ;
		Left = 284, ;
		lrequired = .F., ;
		Margin = 1, ;
		MaxLength = 6, ;
		Name = "txtcAcctNo", ;
		TabIndex = 35, ;
		Top = 119, ;
		Width = 72, ;
		ZOrderSet = 41
		*< END OBJECT: ClassLib="..\common\cmgadget.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcCustID' AS txtquickfill WITH ;
		clistexpression = custown.ccustid, ;
		clistworkarea = custown, ;
		ControlSource = "invhdr.ccustid", ;
		Format = "K!", ;
		Height = 20, ;
		Left = 87, ;
		MaxLength = 10, ;
		Name = "txtcCustID", ;
		TabIndex = 2, ;
		Top = 5, ;
		Width = 80, ;
		ZOrderSet = 53
		*< END OBJECT: ClassLib="..\common\cmgadget.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcDeptNo' AS txtquickfill WITH ;
		clistexpression = cdeptno, ;
		clistworkarea = gldept, ;
		FontName = "Courier New", ;
		FontSize = 8, ;
		Height = 20, ;
		InputMask = "XXXXXXXX", ;
		Left = 438, ;
		Name = "txtcDeptNo", ;
		SelectOnEntry = .T., ;
		TabIndex = 37, ;
		Top = 119, ;
		Width = 68, ;
		ZOrderSet = 33
		*< END OBJECT: ClassLib="..\..\custom\cgadget.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtCinvnum' AS txttextboxcustom WITH ;
		ControlSource = "invhdr.cinvnum", ;
		Height = 20, ;
		Left = 87, ;
		lrequired = .T., ;
		Margin = 1, ;
		MaxLength = 10, ;
		Name = "txtCinvnum", ;
		TabIndex = 9, ;
		Top = 33, ;
		Width = 80, ;
		ZOrderSet = 7
		*< END OBJECT: ClassLib="..\..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcItemDesc' AS txttextboxcustom WITH ;
		Height = 20, ;
		Left = 17, ;
		Margin = 1, ;
		Name = "txtcItemDesc", ;
		TabIndex = 31, ;
		Top = 141, ;
		Width = 288, ;
		ZOrderSet = 26
		*< END OBJECT: ClassLib="..\..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcItemId' AS txtquickfill WITH ;
		clistexpression = items.citemid, ;
		clistworkarea = items, ;
		Format = "!", ;
		Height = 20, ;
		InputMask = "XXXXXXXXXX", ;
		Left = 17, ;
		Margin = 1, ;
		Name = "txtcItemId", ;
		TabIndex = 30, ;
		Top = 119, ;
		Width = 82, ;
		ZOrderSet = 25
		*< END OBJECT: ClassLib="..\..\custom\cgadget.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcName' AS txttextboxcustom WITH ;
		ControlSource = "", ;
		Height = 20, ;
		Left = 200, ;
		lreadonly = .F., ;
		Margin = 1, ;
		Name = "txtcName", ;
		ReadOnly = .T., ;
		TabIndex = 4, ;
		Top = 5, ;
		Width = 252, ;
		ZOrderSet = 22
		*< END OBJECT: ClassLib="..\..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcPriceCode' AS txttextboxcustom WITH ;
		Format = "K", ;
		Height = 20, ;
		InputMask = "X", ;
		Left = 103, ;
		Margin = 1, ;
		Name = "txtcPriceCode", ;
		TabIndex = 32, ;
		Top = 119, ;
		Width = 20, ;
		ZOrderSet = 34
		*< END OBJECT: ClassLib="..\..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtCreference' AS txttextboxcustom WITH ;
		ControlSource = "invhdr.creference", ;
		Height = 20, ;
		Left = 263, ;
		Margin = 1, ;
		MaxLength = 15, ;
		Name = "txtCreference", ;
		TabIndex = 10, ;
		Top = 33, ;
		Width = 113, ;
		ZOrderSet = 12
		*< END OBJECT: ClassLib="..\..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcWellID' AS txtquickfill WITH ;
		clistexpression = cwellid, ;
		clistworkarea = wells, ;
		Height = 20, ;
		Left = 360, ;
		lrequired = .F., ;
		Margin = 1, ;
		Name = "txtcWellID", ;
		TabIndex = 36, ;
		Top = 119, ;
		Width = 77, ;
		ZOrderSet = 42
		*< END OBJECT: ClassLib="..\common\cmgadget.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcWellName' AS txttextboxcustom WITH ;
		BackColor = 192,192,192, ;
		Height = 20, ;
		Left = 464, ;
		lreadonly = .T., ;
		Margin = 1, ;
		Name = "txtcWellName", ;
		TabIndex = 41, ;
		TabStop = .F., ;
		Top = 141, ;
		Width = 196, ;
		ZOrderSet = 38
		*< END OBJECT: ClassLib="..\..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtdDiscDate' AS dpk WITH ;
		ControlSource = "invhdr.dDiscDate", ;
		Height = 20, ;
		Left = 430, ;
		lmorethan90 = .T., ;
		Name = "txtdDiscDate", ;
		TabIndex = 17, ;
		Top = 64, ;
		Width = 75
		*< END OBJECT: ClassLib="..\..\custom\swdate.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtdDueDate' AS dpk WITH ;
		ControlSource = "invhdr.dduedate", ;
		Height = 20, ;
		Left = 246, ;
		lmorethan90 = .T., ;
		Name = "txtdDueDate", ;
		TabIndex = 16, ;
		Top = 64, ;
		Width = 75
		*< END OBJECT: ClassLib="..\..\custom\swdate.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtdinvdate' AS dpk WITH ;
		ControlSource = "invhdr.dinvdate", ;
		Height = 20, ;
		lallowblankdate = .T., ;
		Left = 92, ;
		lmorethan90 = .T., ;
		Name = "txtdinvdate", ;
		TabIndex = 14, ;
		Top = 64, ;
		Width = 75
		*< END OBJECT: ClassLib="..\..\custom\swdate.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtdPostDate' AS dpk WITH ;
		ControlSource = "invhdr.dpostdate", ;
		Height = 20, ;
		lcheckdate = .T., ;
		Left = 516, ;
		lmorethan90 = .T., ;
		Name = "txtdPostDate", ;
		TabIndex = 6, ;
		Top = 5, ;
		Width = 75
		*< END OBJECT: ClassLib="..\..\custom\swdate.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtnExtension' AS txttextboxcustom WITH ;
		Alignment = 3, ;
		ControlSource = "", ;
		FontSize = 8, ;
		Format = "K", ;
		Height = 20, ;
		InputMask = "999999999.99", ;
		Left = 508, ;
		Margin = 1, ;
		Name = "txtnExtension", ;
		TabIndex = 38, ;
		Top = 119, ;
		Value = 0, ;
		Width = 91, ;
		ZOrderSet = 29
		*< END OBJECT: ClassLib="..\..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtNinvbal' AS txttextboxcustom WITH ;
		ControlSource = "invhdr.ninvbal", ;
		Height = 20, ;
		InputMask = "9999999999.99", ;
		Left = 516, ;
		Margin = 1, ;
		Name = "txtNinvbal", ;
		TabIndex = 54, ;
		TabStop = .F., ;
		Top = 420, ;
		Width = 112, ;
		ZOrderSet = 20
		*< END OBJECT: ClassLib="..\..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtNinvtot' AS txttextboxcustom WITH ;
		ControlSource = "invhdr.nsubtotal", ;
		Height = 20, ;
		InputMask = "9999999999.99", ;
		Left = 516, ;
		lenabled = .T., ;
		Margin = 1, ;
		Name = "txtNinvtot", ;
		TabIndex = 43, ;
		TabStop = .F., ;
		Top = 348, ;
		Width = 112, ;
		ZOrderSet = 17
		*< END OBJECT: ClassLib="..\..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtNpayments' AS txttextboxcustom WITH ;
		ControlSource = "invhdr.npayments", ;
		Height = 20, ;
		InputMask = "999999999.99", ;
		Left = 516, ;
		Margin = 1, ;
		Name = "txtNpayments", ;
		TabIndex = 52, ;
		TabStop = .F., ;
		Top = 396, ;
		Width = 112, ;
		ZOrderSet = 45
		*< END OBJECT: ClassLib="..\..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtnPrice' AS txttextboxcustom WITH ;
		Alignment = 3, ;
		ControlSource = "", ;
		FontSize = 8, ;
		Height = 20, ;
		InputMask = "999999.9999", ;
		Left = 125, ;
		Margin = 1, ;
		Name = "txtnPrice", ;
		TabIndex = 33, ;
		Top = 119, ;
		Value = 0, ;
		Width = 77, ;
		ZOrderSet = 27
		*< END OBJECT: ClassLib="..\..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtnQuantity' AS txttextboxcustom WITH ;
		Alignment = 3, ;
		ControlSource = "", ;
		FontSize = 8, ;
		Height = 20, ;
		InputMask = "9999999.9999", ;
		Left = 204, ;
		Margin = 1, ;
		Name = "txtnQuantity", ;
		TabIndex = 34, ;
		Top = 119, ;
		Value = 0, ;
		Width = 77, ;
		ZOrderSet = 28
		*< END OBJECT: ClassLib="..\..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtNsalestax' AS txttextboxcustom WITH ;
		ControlSource = "invhdr.nsalestax", ;
		Height = 20, ;
		InputMask = "999999999.99", ;
		Left = 516, ;
		Margin = 1, ;
		Name = "txtNsalestax", ;
		TabIndex = 50, ;
		TabStop = .F., ;
		Top = 372, ;
		Width = 112, ;
		ZOrderSet = 43
		*< END OBJECT: ClassLib="..\..\custom\ccontrol.vcx" BaseClass="textbox" />
	
	PROCEDURE adddetail
		*
		*  Adds the detail line to the InvDet table
		*  Called from the valid of the Taxable textbox
		*
		
		LOCAL m.cItemId, m.cItemDesc, m.nQuantity, m.nPrice, m.cAcctNo, ;
		   m.cUnitno, m.cDeptNo, m.nExtension, m.cTaxable, m.cidinvd, ;
		   m.cItemDesc, m.cMeasure
		
		WITH THIS
		   m.cItemId    = .txtcItemId.VALUE
		   SELECT items  &&  Get the appropriate measure for this item and price code
		   SET ORDER TO cItemId
		   LOCATE FOR cItemId = m.cItemId
		   DO CASE
		      CASE .txtcPriceCode.VALUE = '1'
		         lcMeasure = 'cMeasure1'
		      CASE .txtcPriceCode.VALUE = '2'
		         lcMeasure = 'cMeasure2'
		      CASE .txtcPriceCode.VALUE = '3'
		         lcMeasure = 'cMeasure3'
		      CASE .txtcPriceCode.VALUE = '4'
		         lcMeasure = 'cMeasure4'
		      CASE .txtcPriceCode.VALUE = '5'
		         lcMeasure = 'cMeasure5'
		      OTHERWISE
		         lcMeasure = 'cMeasure1'
		   ENDCASE
		   m.cMeasure = ALLTRIM(&lcMeasure)
		   m.cItemDesc  = .txtcItemDesc.VALUE
		   m.nPrice     = .txtnPrice.VALUE
		   m.nQuantity  = .txtnQuantity.VALUE
		   IF m.goApp.lAMVersion = .T.
		      IF EMPTY(.txtcAcctno.VALUE) AND m.cItemId <> '*'
		         THISFORM.omessage.DISPLAY('An account number is required.  Please correct...')
		         THIS.setnextcontrol(THIS.txtcAcctno)
		         RETURN 0
		      ENDIF
		   ENDIF
		   m.cAcctNo    = .txtcAcctno.VALUE
		   m.nExtension = .txtnExtension.VALUE
		   IF m.nExtension = 0 AND ALLTRIM(m.cItemId) <> '*'
		      RETURN
		   ENDIF
		   m.cUnitno    = .txtcWellID.VALUE
		   IF EMPTY(m.cUnitno) AND THISFORM.lWellRequired
		      THISFORM.omessage.DISPLAY('%msgWellRequired')
		      THISFORM.setnextcontrol(.txtcWellID)
		      RETURN
		   ENDIF
		   m.cTaxable   = .cboTaxable.VALUE
		   m.cdeptno    = .txtcdeptNo.value
		   m.nDiscPct   = 0
		   m.nItemTax   = 0
		   m.nInterest  = 0
		   m.cPayee     = ' '
		   m.cTaxCode   = ' '
		   m.dExpDate   = {}
		   m.nDiscount  = 0
		   m.cExtDesc   = 0
		   .cmdatamanager.new('Invdet')
		   .cmdatamanager.REPLACE('Invdet', 'Citemid', m.cItemId)
		   .cmdatamanager.REPLACE('Invdet', 'Citemdesc', m.cItemDesc)
		   .cmdatamanager.REPLACE('Invdet', 'Nprice', m.nPrice)
		   .cmdatamanager.REPLACE('Invdet', 'Nquantity', m.nQuantity)
		   .cmdatamanager.REPLACE('Invdet', 'Cacctno', m.cAcctNo)
		   .cmdatamanager.REPLACE('Invdet', 'Nextension', m.nExtension)
		   .cmdatamanager.REPLACE('Invdet', 'cTaxable', m.cTaxable)
		   .cmdatamanager.REPLACE('Invdet', 'cUnitNo', m.cUnitno)
		   .cmdatamanager.REPLACE('Invdet', 'cMeasure', m.cMeasure)
		   .cmdatamanager.REPLACE('Invdet', 'cDeptNo', m.cDeptNo)
		   .txtcItemId.VALUE = ' '
		   .txtcItemDesc.VALUE = ' '
		   .txtnPrice.VALUE = 0
		   .txtnQuantity.VALUE = 0
		   .txtcPriceCode.VALUE = '1'
		   .txtcAcctno.VALUE = ' '
		   .txtnExtension.VALUE = 0
		   .cboTaxable.VALUE = 'E'
		   .txtcWellID.VALUE = ''
		   .txtcWellName.VALUE = ''
		   .txtcdeptno.Value = ''
		   .txtcItemId.SETFOCUS()
		   .CalcTot()
		   .setstate()
		   .REFRESH()
		ENDWITH
		
	ENDPROC

	PROCEDURE calcext		&& Calculates the detail extension total
		*
		*  Calculates the extension by using the price*quantity
		*
		thisform.txtnExtension.value = thisform.txtnPrice.value * thisform.txtnQuantity.value
		thisform.txtnExtension.refresh()
	ENDPROC

	PROCEDURE calctot		&& Calculates the Invoice Totals
		*
		*  Calculates the invoice totals
		*
		LOCAL lnSelect, lnRecno, lnTotal, lcBatch, lnRate, lnTaxable, lnSubTotal, lnBalance
		
		lcBatch = invdet.cbatch
		
		lnSelect = SELECT()
		SELECT invdet
		lnRecno = RECNO()
		SUM(nExtension) TO lnSubTotal FOR cbatch == lcBatch and not DELETED()
		SUM(nExtension) TO lnTaxable FOR cbatch == lcBatch AND cTaxable = 'T' and not DELETED()
		IF lnRecno <= RECCOUNT()
		   GOTO (lnRecno)
		ENDIF
		SELECT (lnSelect)
		
		IF NOT EMPTY(THISFORM.cboSalesTax.VALUE)
		   llTaxable = .T.
		   SELECT custs
		   SET ORDER TO ccustid
		   IF SEEK(invhdr.ccustid)
		      llTaxable = IIF(custs.ctaxstat='T',.T.,.F.)
		   ENDIF
		   IF llTaxable
		      SELECT salestx
		      IF SEEK(THISFORM.cboSalesTax.VALUE)
		         lnRate     = nTaxRate
		         lnSalesTax = ROUND(lnTaxable * (lnRate/100),2)
		         lnTotal    = lnSubTotal + lnSalesTax
		      ELSE
		         lnSalesTax = 0
		         lnTotal    = lnSubTotal
		      ENDIF
		   ELSE
		      lnSalesTax = 0
		      lnTotal    = lnSubTotal
		   ENDIF
		ELSE
		   lnSalesTax = 0
		   lnTotal    = lnSubTotal
		ENDIF
		
		lnBalance = lnTotal - invhdr.nPayments
		
		IF invhdr.nsalestax <> lnSalesTax
		   THIS.cmdatamanager.REPLACE('InvHdr', 'nSalestax', lnSalesTax)
		   THISFORM.txtnSalesTax.REFRESH()
		ENDIF
		IF invhdr.ninvtot <> lnTotal
		   THIS.cmdatamanager.REPLACE('InvHdr', 'nInvTot', lnTotal)
		   THISFORM.txtnInvTot.REFRESH()
		ENDIF
		IF invhdr.nsubtotal <> lnSubTotal
		   THIS.cmdatamanager.REPLACE('InvHdr', 'nSubtotal', lnSubTotal)
		ENDIF
		IF invhdr.nInvBal <> lnBalance
		   THIS.cmdatamanager.REPLACE('InvHdr', 'nInvBal', lnBalance)
		   THISFORM.txtnInvBal.REFRESH()
		ENDIF
		
		
		
		
	ENDPROC

	PROCEDURE Destroy
		ON KEY LABEL CTRL+P *
		ON KEY LABEL F5 *
		thisform.grouptran.unload()
		DODEFAULT()
	ENDPROC

	PROCEDURE getprice		&& Gets the price for the item based upon the price code passed.
		LPARAMETERS tcPriceCode
		
		ASSERT BETWEEN(tcPriceCode,'1','5')  MESSAGE 'Invalid Price Code Passed to GetPrice method'
		
		SELECT items
		IF SEEK(thisform.txtcItemId.value)
		   DO CASE
		      CASE tcPriceCode = '1'
		         thisform.txtnPrice.value = nPrice1
		         thisform.txtnPrice.Refresh()
		      CASE tcPriceCode = '2'
		         thisform.txtnPrice.value = nPrice2
		         thisform.txtnPrice.Refresh()   
		      CASE tcPriceCode = '3'
		         thisform.txtnPrice.value = nPrice3
		         thisform.txtnPrice.Refresh()   
		      CASE tcPriceCode = '4'
		         thisform.txtnPrice.value = nPrice4
		         thisform.txtnPrice.Refresh()   
		      CASE tcPriceCode = '5'
		         thisform.txtnPrice.value = nPrice5
		         thisform.txtnPrice.Refresh()   
		   ENDCASE
		ENDIF       
		         
	ENDPROC

	PROCEDURE Init
		ON KEY LABEL CTRL+P _SCREEN.ACTIVEFORM.REPORT()
		ON KEY LABEL F5 _SCREEN.ACTIVEFORM.zerotot()
		
		IF DODEFAULT()
		
		   SELECT invhdr
		   SET FILTER TO lBrine = .F.
		
		   IF m.goApp.lAMVersion = .F.
		      THIS.CAPTION = 'Modify JIB Invoices'
		      THISFORM.grdInvdet.Column5.txtcAcctNo.WIDTH = 0
		      THISFORM.grdInvdet.Column5.txtcAcctNo.VISIBLE = .F.
		      THISFORM.grdInvdet.Column2.txtcItemDesc.WIDTH = THISFORM.grdInvdet.Column2.txtcItemDesc.WIDTH+64
		      THISFORM.grdInvdet.Column2.WIDTH = THISFORM.grdInvdet.Column2.WIDTH + 64
		      THISFORM.grdInvdet.Column5.VISIBLE = .F.
		      THISFORM.grdInvdet.Column5.WIDTH = 0
		      THISFORM.txtcAcctDesc.VISIBLE = .F.
		      THISFORM.cmdLookCOA.VISIBLE = .F.
		      THISFORM.txtcAcctNo.VISIBLE = .F.
		      THISFORM.txtcWellName.LEFT = 365
		      THISFORM.lblcCustid.CAPTION = 'Owner ID'
		      THISFORM.txtcWellID.LEFT = 365
		      THISFORM.cmdLookWell.LEFT = 370
		      THISFORM.txtcWellName.WIDTH = 235
		      THISFORM.cmdrecur.VISIBLE = .F.
		   ENDIF
		
		ENDIF
		
	ENDPROC

	PROCEDURE list
		LPARAMETERS cworkarea
		LOCAL lcList
		PRIV llOK
		
		llOK = .T.
		
		IF THIS.flushcontrolbuffer() AND THIS.beforenav('Invhdr')
		   SELECT cinvnum as sortfield, PADL(ALLTRIM(invhdr.cinvnum),10,' ') as cinvnum, ;
		      invhdr.dinvdate, ;
		      invhdr.ccustid, ;
		      custown.ccustname, ;
		      invhdr.ninvtot, ;
		      invhdr.cbatch ;
		      FROM invhdr, custown ;
		      WHERE invhdr.ccustid = custown.ccustid ;
		      AND NOT lBrine  ;
		      INTO CURSOR tempinv1 ;
		      ORDER BY invhdr.cinvnum
		
		   IF _TALLY > 0
		      USE DBF('tempinv1') AGAIN IN 0 ALIAS tempinv EXCL
		      SET SAFETY OFF
		      SELECT tempinv
		      INDEX ON cbatch      TAG cbatch
		      INDEX ON UPPER(cinvnum)     TAG cinvnum
		      INDEX ON dinvdate    TAG dinvdate
		      INDEX ON ccustid     TAG ccustid
		      INDEX ON ccustname   TAG ccustname
		      INDEX ON ninvtot     TAG ninvtot
		      INDEX on ALLTRIM(sortfield) TAG sortfield
		
		      IF UPPER(m.goApp.cUser) = 'DEVELOPER'
		         lcList = 'cbatch\Batch,cinvnum\Invoice Number,dinvdate\Invoice Date,ccustid\Customer ID,ccustname\Customer Name,ninvtot\Invoice Total'
		         DO FORM ..\CUSTOM\picklist WITH 'tempinv', lcList, THISFORM.txtcinvnum.VALUE, 6, .T.,.T.
		      ELSE
		         lcList = 'sortfield\Inv No Search,cinvnum\Invoice Number,dinvdate\Invoice Date,ccustid\Customer ID,ccustname\Customer Name,ninvtot\Invoice Total'
		         DO FORM ..\CUSTOM\picklist WITH 'tempinv', lcList, THISFORM.txtcinvnum.VALUE, 6, .T.,.T.
		      ENDIF
		
		      IF llOK
		         lcBatch = tempinv.cbatch
		         SELECT invhdr
		         SET ORDER TO cbatch
		         SEEK(lcBatch)
		         THISFORM.cmdatamanager.setrecordposition('Invhdr')
		         THISFORM.REFRESH()
		      ENDIF
		   ELSE
		      THISFORM.oMessage.DISPLAY('There are no invoices in the sales/invoicing file.')
		   ENDIF
		
		   IF USED('tempinv1')
		      USE IN tempinv1
		   ENDIF
		   IF USED('tempinv')
		      USE IN tempinv
		   ENDIF
		ELSE
		   RETURN
		ENDIF
		
	ENDPROC

	PROCEDURE Load
		IF DODEFAULT()
		   THISFORM.cCustid = ''
		   
		   IF m.goapp.lAMVersion = .F.
		      CREATE CURSOR coa (cacctno c(6), cacctdesc c(30))
		   ENDIF 
		ENDIF
		
		
	ENDPROC

	PROCEDURE lookcoa
		LOCAL lcList
		PRIV llOK
		
		llOK = .F.
		lcList = 'cacctno/acctno,cacctdesc/acctdesc'
		
		DO FORM ..\custom\picklist WITH 'Coa', lcList, thisform.grdinvdet.column5.txtcAcctNo.value, 2
		
		IF llOK
		   thisform.grdinvdet.column5.txtcAcctNo.value = coa.cacctno
		   thisform.cmdatamanager.replace('invdet', 'cacctno', coa.cacctno)
		   thisform.grdinvdet.column5.txtcAcctNo.refresh()
		ENDIF   
		
		thisform.grdinvdet.column5.txtcAcctNo.SetFocus()
	ENDPROC

	PROCEDURE Print
		LPARAMETERS cText
		
		thisform.printinvoice()
	ENDPROC

	PROCEDURE report		&& Print the Invoice
		LOCAL m.caddr1, m.caddr2, m.caddr3, m.ccustname, m.shipln1, m.shipln2
		LOCAL m.shipln3, m.shipln4, m.paddr1, m.paddr2, m.paddr3, m.message
		LOCAL lnCount, lnX, loPreviewContainer, loReportListener
		LOCAL lcBatch, llReturn, lnInvType, loError
		
		llReturn = .T.
		
		TRY
		* Check on the existence of the application object
		* if it doesn't exist, we're running in development
		* mode and need to initialize the company address info.
		    IF TYPE('m.goApp') = 'O'
		        m.cProducer = m.goApp.cCompanyName
		        m.paddr1    = m.goApp.cAddress1
		        m.paddr2    = m.goApp.cAddress2
		        m.paddr3    = m.goApp.cAddress3
		    ELSE
		        m.cProducer = 'SherWare, Inc.'
		        m.paddr1    = 'PO Box 223'
		        m.paddr2    = 'Wooster, OH  44691'
		        m.paddr3    = ''
		    ENDIF
		
		*
		*  Get the invoice message
		*
		    SELECT aropt
		    GO TOP
		    m.cMessage = mInvMsg
		    lnInvType  = nInvType
		    IF lnInvType = 0
		        lnInvType = 1
		    ENDIF
		
		    STORE '' TO m.cShipAddr1, m.cShipAddr2, m.cShipAddr3, m.cAddr1, m.cAddr2, m.cAddr3
		* Get the count of invoices to be printed
		    SELECT invhdr
		    SCATTER MEMVAR MEMO
		    SELECT custs
		    SET ORDER TO ccustid
		    IF SEEK (m.ccustid)
		        m.ccustname = ccustname
		        m.caddr1    = cbaddr1 &&  Billing Address
		        IF EMPTY(cbaddr2)
		            m.caddr2 = ALLTRIM(cbcity) + ', ' + cbstate + '  ' + cbzip
		            m.caddr3 = ' '
		        ELSE
		            m.caddr2 = cbaddr2
		            m.caddr3 = ALLTRIM(cbcity) + ', ' + cbstate + '  ' + cbzip
		        ENDIF
		        IF NOT EMPTY(cAddress1)  &&  Shipping Address
		            m.cshipaddr1 = cAddress1
		            IF EMPTY(cAddress2)
		                m.cshipaddr2 = ALLTRIM(ccity) + ', ' + cstate + '  ' + czip
		                m.cshipaddr3 = ' '
		            ELSE
		                m.cshipaddr2 = cAddress2
		                m.cshipaddr3 = ALLTRIM(ccity) + ', ' + cstate + '  ' + czip
		            ENDIF
		        ELSE
		            m.cshipaddr1 = m.caddr1
		            m.cshipaddr2 = m.caddr2
		            m.cshipaddr3 = m.caddr3
		        ENDIF
		    ELSE
		        SELECT investor
		        SET ORDER TO cownerid
		        IF SEEK(m.ccustid)
		            m.ccustname = cownname
		            m.caddr1    = caddress1a
		            IF EMPTY(caddress1b)
		                m.caddr2 = ALLTRIM(ccity1) + ', ' + cstate1 + '  ' + czip1
		                m.caddr3 = ' '
		            ELSE
		                m.caddr2 = caddress1b
		                m.caddr3 = ALLTRIM(ccity1) + ', ' + cstate1 + '  ' + czip1
		            ENDIF
		            m.cshipaddr1 = m.caddr1
		            m.cshipaddr2 = m.caddr2
		            m.cshipaddr3 = m.caddr3
		        ENDIF
		    ENDIF
		
		    SELECT invhdr
		    lcBatch = cBatch
		
		    SELECT invdet.* FROM invdet INTO CURSOR tempdet WHERE cBatch = lcBatch
		
		
		*-- Create the preview container
		    DO (_REPORTPREVIEW) WITH loPreviewContainer
		
		*-- Change some of the defaults
		    loPreviewContainer.CAPTION          = 'Preview'
		    loPreviewContainer.ZoomLevel        = 5 && 100%
		    loPreviewContainer.ToolbarIsVisible = .T.
		
		*-- Create the Report Listener
		    loReportListener              = CREATEOBJECT('GroupListener')
		    loReportListener.LISTENERTYPE = 1 && Preview
		    loReportListener.PRINTJOBNAME = ALLTRIM('Invoice')
		
		*-- Assign the preview container to the listener
		    loReportListener.PREVIEWCONTAINER = loPreviewContainer
		
		*-- Run the report (with NOWAIT)
		    IF lnInvType = 2
		        REPORT FORM (m.goApp.cRptsFolder + 'arinv2.frx') TO PRINTER PROMPT OBJECT loReportListener && WINDOW (lcPreviewWindowName)
		    ELSE
		        REPORT FORM (m.goApp.cRptsFolder + 'arinv1.frx') TO PRINTER PROMPT OBJECT loReportListener && WINDOW (lcPreviewWindowName)
		    ENDIF
		
		*!*	loPreviewContainer.oForm.TOOLBAR.DOCK(0) && Dock toolbar at the top
		*!*	loPreviewContainer.oForm.WINDOWSTATE = 2 && Maximize preview
		
		
		    SELECT invdet
		    SET FILTER TO
		
		    IF THISFORM.oMessage.CONFIRM('Did Invoice Print Ok?')
		        IF THISFORM.chkprinted.VALUE = .F.  &&  Only replace if not already printed, so it doesn't bogusly ask if you want to save.
		            THISFORM.chkprinted.SET('value', .T.)  &&  Set value of checkbox, so it asks if you want to save.  Just like QB.
		        ENDIF
		*   THISFORM.RELEASE()  &&  Why close form after printing?  BH 05/22/08
		    ENDIF
		CATCH TO loError
		    llReturn = .F.
		    DO errorlog WITH 'Report', loError.LINENO, 'Sales/Invoicing', loError.ERRORNO, loError.MESSAGE, '', loError
		    MESSAGEBOX('Unable to process the report at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		          'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		RETURN llReturn
	ENDPROC

	PROCEDURE save
		LPARAMETERS cworkarealist
		
		thisform.txtccustid.setfocus()
		thisform.setnextcontrol(thisform.txtccustid)
		thisform.activatenextcontrol()
		
		DODEFAULT(cworkarealist)
		
	ENDPROC

	PROCEDURE setstate		&& Resets the form state for non bound controls so that the save button still works.
		this.lChanged = .T.
		m.goStateManager.RefreshAll('Form Edit')
	ENDPROC

	PROCEDURE valterms		&& Validate Terms and Set Due Date and Disc Date based on the Terms
		*
		*  Validates the terms code in the invhdr record and
		*  calculates the due date and disc date based upon
		*  the terms settings and the invhdr.dinvdate
		*
		LOCAL lcidTerm, lnNetDueIn, lnDiscIn, ldInvDate
		
		ldInvDate = thisform.txtdInvDate.VALUE
		*
		*  If the invoice date is empty, don't try to calculate
		*  the due date or discount date
		*
		IF EMPTY(ldInvDate)
		   RETURN
		ENDIF
		*
		*  Get the terms table primary key from the invoice header
		*  record.
		lcidTerm  = invhdr.cidterm
		
		*
		*  Lookup the terms code in the terms table to get the
		*  # of days the invoice is due in and the # of days
		*  set for discounts
		*
		SELECT terms
		SET ORDER TO cidTerm
		IF SEEK(lcidTerm)
		   lnNetDueIn = nNetDueIn
		   lnDiscIn   = nDiscIn
		   lnDiscPct  = nDiscPct
		ELSE
		*  Terms have not been selected for this invoice so assume
		*  COD.
		   STORE 0 TO lnNetDueIn, lnDiscIn, lnDiscPct
		ENDIF
		*
		*  Calculate and set the values of the due date and
		*  discount date fields
		*
		
		THISFORM.cmdatamanager.REPLACE('invhdr','dinvdate',ldInvDate)
		thisform.txtdinvdate.REFRESH()
		THISFORM.cmdatamanager.REPLACE('invhdr','dduedate',ldInvDate + lnNetDueIn)
		thisform.txtdduedate.REFRESH()
		THISFORM.cmdatamanager.REPLACE('invhdr','ddiscdate',ldInvDate + lnDiscIn)
		thisform.txtdDiscDate.REFRESH()
		
	ENDPROC

	PROCEDURE zerotot
		LOCAL lcDate
		LOCAL llReturn, loError
		*:Global cBatch, cCustid, cInvToken, cReference, cacctno, cidArpmd, cinvnum, dPmtDate, dinvdate
		*:Global drecdate, nAmtApp, nApplied, nCustBalance, nDiscTaken, nDiscTot, nPmtAmt, nUnApp
		
		llReturn = .T.
		
		TRY
		    IF THISFORM.oMessage.CONFIRM('Are you sure that you want to create a payment record for this invoice?')
		        DO FORM SOURCE\csgetdate WITH 'AP' TO lcDate
		        WAIT WIND NOWAIT 'Creating Payment Record...'
		        m.cBatch = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Batch')
		
		        SELECT arpmthdr  &&  Create Payment Header Record
		        SET ORDER TO cBatch
		        DO WHILE SEEK(m.cBatch)
		            m.cBatch = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Batch')
		        ENDDO
		        m.drecdate   = lcDate
		        m.cReference = invhdr.cReference
		        IF NOT EMPTY(aropt.ccashacct)
		            m.cacctno = aropt.ccashacct
		        ELSE
		            THISFORM.oMessage.DISPLAY('The cash account in the A/R options has not been defined.  Please correct before proceeding...')
		            llReturn = .f.
		            EXIT 
		        ENDIF
		        m.nDiscTot = 0
		        SELECT arpmtdet
		        SUM(namtapp) FOR cInvToken == invhdr.cBatch TO m.nTotPmts
		        SELECT arpmthdr
		        m.nPmtAmt      = invhdr.ninvtot - m.nTotPmts
		        m.nApplied     = m.nPmtAmt
		        m.nCustBalance = m.nPmtAmt
		        m.nUnApp       = 0
		        m.nDiscTot     = 0
		        m.cCustid      = invhdr.cCustid
		        m.dPmtDate     = lcDate
		
		        IF m.nPmtAmt <> 0
		            INSERT INTO arpmthdr FROM MEMVAR
		        ENDIF
		
		        m.cidArpmd = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.AR Payment Detail')
		        SELECT arpmtdet  &&  Create Payment Detail Record
		        SET ORDER TO cidArpmd
		        DO WHILE SEEK(m.cidArpmd)
		            m.cidArpmd = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Ar Payment Detail')
		        ENDDO
		        m.cinvnum    = invhdr.cinvnum
		        m.cCustid    = invhdr.cCustid
		        m.dinvdate   = invhdr.dinvdate
		        m.namtapp    = m.nPmtAmt
		        m.nDiscTaken = 0
		        m.nDiscTot   = 0
		        m.cInvToken  = invhdr.cBatch
		        IF m.namtapp <> 0
		            INSERT INTO arpmtdet FROM MEMVAR
		        ENDIF
		        SELE invhdr
		        REPLACE invhdr.ninvbal WITH 0, invhdr.npayments WITH invhdr.ninvtot
		        THISFORM.txtnInvBal.REFRESH()
		        THISFORM.txtnPayments.REFRESH()
		        THISFORM.setstate()
		        THISFORM.lF5 = .T.
		
		        SELE arpmthdr
		        = TABLEUPDATE(.T.)
		        SELE arpmtdet
		        = TABLEUPDATE(.T.)
		    ENDIF
		CATCH TO loError
		    llReturn = .F.
		    DO errorlog WITH 'ZeroTot', loError.LINENO, 'Sales/Invoicing', loError.ERRORNO, loError.MESSAGE, '', loError
		    MESSAGEBOX('Unable to process the report at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		          'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		RETURN llReturn
		
	ENDPROC

	PROCEDURE cboSalesTax.afterchange
		thisform.calctot()
	ENDPROC

	PROCEDURE cboSalesTax.Init
		LOCAL lnCount
		
		*
		*  Add the detail lines to the combo box
		*
		SELECT cTaxCode FROM salestx INTO ARRAY laTaxes ORDER BY cTaxCode
		lnCount = _tally
		
		this.addlistitem('NONE',1)
		
		IF lnCount > 0
		   FOR lnX = 1 TO lnCount
		       this.addlistitem(laTaxes[lnX],lnX+1)
		   ENDFOR
		ENDIF   
		
		sele invhdr
		DODEFAULT()
	ENDPROC

	PROCEDURE cboTaxable.Init
		this.addlistitem('Taxable',1,1)
		this.addlistitem('T',1,2)
		this.addlistitem('Exempt',2,1)
		this.addlistitem('E',2,2)
		this.listitemid = 1
		
		dodefault()
	ENDPROC

	PROCEDURE cboTaxable.LostFocus
		IF NOT INLIST(THIS.VALUE,'E','T')
		   THIS.VALUE = 'E'
		ENDIF
		
		THISFORM.txtcAcctDesc.VALUE = ''
		thisform.lchanged = .t.
		
		IF (LASTKEY() = 13 OR LASTKEY() = 9) AND not mDown()  &&  Tab or enter, but not a mouseclick
		   IF this.Parent.txtnextension.Value = 0
		      thisform.oMessage.Warning('You cannot add a zero-amount detail line.')
		   else
		      THISFORM.AddDetail()
		   endif
		endif
		
	ENDPROC

	PROCEDURE cboTerms.afterchange
		thisform.valterms()
		DODEFAULT()
	ENDPROC

	PROCEDURE cboTerms.Init
		LOCAL lnCount
		*
		*  Builds the data displayed in the combo list box
		*
		
		SELECT cTermDesc, cidTerm FROM terms INTO ARRAY laTerms ORDER BY cTermDesc
		lnCount = _tally
		
		This.addlistitem('NONE',1,1)
		This.addlistitem('',1,2)
		
		IF lnCount > 0
		   FOR lnX = 1 TO ALEN(laTerms,1)
		      this.addlistitem(laTerms[lnX,1],lnX+1,1)
		      this.addlistitem(laTerms[lnX,2],lnX+1,2)
		   ENDFOR   
		ENDIF   
		
		SELECT invhdr
		
		DODEFAULT()
	ENDPROC

	PROCEDURE cmdatamanager.afterchange
		LPARAMETERS cworkarea,cfield
		
		DO CASE
		   CASE UPPER(m.cField) + ',' $ 'NQUANTITY,NPRICE,'
		      m.nExtension = invdet.nQuantity * invdet.nPrice
		      RETURN this.Replace('InvDet', 'nExtension', m.nExtension )
		      
		   CASE UPPER(m.cField) == 'NEXTENSION'
		      thisform.Calctot()
		ENDCASE
		RETURN .T.      
	ENDPROC

	PROCEDURE cmdatamanager.afterdelete
		LPARAMETERS cworkarea
		
		DO CASE
		   CASE cWorkarea = 'Invhdr'
		
		   CASE cWorkArea = 'Invdet'   
		      * Recalculate the invoice totals
		      thisform.calctot()
		ENDCASE
		
		DODEFAULT(cworkarea)
	ENDPROC

	PROCEDURE cmdatamanager.afternav
		LPARAMETERS cworkarea
		
		IF m.cworkarea = 'Invhdr'
		   SELECT custownvend
		   LOCATE FOR cID = invhdr.cCustID
		   IF FOUND()
		      THISFORM.txtcName.VALUE = custownvend.cName
		   ELSE
		      THISFORM.txtcName.VALUE = ''
		   ENDIF
		   IF LEFT(invhdr.cinvtype,1) = 'C'
		      THISFORM.lwritelock = .T.
		   ELSE
		      THISFORM.lwritelock = .F.
		   ENDIF
		   IF UPPER(custownvend.cType) = 'CUSTOMER'      
		      SWSELECT('custs')
		      LOCATE FOR cCustID = custownvend.cID
		      IF FOUND()
		         IF cTaxStat = 'E'  &&  Not Taxable
		            THISFORM.lExempt = .T.
		         ELSE
		            THISFORM.lExempt = .F.
		         ENDIF
		      ENDIF
		   ENDIF
		   IF 'J' $ UPPER(invhdr.cInvType)
		      thisform.swgroup1.Visible = .t.
		      thisform.lblgroup.Visible = .t.
		   ELSE
		      thisform.swgroup1.Visible = .f.
		      thisform.lblgroup.Visible = .f.
		   ENDIF 
		   SELECT invhdr
		   THISFORM.setnextcontrol(THISFORM.txtccustid)
		ENDIF
		
		
		
	ENDPROC

	PROCEDURE cmdatamanager.afternew
		LPARAMETERS cworkarea
		LOCAL llFoundTerm, lcidTerm, lcBatch
		
		DO CASE
		   CASE UPPER(m.cWorkarea) = 'INVHDR'    && Invoice Headers
		      REPLACE cBatch  WITH THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Batch'), ;
		         cinvnum WITH 'Pending', ;
		         ninvtot WITH 0, ;
		         ninvbal WITH 0, ;
		         nsubtotal WITH 0, ;
		         nsalestax WITH 0, ;
		         dPostDate WITH DATE()
		*
		*  Look for a default terms record so that we can set the terms
		*  to that default
		      llFoundTerm = .F.
		      SELECT terms
		      SCAN FOR lDefTerm = .T.
		         lcidTerm = cidTerm
		         llFoundTerm = .T.
		         EXIT
		      ENDSCAN
		      
		*
		*  Look for a default Sales Tax record and set the form to use it
		*
		      llFoundSalesTax = .F.
		      SELECT salestx
		      SCAN FOR lDefTax = .T.
		         lcTaxCode = cTaxCode
		         llFoundSalesTax = .T.
		         EXIT
		      ENDSCAN
		            
		      SELECT invhdr
		      IF llFoundTerm  &&  Found default terms
		         REPLACE cidTerm WITH lcidTerm
		      ELSE
		         REPLACE cidTerm WITH ''
		      ENDIF
		      IF llFoundSalesTax  &&  Found default sales tax code
		         REPLACE cTaxCode WITH lcTaxCode
		      ELSE
		         replace cTaxCode WITH ''
		      ENDIF
		       
		      THISFORM.txtcPriceCode.value = '1'
		      thisform.txtnextension.value = 0
		      thisform.txtnquantity.value = 0
		      thisform.txtnprice.value = 0
		
		      THISFORM.setnextcontrol(THISFORM.txtccustid)
		
		
		   CASE UPPER(m.cWorkarea) = 'INVDET'
		      lcBatch = invhdr.cbatch
		      lcidInvd = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Invoice Detail')
		      SET DELETED OFF
		      SELECT invdet1
		      SET ORDER TO cidinvd
		      DO WHILE SEEK(lcidInvd)
		         lcidInvd = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Invoice Detail')
		      ENDDO
		      SET DELETED ON
		      SELECT invdet
		      REPLACE Invdet.cidInvd WITH lcidInvd, ;
		         invdet.cbatch  WITH lcBatch
		
		ENDCASE
		
		return(DODEFAULT(cworkarea))
	ENDPROC

	PROCEDURE cmdatamanager.beforedelete
		LPARAMETERS cworkarea
		LOCAL lcBatch
		LOCAL llReturn, loError
		
		llReturn = .T.
		
		TRY
		*  Make sure the period or year isn't closed
		    IF NOT THISFORM.glmaint.CheckPeriod(invhdr.dpostdate)
		        THISFORM.omessage.warning('Unable to delete this invoice. Either the fiscal year or period represented by this date has been closed.')
		        llReturn = .F.
		        EXIT
		    ENDIF
		
		    IF LEFT(invhdr.cinvtype, 1) = 'C'
		        THISFORM.omessage.DISPLAY('Credit memos cannot be deleted from here. You must delete the payment that created the credit.')
		        llReturn = .F.
		        EXIT
		    ENDIF
		
		*
		*  Check to see if payments have been applied to this invoice
		*
		    lcBatch = invhdr.cbatch
		
		    swselect('arpmtdet')
		    LOCATE FOR cinvtoken = lcBatch AND nAmtApp <> 0 AND cInvNum = invhdr.cInvNum
		    IF FOUND()
		        IF NOT THISFORM.omessage.CONFIRM('There are payments that have been applied to this invoice. ' + ;
		                  'Deleting it will break the link between the payment and invoice. Are you sure you want to delete it?')
		            llReturn = .F.
		            EXIT
		        ENDIF
		    ENDIF
		
		    IF m.cworkarea == 'Invhdr'
		* Remove the G/L Entry
		        lcBatch = invhdr.cbatch
		        THISFORM.glmaint.delbatch(lcBatch, 'AR')
		        TABLEUPDATE(.T.,.F.,'Glmaster')
		        
		*  Add items back into inventory
		        swselect('invdet')
		        SCAN FOR cbatch = lcBatch
		            swselect('items')
		            IF SEEK(invdet.cItemId)
		*  Add the quantity to qty on hand for this item
		                REPLACE nqtyonhand WITH nqtyonhand + invdet.nQuantity
		            ENDIF
		            TABLEUPDATE(.T.,.F.,'Items')
		        ENDSCAN
		        swselect('invhdr')
		    ENDIF
		CATCH TO loError
		    llReturn = .F.
		    DO errorlog WITH 'BeforeDelete', loError.LINENO, 'Sales/Invoicing', loError.ERRORNO, loError.MESSAGE, '', loError
		    MESSAGEBOX('Unable to process the invoice deletion at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		          'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		RETURN llReturn
		
	ENDPROC

	PROCEDURE cmdatamanager.beforeupdate
		LPARAMETERS cworkarealist
		LOCAL lcBatch, lcARAcct, lcTaxAcct, lcCOGSAcct, llReturn, lcSelect, lnRecNo
		LOCAL lnLastCost, llInvItem
		LOCAL lcInvAcct, lcInvNum, lcidTerm, lndiscpct, loError
		
		IF NOT THISFORM.lChanged
		    RETURN .F.
		ENDIF
		
		llReturn = .T.
		
		TRY
		    lcSelect = SELECT()
		
		* Initialize variables
		    lnLastCost = 0
		    llInvItem  = .F.
		
		* set coverage to temp.log
		
		*  Make sure the period or year isn't closed
		    IF NOT THISFORM.glmaint.CheckPeriod(invhdr.dpostdate)
		        THISFORM.omessage.warning('Unable to save this invoice. Either the fiscal year or period represented by this date has been closed.')
		        llReturn = .F.
		        EXIT
		    ENDIF
		
		    IF invhdr.nInvTot = 0 AND THISFORM.lF5 = .F.
		        WAIT WIND NOWAIT 'You cannot save a zero amount invoice....'
		        llReturn = .F.
		        EXIT
		    ENDIF
		
		    WAIT WINDOW NOWAIT 'Saving Changes, Please Wait.....'
		    THISFORM.lF5 = .F.
		
		    lcBatch = invhdr.cBatch
		
		* Check for a blank invoice date
		    IF EMPTY(THISFORM.txtdinvDate.VALUE)
		        THISFORM.omessage.warning('The invoice must have an invoice date. Please correct by entering a valid date.')
		        THISFORM.setnextcontrol(THISFORM.txtdinvDate)
		        llReturn = .F.
		        EXIT
		    ENDIF
		
		    SELECT invdet1  &&  Scan and add the items back into inventory, so when they get re-saved, it correctly removes them again
		    SCAN FOR cBatch = lcBatch
		        swselect('items')
		        LOCATE FOR cItemid == invdet1.cItemid
		        IF FOUND()
		            REPLACE nQtyOnHand WITH nQtyOnHand + invdet1.nQuantity
		            = TABLEUPDATE(.T., .T.)
		        ENDIF
		    ENDSCAN
		
		    swselect('invdet')
		    lnRecNo = RECNO()
		    SCAN FOR cBatch == lcBatch
		        swselect('items')
		        LOCATE FOR cItemid = invdet.cItemid AND cType = 'P'  &&  Only check if it's a product - BH 06/04/2008
		        IF FOUND()
		            IF NOT lNegQty AND (nQtyOnHand - invdet.nQuantity < 0)  &&  Don't let them save if this entry takes them to a negative qty, and they don't have that option on.
		                THISFORM.omessage.warning('This purchase will take the quantity on hand below zero.  One or more items on this invoice is not set to allow negative quantities, so this invoice cannot be saved.')
		                IF NOT THISFORM.cmdatamanager.isnew('invhdr')
		                    REPLACE nQtyOnHand WITH nQtyOnHand - invdet.nQuantity  &&  Take the quantity back off, since we added it above.
		                    = TABLEUPDATE(.T.)
		                ENDIF
		                llReturn = .F.
		                EXIT 
		            ENDIF
		        ENDIF
		    ENDSCAN
		
		    IF NOT llReturn
		       EXIT
		    ENDIF 
		*
		*  Delete the G/L journal entries for this invoice
		*
		    THISFORM.glmaint.delbatch(lcBatch, 'AR')
		
		
		*
		*  Plug in the discount available number in the header
		*
		    IF THISFORM.txtdinvDate.VALUE <> THISFORM.txtdDiscDate.VALUE  &&  If there is a discount available
		        lcidTerm = invhdr.cidterm
		        swselect('terms')
		        LOCATE FOR cidterm = invhdr.cidterm
		        IF FOUND()
		            lndiscpct = terms.ndiscpct / 100
		            REPLACE invhdr.nDiscTot WITH invhdr.nInvTot * lndiscpct
		        ENDIF
		    ENDIF
		
		*
		*  Set the source for this entry
		*
		    THISFORM.glmaint.cSource = 'AR'
		
		* Get the inventory account
		    swselect('glopt')
		    lcInvAcct  = cInventory
		
		* Get the default A/R account
		    swselect('aropt')
		    GO TOP
		    lcARAcct   = cARAcct
		    lcTaxAcct  = cTaxAcct
		    lcCOGSAcct = cCOGSAcct
		
		* Get the JIB Receivable account
		   swselect('options')
		   GO top
		   lcJIBReceivable = cJIBAcct
		   
		*  If it's the AM, check to see if this is an owner.  If it is, make it a JIB invoice.
		*  If it's also a customer ID, ask which one it should be created as - type J or A
		    IF m.goapp.lAMVersion
		        swselect('investor')
		        LOCATE FOR cownerid = invhdr.ccustid
		        IF FOUND()
		            swselect('custs')
		            LOCATE FOR ccustid = invhdr.ccustid
		            IF FOUND()
		                IF THISFORM.omessage.CONFIRM("You have both a customer and an owner with this ID code. Is this an owner JIB invoice? Answering 'No' will record it as a customer invoice.")
		                    THISFORM.cmdatamanager.REPLACE('invhdr', 'cinvtype', 'J')
		                    lcARAcct = lcJIBReceivable
		                ELSE
		                    THISFORM.cmdatamanager.REPLACE('invhdr', 'cinvtype', 'I')
		                ENDIF
		            ELSE
		*  No matching customer ID, so make it a type J
		                THISFORM.cmdatamanager.REPLACE('invhdr', 'cinvtype', 'J')
		                lcARAcct = lcJIBReceivable
		            ENDIF
		        ELSE
		            THISFORM.cmdatamanager.REPLACE('invhdr', 'cinvtype', 'I')
		        ENDIF
		    ENDIF
		
		* Get the next invoice number
		    lcInvNum   = invhdr.cInvNum
		
		    IF invhdr.cInvNum = 'Pending'
		        lcInvNum = TRANSFORM(VAL(THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Invoice Number')))
		        SELECT invhdr1
		        SET ORDER TO cInvNum
		        DO WHILE (SEEK(lcInvNum))
		            lcInvNum = TRANSFORM(VAL(THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Invoice Number')))
		        ENDDO
		        THIS.REPLACE('Invhdr', 'Cinvnum', lcInvNum)
		        THISFORM.txtcInvNum.REFRESH()
		        lcInvNum = TRANSFORM(VAL(invhdr.cInvNum) + 1)
		        swselect('aropt')
		        REPLACE aropt.cInvNum WITH lcInvNum
		    ENDIF
		
		*
		*  Create the G/L journal entries for this invoice
		*
		
		*  A/R entry
		    THISFORM.glmaint.cBatch     = lcBatch
		    THISFORM.glmaint.dGLDate    = invhdr.dpostdate
		    THISFORM.glmaint.cReference = 'Inv: ' + ALLTRIM(invhdr.cInvNum)
		    THISFORM.glmaint.cDesc      = THISFORM.txtcName.VALUE
		    THISFORM.glmaint.cAcctNo    = lcARAcct
		    THISFORM.glmaint.cId        = invhdr.ccustid
		    THISFORM.glmaint.nAmount    = invhdr.nInvTot
		    THISFORM.glmaint.mNotes     = 'invhdr.mnotes'
		    THISFORM.glmaint.cBunch     = THISFORM.cBunch
		    THISFORM.glmaint.cUnitNo    = ''
		    THISFORM.glmaint.cDeptNo    = ''
		
		    THISFORM.glmaint.updatebatch()
		
		*  Sales Tax Entry
		    IF invhdr.nSalesTax <> 0
		        THISFORM.glmaint.cBatch     = lcBatch
		        THISFORM.glmaint.dGLDate    = invhdr.dpostdate
		        THISFORM.glmaint.cReference = 'Inv: ' + ALLTRIM(invhdr.cInvNum)
		        THISFORM.glmaint.cDesc      = THISFORM.txtcName.VALUE
		        THISFORM.glmaint.cAcctNo    = lcTaxAcct
		        THISFORM.glmaint.cId        = invhdr.ccustid
		        THISFORM.glmaint.nAmount    = invhdr.nSalesTax * -1     && Assume to be credit
		        THISFORM.glmaint.updatebatch()
		    ENDIF
		
		*  Detail Lines
		    swselect('invdet')
		    lnRecNo = RECNO()
		    SCAN FOR cBatch == lcBatch
		        THISFORM.glmaint.cBatch     = lcBatch
		        THISFORM.glmaint.dGLDate    = invhdr.dpostdate
		        THISFORM.glmaint.cReference = 'Inv: ' + ALLTRIM(invhdr.cInvNum)
		        THISFORM.glmaint.cDesc      = invdet.citemdesc
		        THISFORM.glmaint.cAcctNo    = invdet.cAcctNo
		        THISFORM.glmaint.cId        = invhdr.ccustid
		        THISFORM.glmaint.cUnitNo    = invdet.cUnitNo
		        THISFORM.glmaint.cDeptNo    = invdet.cDeptNo
		        THISFORM.glmaint.nAmount    = invdet.nExtension * -1     && Assume to be credit
		        THISFORM.glmaint.updatebatch()
		
		*
		*  Deduct items from inventory
		*
		        IF m.goapp.lAMVersion  &&  Only do this for the AM - BH 11/06/2008
		            swselect('items')
		            IF SEEK(invdet.cItemid)
		                DO CASE
		                    CASE cType = 'P'
		                        llInvItem = .T.
		                    OTHERWISE
		                        llInvItem = .F.
		                ENDCASE
		
		                REPLACE nQtyOnHand WITH nQtyOnHand - invdet.nQuantity, nLastCost WITH invdet.nPrice
		
		*
		*  If we have an inventory item, build the cost of goods journal entry
		*
		                IF llInvItem
		*  Check to make sure the COGS account is not blank and that we have
		*  a current cost.  Both of these are necessary to post to COGS.
		                    swselect('items')
		                    IF SEEK(invdet.cItemid)
		                        IF NOT EMPTY(items.cCOGSAcct) AND items.ncurcost <> 0
		                            THISFORM.glmaint.cDesc   = invdet.citemdesc
		                            THISFORM.glmaint.cAcctNo = items.cCOGSAcct
		                            THISFORM.glmaint.nAmount = items.ncurcost * invdet.nQuantity
		                            THISFORM.glmaint.updatebatch()
		
		                            THISFORM.glmaint.cAcctNo = lcInvAcct
		                            THISFORM.glmaint.nAmount = (items.ncurcost * invdet.nQuantity) * -1
		                            THISFORM.glmaint.updatebatch()
		                        ENDIF
		                    ENDIF
		                ENDIF
		
		            ELSE
		                llInvItem = .F.
		            ENDIF
		        ENDIF
		        SELECT invdet
		
		    ENDSCAN
		    swselect('invdet')
		    GOTO TOP
		
		*
		*  Check to make sure the batch balances
		*
		    llReturn = THISFORM.glmaint.chkBalance()
		
		    IF llReturn
		        WAIT WINDOW NOWAIT 'Changes Saved....' TIMEOUT 2
		    ELSE
		        WAIT WIND 'The Batch Was Not In Balance...Unable to save invoice.'
		    ENDIF
		
		    SELECT (lcSelect)
		CATCH TO loError
		    llReturn = .F.
		    DO errorlog WITH 'BeforeUpdate', loError.LINENO, 'Sales/Invoicing', loError.ERRORNO, loError.MESSAGE, '', loError
		    MESSAGEBOX('Unable to process the invoice at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		          'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		RETURN llReturn
		
		
		
		
		
	ENDPROC

	PROCEDURE cmdLookCOA.Click
		LOCAL lcList
		PRIV llOK
		
		llOK = .T.
		lcList = 'cacctno/acctno,cacctdesc/acctdesc'
		
		DO FORM ..\custom\picklist WITH 'Coa', lcList, thisform.txtcacctno.value, 2
		
		IF llOK
		   thisform.txtcAcctNo.value   = coa.cacctno
		   thisform.txtcAcctDesc.value = coa.cAcctDesc
		   thisform.txtcAcctNo.refresh()
		   thisform.txtcAcctDesc.refresh()
		ENDIF   
		
		thisform.setnextcontrol(thisform.txtcAcctNo)
		
		SELECT invhdr
	ENDPROC

	PROCEDURE cmdLookDept.Click
		LOCAL lcList
		PRIV llOK
		
		llOK = .T.
		
		lcList = 'cdeptno\Dept No,cdeptdesc\Department Description'
		
		DO FORM ..\custom\picklist WITH 'gldept', lcList, thisform.txtcdeptno.value, 2,.f.,.t.
		
		IF llOK
		   thisform.txtcDeptNo.value = gldept.cdeptno
		   thisform.txtcDeptNo.refresh()
		ENDIF   
		
		thisform.txtcDeptNo.SetFocus()
		
		
		
	ENDPROC

	PROCEDURE cmdLookItem.Click
		LOCAL lcList
		PRIV llOK
		
		llOK   = .T.
		lcList = 'citemid,citemdesc,cvendorid'
		
		DO FORM ..\custom\picklist WITH 'Items', lcList, thisform.txtcitemid.value, 3
		
		IF llOK
		   thisform.txtcItemId.value = Items.citemid
		   thisform.txtcItemDesc.value = items.cItemDesc
		   thisform.txtcItemId.refresh()
		   thisform.txtcItemDesc.refresh()
		   thisform.txtcAcctNo.value = items.cDefAcct
		   thisform.txtcAcctNo.Refresh()
		ENDIF   
		
		thisform.setnextcontrol(thisform.txtcItemID)
		
		SELECT invhdr
	ENDPROC

	PROCEDURE cmdLookWell.Click
		LOCAL lcList
		PRIV llOK
		
		llOK = .T.
		
		lcList = 'cunitno\Unit No,cname\Name,ctype\Type'
		set safety off
		sele allunits
		index on cunitno tag cunitno
		index on cname tag cname
		set safety on
		
		DO FORM ..\Custom\PickList WITH 'Allunits', lcList, thisform.txtcwellid.value, 3, .f., .t.
		
		IF llOK
		   thisform.txtcwellid.value   = allunits.cunitno
		   thisform.txtcWellName.value = allunits.cname
		   thisform.txtcWellID.refresh()
		   thisform.txtcWellName.refresh()
		ENDIF   
		
		thisform.setnextcontrol(Thisform.txtcwellid)
		
		ON KEY LABEL F10 _screen.activeform.Save()
		ON KEY LABEL CTRL+A _screen.activeform.New()
		ON KEY LABEL CTRL+D _screen.activeform.Delete()
		ON KEY LABEL CTRL+L _screen.activeform.List()
		
	ENDPROC

	PROCEDURE cmdRecur.Click
		LOCAL lcList
		PRIV llOK
		
		llOK = .T.
		
		IF USED('tempar1')
		   USE IN tempar1
		ENDIF
		
		IF USED('tempar')
		   USE IN tempar
		ENDIF
		
		SELECT invrech.ccustid, ; 
		       invrech.creference, ;
		       invrech.ninvtot, ;
		       custown.ccustname, ;
		       invrech.cbatch ;
		   FROM invrech, custown;
		   WHERE invrech.ccustid = custown.ccustid ;
		   INTO CURSOR tempar1 ;
		   ORDER BY invrech.ccustid
		
		IF _tally > 0
		      
		   USE DBF('tempar1') AGAIN IN 0 ALIAS tempar EXCL
		   
		   SELECT tempar
		   INDEX ON ccustid  TAG ccustid
		   INDEX ON creference TAG creference
		   INDEX ON ccustname  TAG ccustname
		   
		   lcList = 'ccustid\Customer ID,ccustname\Customer Name,creference\Reference,ninvtot\Invoice Total'
		   
		   DO FORM ..\custom\picklist WITH 'tempar', lcList, 'cbatch', 4, .T., .t.
		
		   IF llOK
		      lcBatch = tempar.cBatch
		      SELECT invrech
		      SET ORDER TO cBatch
		      SEEK(lcBatch)
		      SCATTER MEMVAR
		      m.cInvNum = 'Pending'
		      m.cBatch = invhdr.cBatch
		      jcBatch  = m.cBatch
		      m.nInvBal = m.nInvTot
		      m.nSubTotal = m.nInvTot
		      SELECT invhdr
		      GATHER MEMVAR MEMO
		   
		      SELECT invrecd
		      SCAN FOR cBatch = lcBatch
		         SCATTER MEMVAR
		         m.cidinvd = thisform.oregistry.incrementcounter('%Shared.Counters.Invoice Detail')
		         SET DELETED OFF
		         SELECT invdet1
		         SET ORDER TO cidinvd
		         DO WHILE SEEK(m.cidinvd)
		            m.cidinvd = thisform.oregistry.incrementcounter('%Shared.Counters.Invoice Detail')
		         ENDDO   
		         SET DELETED ON
		         m.cBatch = jcBatch
		         INSERT INTO invdet FROM MEMVAR
		      ENDSCAN
		      SELECT invhdr
		      thisform.cmdatamanager.setrecordposition('invhdr')
		      thisform.cmdatamanager.setrecordposition('invdet')
		      thisform.refresh()
		      thisform.calctot()   
		   ENDIF      
		ELSE
		   thisform.omessage.display('There are no recurring invoices defined.')   
		ENDIF   
		
		ON KEY LABEL F10 _screen.activeform.Save()
		ON KEY LABEL CTRL+A _screen.activeform.New()
		ON KEY LABEL CTRL+D _screen.activeform.Delete()
		ON KEY LABEL CTRL+L _screen.activeform.List()
		
	ENDPROC

	PROCEDURE cmdRecur.When
		RETURN thisform.cmdatamanager.isnew('Invhdr')
		
	ENDPROC

	PROCEDURE Glmaint.delbatch
		LPARAMETERS tcbatch, tcJournal
		
		IF TYPE('tcBatch') <> 'C'
		   WAIT WIND NOWAIT 'The batch number passed to delete batch was invalid...'
		   RETURN
		ENDIF
		
		DODEFAULT(tcBatch, tcJournal)   
	ENDPROC

	PROCEDURE grdInvdet.AfterRowColChange
		LPARAMETERS ncol
		
		DODEFAULT(nCol)
		thisform.calctot()
	ENDPROC

	PROCEDURE grdInvdet.Column1.txtcItemId.Valid
		IF NOT EMPTY(THIS.VALUE) AND THIS.VALUE <> '*'
		   SELECT items
		   IF SEEK(THIS.VALUE)
		      This.parent.parent.Column2.txtcItemDesc.set('VALUE',cItemDesc)
		   ENDIF
		ENDIF
	ENDPROC

	PROCEDURE grdInvdet.Column5.txtcAcctNo.Valid
		IF DODEFAULT()
		   IF NOT EMPTY(THIS.VALUE)
		      SELECT coa
		      SET ORDER TO acctno
		      IF SEEK(THIS.VALUE)
		         IF lTitle OR lTotalAcct
		            THISFORM.omessage.warning('%msgAcctDetail')
		            RETURN 0
		         ENDIF
		         thisform.lWellRequired = lacctunit
		         thisform.lDeptRequired = lacctdept
		      ENDIF
		   ENDIF
		ENDIF
	ENDPROC

	PROCEDURE grdInvdet.Column6.txtcTaxable.Valid
		DODEFAULT()
		
		IF THIS.VALUE <> 'T' AND THIS.VALUE <> 'E' &&  Don't let it be something other than taxable or exempt
		   THIS.SET('value','E')
		ENDIF
		
		
	ENDPROC

	PROCEDURE grdInvdet.Column9.cmdDelete.Click
		DODEFAULT()
		
		IF thisform.omessage.confirm('Delete this detail line?')
		   SELECT invdet
		   DELETE NEXT 1
		   GO top
		   thisform.Refresh()  &&  Not sure why doing it twice works, but it does, so don't mess with it anymore... - BH 3-24-06
		   thisform.calctot()
		   thisform.Refresh()
		   thisform.calctot()
		ENDIF  
	ENDPROC

	PROCEDURE Swlookupbutton1.Click
		LOCAL lcList
		PRIV llOK
		
		llOK = .T.
		lcList = 'ccustid,ccustname,ctype'
		
		SELECT custown
		SET SAFETY OFF
		INDEX ON ccustid TAG ccustid
		INDEX ON ccustname TAG ccustname
		INDEX ON ctype TAG ctype
		
		DO FORM ..\custom\picklist WITH 'custown', lcList, thisform.txtccustid.value, 3
		
		IF llOK
		   IF custown.ccustid <> invhdr.ccustid
		      THISFORM.cmdatamanager.REPLACE('invhdr','ccustid',custown.ccustid)
		      THISFORM.txtcCustid.REFRESH()
		      THISFORM.txtcName.VALUE = custown.ccustname
		      THISFORM.txtcName.REFRESH()
		      THISFORM.lchanged = .T.
		      IF NOT EMPTY(custown.cidterm)
		         THISFORM.cmdatamanager.REPLACE('invhdr','cidterm',custown.cidterm)
		         THISFORM.cboTerms.REFRESH()
		      ELSE
		         THISFORM.cmdatamanager.REPLACE('invhdr','cidterm','')
		         THISFORM.cboTerms.REFRESH()
		      ENDIF
		   ENDIF
		ENDIF
		
		THISFORM.txtcCustId.SETFOCUS()
		
	ENDPROC

	PROCEDURE txtcAcctDesc.When
		RETURN .F.
		
	ENDPROC

	PROCEDURE txtcAcctNo.GotFocus
		ON KEY LABEL F2 _screen.activeform.cmdLookCOA.Click()
		DODEFAULT()
	ENDPROC

	PROCEDURE txtcAcctNo.InteractiveChange
		IF DODEFAULT()
		   SELECT coa
		   LOCATE FOR cacctno == this.Value
		   IF FOUND()
		      thisform.txtcacCTDESC.set('value',coa.cacctdesc)
		   ELSE
		      thisform.txtcacCTDESC.set('value','')
		   ENDIF 
		ENDIF    
	ENDPROC

	PROCEDURE txtcAcctNo.LostFocus
		ON KEY LABEL F2 *
		thisform.setnextcontrol(thisform.txtcWellID)
		DODEFAULT()
		
	ENDPROC

	PROCEDURE txtcAcctNo.Valid
		LOCAL llReturn
		
		IF NOT MDOWN()
		   IF NOT EMPTY(THIS.VALUE)
		      SELECT coa
		      SET ORDER TO acctno
		      IF SEEK(THIS.VALUE)
		         thisform.lWellRequired = lacctunit
		         thisform.lDeptRequired = lacctdept
		         thisform.txtcAcctDesc.set('value',cAcctDesc)
		      ENDIF
		   ELSE
		      thisform.txtcAcctDesc.set('value','')
		   ENDIF
		ENDIF
		DODEFAULT()
		
		
		
	ENDPROC

	PROCEDURE txtcCustID.GotFocus
		ON KEY LABEL F2 _screen.activeform.swlookupbutton1.Click()
		thisform.cCustid = this.value
	ENDPROC

	PROCEDURE txtcCustID.InteractiveChange
		IF DODEFAULT()
		   SELECT custownvend
		   LOCATE FOR cid == this.Value
		   IF FOUND()
		      thisform.txtcName.set('value',custownvend.cname)
		   ELSE
		      thisform.txtcName.set('value','')
		   ENDIF 
		ENDIF    
	ENDPROC

	PROCEDURE txtcCustID.LostFocus
		ON KEY LABEL F2 *
		
	ENDPROC

	PROCEDURE txtcCustID.Valid
		IF DODEFAULT()
		   IF NOT EMPTY(THIS.VALUE)
		      IF THIS.VALUE <> THISFORM.cCustid
		         SELECT custownvend
		         LOCATE FOR cID = THIS.VALUE
		         IF FOUND()
		            IF NOT EMPTY(custownvend.cidterm)
		               THISFORM.cmdatamanager.REPLACE('invhdr','cidterm',custownvend.cidterm)
		               THISFORM.cboTerms.REFRESH()
		            ENDIF
		            IF custownvend.cType = 'Owner'
		               IF invhdr.cinvtype <> 'J'  &&  Only replace if needed
		                  THISFORM.cmdatamanager.REPLACE('invhdr','cinvtype','J')
		               ENDIF
		            ENDIF
		         ENDIF
		         IF LEFT(cType,1) = 'C'  &&  Customer
		            IF invhdr.cinvtype <> 'I'  &&  Only replace if needed
		               THISFORM.cmdatamanager.REPLACE('invhdr','cinvtype','I')
		            ENDIF
		            SWSELECT('custs')
		            LOCATE FOR cCustid = custownvend.cID
		            IF FOUND()
		               IF cTaxStat = 'T'  &&  Taxable
		                  IF NOT EMPTY(custs.cTaxCode)
		                     THISFORM.cboSalesTax.SET('value',custs.cTaxCode)
		                  ENDIF
		               ELSE
		                  thisform.lExempt = .t.
		                  THISFORM.cboSalesTax.SET('value','')
		               ENDIF
		            ENDIF
		         ENDIF
		         SELECT invhdr
		      ENDIF
		   ENDIF
		ENDIF
		
		
	ENDPROC

	PROCEDURE txtcDeptNo.GotFocus
		ON KEY LABEL F2 _screen.activeform.cmdLookDept.Click()
		DODEFAULT()
	ENDPROC

	PROCEDURE txtcDeptNo.Valid
		DODEFAULT()
		IF EMPTY(THIS.VALUE)
		   IF NOT MDOWN()
		      IF THISFORM.lDeptRequired
		         THISFORM.omessage.DISPLAY('A valid department code is required when using this account no.')
		         RETURN 0
		      ENDIF
		   ENDIF
		ENDIF
		
		
	ENDPROC

	PROCEDURE txtCinvnum.Valid
		LOCAL lnRecNo
		
		IF NOT EMPTY(THIS.VALUE) AND THIS.VALUE <> 'Pending'
		    SELECT invhdr1
		    SET ORDER TO cinvnum
		    IF SEEK(THIS.VALUE)
		        IF NOT THISFORM.oMessage.CONFIRM('There is already an invoice with this number.  ' + ;
		                'Duplicate invoices from the same vendor can cause problems. ' + ;
		                'Are you sure you would like to continue anyway?')
		            RETURN 0
		        ENDIF
		    ENDIF
		ENDIF
		
		DODEFAULT()
		
	ENDPROC

	PROCEDURE txtcItemDesc.LostFocus
		IF EMPTY(thisform.cboTaxable.value)
		   thisform.cboTaxable.value = 'E'
		   thisform.cboTaxable.Refresh()
		ENDIF   
		
		IF LEFT(thisform.txtcItemId.value,1) = '*' AND lastkey() <> 15  && Comment line
		   thisform.adddetail()
		ENDIF   
		
	ENDPROC

	PROCEDURE txtcItemId.GotFocus
		ON KEY LABEL F2 _screen.activeform.cmdLookItem.Click()
		DODEFAULT()
	ENDPROC

	PROCEDURE txtcItemId.InteractiveChange
		IF THIS.VALUE <> '*' AND DODEFAULT()
		   SELECT items
		   LOCATE FOR citemid == THIS.VALUE
		   IF FOUND()
		      THISFORM.txtcitemDesc.SET('value',items.citemdesc)
		   ELSE
		      THISFORM.txtcitemDesc.SET('value','')
		   ENDIF
		ELSE  &&  Comment line
		   THISFORM.txtcitemDesc.SET('value','')
		ENDIF
		
	ENDPROC

	PROCEDURE txtcItemId.LostFocus
		ON KEY LABEL F2 *
		
		DODEFAULT()
	ENDPROC

	PROCEDURE txtcItemId.Valid
		LOCAL llReturn
		llReturn = .T.
		
		IF NOT EMPTY(THIS.VALUE) AND THIS.VALUE <> '*'
		   SELECT items
		   IF SEEK(THIS.VALUE)
		      THISFORM.txtcItemDesc.VALUE = cItemDesc
		      THISFORM.txtcItemDesc.REFRESH()
		      SWSELECT('custs')
		      LOCATE FOR ccustid = invhdr.ccustid  &&  Retrieve the proper price level to use for this customer
		      IF FOUND()
		         DO CASE
		            CASE custs.cPriceDef = '5'
		               THISFORM.txtnPrice.VALUE = items.nPrice5
		               THISFORM.txtcPriceCode.VALUE = '5'
		            CASE custs.cPriceDef = '4'
		               THISFORM.txtnPrice.VALUE = items.nPrice4
		               THISFORM.txtcPriceCode.VALUE = '4'
		            CASE custs.cPriceDef = '3'
		               THISFORM.txtnPrice.VALUE = items.nPrice3
		               THISFORM.txtcPriceCode.VALUE = '3'
		            CASE custs.cPriceDef = '2'
		               THISFORM.txtnPrice.VALUE = items.nPrice2
		               THISFORM.txtcPriceCode.VALUE = '2'
		            OTHERWISE
		               THISFORM.txtnPrice.VALUE = items.nPrice1
		               THISFORM.txtcPriceCode.VALUE = '1'
		         ENDCASE
		      ELSE
		         THISFORM.txtnPrice.VALUE = items.nPrice1
		         THISFORM.txtcPriceCode.VALUE = '1'
		      ENDIF
		      SELECT items
		      THISFORM.txtnPrice.REFRESH()
		      THISFORM.txtcPriceCode.REFRESH()
		      THISFORM.txtcAcctNo.VALUE = cDefAcct
		      THISFORM.txtcAcctNo.REFRESH()
		      IF NOT THISFORM.lExempt  &&  If not exempt, then use the setting for the item, otherwise, exempt everything
		         THISFORM.cboTaxable.SET('value',ctaxable)
		      ELSE
		         THISFORM.cboTaxable.SET('value','E')
		      ENDIF
		      IF NOT EMPTY(cDefAcct)
		         THISFORM.txtcAcctNo.SET('value',cDefAcct)
		         THISFORM.txtcAcctNo.VALID()
		      ENDIF
		      llReturn = .T.
		   ENDIF
		ENDIF
		
		SELECT invhdr
		
		RETURN (llReturn)
		
		
	ENDPROC

	PROCEDURE txtcName.When
		DODEFAULT()
		RETURN .F.
	ENDPROC

	PROCEDURE txtcPriceCode.LostFocus
		thisform.getprice(this.value)
	ENDPROC

	PROCEDURE txtcPriceCode.Valid
		IF EMPTY(THIS.VALUE)
		   THIS.VALUE = '1'
		ENDIF
		
	ENDPROC

	PROCEDURE txtcWellID.GotFocus
		ON KEY LABEL F2 _screen.activeform.cmdLookWell.Click()
		DODEFAULT()
	ENDPROC

	PROCEDURE txtcWellID.InteractiveChange
		IF DODEFAULT()
		   SELECT wells
		   LOCATE FOR cwellid == this.Value
		   IF FOUND()
		      thisform.txtcwellname.Value = wells.cwellname
		   ELSE
		      thisform.txtcwellname.Value = ''
		   ENDIF
		endif      
		       
	ENDPROC

	PROCEDURE txtcWellID.LostFocus
		ON KEY LABEL F2 *
		DODEFAULT()
		
		IF EMPTY(this.Value)
		   thisform.txtcwellName.set('value','')
		ENDIF
		
		thisform.setnextcontrol(thisform.txtnExtension)
		
		
		
		
	ENDPROC

	PROCEDURE txtcWellID.Valid
		DODEFAULT()
		
		IF EMPTY(this.value) AND NOT MDOWN()
		   IF thisform.lwellrequired
		      thisform.omessage.display('%msgwellrequired')
		      RETURN 0
		   ENDIF
		ENDIF     
		
	ENDPROC

	PROCEDURE txtcWellName.When
		RETURN .F.
		
	ENDPROC

	PROCEDURE txtdinvdate.LostFocus
		DODEFAULT()
		thisform.valterms()
	ENDPROC

	PROCEDURE txtNinvbal.When
		DODEFAULT()
		RETURN .F.
	ENDPROC

	PROCEDURE txtNinvtot.When
		DODEFAULT()
		RETURN .F.
	ENDPROC

	PROCEDURE txtNpayments.When
		DODEFAULT()
		RETURN .F.
	ENDPROC

	PROCEDURE txtnPrice.Valid
		thisform.CalcExt()
		DODEFAULT()
	ENDPROC

	PROCEDURE txtnQuantity.Valid
		thisform.CalcExt()
		DODEFAULT()
	ENDPROC

	PROCEDURE txtNsalestax.When
		DODEFAULT()
		RETURN .F.
	ENDPROC

ENDDEFINE
