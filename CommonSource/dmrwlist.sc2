*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="dmrwlist.scx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="2" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Cursor1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor6" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Relation1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor7" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor8" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor9" UniqueID="" Timestamp="" />

	AutoOpenTables = .F.
	DataSource = .NULL.
	Height = 352
	Left = 4
	Name = "Dataenvironment"
	Top = 433
	Width = 707

	ADD OBJECT 'Cursor1' AS cursor WITH ;
		Alias = "groups", ;
		CursorSource = "groups", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor1", ;
		Top = 20, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor2' AS cursor WITH ;
		Alias = "wells", ;
		CursorSource = "wells", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 118, ;
		Name = "Cursor2", ;
		Top = 23, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor3' AS cursor WITH ;
		Alias = "wellinv", ;
		CursorSource = "wellinv", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 224, ;
		Name = "Cursor3", ;
		Top = 23, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor4' AS cursor WITH ;
		Alias = "investor", ;
		CursorSource = "investor", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 331, ;
		Name = "Cursor4", ;
		Top = 22, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor5' AS cursor WITH ;
		Alias = "sysctl", ;
		CursorSource = "sysctl", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 150, ;
		Name = "Cursor5", ;
		Top = 140, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor6' AS cursor WITH ;
		Alias = "disbhist", ;
		CursorSource = "disbhist", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 290, ;
		Name = "Cursor6", ;
		Top = 140, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor7' AS cursor WITH ;
		Alias = "ownpcts", ;
		CursorSource = "ownpcts", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 468, ;
		Name = "Cursor7", ;
		Top = 32, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor8' AS cursor WITH ;
		Alias = "suspense", ;
		CursorSource = "suspense", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 453, ;
		Name = "Cursor8", ;
		Top = 156, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor9' AS cursor WITH ;
		Alias = "doidecks", ;
		CursorSource = "doidecks", ;
		Database = ..\newdbc\appdata.dbc, ;
		Height = 90, ;
		Left = 382, ;
		Name = "Cursor9", ;
		Top = 182, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Relation1' AS relation WITH ;
		ChildAlias = "disbhist", ;
		ChildOrder = "cownerid", ;
		Name = "Relation1", ;
		ParentAlias = "investor", ;
		RelationalExpr = "cownerid"
		*< END OBJECT: BaseClass="relation" />

ENDDEFINE

DEFINE CLASS formdmrwlist AS frmrptcriteria OF "..\source\appforms.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="ChkInclude" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="ChkSeparate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkExpanded" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Swgroup1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Swrptlook1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chklRun" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="LblGroup" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblEndID" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblBegID" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chklNoSSN" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboStatus" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbltextcustom1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkShowAdd" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chklNotes" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Runcombo1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="opgSortBy" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboOwnType" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblType" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkSelected" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblSelected" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblDeck" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboDeck" UniqueID="" Timestamp="" />

	Caption = "Well/Interest Listing"
	DataSession = 2
	DoCreate = .T.
	Height = 551
	HelpContextID = 193
	Name = "FormDmrwlist"
	Width = 718
	Swrptcriteriabuttons1.CHKEXPORT.Alignment = 0
	Swrptcriteriabuttons1.CHKEXPORT.Name = "CHKEXPORT"
	Swrptcriteriabuttons1.cmdclose.Name = "cmdclose"
	Swrptcriteriabuttons1.CMDPREVIEW.Name = "CMDPREVIEW"
	Swrptcriteriabuttons1.cmdPrint.Name = "cmdPrint"
	Swrptcriteriabuttons1.Left = 241
	Swrptcriteriabuttons1.Name = "Swrptcriteriabuttons1"
	Swrptcriteriabuttons1.TabIndex = 24
	Swrptcriteriabuttons1.Top = 456
	Swrptcriteriabuttons1.ZOrderSet = 0

	ADD OBJECT 'cboDeck' AS cbocomboboxcustom WITH ;
		BoundColumn = 2, ;
		ControlSource = "doidecks.cdeck", ;
		Enabled = .F., ;
		Height = 22, ;
		Left = 252, ;
		Name = "cboDeck", ;
		Style = 0, ;
		TabIndex = 22, ;
		Top = 408, ;
		Width = 120
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="combobox" />

	ADD OBJECT 'cboOwnType' AS cbocomboboxcustom WITH ;
		BoundColumn = 2, ;
		Enabled = .F., ;
		Height = 20, ;
		Left = 169, ;
		lrequired = .F., ;
		Name = "cboOwnType", ;
		TabIndex = 11, ;
		Top = 205, ;
		Visible = .T., ;
		Width = 168
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="combobox" />

	ADD OBJECT 'cboStatus' AS cbocomboboxcustom WITH ;
		BoundColumn = 2, ;
		ControlSource = "", ;
		Height = 20, ;
		lautoremember = .F., ;
		Left = 480, ;
		Name = "cboStatus", ;
		TabIndex = 9, ;
		Top = 169, ;
		Visible = .T., ;
		Width = 117
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="combobox" />

	ADD OBJECT 'chkExpanded' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Expanded - Includes All Interests", ;
		Enabled = .F., ;
		Height = 16, ;
		Left = 169, ;
		lenabled = .T., ;
		Name = "chkExpanded", ;
		TabIndex = 18, ;
		Top = 313, ;
		Width = 176, ;
		ZOrderSet = 3
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'ChkInclude' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Include Owner Interests", ;
		Height = 16, ;
		Left = 169, ;
		Name = "ChkInclude", ;
		TabIndex = 14, ;
		Top = 267, ;
		Width = 134, ;
		ZOrderSet = 1
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chklNoSSN' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Mask Tax ID Numbers on Report", ;
		Enabled = .F., ;
		Height = 16, ;
		Left = 364, ;
		Name = "chklNoSSN", ;
		Style = 0, ;
		TabIndex = 19, ;
		Top = 292, ;
		Value = .F., ;
		Visible = .T., ;
		Width = 172, ;
		ZOrderSet = 1
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chklNotes' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Include Well Notes", ;
		Left = 169, ;
		Name = "chklNotes", ;
		TabIndex = 13, ;
		Top = 244, ;
		Value = .F.
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chklRun' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Show Interests as of a Specific Run", ;
		Enabled = .F., ;
		Height = 16, ;
		Left = 220, ;
		lenabled = .T., ;
		Name = "chklRun", ;
		TabIndex = 20, ;
		Top = 344, ;
		Value = .F., ;
		Visible = .T., ;
		Width = 193, ;
		ZOrderSet = 3
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkSelected' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Choose Selected Wells", ;
		Left = 288, ;
		Name = "chkSelected", ;
		TabIndex = 3, ;
		Top = 84, ;
		Value = .F.
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'ChkSeparate' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Start a New Page for Each Well", ;
		Enabled = .F., ;
		Height = 16, ;
		Left = 169, ;
		lenabled = .T., ;
		Name = "ChkSeparate", ;
		TabIndex = 16, ;
		Top = 290, ;
		Width = 170, ;
		ZOrderSet = 2
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkShowAdd' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Show Owner Addresses", ;
		Enabled = .F., ;
		Left = 364, ;
		Name = "chkShowAdd", ;
		TabIndex = 15, ;
		Top = 263, ;
		Visible = .T.
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'lblBegID' AS lbllabelcustom WITH ;
		Caption = "First Well:", ;
		Height = 16, ;
		Left = 103, ;
		Name = "lblBegID", ;
		TabIndex = 5, ;
		Top = 112, ;
		Width = 49, ;
		ZOrderSet = 9
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblDeck' AS lbllabelcustom WITH ;
		Caption = "Deck:", ;
		Enabled = .F., ;
		Left = 216, ;
		Name = "lblDeck", ;
		TabIndex = 23, ;
		Top = 411
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblEndID' AS lbllabelcustom WITH ;
		Caption = "Last Well:", ;
		Height = 16, ;
		Left = 336, ;
		Name = "lblEndID", ;
		TabIndex = 6, ;
		Top = 113, ;
		Width = 49, ;
		ZOrderSet = 8
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'LblGroup' AS lbllabelcustom WITH ;
		Caption = "Group:", ;
		Height = 16, ;
		Left = 117, ;
		Name = "LblGroup", ;
		TabIndex = 8, ;
		Top = 171, ;
		Width = 35, ;
		ZOrderSet = 7
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom1' AS lbllabelcustom WITH ;
		Caption = "Sort by", ;
		Height = 16, ;
		Left = 256, ;
		Name = "Lbllabelcustom1", ;
		TabIndex = 2, ;
		Top = 19, ;
		Width = 37, ;
		ZOrderSet = 10
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblSelected' AS lbllabelcustom WITH ;
		Caption = "All IDs Selected", ;
		ForeColor = 0,0,255, ;
		Left = 303, ;
		Name = "lblSelected", ;
		TabIndex = 17, ;
		Top = 113, ;
		Visible = .F.
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbltextcustom1' AS lbltextcustom WITH ;
		Caption = "Status:", ;
		Left = 427, ;
		Name = "Lbltextcustom1", ;
		TabIndex = 10, ;
		Top = 171
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblType' AS lbllabelcustom WITH ;
		Caption = "Owner Type:", ;
		Left = 86, ;
		Name = "lblType", ;
		TabIndex = 12, ;
		Top = 207, ;
		Visible = .T.
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'opgSortBy' AS opgoptiongroupcustom WITH ;
		AutoSize = .T., ;
		BorderStyle = 0, ;
		ButtonCount = 2, ;
		Left = 308, ;
		Name = "opgSortBy", ;
		TabIndex = 1, ;
		Top = 12, ;
		Value = 1, ;
		Option1.AutoSize = .T., ;
		Option1.Caption = " Well ID", ;
		Option1.FontSize = 8, ;
		Option1.Height = 16, ;
		Option1.Left = 5, ;
		Option1.Name = "Option1", ;
		Option1.Top = 5, ;
		Option1.Value = 1, ;
		Option1.Width = 53, ;
		Option2.AutoSize = .T., ;
		Option2.Caption = " Well Name", ;
		Option2.FontSize = 8, ;
		Option2.Height = 16, ;
		Option2.Left = 5, ;
		Option2.Name = "Option2", ;
		Option2.Top = 24, ;
		Option2.Width = 71
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="optiongroup" />

	ADD OBJECT 'Runcombo1' AS runcombo WITH ;
		ColumnWidths = "230,0,0", ;
		cshowwhat = B, ;
		Enabled = .F., ;
		Height = 20, ;
		Left = 220, ;
		lshownew = .F., ;
		Name = "Runcombo1", ;
		TabIndex = 21, ;
		Top = 364, ;
		Visible = .T., ;
		Width = 257
		*< END OBJECT: ClassLib="..\custom\swcontrol.vcx" BaseClass="combobox" />

	ADD OBJECT 'Swgroup1' AS swgroup WITH ;
		Left = 169, ;
		Name = "Swgroup1", ;
		TabIndex = 7, ;
		Top = 169, ;
		ZOrderSet = 4
		*< END OBJECT: ClassLib="..\custom\swcontrol.vcx" BaseClass="combobox" />

	ADD OBJECT 'Swrptlook1' AS swrptlook WITH ;
		Height = 47, ;
		Left = 169, ;
		Name = "Swrptlook1", ;
		TabIndex = 4, ;
		Top = 109, ;
		Width = 467, ;
		ZOrderSet = 5, ;
		Swlookupbutton1.Name = "Swlookupbutton1", ;
		Swlookupbutton2.Left = 314, ;
		Swlookupbutton2.Name = "Swlookupbutton2", ;
		Swlookupbutton2.Top = 2, ;
		txtBegID.clistexpression = wells.cwellid, ;
		txtBegID.clistworkarea = wells, ;
		txtBegID.Name = "txtBegID", ;
		TxtBegName.Name = "TxtBegName", ;
		txtEndID.clistexpression = wells.cwellid, ;
		txtEndID.clistworkarea = wells, ;
		txtEndID.Left = 227, ;
		txtEndID.Name = "txtEndID", ;
		txtEndID.Top = 2, ;
		TxtEndName.Left = 227, ;
		TxtEndName.Name = "TxtEndName", ;
		TxtEndName.Top = 23
		*< END OBJECT: ClassLib="..\custom\swcontrol.vcx" BaseClass="container" />
	
	PROCEDURE builddata
		LOCAL llNotes, llSelected, llAllDecks
		
		TRY
		
		   llSelected = THISFORM.chkselected.VALUE
		   llNotes = THISFORM.chklNotes.VALUE  &&  Whether to include notes or not
		   lcType  = THISFORM.cboOwnType.VALUE  &&  Type of owners to include, if showing interests
		   llNoSSN = THISFORM.chklNoSSN.VALUE
		   lcBegID = THISFORM.swrptlook1.txtBegID.VALUE
		   lcEndID = THISFORM.swrptlook1.txtEndID.VALUE
		   lcDeck  = THISFORM.cboDeck.VALUE
		   llAllDecks = 'All Decks' $ lcDeck
		
		   IF NOT llSelected
		      SELECT cwellid AS cid FROM wells ;
		         INTO CURSOR SELECTED ;
		         WHERE BETWEEN(cwellid,lcBegID,lcEndID) ;
		         ORDER BY cid
		   ENDIF
		
		   IF !m.goapp.oSecurity.HasPrivilege('Tax Ids')
		      llNoSSN = .T.
		   ENDIF
		
		   IF THISFORM.cboStatus.VALUE = '*'  &&  Setting for displaying wells of a certain status
		      lcWhere = ''
		   ELSE
		      lcWhere = 'AND wells.cWellStat = thisform.cboStatus.value'
		   ENDIF
		
		   IF LEFT(THISFORM.swgroup1.VALUE,2) = '**'  &&  Whether including all groups or not
		      lcWhere2 = ''
		      THISFORM.cSelectCriteria = 'All Groups'
		   ELSE
		      lcWhere2 = 'AND wells.cGroup = left(THISFORM.swgroup1.VALUE,2)'
		      THISFORM.cSelectCriteria = 'Group '  ;
		         + ALLTRIM(THISFORM.swgroup1.VALUE)
		   ENDIF
		
		   lcSortBy = THISFORM.opgSortBy.VALUE  &&  Sort value
		
		   IF lcSortBy = 1  &&  Well ID
		      THISFORM.cSortOrder = 'Well ID'
		      lcSortBy  = 'cWellID'  &&  Sort for regular well list
		      lcSortByI = 'wells.cwellid, wellinv.cdeck, wellinv.ctypeinv, investor.cOwnerID'  &&  Sort by including interests
		      lcSortByR = 'disbhist.cwellid, disbhist.cdeck, disbhist.ctypeinv, disbhist.cOwnerID'  &&  Sort for including interests for a specific run
		   ELSE
		      THISFORM.cSortOrder = 'Well Name'
		      lcSortBy = 'cWellName'  &&  Sort for regular well list
		      lcSortByI = 'wells.cWellName, wellinv.cdeck, wellinv.ctypeinv, investor.cOwnerID'  &&  Sort by including interests
		      lcSortByR = 'wells.cWellName, disbhist.cdeck, disbhist.ctypeinv, disbhist.cOwnerID'  &&  Sort for including interests for a specific run
		   ENDIF
		
		   *********************************************
		   *   If not including interests
		   *********************************************
		
		   DO CASE
		      CASE THISFORM.chkInclude.VALUE = .F. AND THISFORM.chkSeparate.VALUE = .F.
		
		         IF USED('welllist')
		            USE IN welllist
		         ENDIF
		
		         SELECT cwellid,  ;
		            cwellname,  ;
		            ctownship,  ;
		            ccounty,  ;
		            cstate,  ;
		            ndepth,  ;
		            cparcel,  ;
		            cgroup,  ;
		            csection,  ;
		            clocation,  ;
		            cwellstat,  ;
		            dspuddate,  ;
		            dcompdate,  ;
		            nacres,  ;
		            nelevation,  ;
		            nwellcount, ;
		            cUser1,  ;
		            IIF(cstate='OK','PUN No',IIF(cstate='WY','Rpt Grp',IIF(cstate='LA','Parish No',IIF(cstate='OH','Storage Tanks','User 1')))) AS cUser1Desc,  ;
		            cUser2,  ;
		            IIF(cstate='OK','Prod Code',IIF(cstate='WY','Rate Code',IIF(cstate='LA','Taxpayer Code',IIF(cstate='OH','Max Capacity','User 2')))) AS cUser2Desc,  ;
		            cUser3,  ;
		            IIF(cstate='OK','Disp Code',IIF(cstate='WY','User 3',IIF(cstate='LA','Tax Rate Code',IIF(cstate='OH','User3','User 3')))) AS cUser3Desc,  ;
		            cUser4,  ;
		            IIF(cstate='OK','Oper Code',IIF(cstate='WY','User 4',IIF(cstate='LA','Excl Code',IIF(cstate='OH','User 4','User 4')))) AS cUser4Desc,  ;
		            cUser5,  ;
		            IIF(cstate='OK','Oper Name',IIF(cstate='WY','User 5',IIF(cstate='LA','Excl Rate',IIF(cstate='OH','User 5','User 5')))) AS cUser5Desc,  ;
		            cUser6,  ;
		            IIF(cstate='OK','BTU Factor',IIF(cstate='WY','User 6',IIF(cstate='LA','LUW Code',IIF(cstate='OH','User 6','User 6')))) AS cUser6Desc,  ;
		            IIF(llNotes,wells.mWellNote,SPACE(1)) AS mWellNote,  ;
		            cpermit1,  ;
		            cpermit2,  ;
		            cpermit3,  ;
		            cpermit4,  ;
		            cpermit5,  ;
		            cpermit6  ;
		            FROM wells  ;
		            ORDER BY &lcSortBy  ;
		            INTO CURSOR welllist  ;
		            WHERE wells.cwellid IN (SELECT cid FROM SELECTED) ;
		            &lcWhere  ;
		            &lcWhere2
		
		         THISFORM.cTitle1 = 'Well Listing'
		         THISFORM.cTitle2 = ''
		
		         THISFORM.cReportName = 'dmrwlist'
		
		         SELECT welllist
		         IF RECC() > 0
		            llReturn = .T.
		         ELSE
		            llReturn = .F.
		         ENDIF
		
		         *****************************************************
		         *   If the interest box is chosen
		         *****************************************************
		
		      CASE THISFORM.chkInclude.VALUE = .T.
		
		         IF USED('wellrel')
		            USE IN wellrel
		         ENDIF
		
		         IF m.goapp.lPartnershipMod
		            IF THISFORM.chkShowAdd.VALUE = .T.      &&  Including Addresses
		               THISFORM.cReportName = 'dmrwrel5u'
		            ELSE                                    &&  Not including addresses
		               IF THISFORM.chkExpanded.VALUE = .T.  && if using the expanded report
		                  THISFORM.cReportName = 'dmrwrel3u'
		               ELSE                                 &&  Not using expanded report
		                  THISFORM.cReportName = 'dmrwrel1u'
		               ENDIF
		            ENDIF
		
		            IF THISFORM.chkSeparate.VALUE = .T.        &&  Separate Pages
		               IF THISFORM.chkShowAdd.VALUE = .T.      &&  Including Addresses
		                  THISFORM.cReportName = 'dmrwrel6u'
		               ELSE                                    &&  No addresses
		                  IF THISFORM.chkExpanded.VALUE = .T.  &&  Expanded
		                     THISFORM.cReportName = 'dmrwrel4u'
		                  ELSE                                 &&  No expanded
		                     THISFORM.cReportName = 'dmrwrel2u'
		                  ENDIF
		               ENDIF
		            ENDIF
		         ELSE
		            IF THISFORM.chkShowAdd.VALUE = .T.      &&  Including Addresses
		               THISFORM.cReportName = 'dmrwrel5'
		            ELSE                                    &&  Not including addresses
		               IF THISFORM.chkExpanded.VALUE = .T.  && if using the expanded report
		                  THISFORM.cReportName = 'dmrwrel3'
		               ELSE                                 &&  Not using expanded report
		                  THISFORM.cReportName = 'dmrwrel1'
		               ENDIF
		            ENDIF
		
		            IF THISFORM.chkSeparate.VALUE = .T.        &&  Separate Pages
		               IF THISFORM.chkShowAdd.VALUE = .T.      &&  Including Addresses
		                  THISFORM.cReportName = 'dmrwrel6'
		               ELSE                                    &&  No addresses
		                  IF THISFORM.chkExpanded.VALUE = .T.  &&  Expanded
		                     THISFORM.cReportName = 'dmrwrel4'
		                  ELSE                                 &&  No expanded
		                     THISFORM.cReportName = 'dmrwrel2'
		                  ENDIF
		               ENDIF
		            ENDIF
		         ENDIF
		
		         THISFORM.cTitle1 = 'Well Interest Listing'
		
		         DO CASE
		            CASE lcType = 'W'
		               THISFORM.cTitle2 = 'For Working Interest Owners'
		            CASE lcType = 'L'
		               THISFORM.cTitle2 = 'For Royalty Owners'
		            CASE lcType = 'O'
		               THISFORM.cTitle2 = 'For Overriding Royalty Owners'
		            OTHERWISE
		               THISFORM.cTitle2 = ''
		         ENDCASE
		
		         IF THISFORM.chklRun.VALUE  &&  If doing the report as of a specific run
		
		            lcRunYear = THISFORM.Runcombo1.LISTITEM[thisform.RunCombo1.listitemid,2] + PADL(THISFORM.Runcombo1.LISTITEM[thisform.RunCombo1.listitemid,3],3,'0')
		            SELECT disbhist.cwellid,  ;
		               wells.cwellname,  ;
		               wells.cwellstat,  ;
		               investor.cOwnerID,  ;
		               investor.cOwnname,  ;
		               investor.cownname1, ;
		               investor.ndisbfreq,  ;
		               investor.caddress1a, ;
		               investor.caddress1b, ;
		               investor.ccity1, ;
		               investor.cstate1, ;
		               investor.czip1, ;
		               investor.lDummy, ;
		               IIF(llNoSSN,'*******',investor.ctaxid) AS ctaxid,   ;
		               investor.lHold,  ;
		               investor.cPhoneH,  ;
		               disbhist.cdeck, ;
		               disbhist.ctypeinv,  ;
		               disbhist.ctypeint,  ;
		               disbhist.cdirect,  ;
		               disbhist.lflat,  ;
		               disbhist.nflatrate,  ;
		               disbhist.ljib,  ;
		               disbhist.lonhold,  ;
		               disbhist.cprogcode,  ;
		               SUM(ownpcts.nunits) as nunits, ;
		               CAST(AVG(ownpcts.nrevoil) AS N(11,7)) AS nrevoil,  ;
		               CAST(AVG(ownpcts.nrevgas) AS N(11,7)) AS nrevgas,  ;
		               CAST(AVG(ownpcts.nrevoth) AS N(11,7)) AS nrevoth, ;
		               CAST(AVG(ownpcts.nworkint) AS N(11,7)) AS nworkint,  ;
		               CAST(AVG(ownpcts.nrevtrp) AS N(11,7)) AS nrevtrp,  ;
		               CAST(AVG(ownpcts.nrevmisc1) AS N(11,7)) AS nrevmisc1,  ;
		               CAST(AVG(ownpcts.nrevmisc2) AS N(11,7)) AS nrevmisc2,  ;
		               CAST(AVG(ownpcts.nintclass1) AS N(11,7)) AS nintclass1,  ;
		               CAST(AVG(ownpcts.nintclass2) AS N(11,7)) AS nintclass2,  ;
		               CAST(AVG(ownpcts.nintclass3) AS N(11,7)) AS nintclass3,  ;
		               CAST(AVG(ownpcts.nintclass4) AS N(11,7)) AS nintclass4,  ;
		               CAST(AVG(ownpcts.nintclass5) AS N(11,7)) AS nintclass5,  ;
		               CAST(AVG(ownpcts.nacpint) AS N(11,7)) AS nacpint,  ;
		               CAST(AVG(ownpcts.nbcpint) AS N(11,7)) AS nbcpint,  ;
		               CAST(AVG(ownpcts.nplugpct) AS N(11,7)) AS nplugpct, ;
		               CAST(AVG(ownpcts.nrevtax1) AS N(11,7)) AS noiltax1, ;
		               CAST(AVG(ownpcts.nrevtax4) AS N(11,7)) AS noiltax2, ;
		               CAST(AVG(ownpcts.nrevtax7) AS N(11,7)) AS noiltax3, ;
		               CAST(AVG(ownpcts.nrevtax10) AS N(11,7)) AS noiltax4, ;
		               CAST(AVG(ownpcts.nrevtax2) AS N(11,7)) AS ngastax1, ;
		               CAST(AVG(ownpcts.nrevtax5) AS N(11,7)) AS ngastax2, ;
		               CAST(AVG(ownpcts.nrevtax8) AS N(11,7)) AS ngastax3, ;
		               CAST(AVG(ownpcts.nrevtax11) AS N(11,7)) AS ngastax4, ;
		               CAST(AVG(ownpcts.nrevtax3) AS N(11,7)) AS nothtax1, ;
		               CAST(AVG(ownpcts.nrevtax6) AS N(11,7)) AS nothtax2, ;
		               CAST(AVG(ownpcts.nrevtax9) AS N(11,7)) AS nothtax3, ;
		               CAST(AVG(ownpcts.nrevtax12) AS N(11,7)) AS nothtax4, ;
		               disbhist.lprogram,  ;
		               ownpcts.nrevtax1,  ;
		               ownpcts.nrevtax2,  ;
		               .F. AS lProgramReport  ;  &&  Tells the report that it's not the program DOI report, so it groups differently - BH 10/31/06
		            FROM wells, investor, disbhist, ownpcts  ;
		               ORDER BY &lcSortByR  ;
		               INTO CURSOR wellrel READWRITE  ;
		               WHERE disbhist.cwellid IN (SELECT cid FROM SELECTED) ;
		               AND investor.cOwnerID = disbhist.cOwnerID ;
		               AND wells.cwellid = disbhist.cwellid  ;
		               AND IIF(NOT llAllDecks,cDeck = lcDeck,.T.) ;
		               &lcWhere  ;
		               AND IIF(lcType<>'*',disbhist.ctypeinv=lcType,.T.)  ;
		               &lcWhere2  ;  &&  Group
		            AND IIF(EMPTY(cRunYear_In),cRunYear+PADL(TRANSFORM(nrunno),3,'0'), cRunYear_In+PADL(TRANSFORM(nrunno_In),3,'0')) = lcRunYear ;
		               AND disbhist.ciddisb == ownpcts.ciddisb ;
		               AND cRecType = THISFORM.Runcombo1.LISTITEM[thisform.RunCombo1.listitemid,6]  ;
		               AND disbhist.lmanual = .F. ;
		               GROUP BY disbhist.cwellid,disbhist.cOwnerID,disbhist.ctypeinv, ownpcts.nrevgas
		
		
		            SELECT suspense.cwellid,  ;
		               wells.cwellname,  ;
		               wells.cwellstat,  ;
		               investor.cOwnerID,  ;
		               investor.cOwnname,  ;
		               investor.cownname1, ;
		               investor.ndisbfreq,  ;
		               investor.caddress1a, ;
		               investor.caddress1b, ;
		               investor.ccity1, ;
		               investor.cstate1, ;
		               investor.czip1, ;
		               investor.lDummy, ;
		               IIF(llNoSSN,'*******',investor.ctaxid) AS ctaxid,   ;
		               investor.lHold,  ;
		               investor.cPhoneH,  ;
		               suspense.ctypeinv,  ;
		               suspense.ctypeint,  ;
		               suspense.cdirect,  ;
		               suspense.lflat,  ;
		               suspense.nflatrate,  ;
		               suspense.ljib,  ;
		               suspense.lonhold,  ;
		               suspense.cprogcode,  ;
		               suspense.cdeck, ;
		               SUM(suspense.nunits) as nunits, ;
		               CAST(AVG(suspense.nrevoil) AS N(11,7)) nrevoil,  ;
		               CAST(AVG(suspense.nrevgas) AS N(11,7)) nrevgas,  ;
		               CAST(AVG(suspense.nrevoth) AS N(11,7)) nrevoth, ;
		               CAST(AVG(suspense.nworkint) AS N(11,7)) nworkint,  ;
		               CAST(AVG(suspense.nrevtrp) AS N(11,7)) nrevtrp,  ;
		               CAST(AVG(suspense.nrevmisc1) AS N(11,7)) nrevmisc1,  ;
		               CAST(AVG(suspense.nrevmisc2) AS N(11,7)) nrevmisc2,  ;
		               CAST(AVG(suspense.nintclass1) AS N(11,7)) nintclass1,  ;
		               CAST(AVG(suspense.nintclass2) AS N(11,7)) nintclass2,  ;
		               CAST(AVG(suspense.nintclass3) AS N(11,7)) nintclass3,  ;
		               CAST(AVG(suspense.nintclass4) AS N(11,7)) nintclass4,  ;
		               CAST(AVG(suspense.nintclass5) AS N(11,7)) nintclass5,  ;
		               CAST(AVG(suspense.nacpint) AS N(11,7)) nacpint,  ;
		               CAST(AVG(suspense.nbcpint) AS N(11,7)) nbcpint,  ;
		               CAST(AVG(suspense.nplugpct) AS N(11,7)) nplugpct, ;
		               CAST(AVG(suspense.nrevtax1) AS N(11,7)) noiltax1, ;
		               CAST(AVG(suspense.nrevtax4) AS N(11,7)) noiltax2, ;
		               CAST(AVG(suspense.nrevtax7) AS N(11,7)) noiltax3, ;
		               CAST(AVG(suspense.nrevtax10) AS N(11,7)) noiltax4, ;
		               CAST(AVG(suspense.nrevtax2) AS N(11,7)) ngastax1, ;
		               CAST(AVG(suspense.nrevtax5) AS N(11,7)) ngastax2, ;
		               CAST(AVG(suspense.nrevtax8) AS N(11,7)) ngastax3, ;
		               CAST(AVG(suspense.nrevtax11) AS N(11,7)) ngastax4, ;
		               CAST(AVG(suspense.nrevtax3) AS N(11,7)) nothtax1, ;
		               CAST(AVG(suspense.nrevtax6) AS N(11,7)) nothtax2, ;
		               CAST(AVG(suspense.nrevtax9) AS N(11,7)) nothtax3, ;
		               CAST(AVG(suspense.nrevtax12) AS N(11,7)) nothtax4, ;
		               suspense.lprogram,  ;
		               suspense.nrevtax1,  ;
		               suspense.nrevtax2,  ;
		               .F. AS lProgramReport  ;  &&  Tells the report that it's not the program DOI report, so it groups differently - BH 10/31/06
		            FROM wells, investor, suspense  ;
		               INTO CURSOR wellrel2  ;
		               WHERE suspense.cwellid IN (SELECT cid FROM SELECTED) ;
		               AND investor.cOwnerID = suspense.cOwnerID ;
		               AND wells.cwellid = suspense.cwellid  ;
		               AND IIF(NOT llAllDecks,cDeck = lcDeck,.T.) ;
		               &lcWhere  ;
		               AND IIF(lcType<>'*',suspense.ctypeinv=lcType,.T.)  ;
		               &lcWhere2  ;  &&  Group
		            AND cRunYear_In+PADL(TRANSFORM(nrunno_In),3,'0') = lcRunYear ;
		               AND cRunYear_In+PADL(TRANSFORM(nrunno_In),3,'0') NOT IN(SELECT cRunYear+PADL(TRANSFORM(nrunno),3,'0') FROM sysctl WHERE EMPTY(cVersion) AND cTypeClose = 'R')  ;  &&  Not records from old closings
		            AND cRecType = THISFORM.Runcombo1.LISTITEM[thisform.RunCombo1.listitemid,6]  ;
		               AND suspense.lmanual = .F. ;
		               AND suspense.cOwnerID+suspense.cwellid+suspense.ctypeinv NOT IN (SELECT cOwnerID+cwellid+ctypeinv FROM wellrel) ;
		               GROUP BY suspense.cwellid,suspense.cOwnerID,suspense.ctypeinv, suspense.nrevgas
		
		            SELECT wellrel
		            APPEND FROM DBF('wellrel2')
		
		            IF NOT llNoSSN
		               SELECT wellrel
		               REPLACE ctaxid WITH cmEncrypt(ALLTRIM(ctaxid),m.goapp.cEncryptionKey) ALL
		            ENDIF
		
		            * Change the interests to decimal interests if preference is set
		            llReturn = DecimalInts('wellrel')
		
		            SELECT wellrel
		            INDEX ON cwellid+ctypeinv+cOwnerID TAG cwellid
		
		            THISFORM.cTitle2 = 'As of Run: ' + SUBSTR(THISFORM.Runcombo1.VALUE,5)
		
		         ELSE  &&  Not doing it for a specific run
		
		            SELECT wells.cwellid,  ;
		               wells.cwellname,  ;
		               wells.cwellstat,  ;
		               investor.cOwnerID,  ;
		               investor.cOwnname,  ;
		               investor.cownname1, ;
		               investor.ndisbfreq,  ;
		               investor.caddress1a, ;
		               investor.caddress1b, ;
		               investor.ccity1, ;
		               investor.cstate1, ;
		               investor.czip1, ;
		               investor.lDummy, ;
		               IIF(llNoSSN,'*******',investor.ctaxid) AS ctaxid,   ;
		               investor.cPhoneH,  ;
		               investor.lHold,  ;
		               wellinv.cDeck, ;
		               wellinv.ctypeinv,  ;
		               wellinv.ctypeint,  ;
		               wellinv.cdirect,  ;
		               wellinv.lflat,  ;
		               wellinv.nflatrate,  ;
		               wellinv.nFlatBBL,  ;
		               wellinv.nFlatMCF,  ;
		               wellinv.ljib,  ;
		               wellinv.lonhold,  ;
		               wellinv.cprogcode,  ;
		               wellinv.nrevoil,  ;
		               wellinv.nrevgas,  ;
		               wellinv.nrevoth, ;
		               wellinv.nworkint,  ;
		               wellinv.nrevtrp,  ;
		               wellinv.nrevmisc1,  ;
		               wellinv.nrevmisc2,  ;
		               wellinv.nintclass1,  ;
		               wellinv.nintclass2,  ;
		               wellinv.nintclass3,  ;
		               wellinv.nintclass4,  ;
		               wellinv.nintclass5,  ;
		               wellinv.nacpint,  ;
		               wellinv.nbcpint,  ;
		               wellinv.napoint,  ;
		               wellinv.nplugpct, ;
		               wellinv.nunits, ;
		               wellinv.nrevtax1 AS noiltax1, ;
		               wellinv.nrevtax4 AS noiltax2, ;
		               wellinv.nrevtax7 AS noiltax3, ;
		               wellinv.nrevtax10 AS noiltax4, ;
		               wellinv.nrevtax2 AS ngastax1, ;
		               wellinv.nrevtax5 AS ngastax2, ;
		               wellinv.nrevtax8 AS ngastax3, ;
		               wellinv.nrevtax11 AS ngastax4, ;
		               wellinv.nrevtax3 AS nothtax1, ;
		               wellinv.nrevtax6 AS nothtax2, ;
		               wellinv.nrevtax9 AS nothtax3, ;
		               wellinv.nrevtax12 AS nothtax4, ;
		               wellinv.lprogram,  ;
		               wellinv.nrevtax1,  ;
		               wellinv.nrevtax2,  ;
		               .F. AS lProgramReport  ;  &&  Tells the report that it's not the program DOI report, so it groups differently - BH 10/31/06
		            FROM wells, investor, wellinv  ;
		               ORDER BY &lcSortByI  ;
		               INTO CURSOR wellrel READWRITE ;
		               WHERE wells.cwellid IN (SELECT cid FROM SELECTED) ;
		               AND investor.cOwnerID = wellinv.cOwnerID ;
		               AND wells.cwellid = wellinv.cwellid  ;
		               AND IIF(NOT llAllDecks,cDeck = lcDeck,.T.) ;
		               &lcWhere  ;  &&  Status
		            AND IIF(lcType<>'*',wellinv.ctypeinv=lcType,.T.)  ;  &&  Owner Type
		            &lcWhere2    &&  Group
		
		            IF NOT llNoSSN
		               SELECT wellrel
		               REPLACE ctaxid WITH cmEncrypt(ALLTRIM(ctaxid),m.goapp.cEncryptionKey) ALL
		            ENDIF
		
		            SELECT wellrel
		            SCAN FOR lflat
		               IF nflatrate = 0 AND nFlatMCF <> 0
		                  REPLACE nflatrate WITH nFlatMCF
		               ENDIF
		               IF nflatrate = 0 AND nFlatBBL <> 0
		                  REPLACE nflatrate WITH nFlatBBL
		               ENDIF
		            ENDSCAN
		
		            * Change the interests to decimal interests if preference is set
		            llReturn = DecimalInts('wellrel')
		
		            SELECT wellrel
		            INDEX ON cwellid+cDeck+ctypeinv+cOwnerID TAG cwellid
		         ENDIF
		
		         SELECT wellrel
		         IF RECC() > 0
		            llReturn = .T.
		            EXIT
		         ELSE
		            llReturn = .F.
		            EXIT
		         ENDIF
		   ENDCASE
		
		CATCH TO loError
		   llReturn = .F.
		   DO errorlog WITH 'Builddata', loError.LINENO, 'Well Listing', loError.ERRORNO, loError.MESSAGE, '', loError
		   MESSAGEBOX('Unable to process the report at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		      'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		RETURN llReturn
		
	ENDPROC

	PROCEDURE Init
		SELECT wells
		SET ORDER TO cWellID
		GO TOP
		
		THISFORM.swrptlook1.txtBegName.VALUE = cwellname
		THISFORM.swrptlook1.txtBegID.VALUE = cWellID
		GO BOTTOM
		
		THISFORM.swrptlook1.txtEndName.VALUE = cwellname
		THISFORM.swrptlook1.txtEndID.VALUE = cWellID
		
		THISFORM.chkInclude.VALUE = .F.
		THISFORM.chkSeparate.VALUE = .F.
		THISFORM.chkExpanded.VALUE = .F.
		THISFORM.chkShowAdd.VALUE = .F.
		
		DODEFAULT()
		
	ENDPROC

	PROCEDURE cboDeck.Init
		IF DODEFAULT()
		   this.Requery()
		ENDIF    
	ENDPROC

	PROCEDURE cboDeck.Requery
		LPARAMETERS lcDeck, lcBegID, lcEndID, llSelected, lcWellID, lnIndex, lnX
		
		IF DODEFAULT()
			THIS.CLEAR()
		
		    lcBegID = thisform.swrpTLOOK1.txtbegID.Value
		    lcEndID = thisform.swrptlook1.txtendID.Value 
		    llSelected = thisform.chkSelected.Value 
		    
		    IF VARTYPE(lcDeck) # 'C'
		       lcDeck = this.Value
		    ENDIF 
		    
		    IF NOT llSelected
		      SELECT cwellid AS cid FROM wells ;
		         INTO CURSOR SELECTED ;
		         WHERE BETWEEN(cwellid,lcBegID,lcEndID) ;
		         ORDER BY cid
		   ENDIF
		       
		    lnIndex = 1
		    
			SELECT cdeck, ldefault FROM doidecks ;
				INTO CURSOR temp ;
				WHERE cwellid in (SELECT cid FROM selected) ;
				ORDER BY cdeck DESC  ;
				GROUP BY cdeck
				
			this.AddListItem('All Decks',1,1)
			this.AddListItem('All Decks',2,1)
		
			lnx = 2
			IF _TALLY > 0
				SELECT temp
				SCAN
					SCATTER MEMVAR
					IF EMPTY(m.cdeck)
					   m.cdeck = '(blank)'
					ENDIF 
					THIS.ADDLISTITEM(m.cdeck,lnx,1)
					THIS.ADDLISTITEM(m.cdeck,lnx,2)
					lnx = lnx + 1 
				ENDSCAN
			ENDIF
		    this.ListItemId = 1
		ENDIF
		
	ENDPROC

	PROCEDURE cboDeck.Valid
		RETURN .t.
	ENDPROC

	PROCEDURE cboOwnType.Init
		THIS.ADDLISTITEM('All Interest Types',1,1)
		THIS.ADDLISTITEM('*',1,2)
		THIS.ADDLISTITEM('Royalty',2,1)
		THIS.ADDLISTITEM('L',2,2)
		THIS.ADDLISTITEM('Override',3,1)
		THIS.ADDLISTITEM('O',3,2)
		THIS.ADDLISTITEM('Working Interest',4,1)
		THIS.ADDLISTITEM('W',4,2)
		
		THIS.LISTITEMID = 1
		
		DODEFAULT()
		
		
	ENDPROC

	PROCEDURE cboStatus.Init
		THIS.ADDLISTITEM('Any Status',1,1)
		THIS.ADDLISTITEM('*',1,2)
		THIS.ADDLISTITEM('Active',2,1)
		THIS.ADDLISTITEM('A',2,2)
		THIS.ADDLISTITEM('Inactive',3,1)
		THIS.ADDLISTITEM('I',3,2)
		THIS.ADDLISTITEM('Plugged',4,1)
		THIS.ADDLISTITEM('P',4,2)
		THIS.ADDLISTITEM('Sold',5,1)
		THIS.ADDLISTITEM('S',5,2)
		THIS.ADDLISTITEM('Spudded',6,1)
		THIS.ADDLISTITEM('D',6,2)
		THIS.ADDLISTITEM('Shut In',7,1)
		THIS.ADDLISTITEM('N',7,2)
		THIS.ADDLISTITEM('Permitted',8,1)
		THIS.ADDLISTITEM('T',8,2)
		
		IF TYPE('m.goApp') = 'O'
		   IF m.goApp.lAMVersion
		      THIS.ADDLISTITEM('Investment',9,1)
		      THIS.ADDLISTITEM('V',9,2)
		   ENDIF
		ELSE
		   THIS.ADDLISTITEM('Investment',9,1)
		   THIS.ADDLISTITEM('V',9,2)
		ENDIF
		
		this.listitemid = 1
		THIS.REFRESH()
		
		DODEFAULT()
	ENDPROC

	PROCEDURE chkExpanded.Init
		this.Enabled = .f.
	ENDPROC

	PROCEDURE ChkInclude.Click
		IF this.value = .t.
		   thisform.chkSeparate.Enabled = .t.
		   thisform.chkSeparate.value = .f.
		   thisform.chkExpanded.Enabled = .t.
		   thisform.chkExpanded.value = .f.
		   thisform.chkShowAdd.Enabled = .T.
		   thisform.chklNotes.Enabled = .f.
		   thisform.chklRun.Enabled = .t.
		   thisform.cboOwnType.Enabled = .t.
		   thisform.lblType.Enabled = .t.
		   thisform.chklNoSSN.Enabled = .f.
		   thisform.lbldeck.Enabled = .t.
		   thisform.cbodeck.Enabled = .t.
		ELSE
		   thisform.chkSeparate.Enabled = .f.
		   thisform.chkExpanded.Enabled = .f.
		   thisform.chkSeparate.value = .f.
		   thisform.chkExpanded.value = .f.
		   thisform.chkShowAdd.Enabled = .F.
		   thisform.chkShowAdd.value = .F.
		   thisform.chklNotes.Enabled = .t.
		   thisform.chklRun.Enabled = .f.
		   thisform.chklRun.value = .f.
		   thisform.cboOwnType.Enabled = .f.   
		   thisform.lblType.Enabled = .f.   
		   thisform.chklNoSSN.Enabled = .f.
		   thisform.chklNoSSN.value = .f.
		   thisform.lbldeck.Enabled = .f.
		   thisform.cbodeck.Enabled = .f.
		ENDIF         
	ENDPROC

	PROCEDURE chklRun.Click
		DODEFAULT()
		
		IF THIS.VALUE = .T.
		   THISFORM.Runcombo1.Enabled = .T.
		   THISFORM.chkShowAdd.Enabled = .F.
		   THISFORM.chkShowAdd.VALUE = .F.
		   THISFORM.chkSeparate.Enabled = .F.
		   THISFORM.chkSeparate.VALUE = .F.
		   THISFORM.chkExpanded.Enabled = .F.
		   THISFORM.chkExpanded.VALUE = .F.
		   thisform.chklNoSSN.Enabled = .f.
		   thisform.chklnoSSN.Value = .f.
		ELSE
		   THISFORM.Runcombo1.Enabled = .F.
		   THISFORM.chkShowAdd.Enabled = .T.
		   THISFORM.chkSeparate.Enabled = .T.
		   THISFORM.chkExpanded.Enabled = .T.
		   thisform.chklNoSSN.Enabled = .f.
		ENDIF
	ENDPROC

	PROCEDURE chkSelected.Click
		IF this.Value
		   DO FORM commonsource\selected-ids WITH 'WELL' LINKED 
		   lnCount = RECCOUNT('selected')
		   thisform.lblselected.Caption = TRANSFORM(lnCount) + ' Wells Selected'
		   thisform.lblselected.Visible = .T.
		   thisform.lblbegID.Visible = .F.
		   thisform.lblendID.Visible = .F.
		   thisform.swrptlook1.Visible = .F.
		ELSE
		   thisform.lblselected.Visible = .F.
		   thisform.lblbegID.Visible = .T.
		   thisform.lblendID.Visible = .T.
		   thisform.swrptlook1.Visible = .T.
		ENDIF 
	ENDPROC

	PROCEDURE ChkSeparate.Init
		this.Enabled = .f.
	ENDPROC

	PROCEDURE chkShowAdd.Click
		if this.value
		   thisform.chkexpanded.Enabled = .f.
		   thisform.chkexpanded.value = .f.
		   thisform.chklNoSSN.Enabled = .t.
		else
		   thisform.chkexpanded.Enabled = .t.
		   thisform.chklNoSSN.Enabled = .f.
		endif      
	ENDPROC

	PROCEDURE Runcombo1.Init
		dodefault()
		
		this.listitemid = 1
	ENDPROC

	PROCEDURE Swrptlook1.Swlookupbutton1.Click
		LOCAL lcList
		PRIV llOK
		
		llOK = .F.
		lcList = 'cwellid,cwellname,cgroup,cwellstat'
		DO FORM ..\custom\picklist WITH 'Wells', lcList, thisform.swrptlook1.txtbegid.value, 4
		
		IF llOK
		   thisform.swrptlook1.txtBegId.value = cwellid
		   thisform.swrptlook1.txtBegName.value = cwellname
		   thisform.swrptlook1.txtBegId.refresh()
		   thisform.swrptlook1.txtBegName.refresh()
		ENDIF   
		
		thisform.setnextcontrol(thisform.swrptlook1.txtBegId)
		
	ENDPROC

	PROCEDURE Swrptlook1.Swlookupbutton2.Click
		LOCAL lcList
		PRIV llOK
		
		llOK = .F.
		lcList = 'cwellid,cwellname,cgroup,cwellstat'
		DO FORM ..\custom\picklist WITH 'Wells', lcList, thisform.swrptlook1.txtendid.value, 4
		
		IF llOK
		   thisform.swrptlook1.txtEndId.value = cwellid
		   thisform.swrptlook1.txtEndName.value = cwellname
		   thisform.swrptlook1.txtEndId.refresh()
		   thisform.swrptlook1.txtEndName.refresh()
		ENDIF   
		
		thisform.setnextcontrol(thisform.swrptlook1.txtEndId)
		
	ENDPROC

ENDDEFINE
