*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="dminvtrans.scx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="2" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Cursor1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor6" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor7" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor9" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor10" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor12" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor11" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor8" UniqueID="" Timestamp="" />

	AutoOpenTables = .F.
	DataSource = .NULL.
	Height = 491
	Left = 40
	Name = "Dataenvironment"
	Top = 235
	Width = 845

	ADD OBJECT 'Cursor1' AS cursor WITH ;
		Alias = "coabal", ;
		BufferModeOverride = 5, ;
		CursorSource = "coabal", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor1", ;
		Top = 20, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor10' AS cursor WITH ;
		Alias = "glopt", ;
		CursorSource = "glopt", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 150, ;
		Name = "Cursor10", ;
		Top = 260, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor11' AS cursor WITH ;
		Alias = "invtrans", ;
		CursorSource = "invtrans", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 205, ;
		Left = 576, ;
		Name = "Cursor11", ;
		Top = 33, ;
		Width = 91
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor12' AS cursor WITH ;
		Alias = "items1", ;
		CursorSource = "items", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 430, ;
		Name = "Cursor12", ;
		Top = 260, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor2' AS cursor WITH ;
		Alias = "coa", ;
		CursorSource = "coa", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 150, ;
		Name = "Cursor2", ;
		Top = 20, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor3' AS cursor WITH ;
		Alias = "glmaster", ;
		BufferModeOverride = 5, ;
		CursorSource = "glmaster", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 290, ;
		Name = "Cursor3", ;
		Top = 20, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor4' AS cursor WITH ;
		Alias = "items", ;
		BufferModeOverride = 5, ;
		CursorSource = "items", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor4", ;
		Top = 140, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor5' AS cursor WITH ;
		Alias = "wells", ;
		CursorSource = "wells", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 150, ;
		Name = "Cursor5", ;
		Top = 140, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor6' AS cursor WITH ;
		Alias = "wellinv", ;
		CursorSource = "wellinv", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 290, ;
		Name = "Cursor6", ;
		Top = 140, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor7' AS cursor WITH ;
		Alias = "expense", ;
		BufferModeOverride = 5, ;
		CursorSource = "expense", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 440, ;
		Name = "Cursor7", ;
		Top = 20, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor8' AS cursor WITH ;
		Alias = "vendor", ;
		CursorSource = "vendor", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 710, ;
		Name = "Cursor8", ;
		Top = 140, ;
		Width = 91
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor9' AS cursor WITH ;
		Alias = "expcat", ;
		CursorSource = "expcat", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor9", ;
		Top = 260, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

ENDDEFINE

DEFINE CLASS formdminvtrans AS frmdatamanagerformcustom OF "..\custom\cforms.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Swyear1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Swperiod1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtWellID" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtItemID" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtItemDesc" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdLookItem" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtWellName" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdTransfer" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdExit" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdLookWell" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtQuantity" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtPrice" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom6" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtCharge" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom7" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtDescription" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtCatCode" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtCategory" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdExpCat" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Glmaint" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtdAcctDate" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: calccharge		&& Calculate the total charge to the well.
		*m: transfer		&& Perform the transfer.
		*m: updatedesc		&& Updates the desc fields
	*</DefinedPropArrayMethod>

	Caption = "Transfer Inventory To Wells"
	clistexpression = invtrans.cbatch
	cworkarea = invtrans
	DoCreate = .T.
	Height = 309
	HelpContextID = 346
	Name = "FormDminvtrans"
	Visible = .T.
	Width = 554
	_memberdata = <VFPData>
		<memberdata name="updatedesc" display="UpdateDesc"/>
		</VFPData>
	cmdatamanager.Name = "cmdatamanager"
	cmlookupmanager.Name = "cmlookupmanager"
	Mwresize1.lblHighLight.Name = "lblHighLight"
	Mwresize1.lblShading.Name = "lblShading"
	Mwresize1.Name = "Mwresize1"

	ADD OBJECT 'cmdExit' AS cmdcommandbuttoncustom WITH ;
		Caption = "E\<xit", ;
		Height = 36, ;
		Left = 293, ;
		Name = "cmdExit", ;
		TabIndex = 25, ;
		Top = 263, ;
		Width = 75
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdExpCat' AS cmdcommandbuttoncustom WITH ;
		Caption = "Exp Code", ;
		Height = 20, ;
		Left = 24, ;
		Name = "cmdExpCat", ;
		TabIndex = 11, ;
		TabStop = .F., ;
		Top = 96, ;
		Width = 75
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdLookItem' AS cmdcommandbuttoncustom WITH ;
		Caption = "Item ID", ;
		Height = 20, ;
		Left = 24, ;
		Name = "cmdLookItem", ;
		TabIndex = 1, ;
		TabStop = .F., ;
		Top = 24, ;
		Width = 75
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdLookWell' AS cmdcommandbuttoncustom WITH ;
		Caption = " Well ID", ;
		Height = 20, ;
		Left = 24, ;
		Name = "cmdLookWell", ;
		TabIndex = 19, ;
		TabStop = .F., ;
		Top = 171, ;
		Width = 75
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdTransfer' AS cmdcommandbuttoncustom WITH ;
		Caption = "\<Transfer", ;
		Height = 36, ;
		Left = 185, ;
		Name = "cmdTransfer", ;
		TabIndex = 24, ;
		Top = 263, ;
		Width = 75
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'Glmaint' AS glmaint WITH ;
		Left = 19, ;
		Name = "Glmaint", ;
		Top = 270
		*< END OBJECT: ClassLib="..\custom\swgl.vcx" BaseClass="custom" />

	ADD OBJECT 'Lbllabelcustom1' AS lbllabelcustom WITH ;
		Caption = "Production Year", ;
		Left = 24, ;
		Name = "Lbllabelcustom1", ;
		TabIndex = 16, ;
		Top = 137
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom2' AS lbllabelcustom WITH ;
		Caption = "Period", ;
		Left = 185, ;
		Name = "Lbllabelcustom2", ;
		TabIndex = 17, ;
		Top = 137
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom3' AS lbllabelcustom WITH ;
		Caption = "Quantity", ;
		Left = 24, ;
		Name = "Lbllabelcustom3", ;
		TabIndex = 7, ;
		Top = 67
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom4' AS lbllabelcustom WITH ;
		Caption = "Accounting Date", ;
		Left = 343, ;
		Name = "Lbllabelcustom4", ;
		TabIndex = 18, ;
		Top = 137
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom5' AS lbllabelcustom WITH ;
		Caption = "Price", ;
		Left = 202, ;
		Name = "Lbllabelcustom5", ;
		TabIndex = 8, ;
		Top = 67
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom6' AS lbllabelcustom WITH ;
		Caption = "Total Charge", ;
		Left = 362, ;
		Name = "Lbllabelcustom6", ;
		TabIndex = 9, ;
		Top = 67
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom7' AS lbllabelcustom WITH ;
		Caption = "Description", ;
		Left = 24, ;
		Name = "Lbllabelcustom7", ;
		TabIndex = 23, ;
		Top = 214
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Swperiod1' AS swperiod WITH ;
		ControlSource = "invtrans.cperiod", ;
		Height = 20, ;
		Left = 233, ;
		lnoinit = .T., ;
		Name = "Swperiod1", ;
		TabIndex = 15, ;
		Top = 135
		*< END OBJECT: ClassLib="..\custom\swcontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'Swyear1' AS swyear WITH ;
		ControlSource = "invtrans.cyear", ;
		Height = 20, ;
		Left = 119, ;
		lnoinit = .T., ;
		Name = "Swyear1", ;
		TabIndex = 14, ;
		Top = 135
		*< END OBJECT: ClassLib="..\custom\swcontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtCatCode' AS txtquickfill WITH ;
		clistexpression = ccatcode, ;
		clistworkarea = expcat, ;
		ControlSource = "invtrans.ccatcode", ;
		Height = 20, ;
		Left = 336, ;
		MaxLength = 4, ;
		Name = "txtCatCode", ;
		TabIndex = 13, ;
		Top = 97, ;
		Width = 42
		*< END OBJECT: ClassLib="..\custom\cgadget.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtCategory' AS txtquickfill WITH ;
		clistexpression = ccateg, ;
		clistworkarea = expcat, ;
		Height = 20, ;
		Left = 119, ;
		Name = "txtCategory", ;
		TabIndex = 12, ;
		Top = 97, ;
		Width = 210
		*< END OBJECT: ClassLib="..\custom\cgadget.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtCharge' AS txttextboxcustom WITH ;
		ControlSource = "invtrans.ncharge", ;
		Height = 20, ;
		InputMask = "999,999,999.99", ;
		Left = 430, ;
		Name = "txtCharge", ;
		TabIndex = 6, ;
		Top = 65, ;
		Width = 110
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtdAcctDate' AS dpk WITH ;
		ControlSource = "invtrans.dacctdate", ;
		Height = 20, ;
		lallowblankdate = .T., ;
		lcheckdate = .T., ;
		Left = 430, ;
		lmorethan90 = .T., ;
		Name = "txtdAcctDate", ;
		TabIndex = 16, ;
		Top = 135, ;
		Visible = .T., ;
		Width = 75
		*< END OBJECT: ClassLib="..\custom\swdate.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtDescription' AS txttextboxcustom WITH ;
		ControlSource = "invtrans.cdescription", ;
		Height = 20, ;
		Left = 119, ;
		Name = "txtDescription", ;
		TabIndex = 22, ;
		Top = 212, ;
		Width = 421
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtItemDesc' AS txttextboxcustom WITH ;
		BackColor = 212,208,200, ;
		Enabled = .T., ;
		FontBold = .F., ;
		ForeColor = 0,0,0, ;
		Height = 20, ;
		Left = 230, ;
		Name = "txtItemDesc", ;
		TabIndex = 3, ;
		Top = 25, ;
		Width = 310
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtItemID' AS txtquickfill WITH ;
		clistexpression = citemid, ;
		clistworkarea = items1, ;
		ControlSource = "invtrans.citemid", ;
		Height = 20, ;
		Left = 119, ;
		Name = "txtItemID", ;
		TabIndex = 2, ;
		Top = 25, ;
		Width = 106
		*< END OBJECT: ClassLib="..\custom\cgadget.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtPrice' AS txttextboxcustom WITH ;
		ControlSource = "invtrans.nprice", ;
		Height = 20, ;
		InputMask = "999,999,999.9999", ;
		Left = 233, ;
		Name = "txtPrice", ;
		TabIndex = 5, ;
		Top = 65, ;
		Width = 120
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtQuantity' AS txttextboxcustom WITH ;
		ControlSource = "invtrans.nqty", ;
		Height = 20, ;
		Left = 119, ;
		Name = "txtQuantity", ;
		TabIndex = 4, ;
		Top = 65, ;
		Width = 72
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtWellID' AS txtquickfill WITH ;
		clistexpression = cwellid, ;
		clistworkarea = wells, ;
		ControlSource = "invtrans.cwellid", ;
		Height = 20, ;
		Left = 119, ;
		Name = "txtWellID", ;
		TabIndex = 20, ;
		Top = 172, ;
		Width = 106
		*< END OBJECT: ClassLib="..\custom\cgadget.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtWellName' AS txttextboxcustom WITH ;
		BackColor = 212,208,200, ;
		Enabled = .T., ;
		Height = 20, ;
		Left = 228, ;
		Name = "txtWellName", ;
		TabIndex = 21, ;
		Top = 172, ;
		Width = 312
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />
	
	PROCEDURE calccharge		&& Calculate the total charge to the well.
		lnCharge = thisform.txtquantity.value * thisform.txtprice.value
		if invtrans.ncharge <> lnCharge
		   thisform.cmdatamanager.replace('Invtrans','Ncharge',lnCharge)
		   thisform.txtcharge.refresh()
		endif
	ENDPROC

	PROCEDURE Init
		if dodefault()
		   thisform.oregistry = findglobalobject('cmregistry')
		   thisform.omessage  = findglobalobject('cmmessage')
		endif   
	ENDPROC

	PROCEDURE list
		LPARAMETERS cWorkarea
		
		
		llok = .f.
		
		SELECT cbatch, citemid, cwellid, dacctdate, cdescription, nqty ;
		  FROM invtrans ;
		  INTO CURSOR temp READWRITE ;
		  ORDER BY cbatch 
		INDEX ON cbatch TAG cbatch
		INDEX ON citemid TAG citemid  
		INDEX ON cwellid TAG cwellid
		INDEX ON cdescription TAG cdesc
		INDEX ON nqty TAG nqty
		  
		lclist = 'dacctdate,cwellid,citemid,cdescription,nqty'
		
		DO FORM ..\custom\picklist WITH 'temp', lclist, invtrans.cbatch, 5, .t.
		
		IF llok
		   SELECT invtrans
		   LOCATE FOR cbatch == temp.cbatch
		   thisform.UpdateDesc()
		   thisform.Refresh()
		endif
		
		
		
		
	ENDPROC

	PROCEDURE save
		LPARAMETERS cworkarealist
		
		IF NOT THIS.cmDataManager.IsChanged(m.cWorkareaList)
		   RETURN
		ENDIF
		   
		IF EMPTY(THISFORM.swyear1.VALUE) OR EMPTY(THISFORM.swperiod1.VALUE)
		   THISFORM.omessage.warning('You must specify a valid production period.')
		   THISFORM.swyear1.SETFOCUS()
		   RETURN
		ENDIF
		
		IF EMPTY(THISFORM.txtcategory.VALUE) OR EMPTY(THISFORM.txtcatcode.VALUE)
		   THISFORM.omessage.warning('You must specify a valid expense category.')
		   THISFORM.txtcategory.SETFOCUS()
		   RETURN
		ENDIF
		
		IF THISFORM.txtquantity.VALUE = 0
		   THISFORM.omessage.warning('You must specify a valid quantity.')
		   THISFORM.txtquantity.SETFOCUS()
		   RETURN
		ENDIF
		
		IF THISFORM.txtprice.VALUE = 0
		   THISFORM.omessage.warning('You must specify a valid price.')
		   THISFORM.txtprice.SETFOCUS()
		   RETURN
		ENDIF
		
		IF THISFORM.txtcharge.VALUE = 0
		   THISFORM.omessage.warning('You must specify a valid charge.')
		   THISFORM.txtcharge.SETFOCUS()
		   RETURN
		ENDIF
		
		IF EMPTY(THISFORM.txtdAcctDate.Value)
		   THISFORM.omessage.warning('You must specify a valid accounting date.')
		   THISFORM.txtquantity.SETFOCUS()
		   RETURN
		ENDIF
		
		IF EMPTY(THISFORM.txtwellid.VALUE)
		   THISFORM.omessage.warning('You must specify a valid well to transfer the inventory to.')
		   THISFORM.txtquantity.SETFOCUS()
		   RETURN
		ENDIF
		
		IF NOT THISFORM.omessage.CONFIRM('Please confirm the transfer of ' + ALLT(STR(THISFORM.txtquantity.VALUE)) + ' of item: ' + ;
		      ALLT(THISFORM.txtitemdesc.VALUE) + ' to well: ' + THISFORM.txtwellname.VALUE)
		   RETURN
		ENDIF
		
		IF THIS.transfer()
		   DODEFAULT(cworkarealist)
		ENDIF
		
	ENDPROC

	PROCEDURE transfer		&& Perform the transfer.
		LOCAL lAPTran, lcBatch, lcExpClear, lcInventory, llReturn, llsuccess, llupdate, lnQty, loError
		*:Global cBatch, cPeriod, cYear, ccatcode, ccateg, cexpclass, cidexpe, citemid, cmemo, cpayee
		*:Global cvendorid, cwellid, dexpdate, namount
		llReturn = .T.
		
		TRY
		    SELE glopt
		    lcExpClear  = glopt.cexpclear
		    lcInventory = glopt.cinventory
		    IF EMPTY(lcExpClear)
		        THISFORM.oMessage.Warning('You must specify the Expense Clearing Account in the General Ledger section of the Edit >> Preferences screen before any transfers can be done.')
		        llReturn = .F.
		        EXIT
		    ENDIF
		    IF EMPTY(lcInventory)
		        THISFORM.oMessage.Warning('You must specify the Inventory Account in the General Ledger section of the Edit >> Preferences screen before any transfers can be done.')
		        llReturn = .F.
		        EXIT
		    ENDIF
		
		    m.cwellid  = THISFORM.txtwellid.VALUE
		    m.namount  = THISFORM.txtcharge.VALUE
		    m.ccatcode = THISFORM.txtcatcode.VALUE
		    m.ccateg   = THISFORM.txtcategory.VALUE
		    m.dexpdate = THISFORM.txtdAcctDate.VALUE
		
		
		*  Make sure the period or year isn't closed
		    IF NOT THISFORM.glmaint.CheckPeriod(m.dexpdate)
		        THISFORM.oMessage.Warning('Unable to transfer inventory. Either the fiscal year or period represented by this date has been closed.')
		        llReturn = .F.
		        EXIT
		    ENDIF
		
		    SELE expcat
		    LOCATE FOR ccatcode = m.ccatcode
		    IF FOUND()
		        SCATTER MEMVAR
		    ELSE
		        m.cexpclass = '0'
		    ENDIF
		
		    lcBatch   = invtrans.cbatch
		    m.cbatch  = invtrans.cbatch
		    lnQty     = OLDVAL('nqty', 'Invtrans')
		    m.citemid = invtrans.citemid
		
		*  Delete any previous batch entries in glmaster
		    THISFORM.glmaint.delbatch(lcBatch)
		
		*  Delete any expense entries
		    SELE expense
		    SCAN FOR cbatch == lcBatch
		        DELE NEXT 1
		    ENDSCAN
		
		    m.cpayee = 'Inventory Transfer'
		
		*  Add qty back to inventory
		    SELE items
		    LOCATE FOR citemid == m.citemid
		    IF FOUND()
		        IF NOT THISFORM.cmdatamanager.isnew('Invtrans')
		            REPLACE nqtyonhand WITH nqtyonhand + lnQty
		        ENDIF
		        SELECT items
		        m.cvendorid = cvendorid
		        IF NOT EMPTY(m.cvendorid)
		            SELECT vendor
		            SET ORDER TO cvendorid
		            IF SEEK(m.cvendorid)
		                m.cpayee = cvendname
		            ENDIF
		        ENDIF
		        m.lAPTran = .T.
		    ENDIF
		
		    m.cidexpe = THISFORM.oregistry.incrementcounter('%Shared.Counters.Expense')
		    SET DELE OFF
		    SELE expense
		    SET ORDER TO cidexpe
		    DO WHILE SEEK(m.cidexpe)
		        m.cidexpe = THISFORM.oregistry.incrementcounter('%Shared.Counters.Expense')
		    ENDDO
		    SET DELE ON
		    m.cYear   = THISFORM.swyear1.VALUE
		    m.cPeriod = THISFORM.swperiod1.VALUE
		    m.cmemo   = THISFORM.txtdescription.VALUE
		
		    INSERT INTO expense FROM MEMVAR
		
		*  Clearing entry
		    THISFORM.glmaint.cSource    = 'DM'
		    THISFORM.glmaint.cbatch     = lcBatch
		    THISFORM.glmaint.dGLDate    = THISFORM.txtdAcctDate.VALUE
		    THISFORM.glmaint.cReference = 'Inventory Trans'
		    THISFORM.glmaint.cDesc      = THISFORM.txtdescription.VALUE
		    THISFORM.glmaint.cAcctNo    = lcExpClear
		    THISFORM.glmaint.cUnitNo    = THISFORM.txtwellid.VALUE
		    THISFORM.glmaint.ccatcode   = THISFORM.txtcatcode.VALUE
		    THISFORM.glmaint.namount    = THISFORM.txtcharge.VALUE
		    THISFORM.glmaint.cid        = ''
		    THISFORM.glmaint.cBunch     = ''
		    THISFORM.glmaint.mNotes     = ''
		    THISFORM.glmaint.cYear      = ' '
		    THISFORM.glmaint.cPeriod    = ' '
		    THISFORM.glmaint.cDeptNo    = ''
		    THISFORM.glmaint.updatebatch()
		
		* Inventory Entry
		    THISFORM.glmaint.cAcctNo  = lcInventory
		    THISFORM.glmaint.cUnitNo  = ''  &&  Blank out the well ID for the Inventory transaction - BH 05/01/08
		    THISFORM.glmaint.ccatcode = ''  &&  And the category code
		    THISFORM.glmaint.cid      = ''
		    THISFORM.glmaint.namount  = THISFORM.txtcharge.VALUE * -1
		    THISFORM.glmaint.updatebatch()
		
		
		    llReturn = THISFORM.glmaint.chkBalance()
		
		    llsuccess = .T.
		
		    IF llReturn
		        SELE items
		        LOCATE FOR citemid = invtrans.citemid AND cType = 'P'  &&  Only check if it's a product - BH 06/04/2008
		        IF FOUND()
		            IF (nqtyonhand - invtrans.nQty < 0) AND NOT lNegQty  &&  If it's going to be negative, make sure the item allows it
		                THISFORM.oMessage.Warning('The transfer cannot be completed, because doing so would take this item to a negative quantity.  The option for allowing negative quantities is not enabled for this item.')
		                llReturn = .F.
		                EXIT
		            ENDIF
		
		            REPL nqtyonhand WITH nqtyonhand - invtrans.nQty
		        ENDIF
		
		        BEGIN TRANSACTION
		        SELE glmaster
		        llupdate = TABLEUPDATE(.T.)
		        SELE coabal
		        = TABLEUPDATE(.T.)
		
		        IF llupdate
		            SELE items
		            llupdate = TABLEUPDATE(.T.)
		
		            IF llupdate
		                SELE expense
		                llupdate = TABLEUPDATE(.T.)
		            ELSE
		                llsuccess = .F.
		            ENDIF
		        ELSE
		            llsuccess = .F.
		        ENDIF
		        IF llsuccess
		            END TRANSACTION
		            THISFORM.oMessage.DISPLAY('Transfer of inventory was successful.')
		            llReturn = .T.
		
		        ELSE
		            ROLLBACK
		            THISFORM.oMessage.severe('Transfer of inventory failed.')
		            llReturn = .F.
		        ENDIF
		    ENDIF
		CATCH TO loError
		    llReturn = .F.
		    DO errorlog WITH 'Transfer', loError.LINENO, 'Inventory Trans', loError.ERRORNO, loError.MESSAGE, '', loError
		    MESSAGEBOX('Unable to process the inventory transfer at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		          'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		RETURN llReturn
		
		
	ENDPROC

	PROCEDURE updatedesc		&& Updates the desc fields
		sele expcat
		locate for ccatcode = invtrans.ccatcode
		if found()
		   thisform.txtcategory.value = expcat.ccateg
		else
		   thisform.txtcategory.value = ''
		endif
		
		sele wells
		locate for cwellid = invtrans.cwellid
		if found()
		   thisform.txtwellname.value = wells.cwellname
		else   
		   thisform.txtwellname.value = ''
		endif      
		
		sele items
		locate for citemid = invtrans.citemid
		if found()
		   thisform.txtitemdesc.value = items.citemdesc
		else   
		   thisform.txtitemdesc.value = ''
		endif   
	ENDPROC

	PROCEDURE cmdatamanager.afternav
		LPARAMETERS cworkarea
		
		thisform.updatedesc()
	ENDPROC

	PROCEDURE cmdatamanager.afternew
		LPARAMETERS cworkarea
		
		if m.cworkarea = 'Invtrans'
		   repl cbatch with THISFORM.oregistry.incrementcounter('%Shared.Counters.Batch')
		endif
		   
		thisform.setnextcontrol(thisform.txtitemid)
	ENDPROC

	PROCEDURE cmdatamanager.beforedelete
		LPARAMETERS cworkarea
		
		IF m.cworkarea = 'Invtrans'
		   m.cBatch  = invtrans.cBatch
		   lnQty     = invtrans.nqty
		   m.citemid = invtrans.citemid
		
		   *  Make sure the period or year isn't closed
		   IF NOT THISFORM.glmaint.CheckPeriod(invtrans.dAcctDate,.T.)
		      THISFORM.oMessage.warning('Unable to delete this transfer. Either the fiscal year or period for this date has been closed.')
		      RETURN .f.
		   ENDIF
		
		   *  Delete any previous batch entries in glmaster
		   THISFORM.glmaint.delbatch(m.cBatch)
		   SELE glmaster
		   =TABLEUPDATE(.T.)
		   SELE coabal
		   =TABLEUPDATE(.T.)
		
		   *  Delete any expense entries
		   SELE expense
		   SCAN FOR cBatch == m.cBatch
		      DELE NEXT 1
		   ENDSCAN
		   =TABLEUPDATE(.T.)
		   *  Add qty back to inventory
		   SELE items
		   LOCATE FOR citemid == m.citemid
		   IF FOUND()
		      REPLACE nqtyonhand WITH nqtyonhand + lnQty
		   ENDIF
		   =TABLEUPDATE(.T.)
		ENDIF
		
	ENDPROC

	PROCEDURE cmdExit.Click
		thisform.release()
	ENDPROC

	PROCEDURE cmdExpCat.Click
		LOCAL lcList
		PRIV llOK
		
		llOK = .F.
		lcList = 'ccateg,ccatcode,cexpclass'
		
		do form picklist with 'Expcat', lcList, thisform.txtcategory.value, 3
		
		if llok
		   thisform.txtcategory.set('value',expcat.ccateg)
		   thisform.txtcatCode.set('Value',expcat.ccatcode)
		endif   
		
		thisform.setnextcontrol(thisform.txtCategory)
	ENDPROC

	PROCEDURE cmdLookItem.Click
		LOCAL lcList
		PRIV llOK
		
		llOK = .F.
		lcList = 'citemid,citemdesc'
		
		do form picklist with 'Items', lcList, thisform.txtitemid.value, 2
		
		if llok
		   thisform.txtitemid.value = items.citemid
		   if invtrans.citemid <> items.citemid
		      thisform.cmdatamanager.replace('Invtrans','Citemid',items.citemid)
		   endif   
		   thisform.txtitemdesc.value = items.citemdesc
		   if invtrans.nprice <> items.nprice1
		      thisform.cmdatamanager.replace('Invtrans','Nprice',items.nprice1)
		   endif
		endif   
		
		thisform.setnextcontrol(thisform.txtitemiD)
	ENDPROC

	PROCEDURE cmdLookWell.Click
		LOCAL lcList
		PRIV llOK
		
		llOK = .F.
		lcList = 'cwellid,cwellname,cwellstat'
		
		do form picklist with 'Wells', lcList, thisform.txtwellid.value, 3
		
		if llok
		   thisform.txtwellid.set('value',wells.cwellid)
		   thisform.txtwellname.set('value',wells.cwellname)
		endif   
		
		thisform.setnextcontrol(thisform.txtWellID)
	ENDPROC

	PROCEDURE cmdTransfer.Click
		thisform.save()
	ENDPROC

	PROCEDURE cmdTransfer.When
		IF NOT thisform.cmdatamanager.isnew('invtrans')
		   RETURN .f.
		ELSE
		   RETURN .t.
		ENDIF 
	ENDPROC

	PROCEDURE txtCatCode.GotFocus
		ON KEY LABEL F2 _screen.ActiveForm.cmdExpCat.click()
		
		DODEFAULT()
	ENDPROC

	PROCEDURE txtCatCode.InteractiveChange
		IF DODEFAULT()
		   SELECT expcat
		   LOCATE FOR ccatcode = this.Value
		   IF FOUND()
		      thisform.txtCategory.set('value',expcat.cCateg)
		   ELSE
		      thisform.txtCategory.set('value','')
		   ENDIF
		ENDIF       
		   
	ENDPROC

	PROCEDURE txtCatCode.LostFocus
		ON KEY LABEL F2
	ENDPROC

	PROCEDURE txtCategory.GotFocus
		ON KEY LABEL F2 _screen.ActiveForm.cmdExpCat.click()
		
		DODEFAULT()
	ENDPROC

	PROCEDURE txtCategory.InteractiveChange
		IF DODEFAULT()
		   SELECT expcat
		   LOCATE FOR ccateg = this.Value
		   IF FOUND()
		      thisform.txtcatCode.set('value',expcat.ccatcode)
		   ELSE
		      thisform.txtcatCode.set('value','')
		   ENDIF
		ENDIF       
		   
	ENDPROC

	PROCEDURE txtCategory.LostFocus
		ON KEY LABEL F2
	ENDPROC

	PROCEDURE txtItemDesc.When
		RETURN .F.
	ENDPROC

	PROCEDURE txtItemID.GotFocus
		ON KEY LABEL F2 _screen.ActiveForm.cmdLookItem.click()
		
		DODEFAULT()
	ENDPROC

	PROCEDURE txtItemID.InteractiveChange
		IF DODEFAULT()
		   SELECT items
		   LOCATE FOR citemid = this.Value
		   IF FOUND()
		      thisform.txtitemDesc.set('value',items.citemdesc)
		   ELSE
		      thisform.txtitemDesc.set('value',items.citemdesc)
		   ENDIF 
		ENDIF    
	ENDPROC

	PROCEDURE txtItemID.LostFocus
		ON KEY LABEL F2
	ENDPROC

	PROCEDURE txtPrice.LostFocus
		thisform.calccharge()
	ENDPROC

	PROCEDURE txtQuantity.LostFocus
		IF THIS.VALUE <> 0
		   THISFORM.calccharge()
		ENDIF
		
	ENDPROC

	PROCEDURE txtWellID.GotFocus
		ON KEY LABEL F2 _screen.ActiveForm.cmdLookWell.click()
		
		DODEFAULT()
	ENDPROC

	PROCEDURE txtWellID.InteractiveChange
		IF DODEFAULT()
		   SELECT wells
		   LOCATE FOR cwellid == this.Value
		   IF FOUND()
		      thisform.txtwellName.set('value',wells.cwellname)
		   ELSE
		      thisform.txtwellName.set('value','')
		   ENDIF 
		ENDIF    
	ENDPROC

	PROCEDURE txtWellID.LostFocus
		ON KEY LABEL F2
	ENDPROC

	PROCEDURE txtWellName.When
		RETURN .F.
	ENDPROC

ENDDEFINE
