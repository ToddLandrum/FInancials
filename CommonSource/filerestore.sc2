*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="filerestore.scx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="2" />

	AutoOpenTables = .F.
	DataSource = .NULL.
	Height = 200
	Left = 40
	Name = "Dataenvironment"
	Top = 235
	Width = 520

ENDDEFINE

DEFINE CLASS formfilerestore AS frmformcustom OF "..\custom\cforms.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Pages" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Pages.Page1.Lbllabelcustom1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Pages.Page1.cmdRestore" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Pages.Page1.cmdExit" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Pages.Page1.Cntgetfile1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Pages.Page1.Lbllabelcustom2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Pages.Page1.Lbllabelcustom3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Pages.Page1.chkCheckFormats" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Pages.Page1.chkReportFormats" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Swencrypt" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: ftpconnect
		*m: getfilelist
		*m: process
		*m: processoffrest
		*m: testdatafix
		*m: togglepassiveftp
		*p: crestorefile
		*p: lftpconnected
		*p: loffbackup
		*p: oprogress
	*</DefinedPropArrayMethod>

	Caption = "Restore Data Files"
	DataSession = 2
	DoCreate = .T.
	Height = 462
	HelpContextID = 47
	Name = "FormFilerestore"
	ShowTips = .T.
	Width = 692
	Mwresize1.lblHighLight.Name = "lblHighLight"
	Mwresize1.lblShading.Name = "lblShading"
	Mwresize1.Left = 540
	Mwresize1.Name = "Mwresize1"
	Mwresize1.Top = 300

	ADD OBJECT 'Pages' AS pgfpageframecustom WITH ;
		ErasePage = .T., ;
		Height = 448, ;
		Left = 6, ;
		Name = "Pages", ;
		PageCount = 1, ;
		Tabs = .T., ;
		Top = 8, ;
		Width = 678, ;
		ZOrderSet = 0, ;
		Page1.Caption = "", ;
		Page1.Name = "Page1"
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="pageframe" />

	ADD OBJECT 'Pages.Page1.chkCheckFormats' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Include Check Formats in Restore (If available)", ;
		Left = 102, ;
		Name = "chkCheckFormats", ;
		TabIndex = 4, ;
		ToolTipText = "Restores all check formats to preserve any changes that might have been made to match up the format to your check stock. If available means if they were included in this backup", ;
		Top = 300, ;
		Value = .F.
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'Pages.Page1.chkReportFormats' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Include Report Formats in Restore (If available)", ;
		Left = 365, ;
		Name = "chkReportFormats", ;
		TabIndex = 5, ;
		ToolTipText = "Restores purchased state compliance reports and any custom reports from the Rpts folder. If available means if they were included in this backup", ;
		Top = 300, ;
		Value = .F.
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'Pages.Page1.cmdExit' AS cmdcommandbuttoncustom WITH ;
		Caption = "E\<xit", ;
		Height = 60, ;
		Left = 353, ;
		Name = "cmdExit", ;
		TabIndex = 4, ;
		Top = 336, ;
		Width = 96
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'Pages.Page1.cmdRestore' AS cmdcommandbuttoncustom WITH ;
		Caption = "\<Restore", ;
		Height = 60, ;
		Left = 221, ;
		Name = "cmdRestore", ;
		TabIndex = 3, ;
		Top = 336, ;
		Width = 99
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'Pages.Page1.Cntgetfile1' AS cntgetfile WITH ;
		cextensionlist = zip, ;
		Height = 24, ;
		Left = 21, ;
		lfullpath = .T., ;
		Name = "Cntgetfile1", ;
		TabIndex = 2, ;
		Top = 216, ;
		Width = 636, ;
		cmdPath.Left = 608, ;
		cmdPath.Name = "cmdPath", ;
		cmdPath.Top = 0, ;
		edtPath.Height = 23, ;
		edtPath.Left = 0, ;
		edtPath.Name = "edtPath", ;
		edtPath.Top = 0, ;
		edtPath.Width = 600
		*< END OBJECT: ClassLib="..\custom\cgadget.vcx" BaseClass="container" />

	ADD OBJECT 'Pages.Page1.Lbllabelcustom1' AS lbllabelcustom WITH ;
		AutoSize = .T., ;
		Caption = "This procedure will restore the data files into the currently open company.", ;
		FontSize = 10, ;
		Height = 18, ;
		Left = 126, ;
		Name = "Lbllabelcustom1", ;
		Top = 71, ;
		Width = 422, ;
		WordWrap = .T.
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Pages.Page1.Lbllabelcustom2' AS lbllabelcustom WITH ;
		Caption = "Backup To Restore From:", ;
		Left = 29, ;
		Name = "Lbllabelcustom2", ;
		Top = 192
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Pages.Page1.Lbllabelcustom3' AS lbllabelcustom WITH ;
		Alignment = 2, ;
		Caption = "**  All files in the currently open company will be REPLACED by the files from the backup being restored.  **", ;
		FontSize = 10, ;
		ForeColor = 255,0,0, ;
		Height = 34, ;
		Left = 127, ;
		Name = "Lbllabelcustom3", ;
		Top = 104, ;
		Width = 421, ;
		WordWrap = .T.
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Swencrypt' AS swencrypt WITH ;
		Height = 17, ;
		Left = 24, ;
		Name = "Swencrypt", ;
		Top = 276, ;
		Width = 36
		*< END OBJECT: ClassLib="..\custom\sw_encrypt.vcx" BaseClass="custom" />
	
	PROCEDURE beforeclose
		LPARAMETERS nclosereason
		
		thisform.lChanged = .F.
		
		DODEFAULT(nclosereason)
	ENDPROC

	PROCEDURE Error
		LPARAMETERS nerror,cmethod,nline
		
		if nerror <> 1540
		   dodefault(nerror,cmethod,nline)
		endif   
	ENDPROC

	PROCEDURE ftpconnect
		LOCAL lcUser, lcPass, lcServer, lnError
		
		loIP = CREATEOBJECT('swftp')
		
		IF NOT THISFORM.lFTPConnected
		   IF NOT USED('offb1')
		      USE (m.goapp.cdatafilepath+'offb1') IN 0
		   ENDIF
		   SELE offb1
		   GO TOP
		
		   lnCount = 1
		   IF '|' $ cUserName
		      lcUser = SUBSTR(cusername,AT('|',cUserName)+1)
		   ELSE
		      lcUser = ALLTRIM(cUserName)
		   ENDIF 
		      
		   lcPass = THISFORM.swencrypt.decrypt('@349asks',offb1.cpassword)
		   lcServer = ALLTRIM(m.goapp.cOffsiteServer)
		   IF EMPTY(lcServer)
		      lcServer = 'ftp.sherware.com'
		   ENDIF
		   lnError = loIP.FTPConnect(TRIM(lcServer),TRIM(lcUser),TRIM(lcPass) )
		   IF lnError = 0
		      THISFORM.lFTPConnected = .T.
		   ELSE
		      THISFORM.lFTPConnected = .F.
		   ENDIF
		   DO WHILE (THISFORM.lFTPConnected = .F.)
		      lnError = loIP.FTPConnect(TRIM(lcServer),TRIM(lcUser),TRIM(lcPass) )
		      IF lnError = 0
		         THISFORM.lFTPConnected = .T.
		      ELSE
		         THISFORM.lFTPConnected = .F.
		      ENDIF
		      lnCount = lnCount + 1
		      IF lnCount > 5
		         EXIT
		      ENDIF
		   ENDDO
		   IF THISFORM.lFTPConnected = .F.
		      MESSAGEBOX('Unable to connect to the offsite server. Check your username and password and try again.',16,'Offsite Connection Error')
		   ENDIF
		ENDIF
		
	ENDPROC

	PROCEDURE getfilelist
	ENDPROC

	PROCEDURE process
		LPARAMETERS tlChecks, tlReports, tlOffsite
		LOCAL lcDataPath, lcFileName, lcFolderName
		LOCAL llChecks, llReports, llReturn
		LOCAL laChecks[1], laRpts[1], lcDataFilePath, lcDrive, lcSavePath, lcdatabase, lnError, lnFiles
		LOCAL lnHandle, lni, loError
		*:Global jcVersion
		
		llChecks  = tlChecks
		llReports = tlReports
		llReturn  = .T.
		
		TRY
		* Check for other open forms. Can't restore with other forms open
		    IF swOpenForms(THIS.NAME)
		        THIS.omessage.severe('All other forms must be closed before backing up data.')
		        llReturn = .F.
		        EXIT
		    ENDIF
		
		    IF EMPTY(THISFORM.cRestoreFile)
		        THISFORM.omessage.warning('Please choose a file to restore.')
		        llReturn = .F.
		        EXIT
		    ELSE
		        lcFileName = THISFORM.cRestoreFile
		        TRY
		            IF NOT FILE('g:\noscrubmsg.txt')
		                IF '_sw.zip' $ LOWER(lcFileName)
		                    IF NOT THISFORM.omessage.CONFIRM('It appears this backup had previously been uploaded to SherWare Support.' + ;
		                              ' If that is the case all the tax identification numbers such as federal tax ids' + ;
		                              ' and SSNs have been scrubbed. Are you sure you want to restore this backup?')
		                        THISFORM.omessage.warning('Restore Process Aborted.')
		                        llReturn = .F.
		                        EXIT
		                    ENDIF
		                ENDIF
		            ENDIF
		        CATCH
		        ENDTRY
		        IF llReturn = .F.
		            EXIT
		        ENDIF
		        IF NOT tlOffsite
		            IF NOT THISFORM.omessage.CONFIRM('This will overwrite the existing company with data from the backup file: ' + ALLT(STRTRAN(lcFileName, '\', '\\')) + '. Continue?')
		                THISFORM.omessage.warning('Restore Process Aborted.')
		                llReturn = .F.
		                EXIT
		            ENDIF
		        ENDIF
		    ENDIF
		
		    IF TYPE('thisform.oApp') = 'O'
		        lcDataPath = ALLT(m.goApp.cDataFilePath)
		
		        IF LEFT(lcDataPath, 1) = '\' AND LEFT(lcDataPath, 2) <> '\\'  &&  If starting with just a slash, add the drive letter to it - BH 03/05/07
		            lcDataPath = ALLT(SYS(5)) + lcDataPath
		        ENDIF
		
		        IF NOT ':' $ lcDataPath AND NOT '\\' $ lcDataPath
		            lcSavePath = ALLT(CURDIR())
		            CD (lcDataPath)
		            lcDrive    = ALLT(SYS(5))
		            lcDataPath = lcDrive + lcSavePath + lcDataPath
		            CD (lcSavePath)
		        ENDIF
		        lcFolderName = lcDataPath
		        lcDataPath   = '"' + lcDataPath + '"'
		
		    ELSE
		        lcDataPath = '"' + ALLTRIM(GETDIR()) + '"'
		    ENDIF
		
		* Close data in all sessions
		    m.goApp.closealldata()
		    CLOSE DATABASES ALL 
		    IF IsFileLocked('appdata.dbc')
		       MESSAGEBOX("The data for the company you are attempting to restore is in use. " + ;
		                  "Make sure everyone else is out of this company and also make sure " + ;
		                  "you don't have Advanced Reporting open for this company and then try again.",0,"Company Open")
		       llReturn = .f.
		       EXIT 
		    ENDIF 
		    
		    lnError = swbackup('R', lcFolderName, THISFORM.cRestoreFile, .F., .F., .F., llChecks, llReports)
		
		    WAIT CLEAR
		
		    TRY
		        USE TRIM(m.goApp.cDataFilePath) + 'Appreg01' IN 0 EXCLUSIVE
		        SELECT appreg01
		        REINDEX
		        USE
		    CATCH
		    ENDTRY
		
		    TRY
		        IF FILE(TRIM(m.goApp.cDataFilePath) + 'Appreg02.dbf')  &&  If appreg02 exists in the data folder, reindex it
		            USE TRIM(m.goApp.cDataFilePath) + 'Appreg02' IN 0 EXCLUSIVE
		            SELECT appreg02
		            REINDEX
		            USE
		        ENDIF
		    CATCH
		    ENDTRY
		
		    m.goApp.closealldata()
		    m.goApp.opensdt()
		    CLOSE DATABASES ALL
		
		    lcDataFilePath = ALLTRIM(m.goApp.cDataFilePath)
		    llReturn       = .T.
		    USE newdbc.DBC IN 0
		    IF NOT isfilelocked(lcDataFilePath + 'appdata.dbc')
		        SET SAFETY OFF
		        IF NOT USED('newdbc')
		            USE newdbc.DBC IN 0
		        ENDIF
		        TRY
		            SELECT newdbc
		            COPY TO (lcDataFilePath + 'appdata.dbc') PRODUCTION
		            USE IN newdbc
		            lnHandle = FOPEN(lcDataFilePath + 'appdata.dbc', 2)
		            = FSEEK(lnHandle, 28)
		            = FWRITE(lnHandle, CHR(7))
		            = FCLOSE(lnHandle)
		            USE (lcDataFilePath + 'appdata.dbc') IN 0 EXCL
		            SELECT appdata
		            REINDEX
		            USE
		        CATCH TO loError
		            MESSAGEBOX('Error: ' + loError.MESSAGE + CHR(10) + ;
		                  'Line No: ' + TRANSFORM(loError.LINENO), 16, 'Error')
		            llReturn = .F.
		        FINALLY
		        ENDTRY
		
		        lcdatabase = TRIM(m.goApp.cDataFilePath) + 'AppData'
		        m.goApp.closealldata()
		        OPEN DATABASE (lcdatabase)
		        m.goApp.opensdt()
		        oMeta.setdatabase(DBC())
		        IF llReturn
		            oMeta.osdtmgr.UPDATE('ALL')
		        ENDIF
		*        oMeta.osdtmgr.REINDEX('ALL')
		        jcVersion = STRTRAN(m.goApp.cfileversion, '.', '')
		
		        IF NOT USED('compmast')
		            USE (m.goApp.cCommonFolder + 'compmast') IN 0
		        ENDIF
		
		        SELE compmast
		        LOCATE FOR UPPER(cidcomp) == m.goApp.cidcomp
		        IF FOUND()
		            IF FILE(lcDataFilePath + 'version.dbf')
		                USE (lcDataFilePath + 'version') IN 0
		                SELECT VERSION
		                GO TOP
		                REPLACE cVersion WITH jcVersion
		                USE IN VERSION
		                SELECT compmast
		                REPLACE cVersion WITH jcVersion
		            ENDIF
		        ENDIF
		        m.goApp.opencompany1(.T.)
		        m.goApp.opencompany2(.T.)
		    ENDIF
		
		    DO CASE
		        CASE lnError = 0
		            IF llChecks
		* Copy the restored checks to their original location
		                TRY
		                    IF DIRECTORY(lcDataFilePath + 'Checks')
		                        WAIT WINDOW NOWAIT 'Restoring check formats...'
		                        lnFiles = ADIR(laChecks, lcDataFilePath + 'Checks\*.*')
		                        FOR lni = 1 TO lnFiles
		                            COPY FILE (lcDataFilePath + 'Checks\' + laChecks[lni, 1]) TO (ALLTRIM(m.goApp.cChecksFolder) + laChecks[lni, 1])
		                        ENDFOR
		                        ERASE (lcDataFilePath + 'Checks\*.*')
		                        RD (lcDataFilePath + 'Checks')
		                        WAIT CLEAR
		                    ENDIF
		                CATCH TO loError
		                ENDTRY
		                FLUSH
		            ENDIF
		            IF llReports
		* Copy the restored checks to their original location
		                TRY
		                    IF DIRECTORY(lcDataFilePath + 'Rpts')
		                        WAIT WINDOW NOWAIT 'Restoring report formats...'
		                        lnFiles = ADIR(laRpts, lcDataFilePath + 'Rpts\*.*')
		                        FOR lni = 1 TO lnFiles
		                            COPY FILE (lcDataFilePath + 'Rpts\' + laRpts[lni, 1]) TO (ALLTRIM(m.goApp.cRptsFolder) + laRpts[lni, 1])
		                        ENDFOR
		                        ERASE (lcDataFilePath + 'Rpts\*.*')
		                        RD (lcDataFilePath + 'Rpts')
		                        WAIT CLEAR
		                    ENDIF
		                CATCH TO loError
		                ENDTRY
		                FLUSH
		            ENDIF
		            THISFORM.omessage.DISPLAY('Restore Completed Successfully')
		            THISFORM.PAGES.Page1.Cntgetfile1.edtPath.SET('value', '')
		            THISFORM.RELEASE() &&  If it restored successfully, no need to keep the form open
		        CASE lnError = 4
		            THISFORM.omessage.DISPLAY('Unable to open backup file.')
		        CASE lnError = 6
		            THISFORM.omessage.DISPLAY('Unable to extract files from backup file.')
		        CASE lnError = 8
		            THISFORM.omessage.DISPLAY('Unable to close backup file.')
		    ENDCASE
		
		CATCH TO loError
		    llReturn = .F.
		    DO errorlog WITH 'Process', loError.LINENO, 'File Restore', loError.ERRORNO, loError.MESSAGE, '', loError
		    MESSAGEBOX('Unable to process the restore at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		          'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		RETURN llReturn
		
		
		
		
		
		
	ENDPROC

	PROCEDURE processoffrest
	ENDPROC

	PROCEDURE testdatafix
		return
		swselect('disbhist')
		swselect('ownpcts')
		swselect('wellinv')
		
		WAIT WINDOW NOWAIT 'Creating ownpcts table....'
		SELECT ciddisb, cownerid, cwellid, ctypeinv, hyear, hperiod, crunyear, nrunno FROM disbhist INTO CURSOR temp ;
		  ORDER BY ciddisb ;
		  GROUP BY ciddisb 
		 
		SELECT temp
		SCAN
		   SCATTER memvar
		   SELECT wellinv
		   LOCATE FOR cownerid == m.cownerid ;
		          AND cwellid  == m.cwellid ;
		          AND ctypeinv == m.ctypeinv
		   IF FOUND()
		      SCATTER memvar
		      INSERT INTO ownpcts FROM memvar
		   ENDIF
		ENDSCAN   
		  
		WAIT clear
	ENDPROC

	PROCEDURE togglepassiveftp
	ENDPROC

	PROCEDURE Unload
		_VFP.AutoYield = .T.
		ON KEY LABEL CTRL+P
		DODEFAULT()
	ENDPROC

	PROCEDURE Pages.Page1.cmdExit.Click
		thisform.release()
	ENDPROC

	PROCEDURE Pages.Page1.cmdRestore.Click
		LOCAL llChecks, llReports
		
		llChecks = thisform.pages.page1.chkCheckFormats.Value
		llReports = thisform.pages.page1.chkReportFormats.Value
		thisform.cRestoreFile = thisform.pages.page1.cntGetFile1.edtPath.value
		THISFORM.PROCESS(llChecks, llReports)
		
	ENDPROC

	PROCEDURE Pages.Page1.cmdRestore.Error
		LPARAMETERS nerror,cmethod,nline
		
		if nerror = 1540
		   return
		endif
		
		dodefault(nerror,cmethod,nline)   
	ENDPROC

ENDDEFINE
