*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="dmreopenr.scx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="2" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Cursor1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor6" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor7" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor8" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor9" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor10" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor11" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor12" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor13" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor15" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor14" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor17" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor18" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor16" UniqueID="" Timestamp="" />

	AutoOpenTables = .F.
	DataSource = .NULL.
	Height = 798
	Left = 23
	Name = "Dataenvironment"
	Top = 59
	Width = 949

	ADD OBJECT 'Cursor1' AS cursor WITH ;
		Alias = "checks", ;
		BufferModeOverride = 5, ;
		CursorSource = "checks", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor1", ;
		Top = 20, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor10' AS cursor WITH ;
		Alias = "wells", ;
		CursorSource = "wells", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor10", ;
		Top = 380, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor11' AS cursor WITH ;
		Alias = "invhdr", ;
		BufferModeOverride = 5, ;
		CursorSource = "invhdr", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 150, ;
		Name = "Cursor11", ;
		Top = 380, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor12' AS cursor WITH ;
		Alias = "invdet", ;
		BufferModeOverride = 5, ;
		CursorSource = "invdet", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 290, ;
		Name = "Cursor12", ;
		Top = 380, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor13' AS cursor WITH ;
		Alias = "options", ;
		CursorSource = "options", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 438, ;
		Name = "Cursor13", ;
		Top = 305, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor14' AS cursor WITH ;
		Alias = "roundtmp", ;
		BufferModeOverride = 5, ;
		CursorSource = "roundtmp", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 441, ;
		Name = "Cursor14", ;
		Top = 20, ;
		Width = 91
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor15' AS cursor WITH ;
		Alias = "suspense", ;
		BufferModeOverride = 5, ;
		CursorSource = "suspense", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 441, ;
		Name = "Cursor15", ;
		Top = 20, ;
		Width = 91
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor16' AS cursor WITH ;
		Alias = "one_man_tax", ;
		CursorSource = "one_man_tax", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 710, ;
		Name = "Cursor16", ;
		Top = 260, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor17' AS cursor WITH ;
		Alias = "ownpcts", ;
		BufferModeOverride = 5, ;
		CursorSource = "ownpcts", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 570, ;
		Name = "Cursor17", ;
		Top = 260, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor18' AS cursor WITH ;
		Alias = "stmtnote", ;
		BufferModeOverride = 5, ;
		CursorSource = "stmtnote", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 173, ;
		Left = 600, ;
		Name = "Cursor18", ;
		Top = 32, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor2' AS cursor WITH ;
		Alias = "disbhist", ;
		BufferModeOverride = 5, ;
		CursorSource = "disbhist", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 150, ;
		Name = "Cursor2", ;
		Top = 20, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor3' AS cursor WITH ;
		Alias = "expense", ;
		BufferModeOverride = 5, ;
		CursorSource = "expense", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 290, ;
		Name = "Cursor3", ;
		Top = 20, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor5' AS cursor WITH ;
		Alias = "income", ;
		BufferModeOverride = 5, ;
		CursorSource = "income", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 150, ;
		Name = "Cursor5", ;
		Top = 140, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor6' AS cursor WITH ;
		Alias = "groups", ;
		CursorSource = "groups", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 290, ;
		Name = "Cursor6", ;
		Top = 140, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor7' AS cursor WITH ;
		Alias = "susaudit", ;
		BufferModeOverride = 5, ;
		CursorSource = "susaudit", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor7", ;
		Top = 261, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor8' AS cursor WITH ;
		Alias = "sysctl", ;
		BufferModeOverride = 5, ;
		CursorSource = "sysctl", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 150, ;
		Name = "Cursor8", ;
		Top = 259, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor9' AS cursor WITH ;
		Alias = "wellhist", ;
		BufferModeOverride = 5, ;
		CursorSource = "wellhist", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 290, ;
		Name = "Cursor9", ;
		Top = 260, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

ENDDEFINE

DEFINE CLASS formdmreopenr AS frmformcustom OF "..\custom\cforms.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="cmdReopen" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdClose" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Runcombo1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="GLMaint" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: reopen		&& Re-Opens the closed revenue period.
		*m: reopenj		&& reopen the jib period
		*p: cgroup
		*p: cperiod
		*p: cyear
		*p: lcloserun
	*</DefinedPropArrayMethod>

	Caption = "Open a Closed Revenue Run"
	DataSession = 2
	DoCreate = .T.
	Height = 154
	HelpContextID = 131
	Name = "FormDmreopenr"
	Visible = .T.
	Width = 375
	Mwresize1.lblHighLight.Name = "lblHighLight"
	Mwresize1.lblShading.Name = "lblShading"
	Mwresize1.Name = "Mwresize1"

	ADD OBJECT 'cmdClose' AS cmdcommandbuttoncustom WITH ;
		Caption = "\<Cancel", ;
		Height = 36, ;
		Left = 195, ;
		Name = "cmdClose", ;
		TabIndex = 3, ;
		Top = 96, ;
		Width = 75
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdReopen' AS cmdcommandbuttoncustom WITH ;
		Caption = "\<Re-Open", ;
		Height = 36, ;
		Left = 108, ;
		Name = "cmdReopen", ;
		TabIndex = 2, ;
		Top = 96, ;
		Width = 75
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'GLMaint' AS glmaint WITH ;
		Height = 39, ;
		Left = 293, ;
		Name = "GLMaint", ;
		Top = 105, ;
		Width = 31
		*< END OBJECT: ClassLib="..\custom\swgl.vcx" BaseClass="custom" />

	ADD OBJECT 'Lbllabelcustom1' AS lbllabelcustom WITH ;
		Caption = "Run No", ;
		Left = 32, ;
		Name = "Lbllabelcustom1", ;
		TabIndex = 4, ;
		Top = 50
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Runcombo1' AS runcombo WITH ;
		ColumnWidths = "240,0,0", ;
		cshowwhat = R, ;
		Height = 20, ;
		Left = 80, ;
		lshownew = .F., ;
		Name = "Runcombo1", ;
		TabIndex = 1, ;
		Top = 48, ;
		Width = 268
		*< END OBJECT: ClassLib="..\custom\swcontrol.vcx" BaseClass="combobox" />
	
	PROCEDURE Init
		IF DODEFAULT()
		   *
		   *  See if there are any closed rev periods
		   *
		   SELECT sysctl
		   LOCATE FOR cTypeClose = 'R'
		
		   IF NOT FOUND()
		      THISFORM.oMessage.DISPLAY('There are no closed Revenue runs to open.')
		      RETURN .F.
		   ENDIF
		
		   
		   if isnull(thisform.oregistry)
		      thisform.oregistry = findglobalobject('cmRegistry')
		   endif   
		   THISFORM.runcombo1.LISTITEMID = 1
		   SET ESCAPE ON 
		ENDIF
		
	ENDPROC

	PROCEDURE reopen		&& Re-Opens the closed revenue period.
		LOCAL lnDataSession, lcRunYear, lnRunNo, lcGroup, lcDMBatch, oDist
		
		llReturn = .T.
		
		TRY
		   lcRunYear = THISFORM.runcombo1.LISTITEM[thisform.runcombo1.listitemid, 2]
		   lnRunNo   = INT(VAL(THISFORM.runcombo1.LISTITEM[thisform.runcombo1.listitemid, 3]))
		   lcGroup   = THISFORM.runcombo1.LISTITEM[thisform.runcombo1.listitemid, 4]
		   lcDMBatch = THISFORM.runcombo1.LISTITEM[thisform.runcombo1.listitemid, 5]
		
		   * Turn FoxAudit auditing off for the reopen
		   IF TYPE('oFoxAudit_APPDATA') = 'O'
		      oFoxAudit_APPDATA.lLogUpdates = .F.
		   ENDIF
		
		   oDist = CREATEOBJECT('distproc', ' ', ' ', ;
		      '01', ;
		      lcRunYear, ;
		      '00', 'W', DATE(), .F., lnRunNo)
		
		   TRY
		      IF m.goapp.ldirdmdep
		         IF FILE(m.goapp.cdatafilepath+'dirdep.dbf')
		            swselect('dirdep')
		         ENDIF
		      ENDIF
		   CATCH
		   ENDTRY
		
		   * Get the current datasession id and pass it to the reopen routine so
		   * that it can make sure it's in the same data session
		   lnDataSession = SET('datasession')
		   lnReturn = oDist.ReOpen_Rev_Run(lcRunYear, lnRunNo, lcGroup, lcDMBatch, lnDataSession)
		
		   IF lnReturn = 0
		      llReturn = .F.
		   ENDIF
		
		   WAIT CLEAR
		CATCH TO loError
		   llReturn = .F.
		   DO errorlog WITH 'ReOpen', loError.LINENO, 'Open Rev Run', loError.ERRORNO, loError.MESSAGE
		   MESSAGEBOX('Unable to open the revenue run at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		      'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		* Turn FoxAudit auditing on after the reopen
		IF TYPE('oFoxAudit_APPDATA') = 'O'
		   oFoxAudit_APPDATA.lLogUpdates = m.goapp.lAuditTrail
		ENDIF
		
		RETURN llReturn
		
	ENDPROC

	PROCEDURE reopenj		&& reopen the jib period
		LOCAL lcsyskey, lcDMBatch, lcYear, lcPeriod, lcGroup, lcIDChec
		
		lcYear    = THISFORM.runcombo1.listitem[thisform.runcombo1.listitemid,2]
		lnRunNo   = INT(VAL(THISFORM.runcombo1.listitem[thisform.runcombo1.listitemid,3]))
		lcDMBatch = THISFORM.runcombo1.listitem[thisform.runcombo1.listitemid,5]
		
		SELE sysctl
		locate for cyear=lcyear and nrunno=lnrunno and ctypeclose='J'
		IF FOUND()
		   lcDMBatch = cDMBatch
		ENDIF
		   
		*
		*
		*  Remove records from the well history table
		*
		WAIT WIND NOWAIT 'Removing well history records...'
		SELECT wellhist
		DELETE FOR nRunNo == lnRunNo AND cRunYear == lcYear AND cRecType == 'J'
		
		*
		*  Remove records from the owner history table
		*
		WAIT WIND NOWAIT 'Removing owner history records...'
		SELECT disbhist
		DELETE FOR nRunNo == lnRunNo AND cRunYear == lcYear AND cRecType == 'J'
		
		*
		*  Remove journal entries from the glmaster table
		*
		WAIT WIND NOWAIT 'Removing journal entries....'
		SELECT glmaster
		DELETE FOR cDMBatch == lcDMBatch
		
		*
		*  Remove invoices from the invhdr and invdet files
		*
		WAIT WIND NOWAIT 'Removing joint interest billing statements....'
		SELECT invhdr
		DELETE FOR cDMBatch == lcDMBatch
		  
		*
		*  Reset the flag in the expense table
		*
		WAIT WIND NOWAIT 'Resetting closed flag in the well expense records...'
		SELECT expense
		SCAN FOR nRunNoJIB == lnRunNo AND cRunYearJIB == lcYear
		   SELECT expense
		   REPL lClosed WITH .F., ;
		        nrunnoJIB WITH 0, ;
		        cRunYearJIB WITH ""
		ENDSCAN      
		
		*
		*  Remove the closed record from the sysctl table
		*
		SELECT sysctl
		DELETE FOR nRunNo == lnRunNo AND cYear == lcYear AND lDisbman AND cTypeClose == 'J'
		
		BEGIN TRANSACTION
		SELE checks
		=TABLEUPDATE(.T.)
		SELE glmaster
		=TABLEUPDATE(.T.)
		SELE susaudit
		=TABLEUPDATE(.T.)
		SELE expense
		=TABLEUPDATE(.T.)
		SELE invhdr
		=TABLEUPDATE(.T.)
		SELE income
		=TABLEUPDATE(.T.)
		SELE wellhist
		=TABLEUPDATE(.T.)
		SELE sysctl
		=TABLEUPDATE(.T.)
		SELE disbhist
		=TABLEUPDATE(.T.)
		SELE wellhist
		=TABLEUPDATE(.T.)
		END TRANSACTION
		
		thisform.oMessage.Display('JIB Run: ' + lcYear+'/'+ALLT(STR(lnRunNo))+ ' is now open.')
		
		
		
	ENDPROC

	PROCEDURE Unload
		SET ESCAPE OFF
		DODEFAULT()
	ENDPROC

	PROCEDURE cmdClose.Click
		thisform.release()
	ENDPROC

	PROCEDURE cmdReopen.Click
		thisform.reopen()
		thisform.Release()
	ENDPROC

	PROCEDURE Runcombo1.Requery
		IF DODEFAULT()
		   IF THIS.LISTCOUNT > 0
		      FOR lnx = 1 TO THIS.LISTCOUNT
		         THIS.REMOVELISTITEM(lnx)
		      ENDFOR
		   ENDIF
		   IF NOT THIS.lNoInit
		      SET DELE ON
		      DO CASE
		         CASE THIS.cShowWhat = 'R'
		            IF NOT THIS.lShowbeg  && Show entries with "BEG" in the version field
		               IF NOT THIS.lShowPosted
		                  IF THIS.lAscending
		                     SELE 'RUN:'+cTypeClose+'-'+PADL(ALLT(STR(nRunNo)),3,'0')+'/'+cYear+'/'+cGroup+' Date:'+DTOC(dAcctDate), cYear, nRunNo, cGroup, cDMBatch, cTypeClose, DTOC(dAcctDate), DTOC(dPostDate), IIF(lCompanyPost,'Y','N') ;
		                        FROM sysctl ;
		                        WHERE lDisbman = .T. AND cTypeClose = 'R' ;
		                        AND nrunno # 9999 ;
		                        AND (IIF(THIS.lNonPostedOnly,lPosted = .F.,.T.)) ;
		                        and IIF(this.lNoOldruns,not EMPTY(cVersion),.t.)  ;
		                        AND NOT 'BEG' $ cversion ;
		                        and not crunyear='1980' ;
		                        INTO ARRAY laRuns ;
		                        ORDER BY cYear, nRunNo
		                  ELSE
		                     SELE 'RUN:'+cTypeClose+'-'+PADL(ALLT(STR(nRunNo)),3,'0')+'/'+cYear+'/'+cGroup+' Date:'+DTOC(dAcctDate), cYear, nRunNo, cGroup, cDMBatch, cTypeClose, DTOC(dAcctDate), DTOC(dPostDate), IIF(lCompanyPost,'Y','N') ;
		                        FROM sysctl ;
		                        WHERE lDisbman = .T. AND cTypeClose = 'R' ;
		                        AND nrunno # 9999 ;
		                        AND (IIF(THIS.lNonPostedOnly,sysctl.lPosted = .F.,.T.)) ;
		                        and IIF(this.lNoOldruns,not EMPTY(cVersion),.t.)  ;
		                        AND NOT 'BEG' $ cversion ;
		                        and not crunyear='1980' ;
		                        INTO ARRAY laRuns ;
		                        ORDER BY cYear DESC, nRunNo DESC
		                  ENDIF
		               ELSE
		                  IF THIS.lAscending
		                     SELE 'RUN:'+cTypeClose+'-'+PADL(ALLT(STR(nRunNo)),3,'0')+'/'+cYear+'/'+cGroup+' Date:'+DTOC(dAcctDate), cYear, nRunNo, cGroup, cDMBatch, cTypeClose, DTOC(dAcctDate), DTOC(dPostDate), IIF(lCompanyPost,'Y','N') ;
		                        FROM sysctl ;
		                        WHERE lDisbman = .T. AND cTypeClose = 'R' AND lPosted = .T. ;
		                        AND nrunno # 9999 ;
		                        and IIF(this.lNoOldruns,not EMPTY(cVersion),.t.)  ;
		                        AND NOT 'BEG' $ cversion ;
		                        and not crunyear='1980' ;
		                        INTO ARRAY laRuns ;
		                        ORDER BY cYear, nRunNo
		                  ELSE
		                     SELE 'RUN:'+cTypeClose+'-'+PADL(ALLT(STR(nRunNo)),3,'0')+'/'+cYear+'/'+cGroup+' Date:'+DTOC(dAcctDate), cYear, nRunNo, cGroup, cDMBatch, cTypeClose, DTOC(dAcctDate), DTOC(dPostDate), IIF(lCompanyPost,'Y','N') ;
		                        FROM sysctl ;
		                        WHERE lDisbman = .T. AND cTypeClose = 'R' AND lPosted = .T. ;
		                        AND nrunno # 9999 ;
		                        and IIF(this.lNoOldruns,not EMPTY(cVersion),.t.)  ;
		                        AND NOT 'BEG' $ cversion ;
		                        and not crunyear='1980' ;
		                        INTO ARRAY laRuns ;
		                        ORDER BY cYear DESC, nRunNo DESC
		                  ENDIF
		               ENDIF
		            ELSE
		               IF NOT THIS.lShowPosted
		                  IF THIS.lAscending
		                     SELE 'RUN:'+cTypeClose+'-'+PADL(ALLT(STR(nRunNo)),3,'0')+'/'+cYear+'/'+cGroup+' Date:'+DTOC(dAcctDate), cYear, nRunNo, cGroup, cDMBatch, cTypeClose, DTOC(dAcctDate), DTOC(dPostDate), IIF(lCompanyPost,'Y','N') ;
		                        FROM sysctl ;
		                        WHERE lDisbman = .T. AND cTypeClose = 'R' ;
		                        AND nrunno # 9999 ;
		                        AND (IIF(THIS.lNonPostedOnly,lPosted = .F.,.T.)) ;
		                        and IIF(this.lNoOldruns,not EMPTY(cVersion),.t.)  ;
		                        INTO ARRAY laRuns ;
		                        ORDER BY cYear, nRunNo
		                  ELSE
		                     SELE 'RUN:'+cTypeClose+'-'+PADL(ALLT(STR(nRunNo)),3,'0')+'/'+cYear+'/'+cGroup+' Date:'+DTOC(dAcctDate), cYear, nRunNo, cGroup, cDMBatch, cTypeClose, DTOC(dAcctDate), DTOC(dPostDate), IIF(lCompanyPost,'Y','N') ;
		                        FROM sysctl ;
		                        WHERE lDisbman = .T. AND cTypeClose = 'R' ;
		                        AND nrunno # 9999 ;
		                        AND (IIF(THIS.lNonPostedOnly,sysctl.lPosted = .F.,.T.)) ;
		                        and IIF(this.lNoOldruns,not EMPTY(cVersion),.t.)  ;
		                        INTO ARRAY laRuns ;
		                        ORDER BY cYear DESC, nRunNo DESC
		                  ENDIF
		               ELSE
		                  IF THIS.lAscending
		                     SELE 'RUN:'+cTypeClose+'-'+PADL(ALLT(STR(nRunNo)),3,'0')+'/'+cYear+'/'+cGroup+' Date:'+DTOC(dAcctDate), cYear, nRunNo, cGroup, cDMBatch, cTypeClose, DTOC(dAcctDate), DTOC(dPostDate), IIF(lCompanyPost,'Y','N') ;
		                        FROM sysctl ;
		                        WHERE lDisbman = .T. AND cTypeClose = 'R' AND lPosted = .T. ;
		                        AND nrunno # 9999 ;
		                        and IIF(this.lNoOldruns,not EMPTY(cVersion),.t.)  ;
		                        INTO ARRAY laRuns ;
		                        ORDER BY cYear, nRunNo
		                  ELSE
		                     SELE 'RUN:'+cTypeClose+'-'+PADL(ALLT(STR(nRunNo)),3,'0')+'/'+cYear+'/'+cGroup+' Date:'+DTOC(dAcctDate), cYear, nRunNo, cGroup, cDMBatch, cTypeClose, DTOC(dAcctDate), DTOC(dPostDate), IIF(lCompanyPost,'Y','N') ;
		                        FROM sysctl ;
		                        WHERE lDisbman = .T. AND cTypeClose = 'R' AND lPosted = .T. ;
		                        AND nrunno # 9999 ;
		                        and IIF(this.lNoOldruns,not EMPTY(cVersion),.t.)  ;
		                        INTO ARRAY laRuns ;
		                        ORDER BY cYear DESC, nRunNo DESC
		                  ENDIF
		               ENDIF
		            ENDIF
		         OTHERWISE
		            IF NOT THIS.lShowbeg
		               IF NOT THIS.lShowPosted
		                  IF THIS.lAscending
		                     SELE 'RUN:'+cTypeClose+'-'+PADL(ALLT(STR(nRunNo)),3,'0')+'/'+cYear+'/'+cGroup+' Date:'+DTOC(dAcctDate), cYear, nRunNo, cGroup, cDMBatch, cTypeClose, DTOC(dAcctDate), DTOC(dPostDate), IIF(lCompanyPost,'Y','N') ;
		                        FROM sysctl ;
		                        WHERE lDisbman = .T. ;
		                        AND nrunno # 9999 ;
		                        AND (IIF(THIS.lNonPostedOnly,lPosted = .F.,.T.)) ;
		                        and IIF(this.lNoOldruns,not EMPTY(cVersion),.t.)  ;
		                        AND NOT 'BEG' $ cversion ;
		                        INTO ARRAY laRuns ;
		                        ORDER BY cYear DESC, nRunNo
		                  ELSE
		                     SELE 'RUN:'+cTypeClose+'-'+PADL(ALLT(STR(nRunNo)),3,'0')+'/'+cYear+'/'+cGroup+' Date:'+DTOC(dAcctDate), cYear, nRunNo, cGroup, cDMBatch, cTypeClose, DTOC(dAcctDate), DTOC(dPostDate), IIF(lCompanyPost,'Y','N') ;
		                        FROM sysctl ;
		                        WHERE lDisbman = .T. ;
		                        AND nrunno # 9999 ;
		                        AND (IIF(THIS.lNonPostedOnly,lPosted = .F.,.T.)) ;
		                        and IIF(this.lNoOldruns,not EMPTY(cVersion),.t.)  ;
		                        AND NOT 'BEG' $ cversion ;
		                        INTO ARRAY laRuns ;
		                        ORDER BY cYear DESC, nRunNo DESC
		                  ENDIF
		               ELSE
		                  IF THIS.lAscending
		                     SELE 'RUN:'+cTypeClose+'-'+PADL(ALLT(STR(nRunNo)),3,'0')+'/'+cYear+'/'+cGroup+' Date:'+DTOC(dAcctDate), cYear, nRunNo, cGroup, cDMBatch, cTypeClose, DTOC(dAcctDate), DTOC(dPostDate), IIF(lCompanyPost,'Y','N') ;
		                        FROM sysctl ;
		                        WHERE lDisbman = .T. AND lPosted = .T. ;
		                        AND nrunno # 9999 ;
		                        and IIF(this.lNoOldruns,not EMPTY(cVersion),.t.)  ;
		                        AND NOT 'BEG' $ cversion ;
		                        INTO ARRAY laRuns ;
		                        ORDER BY cYear DESC, nRunNo
		                  ELSE
		                     SELE 'RUN:'+cTypeClose+'-'+PADL(ALLT(STR(nRunNo)),3,'0')+'/'+cYear+'/'+cGroup+' Date:'+DTOC(dAcctDate), cYear, nRunNo, cGroup, cDMBatch, cTypeClose, DTOC(dAcctDate), DTOC(dPostDate), IIF(lCompanyPost,'Y','N') ;
		                        FROM sysctl ;
		                        WHERE lDisbman = .T. AND lPosted = .T.;
		                        AND nrunno # 9999 ;
		                        and IIF(this.lNoOldruns,not EMPTY(cVersion),.t.)  ;
		                        AND NOT 'BEG' $ cversion ;
		                        INTO ARRAY laRuns ;
		                        ORDER BY cYear DESC, nRunNo DESC
		                  ENDIF
		               ENDIF
		            ELSE
		               IF NOT THIS.lShowPosted
		                  IF THIS.lAscending
		                     SELE 'RUN:'+cTypeClose+'-'+PADL(ALLT(STR(nRunNo)),3,'0')+'/'+cYear+'/'+cGroup+' Date:'+DTOC(dAcctDate), cYear, nRunNo, cGroup, cDMBatch, cTypeClose, DTOC(dAcctDate), DTOC(dPostDate), IIF(lCompanyPost,'Y','N') ;
		                        FROM sysctl ;
		                        WHERE lDisbman = .T. ;
		                        AND nrunno # 9999 ;
		                        AND (IIF(THIS.lNonPostedOnly,lPosted = .F.,.T.)) ;
		                        and IIF(this.lNoOldruns,not EMPTY(cVersion),.t.)  ;
		                        INTO ARRAY laRuns ;
		                        ORDER BY cYear DESC, nRunNo
		                  ELSE
		                     SELE 'RUN:'+cTypeClose+'-'+PADL(ALLT(STR(nRunNo)),3,'0')+'/'+cYear+'/'+cGroup+' Date:'+DTOC(dAcctDate), cYear, nRunNo, cGroup, cDMBatch, cTypeClose, DTOC(dAcctDate), DTOC(dPostDate), IIF(lCompanyPost,'Y','N') ;
		                        FROM sysctl ;
		                        WHERE lDisbman = .T. ;
		                        AND nrunno # 9999 ;
		                        AND (IIF(THIS.lNonPostedOnly,lPosted = .F.,.T.)) ;
		                        and IIF(this.lNoOldruns,not EMPTY(cVersion),.t.)  ;
		                        INTO ARRAY laRuns ;
		                        ORDER BY cYear DESC, nRunNo DESC
		                  ENDIF
		               ELSE
		                  IF THIS.lAscending
		                     SELE 'RUN:'+cTypeClose+'-'+PADL(ALLT(STR(nRunNo)),3,'0')+'/'+cYear+'/'+cGroup+' Date:'+DTOC(dAcctDate), cYear, nRunNo, cGroup, cDMBatch, cTypeClose, DTOC(dAcctDate), DTOC(dPostDate), IIF(lCompanyPost,'Y','N') ;
		                        FROM sysctl ;
		                        WHERE lDisbman = .T. AND lPosted = .T. ;
		                        AND nrunno # 9999 ;
		                        and IIF(this.lNoOldruns,not EMPTY(cVersion),.t.)  ;
		                        INTO ARRAY laRuns ;
		                        ORDER BY cYear DESC, nRunNo
		                  ELSE
		                     SELE 'RUN:'+cTypeClose+'-'+PADL(ALLT(STR(nRunNo)),3,'0')+'/'+cYear+'/'+cGroup+' Date:'+DTOC(dAcctDate), cYear, nRunNo, cGroup, cDMBatch, cTypeClose, DTOC(dAcctDate), DTOC(dPostDate), IIF(lCompanyPost,'Y','N') ;
		                        FROM sysctl ;
		                        WHERE lDisbman = .T. AND lPosted = .T.;
		                        AND nrunno # 9999 ;
		                        and IIF(this.lNoOldruns,not EMPTY(cVersion),.t.)  ;
		                        INTO ARRAY laRuns ;
		                        ORDER BY cYear DESC, nRunNo DESC
		                  ENDIF
		               ENDIF
		            ENDIF
		      ENDCASE
		
		      lnCount = _TALLY
		
		      * Don't allow more than 1500 entries in the list.
		      IF lnCount > 1500
		         lnCount = 1500
		      ENDIF
		
		      IF THIS.lShowNew
		         IF THIS.lNewRunBoth
		            THIS.ADDLISTITEM('New Run - Revenue                  ',1,1)
		            THIS.ADDLISTITEM('',1,2)
		            THIS.ADDLISTITEM('0',1,3)
		            THIS.ADDLISTITEM('00',1,4)
		            THIS.ADDLISTITEM('',1,5)
		            THIS.ADDLISTITEM('R',1,6)
		            THIS.ADDLISTITEM('',1,7)
		            THIS.ADDLISTITEM('',1,8)
		            THIS.ADDLISTITEM('',1,9)
		            THIS.ADDLISTITEM('New Run - JIB                      ',2,1)
		            THIS.ADDLISTITEM('',2,2)
		            THIS.ADDLISTITEM('0',2,3)
		            THIS.ADDLISTITEM('00',2,4)
		            THIS.ADDLISTITEM('',2,5)
		            THIS.ADDLISTITEM('J',2,6)
		            THIS.ADDLISTITEM('',2,7)
		            THIS.ADDLISTITEM('',2,8)
		            THIS.ADDLISTITEM('',2,9)
		         ELSE
		            THIS.ADDLISTITEM('New Run                         ',1,1)
		            THIS.ADDLISTITEM('',1,2)
		            THIS.ADDLISTITEM('0',1,3)
		            THIS.ADDLISTITEM('00',1,4)
		            THIS.ADDLISTITEM('',1,5)
		            THIS.ADDLISTITEM('',1,6)
		            THIS.ADDLISTITEM('',1,7)
		            THIS.ADDLISTITEM('',1,8)
		            THIS.ADDLISTITEM('',1,9)
		
		         ENDIF
		
		         IF THIS.lNewRunBoth
		            lnStart = 2
		         ELSE
		            lnStart = 1
		         ENDIF
		
		         IF lnCount > 0
		            FOR lnx = 1 TO lnCount
		
		               IF lnx = 1500
		                  THIS.ADDLISTITEM('** More than 1500 Closed Runs **',lnx+1,1)
		                  THIS.ADDLISTITEM('',lnx+lnStart,2)
		                  THIS.ADDLISTITEM('',lnx+lnStart,3)
		                  THIS.ADDLISTITEM('',lnx+lnStart,4)
		                  THIS.ADDLISTITEM('',lnx+lnStart,5)
		                  THIS.ADDLISTITEM('',lnx+lnStart,6)
		                  THIS.ADDLISTITEM('',lnx+lnStart,7)
		                  THIS.ADDLISTITEM('',lnx+lnStart,8)
		                  THIS.ADDLISTITEM('',lnx+lnStart,9)
		               ELSE
		                  THIS.ADDLISTITEM(laRuns[lnX,1],lnx+lnStart,1)            && Display Value
		                  THIS.ADDLISTITEM(laRuns[lnX,2],lnx+lnStart,2)            && Run Year
		                  THIS.ADDLISTITEM(ALLT(STR(laRuns[lnX,3])),lnx+lnStart,3) && Run No
		                  THIS.ADDLISTITEM(laRuns[lnX,4],lnx+lnStart,4)            && Group
		                  THIS.ADDLISTITEM(laRuns[lnX,5],lnx+lnStart,5)            && DMBatch
		                  THIS.ADDLISTITEM(laRuns[lnX,6],lnx+lnStart,6)            && Type of Closing
		                  THIS.ADDLISTITEM(laRuns[lnX,7],lnx+lnStart,7)            && Accounting Date
		                  THIS.ADDLISTITEM(laRuns[lnX,8],lnx+lnStart,8)            && Post Date
		                  THIS.ADDLISTITEM(laRuns[lnX,9],lnx+lnStart,9)            && Company Share Only
		               ENDIF
		            ENDFOR
		         ENDIF
		      ELSE
		         IF lnCount > 0
		            FOR lnx = 1 TO lnCount
		               IF lnx = 1500
		                  THIS.ADDLISTITEM('** More than 1500 Closed Runs **',lnx,1)
		                  THIS.ADDLISTITEM('',lnx,2)
		                  THIS.ADDLISTITEM('',lnx,3)
		                  THIS.ADDLISTITEM('',lnx,4)
		                  THIS.ADDLISTITEM('',lnx,5)
		                  THIS.ADDLISTITEM('',lnx,6)
		                  THIS.ADDLISTITEM('',lnx,7)
		                  THIS.ADDLISTITEM('',lnx,8)
		                  THIS.ADDLISTITEM('',lnx,9)
		               ELSE
		                  THIS.ADDLISTITEM(laRuns[lnX,1],lnx,1)            && Display Value
		                  THIS.ADDLISTITEM(laRuns[lnX,2],lnx,2)            && Run Year
		                  THIS.ADDLISTITEM(ALLT(STR(laRuns[lnX,3])),lnx,3) && Run No
		                  THIS.ADDLISTITEM(laRuns[lnX,4],lnx,4)            && Group
		                  THIS.ADDLISTITEM(laRuns[lnX,5],lnx,5)            && DMBatch
		                  THIS.ADDLISTITEM(laRuns[lnX,6],lnx,6)            && Type of Closing
		                  THIS.ADDLISTITEM(laRuns[lnX,7],lnx,7)            && Accounting Date
		                  THIS.ADDLISTITEM(laRuns[lnX,8],lnx,8)            && Post Date
		                  THIS.ADDLISTITEM(laRuns[lnX,9],lnx,9)            && Company Share Only
		               ENDIF
		            ENDFOR
		         ENDIF
		      ENDIF
		   ENDIF
		ENDIF
		
	ENDPROC

ENDDEFINE
