*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="dmtxprod.scx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="2" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Cursor1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor6" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor8" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor7" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor9" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor10" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor11" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor12" UniqueID="" Timestamp="" />

	AutoOpenTables = .F.
	DataSource = .NULL.
	Height = 441
	Left = 40
	Name = "Dataenvironment"
	Top = 235
	Width = 700

	ADD OBJECT 'Cursor1' AS cursor WITH ;
		Alias = "wells", ;
		CursorSource = "wells", ;
		Database = ..\amdata\appdata.dbc, ;
		Height = 186, ;
		Left = 10, ;
		Name = "Cursor1", ;
		Top = 20, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor10' AS cursor WITH ;
		Alias = "txrrcdata", ;
		BufferModeOverride = 5, ;
		CursorSource = "txrrcdata", ;
		Database = ..\amdata\appdata.dbc, ;
		Height = 90, ;
		Left = 294, ;
		Name = "Cursor10", ;
		Top = 264, ;
		Width = 91
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor11' AS cursor WITH ;
		Alias = "fields", ;
		CursorSource = "fields", ;
		Database = ..\amdata\appdata.dbc, ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor11", ;
		Top = 260, ;
		Width = 91
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor12' AS cursor WITH ;
		Alias = "options", ;
		CursorSource = "options", ;
		Database = ..\amdata\appdata.dbc, ;
		Height = 90, ;
		Left = 540, ;
		Name = "Cursor12", ;
		Top = 20, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor2' AS cursor WITH ;
		Alias = "wellhist", ;
		CursorSource = "wellhist", ;
		Database = ..\amdata\appdata.dbc, ;
		Height = 90, ;
		Left = 150, ;
		Name = "Cursor2", ;
		Top = 20, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor3' AS cursor WITH ;
		Alias = "welldays", ;
		CursorSource = "welldays", ;
		Database = ..\amdata\appdata.dbc, ;
		Height = 90, ;
		Left = 290, ;
		Name = "Cursor3", ;
		Top = 20, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor4' AS cursor WITH ;
		Alias = "investor", ;
		CursorSource = "investor", ;
		Database = ..\amdata\appdata.dbc, ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor4", ;
		Top = 140, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor5' AS cursor WITH ;
		Alias = "disbhist", ;
		CursorSource = "disbhist", ;
		Database = ..\amdata\appdata.dbc, ;
		Height = 90, ;
		Left = 150, ;
		Name = "Cursor5", ;
		Top = 140, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor6' AS cursor WITH ;
		Alias = "annprod", ;
		CursorSource = "annprod", ;
		Database = ..\amdata\appdata.dbc, ;
		Height = 90, ;
		Left = 290, ;
		Name = "Cursor6", ;
		Top = 140, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor7' AS cursor WITH ;
		Alias = "form6s", ;
		CursorSource = "form6s", ;
		Database = ..\amdata\appdata.dbc, ;
		Height = 90, ;
		Left = 396, ;
		Name = "Cursor7", ;
		Top = 20, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor8' AS cursor WITH ;
		Alias = "revsrc", ;
		CursorSource = "revsrc", ;
		Database = ..\amdata\appdata.dbc, ;
		Height = 90, ;
		Left = 150, ;
		Name = "Cursor8", ;
		Top = 260, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor9' AS cursor WITH ;
		Alias = "wellinv", ;
		CursorSource = "wellinv", ;
		Database = ..\amdata\appdata.dbc, ;
		Height = 90, ;
		Left = 399, ;
		Name = "Cursor9", ;
		Top = 141, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

ENDDEFINE

DEFINE CLASS formdmtxprod AS frmformcustom OF "..\custom\cforms.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Lbllabelcustom1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdBuild" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdExit" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Swyear1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Swperiod1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtP5OperNo" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblOGRID" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: buildfile
		*p: cstate
		*a: astates[1,0]		&& Array of available states to report on.
	*</DefinedPropArrayMethod>

	Caption = "Build TX PR File"
	DataSession = 2
	DoCreate = .T.
	Height = 167
	HelpContextID = 619
	Name = "FormDMTXProd"
	Width = 346
	Mwresize1.lblHighLight.Name = "lblHighLight"
	Mwresize1.lblShading.Name = "lblShading"
	Mwresize1.Name = "Mwresize1"

	ADD OBJECT 'cmdBuild' AS cmdcommandbuttoncustom WITH ;
		Caption = "\<Build File", ;
		Default = .T., ;
		Height = 36, ;
		Left = 81, ;
		Name = "cmdBuild", ;
		TabIndex = 6, ;
		Top = 108, ;
		Width = 75
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdExit' AS cmdcommandbuttoncustom WITH ;
		Caption = "E\<xit", ;
		Height = 36, ;
		Left = 189, ;
		Name = "cmdExit", ;
		TabIndex = 7, ;
		Top = 108, ;
		Width = 75
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'Lbllabelcustom1' AS lbllabelcustom WITH ;
		Caption = "Production Period:", ;
		Height = 16, ;
		Left = 70, ;
		Name = "Lbllabelcustom1", ;
		TabIndex = 3, ;
		Top = 35, ;
		Width = 89
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblOGRID' AS lbllabelcustom WITH ;
		Caption = "P5 Oper No", ;
		Left = 70, ;
		Name = "lblOGRID", ;
		TabIndex = 5, ;
		Top = 71
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Swperiod1' AS swperiod WITH ;
		Left = 214, ;
		Name = "Swperiod1", ;
		TabIndex = 2, ;
		Top = 33
		*< END OBJECT: ClassLib="..\custom\swcontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'Swyear1' AS swyear WITH ;
		Left = 166, ;
		Name = "Swyear1", ;
		TabIndex = 1, ;
		Top = 33
		*< END OBJECT: ClassLib="..\custom\swcontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtP5OperNo' AS txttextboxcustom WITH ;
		ControlSource = "options.ccomprptno", ;
		Height = 20, ;
		Left = 131, ;
		Name = "txtP5OperNo", ;
		TabIndex = 4, ;
		Top = 69, ;
		Width = 144
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />
	
	PROCEDURE buildfile
		lnCount = 0
		lnRecords = 0
		lcstate = THISFORM.cstate
		
		m.cYear    = ALLTRIM(THISFORM.swYear1.VALUE)
		m.cPeriod  = ALLTRIM(THISFORM.swPeriod1.VALUE)
		m.cTaxYear = STR(VAL(THISFORM.swYear1.VALUE)+2,4)
		m.cP5OperNo = THISFORM.txtP5OperNo.VALUE
		oMessage = findglobalobject('cmMessage')
		
		* Check on the existence of the application object
		* if it doesn't exist, we're running in development
		* mode and need to initialize the company address info.
		IF TYPE('m.goApp')= 'O'
		   m.cproducer    = m.goApp.ccompanyname
		   m.cAgent       = m.goApp.cAgentname
		   m.caddress     = m.goApp.cAddress1
		   m.ctaxid       = m.goApp.ctaxid
		   m.ccity        = m.goApp.ccity
		   m.cstate       = m.goApp.cstate
		   m.czip         = m.goApp.czip
		   m.ccontact     = m.goApp.ccontact
		   m.ctelephone   = m.goApp.cPhoneNo
		ELSE
		   m.cproducer    = 'SherWare, Inc.'
		   m.cAgent       = 'SherWare, Inc.'
		   m.caddress     = 'PO Box 223'
		   m.ctaxid       = '99-9999999'
		   m.ccontact     = 'Phil Sherwood'
		   m.ctelephone   = '3302623115'
		   m.ccity        = 'Wooster'
		   m.cstate       = 'OH'
		   m.czip         = '44691'
		ENDIF
		
		SELECT txrrcdata
		COUNT FOR cYear = m.cYear AND cPeriod = m.cPeriod TO lnCount
		IF lnCount > 0
		   IF NOT THISFORM.oMessage.CONFIRM('Production data already exists for ' + m.cYear + '/' + m.cPeriod + ' Do you want to overwrite it?')
		      WAIT WIND NOWAIT 'File Create Cancelled.'
		      RETURN .F.
		   ELSE
		      DELETE FOR cYear = m.cYear AND cPeriod = m.cPeriod
		   ENDIF
		ENDIF
		
		CREATE CURSOR tempprod ;
		   (ctype          c(2), ;
		   cP5OperNo      c(6),  ;
		   crrcdistno     c(4), ;
		   cYear          c(4), ;
		   cPeriod        c(2), ;
		   cfieldid       c(10), ;
		   cfieldname     c(30), ;
		   cleaseid       c(10), ;
		   cleasename     c(30), ;
		   crrcleaseno    c(20), ;
		   ccomingle      c(20), ;
		   cwelltype      c(1), ;
		   nbegvol        i, ;
		   noilprod       i, ;
		   ngasprod       i, ;
		   ndispvolume    i, ;
		   coildispcode   c(1), ;
		   cgasdispcode   c(1), ;
		   nendvol        i, ;
		   cformation     c(10), ;
		   ngaslift       i, ;
		   ngasvol        i, ;
		   ncondbegvol    i, ;
		   ncondprod      i, ;
		   nconddisp      i, ;
		   ccondcode      c(1), ;
		   ncondendvol    i)
		
		SET DELETED ON
		
		SELE FIELDS.cfieldname, ;
		   wells.cfieldid, ;
		   m.cP5OperNo AS cP5OperNo,  ;
		   m.cYear   AS cYear, ;
		   m.cPeriod AS cPeriod, ;
		   wells.cleaseid, ;
		   'PR' AS ctype,  ;
		   land.cleasename, ;
		   land.crrcdistno, ;
		   land.ccomingle, ;
		   land.crrcleaseno, ;
		   0 AS ngasprod, ;
		   0 AS noilprod, ;
		   0 AS nbegvol, ;
		   wells.cuser1 AS cOilDispCode, ;
		   wells.cuser2 AS cGasDispCode,  ;
		   wells.cuser3 AS cwelltype ;
		   FROM FIELDS, land, wells ;
		   WHERE FIELDS.cfieldid = wells.cfieldid ;
		   AND   wells.cstate = 'TX' ;     
		   and   (land.cleaseid in (select cleaseid from leasewell) and wells.cwellid in (select cwellid from leasewell));  
		   INTO CURSOR temp ;
		   ORDER BY land.crrcdistno, FIELDS.cfieldname, FIELDS.cfieldid, wells.cleaseid  ;
		   GROUP BY land.crrcdistno, FIELDS.cfieldname, FIELDS.cfieldid, wells.cleaseid
		
		IF _TALLY > 0
		   SELE tempprod
		   APPEND FROM DBF('temp')
		
		   SELE tempprod
		   SCAN
		      m.cleaseid = cleaseid
		
		      SELE SUM(ntotmcf) AS ngasprod, ;
		         SUM(ntotbbl) AS ndispvolume, ;
		         SUM(ntotbbl) as noilprod, ;
		         wells.cleaseid ;
		         FROM wellhist, wells ;
		         WHERE wellhist.hyear = m.cYear  ;
		         AND wellhist.hperiod = m.cPeriod ;
		         AND wellhist.cwellid = wells.cwellid ;
		         AND wells.cleaseid == m.cleaseid ;    
		         and wells.cstate = 'TX' ;     
		         INTO CURSOR temp ;
		         ORDER BY wells.cleaseid ;
		         GROUP BY wells.cleaseid
		
		      IF _TALLY > 0
		         SELE tempprod
		         REPL ngasprod  WITH temp.ngasprod, ;
		            ndispvolume  WITH temp.ndispvolume, ;
		            noilprod    WITH temp.noilprod
		      ENDIF
		
		      SELE SUM(tanks.nonhand) AS nbegvol, ;
		         wells.cidtank ;
		         FROM tanks, wells ;
		         WHERE wells.cleaseid == m.cleaseid ;
		         AND tanks.cidtank == wells.cidtank ;
		         and wells.cstate = 'TX' ;     
		         INTO CURSOR temptank ;
		         ORDER BY wells.cleaseid ;
		         GROUP BY wells.cleaseid
		      lnTally1 = _TALLY
		
		      SELECT MAX(cYear+cPeriod) AS cprd, nendvol AS nbegvol ;
		         FROM txrrcdata ;
		         WHERE cleaseid == m.cleaseid ;
		           AND cyear+cperiod < m.cyear+m.cperiod ;
		         INTO CURSOR tempdata
		
		      IF _TALLY > 0
		         SELE tempdata
		         m.nbegvol = nbegvol
		         SELE tempprod
		         REPL nbegvol WITH m.nbegvol
		      ELSE
		         SELE temptank
		         m.nbegvol = nbegvol
		         SELE tempprod
		         REPL nbegvol WITH m.nbegvol
		      ENDIF
		   ENDSCAN
		ENDIF
		
		lncountPR = 0
		SELE tempprod
		IF RECC() > 0
		   SCAN
		      SCATTER MEMVAR
		      INSERT INTO txrrcdata FROM MEMVAR
		      lncountPR = lncountPR + 1
		   ENDSCAN
		ENDIF
		
		TABLEUPDATE(.T.,.T.,'txrrcdata')
		
		oMessage.DISPLAY('Created ' + ALLT(STR(lncountPR)) + ' PR records.')
		
		
		
	ENDPROC

	PROCEDURE Init
		PARA tcState
		
		LOCAL lnX, lnY
		DODEFAULT()
		
		IF TYPE('tcState') <> 'C'
		   THISFORM.cState = 'TX'
		ELSE
		   THISFORM.cState = tcState
		ENDIF
		
		DO CASE
		   CASE THISFORM.cState = 'TX'
		      THISFORM.CAPTION = 'Build File for Texas PR Report'
		      THISFORM.lblOGRID.VISIBLE = .T.
		      THISFORM.txtP5OperNo.VISIBLE = .T.
		
		   CASE THISFORM.cState = 'NM'
		      THISFORM.CAPTION = "Build File for NM Operator's Monthly Report"
		      THISFORM.lblOGRID.VISIBLE = .F.
		      THISFORM.txtP5OperNo.VISIBLE = .F.
		ENDCASE
		
		SWSELECT('options')
		THISFORM.txtp5operno.VALUE = options.ccomprptno
		
		
		*  Get info about the state reports that are on disk
		*
		
		THIS.oRegistry = FindGlobalObject('cmRegistry')
		THIS.oMessage  = FindGlobalObject('cmMessage')
		
	ENDPROC

	PROCEDURE cmdBuild.Click
		thisform.buildfile()
	ENDPROC

	PROCEDURE cmdExit.Click
		thisform.release()
	ENDPROC

ENDDEFINE
