*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="dmprepay.scx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="2" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Cursor1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor6" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor7" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor10" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor11" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor13" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor12" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor14" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor15" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor2" UniqueID="" Timestamp="" />

	AutoOpenTables = .F.
	DataSource = .NULL.
	Height = 619
	InitialSelectedAlias = "prepayh"
	Left = 6
	Name = "Dataenvironment"
	Top = 211
	Width = 1219

	ADD OBJECT 'Cursor1' AS cursor WITH ;
		Alias = "investor", ;
		CursorSource = "investor", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor1", ;
		Top = 20, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor10' AS cursor WITH ;
		Alias = "glopt", ;
		CursorSource = "glopt", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 279, ;
		Name = "Cursor10", ;
		Top = 144, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor11' AS cursor WITH ;
		Alias = "prepayview", ;
		BufferModeOverride = 5, ;
		CursorSource = "prepayview", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 243, ;
		Left = 423, ;
		Name = "Cursor11", ;
		NoDataOnLoad = .T., ;
		Top = 285, ;
		Width = 124
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor12' AS cursor WITH ;
		Alias = "depositd", ;
		CursorSource = "depositd", ;
		Database = ..\amdata\appdata.dbc, ;
		Height = 90, ;
		Left = 92, ;
		Name = "Cursor12", ;
		Top = 300, ;
		Width = 124
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor13' AS cursor WITH ;
		Alias = "checks", ;
		BufferModeOverride = 5, ;
		CursorSource = "checks", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 576, ;
		Name = "Cursor13", ;
		Top = 269, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor14' AS cursor WITH ;
		Alias = "coabal", ;
		BufferModeOverride = 5, ;
		CursorSource = "coabal", ;
		Database = ..\amdata\appdata.dbc, ;
		Height = 90, ;
		Left = 693, ;
		Name = "Cursor14", ;
		Top = 393, ;
		Width = 124
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor15' AS cursor WITH ;
		Alias = "glbatches", ;
		BufferModeOverride = 5, ;
		CursorSource = "glbatches", ;
		Database = ..\amdata\appdata.dbc, ;
		Height = 90, ;
		Left = 997, ;
		Name = "Cursor15", ;
		Top = 44, ;
		Width = 124
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor2' AS cursor WITH ;
		Alias = "prepayh1", ;
		CursorSource = "prepayh", ;
		Database = ..\datafiles\prepaymentoperatingdata\appdata.dbc, ;
		Height = 90, ;
		Left = 153, ;
		Name = "Cursor2", ;
		Top = 121, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor3' AS cursor WITH ;
		Alias = "wellinv", ;
		CursorSource = "wellinv", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 290, ;
		Name = "Cursor3", ;
		Top = 20, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor5' AS cursor WITH ;
		Alias = "prepayh", ;
		BufferModeOverride = 5, ;
		CursorSource = "prepayh", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 512, ;
		Name = "Cursor5", ;
		Top = 48, ;
		Width = 124
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor6' AS cursor WITH ;
		Alias = "coa", ;
		CursorSource = "coa", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 710, ;
		Name = "Cursor6", ;
		Top = 20, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor7' AS cursor WITH ;
		Alias = "glmaster", ;
		BufferModeOverride = 5, ;
		CursorSource = "glmaster", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 850, ;
		Name = "Cursor7", ;
		Top = 20, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

ENDDEFINE

DEFINE CLASS formdmprepay AS frmdatamanagerformcustom OF "..\custom\cforms.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Shpshapecustom1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdCustomer" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcCustName" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtCcustid" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grouptran" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboAcct" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblDrecdate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtCreference" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblCreference" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtNpmtamt" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblNpmtamt" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="opgDeposits" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtdRecDate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblNextension" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcAcctNo" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcAcctDesc" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdLookCOA" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdLookWell" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcWellID" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcWellName" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtnExtension" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lstDetail" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtdEffDate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblBalance" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Glmaint" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblUsed" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdRefund" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: adddetailline
		*m: applypmts		&& Automatically applies the payment amount to outstanding invoices.
		*m: calcapplied
		*m: calctot
		*m: checkbalance		&& Checks what this prepayments current balance is
		*m: fillownername		&& Fills the owner name by looking up the owner id in the investor file.
		*m: prepayused
		*m: refundbalance
		*m: requeryrecordsource
		*m: setstate
		*p: cbatch
		*p: ccustsave		&& Saves the current customer ID for validation purposes.
		*p: coldacctno
		*p: cpmttype
		*p: ctype		&& Type of receivable
		*p: lnewbuild
		*p: oldpmtamt
	*</DefinedPropArrayMethod>

	Caption = "Receive Owner Prepayments"
	cbatch = .F.
	cbunch = 
	clistexpression = prepayh.cbatch
	cnavworkarea = prepayh
	coldacctno = 
	ctype = ''		&& Type of receivable
	cworkarea = prepayh
	DoCreate = .T.
	Height = 420
	HelpContextID = 340
	lexpliciteditmode = .F.
	LockScreen = .F.
	lrememberposition = .F.
	lremembersize = .F.
	MaxButton = .T.
	Name = "FormDMPrePay"
	oldpmtamt = 0
	Visible = .T.
	Width = 549
	WindowState = 0
	_memberdata = <VFPData>
		<memberdata name="adddetailline" display="AddDetailLine"/>
		<memberdata name="checkbalance" display="CheckBalance"/>
		<memberdata name="prepayused" display="PrePayUsed"/>
		<memberdata name="refundbalance" display="RefundBalance"/>
		</VFPData>
	cmdatamanager.Name = "cmdatamanager"
	cmdatamanager.TabIndex = 1
	cmdatamanager.ZOrderSet = 0
	cmlookupmanager.Name = "cmlookupmanager"
	Mwresize1.lblHighLight.Name = "lblHighLight"
	Mwresize1.lblShading.Name = "lblShading"
	Mwresize1.Left = 523
	Mwresize1.Name = "Mwresize1"
	Mwresize1.Top = 396

	ADD OBJECT 'cboAcct' AS cbocomboboxcustom WITH ;
		BoundColumn = 2, ;
		ColumnCount = 1, ;
		ControlSource = "prepayh.cacctno", ;
		Height = 20, ;
		Left = 20, ;
		Margin = 1, ;
		Name = "cboAcct", ;
		TabIndex = 3, ;
		Top = 30, ;
		Visible = .T., ;
		Width = 436, ;
		ZOrderSet = 8
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="combobox" />

	ADD OBJECT 'cmdCustomer' AS cmdcommandbuttoncustom WITH ;
		Caption = "Owner ID", ;
		Height = 20, ;
		Left = 19, ;
		Name = "cmdCustomer", ;
		TabIndex = 4, ;
		TabStop = .F., ;
		Top = 75, ;
		Width = 64, ;
		ZOrderSet = 3
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdLookCOA' AS cmdcommandbuttoncustom WITH ;
		Caption = "Account", ;
		Height = 20, ;
		Left = 231, ;
		Name = "cmdLookCOA", ;
		TabIndex = 12, ;
		TabStop = .F., ;
		Top = 157, ;
		Width = 71, ;
		ZOrderSet = 19
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdLookWell' AS cmdcommandbuttoncustom WITH ;
		Caption = " Well", ;
		Height = 20, ;
		Left = 14, ;
		Name = "cmdLookWell", ;
		TabIndex = 11, ;
		TabStop = .F., ;
		Top = 157, ;
		Width = 78, ;
		ZOrderSet = 20
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdRefund' AS cmdcommandbuttoncustom WITH ;
		Caption = "Refund Balance", ;
		Height = 60, ;
		Left = 468, ;
		Name = "cmdRefund", ;
		Top = 48, ;
		Width = 75, ;
		WordWrap = .T.
		*< END OBJECT: ClassLib="..\..\dmie_rv\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'Glmaint' AS glmaint WITH ;
		Height = 12, ;
		Left = 36, ;
		Name = "Glmaint", ;
		Top = 36, ;
		Width = 24
		*< END OBJECT: ClassLib="..\custom\swgl.vcx" BaseClass="custom" />

	ADD OBJECT 'Grouptran' AS grouptran WITH ;
		Height = 17, ;
		Left = 324, ;
		Name = "Grouptran", ;
		Top = 12, ;
		Width = 37
		*< END OBJECT: ClassLib="..\custom\swgl.vcx" BaseClass="custom" />

	ADD OBJECT 'lblBalance' AS lblfieldlabelcustom WITH ;
		Alignment = 0, ;
		AutoSize = .F., ;
		Caption = "Balance Remaining:", ;
		FontBold = .T., ;
		ForeColor = 255,0,0, ;
		Height = 16, ;
		Left = 25, ;
		Name = "lblBalance", ;
		TabIndex = 22, ;
		Top = 396, ;
		Width = 199, ;
		ZOrderSet = 13
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblCreference' AS lblfieldlabelcustom WITH ;
		Caption = "Check No.", ;
		Height = 16, ;
		Left = 214, ;
		Name = "lblCreference", ;
		TabIndex = 10, ;
		Top = 115, ;
		Width = 51, ;
		ZOrderSet = 11
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblDrecdate' AS lblfieldlabelcustom WITH ;
		Caption = "Payment Date", ;
		Height = 16, ;
		Left = 21, ;
		Name = "lblDrecdate", ;
		TabIndex = 9, ;
		Top = 115, ;
		Width = 68, ;
		ZOrderSet = 9
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom1' AS lbllabelcustom WITH ;
		Caption = "Effective Date", ;
		Left = 124, ;
		Name = "Lbllabelcustom1", ;
		TabIndex = 23, ;
		Top = 162
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblNextension' AS lblfieldlabelcustom WITH ;
		AutoSize = .T., ;
		Caption = "Amount", ;
		Height = 16, ;
		Left = 465, ;
		Name = "lblNextension", ;
		TabIndex = 13, ;
		Top = 161, ;
		Width = 39, ;
		ZOrderSet = 16
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblNpmtamt' AS lblfieldlabelcustom WITH ;
		Caption = "Total Prepayment", ;
		Height = 16, ;
		Left = 306, ;
		Name = "lblNpmtamt", ;
		TabIndex = 22, ;
		Top = 396, ;
		Width = 85, ;
		ZOrderSet = 13
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblUsed' AS lbllabelcustom WITH ;
		Caption = "Prepayment Used", ;
		FontSize = 18, ;
		ForeColor = 255,0,0, ;
		Left = 177, ;
		Name = "lblUsed", ;
		Top = 288, ;
		Visible = .F.
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lstDetail' AS lstlistboxcustom WITH ;
		ColumnCount = 6, ;
		ColumnWidths = "75,170,75,50,85,35", ;
		FontName = "Courier New", ;
		Height = 153, ;
		Left = 8, ;
		Name = "lstDetail", ;
		RowSource = "prepayview.cwellid,cwellname,deffdate,cacctno,namount,crectype", ;
		RowSourceType = 6, ;
		TabIndex = 20, ;
		Top = 236, ;
		Width = 532, ;
		ZOrderSet = 24
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="listbox" />

	ADD OBJECT 'opgDeposits' AS opgoptiongroupcustom WITH ;
		ButtonCount = 2, ;
		Height = 24, ;
		Left = 20, ;
		Name = "opgDeposits", ;
		TabIndex = 2, ;
		Top = 4, ;
		Visible = .T., ;
		Width = 182, ;
		ZOrderSet = 14, ;
		Option1.Caption = "Group Deposits", ;
		Option1.FontSize = 8, ;
		Option1.Height = 17, ;
		Option1.Left = 7, ;
		Option1.Name = "optGroup", ;
		Option1.Top = 5, ;
		Option1.Width = 107, ;
		Option2.Caption = "Deposit To", ;
		Option2.FontSize = 8, ;
		Option2.Height = 19, ;
		Option2.Left = 108, ;
		Option2.Name = "optDepositTo", ;
		Option2.Top = 3, ;
		Option2.Width = 83
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="optiongroup" />

	ADD OBJECT 'Shpshapecustom1' AS shpshapecustom WITH ;
		BackColor = 255,255,128, ;
		BorderStyle = 1, ;
		Height = 82, ;
		Left = 9, ;
		Name = "Shpshapecustom1", ;
		Top = 149, ;
		Width = 531, ;
		ZOrderSet = 1
		*< END OBJECT: ClassLib="..\..\custom\ccontrol.vcx" BaseClass="shape" />

	ADD OBJECT 'txtcAcctDesc' AS txttextboxcustom WITH ;
		BackColor = 212,208,200, ;
		Height = 20, ;
		Left = 231, ;
		lreadonly = .T., ;
		Name = "txtcAcctDesc", ;
		TabIndex = 19, ;
		TabStop = .F., ;
		Top = 202, ;
		Width = 273, ;
		ZOrderSet = 18
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcAcctNo' AS txtquickfill WITH ;
		clistexpression = cacctno, ;
		clistworkarea = coa, ;
		Height = 20, ;
		InputMask = "XXXXXX", ;
		Left = 231, ;
		Name = "txtcAcctNo", ;
		TabIndex = 16, ;
		Top = 179, ;
		Width = 72, ;
		ZOrderSet = 17
		*< END OBJECT: ClassLib="..\common\cmgadget.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtCcustid' AS txtquickfill WITH ;
		clistexpression = investor.cownerid, ;
		clistworkarea = investor, ;
		ControlSource = "prepayh.cownerid", ;
		Height = 20, ;
		InputMask = "XXXXXXXXXX", ;
		Left = 86, ;
		lrequired = .T., ;
		MaxLength = 10, ;
		Name = "txtCcustid", ;
		TabIndex = 5, ;
		Top = 75, ;
		Width = 89, ;
		ZOrderSet = 6
		*< END OBJECT: ClassLib="..\custom\cgadget.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcCustName' AS txttextboxcustom WITH ;
		ControlSource = "", ;
		Height = 20, ;
		Left = 180, ;
		Name = "txtcCustName", ;
		ReadOnly = .T., ;
		TabIndex = 6, ;
		Top = 75, ;
		Width = 276, ;
		ZOrderSet = 4
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtCreference' AS txttextboxcustom WITH ;
		ControlSource = "prepayh.cref", ;
		Height = 20, ;
		Left = 272, ;
		MaxLength = 10, ;
		Name = "txtCreference", ;
		TabIndex = 8, ;
		Top = 112, ;
		Width = 100, ;
		ZOrderSet = 10
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcWellID' AS txtquickfill WITH ;
		clistexpression = cwellid, ;
		clistworkarea = wells, ;
		Height = 20, ;
		InputMask = "XXXXXXXXXX", ;
		Left = 14, ;
		MaxLength = 10, ;
		Name = "txtcWellID", ;
		TabIndex = 14, ;
		Top = 179, ;
		Width = 94, ;
		ZOrderSet = 21
		*< END OBJECT: ClassLib="..\common\cmgadget.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcWellName' AS txttextboxcustom WITH ;
		BackColor = 212,208,200, ;
		Height = 20, ;
		Left = 14, ;
		Name = "txtcWellName", ;
		TabIndex = 18, ;
		Top = 202, ;
		Width = 202, ;
		ZOrderSet = 22
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtdEffDate' AS dpk WITH ;
		Alignment = 3, ;
		ControlSource = "", ;
		Format = "D", ;
		Height = 20, ;
		lcheckdate = .T., ;
		Left = 121, ;
		lmorethan90 = .T., ;
		Name = "txtdEffDate", ;
		TabIndex = 15, ;
		Top = 180, ;
		Value = {}, ;
		Width = 75, ;
		ZOrderSet = 15
		*< END OBJECT: ClassLib="..\custom\swdate.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtdRecDate' AS dpk WITH ;
		Alignment = 3, ;
		ControlSource = "prepayh.ddate", ;
		Format = "D", ;
		Height = 20, ;
		lcheckdate = .T., ;
		Left = 94, ;
		lmorethan90 = .T., ;
		Name = "txtdRecDate", ;
		TabIndex = 7, ;
		Top = 112, ;
		Value = {}, ;
		Width = 75, ;
		ZOrderSet = 15
		*< END OBJECT: ClassLib="..\custom\swdate.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtnExtension' AS txttextboxcustom WITH ;
		Alignment = 3, ;
		Height = 20, ;
		InputMask = "999,999,999.99", ;
		Left = 372, ;
		Name = "txtnExtension", ;
		TabIndex = 17, ;
		Top = 179, ;
		Value = 0.00, ;
		Width = 132, ;
		ZOrderSet = 23
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtNpmtamt' AS txttextboxcustom WITH ;
		Alignment = 3, ;
		ControlSource = "prepayh.ntotal", ;
		Height = 20, ;
		InputMask = "999,999,999.99", ;
		Left = 396, ;
		lrequired = .F., ;
		Name = "txtNpmtamt", ;
		TabIndex = 21, ;
		Top = 394, ;
		Value = 0, ;
		Width = 104, ;
		ZOrderSet = 12
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />
	
	PROCEDURE Activate
		*
		*  Look for the customer/owner/vendor name in
		*  the custownvend view
		*
		LOCAL llReturn, lnSelect, loError
		llReturn = .T.
		
		TRY
		   lnSelect = SELECT()
		
		   SELECT glopt
		   GO TOP
		   IF prepayh.cacctno = cundepfund
		      THISFORM.opgDeposits.VALUE = 1
		   ELSE
		      THISFORM.opgDeposits.VALUE = 2
		   ENDIF
		
		   SELECT (lnSelect)
		   THISFORM.fillownername()
		
		CATCH TO loError
		   llReturn = .F.
		   DO errorlog WITH 'Activate', loError.LINENO, 'PrePay', loError.ERRORNO, loError.MESSAGE, '', loError
		   MESSAGEBOX('Unable to process the prepay at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		        'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		RETURN (DODEFAULT())
	ENDPROC

	PROCEDURE adddetailline
		LOCAL llReturn, loError
		LOCAL lcBatch
		LOCAL cAcctNo, cBatch, cRecType, cWellName, cownerid, cwellid, deffdate, namount
		
		llReturn = .T.
		
		TRY
		   IF THISFORM.txtnextension.VALUE <> 0
		      lcBatch  = prepayh.cBatch
		      m.cBatch = lcBatch
		
		      m.cwellid = THISFORM.txtcwellID.VALUE
		      IF EMPTY(m.cwellid)
		         MESSAGEBOX('You must specify a Well with this prepayment. Please corrrect.', 16, 'Missing Well')
		         THISFORM.setnextcontrol(THISFORM.txtcwellID)
		         THISFORM.txtcwellID.SETFOCUS()
		         llReturn = .F.
		         EXIT
		      ENDIF
		
		      m.namount = THISFORM.txtnextension.VALUE
		      IF m.namount = 0
		         MESSAGEBOX('You must specify an amount for this prepayment. Please correct.', 16, 'Missing Amount')
		         THISFORM.setnextcontrol(THISFORM.txtnextension)
		         THISFORM.txtnextension.SETFOCUS()
		         llReturn = .F.
		         EXIT
		      ENDIF
		
		      m.cAcctNo = THISFORM.txtcacctNo.VALUE
		      IF EMPTY(m.cAcctNo)
		         MESSAGEBOX('You must specify a valid account number for the prepayment. Please correct.', 16, 'Missing Account')
		         THISFORM.setnextcontrol(THISFORM.txtcacctNo)
		         THISFORM.txtcacctNo.SETFOCUS()
		         llReturn = .F.
		         EXIT
		      ENDIF
		
		      m.cWellName = THISFORM.txtcWEllname.VALUE
		      m.cownerid  = THISFORM.txtccustid.VALUE
		      m.deffdate  = THISFORM.txtdEffDate.VALUE
		      IF EMPTY(m.deffdate)
		         MESSAGEBOX('You must specify a valid effective date for the prepayment. Please correct.', 16, 'Missing Effective Date')
		         THISFORM.setnextcontrol(THISFORM.txtdEffDate)
		         THISFORM.txtdEffDate.SETFOCUS()
		         llReturn = .F.
		         EXIT
		      ENDIF
		
		      m.cRecType  = 'P'
		
		      INSERT INTO prepayview FROM MEMVAR
		      SELECT prepayview
		      thisform.lstDetail.Requery()
		      thisform.lstDetail.Refresh()
		      thisform.calctot()
		
		      THISFORM.txtcwellID.SET('value', '')
		      THISFORM.txtcWEllname.SET('value', '')
		      THISFORM.txtnextension.SET('value', 0.00)
		      THISFORM.txtcwellID.SETFOCUS()
		   ELSE
		      THISFORM.txtnextension.SETFOCUS()
		   ENDIF
		   thisform.setstate()
		CATCH TO loError
		   llReturn = .F.
		   DO errorlog WITH 'AddDetailLine', loError.LINENO, 'Prepayments', loError.ERRORNO, loError.MESSAGE, '', loError
		   MESSAGEBOX('Unable to process the prepayment detail line at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		        'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		RETURN llReturn
		
		
	ENDPROC

	PROCEDURE applypmts		&& Automatically applies the payment amount to outstanding invoices.
	ENDPROC

	PROCEDURE calcapplied
	ENDPROC

	PROCEDURE calctot
		LOCAL lnSelect, lcBatch, lnBalance
		LOCAL llReturn, lnRecno, loError
		
		llReturn = .T.
		
		TRY
		   lnBalance = 0
		   lcBatch   = prepayh.cBatch
		   lnSelect  = SELECT()
		   SELECT prepayview
		   SUM(nAmount) TO lnBalance FOR not crectype='U' and NOT DELETED()
		   
		   IF prepayh.nTotal <> lnBalance
		      THISFORM.cmdatamanager.REPLACE('Prepayh', 'Ntotal', lnBalance)
		      THISFORM.txtnpmtamt.REFRESH()
		   ENDIF
		
		   SELECT (lnSelect)
		CATCH TO loError
		   llReturn = .F.
		   DO errorlog WITH 'CalcTot', loError.LINENO, 'PrePay', loError.ERRORNO, loError.MESSAGE, '', loError
		   MESSAGEBOX('Unable to process the prepay at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		        'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		RETURN llReturn
		
		
		
		
	ENDPROC

	PROCEDURE checkbalance		&& Checks what this prepayments current balance is
		LOCAL lcBatch, lnBalance
		
		lnBalance = 0
		
		swselect('prepayview')
		SUM(namount) to lnBalance 
		RETURN lnBalance
		
		
	ENDPROC

	PROCEDURE confirmdelete
		LPARAMETERS cWorkarea, cParameter
		
		RETURN .t.
	ENDPROC

	PROCEDURE delete
		LPARAMETERS cWorkarea
		
		thisform.lconfirmdelete = .f.
		
		DODEFAULT()
	ENDPROC

	PROCEDURE fillownername		&& Fills the owner name by looking up the owner id in the investor file.
		swselect('investor')
		SET ORDER TO cownerid
		IF SEEK(prepayh.cownerid)
		    THISFORM.txtccustname.VALUE = investor.cOwnName
		ELSE
		    THISFORM.txtccustname.VALUE = 'Unknown Owner'
		ENDIF
		
	ENDPROC

	PROCEDURE Init
		LOCAL llReturn, loError
		llReturn = .T.
		
		TRY
		   IF DODEFAULT()
		      IF NOT m.goapp.lAMVersion
		         THIS.cboAcct.VISIBLE     = .F.
		         THIS.txtAcctDesc.VISIBLE = .F.
		         THIS.opgDeposits.VISIBLE = .F.
		      ENDIF
		      THISFORM.cOldAcctno = prepayh.cAcctNo
		
		*      THISFORM.REQUERY('Prepayview')
		
		   ENDIF
		CATCH TO loError
		   llReturn = .F.
		   DO errorlog WITH 'Init', loError.LINENO, 'PrePay', loError.ERRORNO, loError.MESSAGE, '', loError
		   MESSAGEBOX('Unable to process the prepay at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		        'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		thisform.Resize()
		
		RETURN llReturn
		
		
		
	ENDPROC

	PROCEDURE list
		LPARAMETERS cworkarea
		
		LOCAL lcList, llReturn, loError
		PRIV llOK
		
		llReturn = .T.
		
		TRY
		   llOK = .T.
		
		   IF THIS.flushcontrolbuffer() AND THIS.beforenav('prepayh')
			  SELECT  prepayh.cOwnerID,  ;
					  investor.cOwnName,  ;
					  prepayh.cBatch,  ;
					  PADR(DTOS(prepayh.dDate),10,' ') AS dDate,  ;
					  prepayh.nTotal  ;
				  FROM prepayh, investor  ;
				  WHERE prepayh.cOwnerID = investor.cOwnerID  ;
				  INTO CURSOR prepaytemp READWRITE  ;
				  ORDER BY prepayh.cOwnerID
		
		      IF _TALLY > 0
		         REPLACE ddate WITH LEFT(ddate,4)+'/'+SUBSTR(ddate,5,2)+'/'+SUBSTR(ddate,7,2) all
		         SET SAFETY OFF
		         SELECT prepaytemp
		         INDEX ON cOwnerID + dDate TAG cOwnerID
		         INDEX ON dDate TAG dDate
		         INDEX ON cOwnName + dDate TAG cOwnName
		         INDEX ON nTotal TAG nTotal
		
		         lcList = 'cOwnerID\Owner ID,cOwnName\Owner Name,dDate\Date,nTotal\Total'
		         DO FORM ..\CUSTOM\picklist WITH 'prepaytemp', lcList, prepayh.cOwnerID + DTOS(prepayh.dDate), 4, .T., .T.
		
		         IF llOK
		            SELECT prepayh
		            SET ORDER TO cBatch
		            SEEK(prepaytemp.cBatch)
		            THISFORM.cmdatamanager.setrecordposition('prepayh')
		            THISFORM.REFRESH()
		         ENDIF
		      ENDIF
		   ELSE
		      llReturn = .F.
		   ENDIF
		CATCH TO loError
		   llReturn = .F.
		   DO errorlog WITH 'List', loError.LINENO, 'PrePay', loError.ERRORNO, loError.MESSAGE, '', loError
		   MESSAGEBOX('Unable to process the list at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		        'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		RETURN llReturn
		
	ENDPROC

	PROCEDURE prepayused
		LPARAMETERS tcBatch, tlNoEdit
		LOCAL llReturn
		LOCAL lnRecNo, loError
		
		llReturn = .F.
		TRY
		* Look to see if any of this prepayment has been used
		    swselect('prepayview')
		    lnRecNo = RECNO()
		    LOCATE FOR cRecType = 'U' AND lManual = .F.
		    IF FOUND()
		        IF NOT tlNoEdit
		           MESSAGEBOX("Part of this prepayment has been used. It cannot be modified.", 16, 'Delete')
		        ENDIF    
		        llReturn = .T.
		    ENDIF
		*    GOTO lnRecNo
		CATCH TO loError
		    llReturn = .T.
		    DO errorlog WITH 'PrePayUsed', loError.LINENO, 'PrePay', loError.ERRORNO, loError.MESSAGE, '', loError
		    MESSAGEBOX('Unable to process the edit at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		          'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		RETURN llReturn
	ENDPROC

	PROCEDURE refundbalance
		LPARAMETERS lnTotal
		LOCAL llReturn, loError
		LOCAL lManual, lPrinted, lcListID, lcMessage, lcOwnerListID, lcxml, llResult, loaddresp, locheckadd
		LOCAL loexpenseline, lonewchk, loresponse
		LOCAL cDisbAcct, cId, cOffsetAcct, cPayee, cSource, cacctno, cbatch, ccheckno, centrytype
		LOCAL cidchec, cidtype, crectype, ctxnid, dCheckDate, mtxnids, nAmount, ntype
		
		llReturn    = .T.
		lcOwnerID   = prepayh.cownerid
		m.cDisbAcct = prepayh.cacctno
		lcBatch     = prepayh.cbatch
		
		TRY
		    IF lnTotal > 0  &&  Positive, so create a check, if needed
		
		        IF NOT THISFORM.omessage.CONFIRM('This will refund ' + ALLTRIM(TRANSFORM(lnTotal, '$$$,$$$,$$$.99')) + ' to owner ' + ALLTRIM(lcOwnerID) + CHR(10) + ;
		                  'Are you sure?')
		            llReturn = .F.
		            EXIT
		        ENDIF
		
		        DO FORM csgetdate WITH 'PP' TO ldRefundDate
		
		        IF EMPTY(ALLT(m.cDisbAcct))
		            m.cDisbAcct = glopt.cSuspense
		        ENDIF
		
		        SELECT prepayview
		        LOCATE FOR crectype = 'P'
		        m.cOffsetAcct = cacctno
		
		        IF EMPTY(ALLT(m.cOffsetAcct))
		            m.cOffsetAcct = glopt.cSuspense
		        ENDIF
		
		        swSELECT('investor')
		        LOCATE FOR cownerid = lcOwnerID  &&  Lookup QB List ID from owner file
		        lcOwnName     = investor.cownname
		
		        THISFORM.glmaint.cSource    = 'DM'
		        THISFORM.glmaint.dGLDate    = ldRefundDate
		        THISFORM.glmaint.cReference = 'Pre Pmt Refund'
		        THISFORM.glmaint.cDesc      = lcOwnName
		        THISFORM.glmaint.cacctno    = IIF(m.goapp.lAMVersion, m.cDisbAcct, '')
		        THISFORM.glmaint.cId        = lcOwnerID
		        THISFORM.glmaint.cbatch     = lcBatch
		        THISFORM.glmaint.nAmount    = lnTotal
		        THISFORM.glmaint.dCheckDate = ldRefundDate
		        THISFORM.glmaint.dPostDate  = ldRefundDate
		        THISFORM.glmaint.cPayee     = lcOwnName
		        THISFORM.glmaint.cidchec    = ''
		        THISFORM.glmaint.centrytype = 'C'
		        THISFORM.glmaint.cidtype    = 'I'
		        THISFORM.glmaint.cYear      = ' '
		        THISFORM.glmaint.cPeriod    = ' '
		        THISFORM.glmaint.ccheckno   = ''
		        THISFORM.glmaint.cUnitNo    = ''
		        THISFORM.glmaint.cDeptNo    = ''
		        THISFORM.glmaint.lPrinted   = .F.
		
		        THISFORM.glmaint.addcheck()  &&  Create check register entry
		
		        IF m.goapp.lAMVersion
		            THISFORM.glmaint.nAmount    = lnTotal * -1  &&  Make the amount negative for a credit
		            THISFORM.glmaint.updatebatch()  &&  Cash GL entry
		            THISFORM.glmaint.cidchec = ''
		        ENDIF
		
		
		* Get the balance by well so we can zero them out
				SELECT  cwellid, cwellname, cownerid, cbatch, cacctno, SUM(nAmount) AS nAmount ;
					FROM prepayview ;
					INTO CURSOR tempRefund ;
					ORDER BY cwellid ;
					GROUP BY cwellid
		
		        SELECT tempRefund
		        SCAN
		            SCATTER MEMVAR
		            IF m.nAmount > 0
		                m.lManual  = .T.
		                m.crectype = 'U'
		                m.dEffDate = ldRefundDate
		                m.nAmount  = m.nAmount * -1
		                INSERT INTO prepayview FROM MEMVAR
		                IF m.goapp.lAMVersion
		                    THISFORM.glmaint.nAmount = m.nAmount *-1   &&  Make the amount negative for a credit
		                    THISFORM.glmaint.cacctno = m.cacctno
		                    THISFORM.glmaint.cUnitNo = m.cwellid
		                    THISFORM.glmaint.updatebatch()  &&  Cash GL entry
		                ENDIF
		            ENDIF
		        ENDSCAN
		        SELECT prepayview
		        THISFORM.lstDetail.REQUERY()
		        THISFORM.lstDetail.REFRESH()
		        THISFORM.calctot()
		
		        SELECT prepayh
		        TABLEUPDATE(.T., .T.)
		        SELECT prepayview
		        TABLEUPDATE(.T., .T.)
		        SELECT checks
		        TABLEUPDATE(.T., .T.)
		        SELECT glmaster
		        TABLEUPDATE(.T., .T.)
		         SELECT glbatches
		        TABLEUPDATE(.T., .T.)
		        lnBalance           = THISFORM.CheckBalance()
		        THISFORM.lblBalance.CAPTION = 'Balance Remaining: ' + TRANSFORM(lnBalance, '999,999,999.99')
		        THISFORM.setchanged(.F.)
		
		    ELSE
		        IF llCheck  &&  If the option to create a check was chosen, it can't be done, since the balance is negative
		            THISFORM.omessage.DISPLAY('No check was created, since the cleared balance was negative.')
		        ENDIF
		    ENDIF
		CATCH TO loError
		    llReturn = .F.
		    DO errorlog WITH 'RefundBalance', loError.LINENO, 'Prepayments', loError.ERRORNO, loError.MESSAGE, '', loError
		    MESSAGEBOX('Unable to process the Refund at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		          'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		RETURN llReturn
		
		
		
	ENDPROC

	PROCEDURE requery
		LPARAMETERS cWorkarea, uP1, uP2, uP3, uP4
		
		LOCAL lcBatch, llReturn, loError
		llReturn = .T.
		
		TRY
		
		   IF UPPER(m.cWorkarea) = 'PREPAYVIEW'
		      lcBatch = prepayh.cbatch
		      = REQUERY('prepayview')
		      THISFORM.lstDetail.REQUERY()
		      THISFORM.calctot()
		      THISFORM.lstDetail.REFRESH()
		   ENDIF
		
		CATCH TO loError
		   llReturn = .F.
		   DO errorlog WITH 'Requery', loError.LINENO, 'PrePay', loError.ERRORNO, loError.MESSAGE, '', loError
		   MESSAGEBOX('Unable to process the prepay at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		        'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		RETURN llReturn
		
	ENDPROC

	PROCEDURE requeryrecordsource
	ENDPROC

	PROCEDURE setstate
		this.lChanged = .T.
		m.goStateManager.RefreshAll('Form Edit')
	ENDPROC

	PROCEDURE cboAcct.Init
		*
		*  Builds the data displayed in the combo list box
		*
		IF m.goapp.lAMVersion
		   SELECT  cAcctNo + ' - ' + ALLTRIM(cAcctDesc),cacctno FROM coa INTO ARRAY laAcct WHERE lBankacct = .T. ORDER BY cAcctNo
		   IF _TALLY > 0
		      FOR lnX = 1 TO ALEN(laAcct,1)
		         THIS.ADDLISTITEM(laAcct[lnX,1],lnX,1)
		         THIS.ADDLISTITEM(laAcct[lnX,2],lnX,2)
		      ENDFOR
		   ENDIF
		ENDIF
		DODEFAULT()
		
	ENDPROC

	PROCEDURE cmdatamanager.afternav
		LPARAMETERS cWorkarea
		
		IF UPPER(m.cWorkarea) == 'PREPAYH'
		
		* Fill in the owner name for this prepayment
		    THISFORM.fillOwnerName()
		
		    lcBatch = prepayh.cBatch
		
		    IF m.cWorkarea = 'Prepayh' AND NOT thisform.isnew('Prepayh')
		       THISFORM.lblUsed.VISIBLE = THISFORM.PrePayUsed(lcBatch,.T.)
		    ELSE
		       thisform.lblUsed.Visible = .f.
		    ENDIF
		
		    THISFORM.REQUERY('Prepayview')
		    THISFORM.lblBalance.CAPTION = 'Balance Remaining: ' + TRANSFORM(THISFORM.CheckBalance(), '999,999,999.99')
		ENDIF
		
		DODEFAULT(cWorkarea)
	ENDPROC

	PROCEDURE cmdatamanager.afternew
		LPARAMETERS cWorkarea
		
		IF m.cWorkarea = 'Prepayh'   
		   replace prepayh.ddate WITH DATE()
		   THISFORM.setnextcontrol(THISFORM.cboAcct)
		   IF NOT EMPTY(THISFORM.coldacctno)
		      THISFORM.cboAcct.SET('value',THISFORM.coldacctno)
		   ELSE
		      THISFORM.cboAcct.LISTITEMID = 1
		   ENDIF
		   thisform.cboAcct.Refresh()
		
		   lcBatch = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Batch')
		   SET DELETED OFF
		   SELECT prepayh1
		   SET ORDER TO cbatch
		   DO WHILE SEEK(lcBatch)
		      lcBatch = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Batch')
		   ENDDO
		   SET DELETED ON
		   SELECT prepayh
		   REPLACE cbatch  WITH lcBatch
		   
		   THISFORM.ccustsave  = ''
		   thisform.lNewBuild = .t.
		   thisform.lblUsed.Visible = .f.
		   thisform.lstDetail.Requery()
		   thisform.Refresh()
		ENDIF
		
		DODEFAULT(cWorkarea)
		
	ENDPROC

	PROCEDURE cmdatamanager.afterupdate
		LPARAMETERS cWorkareaList, lCurrentRecordOnly
		
		THISFORM.lblBalance.CAPTION = 'Balance Remaining: ' + TRANSFORM(THISFORM.CheckBalance(), '999,999,999.99')
	ENDPROC

	PROCEDURE cmdatamanager.beforenav
		LPARAMETERS cWorkarea
		
		   IF thisform.cmdatamanager.ischanged('Prepayview')
		      IF MESSAGEBOX('There are unsaved changes to the current payment. Do you want to save the changes?',36,'Save changes?') = 6
		         thisform.save()
		      ELSE
		         thisform.cmdatamanager.revertall()
		      ENDIF
		   ENDIF 
		
	ENDPROC

	PROCEDURE cmdatamanager.beforeupdate
		LPARAMETERS cWorkareaList, lCurrentRecordOnly
		
		LOCAL lcBatch, lcAPAcct,  llReturn, lcSelect, lnRecNo, lcFilter, lcChkKey
		LOCAL lcYear, lcRun, llDiffAmount, llCleared, llDiffAccount
		LOCAL lcWellName, loError
		
		llReturn = .T.
		
		TRY
		* Check for required fields
		   IF EMPTY(prepayh.cacctno)
		      THISFORM.oMessage.Warning('A cash account must be specified.  Please choose the cash account.')
		      THISFORM.setnextcontrol(THISFORM.cboacct)
		      llReturn = .F.
		      EXIT
		   ENDIF
		
		   llReturn = THISFORM.PrePayUsed(prepayh.cbatch)
		
		   IF llReturn
		      EXIT
		   ENDIF
		
		   lcBatch  = prepayh.cbatch
		   lcChkKey = prepayh.cidchec
		
		*  Check to see if the fiscal period is closed
		   IF NOT THISFORM.glmaint.checkperiod(prepayh.dDate)
		      THISFORM.oMessage.Warning('Unable to save this receipt. Either the fiscal year or period represented by this date has been closed.')  &&  CheckPeriod returns a message, so a second one is redundant. - BH 12/19/2008
		      llReturn = .F.
		      EXIT
		   ENDIF
		
		   WAIT WINDOW NOWAIT 'Saving Changes, Please Wait.....'
		
		*
		*  Delete the G/L journal entries for this invoice
		*
		   THISFORM.glmaint.delbatch(lcBatch, 'CS')
		
		*
		*  Check for a cleared check register entry.
		*
		   SELECT checks
		   SET ORDER TO cidchec
		   IF SEEK(lcChkKey)
		      llCleared = lcleared
		   ELSE
		      llCleared = .F.
		   ENDIF
		
		*
		*  Create the G/L journal entries for this receipt
		*
		
		*  Cash entry
		   THISFORM.glmaint.cSource    = 'CS'
		   THISFORM.glmaint.cbatch     = lcBatch
		   THISFORM.glmaint.dGLDate    = prepayh.dDate
		   THISFORM.glmaint.cReference = 'Prepay Payment: ' + prepayh.cownerid
		   THISFORM.glmaint.cDesc      = THISFORM.txtcCustName.VALUE
		   THISFORM.glmaint.cacctno    = prepayh.cacctno
		   THISFORM.glmaint.cId        = prepayh.cownerid
		   THISFORM.glmaint.nAmount    = prepayh.nTotal
		   THISFORM.glmaint.dCheckDate = prepayh.dDate
		   THISFORM.glmaint.dpostdate  = prepayh.dDate
		   THISFORM.glmaint.cpayee     = THISFORM.txtcCustName.VALUE
		   THISFORM.glmaint.cidchec    = ''
		   THISFORM.glmaint.centrytype = 'D'
		   THISFORM.glmaint.cidtype    = 'D'
		   THISFORM.glmaint.cyear      = ' '
		   THISFORM.glmaint.cperiod    = ' '
		   THISFORM.glmaint.lcleared   = llCleared
		   THISFORM.glmaint.ccheckno   = prepayh.cRef
		
		* Only add a register entry if the receipt is positive
		   IF prepayh.nTotal > 0
		      IF NOT llCleared
		         THISFORM.glmaint.addcheck()
		         lcChkKey = THISFORM.glmaint.GETKEY()
		         SELECT prepayh
		         REPL cidchec WITH lcChkKey
		         THISFORM.glmaint.cidchec    = lcChkKey
		      ENDIF
		   ENDIF
		
		*  Detail Lines
		   SELECT prepayview
		   lnRecNo  = RECNO()
		   lcFilter = FILTER()
		   SET FILTER TO
		   SCAN FOR cbatch == lcBatch AND NOT crectype = 'U'
		      SCATTER MEMVAR
		
		      THISFORM.glmaint.cbatch  = lcBatch
		      THISFORM.glmaint.dGLDate = prepayh.dDate
		      lcWellName               = prepayview.cWellName
		      THISFORM.glmaint.cDesc   = lcWellName
		      THISFORM.glmaint.cunitno = cwellid
		      THISFORM.glmaint.cacctno = m.cacctno
		
		      THISFORM.glmaint.nAmount    = m.nAmount * -1
		      THISFORM.glmaint.updatebatch()
		
		   ENDSCAN
		
		*  Cash entry
		   THISFORM.glmaint.cSource    = 'CS'
		   THISFORM.glmaint.cbatch     = lcBatch
		   THISFORM.glmaint.dGLDate    = prepayh.dDate
		   THISFORM.glmaint.cReference = 'Prepay Payment: ' + prepayh.cownerid
		   THISFORM.glmaint.cDesc      = THISFORM.txtcCustName.VALUE
		   THISFORM.glmaint.cacctno    = prepayh.cacctno
		   THISFORM.glmaint.cId        = prepayh.cownerid
		   THISFORM.glmaint.dCheckDate = prepayh.dDate
		   THISFORM.glmaint.dpostdate  = prepayh.dDate
		   THISFORM.glmaint.cpayee     = THISFORM.txtcCustName.VALUE
		   THISFORM.glmaint.centrytype = 'D'
		   THISFORM.glmaint.cidtype    = 'D'
		   THISFORM.glmaint.cyear      = ' '
		   THISFORM.glmaint.cperiod    = ' '
		   THISFORM.glmaint.lcleared   = llCleared
		   THISFORM.glmaint.ccheckno   = prepayh.cRef
		   THISFORM.glmaint.cunitno    = ''
		   THISFORM.glmaint.lPrinted   = .T.
		   THISFORM.glmaint.nAmount    = prepayh.nTotal
		
		   THISFORM.glmaint.updatebatch()
		
		*
		*  Check to make sure the batch balances
		*
		   llReturn = THISFORM.glmaint.chkBalance()
		
		
		   IF llReturn
		
		      SELECT glmaster
		      = TABLEUPDATE(.T., .T.)
		      SELECT prepayh
		      = TABLEUPDATE(.T., .T.)
		      SELECT prepayview
		      = TABLEUPDATE(.T., .T.)
		      SELECT checks
		      = TABLEUPDATE(.T., .T.)
		
		      THISFORM.setchanged(.F.)
		      THISFORM.lNewBuild = .F.
		      WAIT WINDOW NOWAIT 'Changes Saved....' TIMEOUT 2
		   ELSE
		      WAIT WIND 'The Batch Was Not In Balance...Unable to save receipt.'
		   ENDIF
		
		   THISFORM.lChanged = .F.
		
		CATCH TO loError
		   llReturn = .F.
		   DO errorlog WITH 'BeforeUpdate', loError.LINENO, 'Prepay', loError.ERRORNO, loError.MESSAGE, '', loError
		   MESSAGEBOX('Unable to process the report at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		        'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		RETURN llReturn
		
	ENDPROC

	PROCEDURE cmdatamanager.delete
		LPARAMETERS cWorkarea
		
		LOCAL lcBatch, lcPmtBatch, lcAmount, lcChkKey
		LOCAL llReturn, lnSelect, loError
		
		llReturn = .F.
		
		TRY
		
		*  Make sure the period or year isn't closed
		   IF NOT THISFORM.glmaint.CheckPeriod(prepayh.ddate)
		      llReturn = .F.
		      EXIT
		   ENDIF
		
		   lcPmtBatch = prepayh.cbatch
		   lcChkKey   = prepayh.cidchec
		
		* Look to see if any of this prepayment has been used
		   llReturn = thisform.PrePayUsed(lcPmtBatch)
		   
		   IF llReturn
		      EXIT
		   ENDIF 
		
		   swselect('checks')
		   LOCATE FOR cidchec == lcChkKey AND lCleared  &&  Make sure the deposit entry hasn't already been cleared before proceeding - BH 9/7/06
		   IF FOUND()
		      THISFORM.oMessage.Warning('The deposit created by this payment has been cleared.  It cannot be deleted.')
		      llReturn = .F.
		      EXIT
		   ENDIF
		
		   IF NOT THISFORM.oMessage.CONFIRM('Are you sure you want to delete this payment?')
		      llReturn = .F.
		      EXIT
		   ENDIF
		
		   lnSelect = SELECT()
		
		   DO CASE
		      CASE LOWER(m.cWorkarea) = 'prepayh'
		
		*
		*  Delete the G/L journal entries for this payment
		*
		         THISFORM.glmaint.delbatch(lcPmtBatch, 'CS')
		         THISFORM.glmaint.delcheck(lcChkKey)
		
		         swselect('checks')
		         LOCATE FOR cbatch = lcPmtBatch
		         IF FOUND('checks')
		            DELETE
		         ENDIF
		
		         swselect('prepayh')
		         DELETE NEXT 1
		         = TABLEUPDATE(.T., .T.)
		         SELECT prepayview
		         DELETE ALL
		         = TABLEUPDATE(.T., .T.)
		         swselect('checks')
		         = TABLEUPDATE(.T., .T.)
		
		         IF m.goapp.lAMVersion
		            swselect('coabal')
		            = TABLEUPDATE(.T., .T.)
		            swselect('glmaster')
		            = TABLEUPDATE(.T., .T.)
		            swselect('glbatches')
		            = TABLEUPDATE(.T., .T.)
		         ENDIF
		
		         THISFORM.lstDetail.CLEAR()
		         THISFORM.lstDetail.REFRESH()
		         THISFORM.setchanged(.F.)
		         SET DELETED ON
		         thisform.next()
		         THISFORM.REQUERY('Prepayview')
		
		         THISFORM.grouptran.lGroupTran = .F.
		         THISFORM.lchanged             = .F.
		   ENDCASE
		   SELECT (lnSelect)
		CATCH TO loError
		   llReturn = .F.
		   DO errorlog WITH 'Delete', loError.LINENO, 'Prepayments', loError.ERRORNO, loError.MESSAGE, '', loError
		   MESSAGEBOX('Unable to delete the prepayment at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		        'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		
		
		RETURN llReturn
		
		
		
	ENDPROC

	PROCEDURE cmdCustomer.Click
		LOCAL lcList
		PRIV llOK
		
		llOK = .T.
		
		TRY
		    SET SAFETY OFF
		
		    swselect('investor')
		    swselect('wellinv')
		
			SELECT  cownerid, csortfield ;
				FROM investor ;
				INTO CURSOR prepayowner READWRITE ;
				WHERE cownerid IN (SELECT  cownerid ;
									   FROM wellinv ;
									   WHERE ljib) ;
				ORDER BY cownerid
		
		    IF _TALLY > 0
		        INDEX ON cownerid TAG cownerid
		        INDEX ON csortfield TAG csortfield
		
		        lcList = 'cOwnerID,cSortField'
		        DO FORM ..\CUSTOM\picklist WITH 'prepayowner', lcList, THISFORM.txtccustid.VALUE, 2, .T.
		
		        IF llOK
		            THISFORM.cmdatamanager.REPLACE('prepayh', 'cownerid', prepayowner.cownerid)
		            THISFORM.txtccustid.REFRESH()
		            THISFORM.txtcCustName.VALUE = prepayowner.csortfield
		            THISFORM.txtcCustName.REFRESH()
		        ENDIF
		
		    ELSE
		        MESSAGEBOX("Prepayments can only be entered for owners who have a JIB interest. " + ;
		              "These are owners marked with the JIB check box in the division of interests." + CHR(10) + CHR(10) + ;
		              "There were no owners found marked in the DOI with a JIB interest.", 48, 'No JIB Owners')
		    ENDIF
		
		CATCH TO loError
		    llReturn = .F.
		    DO errorlog WITH 'Owner Click', loError.LINENO, 'Prepayments', loError.ERRORNO, loError.MESSAGE, '', loError
		    MESSAGEBOX('Unable to bring up the owner list at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		          'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		THISFORM.setnextcontrol(THISFORM.txtccustid)
		
		
		
	ENDPROC

	PROCEDURE cmdLookCOA.Click
		LOCAL lcList
		PRIV llOK
		
		llOK = .T.
		lcList = 'cacctno/acctno,cacctdesc/acctdesc'
		
		DO FORM ..\CUSTOM\picklist WITH 'Coa', lcList, thisform.txtcacctno.value, 2
		
		IF llOK
		   THISFORM.txtcAcctNo.VALUE = coa.cacctno
		   THISFORM.txtcAcctDesc.VALUE = coa.cAcctDesc
		   THISFORM.txtcAcctNo.REFRESH()
		   THISFORM.txtcAcctDesc.REFRESH()
		ENDIF
		
		THISFORM.setnextcontrol(THISFORM.txtcAcctNo)
		
	ENDPROC

	PROCEDURE cmdLookWell.Click
		LOCAL lcList
		PRIV llOK
		
		llOK = .T.
		
		lcList = 'cwellid,cwellname'
		
		SELECT wellinv.cwellid, wells.cwellname ;
		  FROM wellinv, wells ;
		  WHERE wellinv.cownerid = thisform.txtccustid.Value ;
		   AND wellinv.ctypeinv = 'W' ;
		   AND wellinv.ljib = .t. ;
		   AND wellinv.cwellid == wells.cwellid ;
		  INTO CURSOR tempwell READWRITE ;
		  ORDER BY wellinv.cwellid GROUP BY wellinv.cwellid
		  
		  INDEX on cwellid TAG cwellid
		  INDEX on cwellname TAG cwellname
		  
		DO FORM ..\Custom\PickList WITH 'tempwell', lcList, this.parent.txtcwellid.value, 2, .t.
		
		IF llOK
		   this.parent.txtcwellid.value   = tempwell.cwellid
		   this.parent.txtcwellname.value = tempwell.cwellname
		   this.parent.txtcwellid.refresh()
		   this.parent.txtcWellName.refresh()
		ENDIF   
		
		thisform.setnextcontrol(This.Parent.txtcwellid)
		
		ON KEY LABEL F10 _screen.activeform.Save()
		ON KEY LABEL CTRL+A _screen.activeform.New()
		ON KEY LABEL CTRL+D _screen.activeform.Delete()
		ON KEY LABEL CTRL+L _screen.activeform.List()
		
	ENDPROC

	PROCEDURE cmdRefund.Click
		LOCAL lnBalance
		
		lnBalance = thisform.CheckBalance()
		IF lnBalance > 0
		   Thisform.RefundBalance(lnBalance)
		ELSE
		   MESSAGEBOX('There is not a balance to refund from this prepayment.',16,'No Balance')
		ENDIF 
	ENDPROC

	PROCEDURE lstDetail.DblClick
		LOCAL llReturn, loError
		llReturn = .T.
		
		TRY
		
		   llReturn = THISFORM.PrePayUsed(prepayh.cbatch)
		
		   IF llReturn
		      THISFORM.txtcWellID.SET('value', prepayview.cWellID)
		      THISFORM.txtcwellName.SET('value', prepayview.cWellName)
		      IF m.goapp.lAMVersion
		         THISFORM.txtcAcctNo.SET('value', prepayview.cAcctNo)
		         THISFORM.txtcAcctNo.VALID()
		      ENDIF
		      THISFORM.txtnExtension.SET('value', prepayview.nAmount)
		      THISFORM.txtdefFDATE.SET('value', prepayview.deffdate)
		
		      SELECT prepayview
		      DELETE NEXT 1
		      THIS.REFRESH()
		      THIS.REQUERY()
		
		      THISFORM.calctot()
		      THISFORM.txtcWellID.SETFOCUS()
		      THISFORM.setstate()
		   ENDIF
		CATCH TO loError
		   llReturn = .F.
		   DO errorlog WITH 'LstDetail-DblClick', loError.LINENO, 'PrePay', loError.ERRORNO, loError.MESSAGE, '', loError
		   MESSAGEBOX('Unable to process the prepay at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		        'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		RETURN llReturn
	ENDPROC

	PROCEDURE opgDeposits.Init
		*this.value = 2
		
		dodefault()
		
	ENDPROC

	PROCEDURE opgDeposits.optDepositTo.Click
		thisform.cboAcct.set('enabled',.t.)
		
		DODEFAULT()
	ENDPROC

	PROCEDURE opgDeposits.optGroup.Click
		lnSelect = SELECT()
		swselect('glopt')
		IF NOT EMPTY(glopt.cundepfund)
		   swselect('coa')
		   SET ORDER TO acctno
		   SEEK(glopt.cundepfund)
		   IF lbankacct  &&  If it is a bank account
		      THISFORM.cboAcct.VALUE = glopt.cundepfund
		      THISFORM.cmdatamanager.REPLACE('prepayh','Cacctno',glopt.cundepfund)
		      THISFORM.cboAcct.REFRESH()
		      THISFORM.cboAcct.afterchange()
		      thisform.cboAcct.set('enabled',.f.)
		   ELSE  &&  Not a bank account, so don't let them continue
		      THISFORM.oMessage.DISPLAY('Your undeposited funds account is not defined as a bank account.  This must be corrected before any deposits can be grouped.')
		      THIS.PARENT.VALUE = 2
		      THISFORM.cboAcct.LISTITEMID = 1
		      THISFORM.cboAcct.afterchange()
		   ENDIF
		ELSE
		   THISFORM.omessage.warning('The undeposited funds account is not defined in the G/L options. Deposits cannot be grouped.')
		   THISFORM.opgDeposits.VALUE = 2
		ENDIF
		
		SELECT(lnselect)
		
		DODEFAULT()
		
	ENDPROC

	PROCEDURE txtcAcctDesc.When
		RETURN .F.
	ENDPROC

	PROCEDURE txtcAcctNo.GotFocus
		ON KEY LABEL F2 _SCREEN.ACTIVEFORM.cmdLookCOA.CLICK()
		DODEFAULT()
		
	ENDPROC

	PROCEDURE txtcAcctNo.InteractiveChange
		IF DODEFAULT()
		   swselect('coa')
		   LOCATE FOR cacctno = this.Value
		   IF FOUND()
		      thisform.txtcAcctDesc.value = coa.cacctdesc
		      thisform.txtcAcctDesc.Refresh()
		   ELSE
		      thisform.txtcAcctDesc.value = ''
		      thisform.txtcAcctDesc.Refresh()
		   ENDIF 
		ENDIF        
	ENDPROC

	PROCEDURE txtcAcctNo.LostFocus
		ON KEY LABEL F2 *
		DODEFAULT()
		
	ENDPROC

	PROCEDURE txtcAcctNo.Valid
		swselect('coa')
		SET ORDER to acctno
		IF SEEK(this.Value)
		   thisform.txtcAcctDesc.set('value',coa.cAcctDesc)
		   IF lBankAcct
		      thisform.oMessage.Warning('A bank account cannot be selected for the detail account when receiving a pre-payment. Select a non-bank account before continuing.')
		      this.Value = ''
		      thisform.setnextcontrol(this)
		   ELSE
		      IF 'payable' $ LOWER(coa.cacctdesc)
		         MESSAGEBOX("A payable account can't be used as the detail account for a prepayment. Please choose another account.",16,'Invalid Account')
		         thisform.setnextcontrol(this)
		         this.Value = ''
		      ELSE
		         IF 'receivable' $ LOWER(coa.cacctdesc)
		            MESSAGEBOX("A receivable account can't be used as the detail account for a prepayment. Please choose another account.",16,'Invalid Account')
		            thisform.setnextcontrol(this)
		            this.Value = ''
		         ENDIF 
		      ENDIF 
		   ENDIF 
		ELSE
		   thisform.txtcAcctDesc.set('value','Unknown Account')
		ENDIF
		
		DODEFAULT()
	ENDPROC

	PROCEDURE txtCcustid.GotFocus
		ON KEY LABEL F2 _screen.activeform.cmdCustomer.Click()
		
		DODEFAULT()
	ENDPROC

	PROCEDURE txtCcustid.InteractiveChange
		IF DODEFAULT()
		   swselect('investor')
		   LOCATE FOR cOwnerID == THIS.VALUE
		   IF FOUND()
		      THISFORM.txtcCustName.SET('value',investor.cOwnName)
		   ELSE
		      THISFORM.txtcCustName.SET('value','')
		   ENDIF
		ENDIF
		
	ENDPROC

	PROCEDURE txtCcustid.LostFocus
		IF THISFORM.lNewBuild
		   IF THISFORM.cCustSave <> THIS.VALUE
		      THISFORM.cmdatamanager.REPLACE('prepayh','cOwnerID',this.value)
		      thisform.cCustSave = this.Value 
		      THISFORM.calctot()
		   ENDIF
		ENDIF
		
		ON KEY LABEL F2 *
		RETURN (DODEFAULT())
		
	ENDPROC

	PROCEDURE txtCcustid.Valid
		IF DODEFAULT()
		    IF NOT EMPTY(THIS.VALUE)
		        IF THISFORM.cmdatamanager.isnew('Prepayh')
		            swselect('wellinv')
		            LOCATE FOR cownerid == THIS.VALUE AND lJIB
		            IF NOT FOUND()
		                MESSAGEBOX("This owner: " + ALLTRIM(THIS.VALUE) + " doesn't have any JIB interests in the division of interests" + CHR(10) + CHR(10) + ;
		                      "Prepayments can only be entered for owners with JIB interests.", 48, 'No JIB Interests')
		                THIS.SET('value', '')
		                THISFORM.txtccustName.SET('value', '')
		                RETURN 0
		            ENDIF
		        ENDIF
		    ENDIF
		ENDIF
	ENDPROC

	PROCEDURE txtCcustid.When
		thisform.cCustSave = this.value
		
		DODEFAULT()
	ENDPROC

	PROCEDURE txtcCustName.Init
		THISFORM.txtcCustid.VALID()
		
		DODEFAULT()
		
	ENDPROC

	PROCEDURE txtcCustName.When
		RETURN .F.
	ENDPROC

	PROCEDURE txtcWellID.GotFocus
		ON KEY LABEL F2 _SCREEN.ACTIVEFORM.cmdLookWell.CLICK()
		
		DODEFAULT()
		
	ENDPROC

	PROCEDURE txtcWellID.InteractiveChange
		IF DODEFAULT()
		   swselect('wells')
		   LOCATE FOR cwellid == this.Value
		   IF FOUND()
		      thisform.txtcWellName.Value = wells.cwellname
		      thisform.txtcWellName.Refresh()
		   ELSE
		      thisform.txtcWellName.Value = ''
		      thisform.txtcWellName.Refresh()
		   ENDIF
		ENDIF       
		      
		   
	ENDPROC

	PROCEDURE txtcWellID.LostFocus
		ON KEY LABEL F2 *
		DODEFAULT()
		
		
		
		
	ENDPROC

	PROCEDURE txtcWellID.Valid
		IF DODEFAULT()
		    IF NOT EMPTY(THIS.VALUE)
		        swselect('wellinv')
		        LOCATE FOR cownerid == THISFORM.txtccustid.VALUE AND cwellid == THIS.VALUE AND ctypeinv = 'W' AND ljib
		        IF NOT FOUND()
		            MESSAGEBOX("This owner doesn't have any JIB ownership in this well. Try another well.",16,'No JIB Interests Found')
		            thisform.txtcWellID.set('Value','')
		            RETURN 0
		        ENDIF
		    ENDIF
		    IF EMPTY(THIS.VALUE)
		        THIS.PARENT.txtcwellname.SET('value','')
		    ENDIF
		ENDIF
		
	ENDPROC

	PROCEDURE txtcWellName.When
		RETURN .F.
	ENDPROC

	PROCEDURE txtnExtension.LostFocus
		LOCAL lcBatch
		
		IF (LASTKEY() = 13 OR LASTKEY() = 9) AND NOT MDOWN()  &&  Tab or enter, but not a mouseclick
		   THISFORM.AddDetailLine()
		ENDIF
	ENDPROC

	PROCEDURE txtNpmtamt.When
		RETURN .f.
		
	ENDPROC

ENDDEFINE
