*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="bminv.scx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="2" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Cursor3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor6" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor7" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor8" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor9" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor10" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor11" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor12" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor13" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor14" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor16" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor15" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor19" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor21" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Relation1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor17" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor18" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor20" UniqueID="" Timestamp="" />

	AutoOpenTables = .F.
	DataSource = .NULL.
	Height = 619
	InitialSelectedAlias = "invhdr"
	Left = -5
	Name = "Dataenvironment"
	Top = 261
	Width = 981

	ADD OBJECT 'Cursor1' AS cursor WITH ;
		Alias = "invhdr", ;
		CursorSource = "invhdr", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Filter = "NOT DELETED() AND invhdr.lBrine", ;
		Height = 90, ;
		Left = 8, ;
		Name = "Cursor1", ;
		Order = "cinvnum", ;
		Top = 6, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor10' AS cursor WITH ;
		Alias = "glmaster", ;
		CursorSource = "glmaster", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 409, ;
		Name = "Cursor10", ;
		Order = "glbatch", ;
		Top = 11, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor11' AS cursor WITH ;
		Alias = "coabal", ;
		BufferModeOverride = 5, ;
		CursorSource = "coabal", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 297, ;
		Name = "Cursor11", ;
		Top = 9, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor12' AS cursor WITH ;
		Alias = "glopt", ;
		CursorSource = "glopt", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 17, ;
		Name = "Cursor12", ;
		Top = 251, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor13' AS cursor WITH ;
		Alias = "custownvend", ;
		CursorSource = "custownvend", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor13", ;
		Top = 126, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor14' AS cursor WITH ;
		Alias = "custown", ;
		CursorSource = "custown", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 620, ;
		Name = "Cursor14", ;
		Top = 123, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor15' AS cursor WITH ;
		Alias = "leases", ;
		CursorSource = "leases", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 632, ;
		Name = "Cursor15", ;
		Top = 4, ;
		Width = 97
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor16' AS cursor WITH ;
		Alias = "invdet1", ;
		CursorSource = "invdet", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 624, ;
		Name = "Cursor16", ;
		Top = 267, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor17' AS cursor WITH ;
		Alias = "trucks", ;
		CursorSource = "trucks", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 485, ;
		Name = "Cursor17", ;
		Top = 373, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor18' AS cursor WITH ;
		Alias = "trangroup", ;
		CursorSource = "trangroup", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 760, ;
		Name = "Cursor18", ;
		Top = 41, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor19' AS cursor WITH ;
		Alias = "brinelog", ;
		CursorSource = "brinelog", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 282, ;
		Name = "Cursor19", ;
		Top = 266, ;
		Width = 97
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor2' AS cursor WITH ;
		Alias = "invdet", ;
		BufferModeOverride = 5, ;
		CursorSource = "invdet", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 157, ;
		Name = "Cursor2", ;
		Top = 37, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor20' AS cursor WITH ;
		Alias = "invhdr1", ;
		CursorSource = "invhdr", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 850, ;
		Name = "Cursor20", ;
		Top = 260, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor21' AS cursor WITH ;
		Alias = "brinelog1", ;
		CursorSource = "brinelog", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 284, ;
		Name = "Cursor21", ;
		Top = 386, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor3' AS cursor WITH ;
		Alias = "salestx", ;
		CursorSource = "salestx", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 62, ;
		Left = 518, ;
		Name = "Cursor3", ;
		Order = "ctaxcode", ;
		Top = 26, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor4' AS cursor WITH ;
		Alias = "terms", ;
		CursorSource = "terms", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 400, ;
		Name = "Cursor4", ;
		Top = 131, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor5' AS cursor WITH ;
		Alias = "custs", ;
		CursorSource = "custs", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 143, ;
		Name = "Cursor5", ;
		Top = 347, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor6' AS cursor WITH ;
		Alias = "investor", ;
		CursorSource = "investor", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 399, ;
		Name = "Cursor6", ;
		Top = 254, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor7' AS cursor WITH ;
		Alias = "coa", ;
		CursorSource = "coa", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 509, ;
		Name = "Cursor7", ;
		Order = "acctno", ;
		Top = 116, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor8' AS cursor WITH ;
		Alias = "items", ;
		CursorSource = "items", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 152, ;
		Name = "Cursor8", ;
		Order = "citemid", ;
		Top = 215, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor9' AS cursor WITH ;
		Alias = "aropt", ;
		CursorSource = "aropt", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 293, ;
		Name = "Cursor9", ;
		Top = 137, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Relation1' AS relation WITH ;
		ChildAlias = "invdet", ;
		ChildOrder = "cbatch", ;
		Name = "Relation1", ;
		ParentAlias = "invhdr", ;
		RelationalExpr = "cbatch"
		*< END OBJECT: BaseClass="relation" />

ENDDEFINE

DEFINE CLASS formbminv AS frmdatamanagerformcustom OF "..\custom\cforms.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Shape1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtCinvnum" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblCinvnum" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblCcustid" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Glmaint" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblDinvdate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Swlookupbutton1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblDduedate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="edtNotes" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblDdiscdate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtCreference" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblCreference" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblDpostdate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtNinvtot" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblNinvtot" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtNinvbal" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblNinvbal" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcName" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboTerms" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcItemId" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcItemDesc" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtnPrice" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtnQuantity" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcTaxable" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtnExtension" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdInvdet" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdInvdet.Column1.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdInvdet.Column1.txtcItemId" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdInvdet.Column2.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdInvdet.Column2.txtcItemDesc" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdInvdet.Column3.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdInvdet.Column3.txtnPrice" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdInvdet.Column4.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdInvdet.Column4.txtnQuantity" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdInvdet.Column7.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdInvdet.Column7.txtnExtension" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdInvdet.Column5.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdInvdet.Column5.txtcWorkOrder" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdInvdet.Column6.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdInvdet.Column6.txtcTaxable" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdInvdet.Column8.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdInvdet.Column8.txtcWellID" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdInvdet.Column9.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdInvdet.Column9.cmdEdit" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdInvdet.Column10.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdInvdet.Column10.cmdDelete" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdLookItem" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdLookWell" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcPriceCode" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcWellName" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcWellID" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcWorkOrder" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkPrintNotes" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtInjectionFee" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblNsalestax" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lblfieldlabelcustom1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtNsalestax" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grouptran" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboSalesTax" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcCustID" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboDisposal" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom6" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdTruck" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom7" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboType" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom8" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcTruck" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtWorkDate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtdPostDate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtdInvDate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtdDueDate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtdDiscDate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chklPrinted" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: adddetail
		*m: calcext		&& Calculates the detail extension total
		*m: calcinjfee		&& Calculates the injection fee based on the passed item, well and qty
		*m: calctot		&& Calculates the Invoice Totals
		*m: editdetail
		*m: getnextinvno		&& Get's the next invoice number
		*m: getprice		&& Gets the price for the item based upon the price code passed.
		*m: loaddisposal		&& Loads the disposal dropdown.
		*m: lookcoa
		*m: report		&& Print the Invoice
		*m: setstate		&& Resets the form state for non bound controls so that the save button still works.
		*m: valterms		&& Validate Terms and Set Due Date and Disc Date based on the Terms
		*p: coldcust		&& Customer ID when the txtcCustID field is entered.  Used to check if the customer was changed.
		*p: lbrine		&& Brine Hauler Item Invoice
		*p: lncount
		*p: nextension
		*p: nindistrict		&& In District Injection Fee Rate
		*p: noutofdistrict		&& Out of District Injection Fee Rate
		*p: nprice
		*p: nquantity
	*</DefinedPropArrayMethod>

	Caption = "Brine Work Orders/Invoices"
	cdisplayname = 
	clistexpression = invhdr.cbatch
	cnavworkarea = Invhdr
	coldcust = 		&& Customer ID when the txtcCustID field is entered.  Used to check if the customer was changed.
	cworkarea = Invhdr
	DoCreate = .T.
	Height = 451
	HelpContextID = 648
	lexpliciteditmode = .F.
	lncount = 0
	lrememberposition = .F.
	lremembersize = .F.
	Name = "FormBMinv"
	nindistrict = 0		&& In District Injection Fee Rate
	noutofdistrict = 0		&& Out of District Injection Fee Rate
	Visible = .T.
	Width = 659
	WindowState = 0
	_memberdata = <VFPData>
		<memberdata name="nindistrict" display="nInDistrict"/>
		<memberdata name="noutofdistrict" display="nOutOfDistrict"/>
		<memberdata name="getnextinvno" display="GetNextInvNo"/>
		</VFPData>
	cmdatamanager.Name = "cmdatamanager"
	cmdatamanager.TabIndex = 34
	cmdatamanager.ZOrderSet = 0
	cmlookupmanager.Name = "cmlookupmanager"
	Mwresize1.lblHighLight.Name = "lblHighLight"
	Mwresize1.lblShading.Name = "lblShading"
	Mwresize1.Name = "Mwresize1"

	ADD OBJECT 'cboDisposal' AS cbocomboboxcustom WITH ;
		BoundColumn = 2, ;
		Height = 20, ;
		Left = 502, ;
		Name = "cboDisposal", ;
		Sorted = .T., ;
		TabIndex = 24, ;
		Top = 136, ;
		Width = 128
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="combobox" />

	ADD OBJECT 'cboSalesTax' AS cbocomboboxcustom WITH ;
		ControlSource = "invhdr.ctaxcode", ;
		Height = 20, ;
		Left = 285, ;
		Name = "cboSalesTax", ;
		TabIndex = 54, ;
		Top = 353
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="combobox" />

	ADD OBJECT 'cboTerms' AS cbocomboboxcustom WITH ;
		BoundColumn = 2, ;
		ControlSource = "Invhdr.cidterm", ;
		Height = 20, ;
		Left = 454, ;
		Margin = 2, ;
		Name = "cboTerms", ;
		RowSource = "", ;
		RowSourceType = 0, ;
		TabIndex = 8, ;
		Top = 33, ;
		Width = 156, ;
		ZOrderSet = 24
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="combobox" />

	ADD OBJECT 'cboType' AS cbocomboboxcustom WITH ;
		Height = 20, ;
		Left = 403, ;
		Name = "cboType", ;
		TabIndex = 20, ;
		Top = 114, ;
		Width = 59
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="combobox" />

	ADD OBJECT 'chklPrinted' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Printed", ;
		ControlSource = "invhdr.lprinted", ;
		Left = 228, ;
		Name = "chklPrinted", ;
		TabIndex = 30, ;
		Top = 410
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkPrintNotes' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Print Notes On Invoice", ;
		ControlSource = "invhdr.lprintnotes", ;
		Left = 228, ;
		Name = "chkPrintNotes", ;
		TabIndex = 29, ;
		Top = 380
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'cmdLookItem' AS cmdcommandbuttoncustom WITH ;
		Caption = "Item ID", ;
		Height = 20, ;
		Left = 91, ;
		Name = "cmdLookItem", ;
		TabIndex = 42, ;
		TabStop = .F., ;
		Top = 92, ;
		Width = 72, ;
		ZOrderSet = 32
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdLookWell' AS cmdcommandbuttoncustom WITH ;
		Caption = " Well ID", ;
		Height = 20, ;
		Left = 330, ;
		Name = "cmdLookWell", ;
		TabIndex = 43, ;
		TabStop = .F., ;
		Top = 92, ;
		Width = 65, ;
		ZOrderSet = 33
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdTruck' AS cmdcommandbuttoncustom WITH ;
		Caption = "Truck", ;
		Height = 20, ;
		Left = 459, ;
		Name = "cmdTruck", ;
		TabIndex = 21, ;
		TabStop = .F., ;
		Top = 92, ;
		Width = 36
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'edtNotes' AS edteditboxcustom WITH ;
		ControlSource = "invhdr.mnotes", ;
		Height = 92, ;
		Left = 43, ;
		Name = "edtNotes", ;
		TabIndex = 28, ;
		Top = 347, ;
		Width = 173
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="editbox" />

	ADD OBJECT 'Glmaint' AS glmaint WITH ;
		Left = 12, ;
		Name = "Glmaint", ;
		Top = 60
		*< END OBJECT: ClassLib="..\custom\swgl.vcx" BaseClass="custom" />

	ADD OBJECT 'grdInvdet' AS grdgridcustom WITH ;
		ColumnCount = 10, ;
		cworkarea = .NULL., ;
		Height = 157, ;
		lallowautoappend = .F., ;
		lallownew = .F., ;
		lcolumnmemory = .F., ;
		Left = 3, ;
		LinkMaster = "invhdr", ;
		Name = "grdInvdet", ;
		Panel = 1, ;
		RecordSource = "invdet", ;
		RecordSourceType = 1, ;
		RelationalExpr = "cbatch", ;
		TabIndex = 27, ;
		Top = 186, ;
		Width = 645, ;
		ZOrderSet = 31, ;
		Column1.ColumnOrder = 3, ;
		Column1.ControlSource = "invdet.citemid", ;
		Column1.FontSize = 8, ;
		Column1.Name = "Column1", ;
		Column1.Width = 60, ;
		Column10.Name = "Column10", ;
		Column10.Sparse = .F., ;
		Column2.ColumnOrder = 4, ;
		Column2.ControlSource = "invdet.citemdesc", ;
		Column2.FontSize = 8, ;
		Column2.Name = "Column2", ;
		Column2.Width = 175, ;
		Column3.ColumnOrder = 5, ;
		Column3.ControlSource = "invdet.nprice", ;
		Column3.FontSize = 8, ;
		Column3.Name = "Column3", ;
		Column3.Width = 57, ;
		Column4.ColumnOrder = 6, ;
		Column4.ControlSource = "invdet.nquantity", ;
		Column4.FontSize = 8, ;
		Column4.Name = "Column4", ;
		Column4.Width = 57, ;
		Column5.ColumnOrder = 8, ;
		Column5.Comment = "Column7", ;
		Column5.ControlSource = "invdet.nextension", ;
		Column5.FontSize = 8, ;
		Column5.Name = "Column7", ;
		Column5.Width = 67, ;
		Column6.ColumnOrder = 2, ;
		Column6.ControlSource = "invdet.cworkorder", ;
		Column6.FontSize = 8, ;
		Column6.Name = "Column5", ;
		Column6.Width = 60, ;
		Column7.ColumnOrder = 9, ;
		Column7.ControlSource = "invdet.ctaxable", ;
		Column7.FontSize = 8, ;
		Column7.Name = "Column6", ;
		Column7.Width = 20, ;
		Column8.ColumnOrder = 7, ;
		Column8.ControlSource = "invdet.cunitno", ;
		Column8.FontSize = 8, ;
		Column8.Name = "Column8", ;
		Column8.Width = 66, ;
		Column9.ColumnOrder = 1, ;
		Column9.Name = "Column9", ;
		Column9.Sparse = .F., ;
		Column9.Width = 28
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="grid" />

	ADD OBJECT 'grdInvdet.Column1.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "Item ID", ;
		FontSize = 8, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'grdInvdet.Column1.txtcItemId' AS txtquickfill WITH ;
		clistexpression = items.citemid, ;
		clistworkarea = items, ;
		FontName = "Arial", ;
		FontSize = 8, ;
		Left = 37, ;
		Name = "txtcItemId", ;
		Top = 33
		*< END OBJECT: ClassLib="..\custom\cgadget.vcx" BaseClass="textbox" />

	ADD OBJECT 'grdInvdet.Column10.cmdDelete' AS cmdcommandbuttoncustom WITH ;
		Caption = "X", ;
		ForeColor = 255,0,0, ;
		Left = 15, ;
		Name = "cmdDelete", ;
		Top = 29
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'grdInvdet.Column10.Header1' AS header WITH ;
		Caption = "", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'grdInvdet.Column2.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "Description", ;
		FontSize = 8, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'grdInvdet.Column2.txtcItemDesc' AS txttextboxcustom WITH ;
		cworkarea = invdet, ;
		FontName = "Arial", ;
		FontSize = 8, ;
		Left = 100, ;
		Name = "txtcItemDesc", ;
		Top = 35
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'grdInvdet.Column3.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "Price", ;
		FontSize = 8, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'grdInvdet.Column3.txtnPrice' AS txttextboxcustom WITH ;
		cworkarea = invdet, ;
		FontName = "Arial", ;
		FontSize = 8, ;
		InputMask = "9999.99", ;
		Left = 14, ;
		Name = "txtnPrice", ;
		Top = 23
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'grdInvdet.Column4.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "Quantity", ;
		FontSize = 8, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'grdInvdet.Column4.txtnQuantity' AS txttextboxcustom WITH ;
		cworkarea = invdet, ;
		FontName = "Arial", ;
		FontSize = 8, ;
		InputMask = "9999.99", ;
		Left = 19, ;
		Name = "txtnQuantity", ;
		Top = 35
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'grdInvdet.Column5.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "Work Order", ;
		FontSize = 8, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'grdInvdet.Column5.txtcWorkOrder' AS txttextboxcustom WITH ;
		ControlSource = "invdet.cworkorder", ;
		FontName = "Arial", ;
		FontSize = 8, ;
		Left = 27, ;
		Name = "txtcWorkOrder", ;
		Top = 33
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'grdInvdet.Column6.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "Tax", ;
		FontSize = 8, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'grdInvdet.Column6.txtcTaxable' AS txttextboxcustom WITH ;
		ControlSource = "invdet.ctaxable", ;
		cworkarea = invdet, ;
		FontName = "Arial", ;
		FontSize = 8, ;
		InputMask = "! X", ;
		Left = 61, ;
		MaxLength = 1, ;
		Name = "txtcTaxable", ;
		Top = 23
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'grdInvdet.Column7.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "Extension", ;
		FontSize = 8, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'grdInvdet.Column7.txtnExtension' AS txttextboxcustom WITH ;
		ControlSource = "invdet.nextension", ;
		cworkarea = invdet, ;
		FontName = "Arial", ;
		FontSize = 8, ;
		Left = 57, ;
		Name = "txtnExtension", ;
		Top = 35
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'grdInvdet.Column8.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "Well ID", ;
		FontSize = 8, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'grdInvdet.Column8.txtcWellID' AS txtquickfill WITH ;
		clistexpression = cwellid, ;
		clistworkarea = leases, ;
		FontSize = 8, ;
		Left = 18, ;
		Name = "txtcWellID", ;
		Top = 24
		*< END OBJECT: ClassLib="..\custom\cgadget.vcx" BaseClass="textbox" />

	ADD OBJECT 'grdInvdet.Column9.cmdEdit' AS cmdcommandbuttoncustom WITH ;
		Caption = "Edit", ;
		FontBold = .T., ;
		FontSize = 6, ;
		ForeColor = 255,0,0, ;
		Left = 10, ;
		Name = "cmdEdit", ;
		Top = 29
		*< END OBJECT: ClassLib="..\..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'grdInvdet.Column9.Header1' AS header WITH ;
		Caption = "", ;
		FontBold = .T., ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'Grouptran' AS grouptran WITH ;
		Height = 17, ;
		Left = 8, ;
		Name = "Grouptran", ;
		Top = 386, ;
		Width = 28
		*< END OBJECT: ClassLib="..\custom\swgl.vcx" BaseClass="custom" />

	ADD OBJECT 'Label1' AS lbllabelcustom WITH ;
		Caption = "Price", ;
		Height = 16, ;
		Left = 230, ;
		Name = "Label1", ;
		TabIndex = 45, ;
		Top = 94, ;
		Width = 26, ;
		ZOrderSet = 35
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Label2' AS lbllabelcustom WITH ;
		Caption = "Quantity", ;
		Height = 16, ;
		Left = 280, ;
		Name = "Label2", ;
		TabIndex = 46, ;
		Top = 94, ;
		Width = 42, ;
		ZOrderSet = 36
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Label3' AS lbllabelcustom WITH ;
		Caption = "Extension", ;
		Height = 16, ;
		Left = 550, ;
		Name = "Label3", ;
		TabIndex = 47, ;
		Top = 94, ;
		Width = 49, ;
		ZOrderSet = 37
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Label4' AS lbllabelcustom WITH ;
		Caption = "Tax", ;
		Height = 16, ;
		Left = 608, ;
		Name = "Label4", ;
		TabIndex = 48, ;
		Top = 94, ;
		Width = 20, ;
		ZOrderSet = 38
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblCcustid' AS lblfieldlabelcustom WITH ;
		Alignment = 0, ;
		Caption = "Customer ID", ;
		Height = 16, ;
		Left = 24, ;
		Name = "lblCcustid", ;
		TabIndex = 1, ;
		Top = 7, ;
		Width = 60, ;
		ZOrderSet = 6
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblCinvnum' AS lblfieldlabelcustom WITH ;
		Alignment = 0, ;
		Caption = "Invoice No", ;
		Height = 16, ;
		Left = 24, ;
		Name = "lblCinvnum", ;
		TabIndex = 36, ;
		Top = 35, ;
		Width = 52, ;
		ZOrderSet = 4
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblCreference' AS lblfieldlabelcustom WITH ;
		Caption = "Reference", ;
		Height = 16, ;
		Left = 199, ;
		Name = "lblCreference", ;
		TabIndex = 35, ;
		Top = 35, ;
		Width = 53, ;
		ZOrderSet = 14
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblDdiscdate' AS lblfieldlabelcustom WITH ;
		Caption = "Disc Date", ;
		Height = 16, ;
		Left = 425, ;
		Name = "lblDdiscdate", ;
		TabIndex = 40, ;
		Top = 65, ;
		Width = 48, ;
		ZOrderSet = 12
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblDduedate' AS lblfieldlabelcustom WITH ;
		Caption = "Due Date", ;
		Height = 16, ;
		Left = 241, ;
		Name = "lblDduedate", ;
		TabIndex = 41, ;
		Top = 65, ;
		Width = 46, ;
		ZOrderSet = 10
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblDinvdate' AS lblfieldlabelcustom WITH ;
		Alignment = 0, ;
		Caption = "Invoice Date", ;
		Height = 16, ;
		Left = 48, ;
		Name = "lblDinvdate", ;
		TabIndex = 39, ;
		Top = 65, ;
		Width = 61, ;
		ZOrderSet = 8
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblDpostdate' AS lblfieldlabelcustom WITH ;
		Caption = "Post Date", ;
		Height = 16, ;
		Left = 465, ;
		Name = "lblDpostdate", ;
		TabIndex = 4, ;
		Top = 7, ;
		Width = 48, ;
		ZOrderSet = 16
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lblfieldlabelcustom1' AS lblfieldlabelcustom WITH ;
		Caption = "Injection Well Fee:", ;
		Height = 16, ;
		Left = 428, ;
		Name = "Lblfieldlabelcustom1", ;
		TabIndex = 50, ;
		Top = 400, ;
		Width = 88, ;
		ZOrderSet = 44
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom1' AS lbllabelcustom WITH ;
		Caption = "Terms", ;
		Height = 16, ;
		Left = 411, ;
		Name = "Lbllabelcustom1", ;
		TabIndex = 37, ;
		Top = 35, ;
		Width = 32, ;
		ZOrderSet = 23
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom2' AS lbllabelcustom WITH ;
		AutoSize = .T., ;
		Caption = "PC", ;
		Height = 16, ;
		Left = 173, ;
		Name = "Lbllabelcustom2", ;
		TabIndex = 44, ;
		Top = 94, ;
		Width = 15, ;
		ZOrderSet = 40
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom3' AS lbllabelcustom WITH ;
		Caption = "Sales Tax", ;
		Height = 16, ;
		Left = 233, ;
		Name = "Lbllabelcustom3", ;
		TabIndex = 52, ;
		Top = 356, ;
		Width = 50, ;
		ZOrderSet = 47
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom4' AS lbllabelcustom WITH ;
		Caption = "Notes", ;
		Left = 8, ;
		Name = "Lbllabelcustom4", ;
		TabIndex = 53, ;
		Top = 346
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom5' AS lbllabelcustom WITH ;
		Caption = " Work Order", ;
		Left = 9, ;
		Name = "Lbllabelcustom5", ;
		TabIndex = 55, ;
		Top = 94
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom6' AS lbllabelcustom WITH ;
		Caption = "Disp Site", ;
		Left = 432, ;
		Name = "Lbllabelcustom6", ;
		TabIndex = 56, ;
		Top = 138
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom7' AS lbllabelcustom WITH ;
		Caption = "Type", ;
		Left = 410, ;
		Name = "Lbllabelcustom7", ;
		TabIndex = 57, ;
		Top = 96
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom8' AS lbllabelcustom WITH ;
		Caption = "Date", ;
		Left = 324, ;
		Name = "Lbllabelcustom8", ;
		TabIndex = 58, ;
		Top = 138
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblNinvbal' AS lblfieldlabelcustom WITH ;
		Caption = "Balance Due:", ;
		Height = 16, ;
		Left = 450, ;
		Name = "lblNinvbal", ;
		TabIndex = 51, ;
		Top = 424, ;
		Width = 66, ;
		ZOrderSet = 20
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblNinvtot' AS lblfieldlabelcustom WITH ;
		Caption = "Subtotal:", ;
		Height = 16, ;
		Left = 472, ;
		Name = "lblNinvtot", ;
		TabIndex = 49, ;
		Top = 355, ;
		Width = 44, ;
		ZOrderSet = 18
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblNsalestax' AS lblfieldlabelcustom WITH ;
		Caption = "Sales Taxes:", ;
		Height = 16, ;
		Left = 451, ;
		Name = "lblNsalestax", ;
		TabIndex = 50, ;
		Top = 377, ;
		Width = 65, ;
		ZOrderSet = 44
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Shape1' AS shape WITH ;
		BackColor = 255,255,128, ;
		Height = 95, ;
		Left = 3, ;
		Name = "Shape1", ;
		SpecialEffect = 0, ;
		Top = 88, ;
		Width = 645, ;
		ZOrderSet = 1
		*< END OBJECT: BaseClass="shape" />

	ADD OBJECT 'Swlookupbutton1' AS swlookupbutton WITH ;
		Left = 171, ;
		Name = "Swlookupbutton1", ;
		TabIndex = 38, ;
		Top = 5
		*< END OBJECT: ClassLib="..\custom\swcontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'txtcCustID' AS txtquickfill WITH ;
		clistexpression = custs.ccustid, ;
		clistworkarea = custs, ;
		ControlSource = "invhdr.ccustid", ;
		Format = "K!", ;
		Left = 87, ;
		MaxLength = 10, ;
		Name = "txtcCustID", ;
		TabIndex = 2, ;
		Top = 5, ;
		Width = 80
		*< END OBJECT: ClassLib="..\custom\cgadget.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtCinvnum' AS txttextboxcustom WITH ;
		ControlSource = "invhdr.cinvnum", ;
		Height = 20, ;
		Left = 87, ;
		lrequired = .T., ;
		Margin = 1, ;
		MaxLength = 10, ;
		Name = "txtCinvnum", ;
		TabIndex = 6, ;
		Top = 33, ;
		Width = 80, ;
		ZOrderSet = 3
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcItemDesc' AS txttextboxcustom WITH ;
		Height = 20, ;
		Left = 7, ;
		Margin = 1, ;
		Name = "txtcItemDesc", ;
		TabIndex = 14, ;
		Top = 136, ;
		Width = 305, ;
		ZOrderSet = 26
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcItemId' AS txtquickfill WITH ;
		clistexpression = items.citemid, ;
		clistworkarea = items, ;
		Format = "!", ;
		Height = 20, ;
		InputMask = "XXXXXXXXXX", ;
		Left = 87, ;
		Margin = 1, ;
		MaxLength = 10, ;
		Name = "txtcItemId", ;
		TabIndex = 13, ;
		Top = 114, ;
		Width = 81, ;
		ZOrderSet = 25
		*< END OBJECT: ClassLib="..\custom\cgadget.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcName' AS txttextboxcustom WITH ;
		ControlSource = "", ;
		Height = 20, ;
		Left = 200, ;
		lreadonly = .F., ;
		Margin = 1, ;
		Name = "txtcName", ;
		ReadOnly = .T., ;
		TabIndex = 3, ;
		Top = 5, ;
		Width = 252, ;
		ZOrderSet = 21
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcPriceCode' AS txttextboxcustom WITH ;
		Format = "K", ;
		Height = 20, ;
		InputMask = "X", ;
		Left = 169, ;
		Margin = 1, ;
		Name = "txtcPriceCode", ;
		TabIndex = 15, ;
		Top = 114, ;
		Width = 21, ;
		ZOrderSet = 34
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtCreference' AS txttextboxcustom WITH ;
		ControlSource = "invhdr.creference", ;
		Height = 20, ;
		Left = 263, ;
		Margin = 1, ;
		MaxLength = 15, ;
		Name = "txtCreference", ;
		TabIndex = 7, ;
		Top = 33, ;
		Width = 113, ;
		ZOrderSet = 13
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcTaxable' AS txttextboxcustom WITH ;
		Format = "!K", ;
		Height = 20, ;
		InputMask = "A", ;
		Left = 606, ;
		Margin = 1, ;
		Name = "txtcTaxable", ;
		TabIndex = 26, ;
		Top = 114, ;
		Width = 24, ;
		ZOrderSet = 29
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcTruck' AS txtquickfill WITH ;
		clistexpression = ctruck, ;
		clistworkarea = trucks, ;
		Height = 20, ;
		InputMask = "XXXX", ;
		Left = 463, ;
		MaxLength = 4, ;
		Name = "txtcTruck", ;
		TabIndex = 22, ;
		Top = 114, ;
		Width = 29
		*< END OBJECT: ClassLib="..\custom\cgadget.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcWellID' AS txtquickfill WITH ;
		clistexpression = cwellid, ;
		clistworkarea = leases, ;
		Format = "K!", ;
		Height = 20, ;
		Left = 324, ;
		lrequired = .F., ;
		Margin = 1, ;
		MaxLength = 10, ;
		Name = "txtcWellID", ;
		TabIndex = 18, ;
		Top = 114, ;
		Width = 77, ;
		ZOrderSet = 41
		*< END OBJECT: ClassLib="..\custom\cgadget.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcWellName' AS txttextboxcustom WITH ;
		BackColor = 192,192,192, ;
		Height = 20, ;
		Left = 348, ;
		lreadonly = .T., ;
		Margin = 1, ;
		Name = "txtcWellName", ;
		TabIndex = 19, ;
		TabStop = .F., ;
		Top = 158, ;
		Width = 282, ;
		ZOrderSet = 39
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcWorkOrder' AS txttextboxcustom WITH ;
		Height = 20, ;
		Left = 7, ;
		lrequired = .F., ;
		Margin = 1, ;
		Name = "txtcWorkOrder", ;
		TabIndex = 12, ;
		Top = 114, ;
		Width = 77, ;
		ZOrderSet = 41
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtdDiscDate' AS dpk WITH ;
		ControlSource = "invhdr.ddiscdate", ;
		Height = 20, ;
		Left = 482, ;
		lmorethan90 = .T., ;
		Name = "txtdDiscDate", ;
		TabIndex = 11, ;
		Top = 62, ;
		Width = 75
		*< END OBJECT: ClassLib="..\custom\swdate.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtdDueDate' AS dpk WITH ;
		ControlSource = "invhdr.dduedate", ;
		Height = 20, ;
		Left = 291, ;
		lmorethan90 = .T., ;
		Name = "txtdDueDate", ;
		TabIndex = 10, ;
		Top = 64, ;
		Width = 75
		*< END OBJECT: ClassLib="..\custom\swdate.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtdInvDate' AS dpk WITH ;
		ControlSource = "invhdr.dinvdate", ;
		Height = 20, ;
		Left = 114, ;
		lmorethan90 = .T., ;
		Name = "txtdInvDate", ;
		TabIndex = 9, ;
		Top = 62, ;
		Width = 75
		*< END OBJECT: ClassLib="..\custom\swdate.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtdPostDate' AS dpk WITH ;
		ControlSource = "invhdr.dpostdate", ;
		Height = 20, ;
		lcheckdate = .T., ;
		Left = 515, ;
		lmorethan90 = .T., ;
		Name = "txtdPostDate", ;
		TabIndex = 5, ;
		Top = 5, ;
		Width = 75
		*< END OBJECT: ClassLib="..\custom\swdate.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtInjectionFee' AS txttextboxcustom WITH ;
		ControlSource = "invhdr.ninjectionfee", ;
		Height = 20, ;
		InputMask = "999999999.99", ;
		Left = 522, ;
		Margin = 1, ;
		Name = "txtInjectionFee", ;
		TabIndex = 32, ;
		TabStop = .F., ;
		Top = 398, ;
		Width = 104, ;
		ZOrderSet = 43
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtnExtension' AS textbox WITH ;
		Alignment = 3, ;
		ControlSource = "", ;
		FontSize = 8, ;
		Format = "K", ;
		Height = 20, ;
		InputMask = "999,999,999.99", ;
		Left = 493, ;
		Margin = 1, ;
		Name = "txtnExtension", ;
		TabIndex = 25, ;
		Top = 114, ;
		Value = 0, ;
		Width = 111, ;
		ZOrderSet = 30
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'txtNinvbal' AS txttextboxcustom WITH ;
		ControlSource = "invhdr.ninvbal", ;
		Height = 20, ;
		InputMask = "9999999999.99", ;
		Left = 522, ;
		Margin = 1, ;
		Name = "txtNinvbal", ;
		TabIndex = 33, ;
		TabStop = .F., ;
		Top = 422, ;
		Width = 104, ;
		ZOrderSet = 19
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtNinvtot' AS txttextboxcustom WITH ;
		ControlSource = "invhdr.nsubtotal", ;
		Height = 20, ;
		InputMask = "9999999999.99", ;
		Left = 522, ;
		lenabled = .T., ;
		Margin = 1, ;
		Name = "txtNinvtot", ;
		TabIndex = 31, ;
		TabStop = .F., ;
		Top = 353, ;
		Width = 104, ;
		ZOrderSet = 17
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtnPrice' AS textbox WITH ;
		Alignment = 3, ;
		ControlSource = "", ;
		FontSize = 8, ;
		Height = 20, ;
		InputMask = "9999.99", ;
		Left = 192, ;
		Margin = 1, ;
		Name = "txtnPrice", ;
		SelectOnEntry = .T., ;
		TabIndex = 16, ;
		Top = 114, ;
		Value = 0, ;
		Width = 65, ;
		ZOrderSet = 27
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'txtnQuantity' AS textbox WITH ;
		Alignment = 3, ;
		ControlSource = "", ;
		FontSize = 8, ;
		Height = 20, ;
		InputMask = "9999.99", ;
		Left = 258, ;
		Margin = 1, ;
		Name = "txtnQuantity", ;
		SelectOnEntry = .T., ;
		TabIndex = 17, ;
		Top = 114, ;
		Value = 0, ;
		Width = 65, ;
		ZOrderSet = 28
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'txtNsalestax' AS txttextboxcustom WITH ;
		ControlSource = "invhdr.nsalestax", ;
		Height = 20, ;
		InputMask = "999999999.99", ;
		Left = 522, ;
		Margin = 1, ;
		Name = "txtNsalestax", ;
		TabIndex = 32, ;
		TabStop = .F., ;
		Top = 375, ;
		Width = 104, ;
		ZOrderSet = 43
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtWorkDate' AS txttextboxcustom WITH ;
		Alignment = 3, ;
		Format = "99/99/9999", ;
		Height = 20, ;
		Left = 350, ;
		Name = "txtWorkDate", ;
		TabIndex = 23, ;
		Top = 135, ;
		Value = {}, ;
		Width = 80
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />
	
	PROCEDURE Activate
		IF DODEFAULT()
		   this.loaddisposal()
		ENDIF   
	ENDPROC

	PROCEDURE adddetail
		*
		*  Adds the detail line to the InvDet table
		*  Called from the valid of the Taxable textbox
		*
		LOCAL m.cItemId, m.cItemDesc, m.nQuantity, m.nPrice, m.cAcctNo, ;
		   m.cUnitno, m.cDeptNo, m.nExtension, m.cTaxable, m.cidinvd, ;
		   m.cItemDesc, m.cMeasure
		LOCAL lcMeasure, llReturn, loError
		
		llReturn = .T.
		
		TRY
		   llDisposal = .F.
		   
		   WITH THIS
		      m.cItemId    = .txtcItemId.VALUE
		      SELECT items  &&  Get the appropriate measure for this item and price code
		      SET ORDER TO cItemId
		      LOCATE FOR cItemId = m.cItemId
		      DO CASE
		         CASE .txtcPriceCode.VALUE = '1'
		            lcMeasure = 'cMeasure1'
		         CASE .txtcPriceCode.VALUE = '2'
		            lcMeasure = 'cMeasure2'
		         CASE .txtcPriceCode.VALUE = '3'
		            lcMeasure = 'cMeasure3'
		         CASE .txtcPriceCode.VALUE = '4'
		            lcMeasure = 'cMeasure4'
		         CASE .txtcPriceCode.VALUE = '5'
		            lcMeasure = 'cMeasure5'
		         OTHERWISE
		            lcMeasure = 'cMeasure1'
		      ENDCASE
		      IF 'DISP' $ UPPER(cItemID)
		         llDisposal = .T.
		      ENDIF 
		      
		      m.cMeasure   = ALLTRIM(&lcMeasure)
		      m.cItemDesc  = .txtcItemDesc.VALUE
		      m.nPrice     = .txtnPrice.VALUE
		      m.nQuantity  = .txtnQuantity.VALUE
		      m.cTruck     = .txtcTruck.VALUE
		      m.cDisperm   = .cboDisposal.LISTITEM[.cboDisposal.ListItemId, 2]
		      
		      IF llDisposal AND EMPTY(m.cDisPerm)
		         MESSAGEBOX('The disposal site must be chosen for Disposal type items. Please enter a disposal site before continuing',16,'Missing Disposal Site')
		         thisform.setnextcontrol(thisform.cbodisposal)
		         thisform.cbodisposal.SetFocus()
		         llReturn = .F.
		         EXIT
		      ENDIF 
		      
		      m.cworkorder = .txtcworkorder.VALUE
		      m.cType      = LEFT(.cboType.VALUE, 1)
		      m.dExpDate   = .txtworkdate.VALUE
		      m.dWorkDate  = .txtworkdate.VALUE
		
		      SELECT items
		      SET ORDER TO cItemId
		      IF SEEK(m.cItemId)
		         m.cAcctNo = items.cdefacct
		      ELSE
		         m.cAcctNo = '999999'
		      ENDIF
		      m.nExtension = .txtnExtension.VALUE
		      m.cTaxable   = .txtcTaxable.VALUE
		      m.nDiscPct   = 0
		      m.nItemTax   = 0
		      m.nInterest  = 0
		      m.cPayee     = ' '
		      m.cTaxCode   = ' '
		      m.nDiscount  = 0
		      m.cExtDesc   = 0
		      m.cUnitno    = .txtcWellID.VALUE
		
		* Calculate the injection fee for this well
		      m.nInjFee  = THISFORM.calcinjfee(m.cItemId, m.cUnitno, m.nQuantity)
		
		      .cmdatamanager.new('Invdet')
		      .cmdatamanager.REPLACE('Invdet', 'Citemid', m.cItemId)
		      .cmdatamanager.REPLACE('Invdet', 'Citemdesc', m.cItemDesc)
		      .cmdatamanager.REPLACE('Invdet', 'Nprice', m.nPrice)
		      .cmdatamanager.REPLACE('Invdet', 'Nquantity', m.nQuantity)
		      .cmdatamanager.REPLACE('Invdet', 'Cacctno', m.cAcctNo)
		      .cmdatamanager.REPLACE('Invdet', 'Nextension', m.nExtension)
		      .cmdatamanager.REPLACE('Invdet', 'cTaxable', m.cTaxable)
		      .cmdatamanager.REPLACE('Invdet', 'cUnitNo', m.cUnitno)
		      .cmdatamanager.REPLACE('Invdet', 'cMeasure', m.cMeasure)
		      .cmdatamanager.REPLACE('Invdet', 'cTruck', m.cTruck)
		      .cmdatamanager.REPLACE('Invdet', 'cdisperm', m.cDisperm)
		      .cmdatamanager.REPLACE('Invdet', 'cWorkOrder', m.cworkorder)
		      .cmdatamanager.REPLACE('Invdet', 'dExpDate', m.dExpDate)
		      .cmdatamanager.REPLACE('Invdet', 'dWorkDate', m.dWorkDate)
		      .cmdatamanager.REPLACE('Invdet', 'nInjFee', m.nInjFee)
		      .cmdatamanager.REPLACE('Invdet', 'cType', m.cType)
		      .txtcItemId.VALUE    = ' '
		      .txtcItemDesc.VALUE  = ' '
		      .txtnPrice.VALUE     = 0
		      .txtnQuantity.VALUE  = 0
		      .txtcPriceCode.VALUE = '1'
		      .txtnExtension.VALUE = 0
		      .txtcTaxable.VALUE   = 'E'
		      .txtcWellID.VALUE    = ''
		      .txtcWellName.VALUE  = ''
		      .txtcTruck.VALUE     = ''
		      .cboType.VALUE       = 'Brine'
		      .cboDisposal.VALUE   = ''
		      .txtworkdate.setvalue({})
		      .txtcworkorder.SETFOCUS()
		      .CalcTot()
		      .setstate()
		      .REFRESH()
		   ENDWITH
		CATCH TO loError
		   llReturn = .F.
		   DO errorlog WITH 'AddDetail', loError.LINENO, 'Brine Work Orders', loError.ERRORNO, loError.MESSAGE, '', loError
		   MESSAGEBOX('Unable to process the detail line at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		        'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		RETURN llReturn
		
	ENDPROC

	PROCEDURE calcext		&& Calculates the detail extension total
		*
		*  Calculates the extension by using the price*quantity
		*
		TRY 
		thisform.txtnExtension.value = thisform.txtnPrice.value * thisform.txtnQuantity.value
		thisform.txtnExtension.refresh()
		CATCH
		ENDTRY 
	ENDPROC

	PROCEDURE calcinjfee		&& Calculates the injection fee based on the passed item, well and qty
		LPARAMETERS tcItemID, tcWellID, tnQty
		LOCAL lcDistrict, lnFeeRate, lnInjectionFee
		LOCAL llReturn, loError
		
		llReturn = .T.
		
		TRY
		   lnInjectionFee = 0
		   lnFeeRate      = 0
		   lcDistrict     = 'ID'
		
		* Look to see if this is a brine item
		   SELECT items
		   SET ORDER TO cItemID
		   IF SEEK(tcItemID)
		      IF lInjectionFee
		         SELECT leases
		         SET ORDER TO cWellID
		         IF SEEK(tcWellID)
		            IF cstate = 'OH' OR EMPTY(cstate)
		               lcDistrict = 'ID'
		               lnFeeRate  = THISFORM.nInDistrict
		            ELSE
		               lcDistrict = 'OD'
		               lnFeeRate  = THISFORM.nOutOfDistrict
		            ENDIF
		         ENDIF
		         lnInjectionFee = ROUND(tnQty * lnFeeRate, 2)
		      ENDIF
		   ENDIF
		CATCH TO loError
		   llReturn = .F.
		   DO errorlog WITH 'CalcInjFee', loError.LINENO, 'Brine Work Orders', loError.ERRORNO, loError.MESSAGE, '', loError
		   MESSAGEBOX('Unable to process the report at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		        'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		   lnInjectionFee = 0
		ENDTRY
		
		RETURN lnInjectionFee
		
	ENDPROC

	PROCEDURE calctot		&& Calculates the Invoice Totals
		*
		*  Calculates the invoice totals
		*
		LOCAL lnSelect, lnRecno, lnTotal, lcBatch, lnRate, lnTaxable
		LOCAL lnSubTotal, lnBalance, lcDistrict, lnInjectionFee
		LOCAL lnInDistrict, lnOutOfDistrict, lnFeeRate
		LOCAL llReturn, lnSalesTax, loError
		
		llReturn = .T.
		
		TRY
		    STORE 0 TO lnInjectionFee, lnFeeRate
		
		    lcDistrict      = 'ID'
		
		    lcBatch = invdet.cbatch
		
		    lnSelect = SELECT()
		    SELECT invdet
		    lnRecno = RECNO()
		    SUM(nExtension) TO lnSubTotal FOR cbatch == lcBatch
		    SUM(nExtension) TO lnTaxable FOR cbatch == lcBatch AND cTaxable = 'T'
		    TRY
		        IF lnRecno <= RECCOUNT()
		            GOTO (lnRecno)
		        ENDIF
		    CATCH
		    ENDTRY
		    SELECT (lnSelect)
		
		    IF NOT EMPTY(THISFORM.cboSalesTax.VALUE)
		        SELECT salestx
		        IF SEEK(THISFORM.cboSalesTax.VALUE)
		            lnRate     = nTaxRate
		            lnSalesTax = ROUND(lnTaxable * (lnRate / 100), 2)
		            lnTotal    = lnSubTotal + lnSalesTax
		        ELSE
		            lnSalesTax = 0
		            lnTotal    = lnSubTotal
		        ENDIF
		    ELSE
		        lnSalesTax = 0
		        lnTotal    = lnSubTotal
		    ENDIF
		
		    swselect('items')
		    SET ORDER TO citemid
		    swselect('leases')
		    SET ORDER TO cwellid   && CWELLID
		
		* Calculate injection well fee
		    SELECT invdet
		    SCAN
		        m.citemid      = citemid
		        m.cunitno      = cunitno
		        m.nqty         = nquantity
		        lnInjectionFee = lnInjectionFee + THISFORM.calcinjfee(m.citemid, m.cunitno, m.nqty)
		    ENDSCAN
		
		     lnTotal = lnTotal + lnInjectionFee    
		     lnBalance = lnTotal - invhdr.nPayments
		     
		    TRY
		        GOTO lnRecno
		    CATCH
		        STORE 0 TO lnsalestax, lntotal, lnsubtotal, lnbalance, lninjectionfee, lnbalance
		    ENDTRY
		
		    IF invhdr.nsalestax <> lnSalesTax
		        THIS.cmdatamanager.REPLACE('InvHdr', 'nSalestax', lnSalesTax)
		        THISFORM.txtnSalesTax.REFRESH()
		    ENDIF
		    IF invhdr.ninvtot <> lnTotal
		        THIS.cmdatamanager.REPLACE('InvHdr', 'nInvTot', lnTotal)
		        THISFORM.txtnInvTot.REFRESH()
		    ENDIF
		    IF invhdr.nsubtotal <> lnSubTotal
		        THIS.cmdatamanager.REPLACE('InvHdr', 'nSubtotal', lnSubTotal)
		    ENDIF
		    IF invhdr.nInvBal <> lnBalance
		        THIS.cmdatamanager.REPLACE('InvHdr', 'nInvBal', lnBalance)
		        THISFORM.txtnInvBal.REFRESH()
		    ENDIF
		    IF invhdr.nInjectionFee <> lnInjectionFee
		        THIS.cmdatamanager.REPLACE('Invhdr', 'nInjectionFee', lnInjectionFee)
		        THISFORM.txtinjectionFee.REFRESH()
		    ENDIF
		CATCH TO loError
		    llReturn = .F.
		    DO errorlog WITH 'CalcTot', loError.LINENO, 'Brine Work Orders', loError.ERRORNO, loError.MESSAGE, '', loError
		    MESSAGEBOX('Unable to process the Work Order at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		          'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		RETURN llReturn
		
		
		
		
	ENDPROC

	PROCEDURE delete
		LPARAMETERS cworkarea
		LOCAL lcBatch
		
		lcBatch = invhdr.cbatch
		
		IF DODEFAULT()
		   * Remove brine log entries for this invoice
		   SELECT brinelog
		   DELE FOR cBatch == lcBatch
		ENDIF   
	ENDPROC

	PROCEDURE Destroy
		ON KEY LABEL CTRL+P *
		thisform.grouptran.unload()
		DODEFAULT()
	ENDPROC

	PROCEDURE editdetail
		LOCAL llReturn, loError
		llReturn = .T.
		
		TRY
		   WITH THISFORM
		
		      .txtcWorkOrder.VALUE = invdet.cworkorder
		      .txtcItemDesc.VALUE  = invdet.citemdesc
		      .txtcItemId.VALUE    = invdet.citemid
		      .txtcPriceCode.VALUE = invdet.cpricecode
		      .txtnPrice.VALUE     = invdet.nprice
		      .txtnQuantity.VALUE  = invdet.nquantity
		      .txtnExtension.VALUE = invdet.nExtension
		      .txtworkdate.VALUE   = invdet.dworkdate
		      .txtcWellID.VALUE    = invdet.cunitno
		      .cboType.VALUE       = IIF(invdet.ctype = 'B', 'Brine', IIF(invdet.ctype = 'P', 'Pit', 'Frac'))
		      .txtcTruck.VALUE     = invdet.ctruck
		      .txtcTaxable.VALUE   = invdet.ctaxable
		      .cboDisposal.VALUE   = invdet.cDisperm
		
		*  Fill in the well name
		      SELECT leases
		      SET ORDER TO cwellid
		      IF SEEK(invdet.cunitno)
		         .txtcWellName.VALUE = leases.clease
		      ENDIF
		
		      .txtcWorkOrder.SETFOCUS()
		      SELECT invdet
		      THISFORM.cmdatamanager.deleterecord('invdet')
		      THISFORM.calctot()
		      THISFORM.REFRESH()
		   ENDWITH
		
		   SELECT invdet
		
		*
		*  Let the form know something changed
		*
		   THISFORM.setstate()
		CATCH TO loError
		   llReturn = .F.
		   DO errorlog WITH 'EditDetail', loError.LINENO, 'Brine Work Orders', loError.ERRORNO, loError.MESSAGE, '', loError
		   MESSAGEBOX('Unable to process the detail line at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		        'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		RETURN llReturn
		
	ENDPROC

	PROCEDURE getnextinvno		&& Get's the next invoice number
		LOCAL lcInvNum
		LOCAL llReturn, lnInvNum, loError
		
		llReturn = .T.
		
		TRY
		   IF NOT FILE(m.goApp.cCommonFolder + 'bminvno.dbf')
		      CREATE TABLE (m.goApp.cCommonFolder + 'bminvno') FREE ;
		         (nInvNo      I)
		      SELECT bminvno
		      INSERT INTO bminvno (nInvNo) VALUES(1000)
		   ENDIF
		
		   IF NOT USED('bminvno')
		      USE (m.goApp.cCommonFolder + 'bminvno') IN 0
		   ENDIF
		
		   SELECT bminvno
		   lnInvNum = nInvNo + 1
		   lcInvNum = TRANSFORM(lnInvNum)
		
		* Look for that invoice in the invoice headers. 
		* If found, keep incrementing it.
		   IF NOT USED('invhdr1')
		      USE invhdr AGAIN IN 0 ALIAS invhdr1
		   ENDIF
		   SELECT invhdr1
		   SET ORDER TO cinvnum
		   DO WHILE SEEK(lcInvNum)
		      lnInvNum = lnInvNum + 1
		      lcInvNum = TRANSFORM(lnInvNum)
		   ENDDO
		
		   SELECT bminvno
		   REPLACE nInvNo WITH lnInvNum
		
		CATCH TO loError
		   llReturn = .F.
		   DO errorlog WITH 'GetNextInvNo', loError.LINENO, 'Brine Work Orders', loError.ERRORNO, loError.MESSAGE, '', loError
		   MESSAGEBOX('Unable to process the next invoice no at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		        'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		   lcInvNum = '***'
		ENDTRY
		
		RETURN lcInvNum
	ENDPROC

	PROCEDURE getprice		&& Gets the price for the item based upon the price code passed.
		LPARAMETERS tcPriceCode
		
		LOCAL llReturn, loError
		llReturn = .T.
		
		TRY
		   ASSERT BETWEEN(tcPriceCode, '1', '5')  MESSAGE 'Invalid Price Code Passed to GetPrice method'
		
		   SELECT items
		   IF SEEK(THISFORM.txtcItemId.VALUE)
		      DO CASE
		         CASE tcPriceCode = '1'
		            THISFORM.txtnPrice.VALUE = nPrice1
		            THISFORM.txtnPrice.REFRESH()
		         CASE tcPriceCode = '2'
		            THISFORM.txtnPrice.VALUE = nPrice2
		            THISFORM.txtnPrice.REFRESH()
		         CASE tcPriceCode = '3'
		            THISFORM.txtnPrice.VALUE = nPrice3
		            THISFORM.txtnPrice.REFRESH()
		         CASE tcPriceCode = '4'
		            THISFORM.txtnPrice.VALUE = nPrice4
		            THISFORM.txtnPrice.REFRESH()
		         CASE tcPriceCode = '5'
		            THISFORM.txtnPrice.VALUE = nPrice5
		            THISFORM.txtnPrice.REFRESH()
		      ENDCASE
		   ENDIF
		CATCH TO loError
		   llReturn = .F.
		   DO errorlog WITH 'GetPrice', loError.LINENO, 'Brine Work Orders', loError.ERRORNO, loError.MESSAGE, '', loError
		   MESSAGEBOX('Unable to process the price at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		        'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		RETURN llReturn
		
	ENDPROC

	PROCEDURE Init
		ON KEY LABEL CTRL+P _screen.activeform.report()
		
		
		thisform.nInDistrict    = .05
		thisform.nOutOfDistrict = .20
		
		swselect('salestx')
		LOCATE FOR ctaxcode = '*ID*'
		IF FOUND()
		   thisform.nInDistrict = ntaxrate
		ENDIF
		LOCATE FOR ctaxcode = '*OD*'
		IF FOUND()
		   thisform.nOutOfDistrict = ntaxrate
		ENDIF 
		
		DODEFAULT()
		
	ENDPROC

	PROCEDURE list
		LPARAMETERS cworkarea
		
		LOCAL lcList, lcBatch, llReturn, loError
		PRIV llOK
		
		llReturn = .T.
		
		TRY
		   llOK = .T.
		
		   SELECT  invhdr.cinvnum, ;
				   invhdr.dinvdate, ;
				   invhdr.ccustid, ;
				   custown.ccustname, ;
				   invhdr.ninvtot, ;
				   invhdr.cbatch ;
			   FROM invhdr, custown ;
			   WHERE invhdr.ccustid = custown.ccustid ;
			   INTO CURSOR tempinv1 ;
			   ORDER BY invhdr.cinvnum
		
		   IF _TALLY > 0
		      USE DBF('tempinv1') AGAIN IN 0 ALIAS tempinv EXCL
		      SET SAFETY OFF
		      SELECT tempinv
		      INDEX ON cbatch      TAG cbatch
		      INDEX ON cinvnum     TAG cinvnum
		      INDEX ON dinvdate    TAG dinvdate
		      INDEX ON ccustid     TAG ccustid
		      INDEX ON ccustname   TAG ccustname
		      INDEX ON ninvtot     TAG ninvtot
		
		      IF UPPER(m.goApp.cUser) = 'DEVELOPER'
		         lcList = 'cbatch\Batch,cinvnum\Invoice Number,dinvdate\Date,ccustid\Customer ID,ccustname\Customer Name,ninvtot\Total'
		         DO FORM ..\CUSTOM\picklist WITH 'tempinv', lcList, THISFORM.txtcinvnum.VALUE, 6, .T., .T.
		      ELSE
		         lcList = 'cinvnum\Invoice Number,dinvdate\Date,ccustid\Customer ID,ccustname\Customer Name,ninvtot\Total'
		         DO FORM ..\CUSTOM\picklist WITH 'tempinv', lcList, THISFORM.txtcinvnum.VALUE, 5, .T., .T.
		      ENDIF
		
		      IF llOK
		         lcBatch = tempinv.cbatch
		         SELECT invhdr
		         SET ORDER TO cbatch
		         SEEK(lcBatch)
		         THISFORM.cmdatamanager.setrecordposition('Invhdr')
		         THISFORM.REFRESH()
		      ENDIF
		   ELSE
		      THISFORM.oMessage.DISPLAY('There are no invoices in the sales/invoicing file.')
		   ENDIF
		
		   IF USED('tempinv1')
		      USE IN tempinv1
		   ENDIF
		   IF USED('tempinv')
		      USE IN tempinv
		   ENDIF
		CATCH TO loError
		   llReturn = .F.
		   DO errorlog WITH 'List', loError.LINENO, 'Brine Work Orders', loError.ERRORNO, loError.MESSAGE, '', loError
		   MESSAGEBOX('Unable to process the lookup list at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		        'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		RETURN llReturn
		
	ENDPROC

	PROCEDURE loaddisposal		&& Loads the disposal dropdown.
		LOCAL llReturn, lnX, loError
		llReturn = .T.
		
		TRY
		   SELECT cdispsite, cdisperm FROM disposal INTO CURSOR temp
		
		   THISFORM.cboDisposal.ADDLISTITEM('None', 1, 1)
		   THISFORM.cboDisposal.ADDLISTITEM(SPACE(6), 1, 2)
		
		   lnX = 2
		   SELECT temp
		   SCAN
		      THIS.cboDisposal.ADDLISTITEM(ALLTRIM(cdispsite) + ' - ' + cdisperm, lnX, 1)
		      THIS.cboDisposal.ADDLISTITEM(cdisperm, lnX, 2)
		      lnX = lnX + 1
		   ENDSCAN
		
		   THIS.cboDisposal.REFRESH()
		CATCH TO loError
		   llReturn = .F.
		   DO errorlog WITH 'LoadDisposal', loError.LINENO, 'Brine Work Orders', loError.ERRORNO, loError.MESSAGE, '', loError
		   MESSAGEBOX('Unable to process the disposal sites at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		        'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		RETURN llReturn
		
	ENDPROC

	PROCEDURE lookcoa
		LOCAL lcList
		LOCAL llReturn, loError
		PRIV llOK
		
		llReturn = .T.
		
		TRY
		   llOK   = .F.
		   lcList = 'cacctno/acctno,cacctdesc/acctdesc'
		
		   DO FORM ..\CUSTOM\picklist WITH 'Coa', lcList, THISFORM.grdinvdet.column5.txtcAcctNo.VALUE, 2
		
		   IF llOK
		      THISFORM.grdinvdet.column5.txtcAcctNo.VALUE = coa.cacctno
		      THISFORM.cmdatamanager.REPLACE('invdet', 'cacctno', coa.cacctno)
		      THISFORM.grdinvdet.column5.txtcAcctNo.REFRESH()
		   ENDIF
		
		   THISFORM.grdinvdet.column5.txtcAcctNo.SETFOCUS()
		CATCH TO loError
		   llReturn = .F.
		   DO errorlog WITH 'LookCOA', loError.LINENO, 'Brine Work Orders', loError.ERRORNO, loError.MESSAGE, '', loError
		   MESSAGEBOX('Unable to process the account lookup at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		        'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		RETURN llReturn
	ENDPROC

	PROCEDURE report		&& Print the Invoice
		LOCAL m.caddr1, m.caddr2, m.caddr3, m.ccustname, m.shipln1, m.shipln2
		LOCAL m.shipln3, m.shipln4, m.paddr1, m.paddr2, m.paddr3, m.message
		LOCAL lnCount, lnX
		LOCAL llReturn, lnInvType, loError
		
		llReturn = .T.
		
		TRY
		* Check on the existence of the application object
		* if it doesn't exist, we're running in development
		* mode and need to initialize the company address info.
		   IF TYPE('m.goApp') = 'O'
		      m.cidcomp = m.goapp.cidcomp
		      IF NOT USED('compmast')
		         USE datafiles\compmast IN 0
		      ENDIF
		      SELECT compmast
		      SET ORDER TO cidcomp   && CIDCOMP
		      IF SEEK(m.cidcomp)
		         m.cProducer = cProducer
		         m.paddr1    = cAddress1
		         IF EMPTY(caddress2)
		            m.paddr2 = ALLTRIM(ccity) + ' ' + cstate + ' ' + czipcode
		            m.paddr3 = ''
		         ELSE
		            m.paddr2 = caddress2
		            m.paddr3 = ALLTRIM(ccity) + ' ' + cstate + ' ' + czipcode
		         ENDIF
		      ELSE
		         m.cProducer = 'SherWare, Inc.'
		         m.paddr1    = 'PO Box 223'
		         m.paddr2    = 'Wooster, OH  44691'
		         m.paddr3    = ''
		      ENDIF
		   ELSE
		      m.cProducer = 'SherWare, Inc.'
		      m.paddr1    = 'PO Box 223'
		      m.paddr2    = 'Wooster, OH  44691'
		      m.paddr3    = ''
		   ENDIF
		
		*
		*  Get the invoice message
		*
		   SWSELECT('aropt')
		   GO TOP
		   m.cMessage = mInvMsg
		   lnInvType  = nInvType
		   IF lnInvType = 0
		      lnInvType = 1
		   ENDIF
		
		   LOCAL m.caddr1, m.caddr2, m.caddr3, m.ccustname, m.shipln1, m.shipln2
		   LOCAL m.shipln3, m.shipln4, m.paddr1, m.paddr2, m.paddr3, m.message
		   LOCAL lnCount, lnX
		
		   CREATE CURSOR tempinv ;
		    (cBatch     C(8), ;
		    cCustID    C(10), ;
		    ccustname  C(40), ;
		    caddr1     C(40), ;
		    caddr2     C(40), ;
		    caddr3     C(40), ;
		    cShipAddr1     C(40), ;
		    cShipAddr2     C(40), ;
		    cShipAddr3     C(40), ;
		    cInvNum    C(10), ;
		    dInvDate   D, ;
		    dDueDate   D, ;
		    dDiscDate  D, ;
		    cTermDesc  c(30), ;
		    nSubTotal  N(12,2), ;
		    nInvBal    N(12,2), ;
		    nInvTot    N(12,2), ;
		    nPayments  N(12,2), ;
		    mshiprem   M, ;
		    mnotes     M, ;
		    cmessage   M, ;
		    dpostdate  D, ;
		    cinvtype   C(1), ;
		    creference C(15), ;
		    nsalestax  N(12,2), ;
		    lprinted   L, ;
		    lprintnotes L, ;
		    cprodprd   C(2), ;
		    cprodyear  C(4), ;
		    cgroup     C(2), ;
		    lnetjib    L, ;
		    clease     c(30), ;
		    cpono      c(30), ;
		    cleaseown  c(30), ;
		    cSelected  C(1))
		INDEX ON cInvNum TAG inv
		INDEX ON cCustID TAG CUST
		INDEX ON DTOS(dInvDate) TAG invdate
		
		
		
		
		   m.cCustID = invhdr.cCustID
		   m.cInvNum = invhdr.cInvNum
		   SWSELECT('invhdr')
		   SCATTER MEMVAR MEMO
		   SWSELECT('custs')
		   SET ORDER TO cCustID
		   IF SEEK (m.cCustID)
		      m.ccustname = ccustname
		      m.caddr1    = cbaddr1
		      IF EMPTY(cbaddr2)
		         m.caddr2 = ALLTRIM(cbcity) + ', ' + cbstate + '  ' + cbzip
		         m.caddr3 = ' '
		      ELSE
		         m.caddr2 = cbaddr2
		         m.caddr3 = ALLTRIM(cbcity) + ', ' + cbstate + '  ' + cbzip
		      ENDIF
		      IF EMPTY(cAddress1)
		         m.cShipAddr1 = m.caddr1
		         m.cShipAddr2 = m.caddr2
		         m.cShipAddr3 = m.caddr3
		      ELSE
		         m.cShipAddr1 = cAddress1
		         IF EMPTY(caddress2)
		            m.cShipAddr2 = ALLTRIM(ccity) + ', ' + cstate + '  ' + czip
		            m.cShipAddr3 = ''
		         ELSE
		            m.cShipAddr2 = caddress2
		            m.cShipAddr3 = ALLTRIM(ccity) + ', ' + cstate + '  ' + czip
		         ENDIF
		      ENDIF
		   ELSE
		      SWSELECT('investor')
		      SET ORDER TO cownerid
		      IF SEEK(m.cCustID)
		         m.ccustname = cownname
		         m.caddr1    = caddress1a
		         IF EMPTY(caddress1b)
		            m.caddr2 = ALLTRIM(ccity1) + ', ' + cstate1 + '  ' + czip1
		            m.caddr3 = ' '
		         ELSE
		            m.caddr2 = caddress1b
		            m.caddr3 = ALLTRIM(ccity1) + ', ' + cstate1 + '  ' + czip1
		         ENDIF
		         m.cShipAddr1 = m.caddr1
		         m.cShipAddr2 = m.caddr2
		         m.cShipAddr3 = m.caddr3
		      ENDIF
		   ENDIF
		   
		   swselect('terms')
		   LOCATE FOR cidterm == m.cidterm
		   m.ctermdesc = ctermdesc
		
		   INSERT INTO tempinv FROM MEMVAR
		
		
		   IF USED('tempdet1')
		      USE IN tempdet1
		   ENDIF
		   IF USED('tempdet')
		      USE IN tempdet
		   ENDIF
		   SELECT  invdet.*, SPACE(30) AS cWellName, SPACE(30) AS clease, SPACE(40) AS cleaseown, SPACE(20) AS cpono ;
			   FROM invdet ;
			   WHERE invdet.cBatch IN (SELECT  cBatch ;
										   FROM tempinv) ;
			   INTO CURSOR tempdet1
		
		   USE DBF('tempdet1') AGAIN ALIAS tempdet IN 0
		
		   SELECT tempdet
		   SCAN
		      m.cwellid = cunitno
		      SWSELECT('wells')
		      SET ORDER TO cwellid
		      IF SEEK(m.cwellid)
		         m.cWellName = cWellName
		         SELECT tempdet
		         REPL cWellName WITH m.cWellName
		      ENDIF
		      SWSELECT('leases')
		      LOCATE FOR cwellid = m.cwellid
		      IF FOUND()
		         m.clease  = clease
		         m.cCustID = cCustID
		         m.cpono   = cpono
		         SELE custs
		         LOCATE FOR cCustID = m.cCustID
		         IF FOUND()
		            m.cleaseown = ccustname
		         ELSE
		            m.cleaseown = ''
		         ENDIF
		      ELSE
		         m.clease    = ''
		         m.cleaseown = ''
		         m.cpono     = ''
		      ENDIF
		      SELE tempdet
		      REPL clease WITH m.clease, ;
		         cleaseown WITH m.cleaseown, ;
		         cpono     WITH m.cpono
		   ENDSCAN
		
		   SELECT tempdet
		   INDEX ON cBatch TAG cBatch
		   SCAN FOR NOT EMPTY(clease)
		      m.clease    = clease
		      m.cleaseown = cleaseown
		      m.cBatch    = cBatch
		      SELE tempinv
		      LOCATE FOR cBatch = m.cBatch
		      IF FOUND()
		         REPL clease WITH m.clease, ;
		            cleaseown WITH m.cleaseown, ;
		            cpono     WITH m.cpono
		      ENDIF
		   ENDSCAN
		
		   SELECT tempinv
		   SET RELATION TO cBatch INTO tempdet
		   SET SKIP TO tempdet
		
		   DO CASE
		      CASE lnInvType = 1
		         REPORT FORM (m.goapp.cRptsFolder + 'bminv1.frx') PREVIEW NOCONSOLE NOEJECT
		      CASE lnInvType = 2
		         REPORT FORM (m.goapp.cRptsFolder + 'bminv2.frx') PREVIEW NOCONSOLE NOEJECT
		      OTHERWISE
		         THISFORM.omessage.severe('The invoice type has not been set in the A/R options. No invoices were printed.')
		         RETURN
		   ENDCASE
		
		   IF THISFORM.omessage.CONFIRM('Did Invoice Print Ok?')
		      SWSELECT('invhdr')
		      REPLACE lprinted WITH .T.
		      THISFORM.RELEASE()
		   ENDIF
		CATCH TO loError
		   llReturn = .F.
		   DO errorlog WITH 'Report', loError.LINENO, 'Brine Work Orders', loError.ERRORNO, loError.MESSAGE, '', loError
		   MESSAGEBOX('Unable to process the report at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		        'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		RETURN llReturn
		
	ENDPROC

	PROCEDURE save
		LPARAMETERS cworkarealist
		
		thisform.txtcCustID.setFocus()
		
		DODEFAULT(cworkarealist)
	ENDPROC

	PROCEDURE setstate		&& Resets the form state for non bound controls so that the save button still works.
		this.lChanged = .T.
		m.goStateManager.RefreshAll('Form Edit')
	ENDPROC

	PROCEDURE valterms		&& Validate Terms and Set Due Date and Disc Date based on the Terms
		LOCAL llReturn, lnDiscPct, loError
		llReturn = .T.
		
		TRY
		*
		*  Validates the terms code in the invhdr record and
		*  calculates the due date and disc date based upon
		*  the terms settings and the invhdr.dinvdate
		*
		   LOCAL lcidTerm, lnNetDueIn, lnDiscIn, ldInvDate
		
		   ldInvDate = THISFORM.txtdInvDate.VALUE
		*
		*  If the invoice date is empty, don't try to calculate
		*  the due date or discount date
		*
		   IF EMPTY(ldInvDate)
		      llReturn = .F.
		      EXIT
		   ENDIF
		*
		*  Get the terms table primary key from the invoice header
		*  record.
		   lcidTerm  = invhdr.cidterm
		
		*
		*  Lookup the terms code in the terms table to get the
		*  # of days the invoice is due in and the # of days
		*  set for discounts
		*
		   SELECT terms
		   SET ORDER TO cidterm
		   IF SEEK(lcidTerm)
		      lnNetDueIn = nNetDueIn
		      lnDiscIn   = nDiscIn
		      lnDiscPct  = nDiscPct
		   ELSE
		*  Terms have not been selected for this invoice so assume
		*  COD.
		      STORE 0 TO lnNetDueIn, lnDiscIn, lnDiscPct
		   ENDIF
		*
		*  Calculate and set the values of the due date and
		*  discount date fields
		*
		
		   THISFORM.cmdatamanager.REPLACE('invhdr', 'dduedate', ldInvDate + lnNetDueIn)
		   THISFORM.txtdDueDate.REFRESH()
		   THISFORM.cmdatamanager.REPLACE('invhdr', 'ddiscdate', ldInvDate + lnDiscIn)
		   THISFORM.txtdDiscDate.REFRESH()
		CATCH TO loError
		   llReturn = .F.
		   DO errorlog WITH 'ValTerms', loError.LINENO, 'Brine Work Orders', loError.ERRORNO, loError.MESSAGE, '', loError
		   MESSAGEBOX('Unable to process the terms at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		        'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		RETURN llReturn
		
	ENDPROC

	PROCEDURE cboDisposal.Init
		DODEFAULT()
		thisform.loaddisposal()
	ENDPROC

	PROCEDURE cboDisposal.When
		RETURN 'DISP' $ UPPER(thisform.txtcitemid.value) or items.ctype='B'
	ENDPROC

	PROCEDURE cboSalesTax.afterchange
		thisform.calctot()
	ENDPROC

	PROCEDURE cboSalesTax.Init
		LOCAL lnCount
		DODEFAULT()
		*
		*  Add the detail lines to the combo box
		*
		SELECT cTaxCode FROM salestx WHERE NOT 'D*' $ cTaxCode INTO ARRAY laTaxes ORDER BY cTaxCode
		lnCount = _tally
		
		this.addlistitem('NONE',1)
		
		IF lnCount > 0
		   FOR lnX = 1 TO lnCount
		       this.addlistitem(laTaxes[lnX],lnX+1)
		   ENDFOR
		ENDIF   
		
		
	ENDPROC

	PROCEDURE cboTerms.afterchange
		thisform.valterms()
		DODEFAULT()
	ENDPROC

	PROCEDURE cboTerms.Init
		LOCAL lnCount
		*
		*  Builds the data displayed in the combo list box
		*
		
		SELECT cTermDesc, cidTerm FROM terms INTO ARRAY laTerms ORDER BY cTermDesc
		lnCount = _tally
		
		This.addlistitem('NONE',1,1)
		This.addlistitem('',1,2)
		
		IF lnCount > 0
		   FOR lnX = 1 TO ALEN(laTerms,1)
		      this.addlistitem(laTerms[lnX,1],lnX+1,1)
		      this.addlistitem(laTerms[lnX,2],lnX+1,2)
		   ENDFOR   
		ENDIF   
		
		SELECT invhdr
		
		DODEFAULT()
	ENDPROC

	PROCEDURE cboType.Init
		this.addlistitem('Brine',1)
		this.addlistitem('Frac',2)
		this.addlistitem('Pit',3)
	ENDPROC

	PROCEDURE cmdatamanager.afterchange
		LPARAMETERS cworkarea,cfield
		
		*!*	DO CASE
		*!*	   CASE UPPER(m.cField) + ',' $ 'NQUANTITY,NPRICE,'
		*!*	      m.nExtension = invdet.nQuantity * invdet.nPrice
		*!*	      
		*!*	      RETURN this.Replace('InvDet', 'nExtension', m.nExtension )
		*!*	      
		*!*	   CASE UPPER(m.cField) == 'NEXTENSION'
		*!*	      thisform.Calctot()
		*!*	ENDCASE
		RETURN .T.      
	ENDPROC

	PROCEDURE cmdatamanager.afterdelete
		LPARAMETERS cworkarea
		
		DO CASE
		   CASE m.cWorkarea = 'Invhdr'
		      lcBatch = invhdr.cBatch
		      thisform.glmaint.delbatch(lcBatch,'AR')
		   CASE m.cWorkArea = 'Invdet'   
		      * Recalculate the invoice totals
		      thisform.calctot()
		ENDCASE
		
		DODEFAULT(cworkarea)
	ENDPROC

	PROCEDURE cmdatamanager.afternav
		LPARAMETERS cworkarea
		
		IF m.cWorkArea = 'Invhdr'
		   SELECT custownvend
		   LOCATE FOR cID = invhdr.cCustID
		   IF FOUND()
		      THISFORM.txtcName.VALUE = custownvend.cName
		   ELSE
		      THISFORM.txtcName.VALUE = ''
		   ENDIF
		   SELECT invhdr
		   THISFORM.setnextcontrol(THISFORM.txtccustid)
		ENDIF
		
		thisform.cboSalesTax.refresh()
		RETURN .t.
		
	ENDPROC

	PROCEDURE cmdatamanager.afternew
		LPARAMETERS cworkarea
		LOCAL llFoundTerm, lcidTerm, lcBatch
		
		DO CASE
		   CASE UPPER(m.cWorkarea) = 'INVHDR'    && Invoice Headers
		      REPLACE cBatch  WITH THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Batch'), ;
		         cinvnum WITH 'Pending', ;
		         lBrine  WITH .T., ;
		         dPostDate WITH DATE()
		*
		*  Look for a default terms record so that we can set the terms
		*  to that default
		      llFoundTerm = .F.
		      SELECT terms
		      SCAN FOR lDefTerm = .T.
		         lcidTerm = cidTerm
		         llFoundTerm = .T.
		         EXIT
		      ENDSCAN
		      SELECT invhdr
		      IF llFoundTerm
		         REPLACE cidTerm WITH lcidTerm
		      ELSE
		         REPLACE cidTerm WITH ''
		      ENDIF
		     
		      THISFORM.txtcPriceCode.value = '1'
		      THISFORM.setnextcontrol(THISFORM.txtccustid)
		
		   CASE UPPER(m.cWorkarea) = 'INVDET'
		      lcBatch = invhdr.cbatch
		      lcidInvd = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Invoice Detail')
		      SET DELETED OFF
		      SELECT invdet1
		      SET ORDER TO cidinvd
		      DO WHILE SEEK(lcidInvd)
		         lcidInvd = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Invoice Detail')
		      ENDDO
		      SET DELETED ON
		      SELECT invdet
		      REPLACE Invdet.cidInvd WITH lcidInvd, ;
		         invdet.cbatch  WITH lcBatch
		
		ENDCASE
		
	ENDPROC

	PROCEDURE cmdatamanager.beforedelete
		LPARAMETERS cworkarea
		
		*  Make sure the period or year isn't closed
		IF NOT thisform.glmaint.CheckPeriod(invhdr.dpostdate)
		   THISFORM.omessage.warning('Unable to delete this invoice. Either the fiscal year or period represented by this date has been closed.')
		   RETURN .F.
		ENDIF   
		
		DODEFAULT(m.cWorkarea)
		
		IF m.cWorkarea == 'Invdet'
		   *
		   *  Add items back into inventory
		   *
		   SELECT items
		   IF SEEK(invdet.cItemId)
		      *
		      *  Add the quantity to qty on hand for this item
		      *
		      REPLACE nqtyonhand WITH nqtyonhand+invdet.nQuantity
		   ENDIF
		   SELECT invdet        
		ENDIF   
		
	ENDPROC

	PROCEDURE cmdatamanager.beforeupdate
		LPARAMETERS cworkarealist
		LOCAL lcBatch, lcARAcct, lcTaxAcct, lcCOGSAcct, llReturn, lcSelect, lnRecNo, lReturn
		LOCAL lnLastCost, llInvItem
		
		IF NOT THISFORM.lChanged
		   RETURN .F.
		ENDIF
		
		lReturn = Thisform.oRegistry.GetKeyValue('%Shared.Counters.BrineLog',10)
		IF ISNULL(lReturn)  &&  Brine key doesn't exist, so create it to avoid errors later
		   thisform.oRegistry.SetKeyValueEx('%Shared.Counters.BrineLog',0,'BrineLog',10,'00001000','BrineLog Key',0)
		   IF NOT USED('appreg01')
		      USE appreg01 IN 0
		   ENDIF
		   SELECT appreg01
		   LOCATE FOR keyname = 'Counters.BrineLog.'
		   IF FOUND()
		      IF EMPTY(properties)  &&  No properties, so insert the code to change the length to be 8
		         REPLACE properties WITH '%Length= 8' + CHR(13) + '%Radix= 36' + CHR(13) + '%Reset= 0' + CHR(13) + '%Incr=  1',  ;
		                 shortvalue WITH '            100020060901      '
		      ELSE
		         IF NOT 'LENGTH' $ UPPER(cProperties)  &&  The length property is not set, so add it to the beginning
		            REPLACE properties WITH '%Length= 8' + CHR(13) + properties
		         ENDIF
		      ENDIF
		   ENDIF
		ENDIF
		
		lcSelect = SELECT()
		
		* Initialize variables
		lnLastCost = 0
		llInvItem  = .F.
		
		* set coverage to temp.log
		
		*  Make sure the period or year isn't closed
		IF NOT THISFORM.glmaint.CheckPeriod(invhdr.dpostdate)
		   THISFORM.omessage.warning('Unable to save this invoice. Either the fiscal year or period represented by this date has been closed.')
		   RETURN .F.
		ENDIF
		
		*!* Commented out so bbl totals can be entered without a charge. pws - 1/23/15
		*!*	IF invhdr.nInvTot = 0
		*!*	   WAIT WIND NOWAIT 'You cannot save a zero amount invoice....'
		*!*	   RETURN .F.
		*!*	ENDIF
		
		WAIT WINDOW NOWAIT 'Saving Changes, Please Wait.....'
		
		lcBatch = invhdr.cBatch
		
		*
		*  Delete the G/L journal entries for this invoice
		*
		THISFORM.glmaint.delbatch(lcBatch,'AR')
		
		*
		*  Set the source for this entry
		*
		THISFORM.glmaint.cSource = 'AR'
		
		*
		* Get the default A/R account
		*
		SELECT aropt
		GO TOP
		lcARAcct   = cARAcct
		lcTaxAcct  = cTaxAcct
		lcCOGSAcct = cCOGSAcct
		lcFeeAcct  = cFeeAcct
		
		*
		*  Plug in the discount available number in the header
		*
		IF THISFORM.txtdInvDate.VALUE <> THISFORM.txtdDiscDate.VALUE  &&  If there is a discount available
		   lcidTerm = invhdr.cidterm
		   SELECT terms
		   LOCATE FOR cidterm = invhdr.cidterm
		   IF FOUND()
		      lndiscpct = terms.ndiscpct / 100
		      REPLACE invhdr.nDiscTot WITH invhdr.nInvTot * lndiscpct
		   ENDIF
		ENDIF
		
		IF invhdr.cInvNum = 'Pending'
		   lcInvNum = TRANSFORM(VAL(THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Invoice Number')))
		   SELECT invhdr1
		   SET ORDER TO cInvNum
		   DO WHILE (SEEK(lcInvNum))
		      lcInvNum = TRANSFORM(VAL(THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Invoice Number')))
		   ENDDO
		   THIS.REPLACE('Invhdr','Cinvnum',lcInvNum)
		   THISFORM.txtcInvNum.REFRESH()
		   lcInvNum = TRANSFORM(VAL(invhdr.cInvNum)+1)
		   SELE aropt
		   REPLACE aropt.cInvNum WITH lcInvNum
		ENDIF
		
		
		*
		*  Remove any previous brine log entries for this workorder
		*
		SELECT brinelog
		DELE FOR cBatch == lcBatch
		
		*
		*  Create the G/L journal entries for this invoice
		*
		
		*  A/R entry
		THISFORM.glmaint.cBatch     = lcBatch
		THISFORM.glmaint.dGLDate    = invhdr.dpostdate
		THISFORM.glmaint.cReference = 'Inv: ' + ALLTRIM(invhdr.cInvNum)
		THISFORM.glmaint.cDesc      = THISFORM.txtcName.VALUE
		THISFORM.glmaint.cAcctNo    = lcARAcct
		THISFORM.glmaint.cId        = invhdr.cCustId
		THISFORM.glmaint.nAmount    = invhdr.nInvTot
		THISFORM.glmaint.mNotes     = 'invhdr.mnotes'
		THISFORM.glmaint.cBunch     = THISFORM.cBunch
		
		THISFORM.glmaint.updatebatch()
		
		*  Sales Tax Entry
		IF invhdr.nSalesTax <> 0
		   THISFORM.glmaint.cBatch     = lcBatch
		   THISFORM.glmaint.dGLDate    = invhdr.dpostdate
		   THISFORM.glmaint.cReference = 'Inv: ' + ALLTRIM(invhdr.cInvNum)
		   THISFORM.glmaint.cDesc      = THISFORM.txtcName.VALUE
		   THISFORM.glmaint.cAcctNo    = lcTaxAcct
		   THISFORM.glmaint.cId        = invhdr.cCustId
		   THISFORM.glmaint.nAmount    = invhdr.nSalesTax * -1     && Assume to be credit
		   THISFORM.glmaint.updatebatch()
		ENDIF
		
		*  Injection Fee Entry
		IF invhdr.nInjectionFee <> 0
		   THISFORM.glmaint.cBatch     = lcBatch
		   THISFORM.glmaint.dGLDate    = invhdr.dpostdate
		   THISFORM.glmaint.cReference = 'Inv: ' + ALLTRIM(invhdr.cInvNum)
		   THISFORM.glmaint.cDesc      = THISFORM.txtcName.VALUE
		   THISFORM.glmaint.cAcctNo    = lcFeeAcct
		   THISFORM.glmaint.cId        = invhdr.cCustId
		   THISFORM.glmaint.nAmount    = invhdr.nInjectionFee * -1     && Assume to be credit
		   THISFORM.glmaint.updatebatch()
		ENDIF
		
		swselect('leases')
		SET ORDER to cwellid   && CWELLID
		
		*  Detail Lines
		SELECT invdet
		GO TOP 
		lnRecNo = RECNO()
		SCAN FOR cBatch == lcBatch
		   THISFORM.glmaint.cBatch     = lcBatch
		   THISFORM.glmaint.dGLDate    = invhdr.dpostdate
		   THISFORM.glmaint.cReference = 'Inv: ' + ALLTRIM(invhdr.cInvNum)
		   THISFORM.glmaint.cDesc      = invdet.citemdesc
		   THISFORM.glmaint.cAcctNo    = invdet.cAcctNo
		   THISFORM.glmaint.cId        = invhdr.cCustId
		   THISFORM.glmaint.cUnitNo    = invdet.cUnitNo
		   THISFORM.glmaint.nAmount    = invdet.nExtension * -1     && Assume to be credit
		   THISFORM.glmaint.updatebatch()
		
		   *
		   *  Deduct items from inventory
		   *
		   SELECT items
		   IF SEEK(invdet.cItemId)
		      IF cType = 'B'
		         llBrine = .T.
		      ELSE           && Item is not a brine hauler item
		         llBrine = .F.
		      ENDIF
		      IF 'DISP' $ UPPER(invdet.cItemId) OR NOT EMPTY(invdet.cdisperm)
		         llDisp = .T.
		      ELSE
		         llDisp = .F.
		      ENDIF
		      REPLACE nqtyonhand WITH nqtyonhand-invdet.nQuantity
		      lnLastCost = nLastCost
		   ELSE
		      llDisp  = .F.
		      llBrine = .F.
		   ENDIF
		   SELECT invdet
		
		   *
		   *  If we have a disposal item, create the brine log entry.
		   *
		   IF llDisp
		      m.cidbrine = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.BrineLog')
		
		      SELECT brinelog1
		      SET DELETED OFF
		      SET ORDER TO bKey
		      DO WHILE SEEK(m.cidbrine)
		         m.cidbrine = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.BrineLog')
		      ENDDO
		      SET DELETED ON
		
		      m.nAmount  = invdet.nQuantity
		      m.cdisperm = invdet.cdisperm
		      m.dDate    = invdet.dexpdate
		      m.cTruck   = invdet.cTruck
		      m.cType    = invdet.cType
		      m.cWellID  = invdet.cUnitNo
		      m.lOutOfDistrict = .F.
		      
		      SELECT leases
		      IF SEEK(m.cwellid)
		         IF cstate <> 'OH' AND NOT EMPTY(cstate)
		            m.lOutOfDistrict = .t.
		         ENDIF
		      ENDIF 
		      m.nInjFee  = thisform.calcinjfee(invdet.citemid,invdet.cunitno,invdet.nquantity)
		      m.dentdate = DATE()
		      m.cEnttime = TIME()
		      m.cBatch   = lcBatch
		      INSERT INTO brinelog FROM MEMVAR
		   ENDIF
		
		ENDSCAN
		GOTO lnRecNo
		
		*
		*  Check to make sure the batch balances
		*
		llReturn = THISFORM.glmaint.chkBalance()
		
		IF llReturn
		   DODEFAULT(m.cworkarealist)
		   WAIT WINDOW NOWAIT 'Changes Saved....' TIMEOUT 2
		ELSE
		   WAIT WIND 'The Batch Was Not In Balance...Unable to save invoice.'
		ENDIF
		
		SELECT (lcSelect)
		
		RETURN llReturn
		
		
		
		
	ENDPROC

	PROCEDURE cmdLookItem.Click
		LOCAL lcList
		PRIV llOK
		
		llOK   = .T.
		lcList = 'citemid,citemdesc,cvendorid'
		
		DO FORM ..\custom\picklist WITH 'Items', lcList, thisform.txtcitemid.value, 3
		
		IF llOK
		   thisform.txtcItemId.value = Items.citemid
		   thisform.txtcItemDesc.value = items.cItemDesc
		   thisform.txtnPrice.value = items.nPrice1
		   thisform.txtcPriceCode.value = '1'
		   thisform.txtnPrice.Refresh()
		   thisform.txtcPriceCode.Refresh()
		   thisform.txtcItemId.refresh()
		   thisform.txtcItemDesc.refresh()
		   IF items.ctype = 'B'
		      thisform.lBrine = .T.
		      thisform.cbodisposal.value = items.cdisperm
		      thisform.cbodisposal.refresh()
		   ELSE
		      thisform.lBrine = .F.
		   ENDIF      
		ENDIF   
		
		thisform.setnextcontrol(thisform.txtcitemid)
		
		SELECT invhdr
	ENDPROC

	PROCEDURE cmdLookWell.Click
		LOCAL lcList
		PRIV llOK
		
		SET SAFETY OFF
		IF USED('templease')
		   USE IN templease
		ENDIF
		IF USED('tmplease')
		   USE IN tmplease
		ENDIF
		      
		SELECT leases.cwellid, leases.cLease, custs.ccustname, leases.cpermit ;
		  FROM leases, custs ;
		  WHERE leases.ccustid = custs.ccustid ;
		    INTO CURSOR templease ;
		    ORDER BY leases.cwellid
		    
		USE DBF('templease') AGAIN IN 0 ALIAS tmplease
		
		SELECT tmplease
		INDEX ON cwellid TAG cwellid 
		INDEX ON cLease TAG cLease
		INDEX ON ccustname TAG ccustname
		INDEX ON cpermit TAG cpermit
		    
		llOK = .T.
		lcList = 'cwellid\Well ID,clease\Lease,ccustname\Name,cpermit\Permit'
		
		DO FORM ..\custom\picklist WITH 'tmplease', lcList, thisform.txtcwellid.value, 4, .T., .t.
		
		IF llOK
		   thisform.txtcWellID.value   = tmplease.cwellid
		   thisform.txtcWellName.value = tmplease.cLease
		   thisform.txtcWellID.refresh()
		   thisform.txtcWellName.refresh()
		ENDIF   
		
		thisform.setnextcontrol(thisform.txtcWellID)
		
		SELECT invhdr
	ENDPROC

	PROCEDURE cmdTruck.Click
		LOCAL lcList
		PRIV llOK
		
		llOK = .T.
		lcList = 'cTruck,cDesc'
		
		DO FORM ..\custom\picklist WITH 'Trucks', lcList, thisform.txtcTruck.value, 2
		
		IF llOK
		   thisform.txtcTruck.value   = trucks.ctruck
		   thisform.txtcTruck.refresh()
		ENDIF   
		
		thisform.setnextcontrol(thisform.txtctruck)
		
		SELECT invhdr
	ENDPROC

	PROCEDURE Glmaint.delbatch
		LPARAMETERS tcbatch, tcJournal
		
		IF TYPE('tcBatch') <> 'C'
		   WAIT WIND NOWAIT 'The batch number passed to delete batch was invalid...'
		   RETURN
		ENDIF
		
		DODEFAULT(tcBatch, tcJournal)   
	ENDPROC

	PROCEDURE grdInvdet.AfterRowColChange
		LPARAMETERS ncol
		
		DODEFAULT(nCol)
		thisform.calctot()
	ENDPROC

	PROCEDURE grdInvdet.Column1.txtcItemId.DblClick
		thisform.editdetail()
	ENDPROC

	PROCEDURE grdInvdet.Column1.txtcItemId.InteractiveChange
		IF THIS.VALUE <> '*' AND DODEFAULT()
		   SELECT items
		   LOCATE FOR citemid == THIS.VALUE
		   IF FOUND()
		      THIS.PARENT.PARENT.Column2.txtcItemDesc.SET('value',items.citemdesc)
		   ELSE
		      THIS.PARENT.PARENT.Column2.txtcItemDesc.SET('value','')
		   ENDIF
		ELSE
		   THIS.PARENT.PARENT.Column2.txtcItemDesc.SET('value','')
		ENDIF
		
	ENDPROC

	PROCEDURE grdInvdet.Column10.cmdDelete.Click
		DODEFAULT()
		
		IF thisform.omessage.confirm('Delete this detail line?')
		   SELECT invdet
		   DELETE NEXT 1
		   GO top
		   thisform.Refresh()  &&  Not sure why doing it twice works, but it does, so don't mess with it anymore... - BH 3-24-06
		   thisform.calctot()
		   thisform.Refresh()
		   thisform.calctot()
		ENDIF  
	ENDPROC

	PROCEDURE grdInvdet.Column2.txtcItemDesc.DblClick
		thisform.editdetail()
	ENDPROC

	PROCEDURE grdInvdet.Column3.txtnPrice.DblClick
		thisform.editdetail()
	ENDPROC

	PROCEDURE grdInvdet.Column4.txtnQuantity.DblClick
		thisform.editdetail()
	ENDPROC

	PROCEDURE grdInvdet.Column5.txtcWorkOrder.DblClick
		thisform.editdetail()
	ENDPROC

	PROCEDURE grdInvdet.Column6.txtcTaxable.DblClick
		thisform.editdetail()
	ENDPROC

	PROCEDURE grdInvdet.Column6.txtcTaxable.Valid
		IF NOT INLIST(this.Value,'T','E')
		   thisform.oMessage.Warning('The only valid choices for this field are (T)axable or (E)xempt.')
		   RETURN .f.
		ENDIF
		
		DODEFAULT()
	ENDPROC

	PROCEDURE grdInvdet.Column7.txtnExtension.DblClick
		thisform.editdetail()
	ENDPROC

	PROCEDURE grdInvdet.Column8.txtcWellID.DblClick
		thisform.editdetail()
	ENDPROC

	PROCEDURE grdInvdet.Column9.cmdEdit.Click
		DODEFAULT()
		
		IF thisform.omessage.confirm('Edit this detail line?')
		   thisform.editdetail()
		ENDIF  
	ENDPROC

	PROCEDURE Swlookupbutton1.Click
		LOCAL lcList
		PRIV llOK
		
		llOK = .T.
		lcList = 'ccustid,ccustname'
		
		DO FORM ..\custom\picklist WITH 'custs', lcList, thisform.txtccustid.value, 3
		
		IF llOK
		   IF custown.ccustid <> invhdr.ccustid
		      THISFORM.cmdatamanager.REPLACE('invhdr','ccustid',custs.ccustid)
		      THISFORM.txtcCustid.REFRESH()
		      THISFORM.txtcName.VALUE = custs.ccustname
		      THISFORM.txtcName.REFRESH()
		      THISFORM.lchanged = .T.
		      IF NOT EMPTY(custown.cidterm)
		         THISFORM.cmdatamanager.REPLACE('invhdr','cidterm',custs.cidterm)
		         THISFORM.cboTerms.REFRESH()
		      ELSE
		         THISFORM.cmdatamanager.REPLACE('invhdr','cidterm','')
		         THISFORM.cboTerms.REFRESH()
		      ENDIF
		   ENDIF
		ENDIF
		
		THISFORM.txtcCustId.SETFOCUS()
		
	ENDPROC

	PROCEDURE txtcCustID.GotFocus
		ON KEY LABEL F2 _screen.activeform.swlookupbutton1.Click()
		DODEFAULT()
	ENDPROC

	PROCEDURE txtcCustID.InteractiveChange
		IF DODEFAULT()
		   SELECT custs
		   LOCATE FOR cCustID == this.Value
		   IF FOUND()
		      thisform.txtcname.set('value',custs.ccustname)
		   ELSE
		      thisform.txtcname.set('value','')
		   ENDIF
		ENDIF    
	ENDPROC

	PROCEDURE txtcCustID.LostFocus
		ON KEY LABEL F2 *
		DODEFAULT()
	ENDPROC

	PROCEDURE txtcCustID.Valid
		IF NOT EMPTY(THIS.VALUE)
		   IF thisform.coldcust <> THIS.VALUE
		      SELECT custs
		      LOCATE FOR cCustID = THIS.VALUE
		      IF FOUND()
		         IF NOT EMPTY(custs.cidterm)
		            THISFORM.cmdatamanager.REPLACE('invhdr','cidterm',custs.cidterm)
		            THISFORM.cboTerms.REFRESH()
		         ELSE
		            THISFORM.cmdatamanager.REPLACE('invhdr','cidterm','')
		            THISFORM.cboTerms.REFRESH()
		         ENDIF
		      ENDIF
		   ENDIF
		ENDIF
		
		DODEFAULT()
		
	ENDPROC

	PROCEDURE txtcCustID.When
		thisform.coldcust = this.Value
		RETURN DODEFAULT()
	ENDPROC

	PROCEDURE txtCinvnum.Valid
		LOCAL lnRecNo
		
		IF NOT EMPTY(THIS.VALUE) AND THIS.VALUE <> 'Pending'
		    SELECT invhdr1
		    SET ORDER TO cinvnum
		    IF SEEK(THIS.VALUE)
		        IF NOT THISFORM.oMessage.CONFIRM('There is already an invoice with this number.  ' + ;
		                'Duplicate invoices from the same vendor can cause problems. ' + ;
		                'Are you sure you would like to continue anyway?')
		            RETURN 0
		        ENDIF
		    ENDIF
		ENDIF
		
		DODEFAULT()
		
	ENDPROC

	PROCEDURE txtcItemDesc.LostFocus
		IF EMPTY(thisform.txtcTaxable.value)
		   thisform.txtcTaxable.value = 'E'
		   thisform.txtcTaxable.Refresh()
		ENDIF   
		
		IF LEFT(thisform.txtcItemId.value,1) = '*' AND lastkey() <> 15  && Comment line
		   thisform.adddetail()
		ENDIF   
		
	ENDPROC

	PROCEDURE txtcItemId.GotFocus
		ON KEY LABEL F2 _screen.activeform.cmdLookItem.Click()
		DODEFAULT()
	ENDPROC

	PROCEDURE txtcItemId.InteractiveChange
		IF this.value <> '*' AND DODEFAULT()
		   SELECT items
		   LOCATE FOR citemid == this.Value
		   IF FOUND()
		      thisform.txtcitemDesc.set('value',items.citemdesc)
		   ELSE
		      thisform.txtcitemdesc.set('value','')
		   ENDIF
		ELSE
		   thisform.txtcitemdesc.set('value','')
		ENDIF       
	ENDPROC

	PROCEDURE txtcItemId.LostFocus
		ON KEY LABEL F2 *
		
		DODEFAULT()
	ENDPROC

	PROCEDURE txtcItemId.Valid
		LOCAL llReturn
		llRETURN = .T.
		
		DODEFAULT()
		
		IF NOT EMPTY(this.value) AND this.value <> '*'
		   SELECT items
		   IF SEEK(this.value)
		      thisform.txtcItemDesc.value = cItemDesc
		      thisform.txtcItemDesc.Refresh()
		      thisform.txtnPrice.value = nPrice1
		      thisform.txtcPriceCode.value = '1'
		      thisform.txtnPrice.Refresh()
		      thisform.txtcPriceCode.Refresh()
		      thisform.cbodisposal.value = items.cdisperm
		      thisform.cbodisposal.refresh()
		      llReturn = .T.
		   ENDIF
		ENDIF
		
		SELECT invhdr
		
		RETURN (llReturn)
		
		
	ENDPROC

	PROCEDURE txtcName.When
		DODEFAULT()
		RETURN .F.
	ENDPROC

	PROCEDURE txtcPriceCode.LostFocus
		thisform.getprice(this.value)
	ENDPROC

	PROCEDURE txtcPriceCode.Valid
		IF EMPTY(THIS.VALUE)
		   THIS.VALUE = '1'
		ENDIF
		
	ENDPROC

	PROCEDURE txtcTaxable.LostFocus
		IF NOT INLIST(THIS.VALUE,'E','T')
		   THIS.VALUE = 'E'
		ENDIF
		
		THISFORM.txtcwellname.VALUE = ''
		THISFORM.lchanged = .T.
		
		THISFORM.AddDetail()
	ENDPROC

	PROCEDURE txtcTruck.GotFocus
		on key label f2 _screen.activeform.cmdtruck.click()
		dodefault()
	ENDPROC

	PROCEDURE txtcTruck.LostFocus
		on key label f2 *
		
	ENDPROC

	PROCEDURE txtcWellID.GotFocus
		ON KEY LABEL F2 _screen.activeform.cmdLookWell.Click()
		DODEFAULT()
	ENDPROC

	PROCEDURE txtcWellID.InteractiveChange
		IF DODEFAULT()
		   SELECT leases
		   LOCATE FOR cwellid == this.Value
		   IF FOUND()
		      thisform.txtcwellName.set('value',leases.clease)
		   ELSE
		      thisform.txtcwellname.set('value','')
		   ENDIF
		ENDIF       
	ENDPROC

	PROCEDURE txtcWellID.LostFocus
		ON KEY LABEL F2 *
		thisform.setnextcontrol(thisform.cbotype)
		DODEFAULT()
		
	ENDPROC

	PROCEDURE txtcWellName.When
		RETURN .F.
		
	ENDPROC

	PROCEDURE txtcWorkOrder.GotFocus
		ON KEY LABEL F2 _screen.activeform.cmdLookWell.Click()
		DODEFAULT()
	ENDPROC

	PROCEDURE txtcWorkOrder.LostFocus
		ON KEY LABEL F2 *
		thisform.setnextcontrol(thisform.txtnExtension)
		DODEFAULT()
		
	ENDPROC

	PROCEDURE txtdInvDate.LostFocus
		DODEFAULT()
		thisform.valterms()
	ENDPROC

	PROCEDURE txtInjectionFee.When
		DODEFAULT()
		RETURN .F.
	ENDPROC

	PROCEDURE txtNinvbal.When
		DODEFAULT()
		RETURN .F.
	ENDPROC

	PROCEDURE txtNinvtot.When
		DODEFAULT()
		RETURN .F.
	ENDPROC

	PROCEDURE txtnPrice.Valid
		thisform.CalcExt()
		DODEFAULT()
	ENDPROC

	PROCEDURE txtnQuantity.Valid
		thisform.CalcExt()
		DODEFAULT()
	ENDPROC

	PROCEDURE txtNsalestax.When
		DODEFAULT()
		RETURN .F.
	ENDPROC

	PROCEDURE txtWorkDate.Valid
		DODEFAULT()
		IF EMPTY(this.value)
		   this.setvalue(DATE())
		   this.refresh()
		ENDIF   
		
		
	ENDPROC

ENDDEFINE
