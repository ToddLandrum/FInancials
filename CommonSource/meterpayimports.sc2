*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="meterpayimports.scx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
#INCLUDE "..\source\appdefs.h"

DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="2" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Cursor7" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor10" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor11" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor8" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor12" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor6" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor9" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor13" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor14" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor16" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor17" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor19" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Relation1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor15" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor18" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor20" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor21" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor22" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor23" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor24" UniqueID="" Timestamp="" />

	AutoOpenTables = .F.
	DataSource = .NULL.
	Height = 712
	InitialSelectedAlias = "csrcthdr"
	Left = 14
	Name = "Dataenvironment"
	Top = 69
	Width = 1016

	ADD OBJECT 'Cursor1' AS cursor WITH ;
		Alias = "csrcthdr", ;
		BufferModeOverride = 5, ;
		CursorSource = "csrcthdr", ;
		Database = ..\newdbc\appdata.dbc, ;
		Filter = "lUploaded = .T.", ;
		Height = 90, ;
		Left = 279, ;
		Name = "Cursor1", ;
		Order = "", ;
		Top = 131, ;
		Width = 101
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor10' AS cursor WITH ;
		Alias = "glmaster", ;
		BufferModeOverride = 5, ;
		CursorSource = "glmaster", ;
		Database = ..\newdbc\appdata.dbc, ;
		Height = 90, ;
		Left = 422, ;
		Name = "Cursor10", ;
		Order = "glbatch", ;
		Top = 135, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor11' AS cursor WITH ;
		Alias = "coabal", ;
		BufferModeOverride = 5, ;
		CursorSource = "coabal", ;
		Database = ..\newdbc\appdata.dbc, ;
		Height = 90, ;
		Left = 137, ;
		Name = "Cursor11", ;
		Top = 155, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor12' AS cursor WITH ;
		Alias = "wells", ;
		BufferModeOverride = 3, ;
		CursorSource = "wells", ;
		Database = ..\newdbc\appdata.dbc, ;
		Height = 90, ;
		Left = 7, ;
		Name = "Cursor12", ;
		Order = "cwellid", ;
		Top = 152, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor13' AS cursor WITH ;
		Alias = "welldays", ;
		CursorSource = "welldays", ;
		Database = ..\newdbc\appdata.dbc, ;
		Height = 87, ;
		Left = 511, ;
		Name = "Cursor13", ;
		Top = 265, ;
		Width = 101
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor14' AS cursor WITH ;
		Alias = "checks", ;
		BufferModeOverride = 5, ;
		CursorSource = "checks", ;
		Database = ..\newdbc\appdata.dbc, ;
		Height = 90, ;
		Left = 239, ;
		Name = "Cursor14", ;
		Top = 260, ;
		Width = 91
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor15' AS cursor WITH ;
		Alias = "meterall", ;
		BufferModeOverride = 5, ;
		CursorSource = "meterall", ;
		Database = ..\newdbc\appdata.dbc, ;
		Height = 90, ;
		Left = 782, ;
		Name = "Cursor15", ;
		Top = 388, ;
		Width = 91
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor16' AS cursor WITH ;
		Alias = "revcat", ;
		CursorSource = "revcat", ;
		Database = ..\newdbc\appdata.dbc, ;
		Height = 90, ;
		Left = 390, ;
		Name = "Cursor16", ;
		Top = 269, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor17' AS cursor WITH ;
		Alias = "csrctdet1", ;
		CursorSource = "csrctdet", ;
		Database = ..\newdbc\appdata.dbc, ;
		Height = 90, ;
		Left = 464, ;
		Name = "Cursor17", ;
		Top = 405, ;
		Width = 101
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor18' AS cursor WITH ;
		Alias = "meterdata", ;
		BufferModeOverride = 5, ;
		CursorSource = "meterdata", ;
		Database = ..\newdbc\appdata.dbc, ;
		Height = 90, ;
		Left = 150, ;
		Name = "Cursor18", ;
		Top = 20, ;
		Width = 91
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor19' AS cursor WITH ;
		Alias = "csrcthdr1", ;
		CursorSource = "csrcthdr", ;
		Database = ..\newdbc\appdata.dbc, ;
		Height = 90, ;
		Left = 279, ;
		Name = "Cursor19", ;
		Top = 389, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor2' AS cursor WITH ;
		Alias = "csrctdet", ;
		BufferModeOverride = 5, ;
		CursorSource = "csrctdet", ;
		Database = ..\newdbc\appdata.dbc, ;
		Height = 90, ;
		Left = 304, ;
		Name = "Cursor2", ;
		Top = 12, ;
		Width = 101
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor20' AS cursor WITH ;
		Alias = "metersub", ;
		BufferModeOverride = 5, ;
		CursorSource = "metersub", ;
		Database = ..\newdbc\appdata.dbc, ;
		Height = 90, ;
		Left = 648, ;
		Name = "Cursor20", ;
		Top = 389, ;
		Width = 91
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor21' AS cursor WITH ;
		Alias = "meters", ;
		CursorSource = "meters", ;
		Database = ..\newdbc\appdata.dbc, ;
		Height = 90, ;
		Left = 120, ;
		Name = "Cursor21", ;
		Top = 514, ;
		Width = 91
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor22' AS cursor WITH ;
		Alias = "income1", ;
		CursorSource = "income", ;
		Database = ..\newdbc\appdata.dbc, ;
		Height = 90, ;
		Left = 718, ;
		Name = "Cursor22", ;
		Top = 146, ;
		Width = 91
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor23' AS cursor WITH ;
		Alias = "incsusp1", ;
		CursorSource = "incsusp", ;
		Database = ..\newdbc\appdata.dbc, ;
		Height = 90, ;
		Left = 692, ;
		Name = "Cursor23", ;
		Top = 21, ;
		Width = 91
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor24' AS cursor WITH ;
		Alias = "expsusp", ;
		BufferModeOverride = 5, ;
		CursorSource = "expsusp", ;
		Database = ..\newdbc\appdata.dbc, ;
		Height = 90, ;
		Left = 880, ;
		Name = "Cursor24", ;
		Top = 363, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor3' AS cursor WITH ;
		Alias = "glopt", ;
		CursorSource = "glopt", ;
		Database = ..\newdbc\appdata.dbc, ;
		Height = 90, ;
		Left = 150, ;
		Name = "Cursor3", ;
		Top = 380, ;
		Width = 91
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor4' AS cursor WITH ;
		Alias = "expense", ;
		BufferModeOverride = 5, ;
		CursorSource = "expense", ;
		Database = ..\newdbc\appdata.dbc, ;
		Height = 90, ;
		Left = 883, ;
		Name = "Cursor4", ;
		Top = 186, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor5' AS cursor WITH ;
		Alias = "options", ;
		CursorSource = "options", ;
		Database = ..\newdbc\appdata.dbc, ;
		Height = 90, ;
		Left = 570, ;
		Name = "Cursor5", ;
		Top = 140, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor6' AS cursor WITH ;
		Alias = "incsusp", ;
		BufferModeOverride = 5, ;
		CursorSource = "incsusp", ;
		Database = ..\newdbc\appdata.dbc, ;
		Height = 90, ;
		Left = 22, ;
		Name = "Cursor6", ;
		Top = 338, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor7' AS cursor WITH ;
		Alias = "coa", ;
		BufferModeOverride = 3, ;
		CursorSource = "coa", ;
		Database = ..\newdbc\appdata.dbc, ;
		Height = 90, ;
		Left = 11, ;
		Name = "Cursor7", ;
		Order = "acctno", ;
		Top = 6, ;
		Width = 104
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor8' AS cursor WITH ;
		Alias = "gldept", ;
		BufferModeOverride = 3, ;
		CursorSource = "gldept", ;
		Database = ..\newdbc\appdata.dbc, ;
		Height = 90, ;
		Left = 423, ;
		Name = "Cursor8", ;
		Order = "cdeptno", ;
		Top = 4, ;
		Width = 101
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor9' AS cursor WITH ;
		Alias = "income", ;
		BufferModeOverride = 5, ;
		CursorSource = "income", ;
		Database = ..\newdbc\appdata.dbc, ;
		Height = 90, ;
		Left = 634, ;
		Name = "Cursor9", ;
		Top = 272, ;
		Width = 101
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Relation1' AS relation WITH ;
		ChildAlias = "csrctdet", ;
		ChildOrder = "cbatch", ;
		Name = "Relation1", ;
		ParentAlias = "csrcthdr", ;
		RelationalExpr = "cbatch"
		*< END OBJECT: BaseClass="relation" />

ENDDEFINE

DEFINE CLASS formmeterimportpay AS frmdatamanagerform OF "..\common\cmforms.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Glmaint" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboAcct" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtCcheckno" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblCcheckno" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblDentdate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtNcashamt" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblNcashamt" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtAcctDesc" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="opgDeposits" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtdRctDate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdWellRcpt" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdWellRcpt.Column1.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdWellRcpt.Column1.txtcWellID" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdWellRcpt.Column2.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdWellRcpt.Column2.txtcWellName" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdWellRcpt.Column3.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdWellRcpt.Column3.txtcType" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdWellRcpt.Column4.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdWellRcpt.Column4.txtnUnits" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdWellRcpt.Column5.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdWellRcpt.Column5.txtnPrice" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdWellRcpt.Column6.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdWellRcpt.Column6.txtnTotal" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdUpload" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboPurch" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="LBLLABELCUSTOM1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdReport" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkHeaderRow" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtdPostDate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom2" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: adddetail1
		*m: adddetail2		&& Adds detail lines for page2
		*m: allocatesub
		*m: allocevenly
		*m: buildmeter
		*m: calcallocation
		*m: calcdays		&& Calculates the dayson from the period ranges entered.
		*m: calcext		&& Calculates the detail extension total
		*m: calctot		&& Calculates the Invoice Totals
		*m: chkforsubmeter
		*m: daysonsave		&& Saves the number of days the well was on.
		*m: dmincome		&& Either places the income entries in the INCSUSP or INCOME tables depending on whether the production year and period were specified.
		*m: editdetail1		&& Edit a detail line
		*m: editdetail2
		*m: getaddr
		*m: getprice		&& Gets the price for the item based upon the price code passed.
		*m: importexcel
		*m: lookcoa
		*m: meter_report
		*m: setstate		&& Resets the form state for non bound controls so that the save button still works.
		*m: upload
		*m: valterms		&& Validate Terms and Set Due Date and Disc Date based on the Terms
		*m: verifyexpcode
		*p: cclasslibsave
		*p: coldacctno
		*p: ldeptrequired
		*p: linvestment		&& .T. if the well is an investment well
		*p: lnewdetail
		*p: lwellrequired
		*p: ndetrecno
		*p: nextension
		*p: nprice
		*p: nquantity
		*p: ntotalmcf
		*p: odist		&& Distproc Object
		*p: oexcel
		*p: timpdate
	*</DefinedPropArrayMethod>

	Caption = "Import Pay Meters"
	cclasslibsave = 
	cdisplayname = 
	clistexpression = csrcthdr.cbatch
	cnavworkarea = csrcthdr
	cworkarea = csrcthdr
	DoCreate = .T.
	Height = 608
	lexpliciteditmode = .F.
	lrememberrecord = .T.
	Name = "FormMeterImportPay"
	ntotalmcf = 0
	timpdate = {}
	Visible = .T.
	Width = 618
	_memberdata = <VFPData>
		<memberdata name="ntotalmcf" display="nTotalMCF"/>
		<memberdata name="timpdate" display="tImpDate"/>
		<memberdata name="verifyexpcode" display="VerifyExpCode"/>
		</VFPData>
	cmdatamanager.Name = "cmdatamanager"
	cmdatamanager.TabIndex = 2
	cmdatamanager.ZOrderSet = 1
	cmlookupmanager.Name = "cmlookupmanager"
	Mwresize1.lblHighLight.Name = "lblHighLight"
	Mwresize1.lblShading.Name = "lblShading"
	Mwresize1.Name = "Mwresize1"
	Mwresize1.TabIndex = 1

	ADD OBJECT 'cboAcct' AS cbocomboboxcustom WITH ;
		BoundColumn = 1, ;
		ColumnCount = 2, ;
		ControlSource = "csrcthdr.ccashacct", ;
		Height = 22, ;
		Left = 362, ;
		Name = "cboAcct", ;
		TabIndex = 4, ;
		Top = 2, ;
		Width = 85
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="combobox" />

	ADD OBJECT 'cboPurch' AS cbocomboboxcustom WITH ;
		BoundColumn = 2, ;
		ColumnCount = 2, ;
		ControlSource = "csrcthdr.cid", ;
		Height = 20, ;
		Left = 72, ;
		Name = "cboPurch", ;
		TabIndex = 5, ;
		Top = 29, ;
		Width = 288
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="combobox" />

	ADD OBJECT 'chkHeaderRow' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Import Sheet Row 1 Contains Header ", ;
		Left = 36, ;
		Name = "chkHeaderRow", ;
		TabIndex = 14, ;
		Top = 96, ;
		Value = .T.
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'cmdReport' AS cmdcommandbuttoncustom WITH ;
		Caption = "Alloc Report", ;
		Height = 36, ;
		Left = 252, ;
		Name = "cmdReport", ;
		TabIndex = 17, ;
		TabStop = .F., ;
		Top = 552, ;
		Width = 120
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdUpload' AS cmdcommandbuttoncustom WITH ;
		Caption = "Choose Excel File", ;
		ForeColor = 255,0,0, ;
		Height = 36, ;
		Left = 262, ;
		Name = "cmdUpload", ;
		TabIndex = 15, ;
		Top = 87, ;
		Visible = .F., ;
		Width = 108
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'Glmaint' AS glmaint WITH ;
		Left = 480, ;
		Name = "Glmaint", ;
		Top = 71
		*< END OBJECT: ClassLib="..\custom\swgl.vcx" BaseClass="custom" />

	ADD OBJECT 'grdWellRcpt' AS grdgridcustom WITH ;
		ColumnCount = 6, ;
		cworkarea = csrctdet, ;
		Height = 408, ;
		lallowautoappend = .F., ;
		lallownew = .F., ;
		Left = 9, ;
		LinkMaster = "", ;
		Name = "grdWellRcpt", ;
		Panel = 1, ;
		RecordSource = "csrctdet", ;
		RelationalExpr = "", ;
		TabIndex = 16, ;
		Top = 132, ;
		Width = 598, ;
		Column1.ControlSource = "csrctdet.cwellid", ;
		Column1.FontName = "Courier New", ;
		Column1.FontSize = 8, ;
		Column1.Name = "Column1", ;
		Column2.ControlSource = "csrctdet.cdesc", ;
		Column2.FontName = "Courier New", ;
		Column2.FontSize = 8, ;
		Column2.Name = "Column2", ;
		Column2.Width = 159, ;
		Column3.ControlSource = "csrctdet.ctype", ;
		Column3.FontName = "Courier New", ;
		Column3.FontSize = 8, ;
		Column3.Name = "Column3", ;
		Column3.Width = 44, ;
		Column4.ControlSource = "csrctdet.nunits", ;
		Column4.FontName = "Courier New", ;
		Column4.FontSize = 8, ;
		Column4.Name = "Column4", ;
		Column4.Width = 92, ;
		Column5.ControlSource = "csrctdet.nprice", ;
		Column5.FontName = "Courier New", ;
		Column5.FontSize = 8, ;
		Column5.Name = "Column5", ;
		Column5.Width = 82, ;
		Column6.ControlSource = "csrctdet.namount", ;
		Column6.FontName = "Courier New", ;
		Column6.FontSize = 8, ;
		Column6.Name = "Column6", ;
		Column6.Width = 112
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="grid" />

	ADD OBJECT 'grdWellRcpt.Column1.Header1' AS header WITH ;
		Caption = " Well ID", ;
		FontSize = 8, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'grdWellRcpt.Column1.txtcWellID' AS txtquickfill WITH ;
		clistexpression = cwellid, ;
		clistworkarea = wells, ;
		ControlSource = "csrctdet.cwellid", ;
		FontName = "Courier New", ;
		FontSize = 8, ;
		lallowexceptions = .T., ;
		Left = 37, ;
		Name = "txtcWellID", ;
		Top = 35
		*< END OBJECT: ClassLib="..\common\cmgadget.vcx" BaseClass="textbox" />

	ADD OBJECT 'grdWellRcpt.Column2.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "Well Name", ;
		FontSize = 8, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'grdWellRcpt.Column2.txtcWellName' AS txttextboxcustom WITH ;
		ControlSource = "csrctdet.cdesc", ;
		FontName = "Courier New", ;
		FontSize = 8, ;
		Left = 117, ;
		Name = "txtcWellName", ;
		Top = 23
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'grdWellRcpt.Column3.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "Type", ;
		FontSize = 8, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'grdWellRcpt.Column3.txtcType' AS cbocomboboxcustom WITH ;
		ControlSource = "csrctdet.ctype", ;
		FontName = "Courier New", ;
		FontSize = 8, ;
		Left = 35, ;
		Name = "txtcType", ;
		RowSource = "", ;
		RowSourceType = 0, ;
		Top = 35
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="combobox" />

	ADD OBJECT 'grdWellRcpt.Column4.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "# Units", ;
		FontSize = 8, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'grdWellRcpt.Column4.txtnUnits' AS txttextboxcustom WITH ;
		Comment = "", ;
		ControlSource = "csrctdet.nunits", ;
		FontName = "Courier New", ;
		FontSize = 8, ;
		Left = 19, ;
		Name = "txtnUnits", ;
		Top = 35
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'grdWellRcpt.Column5.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "Price", ;
		FontSize = 8, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'grdWellRcpt.Column5.txtnPrice' AS txttextboxcustom WITH ;
		BackColor = 255,255,255, ;
		BorderStyle = 0, ;
		ControlSource = "csrctdet.nprice", ;
		FontName = "Courier New", ;
		FontSize = 8, ;
		ForeColor = 0,0,0, ;
		Margin = 0, ;
		Name = "txtnPrice"
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'grdWellRcpt.Column6.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "Total", ;
		FontSize = 8, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'grdWellRcpt.Column6.txtnTotal' AS txttextboxcustom WITH ;
		BackColor = 255,255,255, ;
		BorderStyle = 0, ;
		ControlSource = "csrctdet.namount", ;
		FontName = "Courier New", ;
		FontSize = 8, ;
		ForeColor = 0,0,0, ;
		Margin = 0, ;
		Name = "txtnTotal"
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'lblCcheckno' AS lblfieldlabelcustom WITH ;
		AutoSize = .T., ;
		Caption = "Check Number", ;
		Height = 16, ;
		Left = 407, ;
		Name = "lblCcheckno", ;
		TabIndex = 10, ;
		Top = 57, ;
		Width = 72
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblDentdate' AS lblfieldlabelcustom WITH ;
		AutoSize = .T., ;
		Caption = "Date", ;
		Height = 16, ;
		Left = 7, ;
		Name = "lblDentdate", ;
		TabIndex = 11, ;
		Top = 57, ;
		Width = 24
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'LBLLABELCUSTOM1' AS lbllabelcustom WITH ;
		Caption = "Purchaser", ;
		Left = 7, ;
		Name = "LBLLABELCUSTOM1", ;
		TabIndex = 18, ;
		Top = 31
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom2' AS lbllabelcustom WITH ;
		Caption = "Post Date", ;
		Left = 201, ;
		Name = "Lbllabelcustom2", ;
		TabIndex = 19, ;
		Top = 57
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblNcashamt' AS lblfieldlabelcustom WITH ;
		AutoSize = .T., ;
		Caption = "Total Amount", ;
		Height = 16, ;
		Left = 394, ;
		Name = "lblNcashamt", ;
		TabIndex = 12, ;
		Top = 97, ;
		Width = 65
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'opgDeposits' AS opgoptiongroupcustom WITH ;
		ButtonCount = 2, ;
		Height = 24, ;
		Left = 136, ;
		Name = "opgDeposits", ;
		TabIndex = 3, ;
		Top = 1, ;
		Width = 204, ;
		Option1.Caption = "Group Deposits", ;
		Option1.FontSize = 8, ;
		Option1.Height = 17, ;
		Option1.Left = 7, ;
		Option1.Name = "optGroup", ;
		Option1.Top = 5, ;
		Option1.Width = 107, ;
		Option2.Caption = "Deposit To", ;
		Option2.FontSize = 8, ;
		Option2.Height = 19, ;
		Option2.Left = 118, ;
		Option2.Name = "optDepositTo", ;
		Option2.Top = 3, ;
		Option2.Width = 83
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="optiongroup" />

	ADD OBJECT 'txtAcctDesc' AS txttextboxcustom WITH ;
		ControlSource = " ", ;
		Height = 20, ;
		Left = 449, ;
		lreadonly = .T., ;
		Name = "txtAcctDesc", ;
		TabIndex = 13, ;
		Top = 3, ;
		Width = 162
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtCcheckno' AS txttextboxcustom WITH ;
		ControlSource = "csrcthdr.ccheckno", ;
		Height = 20, ;
		Left = 486, ;
		MaxLength = 10, ;
		Name = "txtCcheckno", ;
		TabIndex = 8, ;
		Top = 55, ;
		Width = 89
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtdPostDate' AS gldate WITH ;
		ControlSource = "csrcthdr.dpostdate", ;
		Left = 255, ;
		Name = "txtdPostDate", ;
		TabIndex = 7, ;
		Top = 55
		*< END OBJECT: ClassLib="..\custom\swgl.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtdRctDate' AS gldate WITH ;
		ControlSource = "csrcthdr.ddate", ;
		Left = 72, ;
		Name = "txtdRctDate", ;
		TabIndex = 6, ;
		Top = 55
		*< END OBJECT: ClassLib="..\custom\swgl.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtNcashamt' AS txtnumeric WITH ;
		BackColor = 192,192,192, ;
		ControlSource = "csrcthdr.ncashamt", ;
		Height = 20, ;
		InputMask = "$$$,$$$,$$$.99", ;
		Left = 466, ;
		Name = "txtNcashamt", ;
		ReadOnly = .F., ;
		TabIndex = 9, ;
		TabStop = .F., ;
		Top = 94, ;
		Width = 110
		*< END OBJECT: ClassLib="..\common\cmgadget.vcx" BaseClass="textbox" />
	
	PROCEDURE adddetail1
	ENDPROC

	PROCEDURE adddetail2		&& Adds detail lines for page2
	ENDPROC

	PROCEDURE allocatesub
		lpara tcbatch
		LOCAL lnVariance, lnSubsTot, lcBatch, lnPrice, lnAllocation, lnTotalInc, lnRecNo
		LOCAL lnTotal, lnTotSub, lcSaveRec, lcidmets, lnTotalMCF
		*
		*  Calculates the allocation to each well
		*
		
		lcAlias = ALIAS()
		
		lcBatch = tcbatch
		
		lnPrice = meterall.nGasPrice
		
		STORE 0 TO lnVariance, lnSubsTot, lnAllocation, lnTotalInc
		
		* Total the well meters
		SELECT metersub
		locate for cbatch==lcBatch
		lcidmets  = metersub.cidmets
		lcSaveRec = lcidmets
		
		SCAN FOR cBatch == lcBatch
		   lnSubsTot = lnSubsTot + metersub.nSubMeter
		ENDSCAN
		
		*  Don't try to divide by zero
		IF lnSubsTot = 0
		   LOCATE FOR cidmets == lcidmets
		   RETURN
		ENDIF
		
		* Save the substotal
		IF meterall.nsubstotal <> lnSubsTot
		   thisform.cmdatamanager.replace('Meterall','Nsubstotal',lnSubsTot)
		ENDIF   
		   
		* Calculate the variance
		lnVariance = meterall.nMaster/lnSubsTot
		IF meterall.nvariance <> lnVariance
		   thisform.cmdatamanager.replace('Meterall','Nvariance',lnVariance)
		ENDIF   
		
		lnMasterInc = meterall.ntotalinc
		lnMasterMCF = meterall.nmaster
		
		STORE 0 TO lnTotalMCF, lnSubMCF, lnSubInc, ;
		           lnTotalTax1, lnTotalTax2, lnTotalTax3, lnTotalTax4, ;
		           lntotalDed1, lnTotalDed2, lnTotalDed3, lnTotalDed4, ;
		           lnTotalDed5
		
		SELECT metersub
		SCAN FOR cBatch == lcBatch
		  lnAllocation = ROUND(nSubMeter*lnVariance,0)
		  lnTotalInc   = ROUND(lnAllocation * lnPrice,2)
		  
		  * Calculate well's share of overall MCF so we can
		  * calculate the share of taxes and deductions
		  IF nSubMeter # 0
		      lnWellPct     = lnAllocation / meterall.nMaster
		   ELSE
		      lnWellPct = 0
		  ENDIF
		  
		  lnTax1       = ROUND(meterall.ntotaltax*lnWellPct,2)
		  lnTax2       = ROUND(meterall.ntotaltax2*lnWellPct,2)
		  lnTax3       = ROUND(meterall.ntotaltax3*lnWellPct,2)
		  lnTax4       = ROUND(meterall.ntotaltax4*lnWellPct,2)
		  
		  lnDeduct1    = ROUND(meterall.nDeduct1*lnWellPct,2)
		  lnDeduct2    = ROUND(meterall.nDeduct2*lnWellPct,2)
		  lnDeduct3    = ROUND(meterall.nDeduct3*lnWellPct,2)
		  lnDeduct4    = ROUND(meterall.nDeduct4*lnWellPct,2)
		  lnDeduct5    = ROUND(meterall.nDeduct5*lnWellPct,2)
		  
		  lnSubInc     = lnSubInc + lnTotalInc
		  lnSubMCF     = lnSubMCF + lnAllocation
		  lnTotalTax1  = lnTotalTax1 + lnTax1
		  lnTotalTax2  = lnTotalTax2 + lnTax2
		  lnTotalTax3  = lnTotalTax3 + lnTax3
		  lnTotalTax4  = lnTotalTax4 + lnTax4
		  lnTotalDed1  = lnTotalDed1 + lnDeduct1
		  lnTotalDed2  = lnTotalDed2 + lnDeduct2
		  lnTotalDed3  = lnTotalDed3 + lnDeduct3
		  lnTotalDed4  = lnTotalDed4 + lnDeduct4
		  lnTotalDed5  = lnTotalDed5 + lnDeduct5
		  
		  IF metersub.nAllocation <> lnAllocation  
		     REPL nAllocation WITH lnAllocation
		  ENDIF
		  IF metersub.nTotalSub <> lnTotalInc   
		     REPL nTotalSub   WITH lnTotalInc
		  ENDIF   
		  IF metersub.nTaxAmt <> lnTax1
		     REPLACE nTaxAmt WITH lnTax1
		  ENDIF 
		  IF metersub.nTaxAmt2 <> lnTax2
		     REPLACE nTaxAmt2 WITH lnTax2
		  ENDIF 
		  IF metersub.nTaxAmt3 <> lnTax3
		     REPLACE nTaxAmt3 WITH lnTax3
		  ENDIF 
		  IF metersub.nTaxAmt4 <> lnTax4
		     REPLACE nTaxAmt4 WITH lnTax4
		  ENDIF 
		  IF metersub.ndeduct1 <> lnDeduct1
		     REPLACE ndeduct1 WITH lnDeduct1
		  ENDIF 
		  IF metersub.ndeduct2 <> lnDeduct2
		     REPLACE ndeduct2 WITH lnDeduct2
		  ENDIF 
		  IF metersub.ndeduct3 <> lnDeduct3
		     REPLACE ndeduct3 WITH lnDeduct3
		  ENDIF 
		  IF metersub.ndeduct4 <> lnDeduct4
		     REPLACE ndeduct4 WITH lnDeduct4
		  ENDIF 
		  IF metersub.ndeduct5 <> lnDeduct5
		     REPLACE ndeduct5 WITH lnDeduct5
		  ENDIF 
		ENDSCAN
		
		* If the sub totals don't match the total dollars
		* adjust the 1st entry
		IF lnMasterInc <> lnSubInc
		   lnDiff = lnMasterInc - lnSubInc
		   SELECT metersub
		   LOCATE FOR cidmets == lcidmets AND nAllocation <> 0
		   IF FOUND()
		      REPL nTotalSub WITH nTotalSub + lnDiff
		   ENDIF   
		ENDIF   
		
		IF lnMasterMCF <> lnSubMCF
		   lnDiff = lnMasterMCF - lnSubMCF
		   SELECT metersub
		   LOCATE FOR cidmets == lcidmets  AND nAllocation <> 0
		   IF FOUND()
		      REPL nAllocation WITH nAllocation + lnDiff
		   ENDIF   
		ENDIF 
		
		IF meterall.nTotalTax <> lnTotalTax1
		   lnDiff = meterall.nTotalTax - lnTotalTax1
		   SELECT metersub
		   LOCATE FOR cidmets == lcidmets  AND nAllocation <> 0
		   IF FOUND()
		      REPL nTaxAmt WITH nTaxAmt + lnDiff
		   ENDIF   
		ENDIF 
		IF meterall.nTotalTax2 <> lnTotalTax2
		   lnDiff = meterall.nTotalTax2 - lnTotalTax2
		   SELECT metersub
		   LOCATE FOR cidmets == lcidmets  AND nAllocation <> 0
		   IF FOUND()
		      REPL nTaxAmt2 WITH nTaxAmt2 + lnDiff
		   ENDIF   
		ENDIF   
		IF meterall.nTotalTax3 <> lnTotalTax3
		   lnDiff = meterall.nTotalTax3 - lnTotalTax3
		   SELECT metersub
		   LOCATE FOR cidmets == lcidmets  AND nAllocation <> 0
		   IF FOUND()
		      REPL nTaxAmt3 WITH nTaxAmt3 + lnDiff
		   ENDIF   
		ENDIF   
		IF meterall.nTotalTax4 <> lnTotalTax4
		   lnDiff = meterall.nTotalTax4 - lnTotalTax4
		   SELECT metersub
		   LOCATE FOR cidmets == lcidmets  AND nAllocation <> 0
		   IF FOUND()
		      REPL nTaxAmt4 WITH nTaxAmt4 + lnDiff
		   ENDIF   
		ENDIF       
		
		IF meterall.nDeduct1 <> lnTotalDed1
		   lnDiff = meterall.nDeduct1 - lnTotalDed1
		   SELECT metersub
		   LOCATE FOR cidmets == lcidmets  AND nAllocation <> 0
		   IF FOUND()
		      REPL nDeduct1 WITH nDeduct1 + lnDiff
		   ENDIF   
		ENDIF  
		IF meterall.nDeduct2 <> lnTotalDed2
		   lnDiff = meterall.nDeduct2 - lnTotalDed2
		   SELECT metersub
		   LOCATE FOR cidmets == lcidmets  AND nAllocation <> 0
		   IF FOUND()
		      REPL nDeduct2 WITH nDeduct2 + lnDiff
		   ENDIF   
		ENDIF   
		IF meterall.nDeduct3 <> lnTotalDed3
		   lnDiff = meterall.nDeduct3 - lnTotalDed3
		   SELECT metersub
		   LOCATE FOR cidmets == lcidmets  AND nAllocation <> 0
		   IF FOUND()
		      REPL nDeduct3 WITH nDeduct3 + lnDiff
		   ENDIF   
		ENDIF   
		IF meterall.nDeduct4 <> lnTotalDed4
		   lnDiff = meterall.nDeduct4 - lnTotalDed4
		   SELECT metersub
		   LOCATE FOR cidmets == lcidmets  AND nAllocation <> 0
		   IF FOUND()
		      REPL nDeduct4 WITH nDeduct4 + lnDiff
		   ENDIF   
		ENDIF   
		IF meterall.nDeduct5 <> lnTotalDed5
		   lnDiff = meterall.nDeduct5 - lnTotalDed5
		   SELECT metersub
		   LOCATE FOR cidmets == lcidmets  AND nAllocation <> 0
		   IF FOUND()
		      REPL nDeduct5 WITH nDeduct5 + lnDiff
		   ENDIF   
		ENDIF    
		
		SELECT metersub
		LOCATE FOR cidmets == lcidmets
		
		SELECT (lcAlias)
		
		       
		  
		  
		  
		
		
		
		   
		
		
		
	ENDPROC

	PROCEDURE allocevenly
		LPARA tcBatch
		LOCAL lnMaster, lnTotalInc, lnPrice, lcBatch, lnCount
		
		lcAlias = ALIAS()
		
		SELECT meterall
		LOCATE FOR cBatch == tcBatch
		IF NOT FOUND()
		   RETURN
		ENDIF   
		lnMaster   = meterall.nmaster
		lnTotalInc = meterall.ntotalinc
		lcBatch    = meterall.cbatch
		lnPrice    = meterall.ngasprice
		
		SELECT metersub
		COUNT FOR cbatch == lcBatch TO lnCount
		
		lnAlloc = ROUND(lnMaster/lnCount,2)
		lnDollars = ROUND(lnTotalInc/lnCount,2)
		
		lnTotal = lnTotalInc - (lnDollars * lnCount)
		lnSubs  = lnMaster   - (lnAlloc * lnCount)
		
		SELECT metersub
		SCAN FOR cBatch == lcBatch
		   REPL nallocation WITH lnAlloc, ;
		        nSubMeter   WITH lnAlloc, ;
		        nTotalSub   WITH lnDollars
		ENDSCAN        
		
		IF lnSubs <> 0
		   SELECT metersub
		   SCAN
		   REPL nAllocation WITH nAllocation + lnSubs, ;
		        nSubMeter   WITH nSubMeter + lnSubs
		   EXIT
		   ENDSCAN     
		ENDIF
		
		IF lnTotal <> 0
		   SELECT metersub
		   SCAN
		      REPL nTotalSub WITH NtotalSub + lnTotal
		   EXIT
		   ENDSCAN
		ENDIF
		
		SELECT (lcAlias)
		
		
		
	ENDPROC

	PROCEDURE buildmeter
		LPARA tcMeterID, tcyear, tcperiod
		LOCAL lnCount, lnDaysOn, lcBegRange, lcEndRange
		
		lcAlias = ALIAS()
		
		ldImpDate = THISFORM.txtdrctDate.VALUE
		
		THISFORM.cmdatamanager.new('Meterall')
		SELE meterall
		REPL cmeterid WITH tcMeterID
		REPL CREFID WITH THISFORM.TXTCCHECKNO.VALUE
		
		* Store the Meterall cbatch in importbatch
		SELECT importbatch
		REPLACE mBatches WITH mbatches + meterall.cbatch + CHR(13)
		lcRcptBatch = csrcthdr.cbatch
		
		*
		*  Check to see if we already have sub records for the given meter
		*
		SELECT meterall
		m.cbatch   = cbatch
		m.cmeterid = cmeterid
		lcBegRange = cBegrange
		lcEndRange = cEndRange
		lnDaysOn   = nDaysOn
		m.crevkey = THISFORM.cboPurch.VALUE
		m.dimpdate = ldImpDate
		
		SELECT metersub
		DELE FOR cbatch == m.cbatch
		
		SELECT cwellid, cwellname ;
		   FROM wells ;
		   WHERE cmeterid  == m.cmeterid ;
		   OR cMeterID2 == m.cmeterid ;
		   OR cMeterID3 == m.cmeterid ;
		   INTO CURSOR Tempwell ;
		   ORDER BY cwellid
		
		IF _TALLY > 0
		   SELECT Tempwell
		   SCAN
		      SCATTER MEMVAR
		      m.cidmets = THISFORM.oregistry.incrementcounter('%Shared.Counters.Meter Sub')
		      INSERT INTO metersub FROM MEMVAR
		   ENDSCAN
		ENDIF
		
		lnsubmeter = 0
		
		SELECT metersub
		SCAN FOR cBatch == m.cBatch
		   lcwellid = cwellid
		   SELE meterdata
		   SCAN FOR cwellid == lcwellid and cyear = tcyear and cperiod = tcperiod AND EMPTY(cmasterid)
		      lnsubmeter = lnsubmeter + namount
		   ENDSCAN
		   thisform.nTotalMCF = thisform.nTotalMCF + lnSubMeter
		   SELE metersub
		   REPL nsubmeter WITH lnsubmeter, ;
		        nDaysOn   WITH lnDaysOn, ;
		        cBegRange WITH lcBegRange, ;
		        cEndRange WITH lcEndRange
		   lnsubmeter = 0
		ENDSCAN
		
		SELECT (lcAlias)
		
		
		
		
	ENDPROC

	PROCEDURE calcallocation
		LPARA tcBatch
		LOCAL llUnalloc, lcBatch, ldIncDate, lcRevKey, lnDaysOn, lcBegRange, lcEndRange, lnPrice
		LOCAL lcYear, lcPeriod, lcGroup, lcRefid, lnDaysOn, lcBatchNo
		
		lcAlias = ALIAS()
		
		lcBatchNo = csrcthdr.cbatch
		
		SELE glopt
		GO TOP
		lcRevClear = cRevClear
		lcExpClear = cExpClear
		
		*
		*  Create distproc so we can use netrev
		*
		SELECT wells
		SET ORDER TO cwellid
		GO TOP
		lcWellID1 = cwellid
		GO BOTT
		lcWellID2 = cwellid
		
		*
		*  Allocates the calculated MCF and $ to the income or incsusp table
		*
		SELE meterall
		LOCATE FOR cbatch == tcBatch
		lcBatch    = meterall.cbatch
		lcRevKey   = meterall.cRevKey
		ldIncDate  = meterall.dIncDate
		lnPrice    = meterall.nGasPrice
		lcYear     = meterall.cYear
		lcPeriod   = meterall.cPeriod
		lcRefid    = meterall.cRefID
		lcBegRange = meterall.cbegrange
		lcEndRange = meterall.cendrange
		lnDaysOn   = THISFORM.calcdays(m.cbegrange,m.cendrange)
		SELE meterall
		REPLACE ndayson WITH lnDaysOn
		lcMeterID   = cMeterID
		llUnalloc = .F.
		
		IF EMPTY(lcYear)
		   llUnalloc = .T.
		ELSE
		   llUnalloc = .F.
		ENDIF
		*
		*  Check to see if this revenue has already been closed
		*
		SELE income
		LOCATE FOR cbatch = lcBatch AND nRunNo <> 0
		IF FOUND()
		   THISFORM.oMessage.warning('These revenue entries have been allocated and closed. ' + ;
		      'No changes are possible.')
		   RETURN .F.
		ENDIF
		
		*
		*  Remove the entries from previous allocations
		*
		SELECT incsusp
		SCAN FOR cbatch == lcBatch
		   DELETE NEXT 1
		ENDSCAN
		
		SELECT income
		SCAN FOR cbatch == lcBatch
		   DELETE NEXT 1
		ENDSCAN
		
		*
		*  Scan through the sub-meters and allocate the mcf and revenue
		*
		SELECT metersub
		SCAN FOR cbatch == lcBatch AND nSubMeter <> 0
		   SCATTER MEMVAR
		   m.lAllocated = .F.
		   m.dRevDate   = ldIncDate
		   m.dPostDate  = ldIncDate
		   m.cRevKey    = lcRevKey
		   m.nUnits     = m.nAllocation
		   m.nPrice     = lnPrice
		   m.nTotalInc  = m.nTotalSub
		   m.cSource    = 'MCF'
		   m.ndayson    = lnDaysOn
		   m.cYear      = lcYear
		   m.cPeriod    = lcPeriod
		   m.cbatch     = lcBatch
		   m.cRefID     = lcRefid
		   m.lCSTran    = .F.
		   m.cOwnerID   = ''
		   m.lClosed    = .F.
		   m.cbegrange  = lcBegRange
		   m.cendrange  = lcEndRange
		   REPL metersub.cbegrange WITH lcBegRange, ;
		      metersub.cendrange WITH lcEndRange, ;
		      metersub.ndayson   WITH lnDaysOn
		
		   THISFORM.cmdatamanager.new('Csrctdet')
		
		   SELECT wells
		   IF SEEK(m.cwellid)
		      m.cwellname = cwellname
		   ELSE
		      m.cwellname = 'Unknown'
		   ENDIF 
		   SELE csrctdet
		   REPL namount     WITH m.nTotalInc, ;
		      cwellid     WITH m.cwellid, ;
		      nUnits      WITH m.nUnits, ;
		      nPrice      WITH m.nPrice, ;
		      cprodperiod WITH lcPeriod, ;
		      cprodyear   WITH lcYear, ;
		      cacctno     WITH lcRevClear, ;
		      cbegrange   WITH m.cbegrange, ;
		      cendrange   WITH m.cendrange, ;
		      ndayson     WITH lnDaysOn, ;
		      cdesc       WITH m.cwellname, ;
		      ctype       WITH 'MCF', ;
		      lwellrcpt   WITH .T., ;
		      cOwnerID    WITH '', ;
		      ndayson     WITH lnDaysOn
		
		   * Insert into the income table
		   m.cidinco = GetNextPK('Income')
		   m.cYear      = lcYear
		   m.cPeriod    = lcPeriod
		   m.dAcctDate  = ldIncDate
		   SELE meterdata
		   SCAN FOR cwellid = m.cwellid
		      REPL cbatch  WITH lcBatch, ;
		         cYear   WITH m.cYear, ;
		         cPeriod WITH m.cPeriod, ;
		         cmasterid WITH meterall.cMeterID
		   ENDSCAN
		   m.cRefID    = meterall.cRefID
		   m.lCSTran   = .T.
		   m.cacctno   = lcRevClear
		   m.cbatch    = lcBatchNo
		   m.nTotalInc = thisform.oDist.NetRev(m.cwellid, m.nTotalInc, 'G', .T.)
		   m.nUnits = thisform.oDist.NetRev(m.cwellid, m.nUnits, 'G', .T.)
		   INSERT INTO income FROM MEMVAR
		
		
		   IF metersub.nTaxAmt # 0
		      THISFORM.cmdatamanager.new('Csrctdet')
		
		      SELE csrctdet
		      REPL namount   WITH metersub.nTaxAmt * -1, ;
		         cwellid     WITH m.cwellid, ;
		         nUnits      WITH 0, ;
		         nPrice      WITH 0, ;
		         cprodperiod WITH lcPeriod, ;
		         cprodyear   WITH lcYear, ;
		         cacctno     WITH lcRevClear, ;
		         cbegrange   WITH m.cbegrange, ;
		         cendrange   WITH m.cendrange, ;
		         ndayson     WITH lnDaysOn, ;
		         cdesc       WITH m.cWellName, ;
		         ctype       WITH 'GTAX1', ;
		         lwellrcpt   WITH .T., ;
		         cOwnerID    WITH '', ;
		         ndayson     WITH lnDaysOn
		
		      * Insert into the income table
		      m.cidinco = GetNextPK('Income')
		      m.cYear      = lcYear
		      m.cPeriod    = lcPeriod
		      m.dAcctDate  = ldIncDate
		      m.cSource    = 'GTAX1'
		      m.cRefID    = meterall.cRefID
		      m.lCSTran   = .T.
		      m.cacctno   = lcRevClear
		      m.cbatch    = lcBatchNo
		      m.nTotalInc = thisform.oDist.NetRev(m.cwellid, metersub.nTaxAmt*-1, 'G', .T.)
		      m.nUnits = 0
		      INSERT INTO income FROM MEMVAR
		   ENDIF
		
		   IF metersub.nTaxAmt2 # 0
		      THISFORM.cmdatamanager.new('Csrctdet')
		
		      SELE csrctdet
		      REPL namount   WITH metersub.nTaxAmt2 * -1, ;
		         cwellid     WITH m.cwellid, ;
		         nUnits      WITH 0, ;
		         nPrice      WITH 0, ;
		         cprodperiod WITH lcPeriod, ;
		         cprodyear   WITH lcYear, ;
		         cacctno     WITH lcRevClear, ;
		         cbegrange   WITH m.cbegrange, ;
		         cendrange   WITH m.cendrange, ;
		         ndayson     WITH lnDaysOn, ;
		         cdesc       WITH m.cWellName, ;
		         ctype       WITH 'GTAX2', ;
		         lwellrcpt   WITH .T., ;
		         cOwnerID    WITH '', ;
		         ndayson     WITH lnDaysOn
		         
		     * Insert into the income table
		      m.cidinco = GetNextPK('Income')
		      m.cYear      = lcYear
		      m.cPeriod    = lcPeriod
		      m.dAcctDate  = ldIncDate
		      m.cSource    = 'GTAX2'
		      m.cRefID    = meterall.cRefID
		      m.lCSTran   = .T.
		      m.cacctno   = lcRevClear
		      m.cbatch    = lcBatchNo
		      m.nTotalInc = thisform.oDist.NetRev(m.cwellid, metersub.nTaxAmt2*-1, 'G', .T.)
		      m.nUnits = 0
		      INSERT INTO income FROM MEMVAR    
		   ENDIF
		
		   IF metersub.nTaxAmt3 # 0
		      THISFORM.cmdatamanager.new('Csrctdet')
		
		      SELE csrctdet
		      REPL namount   WITH metersub.nTaxAmt3 * -1, ;
		         cwellid     WITH m.cwellid, ;
		         nUnits      WITH 0, ;
		         nPrice      WITH 0, ;
		         cprodperiod WITH lcPeriod, ;
		         cprodyear   WITH lcYear, ;
		         cacctno     WITH lcRevClear, ;
		         cbegrange   WITH m.cbegrange, ;
		         cendrange   WITH m.cendrange, ;
		         ndayson     WITH lnDaysOn, ;
		         cdesc       WITH m.cWellName, ;
		         ctype       WITH 'GTAX3', ;
		         lwellrcpt   WITH .T., ;
		         cOwnerID    WITH '', ;
		         ndayson     WITH lnDaysOn
		      
		      * Insert into the income table
		      m.cidinco = GetNextPK('Income')
		      m.cYear      = lcYear
		      m.cPeriod    = lcPeriod
		      m.dAcctDate  = ldIncDate
		      m.cSource    = 'GTAX3'
		      m.cRefID    = meterall.cRefID
		      m.lCSTran   = .T.
		      m.cacctno   = lcRevClear
		      m.cbatch    = lcBatchNo
		      m.nTotalInc = thisform.oDist.NetRev(m.cwellid, metersub.nTaxAmt3*-1, 'G', .T.)
		      m.nUnits = 0
		      INSERT INTO income FROM MEMVAR   
		   ENDIF
		
		   IF metersub.nTaxAmt4 # 0
		      THISFORM.cmdatamanager.new('Csrctdet')
		
		      SELE csrctdet
		      REPL namount   WITH metersub.nTaxAmt4 * -1, ;
		         cwellid     WITH m.cwellid, ;
		         nUnits      WITH 0, ;
		         nPrice      WITH 0, ;
		         cprodperiod WITH lcPeriod, ;
		         cprodyear   WITH lcYear, ;
		         cacctno     WITH lcRevClear, ;
		         cbegrange   WITH m.cbegrange, ;
		         cendrange   WITH m.cendrange, ;
		         ndayson     WITH lnDaysOn, ;
		         cdesc       WITH m.cWellName, ;
		         ctype       WITH 'GTAX4', ;
		         lwellrcpt   WITH .T., ;
		         cOwnerID    WITH '', ;
		         ndayson     WITH lnDaysOn
		         
		      * Insert into the income table
		      m.cidinco = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Income')
		      SET DELETED OFF
		      SELECT income1
		      SET ORDER TO cidinco
		      DO WHILE SEEK(m.cidinco)
		         m.cidinco = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Income')
		      ENDDO
		      SET DELETED ON
		      m.cYear      = lcYear
		      m.cPeriod    = lcPeriod
		      m.dAcctDate  = ldIncDate
		      m.cSource    = 'GTAX4'
		      m.cRefID    = meterall.cRefID
		      m.lCSTran   = .T.
		      m.cacctno   = lcRevClear
		      m.cbatch    = lcBatchNo
		      m.nTotalInc = thisform.oDist.NetRev(m.cwellid, metersub.nTaxAmt4*-1, 'G', .T.)
		      m.nUnits = 0
		      INSERT INTO income FROM MEMVAR   
		   ENDIF
		
		   IF metersub.nDeduct1 # 0
		      THISFORM.cmdatamanager.new('Csrctdet')
		
		      SELE csrctdet
		      REPL namount   WITH metersub.nDeduct1 * -1, ;
		         cwellid     WITH m.cwellid, ;
		         nUnits      WITH 0, ;
		         nPrice      WITH 0, ;
		         cprodperiod WITH lcPeriod, ;
		         cprodyear   WITH lcYear, ;
		         cacctno     WITH lcExpClear, ;
		         cbegrange   WITH m.cbegrange, ;
		         cendrange   WITH m.cendrange, ;
		         ndayson     WITH lnDaysOn, ;
		         cdesc       WITH m.cWellName, ;
		         ctype       WITH meterall.cDedCode1, ;
		         lwellrcpt   WITH .T., ;
		         cOwnerID    WITH '', ;
		         ndayson     WITH lnDaysOn
		         
		      * Insert into the Expense table
		      m.cidexpe = GetNextPK('Expense')
		      m.cYear      = lcYear
		      m.cPeriod    = lcPeriod
		      m.dAcctDate  = ldIncDate
		      m.cCatCode   = meterall.cDedCode1
		      m.cRefID    = meterall.cRefID
		      m.lCSTran   = .T.
		      m.cacctno   = lcExpClear
		      m.cbatch    = lcBatchNo
		      swselect('expcat')
		      LOCATE FOR ccatcode = meterall.cDedCode1
		      IF FOUND()
		         m.cExpClass = cexpClass
		         m.nAmount = swNetExp(metersub.nDeduct1*-1, m.cwellid, .F., m.cExpClass, 'B' )
		         m.nUnits = 0
		         INSERT INTO expense FROM MEMVAR   
		      ENDIF    
		   ENDIF
		
		   IF metersub.nDeduct2 # 0
		      THISFORM.cmdatamanager.new('Csrctdet')
		
		      SELE csrctdet
		      REPL namount   WITH metersub.nDeduct2 * -1, ;
		         cwellid     WITH m.cwellid, ;
		         nUnits      WITH 0, ;
		         nPrice      WITH 0, ;
		         cprodperiod WITH lcPeriod, ;
		         cprodyear   WITH lcYear, ;
		         cacctno     WITH lcExpClear, ;
		         cbegrange   WITH m.cbegrange, ;
		         cendrange   WITH m.cendrange, ;
		         ndayson     WITH lnDaysOn, ;
		         cdesc       WITH m.cWellName, ;
		         ctype       WITH meterall.cDedCode2, ;
		         lwellrcpt   WITH .T., ;
		         cOwnerID    WITH '', ;
		         ndayson     WITH lnDaysOn
		         
		      * Insert into the Expense table
		      m.cidexpe = GetNextPK('Expense')
		      m.cYear      = lcYear
		      m.cPeriod    = lcPeriod
		      m.dAcctDate  = ldIncDate
		      m.cCatCode   = meterall.cDedCode2
		      m.cRefID    = meterall.cRefID
		      m.lCSTran   = .T.
		      m.cacctno   = lcExpClear
		      m.cbatch    = lcBatchNo
		      swselect('expcat')
		      LOCATE FOR ccatcode = meterall.cDedCode2
		      IF FOUND()
		         m.cExpClass = cexpClass
		         m.nAmount = swNetExp(metersub.nDeduct2*-1, m.cwellid, .F., m.cExpClass, 'B' )
		         m.nUnits = 0
		         INSERT INTO expense FROM MEMVAR   
		      ENDIF       
		   ENDIF
		
		   IF metersub.nDeduct3 # 0
		      THISFORM.cmdatamanager.new('Csrctdet')
		
		      SELE csrctdet
		      REPL namount   WITH metersub.nDeduct3 * -1, ;
		         cwellid     WITH m.cwellid, ;
		         nUnits      WITH 0, ;
		         nPrice      WITH 0, ;
		         cprodperiod WITH lcPeriod, ;
		         cprodyear   WITH lcYear, ;
		         cacctno     WITH lcExpClear, ;
		         cbegrange   WITH m.cbegrange, ;
		         cendrange   WITH m.cendrange, ;
		         ndayson     WITH lnDaysOn, ;
		         cdesc       WITH m.cWellName, ;
		         ctype       WITH meterall.cDedCode3, ;
		         lwellrcpt   WITH .T., ;
		         cOwnerID    WITH '', ;
		         ndayson     WITH lnDaysOn
		         
		      * Insert into the Expense table
		      m.cidexpe = GetNextPK('Expense')
		      m.cYear      = lcYear
		      m.cPeriod    = lcPeriod
		      m.dAcctDate  = ldIncDate
		      m.cCatCode   = meterall.cDedCode3
		      m.cRefID    = meterall.cRefID
		      m.lCSTran   = .T.
		      m.cacctno   = lcExpClear
		      m.cbatch    = lcBatchNo
		      swselect('expcat')
		      LOCATE FOR ccatcode = meterall.cDedCode3
		      IF FOUND()
		         m.cExpClass = cexpClass
		         m.nAmount = swNetExp(metersub.nDeduct3*-1, m.cwellid, .F., m.cExpClass, 'B' )
		         m.nUnits = 0
		         INSERT INTO expense FROM MEMVAR   
		      ENDIF       
		   ENDIF
		
		   IF metersub.nDeduct4 # 0
		      THISFORM.cmdatamanager.new('Csrctdet')
		
		      SELE csrctdet
		      REPL namount   WITH metersub.nDeduct4 * -1, ;
		         cwellid     WITH m.cwellid, ;
		         nUnits      WITH 0, ;
		         nPrice      WITH 0, ;
		         cprodperiod WITH lcPeriod, ;
		         cprodyear   WITH lcYear, ;
		         cacctno     WITH lcExpClear, ;
		         cbegrange   WITH m.cbegrange, ;
		         cendrange   WITH m.cendrange, ;
		         ndayson     WITH lnDaysOn, ;
		         cdesc       WITH m.cWellName, ;
		         ctype       WITH meterall.cDedCode4, ;
		         lwellrcpt   WITH .T., ;
		         cOwnerID    WITH '', ;
		         ndayson     WITH lnDaysOn
		         
		      * Insert into the Expense table
		      m.cidexpe = GetNextPK('Expense')
		      m.cYear      = lcYear
		      m.cPeriod    = lcPeriod
		      m.dAcctDate  = ldIncDate
		      m.cCatCode   = meterall.cDedCode4
		      m.cRefID    = meterall.cRefID
		      m.lCSTran   = .T.
		      m.cacctno   = lcExpClear
		      m.cbatch    = lcBatchNo
		      swselect('expcat')
		      LOCATE FOR ccatcode = meterall.cDedCode4
		      IF FOUND()
		         m.cExpClass = cexpClass
		         m.nAmount = swNetExp(metersub.nDeduct4*-1, m.cwellid, .F., m.cExpClass, 'B' )
		         m.nUnits = 0
		         INSERT INTO expense FROM MEMVAR   
		      ENDIF       
		   ENDIF
		
		   IF metersub.nDeduct5 # 0
		      THISFORM.cmdatamanager.new('Csrctdet')
		
		      SELE csrctdet
		      REPL namount   WITH metersub.nDeduct5 * -1, ;
		         cwellid     WITH m.cwellid, ;
		         nUnits      WITH 0, ;
		         nPrice      WITH 0, ;
		         cprodperiod WITH lcPeriod, ;
		         cprodyear   WITH lcYear, ;
		         cacctno     WITH lcExpClear, ;
		         cbegrange   WITH m.cbegrange, ;
		         cendrange   WITH m.cendrange, ;
		         ndayson     WITH lnDaysOn, ;
		         cdesc       WITH m.cWellName, ;
		         ctype       WITH meterall.cDedCode5, ;
		         lwellrcpt   WITH .T., ;
		         cOwnerID    WITH '', ;
		         ndayson     WITH lnDaysOn
		         
		      * Insert into the Expense table
		      m.cidexpe = GetNextPK('Expense')
		      m.cYear      = lcYear
		      m.cPeriod    = lcPeriod
		      m.dAcctDate  = ldIncDate
		      m.cCatCode   = meterall.cDedCode5
		      m.cRefID    = meterall.cRefID
		      m.lCSTran   = .T.
		      m.cacctno   = lcExpClear
		      m.cbatch    = lcBatchNo
		      swselect('expcat')
		      LOCATE FOR ccatcode = meterall.cDedCode5
		      IF FOUND()
		         m.cExpClass = cexpClass
		         m.nAmount = swNetExp(metersub.nDeduct5*-1, m.cwellid, .F., m.cExpClass, 'B' )
		         m.nUnits = 0
		         INSERT INTO expense FROM MEMVAR   
		      ENDIF       
		   ENDIF
		   
		ENDSCAN
		
		SELECT meterall
		
		IF llUnalloc  &&  If not allocated, warn them
		   THISFORM.oMessage.DISPLAY('Since a year and period were not entered, this revenue has been sent to the allocation file.')
		ENDIF
		THISFORM.setnextcontrol(THISFORM.cboAcct)
		
		SELECT (lcAlias)
		
		RETURN .T.
		
	ENDPROC

	PROCEDURE calcdays		&& Calculates the dayson from the period ranges entered.
		lpara lcrange1, lcrange2
		LOCAL ldDate1, ldDate2, lnDays, lcYear, lcRange1, lcRange2
		
		lcAlias = ALIAS()
		
		*
		*  Get the current year to use to build the date.
		*
		lcYear   = STR(YEAR(DATE()),4)
		
		*
		*  Check to see if we're supposed to calculate the dayson
		*
		SELECT options
		GO TOP
		glCalcDays = .t.
		
		SELECT (lcAlias)
		
		*
		*  Calculate the number of days between the ranges
		*
		IF glCalcDays
		   IF LEFT(lcRange1,2) > LEFT(lcRange2,2)
		      lcYear1 = STR(VAL(lcYear)+1,4)
		   ELSE
		      IF LEFT(lcRange1,2) = LEFT(lcRange2,2)
		         IF RIGHT(lcRange1,2) > RIGHT(lcRange2,2)
		            lcYear1 = STR(VAL(lcYear)+1,4)
		         ELSE   
		            lcYear1 = lcYear
		         ENDIF
		      ELSE      
		         lcYear1 = lcYear
		      ENDIF   
		   ENDIF      
		   ldDate1 = CTOD(lcRange1+'/'+lcYear)
		   ldDate2 = CTOD(lcRange2+'/'+lcYear1)
		   lnDays  = ldDate2 - ldDate1
		   RETURN (lnDays)
		ELSE
		   RETURN (0)
		ENDIF      
		
	ENDPROC

	PROCEDURE calcext		&& Calculates the detail extension total
	ENDPROC

	PROCEDURE calctot		&& Calculates the Invoice Totals
		*
		*  Calculates the invoice totals
		*
		LOCAL lnSelect, lnRecno, lnTotal, lcBatch, lcFilter
		
		lcAlias = ALIAS()
		
		lcBatch = CSRCTHDR.cbatch
		
		lnSelect = SELECT()
		SELECT CSRCTDET
		lnRecNo = RECNO()
		lcFilter = FILTER()
		SET FILTER TO
		lnTotal = 0
		SCAN FOR cBatch == lcBatch
		   lnTotal = lnTotal + nAmount
		ENDSCAN   
		
		SELECT csrctdet
		SET FILTER TO &lcFilter
		IF lnRecNo <= RECC()
		   GOTO lnRecNo
		ELSE
		   GO TOP    
		ENDIF   
		
		SELECT (lnSelect)
		
		IF csrcthdr.nCashAmt <> lnTotal
		   THIS.cmdatamanager.REPLACE('CSRCThdr', 'nCashAmt', lnTotal)
		   THISFORM.txtnCashamt.REFRESH()
		ENDIF
		
		SELECT (lcAlias)
		
		
		
		
	ENDPROC

	PROCEDURE chkforsubmeter
		LPARA tcBatch
		LOCAL lnSubMeter
		
		lcAlias = ALIAS()
		
		lnSubMeter = 0
		
		*  Check for submeter readings with this master
		sele metersub
		scan for cbatch == tcbatch
		   lnSubMeter = lnSubMeter + nSubMeter
		endscan
		
		SELECT (lcAlias)
		
		* if no submeter readings found, allocate the master evenly
		if lnSubMeter = 0
		*   thisform.allocevenly(tcBatch)
		   return .f.
		else
		   return .t.   
		endif      
	ENDPROC

	PROCEDURE daysonsave		&& Saves the number of days the well was on.
		LPARA tcWellID, tcYear, tcPeriod, tnDaysOn
		
		lcAlias = ALIAS()
		
		SELECT welldays
		SET ORDER TO wellprd
		IF NOT SEEK(tcWellId+tcYear+tcPeriod)
		   m.ciddays     = thisform.oregistry.incrementcounter('%Shared.Counters.WellDays')
		   m.cwellid     = tcwellid
		   m.cprodyear   = tcyear
		   m.cprodperiod = tcperiod
		   m.ndayson     = tndayson
		   INSERT INTO welldays FROM MEMVAR
		ELSE           
		   REPLACE ndayson     WITH tnDaysOn
		ENDIF
		
		SELECT (lcAlias)
		
	ENDPROC

	PROCEDURE Destroy
		thisform.odist = .Null.
		
		DODEFAULT()
	ENDPROC

	PROCEDURE dmincome		&& Either places the income entries in the INCSUSP or INCOME tables depending on whether the production year and period were specified.
		LOCAL lcBatch, m.cOwnerID
		
		lcAlias = ALIAS()
		
		*
		*  Adds the income entries to the disbursement manager INCSUSP or
		*  INCOME tables depending on whether the production year and 
		*  period are specified.
		*
		
		SELECT wells
		SET ORDER TO cwellid
		GO TOP
		lcWellID1 = cwellid
		GO BOTT
		lcWellID2 = cwellid
		
		lcBatch    = csrcthdr.cBatch
		m.lNetRev  = .T.
		m.cCheckNo = csrcthdr.cCheckNo
		
		SELECT options
		GO TOP
		llNetUnits = .T.
		
		SELECT incsusp
		SCAN FOR cBatch = lcBatch
		   DELETE NEXT 1
		ENDSCAN
		
		SELECT income
		SCAN FOR cBatch = lcBatch
		   DELETE NEXT 1
		ENDSCAN 
		
		SELECT csrctdet
		SCAN FOR cBatch == lcBatch
		   SCATTER MEMVAR
		   m.dRevDate       = csrcthdr.ddate
		   IF EMPTY(m.cProdYear) OR EMPTY(m.cProdPeriod)
		      m.cYear       = thisform.glmaint.getperiod(m.dRevDate,.T.)
		      m.cPeriod     = thisform.glmaint.getperiod(m.dRevDate,.F.)
		   ELSE
		      m.cYear   = m.cProdYear
		      m.cPeriod = m.cProdPeriod
		   ENDIF      
		   m.crevkey     = thisform.cbopurch.value
		
		   *  If the well is not valid, don't try to create income records
		   SELECT wells
		   SET ORDER TO cWellID
		   IF NOT SEEK(m.cWellID)
		      LOOP
		   ENDIF   
		
		   DO CASE
		      CASE m.cType = 'BBL'
		         m.csource = 'BBL'
		         IF NOT llNetUnits
		            m.nunits = thisform.oDist.NetRev(m.cWellID, m.nUnits, 'O', .T.)
		         ENDIF      
		         IF m.lNetRev
		            m.ntotalinc = thisform.oDist.NetRev(m.cWellID, m.nAmount, 'O', .T.)
		         ELSE
		            m.ntotalinc = m.nAmount   
		         ENDIF   
		         
		      CASE m.cType = 'MCF'   
		         m.csource = 'MCF'
		         IF NOT llNetUnits
		            m.nunits = thisform.oDist.NetRev(m.cWellID, m.nUnits, 'G', .T.)
		         ENDIF      
		         IF m.lNetRev
		            m.ntotalinc = thisform.oDist.NetRev(m.cWellID, m.nAmount, 'G', .T.)
		         ELSE
		            m.ntotalinc = m.nAmount   
		         ENDIF   
		         
		      CASE m.cType = 'OTH'   
		         m.csource = 'OTH'
		         m.ntotalinc = m.nAmount   
		         
		      CASE m.cType = 'OTAX1' OR m.cType = 'OTAX2' OR m.cType = 'OTAX3' OR m.cType = 'OTAX4'   
		         m.cSource = m.cType
		         IF NOT llNetUnits
		            m.nunits = thisform.oDist.NetRev(m.cWellID, m.nUnits, 'O', .T.)   
		         ENDIF   
		         IF m.lNetRev
		            m.ntotalinc = thisform.oDist.NetRev(m.cWellID, m.nAmount, 'O', .T.)
		         ELSE
		            m.ntotalinc = m.nAmount   
		         ENDIF   
		         
		      CASE m.cType = 'GTAX1' OR m.cType = 'GTAX2' OR m.cType = 'GTAX3' OR m.cType = 'GTAX4'
		         m.cSource = m.cType
		         IF NOT llNetUnits
		            m.nunits = thisform.oDist.NetRev(m.cWellID, m.nUnits, 'G', .T.)   
		         ENDIF   
		         IF m.lNetRev
		            m.ntotalinc = thisform.oDist.NetRev(m.cWellID, m.nAmount, 'G', .T.)
		         ELSE
		            m.ntotalinc = m.nAmount   
		         ENDIF   
		         
		      CASE m.cType = 'EXO'   
		         m.cSource = 'EXO'
		         IF m.lNetRev
		            m.ntotalinc = thisform.oDist.NetRev(m.cWellID, m.nAmount, 'O', .T.)
		         ELSE
		            m.ntotalinc = m.nAmount   
		         ENDIF   
		         
		      CASE m.cType = 'EXG'   
		         m.cSource = 'EXG'
		         IF m.lNetRev
		            m.ntotalinc = thisform.oDist.NetRev(m.cWellID, m.nAmount, 'G', .T.)
		         ELSE
		            m.ntotalinc = m.nAmount   
		         ENDIF   
		         
		      OTHERWISE   
		         m.cSource     = m.cType
		         m.ntotalinc   = m.nAmount
		   ENDCASE      
		   
		   m.crefid     = m.cCheckNo
		   m.lCSTran    = .T.
		   m.cBatch     = lcBatch
		   m.dPostDate  = m.dRevDate
		   m.cMemo      = ''
		   
		   IF NOT EMPTY(m.cOwnerID)
		      m.lOneMan = .T.
		   ELSE
		      m.lOneMan = .f.   
		   ENDIF   
		
		   IF NOT EMPTY(m.cProdYear) AND NOT EMPTY(m.cProdPeriod)
		      m.cidinco = thisform.oRegistry.IncrementCounter('%Shared.Counters.Income')
		      thisform.daysonsave(m.cwellid, m.cyear, m.cperiod, m.ndayson)
		      INSERT INTO income FROM MEMVAR
		   ELSE   
		      m.cidincs    = thisform.oRegistry.IncrementCounter('%Shared.Counters.Income')
		      m.lAllocated = .F.
		      INSERT INTO incsusp FROM MEMVAR
		   ENDIF   
		ENDSCAN
		
		SELECT (lcAlias)
		
		
	ENDPROC

	PROCEDURE editdetail1		&& Edit a detail line
	ENDPROC

	PROCEDURE editdetail2
	ENDPROC

	PROCEDURE getaddr
	ENDPROC

	PROCEDURE getprice		&& Gets the price for the item based upon the price code passed.
	ENDPROC

	PROCEDURE importexcel
		LOCAL m.nunits, m.nprice, m.drecdate, m.ntotalinc
		LOCAL ldimpdate, lcacctno, lcRcptBatch, lnx, oGasMeter
		PRIVATE m.iRow
		
		lcAlias = ALIAS()
		
		llReturn = .T.
		
		oGasMeter = CREATEOBJECT('meterrecon')
		
		ldimpdate  = THISFORM.txtdRctDate.VALUE
		ldPostDate = THISFORM.txtdpostDate.VALUE
		lcacctno   = THISFORM.cboAcct.VALUE
		lcRevKey   = THISFORM.cboPurch.VALUE
		llHeader   = THISFORM.chkHeaderRow.VALUE
		lcCheckNo  = THISFORM.txtccheckno.VALUE
		
		lcFile = GETFILE('XLS,XLSX', 'Choose Spreadsheet To Import:', 'Choose', 0, 'Where is Import Spreadsheet?')
		
		IF EMPTY(lcFile)
		   RETURN
		ENDIF
		
		llReturn = oGasMeter.ImportPayMeters(lcFile, ;
		     ldimpdate, ;
		     ldPostDate, ;
		     lcacctno, ;
		     lcRevKey, ;
		     llHeader, ;
		     lcCheckNo, ;
		     THISFORM.DATASESSIONID)
		
		IF llreturn
		   thisform.calctot()
		   SELECT csrctdet
		   GO top
		   thisform.grdWellRcpt.Refresh()
		ENDIF 
		
		SELECT (lcAlias)
		
		RETURN llReturn
		
		
		
		
		
		
		
		
		
		
	ENDPROC

	PROCEDURE Init
		IF DODEFAULT()
		   thisform.odist = CREATEOBJECT('distproc', '0001', '99999',  ;
		      '01',  ;
		      '2010',  ;
		      '00', 'W', DATE(), .F., 0)
		      
		   IF MESSAGEBOX('Do you want to import a pay meter?',36,thisform.Caption) = 6
		      thisform.new('Csrcthdr')
		      thisform.cmdUpload.Visible = .t.
		   ENDIF       
		ENDIF
		
	ENDPROC

	PROCEDURE list
		LPARAMETERS cworkarea
		LOCAL lcList, lnRecNo, lnNewRecNo
		PRIV llOK
		
		lcAlias = ALIAS()
		
		llOK = .T.
		lcList = 'cbatch\Batch,cid\ID,cname\Name,ddate/date\Date,ncashamt\Amount'
		
		SELECT csrcthdr
		lnRecNo = RECNO()
		
		lnDatasession = SET('datasession')
		lnNewRecNo = picklist(lnDataSession, 'Csrcthdr', lcList, csrcthdr.cbatch, 5, .f., .t.)
		
		IF lnNewRecNo > 0
		   SELECT csrcthdr
		   GOTO lnNewRecNo
		   thisform.cmdatamanager.setrecordposition('Csrcthdr')
		ELSE
		   SELECT csrcthdr
		   GOTO lnRecNo   
		ENDIF   
		
		thisform.refresh()
		
		SELECT (lcAlias)
	ENDPROC

	PROCEDURE lookcoa
		LOCAL lcList
		PRIV llOK
		
		lcAlias = ALIAS()
		
		llOK = .F.
		lcList = 'cacctno/acctno,cacctdesc/acctdesc'
		
		DO FORM picklist WITH 'Coa', lcList, 'cacctno', 2
		
		IF llOK
		   thisform.grdCashrct.column1.txtcAcctNo.value = coa.cacctno
		   thisform.cmdatamanager.replace('CSRCTdet', 'cacctno', coa.cacctno)
		   thisform.grdCashrct.column1.txtcAcctNo.refresh()
		ENDIF   
		
		thisform.grdCashrct.column1.txtcAcctNo.SetFocus()
		
		SELECT (lcAlias)
	ENDPROC

	PROCEDURE meter_report
		LPARA tcBatch
		
		lcAlias = ALIAS()
		
		lcdatapath = ALLT(m.goapp.cdatafilepath)
		
		IF NOT USED('importbatch')
		   USE (lcdatapath+'importbatch') IN 0
		ENDIF
		
		ldimpdate = THISFORM.txtdrctDate.VALUE
		
		CREATE CURSOR allprint ;
		   (cbatch       c(8), ;
		   ctype        c(1), ;
		   drecdate     d, ;
		   cmeterid     c(10), ;
		   cmeterdesc   c(30), ;
		   cyear        c(4), ;
		   cperiod      c(2), ;
		   cdepositid   c(10), ;
		   cpurchaser   c(40), ;
		   nprice       N(12,4), ;
		   nmaster      N(12,2), ;
		   nsubstotal   N(12,2), ;
		   nvariance    N(12,2), ;
		   nallocation  N(7,2), ;
		   cwellid      c(10), ;
		   cwellname    c(30), ;
		   cbegrange    c(5), ;
		   cendrange    c(5), ;
		   namtallocated N(12,2), ;
		   nsubmeter    N(7,2), ;
		   ntaxamt      n(12,2), ;
		   ntaxamt2     n(12,2), ;
		   ntaxamt3     n(12,2), ;
		   ntaxamt4     n(12,2), ;
		   cdedcode1    c(4), ;
		   ndeduct1     n(12,2), ;
		   cdedcode2    c(4), ;
		   ndeduct2     n(12,2), ;
		   cdedcode3    c(4), ;
		   ndeduct3     n(12,2), ;
		   cdedcode4    c(4), ;
		   ndeduct4     n(12,2), ;
		   cdedcode5    c(4), ;
		   ndeduct5     n(12,2))
		INDEX ON ctype+cmeterid+cbatch TAG primkey
		
		
		SELE importbatch
		LOCATE FOR cbatch == tcBatch
		IF FOUND()
		   m.ctype = ctype
		
		   lcBatches = mbatches
		   lnCount   = ALINES(laBatches,lcBatches)
		
		   FOR x = 1 TO lnCount
		      lcBatch = laBatches[x]
		      SELECT meterall
		      SCAN FOR cbatch == lcBatch
		         SCATTER MEMVAR
		         m.drecdate = dincdate
		
		         SELECT meters
		         SET ORDER TO meterid
		         IF SEEK(m.cmeterid)
		            m.cmeterdesc = cmeterdesc
		         ELSE
		            m.cmeterdesc = ''
		         ENDIF
		
		         SELE revsrc
		         LOCATE FOR crevkey = meterall.crevkey
		         IF FOUND()
		            m.cpurchaser = crevname
		         ELSE
		            m.cpurchaser = 'Purchaser Not On File'
		         ENDIF
		
		         m.nprice = m.ngasprice
		
		         SELECT metersub
		         SCAN FOR cbatch == lcBatch
		            SCATTER MEMVAR
		            SELECT wells
		            SET ORDER TO cwellid
		            SEEK m.cwellid
		            m.cwellname = cwellname
		            m.namtallocated = m.ntotalsub
		            m.ctype = 'G'
		            INSERT INTO allprint FROM MEMVAR
		         ENDSCAN
		
		      ENDSCAN
		   ENDFOR
		ENDIF
		
		SELECT allprint
		LOCATE
		
		IF TYPE('m.cprocessor') <> 'C'
		   m.cProcessor = ''
		ENDIF
		IF TYPE('m.cproducer') <> 'C'
		   m.cProducer = 'Sherwood Energy'
		ENDIF
		
		
		REPORT FORM customcode\meterpayimport.frx TO PRINTER PROMPT PREVIEW
		
		SELECT (lcAlias)
		
	ENDPROC

	PROCEDURE new
		LPARAMETERS cWorkarea
		
		IF EMPTY(cworkarea)
		   m.cWorkArea = 'CSRCTHDR'
		ENDIF 
		
		IF DODEFAULT(cWorkarea)
		   IF UPPER(m.cWorkarea) = 'CSRCTHDR'
		      lcdatapath = ALLT(m.goapp.cdatafilepath)
		      IF NOT FILE(lcdatapath+'importbatch.dbf')
		         CREATE TABLE (lcdatapath+'importbatch') FREE ;
		            (cbatch    c(8), ;
		            timpdate  T, ;
		            crevkey   c(10), ;
		            ctype     c(1), ;
		            mbatches  m)
		      ENDIF
		
		      swselect('importbatch')
		   ENDIF
		ENDIF
		
	ENDPROC

	PROCEDURE Release
		ON KEY LABEL F2
		DODEFAULT()
		
	ENDPROC

	PROCEDURE setstate		&& Resets the form state for non bound controls so that the save button still works.
		this.lChanged = .T.
		m.goStateManager.RefreshAll('Form Edit')
	ENDPROC

	PROCEDURE upload
	ENDPROC

	PROCEDURE valterms		&& Validate Terms and Set Due Date and Disc Date based on the Terms
	ENDPROC

	PROCEDURE verifyexpcode
		LPARAMETERS tcExpCode, tcMeterID, tiRow
		
		* Check to see if the expense code is valid. If not log it as a bad import row
		lcAlias = ALIAS()
		
		IF EMPTY(tcExpCode)
		   RETURN 0
		ENDIF 
		
		swselect('expcat')
		SET ORDER to ccatcode
		IF NOT SEEK(tcExpCode)
		   m.cMeterID = tcMeterID
		   m.cExpCode = tcExpCode
		   m.iRow     = tiRow
		   INSERT INTO badddata FROM MEMVAR 
		   lnReturn = 1
		ELSE
		   lnReturn = 0
		ENDIF
		
		SELECT (lcAlias)
		
		RETURN lnReturn
	ENDPROC

	PROCEDURE cboAcct.afterchange
		SELECT coa
		LOCATE FOR THISFORM.cboAcct.VALUE == coa.cacctno
		IF FOUND()
			THISFORM.txtAcctDesc.VALUE = cAcctDesc
			THISFORM.txtAcctDesc.REFRESH()
		ENDIF
		DODEFAULT()
		
		
	ENDPROC

	PROCEDURE cboAcct.Init
		*
		*  Builds the data displayed in the combo list box
		*
		
		SELECT  cAcctNo, cAcctDesc FROM coa INTO ARRAY laAcct WHERE lBankacct = .T. ORDER BY cAcctNo
		
		IF _TALLY > 0
		   FOR lnX = 1 TO ALEN(laAcct,1)
		      THIS.ADDLISTITEM(laAcct[lnX,1],lnX,1)
		      THIS.ADDLISTITEM(laAcct[lnX,2],lnX,2)
		   ENDFOR
		ENDIF
		
		DODEFAULT()
	ENDPROC

	PROCEDURE cboPurch.Init
		DODEFAULT()
		
		SELE crevname, crevkey FROM revsrc INTO ARRAY laPurch Order by crevname
		
		if _tally > 0
		   for lnx = 1 to _tally
		      this.addlistitem(lapurch[lnx,1],lnx,1)
		      this.addlistitem(lapurch[lnx,2],lnx,2)
		   endfor
		   this.listitemid = 1
		endif   
	ENDPROC

	PROCEDURE cmdatamanager.afterchange
		LPARAMETERS cworkarea,cfield
		
		IF UPPER(m.cWorkarea) == 'CSRCTDET'
		   * Recalculate the invoice totals
		   IF NOT thisform.cmdatamanager.isnew('csrctdet')
		      thisform.calctot()
		   ENDIF   
		ENDIF   
		
		RETURN (DODEFAULT(m.cworkArea, m.cField))
	ENDPROC

	PROCEDURE cmdatamanager.afterdelete
		LPARAMETERS cworkarea
		
		DO CASE
		   CASE m.cWorkarea = 'Csrcthdr'
		      SELECT csrcthdr      
		   CASE m.cWorkarea = 'Csrctdet'
		      SELECT csrctdet   
		      SET FILTER TO lWellRcpt = .T.
		      * Recalculate the invoice totals
		      thisform.calctot()
		      thisform.refresh()
		ENDCASE
		
		RETURN (DODEFAULT(m.cWorkArea))
	ENDPROC

	PROCEDURE cmdatamanager.afternav
		LPARAMETERS cworkarea
		LOCAL lnCount, lcFilter
		
		IF m.cworkarea = 'Csrcthdr'
		   SELECT coa
		   SET ORDER TO acctno
		   IF SEEK(csrcthdr.ccashacct)
		      THISFORM.txtacctdesc.VALUE = cacctdesc
		   ENDIF
		
		   SELECT glopt
		   IF csrcthdr.ccashacct = cundepfund AND NOT EMPTY(cundepfund)
		      THISFORM.opgDeposits.VALUE = 1
		   ELSE
		      THISFORM.opgDeposits.VALUE = 2
		*      THISFORM.cboAcct.LISTITEMID = 1
		*      THISFORM.cboAcct.REFRESH()
		   ENDIF
		
		   lcBatch = csrcthdr.cbatch
		   SELECT csrctdet
		   lcFilter = FILTER()
		   SET FILTER TO lWellRcpt
		ENDIF
		
		SELECT csrcthdr
		
		DODEFAULT()
		
	ENDPROC

	PROCEDURE cmdatamanager.afternew
		LPARAMETERS cworkarea
		
		LOCAL lcidrctd, lcBatch
		
		DO CASE
		   CASE UPPER(m.cworkarea) = 'CSRCTHDR'    && Cash Header
		      lcBatch = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Batch')
		      SET DELETED OFF
		      SELECT csrcthdr1
		      SET ORDER TO cbatch
		      DO WHILE SEEK(lcBatch)
		         lcBatch = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Batch')
		      ENDDO
		      SET DELETED ON
		
		      SELECT csrcthdr
		      REPLACE cbatch  WITH lcBatch, ;
		         dentdate     WITH DATE(), ;
		         lUploaded WITH .T.
		
		      THISFORM.opgDeposits.VALUE = 2
		      IF EMPTY(THISFORM.coldacctno)
		         THISFORM.cboAcct.LISTITEMID = 1
		      ELSE
		         THISFORM.cboAcct.SET('value',THISFORM.coldacctno)
		      ENDIF
		      SELECT csrcthdr
		      REPL ccashacct WITH THISFORM.cboAcct.VALUE
		      THISFORM.cboAcct.REFRESH()
		      THISFORM.setnextcontrol(THISFORM.cbopurch)
		
		   CASE UPPER(m.cworkarea) = 'CSRCTDET'    && Cash Detail
		      lcidrctd = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Cash Receipt Detail')
		      SET DELETED OFF
		      SELECT csrctdet1
		      SET ORDER TO cidpurd
		      DO WHILE SEEK(lcidrctd)
		         lcidrctd = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Cash Receipt Detail')
		      ENDDO
		      SET DELETED ON
		      SELECT csrcthdr
		      lcBatch = csrcthdr.cbatch
		      SELECT csrctdet
		      REPLACE csrctdet.cidrctd WITH lcidrctd,  ;
		         csrctdet.lWellRcpt WITH .T., ;
		         csrctdet.cbatch WITH lcBatch
		         
		   CASE UPPER(m.cworkarea) = 'METERALL'
		      m.cbatch = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Batch')
		      SELE meterall
		      REPL cbatch WITH m.cbatch
		ENDCASE
		
		RETURN (DODEFAULT(m.cworkarea))
		
	ENDPROC

	PROCEDURE cmdatamanager.beforedelete
		LPARAMETERS cworkarea
		LOCAL lcBatch
		
		*  Check to see if the fiscal period is closed
		IF m.cworkarea = 'Csrcthdr'
		   SELECT csrctdet
		   SET FILTER TO
		   SELECT csrcthdr
		   IF NOT THISFORM.glmaint.checkperiod(csrcthdr.ddate)
		      RETURN .F.
		   ENDIF
		
		   lcBatch = csrcthdr.cbatch
		
		   IF NOT EMPTY(lcBatch)
		      *  Check to see if expenses entered for wells was allocated
		      *  If so, and the period isn't closed, delete it.  Otherwise
		      *  let the user know he can't delete this entry.
		      SELECT income
		      SCAN FOR cbatch == lcBatch
		         m.cYear   = cYear
		         m.cPeriod = cPeriod
		         m.cWellID = cWellID
		         SELECT wells
		         SET ORDER TO cWellID
		         SEEK(m.cWellID)
		         m.cGroup = cGroup
		         SELECT sysctl
		         SET ORDER TO yrprdgrp
		         IF SEEK(m.cYear+m.cPeriod+m.cGroup+'YR')
		            THISFORM.oMessage.Warning('%msgProdClosedInc')
		            RETURN .F.
		         ENDIF
		      ENDSCAN
		
		      * Remove journal entries
		      THISFORM.glmaint.delbatch(lcBatch)
		
		      * Remove Income entries
		      SELECT income
		      SCAN FOR cbatch == lcBatch
		         DELETE NEXT 1
		      ENDSCAN
		
		      * Remove unallocated income entries
		      SELECT incsusp
		      SCAN FOR cbatch == lcBatch
		         DELETE NEXT 1
		      ENDSCAN
		
		      *  Delete the deposit entry from the check register
		      THISFORM.glmaint.delcheck(lcBatch,.T.)
		   ENDIF
		
		   SELECT glmaster
		   =TABLEUPDATE(.T.)
		   SELECT income
		   =TABLEUPDATE(.T.)
		    SELECT expense
		   =TABLEUPDATE(.T.)
		   SELECT incsusp
		   =TABLEUPDATE(.T.)
		   SELECT coabal
		   =TABLEUPDATE(.T.)
		   SELECT csrctdet
		   SET FILTER TO
		   =TABLEUPDATE(.T.)
		   SELECT csrcthdr
		   =TABLEUPDATE(.T.)
		   SELECT checks
		   =TABLEUPDATE(.T.)
		   THISFORM.setchanged(.F.)
		
		ENDIF
		
	ENDPROC

	PROCEDURE cmdatamanager.beforenew
		LPARAMETERS cworkarea
		
		IF m.cworkarea == 'Csrcthdr'
		   THISFORM.coldacctno = csrcthdr.ccashacct
		ENDIF
		
	ENDPROC

	PROCEDURE cmdatamanager.beforeupdate
		LPARA cworkarealist
		LOCAL lnTotal, m.cBatch, lcRevClear, lcBatch, llNetUnits
		
		IF NOT THISFORM.lChanged
		   RETURN .F.
		ENDIF
		
		IF csrcthdr.ncashamt = 0
		   MESSAGEBOX('There were no chart readings that matched the production period on the import sheet! Nothing imported.',48,thisform.Caption)
		   RETURN .f.
		ENDIF 
		
		IF csrcthdr.nCashAmt = 0
		   THISFORM.oMessage.Warning('A zero balance receipt cannot be saved.  Please add detail.')
		   RETURN .F.
		ENDIF
		
		lcBatch = csrcthdr.cBatch
		m.cBatch      = csrcthdr.cBatch
		m.lNetRev  = .T.
		m.cCheckNo = csrcthdr.cCheckNo
		
		SELECT glopt
		GO TOP
		lcRevClear = crevclear
		IF EMPTY(crevclear)  &&  No clearing account defined, or on a bogus record, stick in 250000
		   lcRevClear = '250000'
		ENDIF
		
		m.cAcctNo = lcRevClear
		
		*  Check to see if the fiscal period is closed
		IF NOT THISFORM.glmaint.checkperiod(csrcthdr.ddate)
		   RETURN .F.
		ENDIF
		
		lcSelect = SELECT()
		lcBatch = csrcthdr.cBatch
		
		WAIT WINDOW NOWAIT 'Saving Changes, Please Wait.....'
		
		lcBatch = csrcthdr.cBatch
		
		*
		*  Delete the G/L journal entries for this invoice
		*
		THISFORM.glmaint.delbatch(lcBatch)
		
		*
		*  Create the G/L journal entries for this invoice
		*
		
		*  Cash entry
		THISFORM.glmaint.cSource    = 'CS'
		THISFORM.glmaint.cBatch     = lcBatch
		THISFORM.glmaint.dGLDate    = csrcthdr.ddate
		THISFORM.glmaint.cReference = 'Meter Import: ' + csrcthdr.cid
		THISFORM.glmaint.cDesc      = THISFORM.cbopurch.DISPLAYVALUE
		THISFORM.glmaint.cAcctNo    = csrcthdr.cCashAcct
		THISFORM.glmaint.cId        = csrcthdr.cId
		THISFORM.glmaint.nAmount    = csrcthdr.nCashAmt
		THISFORM.glmaint.cBunch     = ''
		THISFORM.glmaint.dCheckDate = csrcthdr.ddate
		THISFORM.glmaint.dPostDate  = csrcthdr.ddate
		THISFORM.glmaint.cpayee     = csrcthdr.cname
		THISFORM.glmaint.cidchec    = ''
		THISFORM.glmaint.centrytype = 'D'
		THISFORM.glmaint.cidtype    = 'D'
		THISFORM.glmaint.cYear      = ' '
		THISFORM.glmaint.cPeriod    = ' '
		THISFORM.glmaint.cCheckNo   = csrcthdr.cCheckNo
		THISFORM.glmaint.delcheck(csrcthdr.cidchec)
		THISFORM.glmaint.cUnitNo    = ''
		THISFORM.glmaint.cDeptNo    = ''
		
		
		THISFORM.glmaint.updatebatch()
		THISFORM.glmaint.addcheck()
		lcidchec = THISFORM.glmaint.getkey()
		SELECT csrcthdr
		REPL cidchec WITH lcidchec
		
		*  Detail Lines
		SELECT csrctdet
		lnRecNo = RECNO()
		lcFilter = FILTER()
		SET FILTER TO
		SCAN FOR cBatch == lcBatch
		   SCATTER MEMVAR
		   lcRevClear = csrctdet.cAcctNo
		   THISFORM.glmaint.cBatch     = lcBatch
		   THISFORM.glmaint.dGLDate    = csrcthdr.ddate
		   THISFORM.glmaint.cReference = 'Cash: ' + ALLTRIM(csrcthdr.cinvnum)
		   IF csrctdet.lWellRcpt
		      SELECT wells
		      SET ORDER TO cwellid
		      IF SEEK(csrctdet.cwellid)
		         lcWellName = wells.cWellName
		         IF cwellstat = 'V'
		            SELECT revcat
		            SET ORDER TO crevtype
		            IF SEEK(csrctdet.ctype)
		               DO CASE
		                  CASE csrctdet.ctype = 'BBL'
		                     lcRevClear = ccracctnow
		                  CASE csrctdet.ctype = 'MCF'
		                     lcRevClear = ccracctnow
		                  CASE csrctdet.ctype = 'OTH'
		                     lcRevClear = ccracctnow
		                  CASE LEFT(csrctdet.ctype,4) = 'OTAX'
		                     lcRevClear = ccracctnow
		                  CASE LEFT(csrctdet.ctype,4) = 'GTAX'
		                     lcRevClear = ccracctnow
		                  CASE LEFT(csrctdet.ctype,4) = 'PTAX'
		                     lcRevClear = ccracctnow
		                  CASE csrctdet.ctype = 'MISC1'
		                     lcRevClear = ccracctnow
		                  CASE csrctdet.ctype = 'MISC2'
		                     lcRevClear = ccracctnow
		                  CASE csrctdet.ctype = 'TRANS'
		                     lcRevClear = ccracctnow
		               ENDCASE
		               IF EMPTY(lcRevClear)
		                  lcRevClear = '999999'
		               ENDIF
		               REPL csrctdet.cAcctNo WITH lcRevClear
		            ENDIF
		         ELSE
		            llInvestment = .F.
		         ENDIF
		         THISFORM.glmaint.cDesc      = lcWellName
		         THISFORM.glmaint.cAcctNo    = lcRevClear
		      ELSE
		         lcWellName = 'Unknown'
		      ENDIF
		   ELSE
		      THISFORM.glmaint.cDesc      = csrctdet.cDesc
		      THISFORM.glmaint.cAcctNo    = csrctdet.cAcctNo
		   ENDIF
		
		   THISFORM.glmaint.cId        = csrcthdr.cId
		   THISFORM.glmaint.nAmount    = csrctdet.nAmount * -1
		   THISFORM.glmaint.cUnitNo    = csrctdet.cwellid
		   THISFORM.glmaint.updatebatch()
		
		ENDSCAN
		
		SELECT csrctdet
		SET FILTER TO lWellRcpt
		
		*
		*  Check to make sure the batch balances
		*
		llReturn = THISFORM.glmaint.chkBalance()
		
		IF llReturn
		   WAIT WINDOW NOWAIT 'Changes Saved....' TIMEOUT 2
		ELSE
		   WAIT WIND 'The Batch Was Not In Balance...Unable to save receipt.'
		ENDIF
		
		RETURN (llReturn)
		
		
		
	ENDPROC

	PROCEDURE cmdatamanager.delete
		LPARAMETERS cworkarea
		
		IF Proper(m.cworkarea) = 'Csrctdet'
		   SELECT csrctdet
		   set filter to
		ENDIF
		
		DODEFAULT(cworkarea)   
	ENDPROC

	PROCEDURE cmdatamanager.new
		LPARAMETERS cworkarea
		
		IF UPPER(m.cworkarea) == 'CSRCTHDR'    && Cash Header
		      WITH THISFORM
		         .txtAcctDesc.VALUE = ""
		      ENDWITH
		      
		ENDIF
		
		RETURN (DODEFAULT(m.cworkarea))
		
		
		
	ENDPROC

	PROCEDURE cmdReport.Click
		IF NOT EMPTY(csrcthdr.cbatch)
		   thisform.meter_report(csrcthdr.cbatch)
		ENDIF    
	ENDPROC

	PROCEDURE cmdUpload.Click
		thisform.importexcel()
	ENDPROC

	PROCEDURE Glmaint.delbatch
		LPARAMETERS tcbatch
		
		IF TYPE('tcBatch') <> 'C'
		   WAIT WIND NOWAIT 'The batch number passed to delete batch was invalid...'
		   RETURN
		ENDIF
		
		DODEFAULT(tcBatch)   
	ENDPROC

	PROCEDURE grdWellRcpt.Column1.txtcWellID.InteractiveChange
		DODEFAULT()
		
		thisform.cmdatamanager.replace('Csrctdet','Cdesc',wells.cWellName)
		thisform.grdWellRcpt.Column2.txtcWellName.refresh()
	ENDPROC

	PROCEDURE grdWellRcpt.Column2.txtcWellName.DblClick
		thisform.editdetail1()
	ENDPROC

	PROCEDURE grdWellRcpt.Column3.txtcType.Init
		this.addlistitem('MCF',1,1)
		this.addlistitem('BBL',2,1)
		this.addlistitem('OTH',3,1)
		this.addlistitem('MISC1',4,1)
		this.addlistitem('MISC2',5,1)
		this.addlistitem('TRANS',6,1)
		this.addlistitem('OTAX1',7,1)
		this.addlistitem('OTAX2',8,1)
		this.addlistitem('OTAX3',9,1)
		this.addlistitem('OTAX4',10,1)
		this.addlistitem('GTAX1',11,1)
		this.addlistitem('GTAX2',12,1)
		this.addlistitem('GTAX3',13,1)
		this.addlistitem('GTAX4',14,1)
		this.addlistitem('PTAX1',15,1)
		this.addlistitem('PTAX2',16,1)
		this.addlistitem('PTAX3',17,1)
		this.addlistitem('PTAX4',18,1)
		
		DODEFAULT()
	ENDPROC

	PROCEDURE grdWellRcpt.Column4.txtnUnits.DblClick
		thisform.editdetail1()
	ENDPROC

	PROCEDURE grdWellRcpt.Column4.txtnUnits.LostFocus
		WITH thisform.grdWellRcpt
		   thisform.cmdatamanager.replace('Csrctdet','Namount',this.value * .Column5.txtnPrice.value)
		   .Column6.txtnTotal.refresh()
		ENDWITH   
	ENDPROC

	PROCEDURE grdWellRcpt.Column5.txtnPrice.DblClick
		thisform.editdetail1()
	ENDPROC

	PROCEDURE grdWellRcpt.Column5.txtnPrice.LostFocus
		WITH thisform.grdWellRcpt
		   thisform.cmdatamanager.replace('Csrctdet','Namount',this.value * .Column4.txtnUnits.value)
		   .Column6.txtnTotal.refresh()
		ENDWITH   
	ENDPROC

	PROCEDURE grdWellRcpt.Column6.txtnTotal.DblClick
		thisform.editdetail1()
	ENDPROC

	PROCEDURE opgDeposits.optGroup.Click
		
		lnSelect = SELECT()
		SELECT glopt
		IF NOT EMPTY(glopt.cundepfund)
		   SELECT coa
		   SET ORDER TO acctno
		   SEEK(glopt.cundepfund)
		   IF lbankacct
		      THISFORM.cboAcct.VALUE = glopt.cundepfund
		      THISFORM.cmdatamanager.REPLACE('csrcthdr','Ccashacct',glopt.cundepfund)
		      THISFORM.cboAcct.REFRESH()
		      THISFORM.cboAcct.afterchange()
		   ELSE  &&  Not a bank account, so don't let them continue
		      THISFORM.oMessage.DISPLAY('Your undeposited funds account is not defined as a bank account.  This must be corrected before any deposits can be grouped.')
		      THIS.PARENT.VALUE = 2
		      THISFORM.cboAcct.LISTITEMID = 1
		      THISFORM.cboAcct.afterchange()
		      THISFORM.setnextcontrol(THISFORM.cboAcct)
		   ENDIF
		ELSE
		   THISFORM.omessage.warning('The undeposited funds account is not defined in the G/L options. Deposits cannot be grouped.')
		   THISFORM.opgDeposits.VALUE = 2
		ENDIF
		
		SELECT(lnselect)
		
		DODEFAULT()
		
	ENDPROC

	PROCEDURE txtAcctDesc.When
		RETURN .F.    
	ENDPROC

	PROCEDURE txtNcashamt.When
		RETURN .F.
	ENDPROC

ENDDEFINE
