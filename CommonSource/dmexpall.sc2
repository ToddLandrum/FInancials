*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="dmexpall.scx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="2" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Cursor1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor6" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor7" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor8" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor9" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor10" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor11" UniqueID="" Timestamp="" />

	AutoOpenTables = .F.
	DataSource = .NULL.
	Height = 523
	Left = 40
	Name = "Dataenvironment"
	Top = 235
	Width = 915

	ADD OBJECT 'Cursor1' AS cursor WITH ;
		Alias = "wells", ;
		CursorSource = "wells", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor1", ;
		Top = 20, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor10' AS cursor WITH ;
		Alias = "expsusp", ;
		CursorSource = "expsusp", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 409, ;
		Name = "Cursor10", ;
		Top = 28, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor11' AS cursor WITH ;
		Alias = "wellinv", ;
		CursorSource = "wellinv", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 422, ;
		Name = "Cursor11", ;
		Top = 161, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor2' AS cursor WITH ;
		Alias = "expense", ;
		BufferModeOverride = 5, ;
		CursorSource = "expense", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 150, ;
		Name = "Cursor2", ;
		Top = 20, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor3' AS cursor WITH ;
		Alias = "expcat", ;
		CursorSource = "expcat", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 290, ;
		Name = "Cursor3", ;
		Top = 20, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor4' AS cursor WITH ;
		Alias = "vendor", ;
		CursorSource = "vendor", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor4", ;
		Top = 140, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor5' AS cursor WITH ;
		Alias = "coa", ;
		CursorSource = "coa", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 150, ;
		Name = "Cursor5", ;
		Top = 140, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor6' AS cursor WITH ;
		Alias = "glopt", ;
		CursorSource = "glopt", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 290, ;
		Name = "Cursor6", ;
		Top = 140, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor7' AS cursor WITH ;
		Alias = "coabal", ;
		BufferModeOverride = 5, ;
		CursorSource = "coabal", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor7", ;
		Top = 260, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor8' AS cursor WITH ;
		Alias = "glmaster", ;
		BufferModeOverride = 5, ;
		CursorSource = "glmaster", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 150, ;
		Name = "Cursor8", ;
		Top = 260, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor9' AS cursor WITH ;
		Alias = "apopt", ;
		CursorSource = "apopt", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 290, ;
		Name = "Cursor9", ;
		Top = 260, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

ENDDEFINE

DEFINE CLASS formdmexpall AS frmdatamanagerformcustom OF "..\custom\cforms.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="LblProdPer" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Swperiod1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboSelect" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Swyear1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdLookVendor" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Swgroup1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdLookCat" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="LblProdYear" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="LblGroup" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom6" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcVendorID" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcCatCode" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtnAmount" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcRefID" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcNotes" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdProcess" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdExit" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcVendName" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcCategory" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Glmaint" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtdExpDate" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: process		&& Process the expense allocation
	*</DefinedPropArrayMethod>

	Caption = "Allocate Operator-Charged Expenses Evenly"
	DoCreate = .T.
	Height = 406
	HelpContextID = 103
	Name = "FormDmexpall"
	Visible = .T.
	Width = 420
	cmdatamanager.Name = "cmdatamanager"
	cmdatamanager.TabIndex = 1
	cmdatamanager.ZOrderSet = 0
	cmlookupmanager.Name = "cmlookupmanager"
	Mwresize1.lblHighLight.Name = "lblHighLight"
	Mwresize1.lblShading.Name = "lblShading"
	Mwresize1.Name = "Mwresize1"

	ADD OBJECT 'cboSelect' AS cbocomboboxcustom WITH ;
		Height = 20, ;
		Left = 130, ;
		Name = "cboSelect", ;
		RowSource = "All Wells In Group,Selected Wells In Group", ;
		RowSourceType = 1, ;
		TabIndex = 20, ;
		Top = 308, ;
		Width = 210, ;
		ZOrderSet = 3
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="combobox" />

	ADD OBJECT 'cmdExit' AS cmdcommandbuttoncustom WITH ;
		Caption = "E\<xit", ;
		Height = 36, ;
		Left = 222, ;
		Name = "cmdExit", ;
		TabIndex = 23, ;
		Top = 351, ;
		Width = 60, ;
		ZOrderSet = 23
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdLookCat' AS cmdcommandbuttoncustom WITH ;
		Caption = "Exp Code", ;
		Height = 20, ;
		Left = 60, ;
		Name = "cmdLookCat", ;
		TabIndex = 12, ;
		Top = 168, ;
		Width = 60, ;
		ZOrderSet = 9
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdLookVendor' AS cmdcommandbuttoncustom WITH ;
		Caption = "Vendor ID:", ;
		Height = 20, ;
		Left = 60, ;
		Name = "cmdLookVendor", ;
		TabIndex = 10, ;
		Top = 121, ;
		Width = 60, ;
		ZOrderSet = 7
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdProcess' AS cmdcommandbuttoncustom WITH ;
		Caption = "\<Process", ;
		Height = 36, ;
		Left = 137, ;
		Name = "cmdProcess", ;
		TabIndex = 22, ;
		Top = 351, ;
		Width = 60, ;
		ZOrderSet = 22
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'Glmaint' AS glmaint WITH ;
		Left = 261, ;
		Name = "Glmaint", ;
		Top = 102
		*< END OBJECT: ClassLib="..\custom\swgl.vcx" BaseClass="custom" />

	ADD OBJECT 'LblGroup' AS lbllabelcustom WITH ;
		Caption = "Group:", ;
		Comment = "", ;
		Height = 16, ;
		Left = 85, ;
		Name = "LblGroup", ;
		TabIndex = 8, ;
		Top = 61, ;
		Width = 35, ;
		ZOrderSet = 12
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom1' AS lbllabelcustom WITH ;
		Caption = "Allocate To:", ;
		Left = 61, ;
		Name = "Lbllabelcustom1", ;
		TabIndex = 21, ;
		Top = 312, ;
		ZOrderSet = 11
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom3' AS lbllabelcustom WITH ;
		Caption = "Acct. Date:", ;
		Height = 16, ;
		Left = 64, ;
		Name = "Lbllabelcustom3", ;
		TabIndex = 9, ;
		Top = 91, ;
		Width = 56, ;
		ZOrderSet = 6
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom4' AS lbllabelcustom WITH ;
		Caption = "Total Amount", ;
		Height = 16, ;
		Left = 55, ;
		Name = "Lbllabelcustom4", ;
		TabIndex = 15, ;
		Top = 223, ;
		Width = 65, ;
		ZOrderSet = 13
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom5' AS lbllabelcustom WITH ;
		Caption = "Reference ID:", ;
		Height = 16, ;
		Left = 52, ;
		Name = "Lbllabelcustom5", ;
		TabIndex = 17, ;
		Top = 249, ;
		Width = 68, ;
		ZOrderSet = 14
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom6' AS lbllabelcustom WITH ;
		Caption = "Notes:", ;
		Height = 16, ;
		Left = 87, ;
		Name = "Lbllabelcustom6", ;
		TabIndex = 19, ;
		Top = 277, ;
		Width = 33, ;
		ZOrderSet = 15
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'LblProdPer' AS lbllabelcustom WITH ;
		Caption = "Prod Period:", ;
		Height = 16, ;
		Left = 184, ;
		Name = "LblProdPer", ;
		TabIndex = 4, ;
		Top = 27, ;
		Width = 60, ;
		ZOrderSet = 1
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'LblProdYear' AS lbllabelcustom WITH ;
		Caption = "Prod Year:", ;
		Height = 16, ;
		Left = 66, ;
		Name = "LblProdYear", ;
		TabIndex = 5, ;
		Top = 27, ;
		Width = 54, ;
		ZOrderSet = 10
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Swgroup1' AS swgroup WITH ;
		Comment = "", ;
		Height = 20, ;
		Left = 130, ;
		Name = "Swgroup1", ;
		TabIndex = 6, ;
		Top = 59, ;
		Width = 258, ;
		ZOrderSet = 8
		*< END OBJECT: ClassLib="..\custom\swcontrol.vcx" BaseClass="combobox" />

	ADD OBJECT 'Swperiod1' AS swperiod WITH ;
		Left = 249, ;
		Name = "Swperiod1", ;
		SelectOnEntry = .T., ;
		TabIndex = 3, ;
		Top = 24, ;
		ZOrderSet = 2
		*< END OBJECT: ClassLib="..\custom\swcontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'Swyear1' AS swyear WITH ;
		Left = 130, ;
		Name = "Swyear1", ;
		SelectOnEntry = .T., ;
		TabIndex = 2, ;
		Top = 24, ;
		ZOrderSet = 4
		*< END OBJECT: ClassLib="..\custom\swcontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcCatCode' AS txtquickfill WITH ;
		clistexpression = expcat.ccatcode, ;
		clistworkarea = expcat, ;
		Height = 20, ;
		Left = 130, ;
		MaxLength = 4, ;
		Name = "txtcCatCode", ;
		SelectOnEntry = .T., ;
		TabIndex = 13, ;
		Top = 168, ;
		Width = 42, ;
		ZOrderSet = 18
		*< END OBJECT: ClassLib="..\custom\cgadget.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcCategory' AS txttextboxcustom WITH ;
		BackColor = 212,208,200, ;
		Height = 20, ;
		Left = 130, ;
		Name = "txtcCategory", ;
		Top = 192, ;
		Width = 254
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcNotes' AS txttextboxcustom WITH ;
		Height = 20, ;
		Left = 130, ;
		Name = "txtcNotes", ;
		SelectOnEntry = .T., ;
		TabIndex = 18, ;
		Top = 274, ;
		Width = 210, ;
		ZOrderSet = 21
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcRefID' AS txttextboxcustom WITH ;
		Height = 20, ;
		Left = 130, ;
		Name = "txtcRefID", ;
		SelectOnEntry = .T., ;
		TabIndex = 16, ;
		Top = 246, ;
		Width = 96, ;
		ZOrderSet = 20
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcVendName' AS txttextboxcustom WITH ;
		BackColor = 212,208,200, ;
		Height = 20, ;
		Left = 130, ;
		Name = "txtcVendName", ;
		Top = 144, ;
		Width = 254
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcVendorID' AS txtquickfill WITH ;
		clistexpression = vendor.cvendorid, ;
		clistworkarea = vendor, ;
		Format = "!", ;
		Height = 20, ;
		Left = 130, ;
		MaxLength = 10, ;
		Name = "txtcVendorID", ;
		SelectOnEntry = .T., ;
		TabIndex = 11, ;
		Top = 121, ;
		Width = 90, ;
		ZOrderSet = 17
		*< END OBJECT: ClassLib="..\custom\cgadget.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtdExpDate' AS dpk WITH ;
		ControlSource = "", ;
		Height = 20, ;
		Left = 132, ;
		lmorethan90 = .T., ;
		Name = "txtdExpDate", ;
		TabIndex = 7, ;
		Top = 89, ;
		Visible = .T., ;
		Width = 75
		*< END OBJECT: ClassLib="..\custom\swdate.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtnAmount' AS txttextboxcustom WITH ;
		Height = 20, ;
		InputMask = "999999999.99", ;
		Left = 130, ;
		Name = "txtnAmount", ;
		SelectOnEntry = .T., ;
		TabIndex = 14, ;
		Top = 218, ;
		Width = 134, ;
		ZOrderSet = 19
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />
	
	PROCEDURE beforeclose
		LPARAMETERS nCloseReason
		
		RETURN .t.
	ENDPROC

	PROCEDURE Init
		
		thisform.txtnAmount.value = 0
		
		SELECT vendor
		IF m.goapp.lamversion 
		   SET FILTER TO lIntegGL
		ELSE
		   SET FILTER TO lskipcheck
		ENDIF 
		
		DODEFAULT()
	ENDPROC

	PROCEDURE process		&& Process the expense allocation
		LOCAL laSelected[1], lcAPAcct, lcDMExp, lcExpClear, lcGroup, llFoundBad, llIntoExpense, llReturn
		LOCAL lnCount, lnDiff, lnExpense, lnWells
		LOCAL m.cBatch, m.cExpClass, m.cRunYearJIB, m.cRunYearRev, m.ccatcode, m.ccateg, m.cidexpe, m.cidexps, m.cmemo
		LOCAL m.cpayee, m.cperiod, m.crefid, m.cvendorid, m.cyear, m.dExpDate, m.nRunNoJIB, m.nRunNoRev, m.namount
		
		IF THISFORM.txtnAmount.VALUE = 0  &&  No amount, so warn them
		   THISFORM.oMessage.Warning('You must specify an amount to be allocated.  Please correct before proceeding.')
		   RETURN .F.
		ENDIF
		
		*  Make sure the period or year isn't closed
		IF NOT THISFORM.glmaint.CheckPeriod(THISFORM.txtdexpDate.VALUE,.T.)
		   THISFORM.oMessage.Warning('Unable to allocate the expenses. Either the fiscal year or period represented by this date has been closed.')
		   RETURN .F.
		ENDIF
		
		*
		*  Get the expense dist clearing account
		swselect('glopt')
		GO TOP
		lcExpClear = cExpClear
		
		swselect('apopt')
		GO TOP
		lcAPAcct   = cAPAcct
		
		swselect('options')
		lcDMExp    = cFixedAcct
		
		IF EMPTY(lcDMExp)
		   lcDMExp = lcAPAcct
		ENDIF 
		*
		*  If the expense clearing account is not set up,
		*  use the last account in the chart of accounts
		*  by default
		*
		IF EMPTY(lcExpClear)
		   SELECT coa
		   SET ORDER TO acctno
		   GO BOTT
		   lcExpClear = cAcctno
		ENDIF
		
		laSelected = ' '
		
		lcGroup = LEFT(THISFORM.swgroup1.VALUE,2)
		
		DO CASE
		   CASE THISFORM.cboSelect.LISTITEMID = 1       && All Wells in Group
		      IF lcGroup = '**'
		         SELECT cwellid, cgroup ;
		            FROM wells ;
		            WHERE NOT INLIST(cwellstat,'I','S','P') ;  &&  Not inactive, sold, or plugged, just like the closing - BH 07/17/2008
		         INTO CURSOR wellsel ;
		            ORDER BY cwellid
		      ELSE
		         SELECT cwellid, cgroup ;
		            FROM wells ;
		            WHERE NOT INLIST(cwellstat,'I','S','P') ;  &&  Not inactive, sold, or plugged, just like the closing - BH 07/17/2008
		         AND cgroup = lcGroup  ;
		            INTO CURSOR wellsel ;
		            ORDER BY cwellid
		      ENDIF
		
		      IF _TALLY = 0
		         WAIT WIND 'No Wells in the given group...Try Another' NOWAIT
		         THISFORM.swgroup1.SETFOCUS()
		         RETURN
		      ELSE
		         lnWells = _TALLY
		      ENDIF
		   CASE THISFORM.cboSelect.LISTITEMID = 2      && Selected Wells
		      DO FORM dmselwells WITH lcGroup
		
		ENDCASE
		
		SELECT wellsel
		lnCount = RECC()
		lnExpense = ROUND(THISFORM.txtnAmount.VALUE/lnCount,2)
		lnDiff    = THISFORM.txtnAmount.VALUE - (lnExpense * lnCount)
		llFoundBad = .F.  &&  Variable for whether it finds any wells with no DOI, so it knows to show them 
		llIntoExpense = .f.  &&  Variable for whether it actually inserted any records into expense, so it knows whether to adjust any rounding to a record in expense or expsusp
		
		IF lnCount > 0 AND THISFORM.oMessage.CONFIRM('Confirm the allocation of ' + ALLTRIM(STR(lnExpense,9,2)) + ;
		      ' to ' + ALLTRIM(STR(lnCount)) + ' wells')
		   SCAN
		      SCATTER MEMVAR
		      WAIT WIND 'Allocating ' + ALLTRIM(STR(lnExpense,9,2)) + ' To Well: ' + m.cwellid NOWAIT
		      m.cBatch     = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Batch')
		      SELECT expense
		      m.cyear     = THISFORM.swyear1.VALUE
		      m.cperiod   = THISFORM.swperiod1.VALUE
		      m.cpayee    = THISFORM.txtcVendName.VALUE
		      m.cvendorid = THISFORM.txtcVendorID.VALUE
		      m.dExpDate  = THISFORM.txtdexpDate.VALUE
		      m.cmemo     = THISFORM.txtcNotes.VALUE
		      m.crefid    = THISFORM.txtcRefID.VALUE
		      m.ccateg    = THISFORM.txtcCategory.VALUE
		      m.ccatcode  = THISFORM.txtcCatCode.VALUE
		      m.nRunNoJIB = 0
		      m.nRunNoRev = 0
		      m.cRunYearJIB = ''
		      m.cRunYearRev = ''
		      m.namount   = lnExpense
		      SELECT expcat
		      SET ORDER TO ccatcode
		      IF SEEK(m.ccatcode)
		         m.cExpClass = cExpClass
		      ELSE
		         m.cExpClass = '0'
		      ENDIF
		      SET DELETED OFF
		      m.cidexpe = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Expense')
		      SELECT expense
		      SET ORDER TO cidexpe
		      DO WHILE SEEK(m.cidexpe)
		         m.cidexpe = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Expense')
		      ENDDO
		      SET DELETED ON
		      m.cyear     = THISFORM.swyear1.VALUE
		      m.cperiod   = THISFORM.swperiod1.VALUE
		
		      SELECT wellinv
		      LOCATE FOR cwellid == m.cwellid
		      IF NOT FOUND()  &&  No DOI, so put this into the allocation file
		         llFoundBad = .T.
		         SELECT expsusp
		         SET ORDER TO cidexps
		         m.cidexps = m.cidexpe
		         DO WHILE SEEK(m.cidexps)
		            m.cidexps = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Expense')
		         ENDDO
		         SET DELETED ON
		         INSERT INTO expsusp FROM MEMVAR
		      ELSE
		         llIntoExpense = .t.
		         INSERT INTO expense FROM MEMVAR
		      ENDIF
		
		      IF m.goApp.lAMVersion
		         *
		         *  Build the expense clearing G/L entry
		         *
		         THISFORM.glmaint.cBatch     = m.cbatch
		         THISFORM.glmaint.cSource    = 'DM'
		         THISFORM.glmaint.dGLDate    = m.dExpDate
		         THISFORM.glmaint.namount    = m.namount
		         THISFORM.glmaint.cUnitNo    = m.cwellid
		         THISFORM.glmaint.cDeptNo    = m.ccatcode
		         THISFORM.glmaint.creference = m.crefid
		         THISFORM.glmaint.cid        = m.cvendorid
		         THISFORM.glmaint.cdesc      = m.ccateg
		         THISFORM.glmaint.cAcctno    = lcExpClear
		         THISFORM.glmaint.updatebatch()
		         *
		         *  Build the A/P entry
		         *
		         THISFORM.glmaint.namount    = m.namount * -1
		         THISFORM.glmaint.cdesc      = m.cpayee
		         THISFORM.glmaint.cAcctno    = lcDMExp
		         THISFORM.glmaint.updatebatch()
		         IF m.goApp.lAMVersion
		            llReturn = THISFORM.glmaint.chkbalance()
		         ELSE
		            llReturn = .T.
		         ENDIF
		         IF NOT llReturn
		            THISFORM.cmdatamanager.revertall()
		            THISFORM.oMessage.Severe('Could not save this allocation. There was a problem allocating to the G/L')
		            RETURN
		         ENDIF
		      ENDIF
		   ENDSCAN
		
		   IF lnCount > 0
		      IF llIntoExpense = .t.  &&  Whether to adjust rounding to the expense or expsusp table
		         SELECT expense
		      ELSE
		         SELECT expsusp
		      ENDIF 
		      REPLACE namount WITH (lnExpense+lnDiff)
		      THISFORM.oMessage.DISPLAY('Expenses Allocated To ' + ALLTRIM(STR(lnCount,4)) + ' Wells.')
		      
		      IF llFoundBad = .t.
		         THISFORM.oMessage.DISPLAY('One or more wells have no DOI set up for them, so their share of this expense was placed in the allocation file.')
		      ENDIF
		      
		      THISFORM.cmdatamanager.updateall()
		      THISFORM.txtnAmount.SET('value',0)
		   ENDIF
		
		ELSE
		   WAIT WIND NOWAIT 'No expenses were allocated...'
		ENDIF
		 
	ENDPROC

	PROCEDURE cboSelect.Init
		this.listitemid = 1
		DODEFAULT()
	ENDPROC

	PROCEDURE cmdExit.Click
		thisform.release()
	ENDPROC

	PROCEDURE cmdLookCat.Click
		LOCAL lcList
		PRIV llOK
		
		llOK = .T.
		lcList = 'ccatcode,ccateg,cexpclass'
		
		DO FORM ..\custom\picklist WITH 'Expcat', lcList, thisform.txtccatcode.value, 3
		
		IF llOK
		   thisform.txtcCatCode.value  = expcat.ccatcode
		   thisform.txtcCategory.value = expcat.cCateg
		   thisform.txtcCatCode.refresh()
		   thisform.txtcCategory.refresh()
		   thisform.setnextcontrol(thisform.txtcCatCode)
		ENDIF   
	ENDPROC

	PROCEDURE cmdLookCat.When
		RETURN MDOWN()
	ENDPROC

	PROCEDURE cmdLookVendor.Click
		LOCAL lcList
		PRIV llOK
		
		llOK = .T.
		lcList = 'cvendorid,csortfield'
		
		DO FORM ..\custom\picklist WITH 'Vendor', lcList, thisform.txtcvendorid.value, 2
		
		IF llOK
		   thisform.txtcVendorID.value = vendor.cvendorid
		   thisform.txtcVendName.value = vendor.cvendname
		   thisform.txtcVendorID.refresh()
		   thisform.txtcVendName.refresh()
		   thisform.setnextcontrol(thisform.txtcVendorID)
		ENDIF   
	ENDPROC

	PROCEDURE cmdLookVendor.When
		RETURN MDOWN()
	ENDPROC

	PROCEDURE cmdProcess.Click
		IF EMPTY(THISFORM.swyear1.VALUE) OR EMPTY(THISFORM.swperiod1.VALUE)
		   THISFORM.oMessage.Warning('You must specify both a production year and production period before allocating.')
		   THISFORM.setnextcontrol(THISFORM.swyear1)
		   RETURN
		ENDIF
		IF EMPTY(THISFORM.txtdExpDate.VALUE)
		   THISFORM.oMessage.Warning('You must specify a valid date before allocating.')
		   THISFORM.setnextcontrol(THISFORM.txtdExpDate)
		   RETURN
		ENDIF
		IF EMPTY(THISFORM.txtcVendorID.VALUE)
		   THISFORM.oMessage.Warning('You must specify a valid vendor before allocating.')
		   THISFORM.setnextcontrol(THISFORM.txtcVendorID)
		   RETURN
		ENDIF
		IF EMPTY(THISFORM.txtccatCode.VALUE)
		   THISFORM.oMessage.Warning('You must specify a valid expense category before allocating.')
		   THISFORM.setnextcontrol(THISFORM.txtccatCode)
		   RETURN
		ENDIF
		IF THISFORM.txtnAmount.VALUE = 0
		   THISFORM.oMessage.Warning('You must specify an amount before allocating.')
		   THISFORM.setnextcontrol(THISFORM.txtnAmount)
		   RETURN
		ENDIF
		
		THISFORM.PROCESS()
		
	ENDPROC

	PROCEDURE txtcCatCode.GotFocus
		ON KEY LABEL F2 _screen.activeform.cmdLookCat.Click()
	ENDPROC

	PROCEDURE txtcCatCode.InteractiveChange
		IF DODEFAULT()
		   SELECT expcat
		   LOCATE FOR ccatcode == this.value
		   IF FOUND() 
		      THISFORM.txtcCategory.SET('value',expcat.cCateg)
		   ELSE
		      THISFORM.txtcCategory.SET('value','')
		   ENDIF 
		ENDIF       
		   
	ENDPROC

	PROCEDURE txtcCatCode.LostFocus
		ON KEY LABEL F2 *
		
	ENDPROC

	PROCEDURE txtcCatCode.Valid
		IF DODEFAULT()
		   IF this.Value = 'PLUG'
		      MESSAGEBOX('The "PLUG" expense code is designated for the Plugging ' + ;
		                 'module and cannot be processed on this window. Use the ' + ;
		                 'Fixed Expenses or Well Expenses by Well (8/8th) window ' + ;
		                 'for any plugging fund adjustments that need made.',16,'PLUG not Allowed')
		      RETURN 0
		   ENDIF 
		ENDIF             
		 
	ENDPROC

	PROCEDURE txtcCategory.When
		RETURN .F.
	ENDPROC

	PROCEDURE txtcVendName.When
		RETURN .F.
	ENDPROC

	PROCEDURE txtcVendorID.GotFocus
		ON KEY LABEL F2 _screen.activeform.cmdLookVendor.Click()
		DODEFAULT()
	ENDPROC

	PROCEDURE txtcVendorID.InteractiveChange
		IF DODEFAULT()
		   SELECT vendor
		   LOCATE FOR cvendorid == this.value
		   IF FOUND() 
		      THISFORM.txtcVendName.SET('value',vendor.cvendname)
		   ELSE
		      THISFORM.txtcVendName.SET('value','')
		   ENDIF 
		ENDIF       
		   
	ENDPROC

	PROCEDURE txtcVendorID.LostFocus
		ON KEY LABEL F2 *
		
	ENDPROC

ENDDEFINE
