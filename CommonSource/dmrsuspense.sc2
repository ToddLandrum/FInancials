*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="dmrsuspense.scx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
#INCLUDE "..\ampro\source\appdefs.h"

DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="2" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Cursor1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor6" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor7" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor9" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor10" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor11" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor12" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor13" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor15" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor16" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor17" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor14" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor8" UniqueID="" Timestamp="" />

	AutoOpenTables = .F.
	DataSource = .NULL.
	Height = 691
	Left = 347
	Name = "Dataenvironment"
	Top = 95
	Width = 801

	ADD OBJECT 'Cursor1' AS cursor WITH ;
		Alias = "investor", ;
		CursorSource = "investor", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 3, ;
		Name = "Cursor1", ;
		Top = 22, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor10' AS cursor WITH ;
		Alias = "revsrc", ;
		CursorSource = "revsrc", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 150, ;
		Name = "Cursor10", ;
		Top = 260, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor11' AS cursor WITH ;
		Alias = "sevtax", ;
		CursorSource = "sevtax", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 290, ;
		Name = "Cursor11", ;
		Top = 260, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor12' AS cursor WITH ;
		Alias = "wellhist", ;
		CursorSource = "wellhist", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 430, ;
		Name = "Cursor12", ;
		Top = 260, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor13' AS cursor WITH ;
		Alias = "wellinv", ;
		CursorSource = "wellinv", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 11, ;
		Name = "Cursor13", ;
		Top = 384, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor14' AS cursor WITH ;
		Alias = "programs", ;
		CursorSource = "programs", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 250, ;
		Name = "Cursor14", ;
		Top = 510, ;
		Width = 91
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor15' AS cursor WITH ;
		Alias = "vendor", ;
		CursorSource = "vendor", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 290, ;
		Name = "Cursor15", ;
		Top = 380, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor16' AS cursor WITH ;
		Alias = "sysctl", ;
		CursorSource = "sysctl", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 430, ;
		Name = "Cursor16", ;
		Top = 380, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor17' AS cursor WITH ;
		Alias = "options", ;
		CursorSource = "options", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor17", ;
		Top = 500, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor2' AS cursor WITH ;
		Alias = "groups", ;
		CursorSource = "groups", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 132, ;
		Name = "Cursor2", ;
		Top = 21, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor3' AS cursor WITH ;
		Alias = "wells", ;
		CursorSource = "wells", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 290, ;
		Name = "Cursor3", ;
		Top = 20, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor4' AS cursor WITH ;
		Alias = "glopt", ;
		CursorSource = "glopt", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 1, ;
		Name = "Cursor4", ;
		Top = 141, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor5' AS cursor WITH ;
		Alias = "disbhist", ;
		CursorSource = "disbhist", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 399, ;
		Name = "Cursor5", ;
		Top = 14, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor6' AS cursor WITH ;
		Alias = "expense", ;
		CursorSource = "expense", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 150, ;
		Name = "Cursor6", ;
		Top = 140, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor7' AS cursor WITH ;
		Alias = "expcat", ;
		CursorSource = "expcat", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 290, ;
		Name = "Cursor7", ;
		Top = 140, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor8' AS cursor WITH ;
		Alias = "suspense", ;
		BufferModeOverride = 5, ;
		CursorSource = "suspense", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 152, ;
		Name = "Cursor8", ;
		Top = 380, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor9' AS cursor WITH ;
		Alias = "revcat", ;
		CursorSource = "revcat", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 14, ;
		Name = "Cursor9", ;
		Top = 262, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

ENDDEFINE

DEFINE CLASS formdmrsuspense AS frmrptcriteria OF "..\source\appforms.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="chkOwnPage" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkPrograms" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Runcombo1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Swrptlook1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chksummarize" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="LblEndID" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="LblBegID" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboReportType" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chklAllGroups" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkByWell" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkExcludePmts" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkExclCleared" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkSelected" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblSelected" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: getlasttype
		*p: lbywell		&& Whether the report is being run by well.
		*p: lcloserun
	*</DefinedPropArrayMethod>

	Caption = "Suspense Reports"
	DataSession = 2
	DoCreate = .T.
	Height = 531
	HelpContextID = 165
	lbywell = .F.		&& Whether the report is being run by well.
	Name = "FormDmrsuspense"
	Visible = .T.
	Width = 548
	Swrptcriteriabuttons1.CHKEXPORT.Alignment = 0
	Swrptcriteriabuttons1.CHKEXPORT.Name = "CHKEXPORT"
	Swrptcriteriabuttons1.cmdclose.Name = "cmdclose"
	Swrptcriteriabuttons1.cmdPreview.Name = "cmdPreview"
	Swrptcriteriabuttons1.cmdPrint.Name = "cmdPrint"
	Swrptcriteriabuttons1.Left = 144
	Swrptcriteriabuttons1.Name = "Swrptcriteriabuttons1"
	Swrptcriteriabuttons1.TabIndex = 16
	Swrptcriteriabuttons1.Top = 433
	Swrptcriteriabuttons1.ZOrderSet = 0

	ADD OBJECT 'cboReportType' AS cbocomboboxcustom WITH ;
		BoundColumn = 2, ;
		Height = 20, ;
		Left = 160, ;
		Name = "cboReportType", ;
		TabIndex = 1, ;
		Top = 35, ;
		Width = 301
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="combobox" />

	ADD OBJECT 'chkByWell' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Subtotal by Well ID", ;
		Left = 80, ;
		Name = "chkByWell", ;
		TabIndex = 11, ;
		Top = 296, ;
		Value = .T.
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkExclCleared' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Exclude Cleared Suspense Entries", ;
		Left = 80, ;
		Name = "chkExclCleared", ;
		TabIndex = 15, ;
		Top = 355, ;
		Value = .F.
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkExcludePmts' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Exclude Pmt Records", ;
		Left = 320, ;
		Name = "chkExcludePmts", ;
		TabIndex = 14, ;
		Top = 325, ;
		Value = .F.
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chklAllGroups' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Include Suspense Entries from All Groups", ;
		Left = 80, ;
		Name = "chklAllGroups", ;
		TabIndex = 13, ;
		Top = 325, ;
		Value = .F.
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkOwnPage' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Start a New Page for Each Owner", ;
		Left = 80, ;
		Name = "chkOwnPage", ;
		TabIndex = 9, ;
		Top = 267, ;
		Value = .F.
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkPrograms' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Subtotal by Program", ;
		Left = 320, ;
		Name = "chkPrograms", ;
		TabIndex = 12, ;
		Top = 296, ;
		Value = .F.
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkSelected' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Choose Selected Owners", ;
		Left = 186, ;
		Name = "chkSelected", ;
		TabIndex = 5, ;
		Top = 117, ;
		Value = .F.
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chksummarize' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Summarize by Owner", ;
		Left = 320, ;
		Name = "chksummarize", ;
		TabIndex = 10, ;
		Top = 267, ;
		Value = .F.
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'LblBegID' AS lbllabelcustom WITH ;
		AutoSize = .T., ;
		Caption = "First Owner:", ;
		FontSize = 8, ;
		Height = 16, ;
		Left = 91, ;
		Name = "LblBegID", ;
		TabIndex = 7, ;
		Top = 144, ;
		Width = 63, ;
		ZOrderSet = 9
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'LblEndID' AS lbllabelcustom WITH ;
		AutoSize = .T., ;
		Caption = "Last Owner:", ;
		FontSize = 8, ;
		Height = 16, ;
		Left = 91, ;
		Name = "LblEndID", ;
		TabIndex = 8, ;
		Top = 195, ;
		Width = 63, ;
		ZOrderSet = 8
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom1' AS lbllabelcustom WITH ;
		Caption = "As of Run No", ;
		Left = 87, ;
		Name = "Lbllabelcustom1", ;
		TabIndex = 4, ;
		Top = 80
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom2' AS lbllabelcustom WITH ;
		Caption = "Report Type:", ;
		Left = 90, ;
		Name = "Lbllabelcustom2", ;
		TabIndex = 2, ;
		Top = 37
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblSelected' AS lbllabelcustom WITH ;
		Caption = "All Owners Selected", ;
		ForeColor = 0,0,255, ;
		Left = 206, ;
		Name = "lblSelected", ;
		TabIndex = 17, ;
		Top = 178, ;
		Visible = .F.
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Runcombo1' AS runcombo WITH ;
		ColumnWidths = "235,0,0", ;
		cshowwhat = R, ;
		Height = 20, ;
		Left = 160, ;
		lshownew = .F., ;
		Name = "Runcombo1", ;
		TabIndex = 3, ;
		Top = 78, ;
		Width = 300
		*< END OBJECT: ClassLib="..\custom\swcontrol.vcx" BaseClass="combobox" />

	ADD OBJECT 'Swrptlook1' AS swrptlook WITH ;
		Left = 185, ;
		Name = "Swrptlook1", ;
		TabIndex = 6, ;
		Top = 141, ;
		ZOrderSet = 6, ;
		Swlookupbutton1.Name = "Swlookupbutton1", ;
		Swlookupbutton2.Name = "Swlookupbutton2", ;
		TxtBegID.clistexpression = investor.cOwnerid, ;
		TxtBegID.clistworkarea = investor, ;
		TxtBegID.InputMask = "", ;
		TxtBegID.MaxLength = 10, ;
		TxtBegID.Name = "TxtBegID", ;
		TxtBegName.Name = "TxtBegName", ;
		TxtEndID.clistexpression = investor.cOwnerid, ;
		TxtEndID.clistworkarea = investor, ;
		TxtEndID.InputMask = "", ;
		TxtEndID.MaxLength = 10, ;
		TxtEndID.Name = "TxtEndID", ;
		TxtEndName.Name = "TxtEndName"
		*< END OBJECT: ClassLib="..\custom\swcontrol.vcx" BaseClass="container" />
	
	PROCEDURE builddata
		LOCAL tcOwner1, tcOwner2, tcRunYear, tcPeriod, tlSummary, llSummarize, tcReportType, tcGroup, lcGroupSelect
		LOCAL lcGroupSelect1, llAllGroups, oSuspense
		LOCAL lOrderGroup, lOrderGroup1, lcOrderGroupS, lcRecType, llExclude, llReturn, lnCount, lnMax
		LOCAL loError, cprogcode, cprogname, cwellname, nsevtaxes, tcDMBatch, tcWellID1, tcWellID2, tdAcctDate
		LOCAL tlOwnPage, tlPrograms, tlSummarize, tnRunNo, llExcludeClr, lcChosenRun
		
		llReturn = .T.
		
		m.goApp.oLogger.StartProcess('Suspense Reports - Start')
		
		
		TRY
		   tcOwner1     = THISFORM.swrptlook1.txtBegID.VALUE
		   tcOwner2     = THISFORM.swrptlook1.txtEndID.VALUE
		   tcRunYear    = THISFORM.runcombo1.LISTITEM[thisform.runcombo1.listitemid, 2]
		   tnRunNo      = INT(VAL(THISFORM.runcombo1.LISTITEM[thisform.runcombo1.listitemid, 3]))
		   tlSummarize  = THISFORM.chksummarize.VALUE
		   tlByWell     = THISFORM.chkbyWell.VALUE
		   tcReportType = THISFORM.cboreportType.VALUE
		
		   tcGroup    = THISFORM.runcombo1.LISTITEM[thisform.runcombo1.listitemid, 4]
		   tdAcctDate = CTOD(THISFORM.runcombo1.LISTITEM[thisform.runcombo1.listitemid, 7])
		
		   tcDMBatch      = THISFORM.runcombo1.LISTITEM[thisform.runcombo1.listitemid, 5]
		   tlOwnPage      = THISFORM.chkOwnPage.VALUE
		   tlPrograms     = THISFORM.chkPrograms.VALUE
		   lcGroupSelect  = '.t.'
		   lcGroupSelect1 = '.t.'
		   llAllGroups    = THISFORM.chklAllGroups.VALUE
		   llExcludePmts  = THISFORM.chkExcludePmts.VALUE
		   llExcludeClr   = THISFORM.chkexclCleared.VALUE
		   llSelected     = THISFORM.chkselected.VALUE
		
		   m.goApp.Rushmore(.T., 'Suspense Reports - ' + tcReportType)
		   IF NOT llSelected
		      IF NOT THISFORM.lbywell
		         SELECT cownerid AS cid FROM investor ;
		            WHERE BETWEEN(cownerid,tcOwner1,tcOwner2) ;
		            INTO CURSOR SELECTED ;
		            ORDER BY cid
		      ELSE
		         SELECT cwellid AS cid FROM wells ;
		            WHERE BETWEEN(cwellid,tcOwner1,tcOwner2) ;
		            INTO CURSOR SELECTED ;
		            ORDER BY cid
		      ENDIF
		   ENDIF
		
		   * Create suspense object
		   oSuspense          = CREATEOBJECT('suspense')
		   oSuspense.cRunyear = tcRunYear
		   oSuspense.nRunno   = tnRunNo
		
		   lcChosenRun = tcRunYear + PADL(TRANSFORM(tnRunNo), 3, '0')
		
		   IF llAllGroups = .T.
		      tcGroup = '**'
		   ENDIF
		
		   DO CASE
		      CASE tcReportType = 'ONET'
		         THISFORM.cTitle1 = 'Owner Suspense - All Items'
		      CASE tcReportType = 'OMIN'
		         THISFORM.cTitle1 = 'Owner Suspense - Cumulative Minimums'
		      CASE tcReportType = 'OLEGL'
		         THISFORM.cTitle1 = 'Owner Suspense - Cumulative Legal Suspense'   
		      CASE tcReportType = 'ODEF'
		         THISFORM.cTitle1 = 'Owner Suspense - Cumulative Deficits'
		      CASE tcReportType = 'OHOLD'
		         THISFORM.cTitle1 = 'Owner Suspense - Owner/Interest Holds'
		      CASE tcReportType = 'OFREQ'
		         THISFORM.cTitle1 = 'Owner Suspense - Disbursement Frequency Suspense'
		      CASE tcReportType = 'ODRUN'
		         THISFORM.cTitle1 = 'Owner Suspense - Deficits for a Run'
		      CASE tcReportType = 'OMRUN'
		         THISFORM.cTitle1 = 'Owner Suspense - Minimums for a Run'
		      CASE tcReportType = 'OHRUN'
		         THISFORM.cTitle1 = 'Owner Suspense - Holds for a Run'
		      CASE tcReportType = 'OSUSP'
		         THISFORM.cTitle1 = 'Owner Suspense - Legal & Minimum Suspense'
		      CASE tcReportType = 'WMIN'
		         THISFORM.cTitle1 = 'Well Suspense - Cumulative Revenue Suspense'
		      CASE tcReportType = 'WDEF'
		         THISFORM.cTitle1 = 'Well Suspense - Cumulative Deficits'
		   ENDCASE
		
		   IF tlSummarize
		      THISFORM.cTitle1 = THISFORM.cTitle1 + ' (Summary)'
		   ENDIF
		
		   CREATE CURSOR disbchks ;
		      (cRptGroup       C(1), ;
		      cownerid         C(10), ;
		      cOwnname         C(40), ;
		      cwellid          C(10), ;
		      cDeck            C(10), ;
		      nincome          N(12, 2), ;
		      noilrev          N(12, 2), ;
		      ngasrev          N(12, 2), ;
		      nothrev          N(12, 2), ;
		      ngrossbbl        N(12, 2), ;
		      ngrossmcf        N(12, 2), ;
		      ntotbbl          N(12, 2), ;
		      ntotmcf          N(12, 2), ;
		      ntotprod         N(12, 2), ;
		      ctypeinv         C(1), ;
		      ctypeint         C(1), ;
		      cdirect          C(1), ;
		      cGroup           C(2), ;
		      nexpense         N(12, 2), ;
		      nsevtaxes        N(12, 2), ;
		      ncompress        N(12, 2), ;
		      ngather          N(12, 2), ;
		      nnetcheck        N(12, 2), ;
		      npricebbl        N(12, 4), ;
		      npricemcf        N(12, 4), ;
		      nworkint         N(11, 7), ;
		      nintclass1       N(11, 7), ;
		      nintclass2       N(11, 7), ;
		      nintclass3       N(11, 7), ;
		      nintclass4       N(11, 7), ;
		      nintclass5       N(11, 7), ;
		      nrevoil          N(11, 7), ;
		      nrevgas          N(11, 7), ;
		      nrevoth          N(11, 7), ;
		      nOiltax1         N(9, 2), ;
		      nOiltax2         N(9, 2), ;
		      nOiltax3         N(9, 2), ;
		      nOiltax4         N(9, 2), ;
		      nGastax1         N(9, 2), ;
		      nGastax2         N(9, 2), ;
		      nGastax3         N(9, 2), ;
		      nGastax4         N(9, 2), ;
		      lSev1O           L, ;
		      lSev2O           L, ;
		      lSev3O           L, ;
		      lSev4O           L, ;
		      lSev1G           L, ;
		      lSev2G           L, ;
		      lSev3G           L, ;
		      lSev4G           L, ;
		      lSev1P           L, ;
		      lSev2P           L, ;
		      lSev3P           L, ;
		      lSev4P           L, ;
		      nMisc            N(12, 2), ;
		      nOper            N(12, 2), ;
		      nTrans           N(12, 2), ;
		      hyear            C(4), ;
		      hperiod          C(2), ;
		      nRunno           i, ;
		      nclearrun        i, ;
		      cRunyear         C(4), ;
		      cprogcode        C(10), ;
		      cProgGroup       C(10), ;
		      cprogname        C(40), ;
		      cwellname        C(30) NULL, ;
		      lPriorSusp       L, ;
		      lCleared         L, ;
		      cSuspType        C(1), ;
		      creason          C(3), ;
		      ncheck_amt       N(12, 2))
		
		   CREATE CURSOR disbchksd ;
		      (cRptGroup       C(1), ;
		      cownerid         C(10), ;
		      cOwnname         C(40), ;
		      cwellid          C(10), ;
		      cDeck            C(10), ;
		      nincome          N(12, 2), ;
		      noilrev          N(12, 2), ;
		      ngasrev          N(12, 2), ;
		      nothrev          N(12, 2), ;
		      ngrossbbl        N(12, 2), ;
		      ngrossmcf        N(12, 2), ;
		      ntotbbl          N(12, 2), ;
		      ntotmcf          N(12, 2), ;
		      ntotprod         N(12, 2), ;
		      ctypeinv         C(1), ;
		      ctypeint         C(1), ;
		      cdirect          C(1), ;
		      cGroup           C(2), ;
		      nexpense         N(12, 2), ;
		      nsevtaxes        N(12, 2), ;
		      ncompress        N(12, 2), ;
		      ngather          N(12, 2), ;
		      nnetcheck        N(12, 2), ;
		      npricebbl        N(12, 4), ;
		      npricemcf        N(12, 4), ;
		      nworkint         N(11, 7), ;
		      nintclass1       N(11, 7), ;
		      nintclass2       N(11, 7), ;
		      nintclass3       N(11, 7), ;
		      nintclass4       N(11, 7), ;
		      nintclass5       N(11, 7), ;
		      nrevoil          N(11, 7), ;
		      nrevgas          N(11, 7), ;
		      nrevoth          N(11, 7), ;
		      nOiltax1         N(9, 2), ;
		      nOiltax2         N(9, 2), ;
		      nOiltax3         N(9, 2), ;
		      nOiltax4         N(9, 2), ;
		      nGastax1         N(9, 2), ;
		      nGastax2         N(9, 2), ;
		      nGastax3         N(9, 2), ;
		      nGastax4         N(9, 2), ;
		      lSev1O           L, ;
		      lSev2O           L, ;
		      lSev3O           L, ;
		      lSev4O           L, ;
		      lSev1G           L, ;
		      lSev2G           L, ;
		      lSev3G           L, ;
		      lSev4G           L, ;
		      lSev1P           L, ;
		      lSev2P           L, ;
		      lSev3P           L, ;
		      lSev4P           L, ;
		      nMisc            N(12, 2), ;
		      nOper            N(12, 2), ;
		      nTrans           N(12, 2), ;
		      hyear            C(4), ;
		      hperiod          C(2), ;
		      nRunno           i, ;
		      nclearrun        i, ;
		      cRunyear         C(4), ;
		      cprogcode        C(10), ;
		      cprogname        C(40), ;
		      cwellname        C(30) NULL, ;
		      lPriorSusp       L, ;
		      lCleared         L, ;
		      cProgGroup       C(10), ;
		      cSuspType        C(1), ;
		      cReason          C(3), ;
		      ncheck_amt       N(12, 2))
		
		   INDEX ON cownerid TAG cownerid
		   INDEX ON cprogcode TAG cprogcode
		   INDEX ON ctypeinv TAG ctypeinv
		   INDEX ON cwellid TAG cwellid
		
		   IF tcGroup = '**'
		      THISFORM.cTitle2 = '**  All Groups  **  As of Run: ' + PADL(ALLT(STR(tnRunNo)), 3, '0') + '/' + tcRunYear
		   ELSE
		      THISFORM.cTitle2 = ' Group: ' + tcGroup + ' As of Run: ' + PADL(ALLT(STR(tnRunNo)), 3, '0') + '/' + tcRunYear
		      lcGroupSelect    = 'suspense.cGroup = tcGroup'
		      lcGroupSelect1   = 'disbhist.cGroup = tcGroup'
		   ENDIF
		
		   m.llProgram = tlPrograms
		
		   *  Clean up suspense records with a blank record type on them
		   WAIT WINDOW NOWAIT 'Cleaning up suspense file...'
		   swselect('suspense', .T.)
		   LOCATE FOR cRecType = ' '
		   IF FOUND()
		      REPLACE cRecType WITH 'R' FOR cRecType = ' '
		   ENDIF
		   TABLEUPDATE(.T.)
		   WAIT CLEAR
		
		   IF llExcludePmts
		      lcRecType = [suspense.cRecType = 'R']
		   ELSE
		      lcRecType = [(suspense.cRecType = 'R' or suspense.cRecType = 'P')]
		   ENDIF
		
		   IF NOT THISFORM.lbywell  &&  Owner Suspense
		
		      THISFORM.cSelectCriteria = ''
		      THISFORM.cSortOrder      = 'Owner ID'
		
		      swselect('wells')
		      SET ORDER TO cwellid
		      GO TOP
		      tcWellID1 = cwellid
		      GO BOTT
		      tcWellID2 = cwellid
		
		      DO CASE
		         CASE tlPrograms   &&  Summing by program
		            lOrderGroup  = 'suspense.cOwnerID, suspense.cProgCode, suspense.cwellid,' + ;
		               'suspense.ctypeinv, suspense.hyear, suspense.hperiod,' + ;
		               'suspense.ctypeint, suspense.nrunno, suspense.crunyear, suspense.nRunNo_in, suspense.cRunYear_in'
		            lOrderGroup1 = 'disbhist.cOwnerID, disbhist.cProgCode, disbhist.cwellid,' + ;
		               'disbhist.ctypeinv, disbhist.hyear, disbhist.hperiod,' + ;
		               'disbhist.ctypeint, disbhist.nrunno, disbhist.crunyear, disbhist.nRunNo_in, disbhist.cRunYear_in'
		         CASE tlSummarize AND NOT tlByWell
		            lOrderGroup  = 'suspense.cOwnerID, suspense.cprogcode, suspense.ctypeinv,' + ;
		               'suspense.hyear, suspense.hperiod, suspense.cwellid, suspense.ctypeint,' + ;
		               'suspense.cprogcode, suspense.nrunno, suspense.crunyear, suspense.nRunNo_in, suspense.cRunYear_in'
		            lOrderGroup1 = 'disbhist.cOwnerID, disbhist.cprogcode, disbhist.ctypeinv,' + ;
		               'disbhist.hyear, disbhist.hperiod, disbhist.cwellid, disbhist.ctypeint,' + ;
		               'disbhist.cprogcode, disbhist.nrunno, disbhist.crunyear, disbhist.nRunNo_in, disbhist.cRunYear_in'
		         CASE tlSummarize AND tlByWell
		            lOrderGroup  = 'suspense.cOwnerID, suspense.cwellid, suspense.ctypeinv, suspense.hyear,' + ;
		               'suspense.hperiod,  suspense.ctypeint, suspense.cprogcode, suspense.nrunno, suspense.crunyear,' + ;
		               'suspense.nRunNo_in, suspense.cRunYear_in'
		            lOrderGroup1 = 'disbhist.cOwnerID, disbhist.cwellid, disbhist.ctypeinv, disbhist.hyear, disbhist.hperiod,' + ;
		               'disbhist.ctypeint, disbhist.cprogcode, disbhist.nrunno, disbhist.crunyear, disbhist.nRunNo_in, disbhist.cRunYear_in'
		         OTHERWISE
		            lOrderGroup  = 'suspense.cOwnerID,  suspense.cwellid, suspense.ctypeinv, suspense.hyear, suspense.hperiod,' + ;
		               'suspense.ctypeint, suspense.nrunno, suspense.crunyear, suspense.nRunNo_in, suspense.cRunYear_in'
		            lOrderGroup1 = 'disbhist.cOwnerID, disbhist.cwellid, disbhist.ctypeinv, disbhist.hyear, disbhist.hperiod,' + ;
		               'disbhist.ctypeint, disbhist.nrunno, disbhist.crunyear, disbhist.nRunNo_in, disbhist.cRunYear_in'
		      ENDCASE
		
		      DO CASE
		         CASE tlSummarize AND NOT tlByWell
		            lcOrderGroupS = 'disbchksd.cOwnerID, disbchksd.ctypeinv, disbchksd.creason, disbchksd.nclearrun,  lcleared'
		         CASE tlSummarize AND tlByWell
		            lcOrderGroupS = 'disbchksd.cOwnerID, disbchksd.ctypeinv, disbchksd.cwellid, disbchksd.nclearrun, lcleared'
		         OTHERWISE
		            lcOrderGroupS = 'disbchksd.cSuspType,disbchksd.cOwnerID, disbchksd.ctypeinv, disbchksd.creason, disbchksd.nclearrun, lcleared'
		      ENDCASE
		
		      WAIT WIND NOWAIT 'Building Report File....'
		
		      DO CASE
		         CASE NOT tlSummarize
		            THISFORM.creportname = 'dmrosusp1.frx'
		         CASE tlSummarize AND NOT tlByWell
		            THISFORM.creportname = 'dmrosusp2.frx'
		         OTHERWISE
		            THISFORM.creportname = 'dmrosuspw.frx'
		      ENDCASE
		
		      SET SAFETY OFF
		
		
		      SET TALK ON
		
		      m.goApp.oLogger.LogMileStone('Suspense Reports - Selecting Data')
		
		      *
		      * Get entries still in suspense
		      *
		      SELECT  suspense.cownerid, ;
		         investor.cOwnname, ;
		         suspense.cwellid, ;
		         cdeck, ;
		         SUM(suspense.nincome) AS nincome, ;
		         IIF(INLIST(suspense.cdirect, 'O', 'B'), 000000.00, SUM(suspense.noilrev)) AS noilrev, ;
		         IIF(INLIST(suspense.cdirect, 'G', 'B'), 000000.00, SUM(suspense.ngasrev)) AS ngasrev, ;
		         SUM(suspense.ntrprev + suspense.nmiscrev1 + suspense.nmiscrev2 + suspense.nothrev) AS nothrev, ;
		         suspense.ctypeinv, ;
		         suspense.ctypeint, ;
		         suspense.cdirect, ;
		         suspense.nrevoil, ;
		         suspense.cGroup, ;
		         suspense.nrevgas, ;
		         suspense.nrevoth, ;
		         suspense.nRunno AS nclearrun, ;
		         suspense.nrunno_in AS nRunno, ;
		         suspense.crunyear_in AS cRunyear, ;
		         SUM(suspense.nexpense + ;
		         suspense.ntotale1 + ;
		         suspense.ntotale2 + ;
		         suspense.ntotale3 + ;
		         suspense.ntotale4 + ;
		         suspense.ntotale5 + ;
		         suspense.ntotaleA + ;
		         suspense.ntotaleB + ;
		         suspense.nmktgexp) AS nexpense, ;
		         suspense.nworkint, ;
		         suspense.nintclass1, ;
		         suspense.nintclass2, ;
		         suspense.nintclass3, ;
		         suspense.nintclass4, ;
		         suspense.nintclass5, ;
		         suspense.nbcpint, ;
		         suspense.nacpint, ;
		         SUM(suspense.nOiltax1) AS nOiltax1, ;
		         SUM(suspense.nOiltax2) AS nOiltax2, ;
		         SUM(suspense.nOiltax3) AS nOiltax3, ;
		         SUM(suspense.nOiltax4) AS nOiltax4, ;
		         SUM(suspense.nGastax1) AS nGastax1, ;
		         SUM(suspense.nGastax2) AS nGastax2, ;
		         SUM(suspense.nGastax3) AS nGastax3, ;
		         SUM(suspense.nGastax4) AS nGastax4, ;
		         SUM(suspense.nsevtaxes + suspense.nTaxWith + suspense.nBackWith) AS nsevtaxes, ;
		         SUM(suspense.ngather)   AS ngather, ;
		         SUM(suspense.ncompress) AS ncompress, ;
		         SUM(suspense.nnetcheck) AS nnetcheck, ;
		         suspense.cSuspType, ;
		         suspense.hyear, ;
		         suspense.hperiod, ;
		         NVL(suspense.cprogcode,'NONE') AS cprogcode, ;
		         wells.cwellname, ;
		         suspense.creason, ;
		         NVL(wells.lSev1O,.F.) AS lSev1O, ;
		         NVL(wells.lSev2O,.F.) AS lSev2O, ;
		         NVL(wells.lSev3O,.F.) AS lSev3O, ;
		         NVL(wells.lSev4O,.F.) AS lSev4O, ;
		         NVL(wells.lSev1G,.F.) AS lSev1G, ;
		         NVL(wells.lSev2G,.F.) AS lSev2G, ;
		         NVL(wells.lSev3G,.F.) AS lSev3G, ;
		         NVL(wells.lSev4G,.F.) AS lSev4G, ;
		         NVL(programs.cprogname,'NON PROGRAM WELL') AS cprogname, ;
		         0.00  AS ncheck_amt ;
		         FROM suspense ;
		         LEFT JOIN wells ;
		         ON suspense.cwellid = wells.cwellid ;
		         JOIN investor ;
		         ON suspense.cownerid = investor.cownerid ;
		         LEFT OUTER JOIN programs ;
		         ON suspense.cprogcode = programs.cprogcode ;
		         WHERE suspense.cownerid IN (SELECT cid FROM SELECTED) ;
		         AND suspense.crunyear_in + PADL(TRANSFORM(suspense.nrunno_in), 3, '0') <= lcChosenRun ;
		         AND IIF(tcGroup # '**', suspense.cGroup = tcGroup, .T.) ;
		         AND &lcRecType ;
		         AND NOT investor.lDummy ;
		         INTO CURSOR disbchk ;
		         ORDER BY &lOrderGroup ;
		         GROUP BY &lOrderGroup
		
		
		      SELECT disbchksd
		      APPEND FROM DBF('disbchk')
		
		      *
		      * Get suspense covered
		      *
		      SELECT  disbhist.cownerid, ;
		         investor.cOwnname, ;
		         disbhist.cwellid, ;
		         cdeck, ;
		         SUM(disbhist.nincome) AS nincome, ;
		         IIF(INLIST(disbhist.cdirect, 'O', 'B'), 000000.00, SUM(disbhist.noilrev)) AS noilrev, ;
		         IIF(INLIST(disbhist.cdirect, 'G', 'B'), 000000.00, SUM(disbhist.ngasrev)) AS ngasrev, ;
		         SUM(disbhist.ntrprev + disbhist.nmiscrev1 + disbhist.nmiscrev2 + disbhist.nothrev) AS nothrev, ;
		         disbhist.ctypeinv, ;
		         disbhist.ctypeint, ;
		         disbhist.cdirect, ;
		         disbhist.cGroup, ;
		         ownpcts.nrevoil, ;
		         ownpcts.nrevgas, ;
		         ownpcts.nrevoth, ;
		         disbhist.nRunno AS nclearrun, ;
		         disbhist.nrunno_in AS nRunno, ;
		         disbhist.crunyear_in AS cRunyear, ;
		         SUM(disbhist.nexpense + ;
		         disbhist.ntotale1 + ;
		         disbhist.ntotale2 + ;
		         disbhist.ntotale3 + ;
		         disbhist.ntotale4 + ;
		         disbhist.ntotale5 + ;
		         disbhist.ntotaleA + ;
		         disbhist.ntotaleB + ;
		         disbhist.nmktgexp) AS nexpense, ;
		         ownpcts.nworkint, ;
		         ownpcts.nintclass1, ;
		         ownpcts.nintclass2, ;
		         ownpcts.nintclass3, ;
		         ownpcts.nintclass4, ;
		         ownpcts.nintclass5, ;
		         ownpcts.nbcpint, ;
		         ownpcts.nacpint, ;
		         SUM(disbhist.nOiltax1) AS nOiltax1, ;
		         SUM(disbhist.nOiltax2) AS nOiltax2, ;
		         SUM(disbhist.nOiltax3) AS nOiltax3, ;
		         SUM(disbhist.nOiltax4) AS nOiltax4, ;
		         SUM(disbhist.nGastax1) AS nGastax1, ;
		         SUM(disbhist.nGastax2) AS nGastax2, ;
		         SUM(disbhist.nGastax3) AS nGastax3, ;
		         SUM(disbhist.nGastax4) AS nGastax4, ;
		         SUM(disbhist.nsevtaxes + disbhist.nTaxWith + disbhist.nBackWith) AS nsevtaxes, ;
		         SUM(disbhist.ngather)   AS ngather, ;
		         SUM(disbhist.ncompress) AS ncompress, ;
		         SUM(disbhist.nnetcheck) AS nnetcheck, ;
		         disbhist.cSuspType, ;
		         disbhist.hyear, ;
		         disbhist.hperiod, ;
		         NVL(disbhist.cprogcode,'NONE') AS cprogcode, ;
		         wells.cwellname, ;
		         disbhist.creason, ;
		         NVL(wells.lSev1O,.F.) AS lSev1O, ;
		         NVL(wells.lSev2O,.F.) AS lSev2O, ;
		         NVL(wells.lSev3O,.F.) AS lSev3O, ;
		         NVL(wells.lSev4O,.F.) AS lSev4O, ;
		         NVL(wells.lSev1G,.F.) AS lSev1G, ;
		         NVL(wells.lSev2G,.F.) AS lSev2G, ;
		         NVL(wells.lSev3G,.F.) AS lSev3G, ;
		         NVL(wells.lSev4G,.F.) AS lSev4G, ;
		         NVL(programs.cprogname,'NON PROGRAM WELL') AS cprogname, ;
		         0.00  AS ncheck_amt ;
		         FROM disbhist ;
		         JOIN ownpcts ;
		         ON disbhist.ciddisb == ownpcts.ciddisb ;
		         LEFT JOIN wells ;
		         ON disbhist.cwellid = wells.cwellid ;
		         JOIN investor ;
		         ON disbhist.cownerid = investor.cownerid ;
		         LEFT OUTER JOIN programs ;
		         ON disbhist.cprogcode = programs.cprogcode ;
		         WHERE disbhist.cownerid IN (SELECT cid FROM SELECTED) ;
		         AND disbhist.cRunyear + PADL(TRANSFORM(disbhist.nRunno), 3, '0') > lcChosenRun ;
		         AND disbhist.crunyear_in + PADL(TRANSFORM(disbhist.nrunno_in), 3, '0') <= lcChosenRun ;
		         AND disbhist.nrunno_in # 0 ;
		         AND IIF(tcGroup # '**', disbhist.cGroup = tcGroup, .T.) ;
		         AND IIF(llExcludePmts, disbhist.cRecType # 'P', .T.) ;
		         AND NOT investor.lDummy ;
		         INTO CURSOR disbchk ;
		         ORDER BY &lOrderGroup1 ;
		         GROUP BY &lOrderGroup1
		
		      SET TALK OFF
		
		      SELECT disbchksd
		      APPEND FROM DBF('disbchk')
		
		      m.goApp.oLogger.LogMileStone('Suspense Reports - Remove direct paid taxes')
		
		      lnMax   = RECC()
		      lnCount = 1
		      SELECT disbchksd
		      SET ORDER TO 0
		      SCAN
		         SCATTER MEMVAR
		         IF m.nclearrun = 9999 AND llExcludeClr
		            DELETE NEXT 1
		            LOOP
		         ENDIF
		
		         IF m.nclearrun = 9999
		            IF lcChosenRun < m.cRunyear + PADL(TRANSFORM(m.nRunno), 3, '0')
		               DELETE NEXT 1
		               LOOP
		            ENDIF
		            REPLACE lCleared WITH .T.
		         ENDIF
		
		         lnCount = lnCount + 1
		
		         DO CASE
		            CASE m.cdirect = 'O'
		               IF m.lSev1O
		                  m.nsevtaxes = m.nsevtaxes - m.nOiltax1
		               ENDIF
		               IF m.lSev2O
		                  m.nsevtaxes = m.nsevtaxes - m.nOiltax2
		               ENDIF
		               IF m.lSev3O
		                  m.nsevtaxes = m.nsevtaxes - m.nOiltax3
		               ENDIF
		               IF m.lSev4O
		                  m.nsevtaxes = m.nsevtaxes - m.nOiltax4
		               ENDIF
		            CASE m.cdirect = 'G'
		               IF m.lSev1G
		                  m.nsevtaxes = m.nsevtaxes - m.nGastax1
		               ENDIF
		               IF m.lSev2G
		                  m.nsevtaxes = m.nsevtaxes - m.nGastax2
		               ENDIF
		               IF m.lSev3G
		                  m.nsevtaxes = m.nsevtaxes - m.nGastax3
		               ENDIF
		               IF m.lSev4G
		                  m.nsevtaxes = m.nsevtaxes - m.nGastax4
		               ENDIF
		            CASE m.cdirect = 'B'
		               IF m.lSev1O
		                  m.nsevtaxes = m.nsevtaxes - m.nOiltax1
		               ENDIF
		               IF m.lSev2O
		                  m.nsevtaxes = m.nsevtaxes - m.nOiltax2
		               ENDIF
		               IF m.lSev3O
		                  m.nsevtaxes = m.nsevtaxes - m.nOiltax3
		               ENDIF
		               IF m.lSev4O
		                  m.nsevtaxes = m.nsevtaxes - m.nOiltax4
		               ENDIF
		               IF m.lSev1G
		                  m.nsevtaxes = m.nsevtaxes - m.nGastax1
		               ENDIF
		               IF m.lSev2G
		                  m.nsevtaxes = m.nsevtaxes - m.nGastax2
		               ENDIF
		               IF m.lSev3G
		                  m.nsevtaxes = m.nsevtaxes - m.nGastax3
		               ENDIF
		               IF m.lSev4G
		                  m.nsevtaxes = m.nsevtaxes - m.nGastax4
		               ENDIF
		         ENDCASE
		
		         SELECT disbchksd
		         IF disbchksd.nsevtaxes # m.nsevtaxes
		            REPL nsevtaxes WITH m.nsevtaxes
		         ENDIF
		
		      ENDSCAN
		
		
		      IF tcReportType # 'ONET'  &&  Not all entries, so pare it down by type
		         m.goApp.oLogger.LogMileStone('Suspense Reports - Removing Types')
		         * Create the suspense cursor
		
		         oSuspense.cBegOwner = tcOwner1  &&  Set owner parameters, so it doesn't create it for all owners if you're just running the report for a smaller subset
		         oSuspense.cEndOwner = tcOwner2
		
		         oSuspense.getlasttype(.T., .T., .F., .F., .T., .T.)
		
		         IF USED('owntemp')
		            USE IN owntemp
		         ENDIF
		
		         DO CASE
		            CASE tcReportType = 'OMIN'  
		               SELECT disbchksd
		               DELETE FROM disbchksd WHERE cownerid+cwellid+ctypeinv+cprogcode IN (SELECT cownerid+cwellid+ctypeinv+cprogcode FROM curlastsusptype WHERE cSuspType # 'M')
		            
		            CASE tcReportType = 'OLEGL'  
		               SELECT disbchksd
		               DELETE FROM disbchksd WHERE cownerid+cwellid+ctypeinv+cprogcode IN (SELECT cownerid+cwellid+ctypeinv+cprogcode FROM curlastsusptype WHERE NOT INLIST(cSuspType, 'I', 'H'))
		                  
		            CASE tcReportType = 'ODEF'  
		               SELECT disbchksd
		               DELETE FROM disbchksd WHERE cownerid+cwellid+ctypeinv+cprogcode IN (SELECT cownerid+cwellid+ctypeinv+cprogcode FROM curlastsusptype WHERE cSuspType # 'D')
		               
		            CASE tcReportType = 'OHOLD'  
		               SELECT disbchksd
		               DELETE FROM disbchksd WHERE cownerid+cwellid+ctypeinv+cprogcode IN (SELECT cownerid+cwellid+ctypeinv+cprogcode FROM curlastsusptype WHERE cSuspType # 'I' AND cSuspType # 'H')
		               
		            CASE tcReportType = 'OFREQ'  
		               SELECT disbchksd
		               DELETE FROM disbchksd WHERE cownerid+cwellid+ctypeinv+cprogcode IN (SELECT cownerid+cwellid+ctypeinv+cprogcode FROM curlastsusptype WHERE cSuspType # 'Q' AND cSuspType # 'S' AND cSuspType # 'A')
		               
		            CASE tcReportType = 'OSUSP'  
		               SELECT disbchksd
		               DELETE FROM disbchksd WHERE cownerid+cwellid+ctypeinv+cprogcode IN (SELECT cownerid+cwellid+ctypeinv+cprogcode FROM curlastsusptype WHERE cSuspType = 'D')
		               
		            CASE tcReportType = 'ODRUN'
		               SELECT disbchksd
		               DELETE FROM disbchksd WHERE cownerid+cwellid+ctypeinv+cprogcode IN (SELECT cownerid+cwellid+ctypeinv+cprogcode FROM curlastsusptype WHERE cSuspType # 'D')
		               
		            CASE tcReportType = 'OMRUN'
		               SELECT disbchksd
		               DELETE FROM disbchksd WHERE cownerid+cwellid+ctypeinv+cprogcode IN (SELECT cownerid+cwellid+ctypeinv+cprogcode FROM curlastsusptype WHERE cSuspType # 'M')
		               
		            CASE tcReportType = 'OHRUN'
		               SELECT disbchksd
		               DELETE FROM disbchksd WHERE cownerid+cwellid+ctypeinv+cprogcode IN (SELECT cownerid+cwellid+ctypeinv+cprogcode FROM curlastsusptype WHERE cSuspType # 'I' AND cSuspType # 'H')
		               
		         ENDCASE
		      ENDIF
		
		      IF 'RUN' $ tcReportType
		         m.goApp.oLogger.LogMileStone('Suspense Reports - Selecting for particular run')
		         SELECT disbchksd
		         SCAN FOR cRunyear + PADL(TRANSFORM(nRunno), 3, '0') # lcChosenRun
		            DELETE NEXT 1
		         ENDSCAN
		      ENDIF
		
		      m.goApp.oLogger.LogMileStone('Suspense Reports - Put suspense type on all records')
		
		      IF NOT tlSummarize  &&  Don't replace all the types with the same value when summarizing, since it splits it into separate lines by type - BH 10/22/07
		         oSuspense.getlasttype(.T., .T.)
		
		         SELECT disbchksd  &&  Since everything's been summed, make sure the suspense type is correct on the entry, so it gets reported right
		         SCAN
		            SELECT curlastsusptype
		            LOCATE FOR cownerid = disbchksd.cownerid AND cwellid = disbchksd.cwellid AND cprogcode = disbchksd.cprogcode AND ctypeinv = disbchksd.ctypeinv
		            IF FOUND()
		               IF curlastsusptype.cSuspType # disbchks.cSuspType
		                  REPLACE disbchksd.cSuspType WITH curlastsusptype.cSuspType
		               ENDIF
		            ENDIF
		         ENDSCAN
		      ELSE
		         IF tcGroup # '**'
		            oSuspense.getlasttype(.T., .T., tcGroup)
		         ELSE
		            oSuspense.getlasttype(.T., .T.)
		         ENDIF
		         WAIT WINDOW NOWAIT 'Processing suspense types...'
		         UPDATE disbchksd SET cSuspType = curlastsusptype.cSuspType ;
		            FROM disbchksd ;
		            JOIN curlastsusptype ;
		            ON  disbchksd.cownerid  = curlastsusptype.cownerid ;
		            AND disbchksd.cwellid   = curlastsusptype.cwellid ;
		            AND disbchksd.cprogcode = curlastsusptype.cprogcode ;
		            AND disbchksd.ctypeinv  = curlastsusptype.ctypeinv
		         WAIT CLEAR
		      ENDIF
		
		      DO CASE
		         CASE tlSummarize AND NOT tlByWell
		            m.goApp.oLogger.LogMileStone('Suspense Reports - Summarizing by Owner')
		            SELECT  disbchksd.cownerid, ;
		               disbchksd.cOwnname, ;
		               disbchksd.cwellid, ;
		               cdeck, ;
		               creason, ;
		               disbchksd.ctypeinv, ;
		               disbchksd.cGroup, ;
		               SUM(disbchksd.nincome)   AS nincome, ;
		               SUM(disbchksd.noilrev)   AS noilrev, ;
		               SUM(disbchksd.ngasrev)   AS ngasrev, ;
		               SUM(disbchksd.nothrev)   AS nothrev, ;
		               SUM(disbchksd.nexpense)  AS nexpense, ;
		               SUM(disbchksd.nOiltax1)  AS nOiltax1, ;
		               SUM(disbchksd.nOiltax2)  AS nOiltax2, ;
		               SUM(disbchksd.nOiltax3)  AS nOiltax3, ;
		               SUM(disbchksd.nOiltax4)  AS nOiltax4, ;
		               SUM(disbchksd.nGastax1)  AS nGastax1, ;
		               SUM(disbchksd.nGastax2)  AS nGastax2, ;
		               SUM(disbchksd.nGastax3)  AS nGastax3, ;
		               SUM(disbchksd.nGastax4)  AS nGastax4, ;
		               SUM(disbchksd.nsevtaxes) AS nsevtaxes, ;
		               SUM(disbchksd.ngather)   AS ngather, ;
		               SUM(disbchksd.ncompress) AS ncompress, ;
		               SUM(disbchksd.nnetcheck) AS nnetcheck, ;
		               disbchksd.cSuspType, ;
		               disbchksd.lCleared, ;
		               disbchksd.cprogcode, ;
		               disbchksd.cwellname, ;
		               disbchksd.ncheck_amt, ;
		               disbchksd.nclearrun, ;
		               disbchksd.lCleared ;
		               FROM disbchksd ;
		               INTO CURSOR temp ;
		               ORDER BY cownerid, creason ;
		               GROUP BY cownerid, creason
		
		            SELECT disbchks
		            APPEND FROM DBF('temp')
		         CASE tlSummarize AND tlByWell
		            m.goApp.oLogger.LogMileStone('Suspense Reports - Summarizing by Owner and Well')
		            SELECT  disbchksd.cownerid, ;
		               disbchksd.cOwnname, ;
		               disbchksd.cwellid, ;
		               cdeck, ;
		               disbchksd.ctypeinv, ;
		               disbchksd.cGroup, ;
		               disbchksd.creason, ;
		               SUM(disbchksd.nincome)   AS nincome, ;
		               SUM(disbchksd.noilrev)   AS noilrev, ;
		               SUM(disbchksd.ngasrev)   AS ngasrev, ;
		               SUM(disbchksd.nothrev)   AS nothrev, ;
		               SUM(disbchksd.nexpense)  AS nexpense, ;
		               SUM(disbchksd.nOiltax1)  AS nOiltax1, ;
		               SUM(disbchksd.nOiltax2)  AS nOiltax2, ;
		               SUM(disbchksd.nOiltax3)  AS nOiltax3, ;
		               SUM(disbchksd.nOiltax4)  AS nOiltax4, ;
		               SUM(disbchksd.nGastax1)  AS nGastax1, ;
		               SUM(disbchksd.nGastax2)  AS nGastax2, ;
		               SUM(disbchksd.nGastax3)  AS nGastax3, ;
		               SUM(disbchksd.nGastax4)  AS nGastax4, ;
		               SUM(disbchksd.nsevtaxes) AS nsevtaxes, ;
		               SUM(disbchksd.ngather)   AS ngather, ;
		               SUM(disbchksd.ncompress) AS ncompress, ;
		               SUM(disbchksd.nnetcheck) AS nnetcheck, ;
		               disbchksd.cSuspType, ;
		               disbchksd.lCleared, ;
		               disbchksd.cprogcode, ;
		               disbchksd.cwellname, ;
		               disbchksd.ncheck_amt, ;
		               disbchksd.nclearrun, ;
		               disbchksd.lCleared ;
		               FROM disbchksd ;
		               INTO CURSOR temp ;
		               ORDER BY cownerid, cwellid, creason ;
		               GROUP BY cownerid, cwellid, creason
		
		            SELECT disbchks
		            APPEND FROM DBF('temp')
		         OTHERWISE
		            SELECT disbchks
		            APPEND FROM DBF('disbchksd')
		      ENDCASE
		
		      SELECT disbchks
		
		      IF tlPrograms = .T.
		         IF tlSummarize
		            INDEX ON cownerid + cProgGroup + cwellid + cSuspType  TAG cownerid
		         ELSE
		            REPLACE cProgGroup WITH cprogcode ALL
		            INDEX ON cownerid + cProgGroup + cwellid + cSuspType  + cRunyear + PADL(TRANSFORM(nRunno), 3, '0') TAG cownerid
		         ENDIF
		         SET ORDER TO cownerid
		      ELSE
		         DO CASE
		            CASE tlSummarize AND NOT tlByWell
		               INDEX ON cownerid TAG ownerkey
		            CASE tlSummarize AND tlByWell
		               INDEX ON cownerid + cwellid TAG ownerkey
		            OTHERWISE
		               INDEX ON cownerid + cwellid + cRunyear + PADL(TRANSFORM(nRunno), 3, '0') + ctypeinv + cSuspType  TAG ownerkey
		         ENDCASE
		         SET ORDER TO ownerkey
		      ENDIF
		
		   ELSE  &&  Well Suspense
		
		      THISFORM.cSelectCriteria = ''
		      THISFORM.cSortOrder      = 'Well ID'
		
		      lOrderGroup   = 'suspense.cwellid, suspense.cOwnerID, suspense.ctypeinv, suspense.hyear, suspense.hperiod, suspense.cwellid, suspense.ctypeint, suspense.cprogcode, suspense.nrunno, suspense.crunyear, suspense.nRunNo_in, suspense.cRunYear_in'
		      lOrderGroup1  = 'disbhist.cwellid, disbhist.cOwnerID, disbhist.ctypeinv, disbhist.hyear, disbhist.hperiod, disbhist.cwellid, disbhist.ctypeint, disbhist.cprogcode, disbhist.nrunno, disbhist.crunyear, disbhist.nRunNo_in, disbhist.cRunYear_in'
		      lcOrderGroupS = 'disbchksd.cwellid,disbchksd.cOwnerID'
		
		      WAIT WIND NOWAIT 'Building Report File....'
		
		      IF NOT tlSummarize
		         THISFORM.creportname = 'dmrosusp3.frx'
		      ELSE
		         THISFORM.creportname = 'dmrosusp4.frx'
		      ENDIF
		
		      SET SAFETY OFF
		
		
		      *
		      * Get entries still in suspense
		      *
		      SELECT  suspense.cownerid, ;
		         investor.cOwnname, ;
		         suspense.cwellid, ;
		         cdeck, ;
		         SUM(suspense.nincome) AS nincome, ;
		         IIF(INLIST(suspense.cdirect, 'O', 'B'), 000000.00, SUM(suspense.noilrev)) AS noilrev, ;
		         IIF(INLIST(suspense.cdirect, 'G', 'B'), 000000.00, SUM(suspense.ngasrev)) AS ngasrev, ;
		         SUM(suspense.ntrprev + suspense.nmiscrev1 + suspense.nmiscrev2 + suspense.nothrev) AS nothrev, ;
		         suspense.ctypeinv, ;
		         suspense.ctypeint, ;
		         suspense.cdirect, ;
		         suspense.nrevoil, ;
		         suspense.nrevgas, ;
		         suspense.nrevoth, ;
		         suspense.nrunno_in AS nRunno, ;
		         suspense.crunyear_in AS cRunyear, ;
		         SUM(suspense.nexpense + ;
		         suspense.ntotale1 + ;
		         suspense.ntotale2 + ;
		         suspense.ntotale3 + ;
		         suspense.ntotale4 + ;
		         suspense.ntotale5 + ;
		         suspense.ntotaleA + ;
		         suspense.ntotaleB + ;
		         suspense.nmktgexp) AS nexpense, ;
		         suspense.nworkint, ;
		         suspense.nintclass1, ;
		         suspense.nintclass2, ;
		         suspense.nintclass3, ;
		         suspense.nintclass4, ;
		         suspense.nintclass5, ;
		         suspense.nbcpint, ;
		         suspense.nacpint, ;
		         SUM(suspense.nOiltax1) AS nOiltax1, ;
		         SUM(suspense.nOiltax2) AS nOiltax2, ;
		         SUM(suspense.nOiltax3) AS nOiltax3, ;
		         SUM(suspense.nOiltax4) AS nOiltax4, ;
		         SUM(suspense.nGastax1) AS nGastax1, ;
		         SUM(suspense.nGastax2) AS nGastax2, ;
		         SUM(suspense.nGastax3) AS nGastax3, ;
		         SUM(suspense.nGastax4) AS nGastax4, ;
		         SUM(suspense.nsevtaxes + suspense.nTaxWith + suspense.nBackWith) AS nsevtaxes, ;
		         SUM(suspense.ngather)   AS ngather, ;
		         SUM(suspense.ncompress) AS ncompress, ;
		         SUM(suspense.nnetcheck) AS nnetcheck, ;
		         suspense.cSuspType, ;
		         suspense.hyear, ;
		         suspense.hperiod, ;
		         suspense.cprogcode, ;
		         wells.cwellname, ;
		         suspense.creason, ;
		         0.00  AS ncheck_amt ;
		         FROM suspense ;
		         LEFT JOIN wells ;
		         ON suspense.cwellid = wells.cwellid ;
		         JOIN investor ;
		         ON suspense.cownerid = investor.cownerid ;
		         WHERE suspense.cwellid IN (SELECT cid FROM SELECTED) ;
		         AND (suspense.cRunyear + PADL(TRANSFORM(suspense.nRunno), 3, '0') <= lcChosenRun ;
		         OR suspense.crunyear_in + PADL(TRANSFORM(suspense.nrunno_in), 3, '0') <= lcChosenRun) ;
		         AND IIF(llExcludePmts, suspense.cRecType # 'P', .T.) ;
		         AND IIF(llExcludeClr, suspense.nRunno # 9999, .T.) ;
		         AND &lcGroupSelect ;
		         AND NOT investor.lDummy ;
		         INTO CURSOR disbchk ;
		         ORDER BY &lOrderGroup ;
		         GROUP BY &lOrderGroup
		
		      SELECT disbchksd
		      APPEND FROM DBF('disbchk')
		
		      *
		      * Get suspense covered
		      *
		      SELECT  disbhist.cownerid, ;
		         investor.cOwnname, ;
		         disbhist.cwellid, ;
		         cdeck, ;
		         SUM(disbhist.nincome) AS nincome, ;
		         IIF(INLIST(disbhist.cdirect, 'O', 'B'), 000000.00, SUM(disbhist.noilrev)) AS noilrev, ;
		         IIF(INLIST(disbhist.cdirect, 'G', 'B'), 000000.00, SUM(disbhist.ngasrev)) AS ngasrev, ;
		         SUM(disbhist.ntrprev + disbhist.nmiscrev1 + disbhist.nmiscrev2 + disbhist.nothrev) AS nothrev, ;
		         disbhist.ctypeinv, ;
		         disbhist.ctypeint, ;
		         disbhist.cdirect, ;
		         ownpcts.nrevoil, ;
		         ownpcts.nrevgas, ;
		         ownpcts.nrevoth, ;
		         disbhist.nrunno_in AS nRunno, ;
		         disbhist.crunyear_in AS cRunyear, ;
		         SUM(disbhist.nexpense + ;
		         disbhist.ntotale1 + ;
		         disbhist.ntotale2 + ;
		         disbhist.ntotale3 + ;
		         disbhist.ntotale4 + ;
		         disbhist.ntotale5 + ;
		         disbhist.ntotaleA + ;
		         disbhist.ntotaleB + ;
		         disbhist.nmktgexp) AS nexpense, ;
		         ownpcts.nworkint, ;
		         ownpcts.nintclass1, ;
		         ownpcts.nintclass2, ;
		         ownpcts.nintclass3, ;
		         ownpcts.nintclass4, ;
		         ownpcts.nintclass5, ;
		         ownpcts.nbcpint, ;
		         ownpcts.nacpint, ;
		         SUM(disbhist.nOiltax1) AS nOiltax1, ;
		         SUM(disbhist.nOiltax2) AS nOiltax2, ;
		         SUM(disbhist.nOiltax3) AS nOiltax3, ;
		         SUM(disbhist.nOiltax4) AS nOiltax4, ;
		         SUM(disbhist.nGastax1) AS nGastax1, ;
		         SUM(disbhist.nGastax2) AS nGastax2, ;
		         SUM(disbhist.nGastax3) AS nGastax3, ;
		         SUM(disbhist.nGastax4) AS nGastax4, ;
		         SUM(disbhist.nsevtaxes + disbhist.nTaxWith + disbhist.nBackWith) AS nsevtaxes, ;
		         SUM(disbhist.ngather)   AS ngather, ;
		         SUM(disbhist.ncompress) AS ncompress, ;
		         SUM(disbhist.nnetcheck) AS nnetcheck, ;
		         disbhist.cSuspType, ;
		         disbhist.hyear, ;
		         disbhist.hperiod, ;
		         disbhist.cprogcode, ;
		         wells.cwellname, ;
		         disbhist.creason, ;
		         0.00  AS ncheck_amt ;
		         FROM disbhist ;
		         LEFT JOIN wells ;
		         ON disbhist.cwellid = wells.cwellid ;
		         JOIN investor ;
		         ON disbhist.cownerid = investor.cownerid ;
		         JOIN ownpcts ;
		         ON disbhist.ciddisb = ownpcts.ciddisb ;
		         WHERE disbhist.cwellid IN (SELECT cid FROM SELECTED) ;
		         AND disbhist.cRunyear + PADL(TRANSFORM(disbhist.nRunno), 3, '0') > lcChosenRun ;
		         AND disbhist.crunyear_in + PADL(TRANSFORM(disbhist.nrunno_in), 3, '0') <= lcChosenRun ;
		         AND disbhist.nrunno_in # 0 ;
		         AND IIF(llExcludeClr, disbhist.nRunno # 9999, .T.) ;
		         AND IIF(tcGroup # '**', &lcGroupSelect1, .T.) ;
		         AND IIF(llExcludePmts, disbhist.cRecType # 'P', .T.) ;
		         INTO CURSOR disbchk ;
		         ORDER BY &lOrderGroup1 ;
		         GROUP BY &lOrderGroup1
		
		      SELECT disbchksd
		      APPEND FROM DBF('disbchk')
		
		      lnMax   = RECC()
		      lnCount = 1
		      SELECT disbchksd
		      SET ORDER TO 0
		      SCAN
		         SCATTER MEMVAR
		         lnCount = lnCount + 1
		
		         IF m.cwellid = 'ALL'
		            m.cwellname = 'Prior Period Balance'
		         ENDIF
		
		         swselect('programs')
		         SET ORDER TO cprogcode
		         SEEK m.cprogcode
		         IF FOUND()
		            m.cprogname = cprogname
		         ELSE
		            m.cprogcode = 'None'
		            m.cprogname = 'Non Program Wells'
		         ENDIF
		
		         SELECT disbchksd
		         REPL cwellname WITH m.cwellname, ;
		            cprogname WITH m.cprogname
		
		         swselect('wells')
		         SET ORDER TO cwellid
		         IF SEEK(m.cwellid)
		            SCATTER FIELDS LIKE lSev* MEMVAR
		         ELSE
		            LOOP
		         ENDIF
		         DO CASE
		            CASE m.cdirect = 'O'
		               IF m.lSev1O
		                  m.nsevtaxes = m.nsevtaxes - m.nOiltax1
		               ENDIF
		               IF m.lSev2O
		                  m.nsevtaxes = m.nsevtaxes - m.nOiltax2
		               ENDIF
		               IF m.lSev3O
		                  m.nsevtaxes = m.nsevtaxes - m.nOiltax3
		               ENDIF
		               IF m.lSev4O
		                  m.nsevtaxes = m.nsevtaxes - m.nOiltax4
		               ENDIF
		            CASE m.cdirect = 'G'
		               IF m.lSev1G
		                  m.nsevtaxes = m.nsevtaxes - m.nGastax1
		               ENDIF
		               IF m.lSev2G
		                  m.nsevtaxes = m.nsevtaxes - m.nGastax2
		               ENDIF
		               IF m.lSev3G
		                  m.nsevtaxes = m.nsevtaxes - m.nGastax3
		               ENDIF
		               IF m.lSev4G
		                  m.nsevtaxes = m.nsevtaxes - m.nGastax4
		               ENDIF
		            CASE m.cdirect = 'B'
		               IF m.lSev1O
		                  m.nsevtaxes = m.nsevtaxes - m.nOiltax1
		               ENDIF
		               IF m.lSev2O
		                  m.nsevtaxes = m.nsevtaxes - m.nOiltax2
		               ENDIF
		               IF m.lSev3O
		                  m.nsevtaxes = m.nsevtaxes - m.nOiltax3
		               ENDIF
		               IF m.lSev4O
		                  m.nsevtaxes = m.nsevtaxes - m.nOiltax4
		               ENDIF
		               IF m.lSev1G
		                  m.nsevtaxes = m.nsevtaxes - m.nGastax1
		               ENDIF
		               IF m.lSev2G
		                  m.nsevtaxes = m.nsevtaxes - m.nGastax2
		               ENDIF
		               IF m.lSev3G
		                  m.nsevtaxes = m.nsevtaxes - m.nGastax3
		               ENDIF
		               IF m.lSev4G
		                  m.nsevtaxes = m.nsevtaxes - m.nGastax4
		               ENDIF
		         ENDCASE
		         SELECT disbchksd
		         REPL nsevtaxes WITH m.nsevtaxes
		
		      ENDSCAN
		
		      IF tcReportType # 'ONET'  &&  Not all entries, so pare it down by type
		         * Create the suspense cursor
		
		         oSuspense.getlasttype(.T., .T.)
		
		         IF USED('owntemp')
		            USE IN owntemp
		         ENDIF
		
		         SELECT cownerid, cwellid, .F. AS junk FROM disbchksd INTO CURSOR owntemp GROUP BY cownerid, cwellid
		         SELECT owntemp
		         SCAN
		            SCATTER MEMVAR
		            SELECT curlastsusptype
		            LOCATE FOR cownerid == m.cownerid AND cwellid == m.cwellid  &&  Find record in curlastsusptype cursor
		            IF FOUND()
		               DO CASE
		                  CASE tcReportType = 'WMIN' AND curlastsusptype.cSuspType = 'D'  &&  Last type is a deficit, so delete the recs from disbchksd.
		                     SELECT disbchksd
		                     SCAN FOR cownerid = m.cownerid AND cwellid = m.cwellid
		                        DELETE NEXT 1
		                     ENDSCAN
		                  CASE tcReportType = 'WDEF' AND curlastsusptype.cSuspType # 'D'  &&  Last type isn't a deficit, so delete the recs from disbchksd
		                     SELECT disbchksd
		                     SCAN FOR cownerid = m.cownerid AND cwellid = m.cwellid
		                        DELETE NEXT 1
		                     ENDSCAN
		               ENDCASE
		            ENDIF
		         ENDSCAN
		      ENDIF
		
		      IF tlSummarize
		         SELECT  disbchksd.cownerid, ;
		            disbchksd.cOwnname, ;
		            disbchksd.cwellid, ;
		            cdeck, ;
		            creason, ;
		            disbchksd.cwellname, ;
		            SUM(disbchksd.nincome)   AS nincome, ;
		            SUM(disbchksd.noilrev)   AS noilrev, ;
		            SUM(disbchksd.ngasrev)   AS ngasrev, ;
		            SUM(disbchksd.nothrev)   AS nothrev, ;
		            SUM(disbchksd.nexpense)  AS nexpense, ;
		            SUM(disbchksd.nOiltax1)  AS nOiltax1, ;
		            SUM(disbchksd.nOiltax2)  AS nOiltax2, ;
		            SUM(disbchksd.nOiltax3)  AS nOiltax3, ;
		            SUM(disbchksd.nOiltax4)  AS nOiltax4, ;
		            SUM(disbchksd.nGastax1)  AS nGastax1, ;
		            SUM(disbchksd.nGastax2)  AS nGastax2, ;
		            SUM(disbchksd.nGastax3)  AS nGastax3, ;
		            SUM(disbchksd.nGastax4)  AS nGastax4, ;
		            SUM(disbchksd.nsevtaxes) AS nsevtaxes, ;
		            SUM(disbchksd.ngather)   AS ngather, ;
		            SUM(disbchksd.ncompress) AS ncompress, ;
		            SUM(disbchksd.nnetcheck) AS nnetcheck, ;
		            disbchksd.cSuspType, ;
		            disbchksd.cprogcode, ;
		            disbchksd.cwellname, ;
		            disbchksd.ncheck_amt ;
		            FROM disbchksd ;
		            INTO CURSOR temp ;
		            ORDER BY &lcOrderGroupS ;
		            GROUP BY &lcOrderGroupS
		
		         SELECT disbchks
		         APPEND FROM DBF('temp')
		
		      ELSE
		         SELECT disbchks
		         APPEND FROM DBF('disbchksd')
		      ENDIF
		
		      SELECT disbchks
		      IF tlSummarize
		         INDEX ON cwellid + cownerid TAG ownerkey
		      ELSE
		         IF tlPrograms
		            REPLACE cProgGroup WITH cprogcode ALL
		            INDEX ON cwellid + cownerid + cProgGroup + ctypeinv + cSuspType + cRunyear + PADL(TRANSFORM(nRunno), 3, '0') TAG ownerkey
		         ENDIF
		         INDEX ON cwellid + cownerid + cProgGroup + ctypeinv + cSuspType + cRunyear + PADL(TRANSFORM(nRunno), 3, '0') TAG ownerkey
		      ENDIF
		      SET ORDER TO ownerkey
		
		   ENDIF
		
		   WAIT CLEAR
		
		   SELE disbchks
		   IF RECC() > 0
		      llReturn = .T.
		   ELSE
		      llReturn = .F.
		   ENDIF
		CATCH TO loError
		   llReturn = .F.
		   DO errorlog WITH 'Builddata', loError.LINENO, 'Suspense Rpt', loError.ERRORNO, loError.MESSAGE, '', loError
		   MESSAGEBOX('Unable to process the report at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		      'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		m.goApp.oLogger.EndProcess('Suspense Reports')
		m.goApp.Rushmore(.F.)
		
		RETURN llReturn
		
		
		
		
		
	ENDPROC

	PROCEDURE Destroy
		RELEASE pcBreak
		RELEASE llBreak
		RELEASE llProgram
		DODEFAULT()
	ENDPROC

	PROCEDURE getlasttype
	ENDPROC

	PROCEDURE Init
		DODEFAULT()
		 
		SELECT investor
		SET ORDER TO cownerid
		GO TOP
		
		THISFORM.swrptlook1.txtBegName.VALUE = cOwnname
		THISFORM.swrptlook1.txtBegID.VALUE = cownerid
		GO BOTTOM
		
		THISFORM.swrptlook1.txtEndName.VALUE = cOwnname
		THISFORM.swrptlook1.txtEndID.VALUE = cownerid
		
		THISFORM.chkPrograms.VALUE = .F.
		THISFORM.chkOwnPage.VALUE  = .F.
		
		
		
	ENDPROC

	PROCEDURE report
		LPARA cButton
		PUBLIC pcBreak,llBreak,llProgram, llWellGroup
		
		pcBreak = '""'
		IF THISFORM.chkOwnPage.VALUE = .T.
		   IF THISFORM.chksummarize.VALUE = .T.
		      IF THISFORM.lbywell
		         pcBreak = 'cwellid'
		      ELSE
		         pcBreak = 'csusptype'
		      ENDIF
		   ELSE
		      pcBreak = 'cownerid'
		   ENDIF
		   llBreak = .T.
		ELSE
		   pcBreak = '""'
		   llBreak = .F.
		ENDIF
		
		llProgram   = THISFORM.chkPrograms.VALUE
		llWellGroup = THISFORM.chkbywell.VALUE
		
		DODEFAULT(cButton)
		
		
	ENDPROC

	PROCEDURE cboReportType.Init
		THIS.ADDLISTITEM('**  All Owner Suspense Entries  **',1,1)
		THIS.ADDLISTITEM('ONET',1,2)
		THIS.ADDLISTITEM('Minimum Owner Suspense',2,1)
		THIS.ADDLISTITEM('OMIN',2,2)
		this.AddListItem('Legal Suspense Entries',3,1)
		THIS.ADDLISTITEM('OLEGL',3,2)
		this.AddListItem('Combination Legal & Minimum Suspense Entries',4,1)
		THIS.ADDLISTITEM('OSUSP',4,2)
		THIS.ADDLISTITEM('Owner Deficits',5,1)
		THIS.ADDLISTITEM('ODEF',5,2)
		THIS.ADDLISTITEM('Owner/Interest Hold Suspense',6,1)
		THIS.ADDLISTITEM('OHOLD',6,2)
		THIS.ADDLISTITEM('Disb. Freq. Owner Suspense',7,1)
		THIS.ADDLISTITEM('OFREQ',7,2)
		this.AddListItem('Deficits Into Suspense During Run',8,1)
		THIS.ADDLISTITEM('ODRUN',8,2)
		this.AddListItem('Minimums Into Suspense During Run',9,1)
		THIS.ADDLISTITEM('OMRUN',9,2)
		this.AddListItem('Holds Into Suspense During Run',10,1)
		THIS.ADDLISTITEM('OHRUN',10,2)
		THIS.ADDLISTITEM('---------------------------------------',11,1)
		THIS.ADDLISTITEM('--',11,2)
		THIS.ADDLISTITEM('Cumulative Well Revenue Suspense',12,1)
		THIS.ADDLISTITEM('WMIN',12,2)
		THIS.ADDLISTITEM('Cumulative Well Deficits',13,1)
		THIS.ADDLISTITEM('WDEF',13,2)
		
		
		this.ListItemId = 1
		
		DODEFAULT()
		
	ENDPROC

	PROCEDURE cboReportType.LostFocus
		IF this.Value = '--'  &&  They selected the divider, so re-set to the top of the list
		   this.set('value','**')
		   this.ListItemId = 1
		ENDIF
		
		DODEFAULT()
	ENDPROC

	PROCEDURE cboReportType.Valid
		IF BETWEEN(THIS.LISTITEMID,11,12)  &&  Well Suspense
		   THISFORM.lblBegID.SET('caption','First Well:')
		   THISFORM.lblendID.SET('caption','Last Well:')
		   THISFORM.chkPrograms.SET('value',.F.)
		   THISFORM.chkPrograms.SET('visible',.F.)
		   THISFORM.swrptlook1.txtBegID.SET('cListExpression','Wells.cWellID')
		   THISFORM.swrptlook1.txtBegID.SET('cListWorkArea','Wells')
		   THISFORM.swrptlook1.txtEndID.SET('cListExpression','Wells.cWellID')
		   THISFORM.swrptlook1.txtEndID.SET('cListWorkArea','Wells')
		   THISFORM.chkownPage.SET('caption','Page break between wells')
		   thisform.chkselected.Caption = 'Select Wells'
		
		   IF NOT THISFORM.lByWell  &&  Only re-set the range of wells if not already reporting by well
		      SELECT wells
		      SET ORDER TO cwellid
		      GO TOP
		      THISFORM.swrptlook1.txtBegName.SET('VALUE',cwellname)
		      THISFORM.swrptlook1.txtBegID.SET('value',cwellid)
		      GO BOTTOM
		      THISFORM.swrptlook1.txtEndName.SET('VALUE',cwellname)
		      THISFORM.swrptlook1.txtEndID.SET('VALUE',cwellid)
		
		      THISFORM.chklAllGroups.SET('value',.F.)
		      THISFORM.chkOwnPage.SET('value',.F.)
		      THISFORM.chkPrograms.SET('value',.F.)
		      THISFORM.chksummarize.SET('value',.F.)
		   ENDIF
		
		   THISFORM.lByWell = .T.
		
		ELSE  &&  Owner Suspense
		   THISFORM.lblBegID.SET('caption','First Owner:')
		   THISFORM.lblendID.SET('caption','Last Owner:')
		   THISFORM.chkPrograms.SET('value',.F.)
		   THISFORM.chkPrograms.SET('visible',.T.)
		   THISFORM.swrptlook1.txtBegID.SET('cListExpression','Investor.cOwnerID')
		   THISFORM.swrptlook1.txtBegID.SET('cListWorkArea','Investor')
		   THISFORM.swrptlook1.txtEndID.SET('cListExpression','Investor.cOwnerID')
		   THISFORM.swrptlook1.txtEndID.SET('cListWorkArea','Investor')
		   THISFORM.chkownPage.SET('caption','Page break between owners')
		   thisform.chkselected.Caption = 'Select Owners'
		
		   IF THISFORM.lByWell  &&  Only re-set the range of owners if not already reporting by owner
		      SELECT investor
		      SET ORDER TO cownerid
		      GO TOP
		      THISFORM.swrptlook1.txtBegName.SET('VALUE',cownname)
		      THISFORM.swrptlook1.txtBegID.SET('value',cownerid)
		      GO BOTTOM
		      THISFORM.swrptlook1.txtEndName.SET('VALUE',cownname)
		      THISFORM.swrptlook1.txtEndID.SET('VALUE',cownerid)
		
		      THISFORM.chklAllGroups.SET('value',.F.)
		      THISFORM.chkOwnPage.SET('value',.F.)
		      THISFORM.chkPrograms.SET('value',.F.)
		      THISFORM.chksummarize.SET('value',.F.)
		   ENDIF
		
		   THISFORM.lByWell = .F.
		ENDIF
		
		thisform.chkselected.Value = .f.
		thisform.chkselected.Click()
		
		DODEFAULT()
		
	ENDPROC

	PROCEDURE chkByWell.Click
		*!*	IF THIS.VALUE AND THIS.PARENT.chksummarize.VALUE
		*!*	   THIS.PARENT.chksummarize.SET('value',.F.)
		*!*	ENDIF
		
		DODEFAULT()
		
	ENDPROC

	PROCEDURE chkExcludePmts.Click
		IF THIS.VALUE AND THIS.PARENT.chksummarize.VALUE
		   THIS.PARENT.chksummarize.SET('value',.F.)
		ENDIF
		
		DODEFAULT()
		
	ENDPROC

	PROCEDURE chkOwnPage.Click
		IF THIS.VALUE AND THIS.PARENT.chksummarize.VALUE
		   IF NOT thisform.lbywell
		      THIS.PARENT.chksummarize.SET('value',.F.)
		   endif
		ENDIF
		
		DODEFAULT()
		
	ENDPROC

	PROCEDURE chkPrograms.Click
		IF THIS.VALUE AND THIS.PARENT.chksummarize.VALUE
		   THIS.PARENT.chksummarize.SET('value',.F.)
		ENDIF
		
		DODEFAULT()
		
	ENDPROC

	PROCEDURE chkSelected.Click
		IF THIS.VALUE
		   IF NOT THISFORM.lByWell
		      DO FORM commonsource\SELECTED-ids WITH 'OWNER' LINKED
		      lnCount = RECCOUNT('selected')
		      THISFORM.lblselected.CAPTION = TRANSFORM(lnCount) + ' Owners Selected'
		      THISFORM.lblselected.VISIBLE = .T.
		      THISFORM.lblbegID.VISIBLE = .F.
		      THISFORM.lblendID.VISIBLE = .F.
		      THISFORM.swrptlook1.VISIBLE = .F.
		   ELSE
		      DO FORM commonsource\SELECTED-ids WITH 'WELL' LINKED
		      lnCount = RECCOUNT('selected')
		      THISFORM.lblselected.CAPTION = TRANSFORM(lnCount) + ' Wells Selected'
		      THISFORM.lblselected.VISIBLE = .T.
		      THISFORM.lblbegID.VISIBLE = .F.
		      THISFORM.lblendID.VISIBLE = .F.
		      THISFORM.swrptlook1.VISIBLE = .F.
		   ENDIF
		ELSE
		   THISFORM.lblselected.VISIBLE = .F.
		   THISFORM.lblbegID.VISIBLE = .T.
		   THISFORM.lblendID.VISIBLE = .T.
		   THISFORM.swrptlook1.VISIBLE = .T.
		ENDIF
		
	ENDPROC

	PROCEDURE chkSelected.Init
		IF DODEFAULT()
		   IF thisform.lByWell
		      this.Caption = 'Select Wells'
		   ENDIF
		ENDIF 
	ENDPROC

	PROCEDURE chksummarize.Click
		IF THIS.VALUE 
		   THIS.PARENT.chkPrograms.SET('value',.F.)
		   IF NOT thisform.lbywell
		      this.Parent.chkOwnPage.set('value',.f.)
		   endif
		ENDIF
		
		DODEFAULT()
		
	ENDPROC

	PROCEDURE Runcombo1.Init
		IF DODEFAULT()
		  
		   FOR lnx = 1 TO this.ListCount  &&  Scan the list of runs, and dele all but the last closing in the old version for each group.
		      IF lnX > this.ListCount
		         EXIT
		      ENDIF 
		      SELECT sysctl               &&  They need to be able to run it for an old run no to check the conversion, but shouldn't be able to do anything else.
		      LOCATE FOR cDMBatch = this.ListItem(lnX,5)
		      IF FOUND()
		         IF NOT EMPTY(cVersion)  &&  If it's not empty, it's a run from the new version, so it should be in the lookup
		            LOOP
		         ELSE  &&  From the old version, so look to see if there's a newer old closing for this in sysctl, and delete this one if it finds any
		            SELECT sysctl
		            LOCATE FOR cRunYear+PADL(ALLTRIM(STR(nRunNo)),3,'0') > this.ListItem(lnX,2)+PADL(ALLTRIM(this.ListItem(lnX,3)),3,'0')  ;
		               AND cGroup = this.ListItem(lnX,4) AND cTypeClose = 'R' AND EMPTY(cVersion)
		            IF FOUND()
		               this.RemoveItem(lnX)
		               lnX = lnX-1  &&  We've just eliminated a row, so now the row below this one takes its place, so we need to re-do it, so re-setting lnX is necessary
		            endif
		         endif
		      endif   
		   ENDFOR 
		   
		   this.ListItemID = 1
		   
		ENDIF   
	ENDPROC

	PROCEDURE Swrptlook1.Swlookupbutton1.Click
		LOCAL lcList
		PRIV llOK
		
		llOK = .F.
		
		IF THISFORM.lByWell  &&  By Well
		   lcList = 'cWellID,cWellName'
		
		   DO FORM ..\CUSTOM\picklist WITH 'Wells', lcList, THISFORM.swrptlook1.txtbegid.VALUE, 2
		
		   IF llOK
		      THISFORM.swrptlook1.txtbegid.VALUE = cWellID
		      THISFORM.swrptlook1.txtBegName.VALUE = cWellName
		      THISFORM.swrptlook1.txtbegid.REFRESH()
		      THISFORM.swrptlook1.txtBegName.REFRESH()
		   ENDIF
		
		ELSE  &&  By Owner
		   lcList = 'cownerid,csortfield'
		
		   DO FORM ..\CUSTOM\picklist WITH 'Investor', lcList, THISFORM.swrptlook1.txtbegid.VALUE, 2
		
		   IF llOK
		      THISFORM.swrptlook1.txtbegid.VALUE = cOwnerID
		      THISFORM.swrptlook1.txtBegName.VALUE = cSortField
		      THISFORM.swrptlook1.txtbegid.REFRESH()
		      THISFORM.swrptlook1.txtBegName.REFRESH()
		   ENDIF
		   
		ENDIF
		
		THISFORM.setnextcontrol(THISFORM.swrptlook1.txtbegid)
		
	ENDPROC

	PROCEDURE Swrptlook1.Swlookupbutton1.When
		RETURN MDOWN()
	ENDPROC

	PROCEDURE Swrptlook1.Swlookupbutton2.Click
		LOCAL lcList
		PRIV llOK
		
		llOK = .F.
		
		IF THISFORM.lByWell  &&  By Well
		   lcList = 'cwellid,cwellname'
		
		   DO FORM ..\CUSTOM\picklist WITH 'wells', lcList, THISFORM.swrptlook1.txtendid.VALUE, 2
		
		   IF llOK
		      THISFORM.swrptlook1.txtendid.VALUE = cwellid
		      THISFORM.swrptlook1.txtEndName.VALUE = cwellname
		      THISFORM.swrptlook1.txtendid.REFRESH()
		      THISFORM.swrptlook1.txtEndName.REFRESH()
		   ENDIF
		
		ELSE  &&  By Owner
		   lcList = 'cownerid,csortfield'
		
		   DO FORM ..\CUSTOM\picklist WITH 'Investor', lcList, THISFORM.swrptlook1.txtendid.VALUE, 2
		
		   IF llOK
		      THISFORM.swrptlook1.txtendid.VALUE = cOwnerId
		      THISFORM.swrptlook1.txtEndName.VALUE = cSortField
		      THISFORM.swrptlook1.txtendid.REFRESH()
		      THISFORM.swrptlook1.txtEndName.REFRESH()
		   ENDIF
		
		ENDIF
		
		THISFORM.setnextcontrol(THISFORM.swrptlook1.txtendid)
		
	ENDPROC

	PROCEDURE Swrptlook1.Swlookupbutton2.When
		RETURN MDOWN()
	ENDPROC

ENDDEFINE
