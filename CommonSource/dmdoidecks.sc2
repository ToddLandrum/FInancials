*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="dmdoidecks.scx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="2" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Cursor1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor6" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor7" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor2" UniqueID="" Timestamp="" />

	AutoOpenTables = .F.
	DataSource = .NULL.
	Height = 492
	Left = 1
	Name = "Dataenvironment"
	Top = 220
	Width = 625

	ADD OBJECT 'Cursor1' AS cursor WITH ;
		Alias = "doidecks", ;
		CursorSource = "doidecks", ;
		Database = ..\..\database\appdata.dbc, ;
		Height = 90, ;
		Left = 25, ;
		Name = "Cursor1", ;
		Top = 20, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor2' AS cursor WITH ;
		Alias = "doidecks1", ;
		CursorSource = "doidecks", ;
		Database = ..\..\database\appdata.dbc, ;
		Height = 90, ;
		Left = 156, ;
		Name = "Cursor2", ;
		Top = 23, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor3' AS cursor WITH ;
		Alias = "wellinv", ;
		BufferModeOverride = 5, ;
		CursorSource = "wellinv", ;
		Database = ..\newdbc\appdata.dbc, ;
		Height = 90, ;
		Left = 291, ;
		Name = "Cursor3", ;
		Top = 29, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor4' AS cursor WITH ;
		Alias = "expense", ;
		BufferModeOverride = 5, ;
		CursorSource = "expense", ;
		Database = ..\datafiles\keithtestdata\appdata.dbc, ;
		Height = 90, ;
		Left = 304, ;
		Name = "Cursor4", ;
		Top = 176, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor5' AS cursor WITH ;
		Alias = "expsusp", ;
		BufferModeOverride = 5, ;
		CursorSource = "expsusp", ;
		Database = ..\datafiles\keithtestdata\appdata.dbc, ;
		Height = 90, ;
		Left = 160, ;
		Name = "Cursor5", ;
		Top = 179, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor6' AS cursor WITH ;
		Alias = "income", ;
		BufferModeOverride = 5, ;
		CursorSource = "income", ;
		Database = ..\datafiles\keithtestdata\appdata.dbc, ;
		Height = 90, ;
		Left = 425, ;
		Name = "Cursor6", ;
		Top = 19, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor7' AS cursor WITH ;
		Alias = "incsusp", ;
		BufferModeOverride = 5, ;
		CursorSource = "incsusp", ;
		Database = ..\datafiles\keithtestdata\appdata.dbc, ;
		Height = 90, ;
		Left = 4, ;
		Name = "Cursor7", ;
		Top = 162, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

ENDDEFINE

DEFINE CLASS frmdoidecks AS frmdatamanagerformcustom OF "..\custom\cforms.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="txtCdeck" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtWellid" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblCdeck" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtEffstartyr" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblEffstartyr" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdLookWell" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtEffstartprd" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblEffstartprd" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkAllWells" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkWaterfall" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: changedeckcode
		*m: checkdeck		&& Look for deck duplicates
		*m: updaterelatedtables
		*p: cdeck
		*p: lupdatedeck
	*</DefinedPropArrayMethod>

	Caption = "DOI Deck Info"
	cdeck = 
	cdisplayname = DOI Deck
	clistexpression = cdeck
	cmsgconfirmdelete = Are you sure you want to delete this DOI Deck?
	cworkarea = doidecks
	DoCreate = .T.
	Height = 155
	lupdatedeck = .F.
	Name = "FrmDOIDecks"
	Width = 476
	_memberdata = <VFPData>
		<memberdata name="checkdeck" display="CheckDeck"/>
		<memberdata name="cdeck" display="cDeck"/>
		<memberdata name="updaterelatedtables" display="UpdateRelatedTables"/>
		<memberdata name="lupdatedeck" display="lUpdateDeck"/>
		<memberdata name="changedeckcode" display="ChangeDeckCode"/>
		</VFPData>
	cmdatamanager.Name = "cmdatamanager"
	cmdatamanager.TabIndex = 1
	cmlookupmanager.Name = "cmlookupmanager"
	Mwresize1.lblHighLight.Name = "lblHighLight"
	Mwresize1.lblShading.Name = "lblShading"
	Mwresize1.Left = 444
	Mwresize1.Name = "Mwresize1"
	Mwresize1.TabIndex = 2
	Mwresize1.Top = 168

	ADD OBJECT 'chkAllWells' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Create Deck For All Wells", ;
		Left = 296, ;
		Name = "chkAllWells", ;
		TabIndex = 8, ;
		Top = 57, ;
		Value = .F.
		*< END OBJECT: ClassLib="..\..\..\codeminenew\ampro_rv\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkWaterfall' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Waterfall Deck", ;
		ControlSource = "doidecks.lwaterfall", ;
		Left = 296, ;
		Name = "chkWaterfall", ;
		TabIndex = 5, ;
		Top = 21, ;
		Value = .F.
		*< END OBJECT: ClassLib="..\..\..\codeminenew\ampro_rv\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'cmdLookWell' AS cmdcommandbuttoncustom WITH ;
		Caption = " Well ID ", ;
		Height = 22, ;
		Left = 49, ;
		Name = "cmdLookWell", ;
		TabIndex = 6, ;
		TabStop = .F., ;
		Top = 54, ;
		Width = 48, ;
		ZOrderSet = 9
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'lblCdeck' AS lbllabelcustom WITH ;
		Caption = "Deck Name", ;
		Height = 16, ;
		Left = 50, ;
		Name = "lblCdeck", ;
		TabIndex = 3, ;
		Top = 20, ;
		Width = 56
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblEffstartprd' AS lbllabelcustom WITH ;
		Caption = "Effective Start Period", ;
		Height = 16, ;
		Left = 228, ;
		Name = "lblEffstartprd", ;
		TabIndex = 11, ;
		Top = 96, ;
		Width = 104
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblEffstartyr' AS lbllabelcustom WITH ;
		Caption = "Effective Start Year", ;
		Height = 16, ;
		Left = 50, ;
		Name = "lblEffstartyr", ;
		TabIndex = 9, ;
		Top = 96, ;
		Width = 98
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'txtCdeck' AS txttextboxcustom WITH ;
		ControlSource = "doidecks.cdeck", ;
		Format = "!", ;
		Height = 20, ;
		Left = 171, ;
		MaxLength = 10, ;
		Name = "txtCdeck", ;
		TabIndex = 4, ;
		Top = 18, ;
		Width = 76
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtEffstartprd' AS txttextboxcustom WITH ;
		ControlSource = "doidecks.effstartprd", ;
		Height = 20, ;
		Left = 349, ;
		MaxLength = 2, ;
		Name = "txtEffstartprd", ;
		TabIndex = 12, ;
		Top = 94, ;
		Width = 24
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtEffstartyr' AS txttextboxcustom WITH ;
		ControlSource = "doidecks.effstartyr", ;
		Height = 20, ;
		Left = 171, ;
		MaxLength = 4, ;
		Name = "txtEffstartyr", ;
		TabIndex = 10, ;
		Top = 94, ;
		Width = 36
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtWellid' AS txtquickfill WITH ;
		clistexpression = cwellid, ;
		clistworkarea = wells, ;
		ControlSource = "doidecks.cwellid", ;
		cworkarea = , ;
		Format = "!", ;
		Height = 20, ;
		Left = 172, ;
		lrequired = .F., ;
		MaxLength = 10, ;
		Name = "txtWellid", ;
		ReadOnly = .F., ;
		TabIndex = 7, ;
		Top = 55, ;
		Width = 78, ;
		ZOrderSet = 4
		*< END OBJECT: ClassLib="..\custom\cgadget.vcx" BaseClass="textbox" />
	
	PROCEDURE changedeckcode
		LPARAMETERS tcWellID, tcOldDeck, tcNewDeck
		LOCAL llReturn
		
		llReturn = .T.
		
		TRY
		
		   * Check to see if this deck has been used in a closed run
		   swselect('wellhist')
		   LOCATE FOR cDeck == tcOldDeck
		   IF FOUND()
		      llReturn = .F.
		      MESSAGEBOX('This deck code cannot be changed. It has been processed in a run closing',64,THISFORM.CAPTION)
		      EXIT
		   ENDIF
		
		   swselect('income')
		   UPDATE income SET cDeck = tcNewDeck WHERE cWellID = tcWellID AND cDeck == tcOldDeck
		   
		   swselect('incsusp')
		   UPDATE incsusp SET cDeck = tcNewDeck WHERE cWellID = tcWellID AND cDeck == tcOldDeck
		   
		   swselect('expense')
		   UPDATE expense SET cDeck = tcNewDeck WHERE cWellID = tcWellID AND cDeck == tcOldDeck
		   
		   swselect('expsusp')
		   UPDATE expsusp SET cDeck = tcNewDeck WHERE cWellID = tcWellID AND cDeck == tcOldDeck
		   
		   swselect('wellinv')
		   UPDATE wellinv SET cDeck = tcNewDeck WHERE cWellID = tcWellID AND cDeck == tcOldDeck
		   
		CATCH TO loError
		   llReturn = .F.
		ENDTRY
		
		RETURN llReturn
		
	ENDPROC

	PROCEDURE checkdeck		&& Look for deck duplicates
		LPARAMETERS tcDeck, tcWellid
		LOCAL llReturn
		
		llReturn = .f.
		
		swselect('doidecks1')
		LOCATE FOR cdeck = tcDeck AND cwellid = tcWellid
		IF FOUND()
		   llReturn = .f.
		ELSE
		   llReturn = .t.
		ENDIF
		
		RETURN llreturn
	ENDPROC

	PROCEDURE Init
		LPARAMETERS tlNew
		
		IF DODEFAULT()
		   IF m.goapp.lPartnerShipMod
		      thisform.chkwaterfall.Visible = .t.
		   ELSE
		      thisform.chkwaterfall.Visible = .f.
		   ENDIF 
		   IF tlNew
		      this.new()
		   ENDIF 
		ENDIF 
	ENDPROC

	PROCEDURE list
		LPARAMETERS cWorkarea
		
		*
		PRIV llOK
		LOCAL lcList, lnRecNo, lStatus
		LOCAL lcField, lnFields, lncount
		
		* Default to the form's primary workarea
		IF EMPTY(m.cWorkarea)
		   m.cWorkarea = THIS.cWorkarea
		ENDIF
		
		IF THIS.FlushControlBuffer() AND THIS.beforenav('doidecks')
		   THIS.RefreshAll()  && In case BeforeNav() did a Revert()
		   SELECT doidecks
		   lnRecNo = RECNO()
		   COUNT FOR NOT DELETED() TO lncount
		   IF lncount = 0
		      RETURN
		   ENDIF
		
		   llOK = .F.
		
		   lcField = thisform.txtcdeck.value 
		   lnFields = 4
		   lcList = 'cdeck,cwellid,effstartyr,effstartprd'
		
		   DO FORM ..\CUSTOM\picklist WITH 'DOIDecks', lcList, lcField, lnFields, .f., .t.
		
		   IF llOK
		      THISFORM.REFRESH()
		   ELSE
		      SELE doidecks
		      GOTO lnRecNo
		      THISFORM.REFRESH()
		   ENDIF
		   THIS.RefreshAll()
		   THIS.ActivateNextControl()
		ELSE
		   RETURN
		ENDIF
		
		
		
		
		 
	ENDPROC

	PROCEDURE updaterelatedtables
		*
		* Update the related tables with the new deck name
		*
		lcOldDeck = THISFORM.cDeck
		lcNewDeck = THISFORM.txtcdeck.VALUE
		lcWellID  = thisform.txtwellid.Value 
		
		IF lcOldDeck # lcNewDeck
		
		    WAIT WINDOW NOWAIT 'Updating Related Tables....Please Wait'
		    
		    * DOI
		    swselect('wellinv')
		    UPDATE wellinv SET cDeck = lcNewDeck WHERE UPPER(cDeck) = UPPER(lcOldDeck) AND cWellID = lcWellID
		     
			* Owner History
			swselect('disbhist')
			UPDATE disbhist SET cDeck = lcNewDeck WHERE UPPER(cDeck) = UPPER(lcOldDeck) AND cWellID = lcWellID
		
			* Well History
			swselect('wellhist')
			UPDATE wellhist SET cDeck = lcNewDeck WHERE UPPER(cDeck) = UPPER(lcOldDeck) AND cWellID = lcWellID
		
			* Income
			swselect('income')
			UPDATE income SET cDeck = lcNewDeck WHERE UPPER(cDeck) = UPPER(lcOldDeck) AND cWellID = lcWellID
		
			* Held Income
			swselect('incsusp')
			UPDATE incsusp SET cDeck = lcNewDeck WHERE UPPER(cDeck) = UPPER(lcOldDeck) AND cWellID = lcWellID
		
			* Expense
			swselect('expense')
			UPDATE expense SET cDeck = lcNewDeck WHERE UPPER(cDeck) = UPPER(lcOldDeck) AND cWellID = lcWellID
		
			* Held Expenses
			swselect('expsusp')
			UPDATE expsusp SET cDeck = lcNewDeck WHERE UPPER(cDeck) = UPPER(lcOldDeck) AND cWellID = lcWellID
			
			thisform.cDeck = lcNewDeck
			WAIT CLEAR 
		ENDIF
		
		
	ENDPROC

	PROCEDURE chkAllWells.Click
		IF this.Value 
		   IF NOT EMPTY(thisform.txtwellid.Value)
		      MESSAGEBOX('The Well ID must be empty to create for all wells.',16,'DOI Deck Info')
		      RETURN .f. 
		   ENDIF 
		ENDIF 
	ENDPROC

	PROCEDURE chkWaterfall.Click
		IF this.Value 
		   IF NOT EMPTY(thisform.txtwellid.Value)
		      MESSAGEBOX('The Well ID must be empty to create for all wells.',16,'DOI Deck Info')
		      RETURN .f. 
		   ENDIF 
		ENDIF 
	ENDPROC

	PROCEDURE cmdatamanager.afternav
		LPARAMETERS cWorkarea
		
		IF m.cWorkarea = 'Doidecks'
		
		   thisform.cDeck = thisform.txtcdeck.Value 
		ENDIF 
	ENDPROC

	PROCEDURE cmdatamanager.afterupdate
		LPARAMETERS cWorkareaList, lCurrentRecordOnly
		
		*thisform.UpdateRelatedTables()
	ENDPROC

	PROCEDURE cmdatamanager.beforedelete
		LPARAMETERS cWorkarea
		LOCAL llReturn
		m.cWorkarea = LOWER(cWorkarea)
		
		llReturn = .T.
		
		IF m.cWorkarea = 'doidecks'
		
		   swselect('income')
		   LOCATE FOR cDeck = doidecks.cDeck AND cwellid = doidecks.cwellid
		   IF FOUND()
		      MESSAGEBOX('This deck has been used for revenue entries. It cannot be removed until the revenue entries are removed.',16,THISFORM.CAPTION)
		      llReturn = .F.
		   ENDIF
		   IF llReturn
		      swselect('incsusp')
		      LOCATE FOR cDeck = doidecks.cDeck AND cwellid = doidecks.cwellid
		      IF FOUND()
		         MESSAGEBOX('This deck has been used for revenue entries. It cannot be removed until the revenue entries are removed.',16,THISFORM.CAPTION)
		         llReturn = .F.
		      ENDIF
		      IF llReturn
		         swselect('expense')
		         LOCATE FOR cDeck = doidecks.cDeck AND cwellid = doidecks.cwellid
		         IF FOUND()
		            MESSAGEBOX('This deck has been used for expense entries. It cannot be removed until the expense entries are removed.',16,THISFORM.CAPTION)
		            llReturn = .F.
		         ENDIF
		         IF llReturn
		            swselect('expsusp')
		            LOCATE FOR cDeck = doidecks.cDeck AND cwellid = doidecks.cwellid
		            IF FOUND()
		               MESSAGEBOX('This deck has been used for expense entries. It cannot be removed until the expense entries are removed.',16,THISFORM.CAPTION)
		               llReturn = .F.
		            ENDIF
		         ENDIF
		      ENDIF
		   ENDIF
		ENDIF
		
		IF llReturn
		   IF MESSAGEBOX('This will delete all the interests assigned to this well and deck. Continue?',36,THISFORM.CAPTION) = 6
		      swselect('wellinv')
		      DELETE FROM wellinv WHERE cDeck = doidecks.cDeck AND cwellid = doidecks.cwellid
		      TABLEUPDATE(.T.,.T.,'Wellinv')
		   ENDIF
		ENDIF
		
		RETURN llReturn
		
	ENDPROC

	PROCEDURE cmdatamanager.beforeupdate
		LPARAMETERS cWorkareaList, lCurrentRecordOnly
		LOCAL llReturn
		
		llReturn = .T.
		
		TRY
		
		   lcDeck     = THISFORM.txtCdeck.VALUE
		   lcWellID   = THISFORM.txtwellid.VALUE
		   llAllWells = THISFORM.chkAllWells.VALUE
		   m.EffStartYr  = THISFORM.txtEffstartyr.VALUE
		   m.EffStartPrd = THISFORM.txtEffstartprd.VALUE
		
		   * Change the deck code on all records with the old deck code
		   IF THISFORM.txtCdeck.lchanged
		      IF THISFORM.cDeck # lcDeck
		         lcOldDeck = THISFORM.cDeck
		         lcNewDeck = lcDeck
		         llReturn = THISFORM.ChangeDeckCode(lcWellID, lcOldDeck,lcNewDeck)
		      ENDIF
		   ENDIF
		
		   * Validate that we have a well if we're not creating for all wells
		   IF EMPTY(lcWellID) AND NOT llAllWells
		      MESSAGEBOX('You must specify a Well ID for this deck.',16,THISFORM.CAPTION)
		      llReturn = .F.
		      THISFORM.setnextcontrol(THISFORM.txtwellid)
		      EXIT
		   ENDIF
		
		   IF EMPTY(lcDeck)
		      MESSAGEBOX('You must specify a deck name for this deck!',16,THISFORM.CAPTION)
		      llReturn = .F.
		      THISFORM.setnextcontrol(THISFORM.txtCdeck)
		      EXIT
		   ENDIF
		
		   IF EMPTY(m.EffStartYr) OR EMPTY(m.EffStartPrd)
		      MESSAGEBOX('The starting year or period cannot be left blank. You must specify a starting year and period for this deck!',16,THISFORM.CAPTION)
		      llReturn = .F.
		      EXIT
		   ENDIF
		
		   IF llAllWells
		      SET DELETED OFF
		      SELECT doidecks1
		      LOCATE FOR cDeck = lcDeck AND ipk
		      IF FOUND() AND NOT DELETED()
		         IF MESSAGEBOX('There is already a deck with this name for some of the wells. Do you want to replace them?',36,'DOI Deck Info') = 7
		            llReturn = .F.
		            EXIT
		         ENDIF
		      ENDIF
		      THISFORM.chkAllWells.VALUE = .F.
		      SELECT wells
		      SET ORDER TO cwellid
		      LOCATE FOR NOT INLIST(cwellstat,'I','S','P','V') AND NOT DELETED()
		      IF FOUND()
		         lcWellID = cwellid
		         THISFORM.txtwellid.SET('value',lcWellID)
		      ENDIF
		      SCAN FOR NOT INLIST(cwellstat,'I','S','P','V')
		         m.cwellid = cwellid
		         m.cDeck   = lcDeck
		         IF m.cwellid = lcWellID
		            * Don't save the same well twice. We already added this well
		            LOOP
		         ENDIF
		         IF RIGHT(ALLTRIM(m.cDeck),3) = '-WF'
		            m.lWaterfall = .T.
		         ELSE
		            m.lWaterfall = .F.
		         ENDIF
		         SELECT doidecks1
		         LOCATE FOR cwellid = m.cwellid AND cDeck = m.cDeck
		         IF FOUND()
		            IF DELETED()
		               RECALL
		            ENDIF
		            REPLACE lDefault    WITH m.lDefault, ;
		               EffStartYr  WITH m.EffStartYr, ;
		               EffStartPrd WITH m.EffStartPrd
		         ELSE
		            INSERT INTO doidecks FROM MEMVAR
		         ENDIF
		      ENDSCAN
		      SET DELETED ON
		   ELSE
		      SET DELETED OFF
		      SELECT doidecks1
		      LOCATE FOR cDeck = lcDeck AND cwellid = lcWellID AND ipk # doidecks.ipk
		      IF FOUND()
		         IF MESSAGEBOX('There is already a deck with this name for this well. Do you want to replace it?',36,'DOI Deck Info') = 7
		            llReturn = .F.
		            EXIT
		         ENDIF
		      ENDIF
		      SET DELETED ON
		   ENDIF
		
		CATCH TO loError
		ENDTRY
		
		RETURN llReturn
		
	ENDPROC

	PROCEDURE cmdLookWell.Click
		LOCAL lcList, llReturn
		PRIV llOK
		
		llReturn = .T.
		llOK   = .T.
		lcList = 'cWellid,cwellname,cgroup,cwellstat'
		
		DO FORM ..\CUSTOM\picklist WITH 'Wells', lcList, THISFORM.txtWellID.VALUE, 4
		
		IF llOK 
		    llReturn = thisform.checkdeck(thisform.txtcdeck.Value,wells.cwellid)
		    IF llReturn
		       thisform.txtwellid.set('value',wells.cwellid)
		       thisform.lchanged = .t.
		    ELSE
		       MESSAGEBOX('There is already a deck with the same name for this well.',16,'DOI Decks')
		    ENDIF    
		ENDIF
		
		SELECT doidecks
	ENDPROC

	PROCEDURE cmdLookWell.When
		SELE doidecks1
		
		COUNT FOR NOT DELETED() TO lnCount
		IF NOT thisform.cmdatamanager.isnew('doidecks') AND lnCount = 0 
		   RETURN .F.
		ELSE
		   IF MDOWN()
		      RETURN .T.
		   ENDIF
		ENDIF          
		
	ENDPROC

	PROCEDURE txtEffstartprd.Valid
		IF DODEFAULT()
		   this.set('value',PADL(ALLTRIM(this.Value),2,'0'))
		   lnvalue = INT(VAL(this.Value))
		   IF NOT BETWEEN(lnValue,1,12)
		      MESSAGEBOX('The effective production period is invalid. Please enter a period between 01 and 12',16,'DOI Decks')
		      RETURN 0
		   ENDIF 
		ENDIF 
	ENDPROC

	PROCEDURE txtEffstartyr.Valid
		IF DODEFAULT()
		   IF NOT BETWEEN(this.Value,'2010','2030')
		      MESSAGEBOX('The effective year is invalid. Please enter a valid year.',16,'DOI Decks')
		      RETURN 0
		   ENDIF
		ENDIF 
	ENDPROC

	PROCEDURE txtWellid.GotFocus
		ON KEY LABEL F2 _screen.activeform.cmdLookWell.Click()
		DODEFAULT()
		
	ENDPROC

	PROCEDURE txtWellid.Valid
		LOCAL lcWellID 
		
		IF DODEFAULT()
			lcWellID = this.value
			swselect('wells')
			LOCATE FOR cwellid = lcwellid
			IF FOUND()
			   IF INLIST(wells.cwellstat,'I','S','P')
			      MESSAGEBOX("This well is not active. You can't set up a DOI deck for inactive wells.",16,'DOI Decks')
			      RETURN 0
			   ENDIF 
			ENDIF
			IF this.lchanged AND  NOT thisform.CheckDeck(thisform.txtcdeck.Value,lcWellid) 
			   MESSAGEBOX('There is already a deck with this name for this well.',16,'DOI Decks')
			   RETURN 0
			ENDIF 
		ENDIF 
		
		
	ENDPROC

ENDDEFINE
