*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="dmrohtaxfile.scx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="2" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Cursor1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor6" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor7" UniqueID="" Timestamp="" />

	AutoOpenTables = .F.
	DataSource = .NULL.
	Height = 475
	Left = 47
	Name = "Dataenvironment"
	Top = 409
	Width = 520

	ADD OBJECT 'Cursor1' AS cursor WITH ;
		Alias = "groups", ;
		CursorSource = "groups", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor1", ;
		Top = 20, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor2' AS cursor WITH ;
		Alias = "wells", ;
		CursorSource = "wells", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 150, ;
		Name = "Cursor2", ;
		Top = 20, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor3' AS cursor WITH ;
		Alias = "wellhist", ;
		CursorSource = "wellhist", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 290, ;
		Name = "Cursor3", ;
		Top = 20, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor4' AS cursor WITH ;
		Alias = "sevtax", ;
		CursorSource = "sevtax", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor4", ;
		Top = 140, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor5' AS cursor WITH ;
		Alias = "options", ;
		CursorSource = "options", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 150, ;
		Name = "Cursor5", ;
		Top = 140, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor6' AS cursor WITH ;
		Alias = "sysctl", ;
		CursorSource = "sysctl", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 290, ;
		Name = "Cursor6", ;
		Top = 140, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor7' AS cursor WITH ;
		Alias = "income", ;
		CursorSource = "income", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor7", ;
		Top = 260, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

ENDDEFINE

DEFINE CLASS formohtaxfile AS frmrptcriteria OF "..\source\appforms.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="LblBegPeriod" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="LblEndPeriod" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="opgReportBy" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Swyear1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Swrptlook1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Swyear2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Swperiod1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Swperiod2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="OpgQuarters" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Swgroup1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="LblBegYear" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="LblEndYear" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblBegID" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblEndID" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="LblGroup" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="swstates" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkProdPeriod" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboTaxType" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkNoTable" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkNoProd" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkcsvfile" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkSelected" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblSelected" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: calctax1		&& Calculates tax 1
		*m: calctax1qtr		&& Calculate tax 1 by quarter
		*m: calctax2		&& calculate taxes 2
		*m: calctax2qtr		&& Calculate tax 2 by quarter
		*m: calctax3		&& Calculates tax 3
		*m: calctax3qtr		&& Calculates Tax 3 by Quarter
		*m: calctax4		&& Calculates Tax 4
		*m: calctax4qtr		&& Calculates Tax 4 by Quarter
		*m: viewdocument
		*p: ctaxtype		&& Tax Type parameter passed to the form.
		*p: odist		&& Distproc object holder
	*</DefinedPropArrayMethod>

	Caption = "OH SV-6 Data Upload File"
	DoCreate = .T.
	Height = 549
	HelpContextID = 597
	Name = "FormOHTaxFile"
	Width = 558
	Swrptcriteriabuttons1.chkExport.Alignment = 0
	Swrptcriteriabuttons1.chkExport.Name = "chkExport"
	Swrptcriteriabuttons1.cmdclose.Name = "cmdclose"
	Swrptcriteriabuttons1.cmdPreview.Name = "cmdPreview"
	Swrptcriteriabuttons1.cmdPrint.Name = "cmdPrint"
	Swrptcriteriabuttons1.Left = 156
	Swrptcriteriabuttons1.Name = "Swrptcriteriabuttons1"
	Swrptcriteriabuttons1.TabIndex = 28
	Swrptcriteriabuttons1.Top = 474
	Swrptcriteriabuttons1.ZOrderSet = 1

	ADD OBJECT 'cboTaxType' AS cbocomboboxcustom WITH ;
		BoundColumn = 2, ;
		Height = 20, ;
		Left = 334, ;
		Name = "cboTaxType", ;
		TabIndex = 2, ;
		Top = 15, ;
		Width = 108
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="combobox" />

	ADD OBJECT 'chkcsvfile' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Create CSV File Instead of TXT Format", ;
		Left = 287, ;
		Name = "chkcsvfile", ;
		TabIndex = 27, ;
		Top = 439, ;
		Value = .T.
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkNoProd' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Include Wells With No Production", ;
		Left = 79, ;
		Name = "chkNoProd", ;
		TabIndex = 26, ;
		Top = 439, ;
		Value = .T.
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkNoTable' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		AutoSize = .T., ;
		Caption = "Include Taxes Withheld by Purchaser (Not From a Tax Table)", ;
		Height = 16, ;
		Left = 116, ;
		Name = "chkNoTable", ;
		TabIndex = 10, ;
		Top = 176, ;
		Value = .F., ;
		Width = 307, ;
		WordWrap = .T.
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkProdPeriod' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		AutoSize = .T., ;
		Caption = "Use Production Period as Selection Criteria. Otherwise, report is based on accounting date from the Well History file.", ;
		Height = 30, ;
		Left = 116, ;
		Name = "chkProdPeriod", ;
		TabIndex = 9, ;
		Top = 140, ;
		Width = 317, ;
		WordWrap = .T.
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkSelected' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Choose Selected Wells", ;
		Left = 203, ;
		Name = "chkSelected", ;
		TabIndex = 20, ;
		Top = 273, ;
		Value = .F.
		*< END OBJECT: ClassLib="..\..\wellprofits\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'lblBegID' AS lbllabelcustom WITH ;
		AutoSize = .T., ;
		Caption = "First Well:", ;
		FontSize = 8, ;
		Height = 16, ;
		Left = 139, ;
		Name = "lblBegID", ;
		TabIndex = 22, ;
		Top = 300, ;
		Width = 49, ;
		ZOrderSet = 16
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'LblBegPeriod' AS lbllabelcustom WITH ;
		AutoSize = .T., ;
		Caption = "Period:", ;
		FontSize = 8, ;
		Height = 16, ;
		Left = 260, ;
		Name = "LblBegPeriod", ;
		TabIndex = 14, ;
		Top = 212, ;
		Visible = .F., ;
		Width = 35, ;
		ZOrderSet = 2
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'LblBegYear' AS lbllabelcustom WITH ;
		AutoSize = .T., ;
		Caption = "Year:", ;
		FontSize = 8, ;
		Height = 16, ;
		Left = 159, ;
		Name = "LblBegYear", ;
		TabIndex = 13, ;
		Top = 212, ;
		Width = 29, ;
		ZOrderSet = 14
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblEndID' AS lbllabelcustom WITH ;
		AutoSize = .T., ;
		Caption = "Last Well:", ;
		FontSize = 8, ;
		Height = 16, ;
		Left = 139, ;
		Name = "lblEndID", ;
		TabIndex = 23, ;
		Top = 352, ;
		Width = 49, ;
		ZOrderSet = 17
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'LblEndPeriod' AS lbllabelcustom WITH ;
		AutoSize = .T., ;
		Caption = "Period:", ;
		FontSize = 8, ;
		Height = 16, ;
		Left = 260, ;
		Name = "LblEndPeriod", ;
		TabIndex = 19, ;
		Top = 236, ;
		Visible = .F., ;
		Width = 35, ;
		ZOrderSet = 3
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'LblEndYear' AS lbllabelcustom WITH ;
		AutoSize = .T., ;
		Caption = "Ending Year:", ;
		FontSize = 8, ;
		Height = 16, ;
		Left = 124, ;
		Name = "LblEndYear", ;
		TabIndex = 18, ;
		Top = 236, ;
		Visible = .F., ;
		Width = 64, ;
		ZOrderSet = 15
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'LblGroup' AS lbllabelcustom WITH ;
		AutoSize = .T., ;
		Caption = "Group:", ;
		FontSize = 8, ;
		Height = 16, ;
		Left = 153, ;
		Name = "LblGroup", ;
		TabIndex = 25, ;
		Top = 401, ;
		Width = 35, ;
		ZOrderSet = 18
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom1' AS lbllabelcustom WITH ;
		BackStyle = 1, ;
		Caption = "Report By", ;
		FontBold = .T., ;
		Left = 178, ;
		Name = "Lbllabelcustom1", ;
		TabIndex = 5, ;
		Top = 46
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom2' AS lbllabelcustom WITH ;
		BackStyle = 1, ;
		Caption = "Quarter", ;
		FontBold = .T., ;
		Left = 96, ;
		Name = "Lbllabelcustom2", ;
		TabIndex = 7, ;
		Top = 92
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom3' AS lbllabelcustom WITH ;
		Caption = "Well Product Tax Table:", ;
		Left = 88, ;
		Name = "Lbllabelcustom3", ;
		TabIndex = 3, ;
		Top = 17
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom4' AS lbllabelcustom WITH ;
		Caption = "Tax Type", ;
		Left = 281, ;
		Name = "Lbllabelcustom4", ;
		TabIndex = 4, ;
		Top = 17
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblSelected' AS lbllabelcustom WITH ;
		Caption = "All IDs Selected", ;
		ForeColor = 0,0,255, ;
		Left = 206, ;
		Name = "lblSelected", ;
		TabIndex = 17, ;
		Top = 339, ;
		Visible = .F.
		*< END OBJECT: ClassLib="..\..\wellprofits\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'OpgQuarters' AS opgoptiongroupcustom WITH ;
		BorderStyle = 1, ;
		ButtonCount = 4, ;
		Height = 35, ;
		Left = 89, ;
		Name = "OpgQuarters", ;
		TabIndex = 8, ;
		Top = 98, ;
		Width = 373, ;
		Option1.AutoSize = .T., ;
		Option1.Caption = "1st (Jan - Mar)", ;
		Option1.FontSize = 8, ;
		Option1.Height = 16, ;
		Option1.Left = 5, ;
		Option1.Name = "Q1", ;
		Option1.Top = 11, ;
		Option1.Width = 89, ;
		Option2.AutoSize = .T., ;
		Option2.Caption = "2nd (Apr - Jun)", ;
		Option2.FontSize = 8, ;
		Option2.Height = 16, ;
		Option2.Left = 96, ;
		Option2.Name = "Q2", ;
		Option2.Top = 11, ;
		Option2.Width = 92, ;
		Option3.AutoSize = .T., ;
		Option3.Caption = "3rd (Jul - Sep)", ;
		Option3.FontSize = 8, ;
		Option3.Height = 16, ;
		Option3.Left = 192, ;
		Option3.Name = "Q3", ;
		Option3.Top = 11, ;
		Option3.Width = 87, ;
		Option4.AutoSize = .T., ;
		Option4.Caption = "4th (Oct - Dec)", ;
		Option4.FontSize = 8, ;
		Option4.Height = 16, ;
		Option4.Left = 281, ;
		Option4.Name = "Q4", ;
		Option4.Top = 11, ;
		Option4.Width = 90
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="optiongroup" />

	ADD OBJECT 'opgReportBy' AS opgoptiongroupcustom WITH ;
		ButtonCount = 2, ;
		Height = 36, ;
		Left = 172, ;
		Name = "opgReportBy", ;
		TabIndex = 6, ;
		Top = 52, ;
		Width = 184, ;
		Option1.AutoSize = .T., ;
		Option1.Caption = "Quarter", ;
		Option1.FontSize = 8, ;
		Option1.Height = 16, ;
		Option1.Left = 11, ;
		Option1.Name = "Option1", ;
		Option1.Top = 12, ;
		Option1.Width = 55, ;
		Option2.AutoSize = .T., ;
		Option2.Caption = "Period Range", ;
		Option2.FontSize = 8, ;
		Option2.Height = 16, ;
		Option2.Left = 88, ;
		Option2.Name = "Option2", ;
		Option2.Top = 12, ;
		Option2.Width = 82
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="optiongroup" />

	ADD OBJECT 'Swgroup1' AS swgroup WITH ;
		Left = 203, ;
		Name = "Swgroup1", ;
		TabIndex = 24, ;
		Top = 399, ;
		ZOrderSet = 12
		*< END OBJECT: ClassLib="..\custom\swcontrol.vcx" BaseClass="combobox" />

	ADD OBJECT 'Swperiod1' AS swperiod WITH ;
		Height = 20, ;
		Left = 302, ;
		MaxLength = 2, ;
		Name = "Swperiod1", ;
		TabIndex = 12, ;
		Top = 210, ;
		Visible = .F., ;
		Width = 24, ;
		ZOrderSet = 7
		*< END OBJECT: ClassLib="..\custom\swcontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'Swperiod2' AS swperiod WITH ;
		Height = 20, ;
		Left = 302, ;
		MaxLength = 2, ;
		Name = "Swperiod2", ;
		TabIndex = 16, ;
		Top = 234, ;
		Visible = .F., ;
		Width = 24, ;
		ZOrderSet = 8
		*< END OBJECT: ClassLib="..\custom\swcontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'Swrptlook1' AS swrptlook WITH ;
		Left = 203, ;
		Name = "Swrptlook1", ;
		TabIndex = 21, ;
		Top = 295, ;
		ZOrderSet = 5, ;
		Swlookupbutton1.Name = "Swlookupbutton1", ;
		Swlookupbutton2.Name = "Swlookupbutton2", ;
		txtBegID.clistexpression = wells.cwellid, ;
		txtBegID.clistworkarea = wells, ;
		txtBegID.Name = "txtBegID", ;
		TxtBegName.Name = "TxtBegName", ;
		txtEndID.clistexpression = wells.cwellid, ;
		txtEndID.clistworkarea = wells, ;
		txtEndID.Name = "txtEndID", ;
		TxtEndName.Name = "TxtEndName"
		*< END OBJECT: ClassLib="..\custom\swcontrol.vcx" BaseClass="container" />

	ADD OBJECT 'swstates' AS cbocomboboxcustom WITH ;
		BoundColumn = 1, ;
		BoundTo = .F., ;
		ColumnCount = 1, ;
		ControlSource = "", ;
		FontName = "Courier New", ;
		Height = 20, ;
		Left = 204, ;
		Margin = 2, ;
		Name = "swstates", ;
		RowSource = "", ;
		RowSourceType = 0, ;
		TabIndex = 1, ;
		Top = 15, ;
		Width = 45
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="combobox" />

	ADD OBJECT 'Swyear1' AS swyear WITH ;
		Height = 20, ;
		Left = 203, ;
		MaxLength = 4, ;
		Name = "Swyear1", ;
		TabIndex = 11, ;
		Top = 210, ;
		Width = 40, ;
		ZOrderSet = 5
		*< END OBJECT: ClassLib="..\custom\swcontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'Swyear2' AS swyear WITH ;
		Height = 20, ;
		Left = 203, ;
		MaxLength = 4, ;
		Name = "Swyear2", ;
		TabIndex = 15, ;
		Top = 234, ;
		Visible = .F., ;
		Width = 40, ;
		ZOrderSet = 6
		*< END OBJECT: ClassLib="..\custom\swcontrol.vcx" BaseClass="textbox" />
	
	PROCEDURE builddata
		LOCAL tcPeriod, tcYear, tcGroup, tcWellID1, tcWellID2, tlProdPeriod
		
		llReturn = .T.
		
		TRY
		
		   getstateformats('OH')
		
		*  These parms don't matter. They just need to be setup
		*  to instantiate the distproc object
		    tcYear       = THISFORM.swyear1.VALUE
		    tcPeriod     = THISFORM.swperiod1.VALUE
		    tcWell1      = thisform.swrptlook1.txtbegID.value
		    tcWell2      = thisform.swrptlook1.txtendID.Value 
		    tcGroup      = LEFT(THISFORM.swGroup1.VALUE, 2)
		    tcYear2      = THISFORM.swyear2.VALUE
		    tcPeriod2    = THISFORM.swPeriod2.VALUE
		    tcState      = LEFT(THISFORM.swStates.VALUE, 2)
		    tlProdPeriod = THISFORM.chkProdPeriod.VALUE
		    tlNoTable    = THISFORM.chkNoTable.VALUE
		    tnReportBy   = THISFORM.opgReportBy.VALUE
		    tnQuarter    = THISFORM.opgQuarters.VALUE
		    llSelected   = thisform.chkselected.value
		
		    IF NOT llSelected
		       SELECT cwellid as cid FROM wells ;
		          INTO CURSOR selected ;
		          WHERE BETWEEN(cwellid,tcWell1,tcWell2) ;
		          ORDER BY cid
		    ENDIF 
		
		    lcTax1Desc = ''  &&  Blanked out, but not removed since they're used later - BH 8-6-03
		    lcTax2Desc = ''
		    lcTax3Desc = ''
		    lcTax4Desc = ''
		
		    THISFORM.cTaxType = THISFORM.cboTaxType.VALUE
		
		    IF tnReportBy = 1
		        IF thisform.chkcsvfile.Value 
		           lcFileName = 'OHSevTax_' + tcYear + '_QTR_' + TRANSFORM(tnQuarter) + '.csv'
		        ELSE
		           lcFileName = 'OHSevTax_' + tcYear + '_QTR_' + TRANSFORM(tnQuarter) + '.txt'
		        ENDIF       
		    ELSE
		       IF thisform.chkcsvfile.Value 
		          lcFileName = 'OHSevTax_' + tcYear + '_PRD_' + tcPeriod + '_' + tcYear2 + '_PRD_' + tcPeriod2 + '.csv'
		       ELSE    
		          lcFileName = 'OHSevTax_' + tcYear + '_PRD_' + tcPeriod + '_' + tcYear2 + '_PRD_' + tcPeriod2 + '.txt'
		       ENDIF    
		    ENDIF
		
		    CREATE CURSOR ohtaxfile ;
		        ( cwellid     c(10), ;
		          cpermit1    c(20), ;
		          coilprod    c(20), ;
		          cgasprod    c(20), ;
		          clocation   c(30))
		
		    SELECT wells
		    COUNT FOR wells.lthird_prty AND BETWEEN(wells.cwellid, tcWell1, tcWell2) AND IIF(tcGroup <> '**', wells.cGroup = tcGroup, .T.) TO ln3rdParty
		
		*
		*  Create the oDist object
		*
		    THISFORM.oDist = CREATEOBJECT('distproc', tcWell1, tcWell2, ;
		          tcPeriod, tcYear, tcGroup, 'W', DATE(), .T., 0)
		*
		*  Check to see which type of tax we're reporting on
		*
		    DO CASE
		        CASE THISFORM.cTaxType = '1'   && Severance Tax
		*
		*  Check to see if we're reporting by quarter or period
		*   
		            DO CASE
		                CASE THISFORM.opgReportBy.VALUE = 1       && Quarter
		                    THISFORM.calctax1()
		                    THISFORM.cTitle1     = 'Quarterly Report for Tax ' + THISFORM.cTaxType
		                    THISFORM.cTitle2     = 'For Year ' + tcYear + IIF(tcState <> '**', ' For Tax Table ' + tcState, ' For All Tax Tables')
		                    THISFORM.cReportName = 'commonsource\dmrtaxqtr'
		
		                CASE THISFORM.opgReportBy.VALUE = 2
		                    THISFORM.calctax1()
		                    THISFORM.cTitle1 = 'Report for Tax ' + THISFORM.cTaxType + ' By Well'
		                    IF tlProdPeriod
		                        THISFORM.cTitle2 = 'For Period Range ' + tcPeriod + '/' + tcYear + ' through ' + tcPeriod2 + '/' + tcYear2 + IIF(tcState <> '**', ' For Tax Table ' + tcState, ' For All Tax Tables')
		                    ELSE
		                        THISFORM.cTitle2 = 'For Accounting Period Range ' + tcPeriod + '/' + tcYear + ' through ' + tcPeriod2 + '/' + tcYear2 + IIF(tcState <> '**', ' For Tax Table ' + tcState, ' For All Tax Tables')
		                    ENDIF
		                    THISFORM.cReportName = 'commonsource\dmrtaxprd'
		
		            ENDCASE
		
		        CASE THISFORM.cTaxType = '2'   && Production Tax
		*
		*  Check to see if we're reporting by quarter or period
		*   
		            DO CASE
		                CASE THISFORM.opgReportBy.VALUE = 1       && Quarter
		                    THISFORM.calctax2()
		                    THISFORM.cTitle1     = 'Quarterly Report for Tax ' + THISFORM.cTaxType
		                    THISFORM.cTitle2     = 'For Year ' + tcYear + IIF(tcState <> '**', ' For Tax Table ' + tcState, ' For All Tax Tables')
		                    THISFORM.cReportName = 'commonsource\dmrtaxqtr'
		
		                CASE THISFORM.opgReportBy.VALUE = 2
		                    THISFORM.calctax2()
		                    THISFORM.cTitle1 = 'Report for Tax ' + THISFORM.cTaxType + ' By Well'
		                    IF tlProdPeriod
		                        THISFORM.cTitle2 = 'For Period Range ' + tcPeriod + '/' + tcYear + ' through ' + tcPeriod2 + '/' + tcYear2 + IIF(tcState <> '**', ' For Tax Table ' + tcState, ' For All Tax Tables')
		                    ELSE
		                        THISFORM.cTitle2 = 'For Accounting Period Range ' + tcPeriod + '/' + tcYear + ' through ' + tcPeriod2 + '/' + tcYear2 + IIF(tcState <> '**', ' For Tax Table ' + tcState, ' For All Tax Tables')
		                    ENDIF
		                    THISFORM.cReportName = 'commonsource\dmrtaxprd'
		
		            ENDCASE
		
		        CASE THISFORM.cTaxType = '3'   && Tax 3
		*
		*  Check to see if we're reporting by quarter or period
		*   
		            DO CASE
		                CASE THISFORM.opgReportBy.VALUE = 1       && Quarter
		                    THISFORM.calctax3()
		                    THISFORM.cTitle1     = 'Quarterly Report for Tax ' + THISFORM.cTaxType
		                    THISFORM.cTitle2     = 'For Year ' + tcYear + IIF(tcState <> '**', ' For Tax Table ' + tcState, ' For All Tax Tables')
		                    THISFORM.cReportName = 'commonsource\dmrtaxqtr'
		
		                CASE THISFORM.opgReportBy.VALUE = 2
		                    THISFORM.calctax3()
		                    THISFORM.cTitle1 = 'Report for Tax ' + THISFORM.cTaxType + ' By Well'
		                    IF tlProdPeriod
		                        THISFORM.cTitle2 = 'For Period Range ' + tcPeriod + '/' + tcYear + ' through ' + tcPeriod2 + '/' + tcYear2 + IIF(tcState <> '**', ' For Tax Table ' + tcState, ' For All Tax Tables')
		                    ELSE
		                        THISFORM.cTitle2 = 'For Accounting Period Range ' + tcPeriod + '/' + tcYear + ' through ' + tcPeriod2 + '/' + tcYear2 + IIF(tcState <> '**', ' For Tax Table ' + tcState, ' For All Tax Tables')
		                    ENDIF
		                    THISFORM.cReportName = 'commonsource\dmrtaxprd'
		
		            ENDCASE
		
		        CASE THISFORM.cTaxType = '4'   && Tax 4
		*
		*  Check to see if we're reporting by quarter or period
		*   
		            DO CASE
		                CASE THISFORM.opgReportBy.VALUE = 1       && Quarter
		                    THISFORM.calctax4()
		                    THISFORM.cTitle1     = 'Quarterly Report for Tax ' + THISFORM.cTaxType
		                    THISFORM.cTitle2     = 'For Year ' + tcYear + IIF(tcState <> '**', ' For Tax Table ' + tcState, ' For All Tax Tables')
		                    THISFORM.cReportName = 'commonsource\dmrtaxqtr'
		
		                CASE THISFORM.opgReportBy.VALUE = 2
		                    THISFORM.calctax4()
		                    THISFORM.cTitle1 = 'Report for Tax ' + THISFORM.cTaxType + ' By Well'
		                    IF tlProdPeriod
		                        THISFORM.cTitle2 = 'For Period Range ' + tcPeriod + '/' + tcYear + ' through ' + tcPeriod2 + '/' + tcYear2 + IIF(tcState <> '**', ' For Tax Table ' + tcState, ' For All Tax Tables')
		                    ELSE
		                        THISFORM.cTitle2 = 'For Accounting Period Range ' + tcPeriod + '/' + tcYear + ' through ' + tcPeriod2 + '/' + tcYear2 + IIF(tcState <> '**', ' For Tax Table ' + tcState, ' For All Tax Tables')
		                    ENDIF
		                    THISFORM.cReportName = 'commonsource\dmrtaxprd'
		
		            ENDCASE
		
		    ENDCASE
		
		    WAIT WINDOW NOWAIT 'Dividing production among API numbers tied to a well...'
		    CREATE CURSOR multiwell ;
		        (cwellid   c(10), ;
		          cpermit1  c(20), ;
		          ntotbbl   N(12, 2), ;
		          ntotmcf   N(12, 2), ;
		          clocation c(30))
		
		    swselect('wells')
		    SET ORDER TO cwellid   && CWELLID
		* Divide up the production by the number of wells
			SELECT  cwellid, clocation, cpermit1, SUM(ntotbbl) AS ntotbbl, SUM(ntotmcf) AS ntotmcf ;
				FROM taxtemp READWRITE ;
				INTO CURSOR temptax ;
				ORDER BY cwellid ;
				GROUP BY cwellid
		    SELECT temptax
		    SCAN
		        SCATTER MEMVAR
		        SELECT wells
		        IF SEEK(m.cwellid)
		            IF nwellcount > 1
		                lnWellCount = nwellcount
		                IF lnWellCount > 6
		                    lnWellCount = 6
		                ENDIF
		                lnTotBBL  = INT(ROUND(m.ntotbbl, 0))
		                lnTotMCF  = INT(ROUND(m.ntotmcf, 0))
		                m.ntotbbl = INT(ROUND(lnTotBBL / lnWellCount, 0))
		                m.ntotmcf = INT(ROUND(lnTotMCF / lnWellCount, 0))
		                lnBBLTot  = m.ntotbbl
		                lnMCFTot  = m.ntotmcf
		                SELECT temptax
		                REPLACE ntotbbl WITH m.ntotbbl
		                REPLACE ntotmcf WITH m.ntotmcf
		
		                SELECT wells
		                FOR lnPermit = 2 TO lnWellCount
		                    lcPermit   = 'wells.cPermit' + TRANSFORM(lnPermit)
		                    m.cpermit1 = &lcPermit
		                    lnBBLTot   = lnBBLTot + m.ntotbbl
		                    lnMCFTot   = lnMCFTot + m.ntotmcf
		                    INSERT INTO multiwell FROM MEMVAR
		                ENDFOR
		                lnDiffBBL = ROUND(lnTotBBL - lnBBLTot, 0)
		                lnDiffMCF = ROUND(lnTotMCF - lnMCFTot, 0)
		                IF lnDiffBBL <> 0
		                    SELECT temptax
		                    REPLACE ntotbbl WITH ntotbbl + lnDiffBBL
		                ENDIF
		                IF lnDiffMCF <> 0
		                    SELECT temptax
		                    REPLACE ntotmcf WITH ntotmcf + lnDiffMCF
		                ENDIF
		            ENDIF
		        ENDIF
		    ENDSCAN
		
		    SELECT temptax
		    APPEND FROM DBF('multiwell')
		
		    SELECT temptax
		    IF RECC() > 0
				SELECT  cwellid, clocation, cpermit1, INT(SUM(ROUND(ntotbbl, 0))) AS nbbl, INT(SUM(ROUND(ntotmcf, 0))) AS nmcf ;
					FROM temptax ;
					INTO CURSOR ohtemp READWRITE  ;
					ORDER BY cpermit1, clocation ;
					GROUP BY cpermit1, clocation
		        lnMax = _TALLY
		        SELECT ohtemp
		        REPLACE cpermit1 WITH STRTRAN(cpermit1, '-', '') ALL
		        REPLACE cpermit1 WITH STRTRAN(cpermit1, '/', '') ALL
		
		        SELECT ohtemp
		        SCAN
		            SCATTER MEMVAR
		            IF nbbl < 0
		                m.coilprod = '0'
		            ELSE
		                m.coilprod = TRANSFORM(m.nbbl)
		            ENDIF
		            IF nmcf < 0
		                m.cgasprod = '0'
		            ELSE
		                m.cgasprod = TRANSFORM(m.nmcf)
		            ENDIF
		
		            IF NOT THISFORM.chkNoProd.VALUE
		                IF (m.nmcf # 0 OR m.nbbl # 0)
		                    INSERT INTO ohtaxfile FROM MEMVAR
		                ENDIF
		            ELSE
		                INSERT INTO ohtaxfile FROM MEMVAR
		            ENDIF
		        ENDSCAN
		
		* Fill in wells with no production
		        IF THISFORM.chkNoProd.VALUE
		            WAIT WINDOW NOWAIT 'Filling in wells with no production...'
					SELECT  cwellid, cwellname AS clocation, STRTRAN(cpermit1, '-', '') AS cpermit1, '0' AS coilprod, '0' AS cgasprod ;
						FROM wells ;
						WHERE NOT INLIST(cwellstat, 'I', 'S', 'P') ;
							AND NOT wells.lthird_prty  ;
							AND ctable = tcState ;
							AND STRTRAN(cpermit1, '-', '') NOT IN (SELECT  cpermit1 ;
																	   FROM ohtaxfile) ;
					        AND cwellid in (SELECT cid FROM selected) ;
						INTO CURSOR tempnoprod
		
		            SELECT tempnoprod
		            SCAN
		                SCATTER MEMVAR
		                m.cpermit1 = STRTRAN(m.cpermit1, '/', '')
		                INSERT INTO ohtaxfile FROM MEMVAR
		            ENDSCAN
		        ENDIF
		
		        IF NOT thisform.chkcsvfile.value
		           WAIT WINDOW NOWAIT 'Building the TXT file: ' + lcFileName
		        ELSE
		           WAIT WINDOW NOWAIT 'Building the CSV file: ' + lcFileName
		        ENDIF 
		
		        SELECT ohtaxfile
		        lnMax = RECCOUNT() 
		        IF NOT DIRECTORY(m.goApp.cDataFilePath + 'OHSEVTAX')
		            MD (m.goApp.cDataFilePath + 'OHSEVTAX')
		        ENDIF
		        lncount   = 0
		        lnbad     = 0
		        lcMessage = 'Missing API Numbers:' + CHR(10)
		
		        SELECT ohtaxfile
		        SCAN
		            SELECT selected
		            LOCATE FOR cid = ohtaxfile.cwellid
		            IF NOT FOUND()
		               SELECT ohtaxfile
		               DELETE NEXT 1
		               LOOP
		            ENDIF 
		            SELECT ohtaxfile
		            m.cpermit1 = ALLTRIM(cpermit1)
		            m.cpermit1 = STRTRAN(m.cpermit1,' ','')
		            m.cpermit1 = STRTRAN(m.cpermit1,'-','')
		            IF  EMPTY(m.cpermit1)
		                IF NOT cwellid $ lcMessage
		                    lcMessage = lcMessage + 'Well: ' + cwellid + CHR(10)
		                    lnbad     = lnbad + 1
		                    LOOP 
		                ENDIF
		            ELSE
		                IF LEN(ALLTRIM(m.cpermit1)) # 14
		                    m.cpermit1 = PADR(ALLTRIM(m.cpermit1), 14, '0')
		                ENDIF
		            ENDIF
		            FOR i = 1 TO 14
		                IF NOT ISDIGIT(SUBSTR(m.cpermit1,i,1))
		                   m.cpermit1 = ''
		                   lcMessage = lcMessage + 'Well: ' + cwellid + CHR(10)
		                    lnbad     = lnbad + 1
		                    i = 15
		                ENDIF
		            ENDFOR 
		            REPLACE cpermit1 WITH m.cpermit1
		        ENDSCAN
		        SELECT ohtaxfile
		        INDEX ON cpermit1 TAG cpermit1
		        IF lnbad > 0
		            IF MESSAGEBOX(lcMessage + CHR(10) + ' Do you want to continue? If you continue these wells will not be included.', 36, 'Missing API No') = 7
		                llReturn = .F.
		                EXIT
		            ENDIF
		        ENDIF
		        SELECT ohtaxfile
		        m.cpermit1  = 'API WELL NUMBER'
		        m.coilprod  = 'OIL PRODUCTION'
		        m.cgasprod  = 'GAS PRODUCTION'
		        m.clocation = 'LOCATION NAME'
		        SET SAFETY OFF 
		        lcString    = ALLTRIM(m.cpermit1) + ',' + ALLTRIM(m.coilprod) + ',' + ALLTRIM(m.cgasprod) + ',' + ALLTRIM(m.clocation) + CHR(13) + CHR(10)
		        lnReturn    = STRTOFILE(lcString, ALLTRIM(m.goApp.cDataFilePath) + 'OHSEVTAX\' + lcFileName, 0)
		
		        lnReturn = 1
		        IF lnReturn # 0
		            SCAN FOR NOT EMPTY(cpermit1)
		                lcString = ALLTRIM(cpermit1) + ',' + ALLTRIM(coilprod) + ',' + ALLTRIM(cgasprod) + ',' + ALLTRIM(STRTRAN(clocation,',',' ')) + CHR(13) + CHR(10)
		                lnReturn = STRTOFILE(lcString, ALLTRIM(m.goApp.cDataFilePath) + 'OHSEVTAX\' + lcFileName,  1)
		                lncount  = lncount + 1
		            ENDSCAN
		        ENDIF
		        WAIT CLEAR
		        lnMax = lncount 
		        IF MESSAGEBOX('Successfully created the OH Severance Tax File.' + CHR(10) + ;
		                  TRANSFORM(lnMax, '999,999,999') + ' records created.' + CHR(10) + ;
		                  'The file can be found in ' + CHR(10) + m.goApp.cDataFilePath + 'OHSEVTAX' + CHR(10) + ;
		                  'File Name: ' + lcFileName + CHR(10) + CHR(10) + 'DO YOU WANT TO VIEW IT NOW?', 36, 'OH Tax File') = 6
		            THISFORM.ViewDocument(m.goApp.cDataFilePath + 'OHSEVTAX\' + lcFileName)
		        ENDIF
		        SET SAFETY ON 
		    ELSE
		        MESSAGEBOX('No records found to report.', 48, 'OH Tax File')
		        llReturn = .T.
		    ENDIF
		CATCH TO loError
		    IF loError.ERRORNO = 1705
		        MESSAGEBOX('The file: ' + lcFileName + ' is open in another application. Please close the file ' + ;
		              'and try the process again.', 16, 'File In Use')
		    ELSE
		        llReturn = .F.
		        DO errorlog WITH 'BuildData', loError.LINENO, 'OHTAXFILE', loError.ERRORNO, loError.MESSAGE, '', loError
		        MESSAGEBOX('Unable to process the report at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		              'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		    ENDIF
		ENDTRY
		
		RETURN llReturn
	ENDPROC

	PROCEDURE calctax1		&& Calculates tax 1
		LOCAL tcYear1, tcYear2, tcPeriod1, tcPeriod2, tcGroup, tcWell1, tcWell2, tcState
		LOCAL lnMax, lnCount, oProgress
		
		llReturn = .T.
		
		TRY
		    WAIT WINDOW NOWAIT 'Processing tax 1...'
		    tcYear1   = THISFORM.swyear1.VALUE
		    tcYear2   = THISFORM.swyear2.VALUE
		    tcPeriod1 = THISFORM.swPeriod1.VALUE
		    tcPeriod2 = THISFORM.swPeriod2.VALUE
		    tcGroup   = LEFT(THISFORM.swgroup1.VALUE, 2)
		    tcWell1   = THISFORM.swrptlook1.txtBegID.VALUE
		    tcWell2   = THISFORM.swrptlook1.txtEndID.VALUE
		    tcState   = LEFT(THISFORM.swStates.VALUE, 2)
		    tlProdPrd = THISFORM.chkProdPeriod.VALUE
		    tlNoTable = THISFORM.chkNoTable.VALUE
		
		    IF THISFORM.opgReportBy.VALUE = 1
		        DO CASE
		            CASE tnQuarter = 1
		                tcYear2   = tcYear1
		                tcPeriod1 = '01'
		                tcPeriod2 = '03'
		            CASE tnQuarter = 2
		                tcYear2   = tcYear1
		                tcPeriod1 = '04'
		                tcPeriod2 = '06'
		            CASE tnQuarter = 3
		                tcYear2   = tcYear1
		                tcPeriod1 = '07'
		                tcPeriod2 = '09'
		            CASE tnQuarter = 4
		                tcYear2   = tcYear1
		                tcPeriod1 = '10'
		                tcPeriod2 = '12'
		        ENDCASE
		    ENDIF
		
		    CREATE CURSOR taxtemp ;
		        (cwellid    C(10), ;
		          cpermit1    C(20), ;
		          cwellstat  c(1), ;
		          clocation  C(30), ;
		          hyear      C(4), ;
		          hperiod    C(2), ;
		          ngasinc    N(12, 2), ;
		          noilinc    N(12, 2), ;
		          nothinc    N(12, 2), ;
		          ntotbbl    N(12, 4), ;
		          ntotmcf    N(12, 4), ;
		          ntototh    N(12, 4), ;
		          ntotbbltax I, ;
		          ntotmcftax I, ;
		          ntotothtax I)
		
		    IF tlNoTable
		        IF tlProdPrd
					SELECT  wellhist.cwellid, ;
							wells.cwellname as clocation, ;
							wells.cwellstat, ;
							wells.cpermit1, ;
							wellhist.hyear, ;
							wellhist.hperiod, ;
							SUM(wellhist.nGrossGas) AS ngasinc, ;
							SUM(wellhist.nGrossOil) AS noilinc, ;
							SUM(wellhist.nothinc) AS nothinc, ;
							SUM(wellhist.ntotbbl) AS ntotbbl, ;
							SUM(wellhist.ntotmcf) AS ntotmcf, ;
							SUM(wellhist.ntotprod) AS ntototh, ;
							SUM(wellhist.ngbbltax1) AS ntotbbltx1, ;
							SUM(wellhist.ntotbbltxr + ntotbbltxw) AS nmtoiltax, ;
							SUM(wellhist.ntotmcftxr + ntotmcftxw) AS nmtgastax, ;
							SUM(wellhist.ngmcftax1) AS ntotmcftx1, ;
							SUM(wellhist.ngothtax1) AS ntotothtx1, ;
							lSev1O, lSev2O, lSev3O, lSev4O, lSev1G, lSev2G, lSev3G, lSev4G, ldiroilpurch, ldirgaspurch  ;
						FROM wellhist, wells ;
						WHERE BETWEEN(wellhist.hyear + wellhist.hperiod, tcYear1 + tcPeriod1, tcYear2 + tcPeriod2) ;
							AND IIF(tcGroup <> '**', wellhist.cgroup = tcGroup, .T.) ;
							AND wellhist.cwellid = wells.cwellid ;
							AND wells.cstate = 'OH' ;
							AND wellhist.crectype = 'R' ;
							AND NOT wells.lthird_prty  ;
							AND IIF(tcState <> '**', wells.cTable = tcState, .T.)  ;
							AND wellhist.cwellid in (select cid from selected) ;
						INTO CURSOR temptax READWRITE  ;
						ORDER BY wellhist.cwellid, wellhist.hyear, wellhist.hperiod ;
						GROUP BY wellhist.cwellid, wellhist.hyear, wellhist.hperiod
		        ELSE
					SELECT  wellhist.cwellid, ;
							wells.cwellname as clocation, ;
							wells.cwellstat, ;
							wells.cpermit1, ;
							ALLT(STR(YEAR(hdate))) AS hyear, ;
							PADL(ALLT(STR(MONTH(hdate))), 2, '0') AS hperiod, ;
							ALLT(STR(YEAR(hdate))) AS hyearx, ;
							PADL(ALLT(STR(MONTH(hdate))), 2, '0') AS hperiodx, ;
							SUM(wellhist.nGrossGas) AS ngasinc, ;
							SUM(wellhist.nGrossOil) AS noilinc, ;
							SUM(wellhist.nothinc) AS nothinc, ;
							SUM(wellhist.ntotbbl) AS ntotbbl, ;
							SUM(wellhist.ntotmcf) AS ntotmcf, ;
							SUM(wellhist.ntotprod) AS ntototh, ;
							SUM(wellhist.ngbbltax1 + ntotbbltxr + ntotbbltxw) AS ntotbbltx1, ;
							SUM(wellhist.ntotbbltxr + ntotbbltxw) AS nmtoiltax, ;
							SUM(wellhist.ntotmcftxr + ntotmcftxw) AS nmtgastax, ;
							SUM(wellhist.ngmcftax1 + ntotmcftxr + ntotmcftxw) AS ntotmcftx1, ;
							SUM(wellhist.ngothtax1) AS ntotothtx1, ;
							lSev1O, lSev2O, lSev3O, lSev4O, lSev1G, lSev2G, lSev3G, lSev4G, ldiroilpurch, ldirgaspurch  ;
						FROM wellhist, wells ;
						WHERE BETWEEN(ALLT(STR(YEAR(hdate))) + PADL(ALLT(STR(MONTH(hdate))), 2, '0'), tcYear1 + tcPeriod1, tcYear2 + tcPeriod2)  ;
							AND IIF(tcGroup <> '**', wellhist.cgroup = tcGroup, .T.) ;
							AND wellhist.cwellid = wells.cwellid ;
							AND wells.cstate = 'OH' ;
							AND wellhist.crectype = 'R' ;
							AND NOT wells.lthird_prty  ;
							AND IIF(tcState <> '**', wells.cTable = tcState, .T.)  ;
							AND wellhist.cwellid in (select cid from selected) ;
						INTO CURSOR temptax READWRITE  ;
						ORDER BY wellhist.cwellid, hyearx, hperiodx  ;
						GROUP BY wellhist.cwellid, hyearx, hperiodx
		        ENDIF
		    ELSE
		        IF tlProdPrd
					SELECT  wellhist.cwellid, ;
							wells.cwellname as clocation, ;
							wells.cwellstat, ;
							wells.cpermit1, ;
							wellhist.hyear, ;
							wellhist.hperiod, ;
							SUM(wellhist.nGrossGas) AS ngasinc, ;
							SUM(wellhist.nGrossOil) AS noilinc, ;
							SUM(wellhist.nothinc) AS nothinc, ;
							SUM(wellhist.ntotbbl) AS ntotbbl, ;
							SUM(wellhist.ntotmcf) AS ntotmcf, ;
							SUM(wellhist.ntotprod) AS ntototh, ;
							SUM(wellhist.ntotbbltx1 + ntotbbltxr + ntotbbltxw) AS ntotbbltx1, ;
							SUM(wellhist.ntotbbltxr + ntotbbltxw) AS nmtoiltax, ;
							SUM(wellhist.ntotmcftxr + ntotmcftxw) AS nmtgastax, ;
							SUM(wellhist.ntotmcftx1 + ntotmcftxr + ntotmcftxw) AS ntotmcftx1, ;
							SUM(wellhist.ntotothtx1) AS ntotothtx1, ;
							lSev1O, lSev2O, lSev3O, lSev4O, lSev1G, lSev2G, lSev3G, lSev4G, ldiroilpurch, ldirgaspurch  ;
						FROM wellhist, wells ;
						WHERE BETWEEN(wellhist.hyear + wellhist.hperiod, tcYear1 + tcPeriod1, tcYear2 + tcPeriod2) ;
							AND IIF(tcGroup <> '**', wellhist.cgroup = tcGroup, .T.) ;
							AND wellhist.cwellid = wells.cwellid ;
							AND wells.cstate = 'OH' ;
							AND wellhist.crectype = 'R' ;
							AND NOT wells.lthird_prty  ;
							AND IIF(tcState <> '**', wells.cTable = tcState, NOT EMPTY(wells.cTable))  ;
							AND wellhist.cwellid in (select cid from selected) ;
						INTO CURSOR temptax READWRITE  ;
						ORDER BY wellhist.cwellid, wellhist.hyear, wellhist.hperiod ;
						GROUP BY wellhist.cwellid, wellhist.hyear, wellhist.hperiod
		        ELSE
					SELECT  wellhist.cwellid, ;
							wells.cwellname as clocation, ;
							wells.cwellstat, ;
							wells.cpermit1, ;
							ALLT(STR(YEAR(hdate))) AS hyear, ;
							PADL(ALLT(STR(MONTH(hdate))), 2, '0') AS hperiod, ;
							ALLT(STR(YEAR(hdate))) AS hyearx, ;
							PADL(ALLT(STR(MONTH(hdate))), 2, '0') AS hperiodx, ;
							SUM(wellhist.nGrossGas) AS ngasinc, ;
							SUM(wellhist.nGrossOil) AS noilinc, ;
							SUM(wellhist.nothinc) AS nothinc, ;
							SUM(wellhist.ntotbbl) AS ntotbbl, ;
							SUM(wellhist.ntotmcf) AS ntotmcf, ;
							SUM(wellhist.ntotprod) AS ntototh, ;
							SUM(wellhist.ntotbbltx1 + ntotbbltxr + ntotbbltxw) AS ntotbbltx1, ;
							SUM(wellhist.ntotbbltxr + ntotbbltxw) AS nmtoiltax, ;
							SUM(wellhist.ntotmcftxr + ntotmcftxw) AS nmtgastax, ;
							SUM(wellhist.ntotmcftx1 + ntotmcftxr + ntotmcftxw) AS ntotmcftx1, ;
							SUM(wellhist.ntotothtx1) AS ntotothtx1, ;
							lSev1O, lSev2O, lSev3O, lSev4O, lSev1G, lSev2G, lSev3G, lSev4G, ldiroilpurch, ldirgaspurch  ;
						FROM wellhist JOIN wells ON wellhist.cwellid = wells.cwellid ;
						WHERE BETWEEN(ALLT(STR(YEAR(hdate))) + PADL(ALLT(STR(MONTH(hdate))), 2, '0'), tcYear1 + tcPeriod1, tcYear2 + tcPeriod2)  ;
							AND IIF(tcGroup <> '**', wellhist.cgroup = tcGroup, .T.) ;
							AND IIF(tcState <> '**', wells.cTable = tcState, NOT EMPTY(wells.cTable))  ;
							AND wellhist.crectype = 'R' ;
							AND NOT wells.lthird_prty  ;
							AND wells.cstate = 'OH' ;
							AND wellhist.cwellid in (select cid from selected) ;
						INTO CURSOR temptax READWRITE  ;
						ORDER BY wellhist.cwellid, hyearx, hperiodx  ;
						GROUP BY wellhist.cwellid, hyearx, hperiodx
		        ENDIF
		    ENDIF
		    
		    * Get the wells that aren't in temptax since right join wouldn't work
		       SELECT wells.cwellid, wells.cwellname as clocation, ;
							wells.cwellstat, ;
							wells.cpermit1, ;
							tcyear2 as hyear, tcyear2 as hyearx, ;
							tcperiod2 as hperiod, tcperiod2 as hperiodx ;
			  FROM wells ;
			  WHERE cwellid NOT in (SELECT cwellid FROM temptax) ;
			       AND cwellid in (SELECT cid FROM selected) ;
			       AND wells.lthird_prty = .f. ;
			       AND IIF(tcGroup <> '**', wells.cgroup = tcGroup, .T.) ;
		    	   AND IIF(tcState <> '**', wells.cTable = tcState, NOT EMPTY(wells.cTable))  ; 
		    	   AND wells.cstate = 'OH' ;
			    INTO CURSOR missingwells 
			
			IF _tally > 0
			   SELECT temptax
			   APPEND FROM DBF('missingwells')
			ENDIF     
			    				
		    oProgress = THISFORM.oMessage.ProgressBar('Calculating Tax 1 Taxes by Period...')
		    SELECT temptax
		    COUNT ALL TO lnMax
		    lnCount = 1
		    oProgress.SetProgressRange(0, lnMax)
		
		    SELECT temptax
		    SCAN
		        SCATTER MEMVAR
		        oProgress.UpdateProgress(lnCount)
		        lnCount = lnCount + 1
		
		*  Don't report inactive or plugged wells if they had no production.
		        IF NOT INLIST(m.cwellstat,'A','N')
		           IF m.ntotbbl = 0 AND m.ntotmcf = 0
		              DELETE NEXT 1
		              LOOP 
		           ENDIF
		        ENDIF 
		        
		*  Check the settings for whether the purchaser withholds certain types of taxes, and remove those amounts
		*  from the units reported
		        IF m.lSev1O
		            SELECT temptax
		            REPLACE ntotbbl WITH 0, noilinc WITH 0
		            STORE 0 TO m.ntotbbl, m.noilinc
		        ENDIF
		        IF m.lSev1G
		            SELECT temptax
		            REPLACE ntotmcf WITH 0, ngasinc WITH 0
		            STORE 0 TO m.ntotmcf, m.ngasinc
		        ENDIF
		        IF m.ldiroilpurch
		           m.ntotbbl = THISFORM.oDist.netrev(m.cwellid, m.ntotbbl, 'O')
		        ENDIF     
		        IF m.ldirgaspurch
		           m.ntotmcf = THISFORM.oDist.netrev(m.cwellid, m.ntotmcf, 'G')
		        ENDIF     
		
		        m.ntotbbltax = m.ntotbbltx1
		        m.ntotmcftax = m.ntotmcftx1
		        m.ntotothtax = m.ntotothtx1
		  
		*!*	        IF tlNoTable
		*!*	            m.ngasinc    = THISFORM.oDist.netrev(m.cwellid, m.ngasinc, 'G', .F., .T.)
		*!*	            m.noilinc    = THISFORM.oDist.netrev(m.cwellid, m.noilinc, 'O', .F., .T.)
		*!*	            m.ntotbbl    = THISFORM.oDist.netrev(m.cwellid, m.ntotbbl, 'O', .F., .T.)
		*!*	            m.ntotmcf    = THISFORM.oDist.netrev(m.cwellid, m.ntotmcf, 'G', .F., .T.)
		*!*	            m.ntotbbltax = THISFORM.oDist.netrev(m.cwellid, m.ntotbbltx1, 'O1', .F., .T., .T., , .T.) + m.nmtoiltax
		*!*	            m.ntotmcftax = THISFORM.oDist.netrev(m.cwellid, m.ntotmcftx1, 'G1', .F., .T., .T., , .T.) + m.nmtgastax
		*!*	            m.ntotothtax = THISFORM.oDist.netrev(m.cwellid, m.ntotothtx1, 'P1', .F., .T., .T., , .T.)
		*!*	        ENDIF
		        INSERT INTO taxtemp FROM MEMVAR
		    ENDSCAN
		
		    oProgress.CloseProgress()
		
		CATCH TO loError
		    llReturn = .F.
		    IF VARTYPE(oProgress) = 'O'
		        oProgress.CloseProgress()
		    ENDIF
		    DO errorlog WITH 'CalcTax1', loError.LINENO, 'OHTaxFile', loError.ERRORNO, loError.MESSAGE, '', loError
		    MESSAGEBOX('Unable to process the report at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		          'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		RETURN llReturn
		
		
		
	ENDPROC

	PROCEDURE calctax1qtr		&& Calculate tax 1 by quarter
	ENDPROC

	PROCEDURE calctax2		&& calculate taxes 2
		LOCAL tcYear1, tcYear2, tcPeriod1, tcPeriod2, tcGroup, tcWell1, tcWell2, tcState
		LOCAL lnMax, lnCount, oProgress
		
		llReturn = .T.
		
		TRY
		   WAIT WINDOW NOWAIT 'Processing tax 2...'
		    tcYear1   = THISFORM.swyear1.VALUE
		    tcYear2   = THISFORM.swyear2.VALUE
		    tcPeriod1 = THISFORM.swPeriod1.VALUE
		    tcPeriod2 = THISFORM.swPeriod2.VALUE
		    tcGroup   = LEFT(THISFORM.swgroup1.VALUE, 2)
		    tcWell1   = THISFORM.swrptlook1.txtBegID.VALUE
		    tcWell2   = THISFORM.swrptlook1.txtEndID.VALUE
		    tcState   = LEFT(THISFORM.swStates.VALUE, 2)
		    tlProdPrd = THISFORM.chkProdPeriod.VALUE
		    tlNoTable = THISFORM.chkNoTable.VALUE
		
		    IF THISFORM.opgReportBy.VALUE = 1
		        DO CASE
		            CASE tnQuarter = 1
		                tcYear2   = tcYear1
		                tcPeriod1 = '01'
		                tcPeriod2 = '03'
		            CASE tnQuarter = 2
		                tcYear2   = tcYear1
		                tcPeriod1 = '04'
		                tcPeriod2 = '06'
		            CASE tnQuarter = 3
		                tcYear2   = tcYear1
		                tcPeriod1 = '07'
		                tcPeriod2 = '09'
		            CASE tnQuarter = 4
		                tcYear2   = tcYear1
		                tcPeriod1 = '10'
		                tcPeriod2 = '12'
		        ENDCASE
		    ENDIF
		
		    CREATE CURSOR taxtemp ;
		        (cwellid    C(10), ;
		         cwellstat  c(1), ;
		          cpermit1    C(20), ;
		          clocation  C(30), ;
		          hyear      C(4), ;
		          hperiod    C(2), ;
		          ngasinc    N(12, 2), ;
		          noilinc    N(12, 2), ;
		          nothinc    N(12, 2), ;
		          ntotbbl    N(12, 4), ;
		          ntotmcf    N(12, 4), ;
		          ntototh    N(12, 4), ;
		          ntotbbltax I, ;
		          ntotmcftax I, ;
		          ntotothtax I)
		
		    IF tlNoTable
		        IF tlProdPrd
					SELECT  wellhist.cwellid, ;
							wells.cwellname as clocation, ;
							wells.cwellstat, ;
							wells.cpermit1, ;
							wellhist.hyear, ;
							wellhist.hperiod, ;
							SUM(wellhist.nGrossGas) AS ngasinc, ;
							SUM(wellhist.nGrossOil) AS noilinc, ;
							SUM(wellhist.nothinc) AS nothinc, ;
							SUM(wellhist.ntotbbl) AS ntotbbl, ;
							SUM(wellhist.ntotmcf) AS ntotmcf, ;
							SUM(wellhist.ntotprod) AS ntototh, ;
							SUM(wellhist.ngbbltax2) AS ntotbbltx2, ;
							SUM(wellhist.ntotbbltxr + ntotbbltxw) AS nmtoiltax, ;
							SUM(wellhist.ntotmcftxr + ntotmcftxw) AS nmtgastax, ;
							SUM(wellhist.ngmcftax2) AS ntotmcftx2, ;
							SUM(wellhist.ngothtax2) AS ntotothtx2, ;
							lSev1O, lSev2O, lSev3O, lSev4O, lSev1G, lSev2G, lSev3G, lSev4G, ldiroilpurch, ldirgaspurch  ;
						FROM wellhist, wells ;
						WHERE BETWEEN(wellhist.hyear + wellhist.hperiod, tcYear1 + tcPeriod1, tcYear2 + tcPeriod2) ;
							AND IIF(tcGroup <> '**', wellhist.cgroup = tcGroup, .T.) ;
							AND wellhist.cwellid = wells.cwellid ;
							AND wells.cstate = 'OH' ;
							AND wellhist.crectype = 'R' ;
							AND NOT wells.lthird_prty  ;
							AND IIF(tcState <> '**', wells.cTable = tcState, .T.)  ;
							AND wellhist.cwellid in (select cid from selected) ;
						INTO CURSOR temptax READWRITE  ;
						ORDER BY wellhist.cwellid, wellhist.hyear, wellhist.hperiod ;
						GROUP BY wellhist.cwellid, wellhist.hyear, wellhist.hperiod
		        ELSE
					SELECT  wellhist.cwellid, ;
							wells.cwellname as clocation, ;
							wells.cwellstat, ;
							wells.cpermit1, ;
							ALLT(STR(YEAR(hdate))) AS hyear, ;
							PADL(ALLT(STR(MONTH(hdate))), 2, '0') AS hperiod, ;
							ALLT(STR(YEAR(hdate))) AS hyearx, ;
							PADL(ALLT(STR(MONTH(hdate))), 2, '0') AS hperiodx, ;
							SUM(wellhist.nGrossGas) AS ngasinc, ;
							SUM(wellhist.nGrossOil) AS noilinc, ;
							SUM(wellhist.nothinc) AS nothinc, ;
							SUM(wellhist.ntotbbl) AS ntotbbl, ;
							SUM(wellhist.ntotmcf) AS ntotmcf, ;
							SUM(wellhist.ntotprod) AS ntototh, ;
							SUM(wellhist.ngbbltax2 + ntotbbltxr + ntotbbltxw) AS ntotbbltx2, ;
							SUM(wellhist.ntotbbltxr + ntotbbltxw) AS nmtoiltax, ;
							SUM(wellhist.ntotmcftxr + ntotmcftxw) AS nmtgastax, ;
							SUM(wellhist.ngmcftax2 + ntotmcftxr + ntotmcftxw) AS ntotmcftx2, ;
							SUM(wellhist.ngothtax2) AS ntotothtx2, ;
							lSev1O, lSev2O, lSev3O, lSev4O, lSev1G, lSev2G, lSev3G, lSev4G, ldiroilpurch, ldirgaspurch  ;
						FROM wellhist, wells ;
						WHERE BETWEEN(ALLT(STR(YEAR(hdate))) + PADL(ALLT(STR(MONTH(hdate))), 2, '0'), tcYear1 + tcPeriod1, tcYear2 + tcPeriod2)  ;
							AND IIF(tcGroup <> '**', wellhist.cgroup = tcGroup, .T.) ;
							AND wellhist.cwellid = wells.cwellid ;
							AND wells.cstate = 'OH' ;
							AND wellhist.crectype = 'R' ;
							AND NOT wells.lthird_prty  ;
							AND IIF(tcState <> '**', wells.cTable = tcState, .T.)  ;
							AND wellhist.cwellid in (select cid from selected) ;
						INTO CURSOR temptax READWRITE  ;
						ORDER BY wellhist.cwellid, hyearx, hperiodx  ;
						GROUP BY wellhist.cwellid, hyearx, hperiodx
		        ENDIF
		    ELSE
		        IF tlProdPrd
					SELECT  wellhist.cwellid, ;
							wells.cwellname as clocation, ;
							wells.cwellstat, ;
							wells.cpermit1, ;
							wellhist.hyear, ;
							wellhist.hperiod, ;
							SUM(wellhist.nGrossGas) AS ngasinc, ;
							SUM(wellhist.nGrossOil) AS noilinc, ;
							SUM(wellhist.nothinc) AS nothinc, ;
							SUM(wellhist.ntotbbl) AS ntotbbl, ;
							SUM(wellhist.ntotmcf) AS ntotmcf, ;
							SUM(wellhist.ntotprod) AS ntototh, ;
							SUM(wellhist.ntotbbltx2 + ntotbbltxr + ntotbbltxw) AS ntotbbltx2, ;
							SUM(wellhist.ntotbbltxr + ntotbbltxw) AS nmtoiltax, ;
							SUM(wellhist.ntotmcftxr + ntotmcftxw) AS nmtgastax, ;
							SUM(wellhist.ntotmcftx2 + ntotmcftxr + ntotmcftxw) AS ntotmcftx2, ;
							SUM(wellhist.ntotothtx2) AS ntotothtx2, ;
							lSev1O, lSev2O, lSev3O, lSev4O, lSev1G, lSev2G, lSev3G, lSev4G, ldiroilpurch, ldirgaspurch  ;
						FROM wellhist, wells ;
						WHERE BETWEEN(wellhist.hyear + wellhist.hperiod, tcYear1 + tcPeriod1, tcYear2 + tcPeriod2) ;
							AND IIF(tcGroup <> '**', wellhist.cgroup = tcGroup, .T.) ;
							AND wellhist.cwellid = wells.cwellid ;
							AND wells.cstate = 'OH' ;
							AND wellhist.crectype = 'R' ;
							AND NOT wells.lthird_prty  ;
							AND IIF(tcState <> '**', wells.cTable = tcState, NOT EMPTY(wells.cTable))  ;
							AND wellhist.cwellid in (select cid from selected) ;
						INTO CURSOR temptax READWRITE  ;
						ORDER BY wellhist.cwellid, wellhist.hyear, wellhist.hperiod ;
						GROUP BY wellhist.cwellid, wellhist.hyear, wellhist.hperiod
		        ELSE
					SELECT  wellhist.cwellid, ;
							wells.cwellname as clocation, ;
							wells.cwellstat, ;
							wells.cpermit1, ;
							ALLT(STR(YEAR(hdate))) AS hyear, ;
							PADL(ALLT(STR(MONTH(hdate))), 2, '0') AS hperiod, ;
							ALLT(STR(YEAR(hdate))) AS hyearx, ;
							PADL(ALLT(STR(MONTH(hdate))), 2, '0') AS hperiodx, ;
							SUM(wellhist.nGrossGas) AS ngasinc, ;
							SUM(wellhist.nGrossOil) AS noilinc, ;
							SUM(wellhist.nothinc) AS nothinc, ;
							SUM(wellhist.ntotbbl) AS ntotbbl, ;
							SUM(wellhist.ntotmcf) AS ntotmcf, ;
							SUM(wellhist.ntotprod) AS ntototh, ;
							SUM(wellhist.ntotbbltx2 + ntotbbltxr + ntotbbltxw) AS ntotbbltx2, ;
							SUM(wellhist.ntotbbltxr + ntotbbltxw) AS nmtoiltax, ;
							SUM(wellhist.ntotmcftxr + ntotmcftxw) AS nmtgastax, ;
							SUM(wellhist.ntotmcftx2 + ntotmcftxr + ntotmcftxw) AS ntotmcftx2, ;
							SUM(wellhist.ntotothtx2) AS ntotothtx2, ;
							lSev1O, lSev2O, lSev3O, lSev4O, lSev1G, lSev2G, lSev3G, lSev4G, ldiroilpurch, ldirgaspurch  ;
						FROM wellhist, wells ;
						WHERE BETWEEN(ALLT(STR(YEAR(hdate))) + PADL(ALLT(STR(MONTH(hdate))), 2, '0'), tcYear1 + tcPeriod1, tcYear2 + tcPeriod2)  ;
							AND IIF(tcGroup <> '**', wellhist.cgroup = tcGroup, .T.) ;
							AND IIF(tcState <> '**', wells.cTable = tcState, NOT EMPTY(wells.cTable))  ;
							AND wellhist.cwellid = wells.cwellid ;
							AND wells.cstate = 'OH' ;
							AND wellhist.crectype = 'R' ;
							AND NOT wells.lthird_prty  ;
							AND IIF(tcState <> '**', wells.cTable = tcState, .T.)  ;
							AND wellhist.cwellid in (select cid from selected) ;
						INTO CURSOR temptax READWRITE  ;
						ORDER BY wellhist.cwellid, hyearx, hperiodx  ;
						GROUP BY wellhist.cwellid, hyearx, hperiodx
		        ENDIF
		    ENDIF
		    
		    
		        * Get the wells that aren't in temptax since right join wouldn't work
		       SELECT wells.cwellid, wells.cwellname as clocation, ;
							wells.cwellstat, ;
							wells.cpermit1, ;
							tcyear2 as hyear, tcyear2 as hyearx, ;
							tcperiod2 as hperiod, tcperiod2 as hperiodx ;
			  FROM wells ;
			  WHERE cwellid NOT in (SELECT cwellid FROM temptax) ;
			       AND cwellid in (SELECT cid FROM selected) ;
			       AND wells.lthird_prty = .f. ;
			       AND IIF(tcGroup <> '**', wells.cgroup = tcGroup, .T.) ;
		    	   AND IIF(tcState <> '**', wells.cTable = tcState, NOT EMPTY(wells.cTable))  ; 
		    	   AND wells.cstate = 'OH' ;
			    INTO CURSOR missingwells 
			
			IF _tally > 0
			   SELECT temptax
			   APPEND FROM DBF('missingwells')
			ENDIF     
		
		    oProgress = THISFORM.oMessage.ProgressBar('Calculating Tax 2 Taxes by Period...')
		    SELECT temptax
		    COUNT ALL TO lnMax
		    lnCount = 1
		    oProgress.SetProgressRange(0, lnMax)
		
		    SELECT temptax
		    SCAN
		        SCATTER MEMVAR
		        oProgress.UpdateProgress(lnCount)
		        lnCount = lnCount + 1
		
		*  Don't report inactive or plugged wells if they had no production.
		        IF NOT INLIST(m.cwellstat,'A','N')
		           IF m.ntotbbl = 0 AND m.ntotmcf = 0
		              DELETE NEXT 1
		              LOOP 
		           ENDIF
		        ENDIF 
		        
		*  Check the settings for whether the purchaser withholds certain types of taxes, and remove those amounts
		*  from the units reported
		        IF m.lSev1O
		            SELECT temptax
		            REPLACE ntotbbl WITH 0, noilinc WITH 0
		            STORE 0 TO m.ntotbbl, m.noilinc
		        ENDIF
		        IF m.lSev1G
		            SELECT temptax
		            REPLACE ntotmcf WITH 0, ngasinc WITH 0
		            STORE 0 TO m.ntotmcf, m.ngasinc
		        ENDIF
		        IF m.ldiroilpurch
		           m.ntotbbl = THISFORM.oDist.netrev(m.cwellid, m.ntotbbl, 'O')
		        ENDIF     
		        IF m.ldirgaspurch
		           m.ntotmcf = THISFORM.oDist.netrev(m.cwellid, m.ntotmcf, 'G')
		        ENDIF     
		
		
		        m.ntotbbltax = m.ntotbbltx2
		        m.ntotmcftax = m.ntotmcftx2
		        m.ntotothtax = m.ntotothtx2
		*!*	        IF tlNoTable
		*!*	            m.ngasinc    = THISFORM.oDist.netrev(m.cwellid, m.ngasinc, 'G', .F., .T.)
		*!*	            m.noilinc    = THISFORM.oDist.netrev(m.cwellid, m.noilinc, 'O', .F., .T.)
		*!*	            m.ntotbbl    = THISFORM.oDist.netrev(m.cwellid, m.ntotbbl, 'O', .F., .T.)
		*!*	            m.ntotmcf    = THISFORM.oDist.netrev(m.cwellid, m.ntotmcf, 'G', .F., .T.)
		*!*	            m.ntotbbltax = THISFORM.oDist.netrev(m.cwellid, m.ntotbbltx2, 'O1', .F., .T., .T., , .T.) + m.nmtoiltax
		*!*	            m.ntotmcftax = THISFORM.oDist.netrev(m.cwellid, m.ntotmcftx2, 'G1', .F., .T., .T., , .T.) + m.nmtgastax
		*!*	            m.ntotothtax = THISFORM.oDist.netrev(m.cwellid, m.ntotothtx2, 'P1', .F., .T., .T., , .T.)
		*!*	        ENDIF
		        INSERT INTO taxtemp FROM MEMVAR
		    ENDSCAN
		
		    oProgress.CloseProgress()
		
		CATCH TO loError
		    llReturn = .F.
		    IF VARTYPE(oProgress) = 'O'
		        oProgress.CloseProgress()
		    ENDIF
		    DO errorlog WITH 'CalcTax2', loError.LINENO, 'OHTaxFile', loError.ERRORNO, loError.MESSAGE, '', loError
		    MESSAGEBOX('Unable to process the report at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		          'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		RETURN llReturn
		
		
		
	ENDPROC

	PROCEDURE calctax2qtr		&& Calculate tax 2 by quarter
	ENDPROC

	PROCEDURE calctax3		&& Calculates tax 3
		LOCAL tcYear1, tcYear2, tcPeriod1, tcPeriod2, tcGroup, tcWell1, tcWell2, tcState
		LOCAL lnMax, lnCount, oProgress
		
		llReturn = .T.
		
		TRY
		    WAIT WINDOW NOWAIT 'Processing tax 3...'
		    tcYear1   = THISFORM.swyear1.VALUE
		    tcYear2   = THISFORM.swyear2.VALUE
		    tcPeriod1 = THISFORM.swPeriod1.VALUE
		    tcPeriod2 = THISFORM.swPeriod2.VALUE
		    tcGroup   = LEFT(THISFORM.swgroup1.VALUE, 2)
		    tcWell1   = THISFORM.swrptlook1.txtBegID.VALUE
		    tcWell2   = THISFORM.swrptlook1.txtEndID.VALUE
		    tcState   = LEFT(THISFORM.swStates.VALUE, 2)
		    tlProdPrd = THISFORM.chkProdPeriod.VALUE
		    tlNoTable = THISFORM.chkNoTable.VALUE
		
		    IF THISFORM.opgReportBy.VALUE = 1
		        DO CASE
		            CASE tnQuarter = 1
		                tcYear2   = tcYear1
		                tcPeriod1 = '01'
		                tcPeriod2 = '03'
		            CASE tnQuarter = 2
		                tcYear2   = tcYear1
		                tcPeriod1 = '04'
		                tcPeriod2 = '06'
		            CASE tnQuarter = 3
		                tcYear2   = tcYear1
		                tcPeriod1 = '07'
		                tcPeriod2 = '09'
		            CASE tnQuarter = 4
		                tcYear2   = tcYear1
		                tcPeriod1 = '10'
		                tcPeriod2 = '12'
		        ENDCASE
		    ENDIF
		
		    CREATE CURSOR taxtemp ;
		        (cwellid    C(10), ;
		          cwellstat  c(1), ;
		          cpermit1    C(20), ;
		          clocation  C(30), ;
		          hyear      C(4), ;
		          hperiod    C(2), ;
		          ngasinc    N(12, 2), ;
		          noilinc    N(12, 2), ;
		          nothinc    N(12, 2), ;
		          ntotbbl    N(12, 4), ;
		          ntotmcf    N(12, 4), ;
		          ntototh    N(12, 4), ;
		          ntotbbltax I, ;
		          ntotmcftax I, ;
		          ntotothtax I)
		
		    IF tlNoTable
		        IF tlProdPrd
					SELECT  wellhist.cwellid, ;
							wells.cwellname as clocation, ;
							wells.cwellstat, ;
							wells.cpermit1, ;
							wellhist.hyear, ;
							wellhist.hperiod, ;
							SUM(wellhist.nGrossGas) AS ngasinc, ;
							SUM(wellhist.nGrossOil) AS noilinc, ;
							SUM(wellhist.nothinc) AS nothinc, ;
							SUM(wellhist.ntotbbl) AS ntotbbl, ;
							SUM(wellhist.ntotmcf) AS ntotmcf, ;
							SUM(wellhist.ntotprod) AS ntototh, ;
							SUM(wellhist.ngbbltax3) AS ntotbbltx3, ;
							SUM(wellhist.ntotbbltxr + ntotbbltxw) AS nmtoiltax, ;
							SUM(wellhist.ntotmcftxr + ntotmcftxw) AS nmtgastax, ;
							SUM(wellhist.ngmcftax3) AS ntotmcftx3, ;
							SUM(wellhist.ngothtax3) AS ntotothtx3, ;
							lSev1O, lSev2O, lSev3O, lSev4O, lSev1G, lSev2G, lSev3G, lSev4G, ldiroilpurch, ldirgaspurch  ;
						FROM wellhist, wells ;
						WHERE BETWEEN(wellhist.hyear + wellhist.hperiod, tcYear1 + tcPeriod1, tcYear2 + tcPeriod2) ;
							AND IIF(tcGroup <> '**', wellhist.cgroup = tcGroup, .T.) ;
							AND wellhist.cwellid = wells.cwellid ;
							AND wells.cstate = 'OH' ;
							AND wellhist.crectype = 'R' ;
							AND NOT wells.lthird_prty  ;
							AND IIF(tcState <> '**', wells.cTable = tcState, .T.)  ;
							AND wellhist.cwellid in (select cid from selected) ;
						INTO CURSOR temptax READWRITE  ;
						ORDER BY wellhist.cwellid, wellhist.hyear, wellhist.hperiod ;
						GROUP BY wellhist.cwellid, wellhist.hyear, wellhist.hperiod
		        ELSE
					SELECT  wellhist.cwellid, ;
							wells.cwellname as clocation, ;
							wells.cwellstat, ;
							wells.cpermit1, ;
							ALLT(STR(YEAR(hdate))) AS hyear, ;
							PADL(ALLT(STR(MONTH(hdate))), 2, '0') AS hperiod, ;
							ALLT(STR(YEAR(hdate))) AS hyearx, ;
							PADL(ALLT(STR(MONTH(hdate))), 2, '0') AS hperiodx, ;
							SUM(wellhist.nGrossGas) AS ngasinc, ;
							SUM(wellhist.nGrossOil) AS noilinc, ;
							SUM(wellhist.nothinc) AS nothinc, ;
							SUM(wellhist.ntotbbl) AS ntotbbl, ;
							SUM(wellhist.ntotmcf) AS ntotmcf, ;
							SUM(wellhist.ntotprod) AS ntototh, ;
							SUM(wellhist.ngbbltax3 + ntotbbltxr + ntotbbltxw) AS ntotbbltx3, ;
							SUM(wellhist.ntotbbltxr + ntotbbltxw) AS nmtoiltax, ;
							SUM(wellhist.ntotmcftxr + ntotmcftxw) AS nmtgastax, ;
							SUM(wellhist.ngmcftax3 + ntotmcftxr + ntotmcftxw) AS ntotmcftx3, ;
							SUM(wellhist.ngothtax3) AS ntotothtx3, ;
							lSev1O, lSev2O, lSev3O, lSev4O, lSev1G, lSev2G, lSev3G, lSev4G, ldiroilpurch, ldirgaspurch  ;
						FROM wellhist, wells ;
						WHERE BETWEEN(ALLT(STR(YEAR(hdate))) + PADL(ALLT(STR(MONTH(hdate))), 2, '0'), tcYear1 + tcPeriod1, tcYear2 + tcPeriod2)  ;
							AND IIF(tcGroup <> '**', wellhist.cgroup = tcGroup, .T.) ;
							AND wellhist.cwellid = wells.cwellid ;
							AND wells.cstate = 'OH' ;
							AND wellhist.crectype = 'R' ;
							AND NOT wells.lthird_prty  ;
							AND IIF(tcState <> '**', wells.cTable = tcState, .T.)  ;
							AND wellhist.cwellid in (select cid from selected) ;
						INTO CURSOR temptax READWRITE  ;
						ORDER BY wellhist.cwellid, hyearx, hperiodx  ;
						GROUP BY wellhist.cwellid, hyearx, hperiodx
		        ENDIF
		    ELSE
		        IF tlProdPrd
					SELECT  wellhist.cwellid, ;
							wells.cwellname as clocation, ;
							wells.cwellstat, ;
							wells.cpermit1, ;
							wellhist.hyear, ;
							wellhist.hperiod, ;
							SUM(wellhist.nGrossGas) AS ngasinc, ;
							SUM(wellhist.nGrossOil) AS noilinc, ;
							SUM(wellhist.nothinc) AS nothinc, ;
							SUM(wellhist.ntotbbl) AS ntotbbl, ;
							SUM(wellhist.ntotmcf) AS ntotmcf, ;
							SUM(wellhist.ntotprod) AS ntototh, ;
							SUM(wellhist.ntotbbltx3 + ntotbbltxr + ntotbbltxw) AS ntotbbltx3, ;
							SUM(wellhist.ntotbbltxr + ntotbbltxw) AS nmtoiltax, ;
							SUM(wellhist.ntotmcftxr + ntotmcftxw) AS nmtgastax, ;
							SUM(wellhist.ntotmcftx3 + ntotmcftxr + ntotmcftxw) AS ntotmcftx3, ;
							SUM(wellhist.ntotothtx3) AS ntotothtx3, ;
							lSev1O, lSev2O, lSev3O, lSev4O, lSev1G, lSev2G, lSev3G, lSev4G, ldiroilpurch, ldirgaspurch  ;
						FROM wellhist, wells ;
						WHERE BETWEEN(wellhist.hyear + wellhist.hperiod, tcYear1 + tcPeriod1, tcYear2 + tcPeriod2) ;
							AND IIF(tcGroup <> '**', wellhist.cgroup = tcGroup, .T.) ;
							AND wellhist.cwellid = wells.cwellid ;
							AND wells.cstate = 'OH' ;
							AND wellhist.crectype = 'R' ;
							AND NOT wells.lthird_prty  ;
							AND IIF(tcState <> '**', wells.cTable = tcState, NOT EMPTY(wells.cTable))  ;
							AND wellhist.cwellid in (select cid from selected) ;
						INTO CURSOR temptax READWRITE  ;
						ORDER BY wellhist.cwellid, wellhist.hyear, wellhist.hperiod ;
						GROUP BY wellhist.cwellid, wellhist.hyear, wellhist.hperiod
		        ELSE
					SELECT  wellhist.cwellid, ;
							wells.cwellname as clocation, ;
							wells.cwellstat, ;
							wells.cpermit1, ;
							ALLT(STR(YEAR(hdate))) AS hyear, ;
							PADL(ALLT(STR(MONTH(hdate))), 2, '0') AS hperiod, ;
							ALLT(STR(YEAR(hdate))) AS hyearx, ;
							PADL(ALLT(STR(MONTH(hdate))), 2, '0') AS hperiodx, ;
							SUM(wellhist.nGrossGas) AS ngasinc, ;
							SUM(wellhist.nGrossOil) AS noilinc, ;
							SUM(wellhist.nothinc) AS nothinc, ;
							SUM(wellhist.ntotbbl) AS ntotbbl, ;
							SUM(wellhist.ntotmcf) AS ntotmcf, ;
							SUM(wellhist.ntotprod) AS ntototh, ;
							SUM(wellhist.ntotbbltx3 + ntotbbltxr + ntotbbltxw) AS ntotbbltx3, ;
							SUM(wellhist.ntotbbltxr + ntotbbltxw) AS nmtoiltax, ;
							SUM(wellhist.ntotmcftxr + ntotmcftxw) AS nmtgastax, ;
							SUM(wellhist.ntotmcftx3 + ntotmcftxr + ntotmcftxw) AS ntotmcftx3, ;
							SUM(wellhist.ntotothtx3) AS ntotothtx3, ;
							lSev1O, lSev2O, lSev3O, lSev4O, lSev1G, lSev2G, lSev3G, lSev4G, ldiroilpurch, ldirgaspurch  ;
						FROM wellhist, wells ;
						WHERE BETWEEN(ALLT(STR(YEAR(hdate))) + PADL(ALLT(STR(MONTH(hdate))), 2, '0'), tcYear1 + tcPeriod1, tcYear2 + tcPeriod2)  ;
							AND IIF(tcGroup <> '**', wellhist.cgroup = tcGroup, .T.) ;
							AND IIF(tcState <> '**', wells.cTable = tcState, NOT EMPTY(wells.cTable))  ;
							AND wellhist.cwellid = wells.cwellid ;
							AND wells.cstate = 'OH' ;
							AND wellhist.crectype = 'R' ;
							AND NOT wells.lthird_prty  ;
							AND IIF(tcState <> '**', wells.cTable = tcState, .T.)  ;
							AND wellhist.cwellid in (select cid from selected) ;
						INTO CURSOR temptax READWRITE  ;
						ORDER BY wellhist.cwellid, hyearx, hperiodx  ;
						GROUP BY wellhist.cwellid, hyearx, hperiodx
		        ENDIF
		    ENDIF
		    
		        * Get the wells that aren't in temptax since right join wouldn't work
		       SELECT wells.cwellid, wells.cwellname as clocation, ;
							wells.cwellstat, ;
							wells.cpermit1, ;
							tcyear2 as hyear, tcyear2 as hyearx, ;
							tcperiod2 as hperiod, tcperiod2 as hperiodx ;
			  FROM wells ;
			  WHERE cwellid NOT in (SELECT cwellid FROM temptax) ;
			       AND cwellid in (SELECT cid FROM selected) ;
			       AND wells.lthird_prty = .f. ;
			       AND IIF(tcGroup <> '**', wells.cgroup = tcGroup, .T.) ;
		    	   AND IIF(tcState <> '**', wells.cTable = tcState, NOT EMPTY(wells.cTable))  ; 
		    	   AND wells.cstate = 'OH' ;
			    INTO CURSOR missingwells 
			
			IF _tally > 0
			   SELECT temptax
			   APPEND FROM DBF('missingwells')
			ENDIF     
		
		    oProgress = THISFORM.oMessage.ProgressBar('Calculating Tax 3 Taxes by Period...')
		    SELECT temptax
		    COUNT ALL TO lnMax
		    lnCount = 1
		    oProgress.SetProgressRange(0, lnMax)
		
		    SELECT temptax
		    SCAN
		        SCATTER MEMVAR
		        oProgress.UpdateProgress(lnCount)
		        lnCount = lnCount + 1
		
		*  Don't report inactive or plugged wells if they had no production.
		        IF NOT INLIST(m.cwellstat,'A','N')
		           IF m.ntotbbl = 0 AND m.ntotmcf = 0
		              DELETE NEXT 1
		              LOOP 
		           ENDIF
		        ENDIF 
		        
		*  Check the settings for whether the purchaser withholds certain types of taxes, and remove those amounts
		*  from the units reported
		        IF m.lSev1O
		            SELECT temptax
		            REPLACE ntotbbl WITH 0, noilinc WITH 0
		            STORE 0 TO m.ntotbbl, m.noilinc
		        ENDIF
		        IF m.lSev1G
		            SELECT temptax
		            REPLACE ntotmcf WITH 0, ngasinc WITH 0
		            STORE 0 TO m.ntotmcf, m.ngasinc
		        ENDIF
		        IF m.ldiroilpurch
		           m.ntotbbl = THISFORM.oDist.netrev(m.cwellid, m.ntotbbl, 'O')
		        ENDIF     
		        IF m.ldirgaspurch
		           m.ntotmcf = THISFORM.oDist.netrev(m.cwellid, m.ntotmcf, 'G')
		        ENDIF     
		
		        m.ntotbbltax = m.ntotbbltx3
		        m.ntotmcftax = m.ntotmcftx3
		        m.ntotothtax = m.ntotothtx3
		*!*	        IF tlNoTable
		*!*	            m.ngasinc    = THISFORM.oDist.netrev(m.cwellid, m.ngasinc, 'G', .F., .T.)
		*!*	            m.noilinc    = THISFORM.oDist.netrev(m.cwellid, m.noilinc, 'O', .F., .T.)
		*!*	            m.ntotbbl    = THISFORM.oDist.netrev(m.cwellid, m.ntotbbl, 'O', .F., .T.)
		*!*	            m.ntotmcf    = THISFORM.oDist.netrev(m.cwellid, m.ntotmcf, 'G', .F., .T.)
		*!*	            m.ntotbbltax = THISFORM.oDist.netrev(m.cwellid, m.ntotbbltx3, 'O1', .F., .T., .T., , .T.) + m.nmtoiltax
		*!*	            m.ntotmcftax = THISFORM.oDist.netrev(m.cwellid, m.ntotmcftx3, 'G1', .F., .T., .T., , .T.) + m.nmtgastax
		*!*	            m.ntotothtax = THISFORM.oDist.netrev(m.cwellid, m.ntotothtx3, 'P1', .F., .T., .T., , .T.)
		*!*	        ENDIF
		        INSERT INTO taxtemp FROM MEMVAR
		    ENDSCAN
		
		    oProgress.CloseProgress()
		
		CATCH TO loError
		    llReturn = .F.
		    IF VARTYPE(oProgress) = 'O'
		        oProgress.CloseProgress()
		    ENDIF
		    DO errorlog WITH 'Calctax3', loError.LINENO, 'OHTaxFile', loError.ERRORNO, loError.MESSAGE, '', loError
		    MESSAGEBOX('Unable to process the report at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		          'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		RETURN llReturn
		
		
		
	ENDPROC

	PROCEDURE calctax3qtr		&& Calculates Tax 3 by Quarter
	ENDPROC

	PROCEDURE calctax4		&& Calculates Tax 4
		LOCAL tcYear1, tcYear2, tcPeriod1, tcPeriod2, tcGroup, tcWell1, tcWell2, tcState
		LOCAL lnMax, lnCount, oProgress
		
		llReturn = .T.
		
		TRY
		    WAIT WINDOW NOWAIT 'Processing tax 4...'
		    tcYear1   = THISFORM.swyear1.VALUE
		    tcYear2   = THISFORM.swyear2.VALUE
		    tcPeriod1 = THISFORM.swPeriod1.VALUE
		    tcPeriod2 = THISFORM.swPeriod2.VALUE
		    tcGroup   = LEFT(THISFORM.swgroup1.VALUE, 2)
		    tcWell1   = THISFORM.swrptlook1.txtBegID.VALUE
		    tcWell2   = THISFORM.swrptlook1.txtEndID.VALUE
		    tcState   = LEFT(THISFORM.swStates.VALUE, 2)
		    tlProdPrd = THISFORM.chkProdPeriod.VALUE
		    tlNoTable = THISFORM.chkNoTable.VALUE
		
		    IF THISFORM.opgReportBy.VALUE = 1
		        DO CASE
		            CASE tnQuarter = 1
		                tcYear2   = tcYear1
		                tcPeriod1 = '01'
		                tcPeriod2 = '03'
		            CASE tnQuarter = 2
		                tcYear2   = tcYear1
		                tcPeriod1 = '04'
		                tcPeriod2 = '06'
		            CASE tnQuarter = 3
		                tcYear2   = tcYear1
		                tcPeriod1 = '07'
		                tcPeriod2 = '09'
		            CASE tnQuarter = 4
		                tcYear2   = tcYear1
		                tcPeriod1 = '10'
		                tcPeriod2 = '12'
		        ENDCASE
		    ENDIF
		
		    CREATE CURSOR taxtemp ;
		        (cwellid    C(10), ;
		          cwellstat C(1), ;
		          cpermit1   C(20), ;
		          clocation  C(30), ;
		          hyear      C(4), ;
		          hperiod    C(2), ;
		          ngasinc    N(12, 2), ;
		          noilinc    N(12, 2), ;
		          nothinc    N(12, 2), ;
		          ntotbbl    N(12, 4), ;
		          ntotmcf    N(12, 4), ;
		          ntototh    N(12, 4), ;
		          ntotbbltax I, ;
		          ntotmcftax I, ;
		          ntotothtax I)
		
		    IF tlNoTable
		        IF tlProdPrd
					SELECT  wellhist.cwellid, ;
							wells.cwellname as clocation, ;
							wells.cwellstat, ;
							wells.cpermit1, ;
							wellhist.hyear, ;
							wellhist.hperiod, ;
							SUM(wellhist.nGrossGas) AS ngasinc, ;
							SUM(wellhist.nGrossOil) AS noilinc, ;
							SUM(wellhist.nothinc) AS nothinc, ;
							SUM(wellhist.ntotbbl) AS ntotbbl, ;
							SUM(wellhist.ntotmcf) AS ntotmcf, ;
							SUM(wellhist.ntotprod) AS ntototh, ;
							SUM(wellhist.ngbbltax4) AS ntotbbltx4, ;
							SUM(wellhist.ntotbbltxr + ntotbbltxw) AS nmtoiltax, ;
							SUM(wellhist.ntotmcftxr + ntotmcftxw) AS nmtgastax, ;
							SUM(wellhist.ngmcftax4) AS ntotmcftx4, ;
							SUM(wellhist.ngothtax4) AS ntotothtx4, ;
							lSev1O, lSev2O, lSev3O, lSev4O, lSev1G, lSev2G, lSev3G, lSev4G, ldiroilpurch, ldirgaspurch  ;
						FROM wellhist, wells ;
						WHERE BETWEEN(wellhist.hyear + wellhist.hperiod, tcYear1 + tcPeriod1, tcYear2 + tcPeriod2) ;
							AND IIF(tcGroup <> '**', wellhist.cgroup = tcGroup, .T.) ;
							AND wellhist.cwellid = wells.cwellid ;
							AND wells.cstate = 'OH' ;
							AND wellhist.crectype = 'R' ;
							AND NOT wells.lthird_prty  ;
							AND IIF(tcState <> '**', wells.cTable = tcState, .T.)  ;
							AND wellhist.cwellid in (select cid from selected) ;
						INTO CURSOR temptax READWRITE  ;
						ORDER BY wellhist.cwellid, wellhist.hyear, wellhist.hperiod ;
						GROUP BY wellhist.cwellid, wellhist.hyear, wellhist.hperiod
		        ELSE
					SELECT  wellhist.cwellid, ;
							wells.cwellname as clocation, ;
							wells.cwellstat, ;
							wells.cpermit1, ;
							ALLT(STR(YEAR(hdate))) AS hyear, ;
							PADL(ALLT(STR(MONTH(hdate))), 2, '0') AS hperiod, ;
							ALLT(STR(YEAR(hdate))) AS hyearx, ;
							PADL(ALLT(STR(MONTH(hdate))), 2, '0') AS hperiodx, ;
							SUM(wellhist.nGrossGas) AS ngasinc, ;
							SUM(wellhist.nGrossOil) AS noilinc, ;
							SUM(wellhist.nothinc) AS nothinc, ;
							SUM(wellhist.ntotbbl) AS ntotbbl, ;
							SUM(wellhist.ntotmcf) AS ntotmcf, ;
							SUM(wellhist.ntotprod) AS ntototh, ;
							SUM(wellhist.ngbbltax4 + ntotbbltxr + ntotbbltxw) AS ntotbbltx4, ;
							SUM(wellhist.ntotbbltxr + ntotbbltxw) AS nmtoiltax, ;
							SUM(wellhist.ntotmcftxr + ntotmcftxw) AS nmtgastax, ;
							SUM(wellhist.ngmcftax4 + ntotmcftxr + ntotmcftxw) AS ntotmcftx4, ;
							SUM(wellhist.ngothtax4) AS ntotothtx4, ;
							lSev1O, lSev2O, lSev3O, lSev4O, lSev1G, lSev2G, lSev3G, lSev4G, ldiroilpurch, ldirgaspurch  ;
						FROM wellhist, wells ;
						WHERE BETWEEN(ALLT(STR(YEAR(hdate))) + PADL(ALLT(STR(MONTH(hdate))), 2, '0'), tcYear1 + tcPeriod1, tcYear2 + tcPeriod2)  ;
							AND IIF(tcGroup <> '**', wellhist.cgroup = tcGroup, .T.) ;
							AND wellhist.cwellid = wells.cwellid ;
							AND wells.cstate = 'OH' ;
							AND wellhist.crectype = 'R' ;
							AND NOT wells.lthird_prty  ;
							AND IIF(tcState <> '**', wells.cTable = tcState, .T.)  ;
							AND wellhist.cwellid in (select cid from selected) ;
						INTO CURSOR temptax READWRITE  ;
						ORDER BY wellhist.cwellid, hyearx, hperiodx  ;
						GROUP BY wellhist.cwellid, hyearx, hperiodx
		        ENDIF
		    ELSE
		        IF tlProdPrd
					SELECT  wellhist.cwellid, ;
							wells.cwellname as clocation, ;
							wells.cwellstat, ;
							wells.cpermit1, ;
							wellhist.hyear, ;
							wellhist.hperiod, ;
							SUM(wellhist.nGrossGas) AS ngasinc, ;
							SUM(wellhist.nGrossOil) AS noilinc, ;
							SUM(wellhist.nothinc) AS nothinc, ;
							SUM(wellhist.ntotbbl) AS ntotbbl, ;
							SUM(wellhist.ntotmcf) AS ntotmcf, ;
							SUM(wellhist.ntotprod) AS ntototh, ;
							SUM(wellhist.ntotbbltx4 + ntotbbltxr + ntotbbltxw) AS ntotbbltx4, ;
							SUM(wellhist.ntotbbltxr + ntotbbltxw) AS nmtoiltax, ;
							SUM(wellhist.ntotmcftxr + ntotmcftxw) AS nmtgastax, ;
							SUM(wellhist.ntotmcftx4 + ntotmcftxr + ntotmcftxw) AS ntotmcftx4, ;
							SUM(wellhist.ntotothtx4) AS ntotothtx4, ;
							lSev1O, lSev2O, lSev3O, lSev4O, lSev1G, lSev2G, lSev3G, lSev4G, ldiroilpurch, ldirgaspurch  ;
						FROM wellhist, wells ;
						WHERE BETWEEN(wellhist.hyear + wellhist.hperiod, tcYear1 + tcPeriod1, tcYear2 + tcPeriod2) ;
							AND IIF(tcGroup <> '**', wellhist.cgroup = tcGroup, .T.) ;
							AND wellhist.cwellid = wells.cwellid ;
							AND wells.cstate = 'OH' ;
							AND wellhist.crectype = 'R' ;
							AND NOT wells.lthird_prty  ;
							AND IIF(tcState <> '**', wells.cTable = tcState, NOT EMPTY(wells.cTable))  ;
							AND wellhist.cwellid in (select cid from selected) ;
						INTO CURSOR temptax READWRITE  ;
						ORDER BY wellhist.cwellid, wellhist.hyear, wellhist.hperiod ;
						GROUP BY wellhist.cwellid, wellhist.hyear, wellhist.hperiod
		        ELSE
					SELECT  wellhist.cwellid, ;
							wells.cwellname as clocation, ;
							wells.cwellstat, ;
							wells.cpermit1, ;
							ALLT(STR(YEAR(hdate))) AS hyear, ;
							PADL(ALLT(STR(MONTH(hdate))), 2, '0') AS hperiod, ;
							ALLT(STR(YEAR(hdate))) AS hyearx, ;
							PADL(ALLT(STR(MONTH(hdate))), 2, '0') AS hperiodx, ;
							SUM(wellhist.nGrossGas) AS ngasinc, ;
							SUM(wellhist.nGrossOil) AS noilinc, ;
							SUM(wellhist.nothinc) AS nothinc, ;
							SUM(wellhist.ntotbbl) AS ntotbbl, ;
							SUM(wellhist.ntotmcf) AS ntotmcf, ;
							SUM(wellhist.ntotprod) AS ntototh, ;
							SUM(wellhist.ntotbbltx4 + ntotbbltxr + ntotbbltxw) AS ntotbbltx4, ;
							SUM(wellhist.ntotbbltxr + ntotbbltxw) AS nmtoiltax, ;
							SUM(wellhist.ntotmcftxr + ntotmcftxw) AS nmtgastax, ;
							SUM(wellhist.ntotmcftx4 + ntotmcftxr + ntotmcftxw) AS ntotmcftx4, ;
							SUM(wellhist.ntotothtx4) AS ntotothtx4, ;
							lSev1O, lSev2O, lSev3O, lSev4O, lSev1G, lSev2G, lSev3G, lSev4G, ldiroilpurch, ldirgaspurch  ;
						FROM wellhist, wells ;
						WHERE BETWEEN(ALLT(STR(YEAR(hdate))) + PADL(ALLT(STR(MONTH(hdate))), 2, '0'), tcYear1 + tcPeriod1, tcYear2 + tcPeriod2)  ;
							AND IIF(tcGroup <> '**', wellhist.cgroup = tcGroup, .T.) ;
							AND IIF(tcState <> '**', wells.cTable = tcState, NOT EMPTY(wells.cTable))  ;
							AND wellhist.cwellid = wells.cwellid ;
							AND wells.cstate = 'OH' ;
							AND wellhist.crectype = 'R' ;
							AND NOT wells.lthird_prty  ;
							AND IIF(tcState <> '**', wells.cTable = tcState, .T.)  ;
							AND wellhist.cwellid in (select cid from selected) ;
						INTO CURSOR temptax READWRITE  ;
						ORDER BY wellhist.cwellid, hyearx, hperiodx  ;
						GROUP BY wellhist.cwellid, hyearx, hperiodx
		        ENDIF
		    ENDIF
		    
		        * Get the wells that aren't in temptax since right join wouldn't work
		       SELECT wells.cwellid, wells.cwellname as clocation, ;
							wells.cwellstat, ;
							wells.cpermit1, ;
							tcyear2 as hyear, tcyear2 as hyearx, ;
							tcperiod2 as hperiod, tcperiod2 as hperiodx ;
			  FROM wells ;
			  WHERE cwellid NOT in (SELECT cwellid FROM temptax) ;
			        AND cwellid in (SELECT cid FROM selected) ;
			       AND wells.lthird_prty = .f. ;
			       AND IIF(tcGroup <> '**', wells.cgroup = tcGroup, .T.) ;
		    	   AND IIF(tcState <> '**', wells.cTable = tcState, NOT EMPTY(wells.cTable))  ; 
		    	   AND wells.cstate = 'OH' ;
			    INTO CURSOR missingwells 
			
			IF _tally > 0
			   SELECT temptax
			   APPEND FROM DBF('missingwells')
			ENDIF     
		
		    oProgress = THISFORM.oMessage.ProgressBar('Calculating Tax 4 Taxes by Period...')
		    SELECT temptax
		    COUNT ALL TO lnMax
		    lnCount = 1
		    oProgress.SetProgressRange(0, lnMax)
		
		    SELECT temptax
		    SCAN
		        SCATTER MEMVAR
		        oProgress.UpdateProgress(lnCount)
		        lnCount = lnCount + 1
		
		*  Don't report inactive or plugged wells if they had no production.
		        IF NOT INLIST(m.cwellstat,'A','N')
		           IF m.ntotbbl = 0 AND m.ntotmcf = 0
		              DELETE NEXT 1
		              LOOP 
		           ENDIF
		        ENDIF 
		        
		*  Check the settings for whether the purchaser withholds certain types of taxes, and remove those amounts
		*  from the units reported
		        IF m.lSev1O
		            SELECT temptax
		            REPLACE ntotbbl WITH 0, noilinc WITH 0
		            STORE 0 TO m.ntotbbl, m.noilinc
		        ENDIF
		        IF m.lSev1G
		            SELECT temptax
		            REPLACE ntotmcf WITH 0, ngasinc WITH 0
		            STORE 0 TO m.ntotmcf, m.ngasinc
		        ENDIF
		        IF m.ldiroilpurch
		           m.ntotbbl = THISFORM.oDist.netrev(m.cwellid, m.ntotbbl, 'O')
		        ENDIF     
		        IF m.ldirgaspurch
		           m.ntotmcf = THISFORM.oDist.netrev(m.cwellid, m.ntotmcf, 'G')
		        ENDIF     
		        
		
		        m.ntotbbltax = m.ntotbbltx4
		        m.ntotmcftax = m.ntotmcftx4
		        m.ntotothtax = m.ntotothtx4
		*!*	        IF tlNoTable
		*!*	            m.ngasinc    = THISFORM.oDist.netrev(m.cwellid, m.ngasinc, 'G', .F., .T.)
		*!*	            m.noilinc    = THISFORM.oDist.netrev(m.cwellid, m.noilinc, 'O', .F., .T.)
		*!*	            m.ntotbbl    = THISFORM.oDist.netrev(m.cwellid, m.ntotbbl, 'O', .F., .T.)
		*!*	            m.ntotmcf    = THISFORM.oDist.netrev(m.cwellid, m.ntotmcf, 'G', .F., .T.)
		*!*	            m.ntotbbltax = THISFORM.oDist.netrev(m.cwellid, m.ntotbbltx4, 'O1', .F., .T., .T., , .T.) + m.nmtoiltax
		*!*	            m.ntotmcftax = THISFORM.oDist.netrev(m.cwellid, m.ntotmcftx4, 'G1', .F., .T., .T., , .T.) + m.nmtgastax
		*!*	            m.ntotothtax = THISFORM.oDist.netrev(m.cwellid, m.ntotothtx4, 'P1', .F., .T., .T., , .T.)
		*!*	        ENDIF
		        INSERT INTO taxtemp FROM MEMVAR
		    ENDSCAN
		
		    oProgress.CloseProgress()
		
		CATCH TO loError
		    llReturn = .F.
		    IF VARTYPE(oProgress) = 'O'
		        oProgress.CloseProgress()
		    ENDIF
		    DO errorlog WITH 'Calctax4', loError.LINENO, 'OHTaxFile', loError.ERRORNO, loError.MESSAGE, '', loError
		    MESSAGEBOX('Unable to process the report at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		          'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		RETURN llReturn
		
		
		
	ENDPROC

	PROCEDURE calctax4qtr		&& Calculates Tax 4 by Quarter
	ENDPROC

	PROCEDURE Init
		LPARA tcTaxType
		
		IF TYPE('tcTaxType') <> 'C'
		   tcTaxType = 'S'
		ENDIF
		
		SET DELETED ON
		
		
		SELECT wells
		SET ORDER TO cWellID
		
		GO TOP
		THISFORM.swrptlook1.txtBegName.VALUE = cwellname
		THISFORM.swrptlook1.txtBegID.VALUE = cWellID
		
		GO BOTTOM
		THISFORM.swrptlook1.txtEndName.VALUE = cwellname
		THISFORM.swrptlook1.txtEndID.VALUE = cWellID
		
		THISFORM.swyear1.lenabled = .T.
		THISFORM.swyear2.lenabled = .F.
		THISFORM.swperiod1.lenabled = .F.
		THISFORM.swperiod2.lenabled = .F.
		
		thisform.chkprodperiod.value = .f.
		
		thisform.swrptcriteriabuttons1.cmdpreview.Caption = '\<Create'
		thisform.swrptcriteriabuttons1.cmdprint.Visible = .f.
		DODEFAULT()
		
	ENDPROC

	PROCEDURE report
		LPARA cButton
		
		RETURN .t.
	ENDPROC

	PROCEDURE viewdocument
		LPARAMETERS lcOutputFile
		
		LOCAL llReturn, lnReturn, loError
		
		llReturn = .T.
		
		TRY
		    IF llReturn
		        DECLARE INTEGER ShellExecute IN "Shell32.dll" ;
		            INTEGER HWND, ;
		            STRING lpVerb, ;
		            STRING lpFile, ;
		            STRING lpParameters, ;
		            STRING lpDirectory, ;
		            LONG nShowCmd
		
		        lnReturn = ShellExecute(0, "Open", lcOutputFile, "", "", 1)
		
		    ENDIF
		
		    IF lnReturn > 32
		        llReturn = .T.
		    ELSE
		        llReturn = .F.
		        IF lldebug
		            MESSAGEBOX('Return from ShellExecute: ' + TRANSFORM(lnReturn), 64, 'View Document')
		        ENDIF
		    ENDIF
		CATCH TO loError
		    MESSAGEBOX('Error Occured: ' + CHR(10) + ;
		                loError.MESSAGE, 64, 'View Document')
		ENDTRY
		
		RETURN (llReturn)
		
		
	ENDPROC

	PROCEDURE cboTaxType.Init
		this.addlistitem('Tax 1',1,1)
		this.addlistitem('1',1,2)
		this.addlistitem('Tax 2',2,1)
		this.addlistitem('2',2,2)
		this.addlistitem('Tax 3',3,1)
		this.addlistitem('3',3,2)
		this.addlistitem('Tax 4',4,1)
		this.addlistitem('4',4,2)
		
		this.listitemid = 1
	ENDPROC

	PROCEDURE chkSelected.Click
		IF this.Value
		   DO FORM commonsource\selected-ids WITH 'WELL' LINKED 
		   lnCount = RECCOUNT('selected')
		   thisform.lblselected.Caption = TRANSFORM(lnCount) + ' Wells Selected'
		   thisform.lblselected.Visible = .T.
		   thisform.lblbegID.Visible = .F.
		   thisform.lblendID.Visible = .F.
		   thisform.swrptlook1.Visible = .F.
		ELSE
		   thisform.lblselected.Visible = .F.
		   thisform.lblbegID.Visible = .T.
		   thisform.lblendID.Visible = .T.
		   thisform.swrptlook1.Visible = .T.
		ENDIF 
	ENDPROC

	PROCEDURE OpgQuarters.Init
		this.q1.value = 1
	ENDPROC

	PROCEDURE OpgQuarters.Q1.GotFocus
		THISFORM.opgQuarters.VALUE = 1
		
	ENDPROC

	PROCEDURE OpgQuarters.Q2.GotFocus
		THISFORM.opgQuarters.VALUE = 2
	ENDPROC

	PROCEDURE OpgQuarters.Q3.GotFocus
		THISFORM.opgQuarters.VALUE = 3
	ENDPROC

	PROCEDURE OpgQuarters.Q4.GotFocus
		THISFORM.opgQuarters.VALUE = 4
	ENDPROC

	PROCEDURE OpgQuarters.When
		RETURN thisform.opgReportBy.value = 1
	ENDPROC

	PROCEDURE opgReportBy.Init
		this.value = 1
	ENDPROC

	PROCEDURE opgReportBy.Valid
		DO CASE
		   CASE this.value = 1
		      thisform.swYear2.visible = .f.
		      thisform.swPeriod1.visible = .f.
		      thisform.swPeriod2.visible = .f.
		      thisform.lblBegPeriod.Visible = .f.
		      thisform.lblEndPeriod.Visible = .f.
		      thisform.lblEndYear.Visible = .f.
		      thisform.lblBegYear.caption = 'Year:'
		      thisform.lblBegYear.Left = 87
		      thisform.opgQuarters.q1.enabled = .t.
		      thisform.opgQuarters.q2.enabled = .t.
		      thisform.opgQuarters.q3.enabled = .t.
		      thisform.opgQuarters.q4.enabled = .t.
		   CASE this.value = 2   
		      thisform.swYear2.visible = .t.
		      thisform.swPeriod1.visible = .t.
		      thisform.swPeriod2.visible = .t.
		      thisform.lblBegPeriod.Visible = .t.
		      thisform.lblEndPeriod.Visible = .t.
		      thisform.lblEndYear.Visible = .t.
		      thisform.lblBegYear.caption = 'Beginning Year:'
		      thisform.lblBegYear.Left = 37
		      thisform.opgQuarters.q1.enabled = .f.
		      thisform.opgQuarters.q2.enabled = .f.
		      thisform.opgQuarters.q3.enabled = .f.
		      thisform.opgQuarters.q4.enabled = .f.
		ENDCASE      
	ENDPROC

	PROCEDURE Swperiod1.When
		RETURN thisform.opgReportBy.value = 2
	ENDPROC

	PROCEDURE Swperiod2.When
		RETURN thisform.opgReportBy.value = 2
	ENDPROC

	PROCEDURE Swrptcriteriabuttons1.cmdPreview.Click
		thisform.builddata()
	ENDPROC

	PROCEDURE Swrptlook1.Swlookupbutton1.Click
		LOCAL lcList
		PRIV llOK
		
		llOK = .F.
		lcList = 'cwellid,cwellname,cgroup,cwellstat'
		DO FORM ..\custom\picklist WITH 'Wells', lcList, thisform.swrptlook1.txtbegid.value, 4
		
		IF llOK
		   thisform.swrptlook1.txtBegId.value = cwellid
		   thisform.swrptlook1.txtBegName.value = cwellname
		   thisform.swrptlook1.txtBegId.refresh()
		   thisform.swrptlook1.txtBegName.refresh()
		ENDIF   
		
		thisform.setnextcontrol(thisform.swrptlook1.txtBegId)
		
	ENDPROC

	PROCEDURE Swrptlook1.Swlookupbutton2.Click
		LOCAL lcList
		PRIV llOK
		
		llOK = .F.
		lcList = 'cwellid,cwellname,cgroup,cwellstat'
		DO FORM ..\custom\picklist WITH 'Wells', lcList, thisform.swrptlook1.txtendid.value, 4
		
		IF llOK
		   thisform.swrptlook1.txtEndId.value = cwellid
		   thisform.swrptlook1.txtEndName.value = cwellname
		   thisform.swrptlook1.txtEndId.refresh()
		   thisform.swrptlook1.txtEndName.refresh()
		ENDIF   
		
		thisform.setnextcontrol(thisform.swrptlook1.txtEndId)
		
	ENDPROC

	PROCEDURE swstates.Init
		
		*
		*  Load the laStates Array
		*
		SELE cTable+' - '+cDescription AS cTable FROM sevtax INTO ARRAY laStates ORDER BY cTable
		
		lnOH = 1
		IF _tally > 0
		   FOR lnx = 1 TO _tally
		      this.addlistitem(laStates[lnX])
		      IF laStates[lnx] = 'OH'
		         lnOH = lnX
		      ENDIF 
		   ENDFOR
		      
		  * Set default item to 1st
		  this.listitemid = lnOH
		
		ENDIF
		
		DODEFAULT()
	ENDPROC

	PROCEDURE Swyear2.When
		RETURN thisform.opgReportBy.value = 2
	ENDPROC

ENDDEFINE
