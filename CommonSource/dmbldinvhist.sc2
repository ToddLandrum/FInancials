*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="dmbldinvhist.scx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="2" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Cursor1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor6" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor7" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor8" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor9" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor10" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor11" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor12" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor13" UniqueID="" Timestamp="" />

	AutoOpenTables = .F.
	DataSource = .NULL.
	Height = 619
	Left = -68
	Name = "Dataenvironment"
	Top = 114
	Width = 981

	ADD OBJECT 'Cursor1' AS cursor WITH ;
		Alias = "expense", ;
		CursorSource = "expense", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor1", ;
		Top = 20, ;
		Width = 101
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor10' AS cursor WITH ;
		Alias = "wells", ;
		CursorSource = "wells", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor10", ;
		Top = 380, ;
		Width = 101
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor11' AS cursor WITH ;
		Alias = "sevtax", ;
		CursorSource = "sevtax", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 451, ;
		Name = "Cursor11", ;
		Top = 20, ;
		Width = 101
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor12' AS cursor WITH ;
		Alias = "glopt", ;
		CursorSource = "glopt", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 430, ;
		Name = "Cursor12", ;
		Top = 260, ;
		Width = 101
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor13' AS cursor WITH ;
		Alias = "sysctl", ;
		CursorSource = "sysctl", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 638, ;
		Name = "Cursor13", ;
		Top = 21, ;
		Width = 101
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor2' AS cursor WITH ;
		Alias = "expcat", ;
		CursorSource = "expcat", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 150, ;
		Name = "Cursor2", ;
		Top = 20, ;
		Width = 101
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor3' AS cursor WITH ;
		Alias = "income", ;
		CursorSource = "income", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 290, ;
		Name = "Cursor3", ;
		Top = 20, ;
		Width = 101
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor4' AS cursor WITH ;
		Alias = "groups", ;
		CursorSource = "groups", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor4", ;
		Top = 140, ;
		Width = 101
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor5' AS cursor WITH ;
		Alias = "investor", ;
		CursorSource = "investor", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 150, ;
		Name = "Cursor5", ;
		Top = 140, ;
		Width = 101
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor6' AS cursor WITH ;
		Alias = "options", ;
		CursorSource = "options", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 290, ;
		Name = "Cursor6", ;
		Top = 140, ;
		Width = 101
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor7' AS cursor WITH ;
		Alias = "revcat", ;
		CursorSource = "revcat", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor7", ;
		Top = 260, ;
		Width = 101
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor8' AS cursor WITH ;
		Alias = "wellhist", ;
		CursorSource = "wellhist", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 150, ;
		Name = "Cursor8", ;
		Top = 260, ;
		Width = 101
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor9' AS cursor WITH ;
		Alias = "wellinv", ;
		CursorSource = "wellinv", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 290, ;
		Name = "Cursor9", ;
		Top = 260, ;
		Width = 101
		*< END OBJECT: BaseClass="cursor" />

ENDDEFINE

DEFINE CLASS formdmbldinvhist AS frmformcustom OF "..\custom\cforms.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Swyear1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Swperiod1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cntokcancelcustom1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Glmaint" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtdAcctDate" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: process		&& Build the history
	*</DefinedPropArrayMethod>

	Caption = "Build History For Investment Wells"
	DataSession = 2
	DoCreate = .T.
	Height = 195
	HelpContextID = 379
	Name = "FormDMBldInvHist"
	Visible = .T.
	Width = 322

	ADD OBJECT 'Cntokcancelcustom1' AS cntokcancelcustom WITH ;
		Height = 36, ;
		Left = 79, ;
		Name = "Cntokcancelcustom1", ;
		TabIndex = 6, ;
		Top = 132, ;
		Width = 163, ;
		cmdcancel.Height = 34, ;
		cmdcancel.Left = 87, ;
		cmdcancel.Name = "cmdcancel", ;
		cmdcancel.Top = 2, ;
		cmdcancel.Width = 75, ;
		cmdok.Height = 34, ;
		cmdok.Left = 1, ;
		cmdok.Name = "cmdok", ;
		cmdok.Top = 2, ;
		cmdok.Width = 75
		*< END OBJECT: ClassLib="..\custom\cbutton.vcx" BaseClass="container" />

	ADD OBJECT 'Glmaint' AS glmaint WITH ;
		Left = 242, ;
		Name = "Glmaint", ;
		Top = 38
		*< END OBJECT: ClassLib="..\custom\swgl.vcx" BaseClass="custom" />

	ADD OBJECT 'Lbllabelcustom1' AS lbllabelcustom WITH ;
		Caption = "Production Period", ;
		Left = 60, ;
		Name = "Lbllabelcustom1", ;
		TabIndex = 3, ;
		Top = 48
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom2' AS lbllabelcustom WITH ;
		Caption = "Production Year", ;
		Left = 60, ;
		Name = "Lbllabelcustom2", ;
		TabIndex = 4, ;
		Top = 15
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom3' AS lbllabelcustom WITH ;
		Caption = "Accounting Date", ;
		Left = 60, ;
		Name = "Lbllabelcustom3", ;
		TabIndex = 7, ;
		Top = 84
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Swperiod1' AS swperiod WITH ;
		Left = 156, ;
		Name = "Swperiod1", ;
		TabIndex = 2, ;
		Top = 46
		*< END OBJECT: ClassLib="..\custom\swcontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'Swyear1' AS swyear WITH ;
		Left = 156, ;
		Name = "Swyear1", ;
		TabIndex = 1, ;
		Top = 13
		*< END OBJECT: ClassLib="..\custom\swcontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtdAcctDate' AS dpk WITH ;
		ControlSource = "", ;
		Height = 20, ;
		Left = 156, ;
		Name = "txtdAcctDate", ;
		TabIndex = 5, ;
		Top = 84, ;
		Visible = .T., ;
		Width = 75
		*< END OBJECT: ClassLib="..\custom\swdate.vcx" BaseClass="textbox" />
	
	PROCEDURE process		&& Build the history
		***********************************************************************
		*  PROGRAM:.......BLDHIST
		*  DESC:..........Creates well and owner history records for investment
		*                 wells.
		*  DATE:..........12/15/99
		*  AUTHOR:........PWS
		*  CHANGES:.......
		***********************************************************************
		LOCAL tcYear, tcPeriod, tdDate, oProgress, oRegistry
		
		oRegistry = FINDGLOBALOBJECT('cmRegistry')
		
		tcYear    = THISFORM.swyear1.VALUE
		tcPeriod  = THISFORM.swperiod1.VALUE
		tdDate    = THISFORM.txtdAcctDate.value
		
		SET DELETED ON
		
		IF TYPE('m.goApp') = 'O'
		   lcPath = ALLTRIM(m.goApp.cDataFilePath)
		ELSE
		   lcPath = 'Data\'
		ENDIF
		
		IF NOT USED('options')
		   USE (lcPath+'options') IN 0
		ENDIF
		IF NOT USED('wells')
		   USE (lcPath+'wells') IN 0
		ENDIF
		IF NOT USED('expcat')
		   USE (lcPath+'expcat') IN 0
		ENDIF
		IF NOT USED('appurchh')
		   USE (lcPath+'appurchh') IN 0
		ENDIF
		IF NOT USED('expense')
		   USE (lcPath+'expense') IN 0
		ENDIF
		IF NOT USED('income')
		   USE (lcPath+'income') IN 0
		ENDIF
		IF NOT USED('wellinv')
		   USE (lcPath+'wellinv') IN 0
		ENDIF
		IF NOT USED('csrcthdr')
		   USE (lcPath+'csrcthdr') IN 0
		ENDIF
		IF NOT USED('csrctdet')
		   USE (lcPath+'csrctdet') IN 0
		ENDIF
		IF NOT USED('csdishdr')
		   USE (lcPath+'csdishdr') IN 0
		ENDIF
		IF NOT USED('csdisdet')
		   USE (lcPath+'csdisdet') IN 0
		ENDIF
		
		IF NOT USED('glopt')
		   USE (lcPath+'glopt') IN 0
		ENDIF
		
		SELECT glopt
		m.cfybegin = STR(YEAR(DATE()))
		lnFiscYear = VAL(m.cfybegin)
		
		DIME laMonths[12,2]
		FOR lnX = 1 TO 12
		   laMonths[lnX,1] = lnX
		   IF lnFiscYear = 13
		      lnFiscYear = 1
		   ENDIF
		   laMonths[lnX,2] = lnFiscYear
		   lnFiscYear = lnFiscYear + 1
		ENDFOR
		
		m.cOwnerID = ''
		
		SELECT cWellID, cGroup FROM wells WHERE cwellstat = 'V' INTO CURSOR invwells ORDER BY cWellID
		
		IF _TALLY = 0
		   THISFORM.omessage.warning('The division of interests were not set up for the investment wells or there were no investment wells defined...')
		   RETURN
		ENDIF
		
		WAIT WIND NOWAIT 'Building History Files...'
		
		SELECT invwells
		SCAN
		   m.cWellID = cWellID
		   SELECT wellhist
		   DELE FOR cWellID = m.cWellID AND hyear+hperiod = tcYear+tcPeriod
		ENDSCAN
		
		*
		*  Well history
		*
		oProgress = THISFORM.omessage.progressbar('Building Well History Records...')
		SELECT invwells
		lnMax = RECC()
		oProgress.setProgressRange(lnMax)
		lnCount = 1
		SCAN
		   m.cWellID = cWellID
		   m.cGroup  = cGroup
		   oProgress.UpdateProgress(lnCount)
		   lnCount = lnCount + 1
		   m.nFlatGas = 0
		   m.nFlatOil = 0
		   STORE 0 TO m.ntotale, m.ngasinc, m.noilinc, m.ntrpinc, m.nbbltax2, m.nmcftax2, m.nbbltax1, m.nmcftax1, ;
		      m.ntotbbl, m.ntotmcf, m.nbbltot, m.nmcftot, m.nmiscinc1, m.nmiscinc2, m.ngasincone, m.noilincone, ;
		      m.nGather, m.nCompress, m.nmcftaxr, m.nmcftaxw, m.nbbltaxr, m.nbbltaxw, m.ntotprod, ;
		      m.nexpgas, m.nexpoil, m.nbbltax3, m.nbbltax4, m.nmcftax3, m.nmcftax4, m.nothtax3, m.nothtax4
		   STORE 0 TO m.nothtax1, m.nothtax2, m.nothinc
		   SELECT wells
		   SET ORDER TO cWellID
		   IF SEEK (m.cWellID)
		      m.ctable       = ctable
		      m.ngasint      = ngasint
		      m.noilint      = noilint
		      m.cwellname    = cwellname
		      m.lthird_prty  = lthird_prty
		      m.ltaxexempt1  = ltaxexempt1
		      m.ltaxexempt2  = ltaxexempt2
		      m.ltaxexempt3  = ltaxexempt3
		      m.ltaxexempt4  = ltaxexempt4
		      m.lCompress   = lCompress           && Charge compression charge?
		      m.lGather     = lGather             && Charge gathering charge?
		      m.cgroup       = cgroup
		      IF nCompress <> 0
		         gnCompress = nCompress
		      ENDIF
		      IF nGather <> 0
		         gnGather = nGather
		      ENDIF
		      m.lUseSev     = lUseSev             && Use Well Severance Tax Rates?
		      m.nRoySevO    = nRoySevO            && Royalty Owner Oil Severance Tax Rate
		      m.nRoySevG    = nRoySevG            && Royalty Owner Gas Severance Tax Rate
		      m.nWrkSevG    = nWrkSevG            && Working Interest Owner Gas Severance Tax Rate
		      m.nWrkSevO    = nWrkSevO            && Working Interest Owner Oil Severance Tax Rate
		      m.nroyint     = nlandpct + noverpct   && Get the total royalty pct in the well
		      m.lSev1O      = lSev1O              && Purchaser pays the severance tax
		      m.lSev2O      = lSev2O
		      m.lSev3O      = lSev3O
		      m.lSev4O      = lSev4O
		      m.lSev1G     = lSev1G              && Purchaser pays the severance tax
		      m.lSev2G      = lSev2G
		      m.lSev3G      = lSev3G
		      m.lSev4G      = lSev4G
		      m.lSev1P     = lSev1P              && Purchaser pays the severance tax
		      m.lSev2P      = lSev2P
		      m.lSev3P      = lSev3P
		      m.lSev4P      = lSev4P
		   ELSE
		      LOOP
		   ENDIF
		
		   IF NOT m.lUseSev AND NOT m.ltaxexempt1 AND NOT m.ltaxexempt2 AND NOT m.ltaxexempt3 AND NOT m.ltaxexempt4
		      SELECT sevtax
		      SET ORDER TO ctable
		      SEEK (m.ctable)
		      IF !FOUND()
		         **-
		         **-  No severance tax record was found for the current state, so
		         **-  zeros will be used for the tax rates for this well
		         **-
		         m.ntaxbbl1 = 0
		         m.ntaxmcf1 = 0
		         m.ntaxoth1 = 0
		         m.cMethodBBL1 = ' '
		         m.cMethodBBL2 = ' '
		         m.cMethodBBL3 = ' '
		         m.cMethodBBL4 = ' '
		         m.cMethodMCF1 = ' '
		         m.cMethodMCF2 = ' '
		         m.cMethodMCF3 = ' '
		         m.cMethodMCF4 = ' '
		         m.cMethodOTH1 = ' '
		         m.cMethodOTH2 = ' '
		         m.cMethodOTH3 = ' '
		         m.cMethodOTH4 = ' '
		         m.ntaxbbl2  = 0
		         m.ntaxmcf2  = 0
		         m.ntaxoth2  = 0
		         m.ntaxbbl3  = 0
		         m.ntaxmcf3  = 0
		         m.ntaxoth3  = 0
		         m.ntaxbbl4  = 0
		         m.ntaxmcf4  = 0
		         m.ntaxoth4  = 0
		      ELSE
		         SCATTER MEMVAR
		      ENDIF
		   ELSE
		      m.ntaxbbl1 = 0
		      m.ntaxmcf1 = 0
		      m.ntaxoth1 = 0
		      m.cMethodBBL1 = 'W'
		      m.cMethodBBL2 = 'W'
		      m.cMethodBBL3 = 'W'
		      m.cMethodBBL4 = 'W'
		      m.ntaxbbl2  = 0
		      m.ntaxmcf2  = 0
		      m.ntaxoth2  = 0
		      m.ntaxbbl3  = 0
		      m.ntaxmcf3  = 0
		      m.ntaxoth3  = 0
		      m.ntaxbbl4  = 0
		      m.ntaxmcf4  = 0
		      m.ntaxoth4  = 0
		   ENDIF
		   STORE .T. TO m.ltaxexempt1, m.ltaxexempt2, m.ltaxexempt3, m.ltaxexempt4
		   *
		   *  If the well is exempt, don't charge severance tax, or if the
		   *  purchaser pays the severance tax, don't calculate the tax.
		   *
		   IF m.ltaxexempt1 = .T. OR m.lSev1O = .T.
		      STORE 0 TO m.ntaxbbl1
		   ENDIF
		   IF m.ltaxexempt2 = .T. OR m.lSev2O = .T.
		      STORE 0 TO m.ntaxbbl2
		   ENDIF
		   IF m.ltaxexempt3 = .T. OR m.lSev3O = .T.
		      STORE 0 TO m.ntaxbbl3
		   ENDIF
		   IF m.ltaxexempt4 = .T. OR m.lSev4O = .T.
		      STORE 0 TO m.ntaxbbl4
		   ENDIF
		   IF m.ltaxexempt1 = .T. OR m.lSev1G = .T.
		      STORE 0 TO m.ntaxmcf1
		   ENDIF
		   IF m.ltaxexempt2 = .T. OR m.lSev2G = .T.
		      STORE 0 TO m.ntaxmcf2
		   ENDIF
		   IF m.ltaxexempt3 = .T. OR m.lSev3G = .T.
		      STORE 0 TO m.ntaxmcf3
		   ENDIF
		   IF m.ltaxexempt4 = .T. OR m.lSev4G = .T.
		      STORE 0 TO m.ntaxmcf4
		   ENDIF
		   IF m.ltaxexempt1 = .T. OR m.lSev1P = .T.
		      STORE 0 TO m.ntaxoth1
		   ENDIF
		   IF m.ltaxexempt2 = .T. OR m.lSev2P = .T.
		      STORE 0 TO m.ntaxoth2
		   ENDIF
		   IF m.ltaxexempt3 = .T. OR m.lSev3P = .T.
		      STORE 0 TO m.ntaxoth3
		   ENDIF
		   IF m.ltaxexempt4 = .T. OR m.lSev4P = .T.
		      STORE 0 TO m.ntaxoth4
		   ENDIF
		   m.nprodwell = 0
		   m.ndayson = 0
		   *
		   *  Process well income
		   *
		   SELECT income
		   SET ORDER TO 0
		   SCAN FOR cWellID = m.cWellID  AND BETWEEN(cYear+cPeriod,tcYear+tcPeriod,tcYear+tcPeriod)
		      SCATTER MEMVAR
		      m.nprodwell = m.nprodwell + m.nTotalInc
		      DO CASE
		         CASE m.cSource = "BBL"
		            m.ntotbbl = m.ntotbbl + m.nUnits
		            IF m.nUnits <> 0
		               * If the well is not severance tax exempt, calculate the sev taxes
		               IF NOT m.ltaxexempt1
		                  DO CASE
		                     CASE m.lSev1O
		                        m.nbbltax1 = m.nbbltax1
		                     CASE m.cMethodBBL1 = ' ' OR m.cMethodBBL1 = 'A'   && Rate specified by amount per bbl
		                        m.nbbltax1 = m.nbbltax1 + (m.ntaxbbl1*m.nUnits)
		                        m.nbbltaxr = 0
		                        m.nbbltaxw = 0
		                     CASE m.cMethodBBL1 = 'P'   && Rate specified by percentage
		                        m.nbbltax1 = m.nbbltax1 + (m.ntaxbbl1*m.nTotalInc)
		                        m.nbbltaxr = 0
		                        m.nbbltaxw = 0
		                     CASE m.cMethodBBL1 = 'W'       && Rate Specified by Well
		                        m.nbbltaxr = m.nbbltaxr + (m.nTotalInc*(m.nroyint/100)) * (m.nRoySevO/100)
		                        m.nbbltaxw = m.nbbltaxw + (m.nTotalInc - (m.nTotalInc*(m.nroyint/100))) * (m.nWrkSevO/100)
		                        m.nbbltax1  = 0
		                  ENDCASE
		               ELSE
		                  STORE 0 TO m.nbbltax1, m.nbbltaxr, m.nbbltaxw
		               ENDIF
		               * If the well is not exempt from tax2, calculate the taxes
		               IF NOT m.ltaxexempt2
		                  DO CASE
		                     CASE m.lSev2O
		                        m.nbbltax2 = m.nbbltax2
		                     CASE m.cMethodBBL2 = ' ' OR m.cMethodBBL2 = 'A'
		                        m.nbbltax2 = m.nbbltax2 + (m.ntaxbbl2*m.nUnits)
		                     CASE m.cMethodBBL2 = 'P'
		                        m.nbbltax2 = m.nbbltax2 + (m.ntaxbbl2*m.nTotalInc)
		                  ENDCASE
		               ELSE
		                  STORE 0 TO m.nbbltax2
		               ENDIF
		               * If the well is not exempt from tax3, calculate the taxes
		               IF NOT m.ltaxexempt3
		                  DO CASE
		                     CASE m.lSev3O
		                        m.nBBLTax3 = m.nBBLTax3
		                     CASE m.cMethodBBL3 = ' ' OR m.cMethodBBL3 = 'A'
		                        m.nBBLTax3 = m.nBBLTax3 + (m.ntaxbbl3*m.nUnits)
		                     CASE m.cMethodBBL3 = 'P'
		                        m.nBBLTax3 = m.nBBLTax3 + (m.ntaxbbl3*m.nTotalInc)
		                  ENDCASE
		               ELSE
		                  STORE 0 TO m.nBBLTax3
		               ENDIF
		               * If the well is not exempt from tax4, calculate the taxes
		               IF NOT m.ltaxexempt4
		                  DO CASE
		                     CASE m.lSev4O
		                        m.nBBLTax4 = m.nBBLTax4
		                     CASE m.cMethodBBL4 = ' ' OR m.cMethodBBL4 = 'A'
		                        m.nBBLTax4 = m.nBBLTax4 + (m.ntaxbbl4*m.nUnits)
		                     CASE m.cMethodBBL4 = 'P'
		                        m.nBBLTax4 = m.nBBLTax4 + (m.ntaxbbl4*m.nTotalInc)
		                  ENDCASE
		               ELSE
		                  STORE 0 TO m.nBBLTax4
		               ENDIF
		            ENDIF
		            IF m.nTotalInc <> 0
		               m.noilinc = m.noilinc + m.nTotalInc
		            ENDIF
		         CASE m.cSource = "MCF"
		            m.ntotmcf = m.ntotmcf + m.nUnits
		            IF m.nUnits <> 0
		               * If the well is not severance tax exempt, calculate the sev taxes
		               IF NOT m.ltaxexempt1
		                  DO CASE
		                     CASE m.lSev1G
		                        m.nmcftax1 = m.nmcftax1
		                     CASE m.cMethodMCF1 = ' ' OR m.cMethodMCF1 = 'A'
		                        m.nmcftax1 = m.nmcftax1 + (m.ntaxmcf1*m.nUnits)
		                        m.nmcftaxr = 0
		                        m.nmcftaxw = 0
		                     CASE m.cMethodMCF1 = 'P'
		                        m.nmcftax1 = m.nmcftax1 + (m.ntaxmcf1*m.nTotalInc)
		                        m.nmcftaxr = 0
		                        m.nmcftaxw = 0
		                     CASE m.cMethodMCF1 = 'W'
		                        m.nmcftaxr = m.nmcftaxr + (m.nTotalInc*(m.nroyint/100)) * (m.nRoySevG/100)
		                        m.nmcftaxw = m.nmcftaxw + (m.nTotalInc - (m.nTotalInc*(m.nroyint/100))) * (m.nWrkSevG/100)
		                        m.nmcftax1  = 0
		                  ENDCASE
		               ELSE
		                  STORE 0 TO m.nmcftax1, m.nmcftaxr, m.nmcftaxw
		               ENDIF
		               *  If the well is not exempt from tax 2, calculate the taxes
		               IF NOT m.ltaxexempt2
		                  DO CASE
		                     CASE m.lSev2G
		                        m.nmcftax2 = m.nmcftax2
		                     CASE m.cMethodMCF2 = ' ' OR m.cMethodMCF2 = 'A'
		                        m.nmcftax2 = m.nmcftax2 + (m.ntaxmcf2*m.nUnits)
		                     CASE m.cMethodMCF2 = 'P'
		                        m.nmcftax2 = m.nmcftax2 + (m.ntaxmcf2*m.nTotalInc)
		                  ENDCASE
		               ELSE
		                  STORE 0 TO m.nmcftax2
		               ENDIF
		               *  If the well is not exempt from tax 3, calculate the taxes
		               IF NOT m.ltaxexempt3
		                  DO CASE
		                     CASE m.lSev3G
		                        m.nMCFTax3 = m.nMCFTax3
		                     CASE m.cMethodMCF3 = ' ' OR m.cMethodMCF3 = 'A'
		                        m.nMCFTax3 = m.nMCFTax3 + (m.ntaxmcf3*m.nUnits)
		                     CASE m.cMethodMCF3 = 'P'
		                        m.nMCFTax3 = m.nMCFTax3 + (m.ntaxmcf3*m.nTotalInc)
		                  ENDCASE
		               ELSE
		                  STORE 0 TO m.nMCFTax3
		               ENDIF
		               *  If the well is not exempt from tax 4, calculate the taxes
		               IF NOT m.ltaxexempt4
		                  DO CASE
		                     CASE m.lSev4G
		                        m.nMCFTax4 = m.nMCFTax4
		                     CASE m.cMethodMCF4 = ' ' OR m.cMethodMCF4 = 'A'
		                        m.nMCFTax4 = m.nMCFTax4 + (m.ntaxmcf4*m.nUnits)
		                     CASE m.cMethodMCF4 = 'P'
		                        m.nMCFTax4 = m.nMCFTax4 + (m.ntaxmcf4*m.nTotalInc)
		                  ENDCASE
		               ELSE
		                  STORE 0 TO m.nMCFTax4
		               ENDIF
		               IF m.lCompress
		                  m.nCompress = m.nCompress + (lnCompress*m.nUnits)
		               ENDIF
		               IF m.lGather
		                  m.nGather   = m.nGather   + (lnGather*m.nUnits)
		               ENDIF
		            ENDIF
		            IF m.nTotalInc <> 0
		               m.ngasinc = m.ngasinc + m.nTotalInc
		            ENDIF
		         CASE m.cSource = "OTH"    && Other Product Taxes
		            m.nTotProd = m.nTotProd + m.nUnits
		            IF m.nUnits <> 0
		               * If the well is not severance tax exempt, calculate the taxes
		               IF NOT m.ltaxexempt1
		                  DO CASE
		                     CASE m.lSev1P
		                        m.nOthTax1 = m.nOthTax1
		                     CASE m.cMethodOth1 = ' ' OR m.cMethodOth1 = 'A'   && Rate specified by amount per unit
		                        m.nOthTax1 = m.nOthTax1 + (m.ntaxoth1*m.nUnits)
		                     CASE m.cMethodOth1 = 'P'   && Rate specified by percentage
		                        m.nOthTax1 = m.nOthTax1 + (m.ntaxoth1*m.nTotalInc)
		                  ENDCASE
		               ELSE
		                  STORE 0 TO m.nOthTax1
		               ENDIF
		               * If the well is not exempt from tax2, calculate the taxes
		               IF NOT m.ltaxexempt2
		                  DO CASE
		                     CASE m.lSev2P
		                        m.nOthTax2 = m.nOthTax2
		                     CASE m.cMethodOth2 = ' ' OR m.cMethodOth2 = 'A'
		                        m.nOthTax2 = m.nOthTax2 + (m.ntaxoth2*m.nUnits)
		                     CASE m.cMethodOth2 = 'P'
		                        m.nOthTax2 = m.nOthTax2 + (m.ntaxoth2*m.nTotalInc)
		                  ENDCASE
		               ELSE
		                  STORE 0 TO m.nOthTax2
		               ENDIF
		               * If the well is not exempt from tax3, calculate the taxes
		               IF NOT m.ltaxexempt3
		                  DO CASE
		                     CASE m.lSev3P
		                        m.nOthTax3 = m.nOthTax3
		                     CASE m.cMethodOth3 = ' ' OR m.cMethodOth3 = 'A'
		                        m.nOthTax3 = m.nOthTax3 + (m.ntaxoth3*m.nUnits)
		                     CASE m.cMethodOth3 = 'P'
		                        m.nOthTax3 = m.nOthTax3 + (m.ntaxoth3*m.nTotalInc)
		                  ENDCASE
		               ELSE
		                  STORE 0 TO m.nOthTax3
		               ENDIF
		               * If the well is not exempt from tax4, calculate the taxes
		               IF NOT m.ltaxexempt4
		                  DO CASE
		                     CASE m.lSev4P
		                        m.nOthTax4 = m.nOthTax4
		                     CASE m.cMethodOth4 = ' ' OR m.cMethodOth4 = 'A'
		                        m.nOthTax4 = m.nOthTax4 + (m.ntaxoth4*m.nUnits)
		                     CASE m.cMethodOth4 = 'P'
		                        m.nOthTax4 = m.nOthTax4 + (m.ntaxoth4*m.nTotalInc)
		                  ENDCASE
		               ELSE
		                  STORE 0 TO m.nOthTax4
		               ENDIF
		            ENDIF
		            IF m.nTotalInc <> 0
		               m.nOthInc = m.nOthInc + m.nTotalInc
		            ENDIF
		         CASE m.cSource = "TRANS"
		            m.ntrpinc = m.ntrpinc + m.nTotalInc
		         CASE m.cSource = "MISC1"
		            m.nmiscinc1 = m.nmiscinc1 + m.nTotalInc
		         CASE m.cSource = "MISC2"
		            m.nmiscinc2 = m.nmiscinc2 + m.nTotalInc
		         CASE m.cSource = "EXG"
		            m.nexpgas = m.nexpgas + m.nTotalInc
		         CASE m.cSource = "EXO"
		            m.nexpoil = m.nexpoil + m.nTotalInc
		         CASE m.cSource = 'OTAX1'
		            m.nbbltax1 = m.nbbltax1 + (m.nTotalInc * -1)
		         CASE m.cSource = 'GTAX1'
		            m.nmcftax1 = m.nmcftax1 + (m.nTotalInc * -1)
		         CASE m.cSource = 'PTAX1'
		            m.nOthTax1 = m.nOthTax1 + (m.nTotalInc * -1)
		         CASE m.cSource = 'OTAX2'
		            m.nbbltax2 = m.nbbltax2 + (m.nTotalInc * -1)
		         CASE m.cSource = 'GTAX2'
		            m.nmcftax2 = m.nmcftax2 + (m.nTotalInc * -1)
		         CASE m.cSource = 'PTAX2'
		            m.nOthTax2 = m.nOthTax2 + (m.nTotalInc * -1)
		         CASE m.cSource = 'OTAX3'
		            m.nBBLTax3 = m.nBBLTax3 + (m.nTotalInc * -1)
		         CASE m.cSource = 'GTAX3'
		            m.nMCFTax3 = m.nMCFTax3 + (m.nTotalInc * -1)
		         CASE m.cSource = 'PTAX3'
		            m.nOthTax3 = m.nOthTax3 + (m.nTotalInc * -1)
		         CASE m.cSource = 'OTAX4'
		            m.nBBLTax4 = m.nBBLTax4 + (m.nTotalInc * -1)
		         CASE m.cSource = 'GTAX4'
		            m.nMCFTax4 = m.nMCFTax4 + (m.nTotalInc * -1)
		         CASE m.cSource = 'PTAX4'
		            m.nOthTax4 = m.nOthTax4 + (m.nTotalInc * -1)
		      ENDCASE
		   ENDSCAN        && income
		
		   STORE 0 TO m.ntotale, m.nexpcl1, m.nexpcl2, m.nexpcl3, m.nexpcl4, m.nexpcl5, m.ntotsalt
		
		   **-
		   **-  Process well expenses
		   **-
		   SELECT expense
		   SET ORDER TO 0
		   SCAN FOR cWellID = m.cWellID AND cYear+cPeriod = tcYear+tcPeriod
		      SCATTER MEMVAR
		      SELECT expcat
		      SET ORDER TO ccatcode
		      IF SEEK(m.cCatCode)
		         m.cExpClass = cExpClass
		      ELSE
		         LOOP
		      ENDIF
		      SELECT expense
		      DO CASE
		         CASE m.cExpClass = '0'
		            m.ntotale = m.ntotale + m.namount
		         CASE m.cExpClass = '1'
		            m.nexpcl1 = m.nexpcl1 + m.namount
		         CASE m.cExpClass = '2'
		            m.nexpcl2 = m.nexpcl2 + m.namount
		         CASE m.cExpClass = '3'
		            m.nexpcl3 = m.nexpcl3 + m.namount
		         CASE m.cExpClass = '4'
		            m.nexpcl4 = m.nexpcl4 + m.namount
		         CASE m.cExpClass = '5'
		            m.nexpcl5 = m.nexpcl5 + m.namount
		      ENDCASE
		      m.ntotsalt = m.ntotsalt + m.nsaltwater
		   ENDSCAN
		
		   IF m.noilinc <> 0
		      lnNetOilAmt = m.noilinc
		   ELSE
		      lnNetOilAmt = 0
		   ENDIF
		   IF m.ngasinc <> 0
		      lnNetGasAmt = m.ngasinc
		   ELSE
		      lnNetGasAmt = 0
		   ENDIF
		
		   **-
		   **-  Get the net amount of expenses
		   **-
		   IF m.ntotale <> 0
		      m.nNetExp = m.ntotale
		   ELSE
		      m.nNetExp = 0
		   ENDIF
		
		   IF TYPE('tdAcctDate') <> 'D'
		      tdAcctDate = DATE()
		   ENDIF
		
		   m.hYear     = tcYear
		   m.hPeriod   = tcPeriod
		   m.cGroup    = m.cGroup
		   m.ngasinc   = lnNetGasAmt
		   m.ngrossgas = m.ngasinc
		   m.noilinc   = lnNetOilAmt
		   m.ngrossoil = m.noilinc
		   m.ntotbbltx1 = m.nbbltax1
		   m.ntotmcftx1 =  m.nmcftax1
		   m.ntotothtx1 =  m.nOthTax1
		   m.ntotbbltx2 =  m.nbbltax2
		   m.ntotmcftx2 =  m.nmcftax2
		   m.ntotothtx2 =  m.nOthTax2
		   m.ntotbbltx3 =  m.nBBLTax3
		   m.ntotmcftx3 =  m.nMCFTax3
		   m.ntotothtx3 =  m.nOthTax3
		   m.ntotbbltx4 =  m.nBBLTax4
		   m.ntotmcftx4 =  m.nMCFTax4
		   m.ntotothtx4 =  m.nOthTax4
		   m.ntotbbltxR =  m.nbbltaxr
		   m.ntotmcftxR =  m.nmcftaxr
		   m.ntotbbltxW =  m.nbbltaxw
		   m.ntotmcftxW =  m.nmcftaxw
		   m.ngbbltax1  =  m.nbbltax1
		   m.ngmcftax1  =  m.nmcftax1
		   m.ngbbltax2  =  m.nbbltax2
		   m.ngmcftax2  =  m.nmcftax2
		   m.ngbbltax3  =  m.nBBLTax3
		   m.ngmcftax3  =  m.nMCFTax3
		   m.ngbbltax4  =  m.nBBLTax4
		   m.ngmcftax4  =  m.nMCFTax4
		   m.hdate      =  tdDate
		   m.nroyint    = 0
		   m.nwrkint    = m.noilinc + m.ngasinc + m.nmiscinc1 + m.nmiscinc2 + m.nothinc - ;
		                  m.ntotale - m.nexpcl1 - m.nexpcl2 - m.nexpcl3 - m.nexpcl4 - m.nexpcl5 - ;
		                  (m.ntotbbltx1+m.ntotbbltx2+m.ntotbbltx3+m.ntotbbltx4) - ;
		                  (m.ntotmcftx1+m.ntotmcftx2+m.ntotmcftx3+m.ntotmcftx4) - ;
		                  (m.ntotothtx1+m.ntotothtx2+m.ntotothtx3+m.ntotothtx4)
		   m.cidwhst    =  oRegistry.incrementcounter('%Shared.Counters.Well History')
		   INSERT INTO wellhist FROM MEMVAR
		ENDSCAN
		
		oProgress.CloseProgress()
		
		thisform.oMessage.Display('Finished Building History For Investment Wells...')
		
		
		
		
		
		
		
	ENDPROC

	PROCEDURE Cntokcancelcustom1.cmdok.Click
		thisform.process()
	ENDPROC

ENDDEFINE
