*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="filebackup.scx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="2" />

	AutoOpenTables = .F.
	DataSource = .NULL.
	Height = 200
	Left = 40
	Name = "Dataenvironment"
	Top = 235
	Width = 520

ENDDEFINE

DEFINE CLASS formfilebackup AS frmformcustom OF "..\custom\cforms.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Pages" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Pages.Page1.Lbllabelcustom1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Pages.Page1.cmdBackup" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Pages.Page1.cmdExit" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Pages.Page1.chkSendBackup" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Pages.Page1.Cntgetfile1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Pages.Page1.Lbllabelcustom2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Pages.Page1.chkArchive" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Pages.Page1.chkCheckFormats" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Pages.Page1.chkReportFormats" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Swencrypt" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: decrypt
		*m: encrypt
		*m: ftpclose
		*m: ftpconnect
		*m: ftpfile
		*m: ftpfileoff
		*m: genfilename		&& Generates the backup filename
		*m: offsitefilename
		*m: oldcomp
		*m: process
		*m: processoffback
		*m: sendmail
		*m: sendtosherware
		*m: togglepassiveftp
		*p: cbackuplocation
		*p: cbackuppath
		*p: cfilename
		*p: cftpfile
		*p: lftpconnected
		*p: loffbackup
		*p: nbytes
		*p: nprogress
		*p: oprogress
		*p: _memberdata		&& XML Metadata for customizable properties
	*</DefinedPropArrayMethod>

	Caption = "Backup Data Files"
	DataSession = 2
	DoCreate = .T.
	Height = 332
	HelpContextID = 46
	Name = "FormFilebackup"
	nbytes = 0
	nprogress = 0
	ShowTips = .T.
	Visible = .T.
	Width = 522
	_memberdata = <VFPData>
		<memberdata name="decrypt" display="Decrypt"/>
		<memberdata name="encrypt" display="Encrypt"/>
		<memberdata name="genfilename" display="GenFileName"/>
		<memberdata name="nprogress" display="nProgress"/>
		<memberdata name="nbytes" display="nBytes"/>
		<memberdata name="sendtosherware" display="SendToSherWare"/>
		</VFPData>		&& XML Metadata for customizable properties
	Mwresize1.lblHighLight.Name = "lblHighLight"
	Mwresize1.lblShading.Name = "lblShading"
	Mwresize1.Name = "Mwresize1"

	ADD OBJECT 'Pages' AS pgfpageframecustom WITH ;
		ActivePage = 1, ;
		ErasePage = .T., ;
		Height = 312, ;
		Left = 12, ;
		Name = "Pages", ;
		PageCount = 1, ;
		Tabs = .T., ;
		Top = 12, ;
		Width = 508, ;
		ZOrderSet = 0, ;
		Page1.Caption = "", ;
		Page1.Name = "Page1"
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="pageframe" />

	ADD OBJECT 'Pages.Page1.chkArchive' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Include Archived Data in Backup", ;
		Left = 255, ;
		Name = "chkArchive", ;
		TabIndex = 3, ;
		ToolTipText = "Backs up any data archived using the archive utility.", ;
		Top = 72, ;
		Value = .F., ;
		Visible = .F.
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'Pages.Page1.chkCheckFormats' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Include Check Formats in Backup", ;
		Left = 48, ;
		Name = "chkCheckFormats", ;
		TabIndex = 4, ;
		ToolTipText = "Backs up all check formats to preserve any changes that might have been made to match up the format to your check stock.", ;
		Top = 100, ;
		Value = .F.
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'Pages.Page1.chkReportFormats' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Include Report Formats in Backup", ;
		Left = 255, ;
		Name = "chkReportFormats", ;
		TabIndex = 5, ;
		ToolTipText = "Backs up purchased state compliance reports and any custom reports from the Rpts folder.", ;
		Top = 100, ;
		Value = .F.
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'Pages.Page1.chkSendBackup' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Send Backup to SherWare Support", ;
		Left = 48, ;
		Name = "chkSendBackup", ;
		TabIndex = 2, ;
		ToolTipText = "Sends the backup to SherWare's secure server to be used in diagnosing a problem or question.", ;
		Top = 72, ;
		Value = .F.
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'Pages.Page1.cmdBackup' AS cmdcommandbuttoncustom WITH ;
		Caption = "\<Backup", ;
		Height = 36, ;
		Left = 147, ;
		Name = "cmdBackup", ;
		TabIndex = 8, ;
		Top = 230, ;
		Width = 75
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'Pages.Page1.cmdExit' AS cmdcommandbuttoncustom WITH ;
		Caption = "E\<xit", ;
		Height = 36, ;
		Left = 255, ;
		Name = "cmdExit", ;
		TabIndex = 9, ;
		Top = 230, ;
		Width = 75
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'Pages.Page1.Cntgetfile1' AS cntgetfile WITH ;
		cdefaultextension = , ;
		cextensionlist = , ;
		Height = 24, ;
		Left = 16, ;
		lfullpath = .T., ;
		lmustexist = .T., ;
		lpathonly = .T., ;
		Name = "Cntgetfile1", ;
		TabIndex = 7, ;
		Top = 166, ;
		Width = 479, ;
		cmdPath.Height = 22, ;
		cmdPath.Left = 450, ;
		cmdPath.Name = "cmdPath", ;
		cmdPath.Top = 0, ;
		cmdPath.Width = 23, ;
		edtPath.Height = 23, ;
		edtPath.Left = 0, ;
		edtPath.Name = "edtPath", ;
		edtPath.SelectOnEntry = .T., ;
		edtPath.Top = 0, ;
		edtPath.Width = 443
		*< END OBJECT: ClassLib="..\custom\cgadget.vcx" BaseClass="container" />

	ADD OBJECT 'Pages.Page1.Lbllabelcustom1' AS lbllabelcustom WITH ;
		AutoSize = .T., ;
		Caption = "This procedure will backup the data files for the currently open company.", ;
		FontSize = 10, ;
		ForeColor = 255,0,0, ;
		Height = 18, ;
		Left = 40, ;
		Name = "Lbllabelcustom1", ;
		TabIndex = 1, ;
		Top = 40, ;
		Width = 417, ;
		WordWrap = .T.
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Pages.Page1.Lbllabelcustom2' AS lbllabelcustom WITH ;
		Caption = "Backup Location", ;
		FontBold = .T., ;
		Left = 17, ;
		Name = "Lbllabelcustom2", ;
		TabIndex = 6, ;
		Top = 151
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Swencrypt' AS swencrypt WITH ;
		Height = 17, ;
		Left = 432, ;
		Name = "Swencrypt", ;
		Top = 264, ;
		Width = 36
		*< END OBJECT: ClassLib="..\custom\sw_encrypt.vcx" BaseClass="custom" />
	
	PROCEDURE beforeclose
		LPARAMETERS nclosereason
		
		thisform.lChanged = .F.
		
		DODEFAULT(nclosereason)
	ENDPROC

	PROCEDURE decrypt
		LPARAMETERS tcPass
		LOCAL lnLen
		tcPass = ALLTRIM(tcPass)
		lnlen = LEN(tcPass)
		RETURN (THISFORM.swencrypt.decrypt(LEFT('@349asksqf50Pws1',lnLen),tcPass))
	ENDPROC

	PROCEDURE encrypt
		LPARAMETERS tcPass
		LOCAL lnLen
		tcPass = ALLTRIM(tcPass)
		lnlen = LEN(tcPass)
		RETURN (THISFORM.swencrypt.encrypt(LEFT('@349asksqf50Pws1',lnLen),tcPass))
	ENDPROC

	PROCEDURE Error
		LPARAMETERS nerror,cmethod,nline
		
		if nerror <> 1540 and nerror <> 3
		   dodefault(nerror,cmethod,nline)
		endif   
	ENDPROC

	PROCEDURE ftpclose
	ENDPROC

	PROCEDURE ftpconnect
		LPARA tcUser, tcPass, tcSite
		LOCAL loIP, lnError, lcError
		
		loIP = CREATEOBJECT('wwftp')
		
		lnError = loIP.FTPConnect(TRIM(tcSite), ;
		     TRIM(tcUser), ;
		     TRIM(tcPass) )
		
		IF lnError = 0
		   THISFORM.lFTPConnected = .T.
		   RETURN '0'
		ELSE
		   THISFORM.lFTPConnected = .F.
		   lcError = 'Error: ' + TRANSFORM(lnError) + ' - ' + loIP.cErrorMsg
		   RETURN lcError
		ENDIF
		
		
		
	ENDPROC

	PROCEDURE ftpfile
		LOCAL lcFile, lcReturn, lcServerPath, lcSourceFile, lcTargetFile, llReturn, lnCount, lnResult
		LOCAL loError, loIP
		llReturn = .T.
		
		TRY
		   SET procedure TO custom\swftp.prg additive
		   loIP = CREATEOBJECT('swftp')
		   
		   loIP.cUser = 'client-backups'
		   loIP.cPwd  = "m]6.X$fKKh96{4&W"
		   loIP.cServer = 'cb.sherware.com'
		   loIP.nFTPPort = 441
		
		   loIP.lPassiveFTP = .T.
		   lcReturn = loIP.Connect()
		
		   IF lcReturn <> '0'
		      MESSAGEBOX(lcReturn, 16, 'Error Condition')
		      llReturn = .F.
		      EXIT 
		   ENDIF
		
		   WAIT WIND NOWAIT 'Sending backup to SherWare Support....Please Wait'
		   * Changed to use a forward / because of Filezilla on new server - pws - 8/2/22
		   lcServerPath = ALLTRIM(m.goapp.cproductname) + '/'
		   lcFile       = THISFORM.cFTPFile
		   lcSourceFile = THISFORM.cBackupPath + lcFile
		   lcTargetFile = lcServerPath + lcFile
		
		   loIP.cTargetFile = lcTargetFile
		   loIP.cSourceFile = lcSourceFile
		   
		   lnCount  = 0
		   lnResult = 1
		
		   llResult = loIP.SendFile()
		
		   WAIT CLEAR
		
		   IF VARTYPE(THISFORM.oProgress) = 'O'
		      THISFORM.oProgress.CloseProgress()
		   ENDIF
		
		   IF NOT llResult
		      MESSAGEBOX(loIP.cErrorMsg, 48, "FTP Upload Error")
		   ELSE
		      WAIT WIND NOWAIT "File:" + lcFile + " uploaded successfully!"
		      THISFORM.sendmail()
		   ENDIF
		   
		   TRY
		     ERASE (lcSourceFile)
		   CATCH
		   ENDTRY 
		
		   loIP.close()
		   
		   loIP = .Null.
		
		CATCH TO loError
		   llReturn = .F.
		   DO errorlog WITH 'FTPFile', loError.LINENO, 'Send Backup', loError.ERRORNO, loError.MESSAGE, '', loError
		   MESSAGEBOX('Unable to process the backup upload at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		        'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		RETURN llReturn
		
		
		
		
	ENDPROC

	PROCEDURE ftpfileoff
		LOCAL loIP, llTrue, lnCounter, lcUser, lcPass, lcFile, lcFileName, lnResult, lcSourceFile, lcTargetFile, llChanged
		LOCAL lcReturn, lcServer, llReturn, loError
		
		llReturn = .T.
		
		TRY
		
		      llReturn = THISFORM.offsitefilename()
		      IF NOT llReturn
		         llReturn = .F.
		         EXIT
		      ENDIF
		
		      loIP = CREATEOBJECT('swftp')
		
		      IF NOT USED('offb1')
		         USE (m.goapp.cdatafilepath + 'offb1') IN 0
		      ENDIF
		      SELE offb1
		      GO TOP
		      IF '|' $ cusername
		         lcUser = SUBSTR(cusername, AT('|', cusername) + 1)
		      ELSE
		         lcUser = ALLTRIM(cusername)
		      ENDIF
		      lcPass   = THISFORM.decrypt(offb1.cpassword)
		      lcServer = ALLTRIM(m.goapp.cOffsiteServer)
		      IF EMPTY(lcServer)
		         lcServer = 'ftp.sherware.com'
		      ENDIF
		
		      loIP.cUser = lcUser
		      loIP.cPwd  = lcPass
		      loIP.cServer = lcServer
		   
		      loIP.lPassiveFTP = .t.
		      lcReturn = loIP.Connect()
		
		
		      IF lcReturn <> '0'
		         MESSAGEBOX(lcReturn, 16, 'Error Condition')
		         llReturn = .f.
		         EXIT 
		      ENDIF
		
		      lcFile     = THISFORM.cFTPFile
		      lcFileName = THISFORM.cFileName
		
		      lcFile = JUSTSTEM(lcFile)
		
		      lcSourceFile = THISFORM.cBackupPath + lcFile + '.zip'
		      lcTargetFile = lcFileName
		
		      lnCounter            = 1
		      lnResult             = 99
		      loIP.nConnectTimeout = 25
		      loIP.cSourceFile = lcSourceFile
		      loIP.cTargetFile = lcTargetFile
		      llResult             = loIP.SendFile()
		      WAIT CLEAR
		
		      loIP.FTPClose()
		      IF NOT llResult
		         MESSAGEBOX(loIP.cErrorMsg, 48, "FTP Upload Error: " + TRANSFORM(loIP.nerror))
		      ELSE
		         MESSAGEBOX("Backup File:" + lcFileName + " uploaded successfully!", 48, "FTP Upload")
		      ENDIF
		
		      loIP = .NULL.
		
		CATCH TO loError
		   llReturn = .F.
		   DO errorlog WITH 'FTPFileOff', loError.LINENO, 'Offsite Backup', loError.ERRORNO, loError.MESSAGE, '', loError
		   MESSAGEBOX('Unable to process the backup at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		        'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		IF VARTYPE(loIP) = 'O'
		   loIP.FTPClose()
		ENDIF
		RETURN llReturn
		
		
		
	ENDPROC

	PROCEDURE genfilename		&& Generates the backup filename
		tlSendBackup = THISFORM.PAGES.page1.chkSendBackup.VALUE
		
		lcFileName = ALLT(STRTRAN(LOWER(m.goApp.ccompanyname), ' ', '')) + '_' + ALLT(STR(YEAR(DATE()))) + '_' + PADL(ALLT(STR(MONTH(DATE()))), 2, '0') + '_' + PADL(ALLT(STR(DAY(DATE()))), 2, '0')
		   lcFileName = STRTRAN(lcFileName, ',', '')
		   lcFileName = STRTRAN(lcFileName, '.', '')
		   lcFileName = STRTRAN(lcFileName, '-', '')
		   lcFileName = STRTRAN(lcFileName, '#', '')
		   lcFileName = STRTRAN(lcFileName, '&', '')
		   lcFileName = STRTRAN(lcFileName, '\', '')
		   lcFileName = STRTRAN(lcFileName, '/', '')
		   lcFileName = STRTRAN(lcFileName, '?', '')
		   lcFileName = STRTRAN(lcFileName, "'", '')
		   lcFileName = STRTRAN(lcFileName, ' ', '')
		   lcFileName = STRTRAN(lcFileName, '*', '')
		
		* If sending backup to SherWare append _SW to the end of the name
		* so the restore can warn of the tax ids being scrubbed.
		   IF tlSendBackup
		      lcFileName = ALLTRIM(lcFileName) + '_'+ STRTRAN(TIME(),':','_')
		   ELSE
		      lcFileName = ALLTRIM(lcFileName) + '_'+ STRTRAN(TIME(),':','_')
		   ENDIF
		
		   IF UPPER(RIGHT(ALLTRIM(lcFileName), 4)) <> '.ZIP'  &&  Only append the .ZIP if it doesn't already exist
		      lcFileName = lcFileName + '.zip'
		   ENDIF
		   
		   RETURN lcFileName
	ENDPROC

	PROCEDURE Init
		IF DODEFAULT()
		   _VFP.AUTOYIELD = .F.
		
		   THISFORM.lOffBackup          = m.goapp.lOffBackup
		   
		   IF m.goapp.lCloudServer
		      THISFORM.PAGES.page1.cntgetfile1.edtpath.VALUE = specialfolders('Personal')
		   ELSE
		      THISFORM.PAGES.page1.cntgetfile1.edtpath.VALUE = specialfolders('CommonDocuments')
		   ENDIF
		
		   IF m.goapp.lAMVersion = .F.  &&  If not AM version, don't show the "archived data" option
		      THISFORM.PAGES.page1.chkArchive.VISIBLE = .F.
		   ENDIF
		ENDIF
		
	ENDPROC

	PROCEDURE offsitefilename
		LOCAL lnResult, llTrue, llChanged, lnCounter, x, lcFileName, lcFile, loIP
		LOCAL laFiles[1], lcPass, lcServer, lcUser, llReturn, loError
		
		llReturn = .T.
		
		TRY
		   WAIT WIND NOWAIT 'Generating backup filename. Please wait...'
		   loIP = CREATEOBJECT('swftp')
		
		   IF NOT USED('offb1')
		      USE (m.goapp.cdatafilepath + 'offb1') IN 0
		   ENDIF
		   SELE offb1
		   GO TOP
		   IF '|' $ cusername
		      lcUser = SUBSTR(cusername, AT('|', cusername) + 1)
		   ELSE
		      lcUser = ALLTRIM(cusername)
		   ENDIF
		   lcPass   = THISFORM.decrypt(offb1.cpassword)
		   lcServer = ALLTRIM(m.goapp.cOffsiteServer)
		   IF EMPTY(lcServer)
		      lcServer = 'ftp.sherware.com'
		   ENDIF
		
		   loIP.cUser   = lcUser
		   loIP.cPwd    = lcPass
		   loIP.cServer = lcServer
		
		   loIP.lPassiveFTP = .T.
		   lcReturn         = loIP.CONNECT()
		
		   IF lcReturn <> '0'
		      MESSAGEBOX(lcReturn, 16, 'Error Condition')
		      llReturn = .F.
		      EXIT
		   ENDIF
		
		   lcFile     = THISFORM.cFTPFile
		   lcFileName = lcFile
		   lcFile     = JUSTSTEM(lcFile)
		
		   DIMENSION laFiles[1, 4]
		   lnResult = loIP.aFTPDir(@laFiles, "/" + ALLT(LOWER(lcFile)) + "*.zip")
		
		   llTrue    = .T.
		   llChanged = .F.
		   lnCounter = 1
		
		   DO WHILE NOT llChanged
		      FOR x = 1 TO lnResult
		         IF NOT llChanged AND lcFileName = laFiles[x, 1]
		            lcFileName = ALLT(lcFile) + '_' + TRANSFORM(lnCounter) + '.zip'
		            llChanged  = .T.
		            lnCounter  = lnCounter + 1
		         ENDIF
		      ENDFOR
		      llChanged = .T.
		   ENDDO
		
		   THISFORM.cFileName                       = lcFileName
		   THISFORM.PAGES.page2.lblfilename.CAPTION = lcFileName
		   WAIT CLEAR
		   loIP.FTPClose()
		   loIP     = .NULL.
		   llReturn = .T.
		CATCH TO loError
		   llReturn = .F.
		   DO errorlog WITH 'GetFileName', loError.LINENO, 'Offsite Backup', loError.ERRORNO, loError.MESSAGE, '', loError
		   MESSAGEBOX('Unable to process the backup at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		        'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		RETURN llReturn
	ENDPROC

	PROCEDURE oldcomp
		IF MESSAGEBOX('The required version of VFPCOMPRESSION.FLL is not installed. The Checks folder ' + ;
		              'and/or Rpts folder will not be included until this file is updated.' + CHR(10) + CHR(10) + ;
		              'Do you want to download the updated file?',36,'System Update') = 6
		  llReturn = swdownload(.t.)
		  
		  IF llReturn
		     MESSAGEBOX('Now exit the software and copy the files from Datafiles\Update\ to the ' + CHR(10) + ;
		                ALLTRIM(FULLPATH(CURDIR())) + CHR(10) + ;
		                ' folder to install them. Then try the backup again.',48,'Install Files')
		  ENDIF               
		ENDIF   
	ENDPROC

	PROCEDURE process
		LPARA tlOffSite, tlChecks, tlReports
		LOCAL lcDataPath, lcFileName, lcFolderName, tlSendBackup, llArchive
		LOCAL llChecks, llReports
		LOCAL laSessions[1], lcBackupPath, lcSavePath, lcTemp, llError, llReturn, lnError, lnsessions, lnx
		LOCAL loError
		
		llReturn = .T.
		llCancel = .F.
		
		ON KEY LABEL CTRL+C llCancel = .T.
		
		TRY
		   tlSendBackup = THISFORM.PAGES.page1.chkSendBackup.VALUE
		   llArchive    = THISFORM.PAGES.page1.chkArchive.VALUE
		
		   llChecks  = tlChecks
		   llReports = tlReports
		
		   IF swOpenForms(THIS.NAME)
		      THIS.omessage.severe('All other forms must be closed before backing up data.')
		      llReturn = .F.
		      EXIT
		   ENDIF
		
		   SET DATASESSION TO 1
		
		   IF NOT tlOffSite AND NOT tlSendBackup
		      IF EMPTY(THISFORM.cBackupPath)
		         THISFORM.omessage.warning('Please specify a location for the backup to be stored.')
		         llReturn = .F.
		         EXIT
		      ENDIF
		   ENDIF
		
		   IF NOT tlOffSite AND NOT tlSendBackup AND NOT DIRECTORY(THISFORM.cBackupPath)
		      MESSAGEBOX('The backup location specified does not exist. Choose a valid location.', 16, "Directory doesn't exist")
		      llReturn = .F.
		      EXIT
		   ENDIF
		
		   IF TYPE('m.goApp') = 'O'
		      lcDataPath = ALLT(m.goApp.cDataFilePath)
		      IF NOT ':' $ lcDataPath AND NOT '\\' $ lcDataPath AND LEFT(lcDataPath, 1) <> '\'
		         lcSavePath = ALLT(CURDIR())
		         lcDataPath = SYS(5) + CURDIR() + lcDataPath
		      ELSE
		         IF LEFT(lcDataPath, 1) = '\' AND NOT '\\' $ lcDataPath
		            lcDataPath = SYS(5) + lcDataPath
		         ENDIF
		      ENDIF
		      lcFolderName = lcDataPath
		      lcDataPath   = '"' + lcDataPath + '*.*' + '"'
		   ELSE
		      lcDataPath = '"' + ALLTRIM(GETDIR()) + '*.*' + '"'
		   ENDIF
		
		   IF NOT '\' $ lcDataPath
		      lcDataPath = 'Datafiles\data\*.*'
		   ENDIF
		
		   IF NOT llCancel
		      SET SAFETY OFF
		      TRY
		         lnsessions = ASESSIONS(laSessions)
		         FOR lnx = 1 TO lnsessions
		            SET DATASESSION TO lnsessions
		            CLOSE DATA ALL
		         ENDFOR
		      CATCH
		      ENDTRY
		
		      SET DATASESSION TO 1
		
		      CLOSE DATA ALL
		
		      lcFileName = JUSTPATH(lcDataPath)
		
		      SET CENTURY ON
		
		      lcFileName = THISFORM.GenFileName()
		
		      THIS.cftpfile = lcFileName
		   ENDIF
		
		   IF tlSendBackup OR tlOffSite
		      llError = .F.
		* Set the temp folder for the pdf files
		      lcTemp = ADDBS(ALLTRIM(m.goApp.cCommonFolder)) + 'Online\'
		
		      TRY
		         IF NOT DIRECTORY(lcTemp)
		            MD (lcTemp)
		         ENDIF
		      CATCH
		         llError = .T.
		         MESSAGEBOX('Unable to create the temp folder ' + lcTemp + ' Cannot continue with backup.', 16, 'Backup Problem')
		      ENDTRY
		
		      IF llError
		         llReturn = .F.
		         EXIT
		      ENDIF
		
		      lcBackupPath         = lcTemp
		      THISFORM.cBackupPath = lcBackupPath
		   ENDIF
		
		   SET DATASESSION TO 3
		   CLOSE DATABASES ALL
		   SET DATASESSION TO 1
		
		   WAIT CLEAR
		
		   lnError = swbackup('B', lcFolderName, lcFileName, THISFORM.cBackupPath, tlSendBackup, llArchive, llChecks, llReports)
		
		   DO CASE
		      CASE lnError = 0
		         DO CASE
		            CASE tlSendBackup AND NOT tlOffSite
		               THISFORM.ftpfile()
		            CASE tlOffSite
		               THISFORM.ftpfileoff()
		            OTHERWISE
		               IF llChecks
		                  TRY
		                     SET SAFETY OFF
		                     ERASE (lcFolderName + 'Temp\Checks\*.*')
		                     RD (lcFolderName + 'Temp\Checks')
		                  CATCH TO loError
		                  ENDTRY
		               ENDIF
		               IF llReports
		                  TRY
		                     SET SAFETY OFF
		                     ERASE (lcFolderName + 'Temp\Rpts\*.*')
		                     RD (lcFolderName + 'Temp\Rpts')
		                  CATCH TO loError
		                  ENDTRY
		               ENDIF
		               lcFolderName = STRTRAN(lcFolderName, '\', '\\')
		               THISFORM.omessage.DISPLAY('Backup of ' + ALLTRIM(lcFolderName) + ' Completed Successfully')
		         ENDCASE
		      CASE lnError = 4
		         MESSAGEBOX('The output file could not be created.  Please check to make sure that the path you selected is a valid path ' ;
		              + 'and that it is ready to be backed up to (properly formatted, not read-only, etc.).  Note that you CANNOT make a backup directly to a CD drive.  If attempting to ' ;
		              + 'make a backup to a CD drive, create the file to your c:\ drive, and then use your CD burning program to copy that ' ;
		              + 'file to a CD, outside of our software.', 0, 'Backup Error')
		
		      CASE lnError = 6
		         THISFORM.omessage.DISPLAY('Backup Encountered Errors Compressing the Files.')
		
		      CASE lnError = 8
		         THISFORM.omessage.DISPLAY('The backup file could not be closed.')
		   ENDCASE
		
		   IF llReturn AND (lnError = 0 OR lnError = 9)
		*  Only re-open the files if no error occurred.
		      m.goApp.OpenCompany1(.T.)
		   ENDIF
		CATCH TO loError
		   llReturn = .F.
		   DO errorlog WITH 'Process', loError.LINENO, 'Backup Data Files', loError.ERRORNO, loError.MESSAGE, '', loError
		   MESSAGEBOX('Unable to process the backup at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		        'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		RETURN llReturn
		
		
		
		
		
	ENDPROC

	PROCEDURE processoffback
	ENDPROC

	PROCEDURE sendmail
		LOCAL oSendMail AS 'swSendMail'
		LOCAL lcBody, lcClient, lcCompany, lcDate, lcRegCode, lcTime, lcTo, lcVersion, llResult, llReturn
		LOCAL loError
		*:Global omessage
		llReturn = .T.
		
		TRY
		   lcTo = "Sales <sales@sherware.com>"
		
		   oSendMail = CREATEOBJECT('swSendMail')
		
		   omessage = findglobalobject('cmmessage')
		
		   swselect('options')
		   oSendMail.lOutlook      = options.lUseOutlook
		   oSendMail.cEmailServer  = options.cEmailServer
		   oSendMail.cEmailAddress = options.cEmailAddress
		   oSendMail.cSender       = m.goapp.cCompanyName
		   oSendMail.lUseSSL       = options.lUseSSL
		   oSendMail.nSMTPPort     = options.nSMTPPort
		   oSendMail.cEmailUser    = ALLT(options.cEmailUser)
		   oSendMail.cEmailPass    = ALLT(options.cEmailPass)
		
		*!*	* Check to see if the email options were setup
		*!*	* If they weren't, don't try to send an email
		*!*	   IF NOT oSendMail.lOutlook
		*!*	      IF EMPTY(oSendMail.cEmailServer)
		*!*	         llReturn = .F.
		*!*	         EXIT
		*!*	      ENDIF
		*!*	   ENDIF
		
		   oSendMail.cTo      = lcTo
		   oSendMail.cCC      = ""
		   oSendMail.cBCC     = ""
		   oSendMail.cSubject = 'Backup Uploaded for ' + ALLTRIM(m.goapp.cCompanyName)
		
		   lcClient  = m.goapp.cClient
		   lcCompany = m.goapp.cRegCompany
		   lcRegCode = m.goapp.cCode
		   lcVersion = m.goapp.cFileVersion
		   lcDate    = DTOC(FDATE(ALLTRIM(m.goapp.cexecutable)))
		   lcTime    = FTIME(ALLTRIM(m.goapp.cexecutable))
		   lcBody    = 'Client:  ' + lcClient + CHR(10) + ;
		      'Company:  ' + lcCompany + CHR(10) + ;
		      'Software: ' + ALLTRIM(UPPER(m.goapp.cexecutable)) + CHR(10) + ;
		      'RegCode:  ' + lcRegCode + CHR(10) + ;
		      'Version:  ' + lcVersion + ' Date: ' + lcDate + ' Time: ' + lcTime
		   oSendMail.cBody       = lcBody
		   oSendMail.cAttachment = ''
		
		* Send email async and don't care if email is setup. Use SherWare's if it isn't
		   llResult = oSendMail.SendMail(.T.,.T.)       
		
		   IF !llResult
		      MESSAGEBOX('Unable to send email...Check your settings and try again.', 16, 'E-Mail Setup Problem')
		   ELSE
		      MESSAGEBOX("An email has been sent to SherWare support to let them know a backup has been uploaded for " + ALLTRIM(m.goapp.cCompanyName), 0, 'Backup Confirmation')
		   ENDIF
		   
		   RELEASE oSendMail
		
		CATCH TO loError
		   llReturn = .F.
		   DO errorlog WITH 'SendMail', loError.LINENO, 'Backup Data Files', loError.ERRORNO, loError.MESSAGE, '', loError
		   MESSAGEBOX('Unable to process the backup at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		        'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		RETURN llReturn
	ENDPROC

	PROCEDURE sendtosherware
	ENDPROC

	PROCEDURE togglepassiveftp
	ENDPROC

	PROCEDURE Unload
		
		_VFP.AutoYield = .T.
		ON KEY LABEL CTRL+P
		DODEFAULT()
	ENDPROC

	PROCEDURE Pages.Page1.chkCheckFormats.Click
		IF this.Value
		lnx = ADIR(laFiles,m.goapp.cCommonFolder+'bin\vfpcompression.fll')
		IF lafiles[1,3] < {12/5/2008}      
		      thisform.oldcomp()   
		ENDIF 
		IF lnx > 0 and lafiles[1,3] < {12/5/2008}      
		   thisform.oldcomp()   
		ENDIF
		ENDIF
		
	ENDPROC

	PROCEDURE Pages.Page1.chkReportFormats.Click
		IF this.Value
		lnx = ADIR(laFiles,m.goapp.cCommonFolder+'bin\vfpcompression.fll')
		IF lafiles[1,3] < {12/5/2008}      
		      thisform.oldcomp()   
		ENDIF 
		IF lnx > 0 and lafiles[1,3] < {12/5/2008}      
		   thisform.oldcomp()   
		ENDIF
		ENDIF 
	ENDPROC

	PROCEDURE Pages.Page1.chkSendBackup.Valid
		IF this.Value
		   thisform.pages.page1.cntgetfile1.edtpath.enabled = .f.
		else   
		   thisform.pages.page1.cntgetfile1.edtpath.enabled = .t.
		endif   
	ENDPROC

	PROCEDURE Pages.Page1.cmdBackup.Click
		LOCAL llChecks, llReports
		
		thisform.cBackupPath = thisform.pages.page1.cntgetfile1.edtpath.value
		
		llChecks     = thisform.pages.page1.chkCheckFormats.Value
		llReports    = thisform.pages.page1.chkReportFormats.Value
		
		thisform.process(.f., llChecks, llReports)
	ENDPROC

	PROCEDURE Pages.Page1.cmdExit.Click
		thisform.release()
	ENDPROC

	PROCEDURE Pages.Page1.Cntgetfile1.cmdPath.Click
		LOCAL cPath
		LOCAL llReturn, loError, llError
		#INCLUDE vfp2c.h
		llReturn = .T.
		
		TRY
		   IF THIS.PARENT.lPathOnly
		      llError = .F.
		      
		      m.cPath = GETDIR(specialfolders('CommonDocuments'),'Select where to store the backup','Backup Location',112)
		*!*         TRY 
		*!*         IF NOT FILE('datafiles\vfp2c32.fll')
		*!*            GetVFPc32()
		*!*         ENDIF
		
		*!*         SET LIBRARY TO datafiles\vfp2c32.fll ADDITIVE
		*!*         INITVFP2C32(VFP2C_INIT_ALL)
		
		*!*         LOCAL lcFolder
		
		*!*         SHBROWSEFOLDER('Choose a Folder', BIF_NEWDIALOGSTYLE, @cPath)
		*!*         CATCH TO loError
		*!*   *         DO errorlog WITH 'cmdPath.click', loError.LINENO, 'FileBackup', loError.ERRORNO, loError.MESSAGE, '', loError
		*!*            llError = .T.
		*!*         ENDTRY
		*!*         IF llError
		*!*            m.cPath = GETFILE(THIS.PARENT.cExtensionList)
		*!*         ENDIF  
		      IF EMPTY(m.cpath)
		         m.cpath = specialfolders('CommonDocuments')
		      ENDIF   
		   ELSE
		      m.cPath = GETFILE(THIS.PARENT.cExtensionList)
		   ENDIF
		   IF NOT EMPTY(m.cPath)
		      THIS.PARENT.SetValue(m.cPath)
		   ENDIF
		
		   THISFORM.PAGES.Page1.cntgetfile1.edtpath.VALUE = ADDBS(ALLTRIM(THISFORM.PAGES.Page1.cntgetfile1.edtpath.VALUE))
		
		   IF LEN(THISFORM.PAGES.Page1.cntgetfile1.edtpath.VALUE) > 120  &&  Greater than the max, so don't let them choose it.
		      THISFORM.oMessage.Warning('The chosen path contains more than the maximum of 120 characters.  Please choose a different path, or use a relative path to shorten the length.')
		      THISFORM.PAGES.Page1.cntgetfile1.edtpath.SET('value', '')
		   ENDIF
		CATCH TO loError
		   llReturn = .F.
		   DO errorlog WITH 'cmdPath.click', loError.LINENO, 'FileBackup', loError.ERRORNO, loError.MESSAGE, '', loError
		   MESSAGEBOX('Unable to process the backup at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		        'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		RETURN llReturn
		
		
	ENDPROC

	PROCEDURE Pages.Page1.Cntgetfile1.cmdPath.When
		RETURN NOT This.parent.parent.chkSendBackup.value  &&  Don't let this button be clicked when choosing to send the backup to SherWare
	ENDPROC

ENDDEFINE
