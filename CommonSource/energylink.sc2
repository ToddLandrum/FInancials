*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="energylink.scx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
#INCLUDE "..\..\..\3rdparty\vfp2c32\vfp2c32\vfp2c.h"

DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="2" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Cursor1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor6" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor7" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor8" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor9" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor10" UniqueID="" Timestamp="" />

	AutoOpenTables = .F.
	DataSource = .NULL.
	Height = 200
	Left = 4
	Name = "Dataenvironment"
	Top = 433
	Width = 911

	ADD OBJECT 'Cursor1' AS cursor WITH ;
		Alias = "groups", ;
		CursorSource = "groups", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor1", ;
		Top = 20, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor10' AS cursor WITH ;
		Alias = "expcat", ;
		CursorSource = "expcat", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 430, ;
		Name = "Cursor10", ;
		Top = 140, ;
		Width = 91
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor2' AS cursor WITH ;
		Alias = "wells", ;
		CursorSource = "wells", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 118, ;
		Name = "Cursor2", ;
		Top = 23, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor3' AS cursor WITH ;
		Alias = "options", ;
		CursorSource = "options", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 225, ;
		Name = "Cursor3", ;
		Top = 23, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor4' AS cursor WITH ;
		Alias = "investor", ;
		CursorSource = "investor", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 331, ;
		Name = "Cursor4", ;
		Top = 22, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor5' AS cursor WITH ;
		Alias = "checks", ;
		CursorSource = "checks", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 435, ;
		Name = "Cursor5", ;
		Top = 22, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor6' AS cursor WITH ;
		Alias = "income", ;
		CursorSource = "income", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 538, ;
		Name = "Cursor6", ;
		Top = 22, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor7' AS cursor WITH ;
		Alias = "wellhist", ;
		CursorSource = "wellhist", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 640, ;
		Name = "Cursor7", ;
		Top = 22, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor8' AS cursor WITH ;
		Alias = "susaudit", ;
		CursorSource = "susaudit", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 742, ;
		Name = "Cursor8", ;
		Top = 22, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor9' AS cursor WITH ;
		Alias = "sysctl", ;
		CursorSource = "sysctl", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 290, ;
		Name = "Cursor9", ;
		Top = 140, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

ENDDEFINE

DEFINE CLASS formenergylink AS frmrptcriteria OF "..\source\appforms.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="LblFirstWell" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Swrptlook1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Runcombo1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdProcess" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdExit" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="LblLastWell" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom6" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cntgetfile1" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: buildjibdata
		*m: buildrevdata
		*m: createpdf		&& Creates a PDF of the stub
		*m: formattext		&& Adds the escape characters to invalid xml characters
		*m: getmonth
		*m: jibupload
		*m: process		&& build the energylink xml file
		*m: revenueupload
		*p: loldversion
		*p: ojib
	*</DefinedPropArrayMethod>

	calias = 
	Caption = "Create EnergyLink Upload"
	DataSession = 2
	DoCreate = .T.
	Height = 361
	HelpContextID = 218
	loldversion = .F.
	Name = "FormEnergylink"
	ojib = .NULL.
	Width = 554
	_memberdata = <VFPData>
		<memberdata name="process" display="Process"/>
		<memberdata name="revenueupload" display="RevenueUpload"/>
		<memberdata name="jibupload" display="JIBUpload"/>
		<memberdata name="buildjibdata" display="BuildJIBData"/>
		<memberdata name="buildrevdata" display="BuildRevData"/>
		<memberdata name="ojib" display="oJIB"/>
		<memberdata name="getmonth" display="GetMonth"/>
		<memberdata name="formattext" display="FormatText"/>
		</VFPData>
	Swrptcriteriabuttons1.chkExport.Alignment = 0
	Swrptcriteriabuttons1.chkExport.Name = "chkExport"
	Swrptcriteriabuttons1.cmdclose.Name = "cmdclose"
	Swrptcriteriabuttons1.cmdPreview.Name = "cmdPreview"
	Swrptcriteriabuttons1.cmdPrint.Name = "cmdPrint"
	Swrptcriteriabuttons1.Left = 165
	Swrptcriteriabuttons1.Name = "Swrptcriteriabuttons1"
	Swrptcriteriabuttons1.TabIndex = 9
	Swrptcriteriabuttons1.Top = 284
	Swrptcriteriabuttons1.Visible = .F.
	Swrptcriteriabuttons1.ZOrderSet = 1

	ADD OBJECT 'cmdExit' AS cmdcommandbuttoncustom WITH ;
		Caption = "E\<xit", ;
		Height = 48, ;
		Left = 297, ;
		Name = "cmdExit", ;
		Top = 296, ;
		Width = 96
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdProcess' AS cmdcommandbuttoncustom WITH ;
		Caption = "\<Process", ;
		Height = 48, ;
		Left = 189, ;
		Name = "cmdProcess", ;
		Top = 296, ;
		Width = 84
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'Cntgetfile1' AS cntgetfile WITH ;
		cdefaultextension = XML, ;
		cextensionlist = XML, ;
		Height = 20, ;
		Left = 108, ;
		lfullpath = .T., ;
		lmustexist = .F., ;
		lpathonly = .F., ;
		Name = "Cntgetfile1", ;
		TabIndex = 7, ;
		Top = 228, ;
		Width = 432, ;
		cmdPath.FontBold = .T., ;
		cmdPath.FontSize = 10, ;
		cmdPath.Height = 20, ;
		cmdPath.Left = 412, ;
		cmdPath.Name = "cmdPath", ;
		cmdPath.TabStop = .F., ;
		cmdPath.Top = 0, ;
		edtPath.FontSize = 8, ;
		edtPath.Height = 20, ;
		edtPath.Left = 0, ;
		edtPath.Margin = 1, ;
		edtPath.Name = "edtPath", ;
		edtPath.Top = 0, ;
		edtPath.Width = 408
		*< END OBJECT: ClassLib="..\common\cmgadget.vcx" BaseClass="container" />

	ADD OBJECT 'LblFirstWell' AS lbllabelcustom WITH ;
		BackStyle = 0, ;
		Caption = "First Owner:", ;
		Height = 16, ;
		Left = 33, ;
		Name = "LblFirstWell", ;
		TabIndex = 3, ;
		Top = 100, ;
		Width = 63, ;
		ZOrderSet = 10
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom1' AS lbllabelcustom WITH ;
		Caption = "Run No", ;
		Left = 59, ;
		Name = "Lbllabelcustom1", ;
		TabIndex = 5, ;
		Top = 29
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom6' AS lbllabelcustom WITH ;
		Caption = "File Name:", ;
		Height = 16, ;
		Left = 45, ;
		Name = "Lbllabelcustom6", ;
		TabIndex = 8, ;
		Top = 230, ;
		Width = 51, ;
		ZOrderSet = 8
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'LblLastWell' AS lbllabelcustom WITH ;
		BackStyle = 0, ;
		Caption = "Last Owner:", ;
		Height = 16, ;
		Left = 33, ;
		Name = "LblLastWell", ;
		TabIndex = 4, ;
		Top = 151, ;
		Width = 63, ;
		ZOrderSet = 8
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Runcombo1' AS runcombo WITH ;
		cshowwhat = B, ;
		Height = 20, ;
		Left = 108, ;
		lshownew = .F., ;
		Name = "Runcombo1", ;
		TabIndex = 1, ;
		Top = 27, ;
		Width = 396
		*< END OBJECT: ClassLib="..\custom\swcontrol.vcx" BaseClass="combobox" />

	ADD OBJECT 'Swrptlook1' AS swrptlook WITH ;
		Height = 93, ;
		Left = 109, ;
		Name = "Swrptlook1", ;
		TabIndex = 2, ;
		Top = 99, ;
		Width = 419, ;
		ZOrderSet = 3, ;
		Swlookupbutton1.Name = "Swlookupbutton1", ;
		Swlookupbutton2.Name = "Swlookupbutton2", ;
		txtBegID.clistexpression = investor.cownerid, ;
		txtBegID.clistworkarea = investor, ;
		txtBegID.Name = "txtBegID", ;
		TxtBegName.Height = 20, ;
		TxtBegName.Left = 0, ;
		TxtBegName.Name = "TxtBegName", ;
		TxtBegName.Top = 22, ;
		TxtBegName.Width = 395, ;
		txtEndID.clistexpression = investor.cownerid, ;
		txtEndID.clistworkarea = investor, ;
		txtEndID.Name = "txtEndID", ;
		TxtEndName.Height = 20, ;
		TxtEndName.Left = 0, ;
		TxtEndName.Name = "TxtEndName", ;
		TxtEndName.Top = 73, ;
		TxtEndName.Width = 395
		*< END OBJECT: ClassLib="..\custom\swcontrol.vcx" BaseClass="container" />
	
	PROCEDURE buildjibdata
		LOCAL tcYear, tcPeriod, tcOwner1, tcOwner2, tcGroup, oJIB, llJIBNotes
		LOCAL laRpts[1], lcCust1, lcCust2, lcYear, ldDate1, ldDate2, ldPmtRcv, llGetFormats, llNoJIBBal
		LOCAL llPrintDesc, llRETURN, llSummaryRet, lnFiles, lnPmtAmt, lnRunNo, lnx
		LOCAL llFormatError, loError
		
		llRETURN = .T.
		
		TRY
		    tcYear  = THISFORM.runcombo1.LISTITEM[thisform.runcombo1.listitemid, 2]
		    tnRunNo = INT(VAL(THISFORM.runcombo1.LISTITEM[thisform.runcombo1.listitemid, 3]))
		
		    IF tnRunNo  = 0
		        tcGroup    = LEFT(THISFORM.swgroup1.VALUE, 2)
		        tdAcctDate = THISFORM.txtacctdate.VALUE
		    ELSE
		        tcGroup    = THISFORM.runcombo1.LISTITEM[thisform.runcombo1.listitemid, 4]
		        tdAcctDate = CTOD(THISFORM.runcombo1.LISTITEM[thisform.runcombo1.listitemid, 7])
		    ENDIF
		
		    tcOwner1 = THISFORM.swrptlook1.txtBegID.VALUE
		    tcOwner2 = THISFORM.swrptlook1.txtEndID.VALUE
		
		
		    SWSELECT('options')
		    llPrintDesc = lAcctDesc
		    llJIBNotes  = lJIBNotes
		
		*
		*  Call jibproc to create the (jibowner) and (jibwell) cursors
		*
		    THISFORM.oJIB = CREATEOBJECT('jibproc', tcOwner1, tcOwner2, ;
		          '01', ;
		          tcYear, ;
		          tcGroup, 'O', tdAcctDate, .F., tnRunNo)
		
		
		    IF THISFORM.oJIB.MAIN()
		
		        SWSELECT('invhdr')
		        SCAN FOR cinvtype <> 'J'
		            m.cownerid = ccustid
		            SWSELECT('investor')
		            SET ORDER TO cownerid
		            IF SEEK(m.cownerid)
		                SWSELECT('invhdr')
		                REPL cinvtype WITH 'J'
		            ENDIF
		        ENDSCAN
		
		**********************************************************
		*  Create the jib invoice work file
		**********************************************************
		        CREATE CURSOR jibinv   ;
		            (ccustid    C(10),   ;
		              cpagebreak  C(10), ;
		              cCustName  C(40),   ;
		              cCustName2 C(40),   ;
		              cAddr1     C(40),   ;
		              cAddr2     C(40),   ;
		              cAddr3     C(40),   ;
		              cidterm    c(8),    ;
		              nstmttype  I,       ;
		              lWellPage  L,       ;
		              dJIBDate   D,       ;
		              dDueDate   D,       ;
		              ddiscdate  D,       ;
		              ndiscpct   N(5, 2),  ;
		              cInvNum    C(10),   ;
		              cWellId    C(10),   ;
		              cWellName  C(30),   ;
		              ccounty    C(30),   ;
		              cState     C(2),    ;
		              cPayee     C(30),   ;
		              dExpDate   D,       ;
		              cExpCateg  C(40),   ;
		              cNotes     C(40),   ;
		              cCatCode   C(4),    ;
		              nExpTotal  N(12, 2), ;
		              nExpAmount N(12, 2), ;
		              nJibTotal  N(12, 2), ;
		              nPrevBal   N(12, 2), ;
		              nPayments  N(12, 2), ;
		              dpmtrcv    D,       ;
		              cProdYear  C(4),    ;
		              cProdPrd   C(2),    ;
		              nRunNo     I,       ;
		              cRunYear   C(4),    ;
		              nInterest  N(11, 7), ;
		              cTaxCode   C(2),    ;
		              crefid     C(10), ;
		              cTaxDesc   C(30), ;
		              cSection   C(1))
		
		**********************************************************
		*  Build the jib invoice data
		**********************************************************
		
				SELECT  jibtemph.ccustid, ;
						investor.cOwnname AS cCustName, ;
						IIF(investor.lchktosec, investor.cOwnName2, investor.cOwnName1) AS cCustName2, ;
						IIF(investor.lchktosec, investor.cAddress2a, investor.caddress1a) AS cAddr1, ;
						IIF(investor.lchktosec, investor.cAddress2b, investor.caddress1b) AS cAddr2, ;
						IIF(investor.lchktosec, TRIM(investor.ccity2) + ' ' + investor.cstate2 + ' ' + investor.czip2, TRIM(investor.ccity1) + ' ' + investor.cstate1 + ' ' + investor.czip1) AS cAddr3, ;
						investor.cidterm, ;
						investor.nstmttype, ;
						investor.lWellPage, ;
						jibtemph.dInvDate AS dJIBDate, ;
						jibtemph.dDueDate, ;
						jibtemph.cInvNum,  ;
						jibtemph.nRunNo, ;
						jibtemph.cRunYear, ;
						jibtempd.cUnitNo AS cWellId, ;
						wells.cWellName, ;
						wells.ccounty, ;
						wells.cState, ;
						jibtempd.dExpDate, ;
						jibtempd.citemid AS cCatCode, ;
						jibtempd.cItemDesc AS cNotes, ;
						jibtempd.nExtension AS nExpAmount, ;
						jibtemph.nInvTot AS nJibTotal, ;
						jibtempd.nPrice  AS nExpTotal, ;
						jibtempd.cPayee, ;
						jibtempd.cProdYear, ;
						jibtempd.cProdPrd, ;
						jibtempd.nInterest, ;
						jibtempd.cworkorder AS crefid, ;
						jibtempd.cTaxCode ;
					FROM jibtemph, jibtempd, investor, wells ;
					WHERE jibtemph.cRunYear = tcYear ;
						AND jibtemph.nRunNo     = tnRunNo ;
						AND BETWEEN(ccustid, tcOwner1, tcOwner2) ;
						AND jibtemph.ccustid = investor.cownerid ;
						AND jibtemph.cBatch  = jibtempd.cBatch ;
						AND jibtempd.cUnitNo = wells.cWellId ;
					INTO CURSOR temp ;
					ORDER BY jibtemph.ccustid, jibtempd.cUnitNo, jibtempd.cTaxCode, jibtempd.cProdYear, jibtempd.cProdPrd, jibtempd.citemid
		
		        IF _TALLY = 0
		            llRETURN = .F.
		            EXIT
		        ENDIF
		
		        SELECT jibinv
		        APPEND FROM DBF('temp')
		        USE IN temp
		
		        SWSELECT('taxcodes')
		        SET ORDER TO cTaxCode
		
		        SELECT jibinv
		        SCAN
		            
		            m.cTaxCode  = jibinv.cTaxCode
		            m.cExpCateg = jibinv.cExpCateg
		            m.cCatCode  = jibinv.cCatCode
		            m.cidterm   = jibinv.cidterm
		            m.ddiscdate = jibinv.dDueDate
		
		*!*	            SELECT jibinv
		*!*	            REPLACE ddiscdate WITH m.ddiscdate, ;
		*!*	                    ndiscpct  WITH m.ndiscpct
		                
		            SWSELECT('expcat')
		            SET ORDER TO cCatCode
		            IF SEEK(m.cCatCode)
		                m.cTaxCode  = cTaxCode
		                m.cExpCateg = cCateg
		                IF llPrintDesc
		                    m.cExpCateg = cDescrip
		                ENDIF
		*  Printing description from bills takes precedence, but they shouldn't be able to have both marked anyway
		                IF llJIBNotes
		                    m.cExpCateg = jibinv.cNotes
		                ENDIF
		            ELSE
		*  If there's no match, it may be something like a pre-pay, which already has a description built in.  Use it instead.
		                m.cExpCateg = jibinv.cNotes
		            ENDIF
		            m.dExpDate = jibinv.dExpDate
		            SWSELECT('taxcodes')
		            DO CASE
		                CASE SEEK(m.cTaxCode)
		                    m.cTaxDesc = cDesc
		                    m.cSection = 'A'
		                CASE m.cTaxCode == '{P'
		                    m.cTaxDesc = '** ' + ALLTRIM(jibinv.cWellId) + ' Prepayment Applied **'
		                    m.cSection = 'B'
		                    m.dExpDate = {}
		                OTHERWISE
		                    m.cTaxDesc = 'Lease Operating Expense '
		                    m.cSection = 'A'
		            ENDCASE
		            SELECT jibinv
		            REPL cTaxCode WITH m.cTaxCode, ;
		                cTaxDesc WITH m.cTaxDesc, ;
		                cExpCateg WITH m.cExpCateg, ;
		                cSection  WITH m.cSection, ;
		                dExpDate  WITH m.dExpDate
		        ENDSCAN
		
		
		        SELECT jibinv
		        GO TOP
		        lcCust1     = ccustid
		        GO BOTT
		        lcCust2     = ccustid
		
		        IF tcYear = ' '
		            tcYear = ALLT(STR(YEAR(tdAcctDate)))
		        ENDIF
		
		        DO CASE
		            CASE tnRunNo = 1
		* If this is the 1st run of the year,
		* Find out what the last run of last year was.
		                lcYear  = STR(VAL(tcYear) - 1, 4)
		                lnRunNo = getrunno(lcYear, .F., 'J') - 1
		            CASE tnRunNo = 2
		                lcYear  = tcYear
		                lnRunNo = tnRunNo - 1
		            OTHERWISE
		*  If this is a new run, get the last run
		*  for this year.
		                IF tnRunNo = 0
		                    lnRunNo = getrunno(tcYear, .F., 'J') - 1
		                ELSE
		                    lnRunNo  = tnRunNo - 1
		                ENDIF
		                lcYear = tcYear
		        ENDCASE
		
		        ldDate1 = tdAcctDate - 1
		
		**  Changing it to get the balance as of tdAcctDate-1, then get the payments since the last closing and add them back to the balance.
		**  This lets them do adjustments to balances between the date of the last closing and tdAcctDate, and have them included in the balance,
		**  while still reporting payments.  If no previous closings, tdDate2 becomes 30 days ago.
		
		        SWSELECT('sysctl')
		        SET ORDER TO yearrun DESC
		        LOCATE FOR cGroup = tcGroup AND cTypeClose = 'J' AND cRunYear + PADL(ALLTRIM(STR(nRunNo)), 3, '0') <> tcYear + PADL(ALLTRIM(STR(tnRunNo)), 3, '0')
		        IF FOUND()
		            ldDate2 = sysctl.dAcctDate
		        ELSE
		            ldDate2 = tdAcctDate - 30
		        ENDIF
		
		        THISFORM.oJIB.jibbal(ldDate1, tcGroup, lcYear, lnRunNo, tcOwner1, tcOwner2)
		
		*  Check to see if the previous jib balances should be printed on the statement
		        SWSELECT('options')
		        llNoJIBBal = lNoJIBBal
		
		        IF NOT llNoJIBBal
		            SELECT jibinv
		            SCAN
		                m.ccustid  = ccustid
		                m.nPrevBal = 0
		                m.cAddr3   = cAddr3
		                IF EMPTY(cAddr2)
		                    REPLACE cAddr2 WITH m.cAddr3, ;
		                        cAddr3 WITH ' '
		                ENDIF
		                SELECT jibbal
		                LOCATE FOR ccustid = m.ccustid
		                IF FOUND()
		                    m.nPrevBal = nCurrent + nDays30 + nDays60 + nDays90
		                ENDIF
		                lnPmtAmt = 0
		                ldPmtRcv = {}
		
		                SWSELECT('arpmthdr')
		                SCAN FOR ccustid = m.ccustid AND BETWEEN(dRecDate, ldDate2, ldDate1 + 1)
		                    SWSELECT('arpmtdet')
		                    IF lnPmtAmt <> m.nPrevBal
		                        SCAN FOR cBatch = arpmthdr.cBatch   &&  Only pick up payments for this batch
		                            lnPmtAmt = lnPmtAmt + nAmtApp
		
		*  To avoid getting a bogus "Last Payment Date" from a manually entered invoice, we have to match back
		*  to invhdr and make sure it's got a cdmbatch value on it, meaning it came from a JIB closing - BH 03/15/12
		                            SWSELECT('invhdr')
		                            SET ORDER TO cBatch
		                            IF SEEK(arpmtdet.cInvToken)
		                                IF NOT EMPTY(cdmbatch)
		                                    ldPmtRcv = arpmthdr.dRecDate
		                                ENDIF
		                            ENDIF
		                        ENDSCAN
		                    ENDIF
		                ENDSCAN
		                SELECT jibinv
		                REPLACE nPrevBal  WITH m.nPrevBal + lnPmtAmt, ;
		                    nPayments WITH lnPmtAmt, ;
		                    dpmtrcv   WITH ldPmtRcv
		            ENDSCAN
		        ENDIF
		
		
		            SELECT jibinv
		            INDEX ON ccustid + cWellId + cSection + cTaxCode + cExpCateg + cProdYear + cProdPrd + cPayee TAG jibkey
		
		
		        THISFORM.ctitle1     = ''
		        THISFORM.ctitle2     = ''
		        llRETURN             = .T.
		    ELSE
		        llRETURN = .F.
		    ENDIF
		CATCH TO loError
		    llRETURN = .F.
		    DO errorlog WITH 'BuildJIBData', loError.LINENO, 'Owner JIB Stmts', loError.ERRORNO, loError.MESSAGE
		    MESSAGEBOX('Unable to process the report at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		          'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		RETURN llRETURN
		
		
		
	ENDPROC

	PROCEDURE buildrevdata
		LOCAL tcYear, tcPeriod, tcGroup, tcOwner1, tcOwner1Name, tcOwner2, tcOwner2Name, oOwner, oDist, lcVersion
		PRIV lnCount, lnMaxLines, lcidChec, lnMax, lnProcess, llDistProc
		
		TRY
		   tcYear       = THISFORM.runcombo1.LISTITEM[thisform.runcombo1.listitemid, 2]
		   tnRunNo      = INT(VAL(THISFORM.runcombo1.LISTITEM[thisform.runcombo1.listitemid, 3]))
		   tcGroup      = THISFORM.runcombo1.LISTITEM[thisform.runcombo1.listitemid, 4]
		   tcDMBatch    = THISFORM.runcombo1.LISTITEM[thisform.runcombo1.listitemid, 5]
		   tcTypeClose  = THISFORM.runcombo1.LISTITEM[thisform.runcombo1.listitemid, 6]
		   tcOwner1     = THISFORM.swrptlook1.txtBegID.VALUE
		   tcOwner1Name = ALLTRIM(THISFORM.swrptlook1.txtBegName.VALUE)
		   tcOwner2     = THISFORM.swrptlook1.txtEndID.VALUE
		   tcOwner2Name = ALLTRIM(THISFORM.swrptlook1.txtEndName.VALUE)
		   lcVersion    = ' '
		
		* Check to see what version the run was closed under
		   swselect('sysctl')
		   LOCATE FOR nrunno == tnRunNo AND cRunYear == tcYear
		   IF FOUND()
		      lcVersion = cVersion
		   ENDIF
		
		   CREATE CURSOR stub ;
		      (cID             C(10), ;
		        cidtype         C(1), ;
		        cpayee          C(60), ;
		        cprogcode       C(10), ;
		        ccheckno        C(10), ;
		        cidchec        C(8), ;
		        cwellid         C(10), ;
		        cwellname       C(30), ;
		        nincome         N(9, 2), ;
		        nbbl           N(12, 2), ;
		        cIncType       C(1), ;
		        nmcf           N(12, 2), ;
		        noth           N(12, 2), ;
		        nbblprice      N(12, 6), ;
		        nmcfprice      N(12, 6), ;
		        noilrev        N(12, 2), ;
		        ngasrev        N(12, 2), ;
		        nothrev        N(12, 2), ;
		        cIntType       C(1), ;
		        cDesc          C(60), ;
		        cinvnum        C(15), ;
		        dinvdate       D, ;
		        nworkint        N(11, 7), ;
		        dcheckdate     D, ;
		        ninvtot        N(12, 2), ;
		        namtpaid       N(12, 2), ;
		        ndisctot       N(12, 2), ;
		        namount         N(12, 2), ;
		        dproddate      D, ;
		        nexpense        N(9, 2), ;
		        ntaxes          N(9, 2), ;
		        nnetcheck       N(9, 2), ;
		        creference     C(20), ;
		        nOTHER          N(9, 2), ;
		        cprodprd       C(5), ;
		        nunits          N(12, 2), ;
		        nprice          N(12, 2), ;
		        ntotalinc       N(12, 2), ;
		        ntax1           N(12, 2), ;
		        ntax2           N(12, 2), ;
		        ntax3           N(12, 2), ;
		        ntax4           N(12, 2), ;
		        nexpcl0        N(12, 2), ;
		        nexpcl1        N(12, 2), ;
		        nexpcl2        N(12, 2), ;
		        nexpcl3        N(12, 2), ;
		        nexpcl4        N(12, 2), ;
		        nexpcl5        N(12, 2), ;
		        nrevtax1        N(11, 7), ;
		        nrevtax2        N(11, 7), ;
		        nrevtax3        N(11, 7), ;
		        nrevtax4        N(11, 7), ;
		        nrevtax5        N(11, 7), ;
		        nrevtax6        N(11, 7), ;
		        nrevtax7        N(11, 7), ;
		        nrevtax8        N(11, 7), ;
		        nrevtax9        N(11, 7), ;
		        nrevtax10       N(11, 7), ;
		        nrevtax11      N(11, 7), ;
		        nrevtax12      N(11, 7), ;
		        nnetval        N(12, 2), ;
		        ninterest      N(11, 7), ;
		        nowngross      N(12, 2), ;
		        cGROUP          C(2))
		   INDEX ON cID + cGROUP + cprogcode TAG cID
		   INDEX ON cidchec TAG cidchec
		
		*
		*  Setup Global Options
		*
		   swselect('options')
		   GO TOP
		   glAcctDesc = lacctdesc
		   glStmComp  = lstmcomp
		   glStminv   = lstminv
		   glDirInv   = ldirinv
		   glZeroStmt = lzerostmt
		   glDefStmt  = ldefstmt
		   glMinStmt  = lminstmt
		   gnMinCheck = nmincheck
		   gcCheckNo  = ccheckno
		   glExpDate  = lExpDate
		   glSkipPerf = lSkipPerf
		   gnStubLine = nStubLine
		   llTwoLines = lTwoLines
		
		   llDistProc = .F.
		
		   IF FILE('nostubexp.dat')
		      llNoExpense = .T.
		   ELSE
		      llNoExpense = .F.
		   ENDIF
		
		   swselect('groups')
		   SET ORDER TO cGROUP
		   IF SEEK(tcGroup)
		      glNetSusp = lNetDef
		   ELSE
		      glNetSusp = .T.
		   ENDIF
		
		   SELE cID AS cOwnerID FROM checks WHERE cBatch = tcDMBatch INTO CURSOR tempchks ORDER BY cID
		
		* If the version is empty we assume it was
		* closed under the old version before we
		* started storing the version #. If so,
		* use the old ownerstmt class.
		   IF EMPTY(lcVersion) AND tnRunNo <> 0
		      oDist = CREATEOBJECT('olddistproc', tcOwner1, tcOwner2, ;
		           '01', ;
		           tcYear, ;
		           tcGroup, 'O', DATE(), .F., tnRunNo)
		      THISFORM.lOldversion = .T.
		   ELSE
		      oDist = CREATEOBJECT('distproc', tcOwner1, tcOwner2, ;
		           '01', ;
		           tcYear, ;
		           tcGroup, 'O', DATE(), .F., tnRunNo)
		   ENDIF
		
		*
		*  Call distproc to create the (invtmp) and (wellwork) cursors
		*
		   oDist.MAIN()
		
		   oOwner = CREATEOBJECT('swowner')
		   oOwner.OwnerStub(.T., tcYear, tnRunNo, tcOwner1, tcOwner2, .F.)
		   RELEASE oOwner
		   RELEASE oDist
		
		*
		*  Set filter for stub report
		*
		   SELECT stub
		   COUNT FOR BETWEEN(cID, tcOwner1, tcOwner2) TO lnCount
		   IF lnCount > 0
		      llReturn = .T.
		   ELSE
		      llReturn = .F.
		   ENDIF
		
		CATCH TO loError
		   llReturn = .F.
		   DO errorlog WITH 'BuildRevData', loError.LINENO, 'Owner Stub Rpt', loError.ERRORNO, loError.MESSAGE, '', loError
		   MESSAGEBOX('Unable to process the report at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		        'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		RETURN llReturn
		
		
	ENDPROC

	PROCEDURE createpdf		&& Creates a PDF of the stub
	ENDPROC

	PROCEDURE formattext		&& Adds the escape characters to invalid xml characters
		LPARAMETERS tcText
		
		
		* Look for <
		lcText = STRTRAN(tcText,'<','&lt;')
		
		* Look for >
		lcText = STRTRAN(lcText,'>','&gt;')
		
		* Look for "
		lcText = STRTRAN(lcText,'"','&quot;')
		
		* Look for '
		lcText = STRTRAN(lcText,"'",'&apos;')
		
		* Look for &
		lcText = STRTRAN(lcText,'&','&amp;')
		
		RETURN lcText
	ENDPROC

	PROCEDURE getmonth
		LPARAMETERS tcMonth
		
		DO CASE
		   CASE tcMonth = '01'
		      lcMonth = 'JAN'
		   CASE tcMonth = '02'
		      lcMonth = 'FEB'
		   CASE tcMonth = '03'
		      lcMonth = 'MAR'
		   CASE tcMonth = '04'
		      lcMonth = 'APR'
		   CASE tcMonth = '05'
		      lcMonth = 'MAY'
		   CASE tcMonth = '06'
		      lcMonth = 'JUN'
		   CASE tcMonth = '07'
		      lcMonth = 'JUL'
		   CASE tcMonth = '08'
		      lcMonth = 'AUG'
		   CASE tcMonth = '09'
		      lcMonth = 'SEP'
		   CASE tcMonth = '10'
		      lcMonth = 'OCT'
		   CASE tcMonth = '11'
		      lcMonth = 'NOV'
		   CASE tcMonth = '12'
		      lcMonth = 'DEC'
		   OTHERWISE
		      lcMonth = 'JAN'
		ENDCASE
		
		RETURN lcMonth
		
	ENDPROC

	PROCEDURE Init
		DODEFAULT()
		
		SELECT investor
		SET ORDER TO cownerid
		GO TOP
		
		THISFORM.swrptlook1.txtBegName.VALUE = cSortField
		THISFORM.swrptlook1.txtBegID.VALUE = cownerid
		GO BOTTOM
		
		THISFORM.swrptlook1.txtEndName.VALUE = cSortField
		THISFORM.swrptlook1.txtEndID.VALUE = cownerid
		
		lcDate = THISFORM.runcombo1.LISTITEM[thisform.runcombo1.listitemid, 7]
		lcYear = RIGHT(lcDate,4)
		lcMonth = THISFORM.GetMonth(LEFT(lcDate,2))
		lcTypeClose = THISFORM.runcombo1.LISTITEM[thisform.runcombo1.listitemid, 6]
		
		IF lcTypeClose = 'R'
		   thisform.cntgetfile1.edtpath.value = specialfolders('CommonDocuments')+'EnergyLink_REV_' + lcmonth + lcYear + '.xml'
		ELSE
		   thisform.cntgetfile1.edtpath.value = specialfolders('CommonDocuments')+'EnergyLink_JIB_' + lcmonth + lcYear + '.csv'
		ENDIF    
		
	ENDPROC

	PROCEDURE jibupload
		LOCAL lcDate, lcDay, lcFilename, lcIntDesc, lcNameCtl, lcOwnProp, lcOwnVol, lcOwners, lcPhone
		LOCAL lcProdCode, lcProdDate, lcProdDesc, lcPropVol, lcProps, lcState, lcStub, lcTIN, lcXML
		LOCAL lcZipExt, lcaddr1, lcaddr2, lccity, lcemail, lcproducer, lczip, ln1099Count, lnOwners, lnPayee
		*:Global nStateIncome
		
		SET SAFETY OFF
		
		IF NOT USED('compmast')
		   USE (m.goapp.cCommonFolder+'compmast') IN 0
		ENDIF
		SELECT compmast
		SET ORDER TO cidcomp
		SEEK(m.goapp.cidcomp)
		
		STORE '' TO lcXML, lcProps, lcZipExt, lcaddr1, lcaddr2,lccity, lcemail, lcproducer, lczip, lcTIN, ;
		   lcOwnVol, lcOwnProp, lcNameCtl, lcIntDesc, lcFilename, lcDay, lcDate, lcOwners, lcPhone, lcStub
		
		lcproducer = thisform.FormatText(ALLTRIM(compmast.cproducer))
		lcproducer = STRTRAN(lcproducer, ',', '')
		lcaddr1	  = thisform.FormatText(ALLTRIM(compmast.caddress1))
		lcaddr2	  = thisform.FormatText(ALLTRIM(compmast.caddress2))
		lccity	  = thisform.FormatText(ALLTRIM(compmast.ccity))
		lcState	  = thisform.FormatText(ALLTRIM(compmast.cstate))
		
		IF LEN(ALLTRIM(compmast.czipcode)) > 5
		   lczip	   = LEFT(ALLTRIM(compmast.czipcode), 5)
		   lcZipExt = RIGHT(ALLTRIM(compmast.czipcode), 4)
		ELSE
		   lcZipExt = ''
		   lczip	   = ALLTRIM(compmast.czipcode)
		ENDIF
		
		lcTIN	 = ALLTRIM(STRTRAN(cmEncrypt(ALLTRIM(compmast.ctaxid),m.goapp.cEncryptionKey), '-', ''))
		lcPhone	 = ALLTRIM(STRTRAN(compmast.cphoneno, '-', ''))
		lcPhone	 = ALLTRIM(STRTRAN(lcPhone, '(', ''))
		lcPhone	 = ALLTRIM(STRTRAN(lcPhone, ')', ''))
		lcPhone	 = ALLTRIM(STRTRAN(lcPhone, ' ', ''))
		lcemail	 = ALLTRIM(compmast.cemail)
		lcNameCtl = ALLTRIM(UPPER(LEFT(lcproducer, 4)))
		
		lnPayee		  = 0
		ln1099Count    = 0
		m.nStateIncome = 0
		USE IN compmast
		lnOwners = 0
		
		lcOrganization = ALLTRIM(m.goapp.cClient)
		
		lcFilename = THISFORM.cntgetfile1.edtPath.VALUE
		
		SELECT ccustid, ;
		   ccustname, ;
		   cCustName2, ;
		   djibdate, ;
		   cInvNum, ;
		   nJIBTotal ;
		   FROM jibinv ;
		   INTO CURSOR tempjibs ;
		   ORDER BY ccustid GROUP BY ccustid
		
		SELECT ccustid, ;
		   ccustname, ;
		   cCustName2, ;
		   cwellid, ;
		   djibdate, ;
		   cInvNum, ;
		   SUM(nExpAmount) AS nJIBTotal ;
		   FROM jibinv ;
		   INTO CURSOR tempinvs ;
		   ORDER BY ccustid, cwellid GROUP BY ccustid, cwellid
		
		SELECT ccustid, ;
		   ccustname, ;
		   jibinv.cwellid, ;
		   jibinv.cwellname, ;
		   jibinv.ccounty, ;
		   jibinv.cstate, ;
		   wells.cpermit1 ;
		   FROM jibinv ;
		   JOIN wells ON jibinv.cwellid = wells.cwellid ;
		   INTO CURSOR tempcc ;
		   ORDER BY jibinv.cwellid GROUP BY jibinv.cwellid
		
		
		SELECT tempjibs
		SCAN
		   SCATTER MEMVAR
		   lcString = '"PRT","' + ;
		      ALLTRIM(m.ccustid) + '","' + ;
		      ALLTRIM(m.ccustname) + '","'
		
		   IF NOT EMPTY(m.cCustName2)
		      lcString = lcString + ALLTRIM(m.ccustname) + '","'
		   ELSE
		      lcString = lcString + '","'
		   ENDIF
		
		   swselect('investor')
		   LOCATE FOR cownerid == m.ccustid
		   IF FOUND()
		      lcString = lcString + ALLTRIM(cAddress1a) + '","'
		
		      IF NOT EMPTY(caddress1b)
		         lcString = lcString + ALLTRIM(caddress1b) + '","'
		      ELSE
		         lcString = lcString + '","'
		      ENDIF
		
		      * No address 3
		      lcString = lcString + '","'
		
		      lcString = lcString + ALLTRIM(ccity1) + '","'
		
		      lcString = lcString + cstate1 + '","'
		
		      lcString = lcString + ALLTRIM(czip1) + '","'
		
		      IF NOT EMPTY(cphonew)
		         lcPhone = STRTRAN(cphonew,'-','')
		         lcPhone = STRTRAN(lcPhone,'(','')
		         lcPhone = STRTRAN(lcPhone,')','')
		         lcString = lcString + ALLTRIM(lcPhone) + '","'
		      ELSE
		         lcString = lcString + '","'
		      ENDIF
		
		      lcString = lcString + '","","",""' + CHR(13)
		
		      * Write out "PRT" record
		      IF lnOwners = 0 && First owner
		         STRTOFILE(lcString, lcFilename,.F.) && Don't append
		      ELSE
		         STRTOFILE(lcString, lcFilename,.T.) && Append
		      ENDIF
		      lcString = ''
		      lnOwners = lnOwners + 1
		   ENDIF
		ENDSCAN
		
		****************************
		* BA Record
		****************************
		lcString = '"BA","'
		
		lcString = lcString + ALLTRIM(lcOrganization) + '","'
		
		lcString = lcString + ALLTRIM(lcproducer) + '","","'
		
		lcString = lcString + ALLTRIM(lcaddr1) + '","'
		
		IF NOT EMPTY(lcaddr2)
		   lcString = lcString + ALLTRIM(lcaddr2) + '","'
		ELSE
		   lcString = lcString + '","'
		ENDIF
		
		* No Address 3
		lcString = lcString + '","'
		
		lcString = lcString + ALLTRIM(lccity) + '","'
		
		lcString = lcString + ALLTRIM(lcState) + '","'
		
		lcString = lcString + 'US","'
		
		lcString = lcString + ALLTRIM(lczip) + '","'
		
		lcString = lcString + ALLTRIM(lcPhone) +'","",""' + CHR(13)
		
		STRTOFILE(lcString, lcFilename,1)  && Write out "BA" record
		lcString = ''
		
		****************************
		* CC Records
		****************************
		
		SELECT tempcc
		SCAN
		   SCATTER MEMVAR
		   lcWellid = STRTRAN(m.cwellid,'"','')
		   lcWellid = STRTRAN(lcWellid,"'",'')
		   lcWellname = STRTRAN(m.cwellname,'"','')
		   lcWellname = STRTRAN(lcWellname,"'",'')
		
		   lcString = '"CC"' + ',"'
		
		   lcString = lcString + ALLTRIM(lcWellid) + '","' && Cost Center
		
		   lcString = lcString + ALLTRIM(lcWellname) + '","' && Cost Center Name
		
		   lcString = lcString + ALLTRIM(m.ccounty) + ' ' + ALLTRIM(m.cstate) + '","'  && Cost Center Location
		
		   lcString = lcString + '","","'  && Operator Cost Center and Survey System Code (Nulls)
		
		   IF NOT EMPTY(m.cpermit1)
		      lcString = lcString + ALLTRIM(STRTRAN(m.cpermit1,'-','')) + '","'
		   ELSE
		      lcString = lcString + '","'
		   ENDIF
		
		   lcString = lcString + '",""' + CHR(13) && Venture Num and Venture Desc
		
		   STRTOFILE(lcString, lcFilename,1) && Write out "CC" record
		   lcString = ''
		ENDSCAN
		
		****************************
		* INV Record
		****************************
		SELECT tempjibs
		SCAN
		   m.ccustid = ccustid
		   SELECT tempinvs
		   SCAN FOR ccustid == m.ccustid
		      SCATTER MEMVAR
		
		      lcAcctPrd = DTOC(goendmonth(m.djibdate,0,.T.))
		      lcMonth   = THISFORM.GetMonth(LEFT(lcAcctPrd,2))
		      lcAcctPrd = SUBSTR(lcAcctPrd,4,2) + '-' + lcMonth + '-' + RIGHT(lcAcctPrd,4)
		      lcInvDate = DTOC(m.djibdate)
		      lcMonth   = THISFORM.GetMonth(LEFT(lcInvDate,2))
		      lcInvDate = SUBSTR(lcInvDate,4,2) + '-' + lcMonth + '-' + RIGHT(lcInvDate,4)
		      lcDate    = DTOC(DATE())
		      lcMonth   = THISFORM.GetMonth(LEFT(lcDate,2))
		      lcDate = SUBSTR(lcDate,4,2) + '-' + lcMonth + '-' + RIGHT(lcDate,4)
		
		      lcString = '"INV"' + ',"'
		
		      lcString = lcString + ALLTRIM(lcOrganization) + '","'  && Organization
		
		      lcString = lcString + lcAcctPrd + '","'  && Accounting Period
		
		      lcString = lcString + lcDate + '","'  && Date created
		
		      lcString = lcString + '","'   && AFE number
		
		      lcString = lcString + ALLTRIM(cwellid)+'",'   && Cost Center
		
		      lcString = lcString + ALLTRIM(TRANSFORM(m.nJIBTotal,'999999999999.99')) + ','  && Net amount to partner
		
		      lcString = lcString + '0,' && Zero filled column
		
		      lcString = lcString + '0,"'  && Cash call amount
		
		      lcString = lcString + ALLTRIM(m.ccustid) + '","'  && Partner number
		
		      lcString = lcString + ALLTRIM(m.cInvNum) + '","'  && Invoice number
		
		      lcString = lcString + '","'  && null
		
		      lcString = lcString + lcDate + '","'  && Invoice date
		
		      lcString = lcString + '","'  && Alt address
		
		      lcString = lcString + '"' + CHR(13)  && Statement number
		
		      STRTOFILE(lcString, lcFilename,1) && Write out "INV" record
		      lcString = ''
		
		      ****************************
		      * DET Record
		      ****************************
		
		      SELECT jibinv
		      SCAN FOR ccustid == m.ccustid AND cwellid == m.cwellid
		         SCATTER MEMVAR
		
		         lcAcctPrd = DTOC(goendmonth(m.djibdate,0,.T.))
		         lcMonth   = THISFORM.GetMonth(LEFT(lcAcctPrd,2))
		         lcAcctPrd = SUBSTR(lcAcctPrd,4,2) + '-' + lcMonth + '-' + RIGHT(lcAcctPrd,4)
		         lcInvDate = DTOC(m.djibdate)
		         lcMonth   = THISFORM.GetMonth(LEFT(lcInvDate,2))
		         lcInvDate = SUBSTR(lcInvDate,4,2) + '-' + lcMonth + '-' + RIGHT(lcInvDate,4)
		         lcDate    = DTOC(DATE())
		         lcMonth   = THISFORM.GetMonth(LEFT(lcDate,2))
		         lcDate = SUBSTR(lcDate,4,2) + '-' + lcMonth + '-' + RIGHT(lcDate,4)
		         lcProdPrd = '01-' + THISFORM.GetMonth(m.cProdPrd) + '-' + m.cProdYear
		
		         lcString = '"DET",'
		
		         lcString = lcString + '"'+ALLTRIM(lcOrganization) + '",'  && Organization
		
		         lcString = lcString + lcAcctPrd + ','  && Accounting Period
		
		         lcString = lcString + lcDate + ','     && Date Created
		
		         lcString = lcString + '"USD","'        && Currency Code
		
		         IF m.cTaxCode = '{P'
		            lcTaxCode = 'CSH'
		            m.cCatCode = 'CASHCALL'
		            m.cExpCateg = 'Prepayment Applied'
		            lcMajorDesc = 'PREPAY'
		            lcAcct = lcTaxCode + ALLTRIM(m.cCatCode)
		         ELSE
		            lcTaxCode = m.cTaxCode
		            lcMajorDesc = ALLTRIM(UPPER(m.cTaxdesc))
		            lcAcct = lcTaxCode +'.' + ALLTRIM(m.cCatCode)
		         ENDIF
		
		         m.cExpCateg = STRTRAN(m.cExpCateg,'"','')
		
		         lcMinorDesc = ALLTRIM(UPPER(m.cExpCateg))
		
		         lcString = lcString + lcAcct + '","'   && Complete Account
		
		         lcString = lcString + lcTaxCode + '","' && Major Account
		
		         lcString = lcString + lcMajorDesc + '","'   && Major Account Desc
		
		         lcString = lcString + ALLTRIM(m.cCatCode) + '","'  && Minor Acct
		
		         lcString = lcString + ALLTRIM(m.cExpCateg) + '","' && Minor Desc
		
		         lcString = lcString + '","'  && AFE
		
		         lcString = lcString + ALLTRIM(m.cwellid) + '",' && Cost Center
		
		         lcString = lcString + lcProdPrd + ','   && Production date
		
		         IF m.cTaxCode = '{P'
		            m.nExpTotal = 0
		         ENDIF 
		         lcString = lcString + ALLTRIM(TRANSFORM(m.nExpTotal,'99999999999.99')) + ','  && Gross Amount
		
		         lcString = lcString + '0,'   && Gross Volume
		
		         lcString = lcString + '0,'   && Zero Fill
		
		         lcString = lcString + ALLTRIM(TRANSFORM(m.nInterest,'999.9999999999')) + ',' && Interest
		
		         lcString = lcString + ALLTRIM(TRANSFORM(m.nExpAmount,'99999999999.99')) + ',' && Partner amt
		
		         lcString = lcString + '0,'  && Partner Volume
		
		         lcString = lcString + '0,'  && Zero Fill
		
		         lcString = lcString + '0,0,'   && Unused values
		
		         lcString = lcString + '"' + ALLTRIM(m.ccustid) + '",'  && Partner number
		
		         lcString = lcString + '0,' && Zero Fill
		
		         lcString = lcString + '0,0,0,"'  && UDFS
		
		         m.cNotes = STRTRAN(m.cNotes,'"','')
		         lcString = lcString + ALLTRIM(m.cNotes) + '"' + CHR(13)
		
		         STRTOFILE(lcString, lcFilename,1) && Write out "INV" record
		         lcString = ''
		      ENDSCAN
		   ENDSCAN
		
		ENDSCAN
		
		SET SAFETY OFF
		
		MESSAGEBOX('Created an Energylink File with JIB Info for ' + ALLTRIM(TRANSFORM(lnOwners,'999,999')) + ' Owners.',64,'EnergyLink Export')
		
		
		
		
	ENDPROC

	PROCEDURE process		&& build the energylink xml file
		
		
		lcTypeClose = THISFORM.runcombo1.LISTITEM[thisform.runcombo1.listitemid, 6]
		
		IF lcTypeClose = 'J'
		   llReturn = thisform.BuildJIBData()
		   IF llReturn
		      llReturn = thisform.JIBUpload()
		   ENDIF    
		ELSE
		   llReturn = thisform.BuildRevData()
		   IF llReturn
		      llReturn = thisform.RevenueUpload()
		   ENDIF    
		ENDIF 
		
		 
	ENDPROC

	PROCEDURE report
		LPARAMETERS cbutton
		
		TRY
		
		   
		
		CATCH TO loerror
		    llReturn = .F.
		    DO errorlog WITH 'Report', loerror.LINENO, 'Owner Stub Rpt', loerror.ERRORNO, loerror.MESSAGE, '', loerror
		    MESSAGEBOX('Unable to process the report at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		          'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		
		
		
	ENDPROC

	PROCEDURE revenueupload
		LOCAL lcDate, lcDay, lcFilename, lcIntDesc, lcNameCtl, lcOwnProp, lcOwnVol, lcOwners, lcPhone
		LOCAL lcProdCode, lcProdDate, lcProdDesc, lcPropVol, lcProps, lcState, lcStub, lcTIN, lcXML, lnChkNo
		LOCAL lcZipExt, lcaddr1, lcaddr2, lccity, lcemail, lcproducer, lczip, ln1099Count, lnOwners, lnPayee
		*:Global nStateIncome
		
		IF NOT USED('compmast')
		   USE (m.goapp.cCommonFolder+'compmast') IN 0
		ENDIF
		SELECT compmast
		SET ORDER TO cidcomp
		SEEK(m.goapp.cidcomp)
		
		lcOrganization = thisform.FormatText(ALLTRIM(m.goapp.cClient))
		
		STORE '' TO lcXML, lcProps, lcZipExt, lcAddr1, lcAddr2,lcCity, lcEmail, lcProducer, lcZip, lcTIN, ;
		            lcOwnVol, lcOwnProp, lcNameCtl, lcIntDesc, lcFileName, lcDay, lcDate, lcOwners, lcPhone, lcStub
		
		lcproducer = thisform.FormatText(ALLTRIM(compmast.cproducer))
		lcproducer = STRTRAN(lcproducer, ',', '')
		lcaddr1	  = thisform.FormatText(ALLTRIM(compmast.caddress1))
		lcaddr2	  = thisform.FormatText(ALLTRIM(compmast.caddress2))
		lccity	  = thisform.FormatText(ALLTRIM(compmast.ccity))
		lcState	  = thisform.FormatText(ALLTRIM(compmast.cstate))
		
		IF LEN(ALLTRIM(compmast.czipcode)) > 5
		   lczip	   = LEFT(ALLTRIM(compmast.czipcode), 5)
		   lcZipExt = RIGHT(ALLTRIM(compmast.czipcode), 4)
		ELSE
		   lcZipExt = ''
		   lczip	   = ALLTRIM(compmast.czipcode)
		ENDIF
		lcZip = thisform.FormatText(lcZip)
		
		lcTIN	 = ALLTRIM(STRTRAN(cmEncrypt(ALLTRIM(compmast.ctaxid),m.goapp.cEncryptionKey), '-', ''))
		lcPhone	 = ALLTRIM(STRTRAN(compmast.cphoneno, '-', ''))
		lcPhone	 = ALLTRIM(STRTRAN(lcPhone, '(', ''))
		lcPhone	 = ALLTRIM(STRTRAN(lcPhone, ')', ''))
		lcPhone	 = ALLTRIM(STRTRAN(lcPhone, ' ', ''))
		lcemail	 = ALLTRIM(compmast.cemail)
		lcNameCtl = ALLTRIM(UPPER(LEFT(lcproducer, 4)))
		
		lnChkNo       = 1
		lnPayee		  = 0
		ln1099Count    = 0
		m.nStateIncome = 0
		USE IN compmast
		
		TEXT TO lcXML NOSHOW TEXTMERGE PRETEXT 3
		<RevenueData>
		    <Operator>
		    <OperatorCode><<lcOrganization>></OperatorCode>
		    <CompanyName><<ALLTRIM(lcproducer)>></CompanyName>
		    <AdditionalNameInfo />
		        <Address1><<ALLTRIM(lcaddr1)>></Address1>
		        <Address2 />
		        <Address3 />
		        <City><<ALLTRIM(lcCity)>></City>
		        <State><<lcState>></State>
		        <Country>US</Country>
		        <ZIPCode><<ALLTRIM(lcZip)>></ZIPCode>
		        <Phone><<ALLTRIM(lcPhone)>></Phone>
		        <Fax />
		        <TaxRegNumber />
		     </Operator>
		ENDTEXT
		
		SELECT stub.cwellid, ;
		   stub.cwellname, ;
		   stub.ccounty, ;
		   stub.cstate, ;
		   stub.cprogcode, ;
		   programs.cprogname ;
		   FROM stub ;
		   LEFT OUTER JOIN programs ON stub.cprogcode = programs.cprogcode ;
		   INTO CURSOR properties ;
		   ORDER BY stub.cwellid ;
		   GROUP BY stub.cwellid
		
		lcXML = lcXML + CHR(13) + '<Properties>'
		lcProps = ''
		SELECT properties
		SCAN
		   SCATTER MEMVAR
		
		   m.cWellID   = thisform.FormatText(ALLTRIM(m.cWellID))
		   m.cWellName = thisform.FormatText(ALLTRIM(m.cWellName))
		   m.cState    = thisform.FormatText(ALLTRIM(m.cState))
		   m.cCounty   = thisform.FormatText(ALLTRIM(m.cCounty))
		   m.cProgCode = thisform.FormatText(ALLTRIM(m.cProgCode))
		   m.cProgName = thisform.FormatText(ALLTRIM(m.cProgName))
		   
		   TEXT TO lcProps ADDITIVE NOSHOW TEXTMERGE PRETEXT 3
		    <Property>
		    <PropertyCode><<ALLTRIM(m.cwellid)>></PropertyCode>
		    <NameAndLocation><<ALLTRIM(m.cwellname)>></NameAndLocation>
		    <AdditionalNameInfo />
		    <State><<m.cstate>></State>
		    <County><<ALLTRIM(m.cCounty)>></County>
		    <LocationID />
		   ENDTEXT
		
		   IF NOT EMPTY(m.cprogcode)
		      lcProps = lcProps + CHR(13) + ;
		         '<VentureNumber>' + ALLTRIM(m.cprogcode) + '</VentureNumber>' + CHR(13) + ;
		         '<VentureDesc>' + ALLTRIM(m.cprogname) + '</VentureDesc>' + CHR(13)
		   ELSE
		      lcProps = lcProps + ;
		         '<VentureNumber />' + CHR(13) + ;
		         '<VentureDesc />' + CHR(13)
		   ENDIF
		
		   lcProps = lcProps + '</Property>' + CHR(13)
		ENDSCAN
		
		lcXML = lcXML + CHR(13) + lcProps + '</Properties>' + CHR(13) + '<Owners>' + CHR(13)
		
		SELECT stub.cid, ;
		   SUM(stub.nNetCheck) AS nCheckTotal, ;
		   stub.dCheckDate, ;
		   stub.cCheckNo ;
		   FROM stub ;
		   INTO CURSOR chks ;
		   ORDER BY stub.cid ;
		   GROUP BY stub.cid
		
		SELECT stub.cid, ;
		   stub.cwellid, ;
		   stub.cwellname, ;
		   stub.ccounty, ;
		   stub.cstate ;
		   FROM stub ;
		   INTO CURSOR ownerprops ;
		   ORDER BY stub.cid, stub.cwellid ;
		   GROUP BY stub.cid, stub.cwellid
		
		
		SELECT stub.cid, ;
		   stub.cpayee, ;
		   investor.caddress1a, ;
		   investor.caddress1b, ;
		   investor.ccity1, ;
		   investor.cstate1, ;
		   investor.czip1, ;
		   investor.cphonew ;
		   FROM stub ;
		   JOIN investor ON stub.cid = investor.cownerid ;
		   WHERE investor.linteggl = .f. ;
		   INTO CURSOR owners ;
		   ORDER BY stub.cid ;
		   GROUP BY stub.cid
		
		lnOwners = 0
		SELECT owners
		SCAN
		   SCATTER MEMVAR
		   lcID     = m.cID
		   m.cID    = thisform.FormatText(m.cID)
		   m.cPayee = thisform.FormatText(ALLTRIM(m.cPayee))
		   m.cAddress1a = thisform.FormatText(ALLTRIM(m.cAddress1a))
		   m.cAddress1b = thisform.FormatText(ALLTRIM(m.cAddress1b))
		   m.cstate1    = thisform.FormatText(ALLTRIM(m.cState1))
		   m.czip1      = thisform.FormatText(ALLTRIM(m.cZip1))
		   m.cPhonew    = thisform.FormatText(ALLTRIM(m.cPhoneW))
		   
		   TEXT TO lcOwners NOSHOW TEXTMERGE PRETEXT 3
		     <Owner>
		        <OwnerCode><<ALLTRIM(m.cid)>></OwnerCode>
		        <OwnerName><<ALLTRIM(m.cpayee)>></OwnerName>
		        <AdditionalNameInfo />
		        <Address1><<ALLTRIM(m.caddress1a)>></Address1>
		        <Address2><<ALLTRIM(m.caddress1b)>></Address2>
		        <City><<ALLTRIM(m.ccity1)>></City>
		        <State><<m.cstate1>></State>
		        <ZIPCode><<ALLTRIM(m.czip1)>></ZIPCode>
		        <Phone><<ALLTRIM(m.cPhonew)>></Phone>
		        <Fax />
		        <TaxRegNumber />
		        <Checks>
		          <Check>
		   ENDTEXT
		
		   lcOwnProp = ''
		      
		   SELECT chks
		   SCAN FOR cid == lcid
		      SCATTER MEMVAR
		      
		      m.cCheckNo = thisform.FormatText(ALLTRIM(m.cCheckNo))
		      
		      IF 'DIRDEP' $ m.cCheckNo
		         m.cCheckNo = 'DD' + PADL(TRANSFORM(lnChkNo),6,'0')
		         lnChkNo = lnChkNo + 1 
		      ENDIF 
		      
		      lcDate = DTOC(goendmonth(m.dCheckDate,0,.T.))
		      lcDate = RIGHT(lcDate,4) + '-' + LEFT(lcDate,2) + '-' + SUBSTR(lcDate,4,2)
		      
		      lcOwners = lcOwners + CHR(13) + ;
		         '<CheckNumber>' + ALLTRIM(m.cCheckNo) + '</CheckNumber>' + CHR(13) + ;
		         '<CheckDate>'   + lcDate  + '</CheckDate>' + CHR(13) + ;
		         '<CheckAmount>' + TRANSFORM(m.nCheckTotal) + '</CheckAmount>' + CHR(13) + ;
		         '<AccountingPeriod>' + lcDate + '</AccountingPeriod>' + CHR(13) + ;
		         '<CheckProperties>'  + CHR(13)
		
		      SELECT ownerprops
		      SCAN FOR cid == m.cid
		         SCATTER MEMVAR
		         
		         lcWellID = m.cWellID
		         m.cWellID    = thisform.FormatText(m.cWellID)
		         
		         lcOwnProp = lcOwnProp + '<CheckProperty>' + CHR(13) + ;
		            '<PropertyCode>' + ALLTRIM(m.cwellid) + '</PropertyCode>' + CHR(13) + "<Details>" + CHR(13) 
		         
		         SELECT stub
		         SCAN FOR cid == m.cid AND cwellid == lcwellid
		            SCATTER MEMVAR
		            DO CASE
		               CASE m.cIncType = 'O'
		                  lcProdCode = 'BBL'
		                  lcProdDesc = 'Oil Revenue'
		                  lcPropVol  = ALLT(TRANSFORM(ROUND(m.nunits,2),'999999999.99'))
		                  lcOwnVol   = ALLT(TRANSFORM(ROUND(m.nInterest/100 * m.nunits,2),'999999999.99'))
		               CASE m.cIncType = 'G'
		                  lcProdCode = 'MCF'
		                  lcProdDesc = 'Gas Revenue'
		                  lcPropVol  = ALLT(TRANSFORM(ROUND(m.nunits,2),'999999999.99'))
		                  lcOwnVol   = ALLT(TRANSFORM(ROUND(m.nInterest/100 * m.nunits,2),'999999999.99'))
		               CASE m.cIncType = 'T'
		                  lcProdCode = 'ST'
		                  lcProdDesc = 'State WH'
		                  lcPropVol = ALLT(TRANSFORM(ROUND(m.nunits,2),'999999999.99'))
		                  lcOwnVol  = ''
		               CASE m.cIncType = 'B'
		                  lcProdCode = 'FED'
		                  lcProdDesc = 'Backup WH'
		                  lcPropVol = ALLT(TRANSFORM(ROUND(m.nunits,2),'999999999.99'))
		                  lcOwnVol  = ALLT(TRANSFORM(ROUND(m.nInterest/100 * m.nunits,2),'999999999.99'))
		               CASE m.cIncType = 'P'
		                  lcProdCode = 'OTH'
		                  lcProdDesc = 'Other Revenue'
		                  lcPropVol = ALLT(TRANSFORM(ROUND(m.nunits,2),'999999999.99'))
		                  lcOwnVol  = ALLT(TRANSFORM(ROUND(m.nInterest/100 * m.nunits,2),'999999999.99'))
		               CASE m.cIncType = '1' OR m.cIncType = '2'
		                  lcProdCode = 'MISC'
		                  lcProdDesc = 'Misc Revenue'
		                  lcPropVol = ALLT(TRANSFORM(ROUND(m.nunits,2),'999999999.99'))
		                  lcOwnVol  = ALLT(TRANSFORM(ROUND(m.nInterest/100 * m.nunits,2),'999999999.99'))
		               CASE m.cIncType = 'E'
		                  lcProdCode = 'DED'
		                  lcProdDesc = 'Deductions'
		                  lcPropVol = ALLT(TRANSFORM(ROUND(m.nunits,2),'999999999.99'))
		                  lcOwnVol  = ALLT(TRANSFORM(ROUND(m.nInterest/100 * m.nunits,2),'999999999.99'))
		               CASE m.cIncType = 'F'
		                  lcProdCode = 'FLAT'
		                  lcProdDesc = 'Flat Rate Royalty'
		                  lcPropVol = ALLT(TRANSFORM(ROUND(m.nunits,2),'999999999.99'))
		                  lcOwnVol  = ALLT(TRANSFORM(ROUND(m.nInterest/100 * m.nunits,2),'999999999.99'))
		               CASE m.cIncType = '$'
		                  lcProdCode = 'PMT'
		                  lcProdDesc = 'Pmt Received'
		                  lcPropVol = ALLT(TRANSFORM(ROUND(m.nunits,2),'999999999.99'))
		                  lcOwnVol  = ALLT(TRANSFORM(ROUND(m.nInterest/100 * m.nunits,2),'999999999.99'))
		               CASE m.cIncType = 'M'
		                  lcProdCode = 'MISC'
		                  lcProdDesc = 'Misc Rev/Ded'
		                  lcPropVol = ALLT(TRANSFORM(ROUND(m.nunits,2),'999999999.99'))
		                  lcOwnVol  = ALLT(TRANSFORM(ROUND(m.nInterest/100 * m.nunits,2),'999999999.99'))
		               OTHERWISE
		                  lcProdCode = 'U'
		                  lcProdDesc = 'Unknown'
		                  lcPropVol = ALLT(TRANSFORM(ROUND(m.nunits,2),'999999999.99'))
		                  lcOwnVol  = ALLT(TRANSFORM(ROUND(m.nInterest/100 * m.nunits,2),'999999999.99'))
		            ENDCASE
		
		            DO CASE
		               CASE m.cIntType = 'L' OR m.cIntType = 'R'
		                  lcIntDesc = 'Royalty'
		               CASE m.cIntType = 'O'
		                  lcIntDesc = 'Override'
		               CASE m.cIntType = 'W'
		                  lcIntDesc = 'Work Int'
		               OTHERWISE
		                  lcIntDesc = 'Work Int'
		            ENDCASE
		
		            IF EMPTY(LEFT(m.cProdPrd,2)) 
		               lcProdDate = lcDate
		            ELSE 
		               lcProdDate = '20' + RIGHT(m.cProdprd,2) + '-' + LEFT(m.cProdprd,2) + '-01'
		            ENDIF    
		
		            TEXT TO lcStub ADDITIVE TEXTMERGE NOSHOW PRETEXT 3 
		              <Detail>
		              <DateCreated><<lcDate>></DateCreated>
		              <CurrencyCode>USD</CurrencyCode>
		              <ProductCode><<lcProdCode>></ProductCode>
		              <ProductCodeDesc><<lcProdDesc>></ProductCodeDesc>
		              <TransactionCodeInterestType><<m.cIntType>></TransactionCodeInterestType>
		              <TransactionCodeInterestTypeDesc><<lcIntDesc>></TransactionCodeInterestTypeDesc>
		              <ProductionPeriodDate><<lcProdDate>></ProductionPeriodDate>
		              <PropertyVolume><<lcPropVol>></PropertyVolume>
		              <Price><<ALLTRIM(TRANSFORM(ROUND(m.nPrice,2),'99999.99'))>></Price>
		              <PropertyValue><<ALLT(TRANSFORM(m.nTotalInc,'999999999.99'))>></PropertyValue>
		              <OwnerPercent><<ALLTRIM(TRANSFORM(m.nInterest,'999.999999999'))>></OwnerPercent>
		              <DistributionPercent><<ALLTRIM(TRANSFORM(m.nInterest,'999.999999999'))>></DistributionPercent>
		              <OwnerVolume><<lcOwnVol>></OwnerVolume>
		              <OwnerValue><<ALLTRIM(TRANSFORM(m.nIncome,'999999999.99'))>></OwnerValue>
		           </Detail>
		            ENDTEXT
		            
		            IF m.nowntax <> 0
		               m.nOwnTax = m.nOwnTax * -1
		               TEXT TO lcStub ADDITIVE NOSHOW TEXTMERGE PRETEXT 3
		                 <Detail>
		                    <DateCreated><<lcDate>></DateCreated>
		                    <CurrencyCode>USD</CurrencyCode>
		                    <ProductCode>TAX</ProductCode>
		                    <ProductCodeDesc>Sev Prod Taxes</ProductCodeDesc>
		                    <TransactionCodeInterestType><<m.cIntType>></TransactionCodeInterestType>
		                    <TransactionCodeInterestTypeDesc><<lcIntDesc>></TransactionCodeInterestTypeDesc>
		                    <ProductionPeriodDate><<lcProdDate>></ProductionPeriodDate>
		                    <PropertyVolume>0.00</PropertyVolume>
		                    <Price>0.00</Price>
		                    <PropertyValue><<ALLTRIM(TRANSFORM(m.ntaxes,'999999999.99'))>></PropertyValue>
		                    <OwnerPercent><<ALLTRIM(TRANSFORM(m.nInterest,'999.999999999'))>></OwnerPercent>
		                    <DistributionPercent><<ALLTRIM(TRANSFORM(m.nInterest,'999.999999999'))>></DistributionPercent>
		                    <OwnerVolume>0.00</OwnerVolume>
		                    <OwnerValue><<ALLTRIM(TRANSFORM(m.nowntax,'999999999.99'))>></OwnerValue>
		                 </Detail>
		               ENDTEXT
		            ENDIF
		            IF m.nexpense <> 0
		               m.nExpense = m.nExpense * -1
		               TEXT TO lcStub ADDITIVE NOSHOW TEXTMERGE PRETEXT 3
		                 <Detail>
		                    <DateCreated><<lcDate>></DateCreated>
		                    <CurrencyCode>USD</CurrencyCode>
		                    <ProductCode>DED</ProductCode>
		                    <ProductCodeDesc>Deductions</ProductCodeDesc>
		                    <TransactionCodeInterestType><<m.cIntType>></TransactionCodeInterestType>
		                    <TransactionCodeInterestTypeDesc><<lcIntDesc>></TransactionCodeInterestTypeDesc>
		                    <ProductionPeriodDate><<lcProdDate>></ProductionPeriodDate>
		                    <PropertyVolume>0.00</PropertyVolume>
		                    <Price>0.00</Price>
		                    <PropertyValue><<ALLTRIM(TRANSFORM(m.nexpense/(m.ninterest/100),'999999999.99'))>></PropertyValue>
		                    <OwnerPercent><<ALLTRIM(TRANSFORM(m.nInterest,'999.999999999'))>></OwnerPercent>
		                    <DistributionPercent><<ALLTRIM(TRANSFORM(m.nInterest,'999.999999999'))>></DistributionPercent>
		                    <OwnerVolume>0.00</OwnerVolume>
		                    <OwnerValue><<ALLTRIM(TRANSFORM(m.nexpense,'999999999.99'))>></OwnerValue>
		                 </Detail>
		               ENDTEXT
		            ENDIF
		         ENDSCAN &&Stub
		         lcOwnProp = lcOwnProp + lcStub + CHR(13) + '</Details>' + CHR(13) + '</CheckProperty>' 
		         lcStub = ''
		      ENDSCAN &&OwnProps
		      lcOwnProp = lcOwnProp + CHR(13) + '</CheckProperties>'
		      lcOwners = lcOwners + lcOwnProp + CHR(13) + '</Check>' + CHR(13) + '</Checks>' + CHR(13) + '</Owner>' + CHR(13)
		      lcStub = ''
		      lcOwnProp = ''
		   ENDSCAN &&Chks
		   lcXML = lcXML + lcOwners
		   lnOwners = lnOwners + 1 
		ENDSCAN &&Owners
		
		lcXML = lcXML + '</Owners>' + CHR(13) + '</RevenueData>'
		SET SAFETY OFF 
		lcFilename = thisform.cntgetfile1.edtPath.Value 
		STRTOFILE(lcXML, lcFileName)
		MESSAGEBOX('Created an Energylink File with Check Info for ' + ALLTRIM(TRANSFORM(lnOwners,'999,999')) + ' Owners.',64,'EnergyLink Export')
		
		
		 
	ENDPROC

	PROCEDURE cmdExit.Click
		thisform.Release()
		
	ENDPROC

	PROCEDURE cmdProcess.Click
		thisform.Process()
	ENDPROC

	PROCEDURE Cntgetfile1.cmdPath.Click
		LOCAL llReturn, loError
		llReturn = .T.
		#INCLUDE vfp2c.h
		
		TRY
		    IF NOT DIRECTORY(THISFORM.cntgetfile1.edtpath.VALUE)
		        THISFORM.cntgetfile1.edtpath.VALUE = ''
		    ENDIF
		
		    LOCAL cPath
		    IF THIS.PARENT.lPathOnly
		
		        IF NOT FILE(m.goapp.cCommonFolder+'bin\vfp2c32.fll')
		            llReturn = GetVFPc32()
		        ENDIF
		
		        IF llReturn
		            SET LIBRARY TO (m.goapp.cCommonFolder + 'bin\vfp2c32.fll') ADDITIVE
		            INITVFP2C32(VFP2C_INIT_ALL)
		
		            LOCAL lcFolder
		
		            SHBROWSEFOLDER('Choose a Folder', BIF_NEWDIALOGSTYLE, @cPath)
		        ELSE
		            m.cPath = GETDIR(CURDIR(), 'Choose the location for the EnergyLink file', 'Choose File Location', 64)
		        ENDIF
		    ELSE
		        m.cPath = GETFILE(THIS.PARENT.cExtensionList)
		    ENDIF
		    IF NOT EMPTY(m.cPath)
		        THIS.PARENT.SetValue(m.cPath)
		    ENDIF
		
		CATCH TO loError
		    llReturn = .F.
		    DO errorlog WITH 'cmdPath.click', loError.LINENO, 'Ten99Mag', loError.ERRORNO, loError.MESSAGE
		    MESSAGEBOX('Unable to choose the file location at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		          'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		RETURN llReturn
		
		
		
		
		
		
	ENDPROC

	PROCEDURE Runcombo1.Init
		IF DODEFAULT()
		   this.listitemid = 1
		ENDIF   
	ENDPROC

	PROCEDURE Runcombo1.InteractiveChange
		IF DODEFAULT()
		   tcTypeClose  = THISFORM.runcombo1.LISTITEM[thisform.runcombo1.listitemid, 6]
		
		   lcDate = THISFORM.runcombo1.LISTITEM[thisform.runcombo1.listitemid, 7]
		   lcYear = RIGHT(lcDate,4)
		   lcMonth = THISFORM.GetMonth(LEFT(lcDate,2))
		   lcTypeClose = THISFORM.runcombo1.LISTITEM[thisform.runcombo1.listitemid, 6]
		
		
		
		   IF tcTypeClose = 'J'
		      THISFORM.cntgetfile1.edtpath.VALUE = specialfolders('CommonDocuments')+'EnergyLink_JIB_' + lcMonth + lcYear + '.csv'
		      THISFORM.cntgetfile1.cdefaultextension = 'CSV'
		      THISFORM.cntgetfile1.cextensionlist = 'CSV'
		   ELSE
		      THISFORM.cntgetfile1.edtpath.VALUE = specialfolders('CommonDocuments')+'EnergyLink_REV_' + lcMonth + lcYear + '.xml'
		      THISFORM.cntgetfile1.cdefaultextension = 'XML'
		      THISFORM.cntgetfile1.cextensionlist = 'XML'
		   ENDIF
		ENDIF
		
	ENDPROC

	PROCEDURE Runcombo1.LostFocus
		IF DODEFAULT()
		   tcTypeClose  = THISFORM.runcombo1.LISTITEM[thisform.runcombo1.listitemid, 6]
		
		   lcDate = THISFORM.runcombo1.LISTITEM[thisform.runcombo1.listitemid, 7]
		   lcYear = RIGHT(lcDate,4)
		   lcMonth = THISFORM.GetMonth(LEFT(lcDate,2))
		   lcTypeClose = THISFORM.runcombo1.LISTITEM[thisform.runcombo1.listitemid, 6]
		
		
		
		   IF tcTypeClose = 'J'
		      THISFORM.cntgetfile1.edtpath.VALUE = specialfolders('CommonDocuments')+'EnergyLink_JIB_' + lcMonth + lcYear + '.csv'
		      THISFORM.cntgetfile1.cdefaultextension = 'CSV'
		      THISFORM.cntgetfile1.cextensionlist = 'CSV'
		   ELSE
		      THISFORM.cntgetfile1.edtpath.VALUE = specialfolders('CommonDocuments')+'EnergyLink_REV_' + lcMonth + lcYear + '.xml'
		      THISFORM.cntgetfile1.cdefaultextension = 'XML'
		      THISFORM.cntgetfile1.cextensionlist = 'XML'
		   ENDIF
		ENDIF
		
	ENDPROC

	PROCEDURE Swrptlook1.Swlookupbutton1.Click
		LOCAL lcList
		PRIV llOK
		
		llOK = .F.
		lcList = 'cownerid,csortfield'
		
		DO FORM ..\custom\picklist WITH 'Investor', lcList, thisform.swrptlook1.txtbegid.value, 2
		
		IF llOK
		   thisform.swrptlook1.txtBegId.value = cOwnerID
		   thisform.swrptlook1.txtBegName.value = cSortField
		   thisform.swrptlook1.txtBegId.refresh()
		   thisform.swrptlook1.txtBegName.refresh()
		ENDIF   
		
		thisform.setnextcontrol(thisform.swrptlook1.txtBegId)
		
	ENDPROC

	PROCEDURE Swrptlook1.Swlookupbutton2.Click
		LOCAL lcList
		PRIV llOK
		
		llOK = .F.
		lcList = 'cownerid,csortfield'
		
		DO FORM ..\custom\picklist WITH 'Investor', lcList, thisform.swrptlook1.txtendid.value, 2
		
		IF llOK
		   thisform.swrptlook1.txtEndId.value = cOwnerID
		   thisform.swrptlook1.txtEndName.value = cSortField
		   thisform.swrptlook1.txtEndId.refresh()
		   thisform.swrptlook1.txtEndName.refresh()
		ENDIF   
		
		thisform.setnextcontrol(thisform.swrptlook1.txtEndId)
		
	ENDPROC

ENDDEFINE
