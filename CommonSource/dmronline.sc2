*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="dmronline.scx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
#INCLUDE "..\source\appdefs.h"

DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="2" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Cursor1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor7" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor8" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor9" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor10" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor11" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor12" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor13" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor14" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor15" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor16" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor6" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor19" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor20" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor21" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor17" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor18" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor22" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor23" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor24" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor25" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor26" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor27" UniqueID="" Timestamp="" />

	AutoOpenTables = .F.
	DataSource = .NULL.
	Height = 827
	Left = -1
	Name = "Dataenvironment"
	Top = -2
	Width = 1060

	ADD OBJECT 'Cursor1' AS cursor WITH ;
		Alias = "groups", ;
		CursorSource = "groups", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 11, ;
		Name = "Cursor1", ;
		Top = 7, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor10' AS cursor WITH ;
		Alias = "sevtax", ;
		CursorSource = "sevtax", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor10", ;
		Top = 380, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor11' AS cursor WITH ;
		Alias = "susaudit", ;
		CursorSource = "susaudit", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 150, ;
		Name = "Cursor11", ;
		Top = 380, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor12' AS cursor WITH ;
		Alias = "sysctl", ;
		CursorSource = "sysctl", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 290, ;
		Name = "Cursor12", ;
		Top = 380, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor13' AS cursor WITH ;
		Alias = "vendor", ;
		CursorSource = "vendor", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor13", ;
		Top = 500, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor14' AS cursor WITH ;
		Alias = "wellhist", ;
		CursorSource = "wellhist", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 150, ;
		Name = "Cursor14", ;
		Top = 500, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor15' AS cursor WITH ;
		Alias = "wellinv", ;
		CursorSource = "wellinv", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 290, ;
		Name = "Cursor15", ;
		Top = 500, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor16' AS cursor WITH ;
		Alias = "wells", ;
		CursorSource = "wells", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Filter = "lcompressor = .f.", ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor16", ;
		Top = 620, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor17' AS cursor WITH ;
		Alias = "taxcodes", ;
		CursorSource = "taxcodes", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 861, ;
		Name = "Cursor17", ;
		Top = 20, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor18' AS cursor WITH ;
		Alias = "glopt", ;
		CursorSource = "glopt", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 850, ;
		Name = "Cursor18", ;
		Top = 260, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor19' AS cursor WITH ;
		Alias = "appurchd", ;
		CursorSource = "appurchd", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 290, ;
		Name = "Cursor19", ;
		Top = 138, ;
		Width = 91
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor2' AS cursor WITH ;
		Alias = "investor", ;
		CursorSource = "investor", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 149, ;
		Name = "Cursor2", ;
		Top = 20, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor20' AS cursor WITH ;
		Alias = "roundtmp", ;
		CursorSource = "roundtmp", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 710, ;
		Name = "Cursor20", ;
		Top = 260, ;
		Width = 91
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor21' AS cursor WITH ;
		Alias = "revcat", ;
		CursorSource = "revcat", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 150, ;
		Name = "Cursor21", ;
		Top = 622, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor22' AS cursor WITH ;
		Alias = "invhdr", ;
		CursorSource = "invhdr", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 604, ;
		Name = "Cursor22", ;
		Top = 45, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor23' AS cursor WITH ;
		Alias = "invdet", ;
		CursorSource = "invdet", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 537, ;
		Name = "Cursor23", ;
		Top = 196, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor24' AS cursor WITH ;
		Alias = "terms", ;
		CursorSource = "terms", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 440, ;
		Name = "Cursor24", ;
		Top = 20, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor25' AS cursor WITH ;
		Alias = "arpmthdr", ;
		CursorSource = "arpmthdr", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 760, ;
		Name = "Cursor25", ;
		Top = 109, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor26' AS cursor WITH ;
		Alias = "arpmtdet", ;
		CursorSource = "arpmtdet", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 874, ;
		Name = "Cursor26", ;
		Top = 150, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor27' AS cursor WITH ;
		Alias = "tax1099det", ;
		CursorSource = "tax1099det", ;
		Database = ..\newdbc\appdata.dbc, ;
		Height = 90, ;
		Left = 485, ;
		Name = "Cursor27", ;
		Top = 550, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor3' AS cursor WITH ;
		Alias = "disbhist", ;
		CursorSource = "disbhist", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 290, ;
		Name = "Cursor3", ;
		Top = 20, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor4' AS cursor WITH ;
		Alias = "expense", ;
		CursorSource = "expense", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor4", ;
		Top = 140, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor5' AS cursor WITH ;
		Alias = "expcat", ;
		CursorSource = "expcat", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 150, ;
		Name = "Cursor5", ;
		Top = 140, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor6' AS cursor WITH ;
		Alias = "options", ;
		BufferModeOverride = 3, ;
		CursorSource = "options", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 429, ;
		Name = "Cursor6", ;
		Top = 379, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor7' AS cursor WITH ;
		Alias = "income", ;
		CursorSource = "income", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor7", ;
		Top = 260, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor8' AS cursor WITH ;
		Alias = "programs", ;
		CursorSource = "programs", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 150, ;
		Name = "Cursor8", ;
		Top = 260, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor9' AS cursor WITH ;
		Alias = "revsrc", ;
		CursorSource = "revsrc", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 291, ;
		Name = "Cursor9", ;
		Top = 259, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

ENDDEFINE

DEFINE CLASS formdmonline AS frmformcustom OF "..\custom\cforms.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="pages" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pages.Page1.Swrptlook1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pages.Page1.LblEndID" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pages.Page1.chkFlatRate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pages.Page1.LblBegID" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pages.Page1.Runcombo1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pages.Page1.Lbllabelcustom1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pages.Page1.cmdProcess" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pages.Page1.cmdExit" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pages.Page1.chkUpOwnStmt" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pages.Page1.chkUpOwnStub" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pages.Page1.chkUpOwnJIB" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pages.Page1.chk1099s" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pages.Page1.chkOwnerRec" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pages.Page1.Runcombo2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pages.Page1.Lbllabelcustom3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pages.Page1.Lbllabelcustom2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pages.Page1.chkUsers" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pages.Page1.chkReportDefs" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pages.Page1.txtcYear" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pages.Page1.chkOnlyDirectDep" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pages.Page1.chkSendEmail" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pages.Page1.chkOnlyUpload" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pages.Page1.Shpshapecustom1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pages.Page1.Shpshapecustom2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pages.Page1.Shpshapecustom3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pages.Page1.Shpshapecustom4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pages.Page1.Shpshapecustom5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pages.Page1.Shpshapecustom6" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pages.Page1.Shpshapecustom7" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pages.Page1.chkEmailOnly" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pages.Page1.Lbllabelcustom4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pages.Page1.Lbllabelcustom5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pages.Page1.Lbllabelcustom6" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pages.Page1.Lbllabelcustom7" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pages.Page1.chkSelected" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pages.Page1.lblSelected" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pages.Page2.Lbllabelcustom1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pages.Page2.Lbllabelcustom2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pages.Page2.Lbllabelcustom4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pages.Page2.cmdSave" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pages.Page2.cmdExit" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pages.Page2.Lbllabelcustom6" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pages.Page2.Lbllabelcustom7" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pages.Page2.Lbllabelcustom8" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pages.Page2.chkUseFTP" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pages.Page2.chkUseLocal" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pages.Page2.Cntgetfile1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pages.Page2.Lbllabelcustom9" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pages.Page2.Lbllabelcustom10" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pages.Page2.Lbllabelcustom11" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pages.Page2.txtSiteName" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pages.Page2.txtEmailPass" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pages.Page2.txtEmailUser" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pages.Page2.txtPort" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pages.Page2.txtMailAddress" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pages.Page2.txtMailServer" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pages.Page2.txtPassword" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pages.Page2.txtUsername" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pages.Page2.Lbllabelcustom3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pages.Page2.txtSMTPPort" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pages.Page2.chkUseTLS" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pages.Page2.Cmdcommandbuttoncustom1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pages.Page2.lblTest" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pages.Page2.lblEmailPrefs" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pages.Page3.edtemailtxt" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pages.Page3.Lbllabelcustom1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pages.Page3.cmdSave" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pages.Page3.cmdExit" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pages.Page3.Lbllabelcustom2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pages.Page3.txtSubject" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Swencrypt" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: addemail
		*m: backtaxwith		&& Process backup and tax withholding
		*m: buildstmt
		*m: calccompress		&& Process Compression/Gathering Charges
		*m: calcexpense		&& Does expense calculations
		*m: calcincome		&& Does income calculations
		*m: calctaxes		&& Does tax calculations
		*m: copyreports
		*m: createpdf		&& Calls XFRX to create the PDF file
		*m: createtempfile
		*m: deficits_own		&& Process deficits when netting all wells together for an owner.
		*m: deficits_well		&& Process well deficits when not netting wells together.
		*m: flatowner		&& Processes revenue for flat owners.
		*m: formatownerid
		*m: ftpconnect
		*m: ftpupload
		*m: getformats
		*m: getprevmins		&& Get previous minimums
		*m: getrange		&& Gets the oil and gas period ranges.
		*m: initpdf
		*m: intonhold		&& Process released interest on holds.
		*m: netbalance		&& Print net balance this period.
		*m: netwelltotalnosplit		&& Prints the well net total line if production periods are not split into their own sections.
		*m: netwelltotalsplit		&& Processes the net well total
		*m: opdf_access
		*m: ownerjibs
		*m: ownerstmts
		*m: ownerstubs
		*m: prevmins		&& Brings in Previous Minimums
		*m: printing_error		&& This gets called when there's a problem with the PDF printer driver.  Does a messagebox to let the user know.
		*m: process
		*m: pulltype		&& Remove owner types not being reported.
		*m: rounding		&& Reports rounding
		*m: saveconfig
		*m: sendemail
		*m: stmtnotes		&& Brings in any statement notes.
		*m: ten99
		*m: ten99rec
		*m: togglepassiveftp
		*m: users		&& Build temp usersx file to upload to website.
		*p: activationcode
		*p: calias
		*p: cdmbatch		&& DM Batch Code
		*p: cfilename
		*p: cgroup
		*p: cowner1
		*p: cowner2
		*p: cownerid		&& Current Owner we're working with
		*p: cperiod
		*p: cprogcode
		*p: creportname
		*p: crunyear
		*p: cselectcriteria
		*p: csortorder
		*p: ctempfile
		*p: ctitle1
		*p: ctitle2
		*p: ctypeint
		*p: ctypeinv
		*p: cwell1
		*p: cwell2
		*p: cwellid
		*p: cyear
		*p: czipfile		&& Name of the zip file owner statements are saved in.
		*p: dacctdate
		*p: gastax1
		*p: gastax2
		*p: gastax3
		*p: gastax4
		*p: lallminsreleased
		*p: lbelowminimum
		*p: lcanceled
		*p: lclosed
		*p: lcloserun
		*p: lconnected		&& Connected to FTP Server?
		*p: lerror
		*p: lerrorfound
		*p: lexemptroyalty
		*p: licensedto
		*p: lnetwells		&& .T. = net wells together in this group
		*p: lowneronhold
		*p: lownertaxexempt		&& Owner is tax exempt
		*p: lpdfinit
		*p: lroyaltyowner		&& Owner is a royalty owner
		*p: lsplitperiods
		*p: ltempfile
		*p: luseemailprefs
		*p: nbackupwith		&& Backup Withholding
		*p: nbalance
		*p: ncompress
		*p: nfilestoupload		&& Number of files being uploaded
		*p: ngasamount
		*p: ngasrevenue
		*p: ngastax1
		*p: ngastax2
		*p: ngastax3
		*p: ngastax4
		*p: ngather
		*p: noilamount
		*p: noilrevenue
		*p: noiltax1
		*p: noiltax2
		*p: noiltax3
		*p: noiltax4
		*p: notheramount
		*p: nothtax1
		*p: nothtax2
		*p: nothtax3
		*p: nothtax4
		*p: nownertotal
		*p: nprogress
		*p: nrunno
		*p: ntaxwith		&& Tax Withholding
		*p: ntotalbbl
		*p: ntotalmcf
		*p: ntotalother
		*p: ntotinc		&& Total Income Variable
		*p: ntotnet
		*p: nusercount
		*p: nwellnet
		*p: nwelltot
		*p: nworkint
		*p: odist		&& DistProc object
		*p: oiltax1
		*p: oiltax2
		*p: oiltax3
		*p: oiltax4
		*p: oinvtmp		&& Invtmp object
		*p: ooptions
		*p: opdf
		*p: oprogress
		*p: othtax1
		*p: othtax2
		*p: othtax3
		*p: othtax4
		*p: owellwork		&& Wellwork object
		*p: ownergroup
		*p: _memberdata		&& XML Metadata for customizable properties
	*</DefinedPropArrayMethod>

	calias = 
	Caption = "Upload Reports to Online Reporting"
	cowner2 = 
	cownerid = 		&& Current Owner we're working with
	cperiod = 
	ctypeint = 
	ctypeinv = 
	cwell1 = 
	cwell2 = 
	cwellid = 
	cyear = 
	czipfile = .F.		&& Name of the zip file owner statements are saved in.
	dacctdate = {}
	DataSession = 2
	DoCreate = .T.
	Height = 559
	lerrorfound = .F.
	luseemailprefs = .F.
	Name = "formdmonline"
	nfilestoupload = 0		&& Number of files being uploaded
	nprogress = 0
	nusercount = 0
	oprogress = .NULL.
	Width = 567
	WindowState = 0
	_memberdata = <VFPData>
		<memberdata name="createpdf" display="CreatePDF"/>
		<memberdata name="calias" display="cAlias"/>
		<memberdata name="czipfile" display="cZipFile"/>
		<memberdata name="nfilestoupload" display="nFilesToUpload"/>
		<memberdata name="lconnected" display="lConnected"/>
		<memberdata name="oprogress" display="oProgress"/>
		<memberdata name="nprogress" display="nProgress"/>
		<memberdata name="nusercount" display="nUserCount"/>
		<memberdata name="formatownerid" display="FormatOwnerID"/>
		<memberdata name="luseemailprefs" display="lUseEmailPrefs"/>
		</VFPData>		&& XML Metadata for customizable properties
	Mwresize1.lblHighLight.Name = "lblHighLight"
	Mwresize1.lblShading.Name = "lblShading"
	Mwresize1.Left = 564
	Mwresize1.Name = "Mwresize1"
	Mwresize1.Top = 36

	ADD OBJECT 'pages' AS pgfpageframecustom WITH ;
		ErasePage = .T., ;
		Height = 541, ;
		Left = 8, ;
		Name = "pages", ;
		PageCount = 3, ;
		Top = 11, ;
		Width = 552, ;
		ZOrderSet = 0, ;
		Page1.Caption = "Generate Reports", ;
		Page1.Name = "Page1", ;
		Page2.Caption = "Site Configuration", ;
		Page2.Name = "Page2", ;
		Page3.Caption = "Email Template", ;
		Page3.Name = "Page3"
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="pageframe" />

	ADD OBJECT 'pages.Page1.chk1099s' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Upload 1099s", ;
		Left = 43, ;
		Name = "chk1099s", ;
		TabIndex = 14, ;
		Top = 312, ;
		Value = .F., ;
		ZOrderSet = 13
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'pages.Page1.chkEmailOnly' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Only Send Email (No Uploads)", ;
		Left = 44, ;
		Name = "chkEmailOnly", ;
		TabIndex = 19, ;
		Top = 389, ;
		Value = .F.
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'pages.Page1.chkFlatRate' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Upload Flat Rate Royalty Statements", ;
		Height = 16, ;
		Left = 299, ;
		Name = "chkFlatRate", ;
		TabIndex = 11, ;
		Top = 223, ;
		Value = .F., ;
		Width = 192, ;
		ZOrderSet = 5
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'pages.Page1.chkOnlyDirectDep' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Only Send Email to Direct Deposit Owners", ;
		Left = 44, ;
		Name = "chkOnlyDirectDep", ;
		TabIndex = 18, ;
		Top = 367, ;
		Value = .F.
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'pages.Page1.chkOnlyUpload' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Only Upload Reports for Owners Marked to Use Online Reporting", ;
		Left = 108, ;
		Name = "chkOnlyUpload", ;
		TabIndex = 22, ;
		Top = 411, ;
		Value = .F.
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'pages.Page1.chkOwnerRec' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Upload Owner 1099 Reconciliations", ;
		Left = 164, ;
		Name = "chkOwnerRec", ;
		TabIndex = 15, ;
		Top = 312, ;
		Value = .F., ;
		ZOrderSet = 13
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'pages.Page1.chkReportDefs' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Only Send Report Definitions", ;
		Left = 299, ;
		Name = "chkReportDefs", ;
		TabIndex = 20, ;
		Top = 346, ;
		Value = .F.
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'pages.Page1.chkSelected' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Choose Selected Owners", ;
		Left = 197, ;
		Name = "chkSelected", ;
		TabIndex = 1, ;
		Top = 24, ;
		Value = .F.
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'pages.Page1.chkSendEmail' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Send Email to Owners", ;
		Left = 44, ;
		Name = "chkSendEmail", ;
		TabIndex = 17, ;
		Top = 346, ;
		Value = .F.
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'pages.Page1.chkUpOwnJIB' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Upload Owner JIB Statements", ;
		Left = 44, ;
		Name = "chkUpOwnJIB", ;
		TabIndex = 12, ;
		Top = 270, ;
		Value = .F., ;
		ZOrderSet = 13
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'pages.Page1.chkUpOwnStmt' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Upload Owner Distribution Statements", ;
		Left = 44, ;
		Name = "chkUpOwnStmt", ;
		TabIndex = 9, ;
		Top = 203, ;
		Value = .F., ;
		ZOrderSet = 11
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'pages.Page1.chkUpOwnStub' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Upload Owner Stub Statements", ;
		Left = 44, ;
		Name = "chkUpOwnStub", ;
		TabIndex = 10, ;
		Top = 223, ;
		Value = .F., ;
		ZOrderSet = 12
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'pages.Page1.chkUsers' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Create User Records", ;
		Left = 299, ;
		Name = "chkUsers", ;
		TabIndex = 21, ;
		Top = 367, ;
		Value = .F.
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'pages.Page1.cmdExit' AS cmdcommandbuttoncustom WITH ;
		Caption = "E\<xit", ;
		Height = 36, ;
		Left = 286, ;
		Name = "cmdExit", ;
		TabIndex = 24, ;
		Top = 446, ;
		Width = 72, ;
		ZOrderSet = 10
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'pages.Page1.cmdProcess' AS cmdcommandbuttoncustom WITH ;
		Caption = "\<Process", ;
		Height = 36, ;
		Left = 190, ;
		Name = "cmdProcess", ;
		TabIndex = 23, ;
		Top = 446, ;
		Width = 72, ;
		ZOrderSet = 9
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'pages.Page1.LblBegID' AS lbllabelcustom WITH ;
		Caption = "First Owner:", ;
		Height = 16, ;
		Left = 126, ;
		Name = "LblBegID", ;
		TabIndex = 3, ;
		Top = 52, ;
		Width = 63, ;
		ZOrderSet = 6
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'pages.Page1.LblEndID' AS lbllabelcustom WITH ;
		Caption = "Last Owner:", ;
		Height = 16, ;
		Left = 126, ;
		Name = "LblEndID", ;
		TabIndex = 4, ;
		Top = 103, ;
		Width = 63, ;
		ZOrderSet = 4
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'pages.Page1.Lbllabelcustom1' AS lbllabelcustom WITH ;
		Caption = "Run No", ;
		Left = 71, ;
		Name = "Lbllabelcustom1", ;
		TabIndex = 7, ;
		Top = 171, ;
		ZOrderSet = 8
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'pages.Page1.Lbllabelcustom2' AS lbllabelcustom WITH ;
		Caption = "Run No", ;
		Left = 217, ;
		Name = "Lbllabelcustom2", ;
		TabIndex = 5, ;
		Top = 270, ;
		ZOrderSet = 15
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'pages.Page1.Lbllabelcustom3' AS lbllabelcustom WITH ;
		Caption = "Year", ;
		Left = 412, ;
		Name = "Lbllabelcustom3", ;
		TabIndex = 8, ;
		Top = 312, ;
		ZOrderSet = 15
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'pages.Page1.Lbllabelcustom4' AS lbllabelcustom WITH ;
		BackStyle = 1, ;
		Caption = "Revenue Distribution Statements", ;
		Left = 18, ;
		Name = "Lbllabelcustom4", ;
		TabIndex = 25, ;
		Top = 147
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'pages.Page1.Lbllabelcustom5' AS lbllabelcustom WITH ;
		BackStyle = 1, ;
		Caption = "JIB Statements", ;
		Left = 18, ;
		Name = "Lbllabelcustom5", ;
		TabIndex = 26, ;
		Top = 245
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'pages.Page1.Lbllabelcustom6' AS lbllabelcustom WITH ;
		BackStyle = 1, ;
		Caption = "1099s", ;
		Left = 18, ;
		Name = "Lbllabelcustom6", ;
		TabIndex = 27, ;
		Top = 295
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'pages.Page1.Lbllabelcustom7' AS lbllabelcustom WITH ;
		BackStyle = 1, ;
		Caption = "Options", ;
		Left = 18, ;
		Name = "Lbllabelcustom7", ;
		TabIndex = 28, ;
		Top = 330
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'pages.Page1.lblSelected' AS lbllabelcustom WITH ;
		Caption = "All Owners Selected", ;
		ForeColor = 0,0,255, ;
		Left = 215, ;
		Name = "lblSelected", ;
		TabIndex = 29, ;
		Top = 82, ;
		Visible = .F.
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'pages.Page1.Runcombo1' AS runcombo WITH ;
		cshowwhat = R, ;
		Height = 20, ;
		Left = 141, ;
		lshownew = .F., ;
		Name = "Runcombo1", ;
		TabIndex = 6, ;
		Top = 169, ;
		Width = 257, ;
		ZOrderSet = 7
		*< END OBJECT: ClassLib="..\custom\swcontrol.vcx" BaseClass="combobox" />

	ADD OBJECT 'pages.Page1.Runcombo2' AS runcombo WITH ;
		cshowwhat = J, ;
		Enabled = .F., ;
		Height = 20, ;
		Left = 264, ;
		lshownew = .F., ;
		Name = "Runcombo2", ;
		TabIndex = 13, ;
		Top = 268, ;
		Width = 257, ;
		ZOrderSet = 14
		*< END OBJECT: ClassLib="..\custom\swcontrol.vcx" BaseClass="combobox" />

	ADD OBJECT 'pages.Page1.Shpshapecustom1' AS shpshapecustom WITH ;
		Height = 2, ;
		Left = 11, ;
		Name = "Shpshapecustom1", ;
		Top = 252, ;
		Width = 528
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="shape" />

	ADD OBJECT 'pages.Page1.Shpshapecustom2' AS shpshapecustom WITH ;
		Height = 2, ;
		Left = 11, ;
		Name = "Shpshapecustom2", ;
		Top = 302, ;
		Width = 528
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="shape" />

	ADD OBJECT 'pages.Page1.Shpshapecustom3' AS shpshapecustom WITH ;
		Height = 0, ;
		Left = 11, ;
		Name = "Shpshapecustom3", ;
		Top = 339, ;
		Width = 528
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="shape" />

	ADD OBJECT 'pages.Page1.Shpshapecustom4' AS shpshapecustom WITH ;
		Height = 2, ;
		Left = 11, ;
		Name = "Shpshapecustom4", ;
		Top = 153, ;
		Width = 528
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="shape" />

	ADD OBJECT 'pages.Page1.Shpshapecustom5' AS shpshapecustom WITH ;
		Height = 2, ;
		Left = 10, ;
		Name = "Shpshapecustom5", ;
		Top = 433, ;
		Width = 528
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="shape" />

	ADD OBJECT 'pages.Page1.Shpshapecustom6' AS shpshapecustom WITH ;
		Height = 282, ;
		Left = 10, ;
		Name = "Shpshapecustom6", ;
		Top = 122, ;
		Width = 2
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="shape" />

	ADD OBJECT 'pages.Page1.Shpshapecustom7' AS shpshapecustom WITH ;
		Height = 282, ;
		Left = 537, ;
		Name = "Shpshapecustom7", ;
		Top = 122, ;
		Width = 2
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="shape" />

	ADD OBJECT 'pages.Page1.Swrptlook1' AS swrptlook WITH ;
		BackStyle = 0, ;
		Left = 196, ;
		Name = "Swrptlook1", ;
		TabIndex = 2, ;
		Top = 49, ;
		ZOrderSet = 2, ;
		Swlookupbutton1.Name = "Swlookupbutton1", ;
		Swlookupbutton1.ZOrderSet = 4, ;
		Swlookupbutton2.Name = "Swlookupbutton2", ;
		Swlookupbutton2.ZOrderSet = 1, ;
		txtBegID.clistexpression = investor.cownerid, ;
		txtBegID.clistworkarea = investor, ;
		txtBegID.Name = "txtBegID", ;
		txtBegID.ZOrderSet = 2, ;
		TxtBegName.Name = "TxtBegName", ;
		TxtBegName.ZOrderSet = 3, ;
		txtEndID.clistexpression = investor.cownerid, ;
		txtEndID.clistworkarea = investor, ;
		txtEndID.Name = "txtEndID", ;
		txtEndID.ZOrderSet = 5, ;
		TxtEndName.Name = "TxtEndName", ;
		TxtEndName.ZOrderSet = 0
		*< END OBJECT: ClassLib="..\custom\swcontrol.vcx" BaseClass="container" />

	ADD OBJECT 'pages.Page1.txtcYear' AS swyear WITH ;
		Left = 459, ;
		Name = "txtcYear", ;
		TabIndex = 16, ;
		Top = 309
		*< END OBJECT: ClassLib="..\custom\swcontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'pages.Page2.chkUseFTP' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		BackColor = 255,255,0, ;
		BackStyle = 0, ;
		Caption = "Use FTP To Upload Reports", ;
		ControlSource = "offr1.lftp", ;
		Left = 59, ;
		Name = "chkUseFTP", ;
		TabIndex = 1, ;
		Top = 13, ;
		Value = .T.
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'pages.Page2.chkUseLocal' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		BackColor = 255,255,128, ;
		BackStyle = 0, ;
		Caption = "Copy Reports to Local Path", ;
		ControlSource = "offr1.llocal", ;
		Left = 299, ;
		Name = "chkUseLocal", ;
		TabIndex = 21, ;
		Top = 14, ;
		Value = .F., ;
		Visible = .F.
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'pages.Page2.chkUseTLS' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Use TLS?", ;
		ControlSource = "offr1.lusetls", ;
		Left = 185, ;
		Name = "chkUseTLS", ;
		TabIndex = 20, ;
		Top = 346, ;
		Value = .F.
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'pages.Page2.Cmdcommandbuttoncustom1' AS cmdcommandbuttoncustom WITH ;
		Caption = "Test", ;
		Height = 24, ;
		Left = 299, ;
		Name = "Cmdcommandbuttoncustom1", ;
		Top = 97, ;
		Width = 48
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'pages.Page2.cmdExit' AS cmdcommandbuttoncustom WITH ;
		Caption = "E\<xit", ;
		Height = 36, ;
		Left = 308, ;
		Name = "cmdExit", ;
		TabIndex = 25, ;
		Top = 415, ;
		Width = 72
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'pages.Page2.cmdSave' AS cmdcommandbuttoncustom WITH ;
		Caption = "\<Save", ;
		Height = 36, ;
		Left = 164, ;
		Name = "cmdSave", ;
		TabIndex = 24, ;
		Top = 415, ;
		Width = 84
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'pages.Page2.Cntgetfile1' AS cntgetfile WITH ;
		Height = 24, ;
		Left = 90, ;
		lfullpath = .T., ;
		lpathonly = .T., ;
		Name = "Cntgetfile1", ;
		TabIndex = 22, ;
		Top = 373, ;
		Visible = .F., ;
		Width = 420, ;
		cmdPath.Left = 396, ;
		cmdPath.Name = "cmdPath", ;
		cmdPath.Top = 0, ;
		edtPath.ControlSource = "offr1.clocalpath", ;
		edtPath.Height = 23, ;
		edtPath.Left = 0, ;
		edtPath.Name = "edtPath", ;
		edtPath.Top = 0, ;
		edtPath.Width = 384
		*< END OBJECT: ClassLib="..\custom\cgadget.vcx" BaseClass="container" />

	ADD OBJECT 'pages.Page2.lblEmailPrefs' AS lbllabelcustom WITH ;
		Caption = " ", ;
		ForeColor = 255,0,0, ;
		Left = 185, ;
		Name = "lblEmailPrefs", ;
		Top = 155
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'pages.Page2.Lbllabelcustom1' AS lbllabelcustom WITH ;
		Caption = "Username:", ;
		Left = 104, ;
		Name = "Lbllabelcustom1", ;
		TabIndex = 5, ;
		Top = 74
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'pages.Page2.Lbllabelcustom10' AS lbllabelcustom WITH ;
		Caption = "Email Username:", ;
		Left = 104, ;
		Name = "Lbllabelcustom10", ;
		TabIndex = 17, ;
		Top = 293
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'pages.Page2.Lbllabelcustom11' AS lbllabelcustom WITH ;
		Caption = "Email Password", ;
		Left = 104, ;
		Name = "Lbllabelcustom11", ;
		TabIndex = 19, ;
		Top = 319
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'pages.Page2.Lbllabelcustom2' AS lbllabelcustom WITH ;
		Caption = "Password:", ;
		Left = 104, ;
		Name = "Lbllabelcustom2", ;
		TabIndex = 7, ;
		Top = 103
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'pages.Page2.Lbllabelcustom3' AS lbllabelcustom WITH ;
		Caption = "SMTP Port:", ;
		Left = 104, ;
		Name = "Lbllabelcustom3", ;
		TabIndex = 11, ;
		Top = 211
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'pages.Page2.Lbllabelcustom4' AS lbllabelcustom WITH ;
		Caption = "Site Name:", ;
		Left = 104, ;
		Name = "Lbllabelcustom4", ;
		TabIndex = 3, ;
		Top = 49
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'pages.Page2.Lbllabelcustom6' AS lbllabelcustom WITH ;
		Caption = "Mail Server:", ;
		Left = 104, ;
		Name = "Lbllabelcustom6", ;
		TabIndex = 9, ;
		Top = 184
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'pages.Page2.Lbllabelcustom7' AS lbllabelcustom WITH ;
		Caption = "Email Address:", ;
		Left = 104, ;
		Name = "Lbllabelcustom7", ;
		TabIndex = 13, ;
		Top = 239
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'pages.Page2.Lbllabelcustom8' AS lbllabelcustom WITH ;
		Caption = "FTP Port:", ;
		Left = 104, ;
		Name = "Lbllabelcustom8", ;
		TabIndex = 15, ;
		Top = 266
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'pages.Page2.Lbllabelcustom9' AS lbllabelcustom WITH ;
		Caption = "Path:", ;
		FontBold = .T., ;
		Left = 54, ;
		Name = "Lbllabelcustom9", ;
		TabIndex = 23, ;
		Top = 377, ;
		Visible = .F.
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'pages.Page2.lblTest' AS lbllabelcustom WITH ;
		Caption = " ", ;
		Left = 191, ;
		Name = "lblTest", ;
		Top = 127
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'pages.Page2.txtEmailPass' AS txttextboxcustom WITH ;
		ControlSource = "offr1.cemailpass", ;
		Left = 185, ;
		Name = "txtEmailPass", ;
		PasswordChar = "*", ;
		TabIndex = 18, ;
		Top = 316
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'pages.Page2.txtEmailUser' AS txttextboxcustom WITH ;
		ControlSource = "offr1.cemailuser", ;
		Height = 20, ;
		Left = 185, ;
		Name = "txtEmailUser", ;
		TabIndex = 16, ;
		Top = 289, ;
		Width = 197
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'pages.Page2.txtMailAddress' AS txttextboxcustom WITH ;
		ControlSource = "offr1.cmailaddr", ;
		Height = 20, ;
		Left = 185, ;
		Name = "txtMailAddress", ;
		TabIndex = 12, ;
		Top = 235, ;
		Width = 318
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'pages.Page2.txtMailServer' AS txttextboxcustom WITH ;
		ControlSource = "offr1.cmailserv", ;
		Height = 20, ;
		Left = 185, ;
		Name = "txtMailServer", ;
		TabIndex = 8, ;
		Top = 180, ;
		Width = 318
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'pages.Page2.txtPassword' AS txttextboxcustom WITH ;
		cencryptionkey = @349asks10-%%50, ;
		ControlSource = "offr1.cpassword", ;
		Left = 185, ;
		Name = "txtPassword", ;
		PasswordChar = "*", ;
		TabIndex = 6, ;
		Top = 100
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'pages.Page2.txtPort' AS txttextboxcustom WITH ;
		Alignment = 3, ;
		ControlSource = "offr1.iport", ;
		Height = 20, ;
		Left = 185, ;
		Name = "txtPort", ;
		PasswordChar = "", ;
		TabIndex = 14, ;
		Top = 262, ;
		Value = 0, ;
		Width = 42
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'pages.Page2.txtSiteName' AS txttextboxcustom WITH ;
		ControlSource = "offr1.csitename", ;
		Height = 20, ;
		Left = 185, ;
		Name = "txtSiteName", ;
		TabIndex = 2, ;
		Top = 46, ;
		Width = 318
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'pages.Page2.txtSMTPPort' AS txttextboxcustom WITH ;
		Alignment = 3, ;
		ControlSource = "offr1.ismtpport", ;
		Height = 20, ;
		Left = 185, ;
		Name = "txtSMTPPort", ;
		PasswordChar = "", ;
		TabIndex = 10, ;
		Top = 207, ;
		Value = 0, ;
		Width = 42
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'pages.Page2.txtUsername' AS txttextboxcustom WITH ;
		ControlSource = "offr1.cusername", ;
		Height = 20, ;
		Left = 185, ;
		Name = "txtUsername", ;
		TabIndex = 4, ;
		Top = 73, ;
		Width = 318
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'pages.Page3.cmdExit' AS cmdcommandbuttoncustom WITH ;
		Caption = "E\<xit", ;
		Height = 36, ;
		Left = 308, ;
		Name = "cmdExit", ;
		TabIndex = 5, ;
		Top = 341, ;
		Width = 72
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'pages.Page3.cmdSave' AS cmdcommandbuttoncustom WITH ;
		Caption = "\<Save", ;
		Height = 36, ;
		Left = 164, ;
		Name = "cmdSave", ;
		TabIndex = 4, ;
		Top = 341, ;
		Width = 84
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'pages.Page3.edtemailtxt' AS edteditboxcustom WITH ;
		Comment = "", ;
		ControlSource = "offr1.memailtxt", ;
		Height = 246, ;
		Left = 23, ;
		Name = "edtemailtxt", ;
		TabIndex = 2, ;
		Top = 80, ;
		Width = 504
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="editbox" />

	ADD OBJECT 'pages.Page3.Lbllabelcustom1' AS lbllabelcustom WITH ;
		Caption = "Email Template Text", ;
		FontBold = .T., ;
		Left = 23, ;
		Name = "Lbllabelcustom1", ;
		TabIndex = 3, ;
		Top = 64
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'pages.Page3.Lbllabelcustom2' AS lbllabelcustom WITH ;
		Caption = "Email Subject:", ;
		FontBold = .T., ;
		Left = 23, ;
		Name = "Lbllabelcustom2", ;
		TabIndex = 6, ;
		Top = 32
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'pages.Page3.txtSubject' AS txttextboxcustom WITH ;
		ControlSource = "offr1.csubject", ;
		Height = 20, ;
		Left = 119, ;
		Name = "txtSubject", ;
		TabIndex = 1, ;
		Top = 32, ;
		Width = 408
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'Swencrypt' AS swencrypt WITH ;
		Height = 17, ;
		Left = 516, ;
		Name = "Swencrypt", ;
		Top = 482, ;
		Width = 36
		*< END OBJECT: ClassLib="..\custom\sw_encrypt.vcx" BaseClass="custom" />
	
	PROCEDURE addemail
		LPARA tcOwnerID, tnType, tnrunno, tcrunyear, tdacctdate
		LOCAL llOwnerStmt, llOwnerStub, llOwnerJIB, llOwner1099
		LOCAL lOwner1099, lOwnerJIB, lOwnerStmt, lOwnerStub, llReturn, loError
		*:Global cemail, cownerid, crunyear, dacctdate, nrunno
		
		llReturn = .T.
		
		TRY
		    IF NOT USED('tempemail')
		        CREATE CURSOR tempemail ;
		            (cownerid   c(10), ;
		              cemail     c(120), ;
		              nrunno     I, ;
		              crunyear   c(4), ;
		              dacctdate  d, ;
		              lOwnerStmt L, ;
		              coslink   c(128), ;
		              lOwnerStub L, ;
		              csslink   c(128), ;
		              lOwnerJIB  L, ;
		              cjblink   c(128), ;
		              lOwnerMisc1099 L, ;
		              c1099Misclink c(128), ;
		              lOwnerNec1099 L, ;
		              c1099Neclink c(128), ;
		              lOwner1099R L, ;
		              c1099rlink c(128))
		    ENDIF
		
		    STORE .F. TO llOwnerStmt, llOwnerStub, llOwnerJIB, llOwner1099Misc, llOwner1099Nec
		
		    DO CASE
		        CASE tnType = 1
		            llOwnerStmt = .T.
		        CASE tnType = 2
		            llOwnerStub = .T.
		        CASE tnType = 3
		            llOwnerJIB = .T.
		        CASE tnType = 4
		            llOwner1099Misc = .T.
		        CASE tnType = 5
		            llOwner1099Nec = .T.
		    ENDCASE
		
		    SELE investor
		    SET ORDER TO cownerid
		
		    IF SEEK(tcOwnerID)
		        IF NOT EMPTY(cemail)
		            SELE tempemail
		            LOCATE FOR cownerid == investor.cownerid
		            IF NOT FOUND()
		                m.cownerid   = investor.cownerid
		                m.cemail     = investor.cemail
		                m.lOwnerStmt = llOwnerStmt
		                m.lOwnerStub = llOwnerStub
		                m.lOwnerJIB  = llOwnerJIB
		                m.lOwner1099Misc = llOwner1099Misc
		                m.nrunno     = tnrunno
		                m.crunyear   = tcrunyear
		                m.dacctdate  = tdacctdate
		                INSERT INTO tempemail FROM MEMVAR
		            ELSE
		                REPLACE cemail WITH investor.cemail, ;
		                        nrunno WITH tnrunno, ;
		                        crunyear WITH tcrunyear, ;
		                        dacctdate WITH tdacctdate
		                IF llOwnerStmt
		                    REPL lOwnerStmt WITH .T.
		                ENDIF
		                IF llOwnerStub
		                    REPL lOwnerStub WITH .T.
		                ENDIF
		                IF llOwnerJIB
		                    REPL lOwnerJIB WITH .T.
		                ENDIF
		                IF llOwner1099Misc
		                    REPL lOwner1099Misc WITH .T.
		                ENDIF
		                IF llOwner1099Nec
		                    REPL lOwner1099Nec WITH .T.
		                ENDIF
		            ENDIF
		        ENDIF
		    ENDIF
		CATCH TO loError
		    llReturn = .F.
		    DO errorlog WITH 'AddEmail', loError.LINENO, 'DMROnline', loError.ERRORNO, loError.MESSAGE, '', loError
		    MESSAGEBOX('Unable to process the email addresses at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		          'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		RETURN llReturn
		
		
		
	ENDPROC

	PROCEDURE backtaxwith		&& Process backup and tax withholding
	ENDPROC

	PROCEDURE buildstmt
	ENDPROC

	PROCEDURE calccompress		&& Process Compression/Gathering Charges
	ENDPROC

	PROCEDURE calcexpense		&& Does expense calculations
	ENDPROC

	PROCEDURE calcincome		&& Does income calculations
	ENDPROC

	PROCEDURE calctaxes		&& Does tax calculations
	ENDPROC

	PROCEDURE copyreports
		
		lcTemp = 'temp\'
		lcReportPath = ALLT(offr1.cLocalPath)
		
		lnFiles = ADIR(lafiles,lcTemp+'RP*.*')
		
		FOR lnx = 1 TO lnFiles
		   IF USED(lafiles[lnx,1])
		      SELECT (lafiles[lnx,1])
		      USE
		   ENDIF
		   THISFORM.cfilename = lafiles[lnx,1]
		
		   lcSourceFile = lcTemp+lafiles[lnx,1]
		   lcTargetFile = lcReportPath+lafiles[lnx,1]
		   COPY FILE (lcSourceFile) TO (lcTargetFile)
		ENDFOR
		
		IF USED('usersx')
		   USE IN usersx
		ENDIF
		
		IF FILE('usersx.dbf')
		   lcSourceFile = 'usersx.dbf'
		   lcTargetFile = lcReportPath+'usersx.dbf'
		   COPY FILE (lcSourceFile) TO (lcTargetFile)
		   lcSourceFile = 'usersx.fpt'
		   lcTargetFile = lcReportPath+'usersx.fpt'
		   COPY FILE (lcSourceFile) TO (lcTargetFile)
		ENDIF
		
		lnFiles = ADIR(lafiles,lcTemp+'*.pdf')
		FOR lnx = 1 TO lnFiles
		
		   lcSourceFile = lcTemp+lafiles[lnx,1]
		   lcTargetFile = lcReportPath+lafiles[lnx,1]
		
		   COPY FILE (lcSourceFile) TO (lcTargetFile)
		ENDFOR
		
		MESSAGEBOX("Copied: " + TRANSFORM(lnFiles) + ' reports to folder ' + UPPER(lcReportPath) + CHR(10) + ;
		   "Be sure to copy these files to the TEMP path on your Web server!",0,'Process Completed')
		
	ENDPROC

	PROCEDURE createpdf		&& Calls XFRX to create the PDF file
		LPARAMETERS lcOutputFile
		PRIV lcTitle1, lcTitle2, lcSortOrder, lcSelect
		LOCAL lcArchive, lcOutputFile, lcOutputType, lcPath, lcQuery, lcSelect, lcSortOrder, lcTitle1
		LOCAL lcTitle2, llResult, llReturn, llShowFile, llSilent, loError
		LOCAL oXFRX
		*:Global cGrpName, cProcessor, cProducer, glGrpName, oProgress, pState, pZip, paddr1, paddr2, paddr3
		*:Global pcity, pcontact, pphone, ptax
		
		llReturn = .T.
		
		TRY
		   lcTitle1     = THISFORM.cTitle1
		   lcTitle2     = THISFORM.cTitle2
		   lcSortOrder  = THISFORM.cSortOrder
		   lcSelect     = ''
		   llShowFile   = .F.
		   lcOutputType = UPPER(JUSTEXT(lcOutputFile))
		   llResult     = .T.
		   llSilent     = .T.
		   lcArchive    = THISFORM.cZipFile
		
		   IF NOT EMPTY(lcOutputFile)
		
		* Check on the existence of the application object
		* if it doesn't exist, we're running in development
		* mode and need to initialize the company address info.
		      IF TYPE('m.goApp') = 'O'
		         m.cProducer = m.goApp.ccompanyname
		         m.paddr1    = m.goApp.cAddress1
		         m.paddr2    = m.goApp.cAddress2
		         m.paddr3    = m.goApp.cAddress3
		         m.pcontact  = m.goApp.cContact
		         m.pphone    = m.goApp.cPhoneNo
		      ELSE
		         m.cProducer = 'SherWare, Inc.'
		         m.paddr1    = 'PO Box 223'
		         m.paddr2    = 'Wooster, OH  44691'
		         m.paddr3    = ''
		         m.ptax      = '99-9999999'
		         m.pcontact  = 'Phil Sherwood'
		         m.pphone    = '3302623115'
		         m.pcity     = 'Wooster'
		         m.pState    = 'OH'
		         m.pZip      = '44691'
		      ENDIF
		
		      IF TYPE('m.goApp') = 'O'
		         m.cProducer = m.goApp.ccompanyname
		         IF m.goApp.lDemo
		            m.cProducer = 'Demo Version of Software'
		            m.cGrpName  = m.cProducer
		         ENDIF
		      ELSE
		         m.cProducer = 'Development Company, Inc.'
		      ENDIF
		
		      IF TYPE('m.cProcessor') # 'C'
		         m.cProcessor = ''
		      ENDIF
		
		      glGrpName = .F.
		
		      oXFRX = CREATEOBJECT('swXFRX')
		
		      IF NOT oXFRX.SetupXFRX()
		         llReturn = .f.
		         EXIT 
		      ENDIF
		
		* Select the passed cursor before running the report
		      TRY
		         SELECT (THISFORM.cAlias)
		      CATCH
		      ENDTRY
		
		
		      oXFRX.cOutputFile = lcOutputFile
		      oXFRX.cOutputType = lcOutputType
		      oXFRX.cTitle1     = THIS.cTitle1
		      oXFRX.cTitle2     = THIS.cTitle2
		      oXFRX.cReportName = THIS.cReportName
		
		      llResult = oXFRX.CallXFRX(llSilent, lcArchive)
		
		      IF llResult
		         THISFORM.nFilesToUpload = THISFORM.nFilesToUpload + 1
		      ENDIF
		
		      RELEASE oXFRX
		      oXFRX = NULL
		
		   ELSE
		      llReturn = .F.
		   ENDIF
		
		CATCH TO loError
		   llReturn = .F.
		   IF VARTYPE(oProgress) = 'O'
		      oProgress.closeprogress()
		      oProgress = .NULL.
		   ENDIF
		   DO errorlog WITH 'CreatePDF', loError.LINENO, 'Online Reporting', loError.ERRORNO, loError.MESSAGE, '', loError
		   MESSAGEBOX('Unable to process the upload at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		        'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		
	ENDPROC

	PROCEDURE createtempfile
		LOCAL llError
		
		llError = .F.
		
		* Set the temp folder for the pdf files
		lcTemp = ADDBS(ALLTRIM(m.goApp.cCommonFolder))+'Online\'
		
		TRY
		   IF NOT DIRECTORY(lcTemp)
		      MD (lcTemp)
		   ENDIF
		CATCH
		   llError = .T.
		ENDTRY
		
		IF NOT llError
		
		   * Build unique reports table name
		   lcRptsName = 'RP' + SUBSTR(SYS(2015),5)
		
		   CREATE TABLE (lcTemp + lcRptsName) FREE (ctype c(2), cuserid c(254), drptdate d, cfilename c(80))
		
		   IF NOT USED(lcRptsName)
		      USE (lcTemp + lcRptsName) IN 0
		   ENDIF
		
		   RETURN(lcRptsName)
		ELSE
		   RETURN '*'
		ENDIF
		
		
		
	ENDPROC

	PROCEDURE deficits_own		&& Process deficits when netting all wells together for an owner.
	ENDPROC

	PROCEDURE deficits_well		&& Process well deficits when not netting wells together.
	ENDPROC

	PROCEDURE flatowner		&& Processes revenue for flat owners.
	ENDPROC

	PROCEDURE formatownerid
		LPARAMETERS tcOwnerid
		
		* Remove special characters from ownerid
		
		tcOwnerID = STRTRAN(tcOwnerid, ' ', '')
		tcOwnerID = STRTRAN(tcOwnerid, '&', '-')
		tcOwnerID = STRTRAN(tcOwnerid, '`', '-')
		tcOwnerID = STRTRAN(tcOwnerid, '^', '-')
		tcOwnerID = STRTRAN(tcOwnerid, '#', '-')
		tcOwnerID = STRTRAN(tcOwnerid, '@', '-')
		
		RETURN tcOwnerID
	ENDPROC

	PROCEDURE ftpconnect
		LOCAL lcTempLocation, lcPass, lcSite, lcUser, llReturn, lnReturn, loError, loIP
		llReturn = .T.
		
		TRY
		
		   IF NOT USED('offr1')
		      USE (m.goapp.cdatafilepath + 'offr1') IN 0
		   ENDIF
		
		   SET PROCEDURE TO custom\swftp.prg ADDITIVE 
		   loIP = CREATEOBJECT('swftp')
		
		   SELE offr1
		   GO TOP
		   lcSite         = ALLTRIM(cSitename)
		   loIP.nHTTPPort = iPort
		
		   IF EMPTY(lcSite)
		      = MESSAGEBOX('Missing FTP Site..Please correct.', 0, 'Site Configuration Error')
		      THISFORM.lerror = .T.
		      llReturn        = .F.
		      EXIT
		   ENDIF
		
		   lcTempLocation = 'temp/'
		
		   lcUser = ALLTRIM(cusername)
		   IF '|' $ lcUser
		      lcUser = SUBSTR(lcUser, AT('|', lcUser) + 1)
		   ENDIF
		   IF EMPTY(lcUser)
		      = MESSAGEBOX('Missing FTP Username..Please correct.', 0, 'Site Configuration Error')
		      THISFORM.lerror = .T.
		      llReturn        = .F.
		      EXIT
		   ENDIF
		
		   lcpass = ALLTRIM(thisform.pages.page2.txtpassword.Value)
		     
		   IF EMPTY(lcPass)
		      = MESSAGEBOX('Missing FTP Password..Please correct.', 0, 'Site Configuration Error')
		      THISFORM.lerror = .T.
		      llReturn        = .F.
		      EXIT
		   ENDIF
		   loIP.lPassiveFTP = .T.
		   loIP.cServer   = lcSite
		   loIP.cUser = lcUser
		   loIP.cPwd = lcPass
		   lcReturn         = loIP.Connect()
		
		   IF lcReturn <> '0'
		      MESSAGEBOX(lcReturn, 0, 'FTP Connection Error')
		      llReturn            = .F.
		   ELSE
		      llReturn            = loIP
		   ENDIF
		
		CATCH TO loError
		   llReturn = .F.
		   DO errorlog WITH 'FTPConnect', loError.LINENO, 'OnlineReporting', loError.ERRORNO, loError.MESSAGE, '', loError
		   MESSAGEBOX('Unable to connect to the web at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		        'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		RETURN llReturn
		
		
	ENDPROC

	PROCEDURE ftpupload
		LPARAMETERS tcFileName
		LOCAL loIP, llTrue, lnCounter, lcUser, lcPass, lcFile, lcFileName, lcSourceFile, lcTargetFile, llChanged
		LOCAL lnFiles, lcLibrary, lcSite, lcTempLocation, lnReturn, lnUploaded
		LOCAL llFailed
		LOCAL lafiles[1], lcTemp, llError, lnx, loError
		LOCAL lcErrorMessage, llResult, llReturn
		
		llFailed = .F.
		
		llReturn = .T.
		
		TRY
		   lnFiles        = 0
		   lnUploaded     = 0
		   lcErrorMessage = ''
		
		   IF THIS.lerrorfound = .T.
		      llReturn = .F.
		      EXIT
		   ENDIF
		
		   lcLibrary = SET('library')
		   SET LIBRARY TO LOCFILE("vfpcompression.fll") ADDITIVE
		
		   lcTempLocation = 'temp/'
		
		* Set the temp location for the PDF files
		   lcTemp = ADDBS(ALLTRIM(m.goapp.ccommonfolder)) + 'ONLINE\'
		
		   lnFiles = ADIR(lafiles, lcTemp + 'RP*.*')
		
		
		   IF lnFiles > 0
		      FOR lnx = 1 TO lnFiles
		         IF USED(lafiles[lnx, 1])
		            SELECT (lafiles[lnx, 1])
		            USE
		         ENDIF
		         THISFORM.cfilename = lafiles[lnx, 1]
		         loIP               = THISFORM.ftpconnect()
		         IF VARTYPE(loIP) = 'O'
		            lcSourceFile     = lcTemp + lafiles[lnx, 1]
		            lcTargetFile     = lcTempLocation + lafiles[lnx, 1]
		            loIP.cSourceFile = lcSourceFile
		            loIP.cTargetFile = lcTargetFile
		            llResult         = loIP.SendFile()
		            IF llResult
		               lnUploaded = lnUploaded + 1
		               ERASE (lcTemp + lafiles[lnx, 1])
		            ELSE
		               llFailed       = .T.
		               llReturn       = .F.
		               lcErrorMessage = loIP.cErrorMessage
		            ENDIF
		            loIP.FTPClose()
		            loIP = .NULL.
		         ELSE
		            llFailed = .T.
		            EXIT
		         ENDIF
		      ENDFOR
		   ENDIF
		
		   swclose('usersx')
		
		   IF FILE(m.goapp.cDataFilePath + 'usersx.dbf') AND NOT llFailed
		      THISFORM.cfilename = 'usersx.dbf'
		      lcSourceFile       = m.goapp.cDataFilePath + 'usersx.dbf'
		      lcTargetFile       = lcTempLocation + 'usersx.dbf'
		      loIP               = THISFORM.ftpconnect()
		      IF VARTYPE(loIP) = 'O'
		         loIP.cSourceFile = lcSourceFile
		         loIP.cTargetFile = lcTargetFile
		         llResult         = loIP.SendFile()
		         loIP             = .NULL.
		         loIP             = THISFORM.ftpconnect()
		         lcSourceFile     = m.goapp.cDataFilePath + 'usersx.fpt'
		         lcTargetFile     = lcTempLocation + 'usersx.fpt'
		         loIP.cSourceFile = lcSourceFile
		         loIP.cTargetFile = lcTargetFile
		         llResult         = loIP.SendFile()
		         IF llResult
		            lnUploaded = lnUploaded + 1
		            ERASE (m.goapp.cDataFilePath + 'usersx.dbf')
		            ERASE (m.goapp.cDataFilePath + 'usersx.fpt')
		         ELSE
		            lcErrorMessage = loIP.cErrorMessage
		            llReturn       = .F.
		            llFailed       = .T.
		         ENDIF
		         loIP = .NULL.
		      ELSE
		         llFailed = .T.
		         EXIT
		      ENDIF
		   ENDIF
		
		* Send the PDF files as a zip
		   llError = .F.
		
		   lcFileName = THISFORM.cZipFile
		
		   IF FILE(lcFileName) AND NOT llFailed
		      lcSourceFile       = lcFileName
		      lcTargetFile       = lcTempLocation + JUSTFNAME(lcFileName)
		      THISFORM.cfilename = JUSTFNAME(lcFileName)
		      loIP               = THISFORM.ftpconnect()
		      IF VARTYPE(loIP) = 'O'
		         loIP.cSourceFile = lcSourceFile
		         loIP.cTargetFile = lcTargetFile
		         llResult         = loIP.SendFile()
		
		         IF NOT llResult
		            lcErrorMessage = loIP.cErrorMessage
		            llReturn       = .F.
		            lnFiles        = -1
		         ELSE
		            TRY
		               ERASE (lcTemp + '*.zip')
		               ERASE (lcTemp + '*.pdf')
		               ERASE (lcTemp + '*.ps')
		               ERASE (lcTemp + '*.dbf')
		            CATCH
		            ENDTRY
		         ENDIF
		      ELSE
		         llFailed = .T.
		         EXIT
		      ENDIF
		   ENDIF
		
		   DO CASE
		      CASE llFailed
		         MESSAGEBOX('The upload failed!' + CHR(10) + ;
		              lcErrorMessage, 48, 'FTP Upload Error')
		         llReturn = .F.
		      CASE lnUploaded = 0
		         MESSAGEBOX('There was nothing created to upload. Check to make sure the owners chosen had activity during the run selected.', 48, 'Upload To Web')
		   ENDCASE
		
		CATCH TO loError
		   llReturn = .F.
		   DO errorlog WITH 'FTPUpload', loError.LINENO, 'OnlineReporting', loError.ERRORNO, loError.MESSAGE, '', loError
		   MESSAGEBOX('Unable to upload the reports at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		        'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		IF VARTYPE(THISFORM.oProgress) = 'O'
		   THISFORM.oProgress.closeprogress()
		ENDIF
		
		RETURN (llReturn)
		
		
		
	ENDPROC

	PROCEDURE getformats
		LOCAL lcLibrary, lcSourceFile, lcTargetFile, llReturn, llSupport, lnResult, loerror, loUpdate
		
		lcLibrary = SET('library')
		
		llSupport = checksupportexp()
		
		IF NOT llSupport
		    RETURN
		ENDIF
		
		loUpdate     = m.goapp.oUpdate
		lcSourceFile = 'ten99recon.zip'
		lcTargetFile = m.goapp.cCommonFolder + 'ten99recon.zip'
		
		loUpdate.cSourceFile  = lcSourceFile
		loUpdate.cTargetFile  = lcTargetFile
		loUpdate.cDescription = '1099 Reconciliation'
		loUpdate.cUnzipTo     = m.goapp.cRptsFolder
		llReturn              = loUpdate.GetUpdate(.F.)
		
	ENDPROC

	PROCEDURE getprevmins		&& Get previous minimums
	ENDPROC

	PROCEDURE getrange		&& Gets the oil and gas period ranges.
	ENDPROC

	PROCEDURE Init
		
		SET SAFETY OFF
		DODEFAULT()
		LOCAL llFound
		
		SET CENTURY OFF
		SET MULTILOCKS ON
		
		swselect('investor')
		SET ORDER TO cOwnerID
		GO TOP
		THISFORM.pages.page1.swrptlook1.txtBegName.VALUE = cOwnname
		THISFORM.pages.page1.swrptlook1.txtBegID.VALUE = cOwnerID
		GO BOTTOM
		THISFORM.pages.page1.swrptlook1.txtEndName.VALUE = cOwnname
		THISFORM.pages.page1.swrptlook1.txtEndID.VALUE = cOwnerID
		
		SYS(3054,0)
		SYS(3092,"")
		this.lsplitperiods = .f.
		
		swselect('tax1099det')
		SET ORDER to cyear
		GO bott
		lcYear = cYear
		
		thisform.pages.Page1.txtcYear.Value = lcYear
		
		lcTemp = ADDBS(ALLTRIM(m.goApp.cCommonFolder))+'Online\'
		
		* Use the email settings setup in Email Preferences instead of the ones setup here
		IF swIsEmailSetup()
		   THISFORM.lUseEmailPrefs      = .T.
		ELSE
		   THISFORM.lUseEmailPrefs      = .F.
		ENDIF 
		   
		IF FILE('datafiles\usetls.cfg')
		   thisform.pages.page2.chkusetLS.Value = .t.
		ENDIF 
		
		*!*	IF ADIR(laRpt,lcTemp+'_*.zip') > 0 
		*!*	   IF MESSAGEBOX('There are reports ready to upload. They may not have finished successfully the last upload session... Upload them now?',36,'Upload Reports') = 6
		*!*	      thisform.cZipFile = lcTemp+larpt[1,1]
		*!*	      thisform.ftpupload()
		*!*	   ENDIF
		*!*	ENDIF 
		
		
		
	ENDPROC

	PROCEDURE initpdf
	ENDPROC

	PROCEDURE intonhold		&& Process released interest on holds.
	ENDPROC

	PROCEDURE Load
		
		
		llReturn = .t.
		
		lcDataPath = ALLT(m.goapp.cDataFilePath)
		TRY
		   IF NOT FILE(lcDataPath+'offr1.dbf')
		      CREATE TABLE (lcDataPath+'offr1') FREE ;
		         (cUserName     c(50), ;
		         cPassWord     c(20), ;
		         cMailServ     c(120), ;
		         cMailAddr     c(120), ;
		         cSiteName     c(180), ;
		         iPort         I, ;
		         ismtpport     I, ;
		         csubject      c(80), ;
		         memailtxt     M, ;
		         lFTP          L, ;
		         lLocal        L, ;
		         lUseTLS       L, ;
		         cemailuser    c(50), ;
		         cemailpass    c(50), ;
		         cLocalPath    c(240), ;
		         cLocation     c(240))
		      APPEND BLANK
		   ELSE
		      IF NOT USED('offr1')
		         USE (lcDataPath+'offr1') IN 0 EXCL
		      ENDIF
		      IF TYPE('offr1.cmailserv') <> 'C'
		         ALTER TABLE offr1 ADD COLUMN cMailServ c(120)
		      ENDIF
		      IF TYPE('offr1.cmailaddr') <> 'C'
		         ALTER TABLE offr1 ADD COLUMN cMailAddr c(120)
		      ENDIF
		      IF TYPE('offr1.memailtxt') <> 'M'
		         ALTER TABLE offr1 ADD COLUMN memailtxt M
		      ENDIF
		      IF TYPE('offr1.iport') <> 'N'
		         ALTER TABLE offr1 ADD COLUMN iPort I
		      ENDIF
		      IF TYPE('offr1.csubject') <> 'C'
		         ALTER TABLE offr1 ADD COLUMN csubject c(80)
		      ENDIF
		      IF TYPE('offr1.cemailuser') <> 'C'
		         ALTER TABLE offr1 ADD COLUMN cemailuser c(50)
		      ENDIF
		      IF TYPE('offr1.cemailpass') <> 'C'
		         ALTER TABLE offr1 ADD COLUMN cemailpass c(50)
		      ENDIF
		      IF TYPE('offr1.lFTP') <> 'L'
		         ALTER TABLE offr1 ADD COLUMN lFTP L
		      ENDIF
		      IF TYPE('offr1.lLocal') <> 'L'
		         ALTER TABLE offr1 ADD COLUMN lLocal L
		      ENDIF
		      IF TYPE('offr1.lUseTLS') <> 'L'
		         ALTER TABLE offr1 ADD COLUMN lUseTLS L
		      ENDIF
		      IF TYPE('offr1.cLocalPath') <> 'C'
		         ALTER TABLE offr1 ADD COLUMN cLocalPath c(240)
		      ENDIF
		      IF TYPE('offr1.ismtpport') <> 'N'
		         ALTER TABLE offr1 ADD COLUMN ismtpport I
		         SELE offr1
		         GO TOP
		         REPLACE ismtpport WITH 25
		      ENDIF
		   ENDIF
		CATCH TO loError
		ENDTRY
		
		TRY
		   IF USED('offr1')
		      USE IN offr1
		   ENDIF
		CATCH TO loError
		ENDTRY
		
		TRY
		   IF NOT USED('offr1')
		      USE (lcDataPath+'offr1') IN 0
		   ENDIF
		CATCH TO loError
		ENDTRY
		
		SELECT offr1
		GO TOP
		
		DODEFAULT()
		
	ENDPROC

	PROCEDURE netbalance		&& Print net balance this period.
	ENDPROC

	PROCEDURE netwelltotalnosplit		&& Prints the well net total line if production periods are not split into their own sections.
	ENDPROC

	PROCEDURE netwelltotalsplit		&& Processes the net well total
	ENDPROC

	PROCEDURE opdf_access
		*To do: Modify this routine for the Access method
		IF VARTYPE(this.oPDF) <> 'O'
		   this.oPDF = CREATEOBJECT('swpdf')
		ENDIF 
		RETURN THIS.opdf
		
	ENDPROC

	PROCEDURE ownerjibs
		LOCAL tcYear, tcPeriod, tcOwner1, tcOwner2, tcGroup, oJIB, lcTemp
		
		IF THIS.lErrorFound = .T.
		   RETURN
		ENDIF
		
		llReturn    = .T.
		llNewFormat = .T.
		
		TRY
		   tcYear  = THISFORM.PAGES.page1.runcombo2.LISTITEM[thisform.pages.page1.runcombo2.listitemid, 2]
		   tnRunNo = INT(VAL(THISFORM.PAGES.page1.runcombo2.LISTITEM[thisform.pages.page1.runcombo2.listitemid, 3]))
		
		   tcGroup    = THISFORM.PAGES.page1.runcombo2.LISTITEM[thisform.pages.page1.runcombo2.listitemid, 4]
		   tdAcctDate = CTOD(THISFORM.PAGES.page1.runcombo2.LISTITEM[thisform.pages.page1.runcombo2.listitemid, 7])
		   tcOwner1   = THISFORM.PAGES.page1.swrptlook1.txtBegID.VALUE
		   tcOwner2   = THISFORM.PAGES.page1.swrptlook1.txtEndID.VALUE
		   tlSelected = THISFORM.PAGES.page1.chkselected.VALUE
		   tlSummary  = thisform.pages.page1.chksummary.Value 
		   tcSortOrder = '1'
		   tlIncEmail = .F.
		   tlEmail    = .F.
		
		   * Set the temp location for the PDF files
		   lcTemp = ADDBS(ALLTRIM(m.goapp.cCommonFolder)) + 'ONLINE\'
		
		   swselect('options')
		   llPrintDesc = lAcctDesc
		   * Check on the existence of the application object
		   * if it doesn't exist, we're running in development
		   * mode and need to initialize the company address info.
		   IF TYPE('m.goApp') = 'O'
		      m.cProducer  = m.goapp.ccompanyname
		      m.paddr1     = m.goapp.cAddress1
		      m.paddr2     = m.goapp.cAddress2
		      m.paddr3     = m.goapp.cAddress3
		      m.pcontact   = m.goapp.cContact
		      m.pphone     = m.goapp.cPhoneNo
		      m.cprocessor = m.goapp.cagentname
		   ELSE
		      m.cProducer  = 'SherWare, Inc.'
		      m.paddr1     = 'PO Box 223'
		      m.paddr2     = 'Wooster, OH  44691'
		      m.paddr3     = ''
		      m.ptax       = '99-9999999'
		      m.pcontact   = 'Phil Sherwood'
		      m.pphone     = '3302623115'
		      m.pcity      = 'Wooster'
		      m.pState     = 'OH'
		      m.pZip       = '44691'
		      m.cprocessor = ''
		   ENDIF
		   llFinal   = .T.
		   glgrpname = .F.
		
		   *
		   *  Call jibproc to create the (jibowner) and (jibwell) cursors
		   *
		   oJIB = CREATEOBJECT('jibproc', tcOwner1, tcOwner2, ;
		        '01', ;
		        tcYear, ;
		        tcGroup, 'O', tdAcctDate, .F., tnRunNo)
		
		
		   IF oJIB.JIBStatements(tcYear, ;
		                         tnRunNo, ;
		                         tlSelected, ;
		                         tdAcctDate, ;
		                         tcGroup, ;
		                         tcOwner1, ;
		                         tcOwner2, ;
		                         tcSortOrder, ;
		                         tlSummary, ;
		                         tlIncEmail, ;
		                         tlEmail, ;
		                         thisform.DataSessionId)
		
		 
		      IF FILE(m.goapp.cRptsFolder + 'dmrojibcust.frx')
		         THISFORM.cReportName = m.goapp.cRptsFolder + 'dmrojibcust.frx'
		      ELSE
		         THISFORM.cReportName = m.goapp.cRptsFolder + 'dmrojibrun.frx'
		      ENDIF
		
		      lcRptsName = THISFORM.createtempfile()
		      IF NOT '*' $ lcRptsName
		         SELE ccustid FROM jibinv INTO CURSOR temp ORDER BY ccustid GROUP BY ccustid
		         lnCount            = _TALLY
		         THISFORM.oprogress = THISFORM.omessage.progressbar('Building Owner JIB Files To Transfer...')
		         THISFORM.oprogress.setprogressrange(0, lnCount)
		         SELE 0
		         IF llNewFormat
		            m.cType = 'JB'
		         ELSE
		            m.cType = 'O'
		         ENDIF
		         m.ddate = tdAcctDate
		         lnCount = 1
		         SET REPORTBEHAVIOR 90
		         SELE temp
		         SCAN
		            m.ccustid = ccustid
		            IF THISFORM.PAGES.page1.chkonlyUpload.VALUE
		               swselect('investor')
		               SET ORDER TO cownerid
		               IF SEEK(m.ccustid) AND NOT investor.lOnlineRpts
		                  SELECT jibinv
		                  DELETE FOR ccustid == m.ccustid
		                  LOOP
		               ENDIF
		            ENDIF
		            THIS.addemail(m.ccustid, 3, tnRunNo, tcYear, tdAcctDate)
		            THISFORM.oprogress.UpdateProgress(lnCount)
		            lnCount   = lnCount + 1
		            lcOwnerID = THISFORM.FormatOwnerID(temp.ccustid)
		            lcFile    = 'JB' + '_' + ALLTRIM(lcOwnerID) + '_' + tcYear + '_' + PADL(ALLT(STR(tnRunNo)), 3, '0') + '.pdf'
		            lcFile    = STRTRAN(lcFile, ' ', '_')
		            INSERT INTO (lcRptsName) VALUE(m.cType, temp.ccustid, m.ddate, lcFile)
		            m.cownerid = m.ccustid
		            m.cjblink  = 'https://' + ALLTRIM(THISFORM.PAGES.page2.txtsiteName.VALUE) + '/displayreport.or?filename=' + ALLTRIM(lcFile)
		            SELECT tempemail
		            LOCATE FOR cownerid == m.cownerid
		            IF NOT FOUND()
		               INSERT INTO tempemail FROM MEMVAR
		            ELSE
		               REPLACE lownerjib WITH .T., ;
		                  cjblink   WITH m.cjblink
		            ENDIF
		            SELE jibinv
		            SET FILT TO ccustid == m.ccustid
		
		            * Only send to pdf when the option to only send report definitions isn't enabled
		            IF NOT THISFORM.PAGES.page1.chkReportDefs.VALUE
		               TRY
		                  lcOutputFile    = lcTemp + lcFile	&&Specify PDF output file name.
		                  THISFORM.cAlias = 'jibinv'
		                  llReturn        = THIS.CreatePDF(lcOutputFile)
		               CATCH
		                  THIS.printing_error()
		                  SELECT temp
		                  GO BOTT
		                  THIS.lErrorFound = .T.
		                  llReturn         = .F.
		               ENDTRY
		            ENDIF
		         ENDSCAN
		         SET REPORTBEHAVIOR 90
		         USE IN (lcRptsName)
		         THISFORM.oprogress.CloseProgress()
		         THISFORM.oprogress = .NULL.
		         RELEASE oJIB
		      ENDIF
		   ENDIF
		CATCH TO loError
		   llReturn = .F.
		   DO errorlog WITH 'OwnerJIBS', loError.LINENO, 'DMronline', loError.ERRORNO, loError.MESSAGE, '', loError
		   MESSAGEBOX('Unable to upload the JIB reports at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		        'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		RETURN llReturn
		SET PRINTER TO DEFAULT
		
		
		
	ENDPROC

	PROCEDURE ownerstmts
		LOCAL tcOwner1, tcOwner2, tcYear, tcPeriod, tcWellID1, tcWellID2
		LOCAL lcAlias, lcTemp, llOldStmt
		LOCAL ownstmt AS 'oldswownerstmt'
		LOCAL lcFile, lcOutputFile, lcRptsName, lcSelect, lcSortOrder, lcTitle1, lcTitle2, lcVersion
		LOCAL llPageCnt, llReturn, llStmComp, lnCount, loError
		*:Global cGrpName, cProcessor, cProducer, cownerid, ctype, ddate, glAcctDesc, glChgPrice, glDirInv
		*:Global glDirRoy, glDirWork, glExpSum, glGrpName, glHideComp, glRefID, glShowRoy, glStmInv
		*:Global gnCompress, gnGather, gnMinCheck, tcDMBatch, tcGroup, tcOwnerType, tdAcctDate, tlChecksOnly
		*:Global tlFlatRate, tlNoProd, tlPrintDef, tlPrintMin, tlPrintZero, tnRunNo
		PRIV lcTitle1, lcTitle2, lcSortOrder, lcSelect, glGrpName, m.cGrpName
		
		IF THIS.lErrorFound = .T.
		    RETURN
		ENDIF
		
		llReturn = .T.
		
		llNewFormat = .t.
		
		TRY
		
		    tcOwner1    = THISFORM.PAGES.page1.swrptlook1.txtBegID.VALUE
		    tcOwner2    = THISFORM.PAGES.page1.swrptlook1.txtEndID.VALUE
		    tcYear      = THISFORM.PAGES.page1.runcombo1.LISTITEM[thisform.pages.page1.runcombo1.listitemid, 2]
		    tnRunNo     = INT(VAL(THISFORM.PAGES.page1.runcombo1.LISTITEM[thisform.pages.page1.runcombo1.listitemid, 3]))
		    tcOwnerType = 'A'
		    tcGroup     = THISFORM.PAGES.page1.runcombo1.LISTITEM[thisform.pages.page1.runcombo1.listitemid, 4]
		    tdAcctDate  = CTOD(THISFORM.PAGES.page1.runcombo1.LISTITEM[thisform.pages.page1.runcombo1.listitemid, 7])
		
		    tcDMBatch       = THISFORM.PAGES.page1.runcombo1.LISTITEM[thisform.pages.page1.runcombo1.listitemid, 5]
		    tlFlatRate      = THISFORM.PAGES.page1.chkFlatRate.VALUE
		    tlChecksOnly    = .T.
		    THISFORM.cgroup = tcGroup
		
		    tlNoProd    = .F.
		    tlPrintZero = .T.
		    tlPrintMin  = .T.
		    tlPrintDef  = .T.
		    tcOwnerType = 'All Owners'
		    llOldStmt   = .F.
		    llSelected   = THISFORM.PAGES.Page1.chkselected.VALUE
		
		    IF NOT llSelected
		       SELECT cownerid AS cid FROM investor ;
		          INTO CURSOR SELECTED ;
		          WHERE BETWEEN(cownerid,tcOwner1,tcOwner2) ;
		          ORDER BY cid
		    ENDIF
		
		* Set the temp location for the PDF files
		    lcTemp = ADDBS(ALLTRIM(m.goapp.cCommonFolder)) + 'ONLINE\'
		
		    swselect('options')
		    GO TOP
		    SCATTER NAME THIS.oOptions
		
		* Check to see what version the run was closed under
		    lcVersion = ' '
		    SWSELECT('sysctl')
		    LOCATE FOR nrunno == tnRunNo AND cRunYear == tcYear AND ctypeclose = 'R'
		    IF FOUND()
		        lcVersion = cVersion
		    ENDIF
		
		* If the version is empty we assume it was
		* closed under the old version before we
		* started storing the version #. If so,
		* use the old ownerstmt class.
		    IF EMPTY(lcVersion)  AND tnRunNo <> 0
		        ownstmt   = CREATEOBJECT('oldswownerstmt')
		        llOldStmt = .T.
		    ELSE
		        SET PROCEDURE TO custom\swowner.prg ADDITIVE 
		        ownstmt                = CREATEOBJECT('swownerstmt')
		        ownstmt.lIncludeChecks = tlChecksOnly
		        ownstmt.lDirDeposit    = .T.
		    ENDIF
		
		* Fill in properties needed by the statement process
		    ownstmt.cOwner1    = tcOwner1
		    ownstmt.cOwner2    = tcOwner2
		    ownstmt.cgroup     = tcGroup
		    ownstmt.dAcctDate  = tdAcctDate
		    ownstmt.cDMBatch   = tcDMBatch
		    ownstmt.cRunYear   = tcYear
		    ownstmt.nrunno     = tnRunNo
		    ownstmt.cOwnerType = tcOwnerType
		    ownstmt.lFlatRate  = tlFlatRate
		    ownstmt.lNoProd    = tlNoProd
		    ownstmt.lPrintMin  = tlPrintMin
		    ownstmt.lPrintDef  = tlPrintDef
		    ownstmt.lZipOrder  = .F.
		    ownstmt.lDetail    = .F.
		
		    IF ownstmt.MAIN(llSelected)
		*
		*  Send data through report
		*
		        SELECT statemnt
		        SET ORDER TO invprog
		        IF RECC() > 0
		
		            lcAlias = ALIAS()
		
		            ON KEY LABEL esc
		
		            IF THIS.lcanceled
		                RETURN
		            ENDIF
		
		            tcYear  = THISFORM.PAGES.page1.runcombo1.LISTITEM[thisform.pages.page1.runcombo1.listitemid, 2]
		            tnRunNo = INT(VAL(THISFORM.PAGES.page1.runcombo1.LISTITEM[thisform.pages.page1.runcombo1.listitemid, 3]))
		
		            swselect('options')
		            GO TOP
		            glGrpName  = lGrpName
		            glStmInv   = lStmInv
		            gnMinCheck = nMinCheck
		            glHideComp = lHideComp
		            glDirWork  = lDirWork
		            glShowRoy  = lShowRoy
		            glAcctDesc = lAcctDesc
		            glRefID    = lRefID
		            glExpSum   = lExpSum
		            glChgPrice = lChgPrice
		            glDirRoy   = lDirRoy
		            gnGather   = nGather
		            gnCompress = nCompress
		            glDirInv   = lDirInv
		            llStmComp  = lStmComp
		
		*  Get the suspense processing flag from group definition
		            swselect('groups')
		            SET ORDER TO cgroup
		            IF SEEK(THISFORM.cgroup)
		                THIS.lNetWells = lNetDef
		            ELSE
		                THIS.lNetWells = .T.
		            ENDIF
		
		            SELECT statemnt
		            COUNT FOR lWellPage TO llPageCnt
		
		            THISFORM.cReportName = m.goapp.cRptsFolder + 'dmrostmt1a'
		
		            m.cGrpName = ' '
		
		            SELECT (lcAlias)
		
		            glGrpName = THIS.oOptions.lGrpName
		
		*
		*  Check to see if the requirements for calling this method are met.
		*
		            IF TYPE('this.ctitle1') <> 'C'
		                THIS.ctitle1 = ''
		            ENDIF
		            IF TYPE('this.ctitle2') <> 'C'
		                THIS.ctitle2 = ''
		            ENDIF
		
		            lcAlias = ALIAS()
		
		*
		*  Check on using group name in place of company name
		*
		            IF glGrpName
		                swselect('groups')
		                SET ORDER TO cgroup
		                IF SEEK(THISFORM.cgroup)
		                    m.cGrpName = cDesc
		                ELSE
		                    m.cGrpName = ''
		                ENDIF
		            ELSE
		                m.cGrpName = ''
		            ENDIF
		
		*
		*  Make the cProducer variable a default value for development purposes
		*
		            IF TYPE('m.goApp') = 'O'
		                m.cProducer  = m.goapp.cCompanyName
		                m.cProcessor = m.goapp.cAgentName
		            ELSE
		                m.cProducer  = 'Development Company, Inc.'
		                m.cProcessor = ''
		            ENDIF
		
		            IF TYPE('m.cProcessor') <> 'C'
		                m.cProcessor = ''
		            ENDIF
		
		            lcTitle1    = THISFORM.ctitle1
		            lcTitle2    = THISFORM.ctitle2
		            lcSortOrder = THISFORM.cSortOrder
		            lcSelect    = THISFORM.cSelectCriteria
		
		*
		*  Set defaults for titles and criteria if not in correct format
		*
		            IF TYPE('lcTitle1') <> 'C'
		                lcTitle1 = ''
		            ENDIF
		            IF TYPE('lcTitle2') <> 'C'
		                lcTitle2 = ''
		            ENDIF
		            IF TYPE('lcSortOrder') <> 'C'
		                lcSortOrder = ''
		            ENDIF
		            IF TYPE('lcSelect') <> 'C'
		                lcSelect = ''
		            ENDIF
		
		            SELECT (lcAlias)
		
		            lcRptsName = THISFORM.createtempfile()
		
		            SELE cownerid FROM statemnt INTO CURSOR temp ORDER BY cownerid GROUP BY cownerid
		            lnCount            = _TALLY
		            THISFORM.oprogress = THISFORM.omessage.progressbar('Building Owner Statement Files To Transfer...')
		            THISFORM.oprogress.setprogressrange(0, lnCount)
		            SELE 0
		            IF llNewFormat
		               m.ctype = 'OS'
		            ELSE
		               m.ctype = 'O'
		            ENDIF    
		            m.ddate = tdAcctDate
		            lnCount = 1
		            SET REPORTBEHAVIOR 80
		            SELE temp
		            SCAN
		                m.cownerid = cownerid
		                IF THISFORM.PAGES.page1.chkonlyUpload.VALUE
		                    SWSELECT('investor')
		                    SET ORDER TO cownerid
		                    IF SEEK(m.cownerid) AND NOT investor.lOnlineRpts
		                        SELECT statemnt
		                        DELETE FOR cownerid == m.cownerid
		                        LOOP
		                    ENDIF
		                ENDIF
		                THIS.addemail(m.cownerid, 1, tnRunNo, tcYear, tdAcctDate)
		                THISFORM.oprogress.updateprogress(lnCount)
		                lnCount = lnCount + 1
		                lcOwnerID = this.FormatOwnerID(temp.cownerid)
		                lcFile  = 'OS' + '_' + ALLTRIM(lcOwnerID) + '_' + tcYear + '_' + PADL(ALLT(STR(tnRunNo)), 3, '0') + ".pdf"
		                lcFile  = STRTRAN(lcFile, ' ', '_')
		                INSERT INTO (lcRptsName) VALUE(m.ctype, temp.cownerid, m.ddate, lcFile)
		                m.coslink = 'https://'+ALLTRIM(thisform.pages.page2.txtsiteName.Value) + '/displayreport.or?filename=' + ALLTRIM(lcFile)
		
		                SELECT tempemail
		                LOCATE FOR cownerid == m.cownerid
		                IF NOT FOUND()
		                   INSERT INTO tempemail FROM MEMVAR 
		                ELSE
		                   REPLACE lownerstmt WITH .t.,;
		                           coslink   WITH m.coslink
		                ENDIF    
		                SELE statemnt
		                SET FILT TO cownerid == m.cownerid
		
		* Only send to pdf when the option to only send report definitions isn't enabled
		                IF NOT THISFORM.PAGES.page1.chkReportDefs.VALUE
		                    TRY
		                        THIS.cAlias = 'statemnt'
		                        IF llOldStmt
		                            THISFORM.cReportName = m.goapp.cRptsFolder + 'dmrownstmt1.frx'
		                        ELSE
		                            THISFORM.cReportName = m.goapp.cRptsFolder + 'dmrostmt1a.frx'
		                        ENDIF
		                        lcOutputFile = ADDBS(ALLTRIM(m.goapp.cCommonFolder)) + 'ONLINE\' + lcFile
		                        llReturn     = THIS.CreatePDF(lcOutputFile)
		                    CATCH
		                        THIS.printing_error()
		                        SELECT temp
		                        GO BOTT
		                        THIS.lErrorFound = .T.
		                    ENDTRY
		                ENDIF
		            ENDSCAN
		            SET REPORTBEHAVIOR 90
		            USE IN (lcRptsName)
		            THISFORM.oprogress.CloseProgress()
		            THISFORM.oprogress = .NULL.
		            ownstmt            = .NULL.
		            RELE ownstmt
		        ENDIF
		    ENDIF
		CATCH TO loError
		    llReturn = .F.
		    DO errorlog WITH 'OwnerStmts', loError.LINENO, 'DMROnline', loError.ERRORNO, loError.MESSAGE, '', loError
		    MESSAGEBOX('Unable to upload the owner stmts at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		          'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		RETURN llReturn
		SET PRINTER TO DEFAULT
		
		
		
		
		
		
	ENDPROC

	PROCEDURE ownerstubs
		LOCAL tcYear, tcPeriod, tcGroup, tcOwner1, tcOwner1Name, tcOwner2, tcOwner2Name, oDist, lcTemp
		LOCAL oOwner AS 'swowner'
		LOCAL lcFile, lcOutputFile, lcRptsName, llDistProc, llNoExpense, llReturn, lnCount, loError
		*:Global cID, cProducer, ctype, ddate, gcCheckNo, glAcctDesc, glDefStmt, glDirInv, glDirRoy
		*:Global glDirWork, glExpDate, glIncZero, glMinStmt, glNetSusp, glSkipPerf, glStmComp, glStminv
		*:Global glZeroStmt, gnMinCheck, gnStubLine, tcDMBatch, tdAcctDate, tlOnlyUpload, tnRunNo
		PRIV lnCount, lnMaxLines, lcidChec, lnMax, lnProcess, llDistProc
		
		IF THIS.lErrorFound = .T.
		    RETURN
		ENDIF
		
		llReturn = .T.
		llNewFormat = .t.
		
		TRY
		    tcYear       = THISFORM.PAGES.page1.runcombo1.LISTITEM[thisform.pages.page1.runcombo1.listitemid, 2]
		    tnRunNo      = INT(VAL(THISFORM.PAGES.page1.runcombo1.LISTITEM[thisform.pages.page1.runcombo1.listitemid, 3]))
		    tcGroup      = THISFORM.PAGES.page1.runcombo1.LISTITEM[thisform.pages.page1.runcombo1.listitemid, 4]
		    tcDMBatch    = THISFORM.PAGES.page1.runcombo1.LISTITEM[thisform.pages.page1.runcombo1.listitemid, 5]
		    tcOwner1     = THISFORM.PAGES.page1.swrptlook1.txtBegID.VALUE
		    tcOwner1Name = ALLTRIM(THISFORM.PAGES.page1.swrptlook1.txtBegName.VALUE)
		    tcOwner2     = THISFORM.PAGES.page1.swrptlook1.txtEndID.VALUE
		    tcOwner2Name = ALLTRIM(THISFORM.PAGES.page1.swrptlook1.txtEndName.VALUE)
		    tdAcctDate   = CTOD(THISFORM.PAGES.page1.runcombo1.LISTITEM[thisform.pages.page1.runcombo1.listitemid, 7])
		    tlOnlyUpload = THISFORM.PAGES.page1.chkOnlyUpload.VALUE
		    llSelected   = thisform.Pages.Page1.chkselected.Value 
		   
		   IF NOT llSelected
		      SELECT cownerid AS cid FROM investor ;
		         INTO CURSOR SELECTED ;
		         WHERE BETWEEN(cownerid,tcOwner1,tcOwner2) ;
		         ORDER BY cid
		   ENDIF
		
		    CREATE CURSOR stub ;
		        (cID             C(10), ;
		          cidtype         C(1), ;
		          cpayee          C(40), ;
		          cprogcode       C(10), ;
		          ccheckno        C(10), ;
		          cidchec        C(8), ;
		          cwellid         C(10), ;
		          cwellname       C(30), ;
		          nincome         N(9, 2), ;
		          nbbl           N(12, 2), ;
		          cIncType       C(1), ;
		          nmcf           N(12, 2), ;
		          noth           N(12, 2), ;
		          nbblprice      N(12, 6), ;
		          nmcfprice      N(12, 6), ;
		          noilrev        N(12, 2), ;
		          ngasrev        N(12, 2), ;
		          nothrev        N(12, 2), ;
		          cIntType       C(1), ;
		          cDesc          C(60), ;
		          cinvnum        C(15), ;
		          dinvdate       D, ;
		          nworkint        N(11, 7), ;
		          dcheckdate     D, ;
		          ninvtot        N(12, 2), ;
		          namtpaid       N(12, 2), ;
		          ndisctot       N(12, 2), ;
		          namount         N(12, 2), ;
		          dproddate      D, ;
		          nexpense        N(9, 2), ;
		          ntaxes          N(9, 2), ;
		          nnetcheck       N(9, 2), ;
		          creference     C(20), ;
		          nOTHER          N(9, 2), ;
		          cprodprd       C(5), ;
		          nunits          N(12, 2), ;
		          nprice          N(12, 2), ;
		          ntotalinc       N(12, 2), ;
		          ntax1           N(12, 2), ;
		          ntax2           N(12, 2), ;
		          ntax3           N(12, 2), ;
		          ntax4           N(12, 2), ;
		          nexpcl0        N(12, 2), ;
		          nexpcl1        N(12, 2), ;
		          nexpcl2        N(12, 2), ;
		          nexpcl3        N(12, 2), ;
		          nexpcl4        N(12, 2), ;
		          nexpcl5        N(12, 2), ;
		          nrevtax1        N(11, 7), ;
		          nrevtax2        N(11, 7), ;
		          nrevtax3        N(11, 7), ;
		          nrevtax4        N(11, 7), ;
		          nrevtax5        N(11, 7), ;
		          nrevtax6        N(11, 7), ;
		          nrevtax7        N(11, 7), ;
		          nrevtax8        N(11, 7), ;
		          nrevtax9        N(11, 7), ;
		          nrevtax10       N(11, 7), ;
		          nrevtax11      N(11, 7), ;
		          nrevtax12      N(11, 7), ;
		          nnetval        N(12, 2), ;
		          ninterest      N(11, 7), ;
		          nowngross      N(12, 2), ;
		          cGROUP          C(2))
		    INDEX ON cID + cGROUP + cprogcode TAG cID
		    INDEX ON cidchec TAG cidchec
		
		*
		*  Setup Global Options
		*
		    swselect('options')
		    GO TOP
		    glAcctDesc = lacctdesc
		    glIncZero  = .T.
		    glStmComp  = lstmcomp
		    glStminv   = lstminv
		    glDirInv   = ldirinv
		    glZeroStmt = lzerostmt
		    glDefStmt  = ldefstmt
		    glMinStmt  = lminstmt
		    gnMinCheck = nmincheck
		    gcCheckNo  = ccheckno
		    glDirRoy   = ldirroy
		    glDirWork  = lDirWork
		    glExpDate  = lExpDate
		    glSkipPerf = lSkipPerf
		    gnStubLine = nStubLine
		
		    llDistProc = .F.
		
		    IF FILE('nostubexp.dat')
		        llNoExpense = .T.
		    ELSE
		        llNoExpense = .F.
		    ENDIF
		
		    SELECT('groups')
		    SET ORDER TO cGROUP
		    IF SEEK(tcGroup)
		        glNetSusp        = lNetDef
		        THISFORM.ctitle1 = ALLT(cDesc)
		    ELSE
		        glNetSusp = .T.
		    ENDIF
		
		    SELE cID AS cOwnerID FROM checks WHERE cBatch = tcDMBatch and BETWEEN(cid,tcOwner1,tcOwner2) INTO CURSOR tempchks ORDER BY cID
		
		*
		*  Call distproc to create the (invtmp) and (wellwork) cursors
		*
		    oDist = CREATEOBJECT('distproc', tcOwner1, tcOwner2, ;
		          '01', ;
		          tcYear, ;
		          tcGroup, 'O', DATE(), .F., tnRunNo)
		    oDist.MAIN()
		    RELEASE oDist
		
		    oOwner = CREATEOBJECT('swowner')
		    oOwner.OwnerStub(.T., tcYear, tnRunNo, tcOwner1, tcOwner2, .F.)
		    RELEASE oOwner
		
		    THISFORM.cReportName = m.goapp.cRptsFolder + 'dmrostub'
		    m.cProducer          = m.goapp.cCompanyName
		
		    IF EMPTY(m.cProducer)
		        m.cProducer = 'Sample Operating Company'
		    ENDIF
		
		    lcTemp = ADDBS(ALLTRIM(m.goapp.cCommonFolder)) + 'ONLINE\'
		
		*
		*  Set filter for stub report
		*
		    SET REPORTBEHAVIOR 90
		    SELECT stub
		    COUNT FOR BETWEEN(cID, tcOwner1, tcOwner2) TO lnCount
		    IF lnCount > 0
		        lcRptsName = THISFORM.createtempfile()
		        IF NOT '*' $ lcRptsName
		            SELE cID FROM stub WHERE BETWEEN(cID, tcOwner1, tcOwner2) INTO CURSOR temp ORDER BY cID GROUP BY cID
		            lnCount            = _TALLY
		            THISFORM.oprogress = THISFORM.omessage.progressbar('Building Owner Stub Files To Transfer...')
		            THISFORM.oprogress.setprogressrange(0, lnCount)
		            SELE 0
		            IF llNewFormat
		               m.ctype = 'SS'
		            ELSE    
		               m.ctype = 'O'
		            ENDIF    
		            m.ddate = tdAcctDate
		            lnCount = 1
		
		            SELE temp
		            SCAN
		                m.cID = cID
		                IF THISFORM.PAGES.page1.chkOnlyUpload.VALUE
		                    swselect('investor')
		                    SET ORDER TO cOwnerID
		                    IF SEEK(m.cID) AND NOT investor.lOnlineRpts
		                        SELECT stub
		                        DELETE FOR cID == m.cID
		                        LOOP
		                    ENDIF
		                ENDIF
		
		                THIS.addemail(m.cID, 2, tnRunNo, tcYear, tdAcctDate)
		                THISFORM.oprogress.updateprogress(lnCount)
		                lnCount = lnCount + 1
		                lcOwnerID = thisform.FormatOwnerID(temp.cID)
		                lcFile  = 'SS' + '_' + ALLTRIM(lcOwnerID) + '_' + tcYear + '_' + PADL(ALLT(STR(tnRunNo)), 3, '0') + ".pdf"
		                lcFile  = STRTRAN(lcFile, ' ', '_')
		                INSERT INTO (lcRptsName) VALUE(m.ctype, temp.cID, m.ddate, lcFile)
		                m.cownerid = m.cID
		                m.csslink = 'https://'+ALLTRIM(thisform.pages.page2.txtsiteName.Value) + '/displayreport.or?filename=' + ALLTRIM(lcFile)
		                SELECT tempemail
		                LOCATE FOR cownerid == m.cownerid
		                IF NOT FOUND()
		                   INSERT INTO tempemail FROM MEMVAR 
		                ELSE
		                   REPLACE lownerstub WITH .t.,;
		                           csslink   WITH m.csslink
		                ENDIF    
		* Only send to pdf when the option to only send report definitions isn't enabled
		                IF NOT THISFORM.PAGES.page1.chkReportDefs.VALUE
		                    TRY
		                        SELE stub
		                        SET FILT TO cID == m.cID
		* Specify PDF output file name.
		                        lcOutputFile     = lcTemp + lcFile
		                        THISFORM.cAlias  = 'Stub'
		                        THIS.cReportName = m.goapp.cRptsFolder + 'dmrostub.frx'
		                        llReturn         = THIS.CreatePDF(lcOutputFile)
		                    CATCH TO loError
		                        THIS.printing_error()
		                        SELECT temp
		                        GO BOTT
		                        THIS.lErrorFound = .T.
		                    ENDTRY
		                ENDIF
		            ENDSCAN
		            USE IN (lcRptsName)
		            THISFORM.oprogress.CloseProgress()
		            THISFORM.oprogress = .NULL.
		            oDist              = .NULL.
		            RELEASE oDist
		        ENDIF
		    ENDIF
		    SET REPORTBEHAVIOR 90
		    SET PRINTER TO DEFAULT
		CATCH TO loError
		    llReturn = .F.
		    DO errorlog WITH 'OwnerStubs', loError.LINENO, 'DMronline', loError.ERRORNO, loError.MESSAGE, '', loError
		    MESSAGEBOX('Unable to upload the owner stubs at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		          'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		RETURN llReturn 
	ENDPROC

	PROCEDURE prevmins		&& Brings in Previous Minimums
	ENDPROC

	PROCEDURE printing_error		&& This gets called when there's a problem with the PDF printer driver.  Does a messagebox to let the user know.
		 MESSAGEBOX('There is a problem with the SherWare PDF Printer driver. ' + CHR(10) + ;
		            'Please try reinstalling the driver by running the INSTALL.EXE ' + CHR(10) + ;
		            'application found in the PDF subfolder.',16,'PDF Printer Driver Problem')
		
		RETURN 
	ENDPROC

	PROCEDURE process
		LOCAL llFTP, lnReports, lcTemp, lnResult
		
		llFTP = .F.
		STORE 0 TO lnResult, lnReports
		llResult = .t.
		
		lcTemp = ADDBS(ALLTRIM(m.goApp.cCommonFolder))+'Online\'
		
		thisform.nFilesToUpload = 0
		
		* Get the zip file name for all the reports
		THISFORM.cZipFile = lcTemp+SYS(2015)+'.zip'
		
		IF NOT THISFORM.PAGES.page1.chkemailOnly.VALUE
		
		    IF NOT USED('tempemail')
		        CREATE CURSOR tempemail ;
		            (cownerid   c(10), ;
		              cemail     c(120), ;
		              nrunno     I, ;
		              crunyear   c(4), ;
		              dacctdate  d, ;
		              lOwnerStmt L, ;
		              coslink   c(128), ;
		              lOwnerStub L, ;
		              csslink   c(128), ;
		              lOwnerJIB  L, ;
		              cjblink   c(128), ;
		              lOwner1099Misc L, ;
		              c1099Misclink c(128),;
		              lOwner1099Nec L, ;
		              c1099Neclink c(128),;
		              lOwner1099R L, ;
		              c1099Rlink c(128))
		    ENDIF
		    
		    IF THISFORM.PAGES.page1.chkUpOwnStmt.VALUE = .T.
		      THISFORM.ownerstmts()
		      llFTP = .T.
		   ENDIF
		
		   IF THISFORM.PAGES.page1.chkUpOwnStub.VALUE = .T.
		      THISFORM.ownerstubs()
		      llFTP = .T.
		   ENDIF
		
		   IF THISFORM.PAGES.page1.chkUpOwnJIB.VALUE = .T.
		      THISFORM.ownerjibs()
		      llFTP = .T.
		   ENDIF
		
		   IF THISFORM.PAGES.page1.chk1099s.VALUE = .T.
		      THISFORM.ten99()
		      llFTP = .T.
		   ENDIF
		   
		   IF THISFORM.PAGES.page1.chkOwnerRec.VALUE = .T.
		      THISFORM.ten99rec()
		      llFTP = .T.
		   ENDIF
		   
		   IF THISFORM.PAGES.page1.chkusers.VALUE = .T.
		      THISFORM.USERS()
		      llFTP = .T.
		   ENDIF
		
		   IF THISFORM.PAGES.page2.chkUseFTP.VALUE
		      IF llFTP
		         llResult = THISFORM.ftpupload()
		      ENDIF
		   ELSE
		      IF llFTP
		         THISFORM.copyreports()
		      ENDIF
		   ENDIF
		ENDIF
		
		IF THISFORM.PAGES.page1.chksendemail.VALUE = .T. AND llResult
		   THISFORM.sendemail()
		ENDIF
		
		IF NOT THIS.lerror AND NOT THIS.lErrorFound AND llResult 
		   IF llFTP
		      IF THISFORM.PAGES.page1.chksendemail.VALUE = .T.
		         MESSAGEBOX('Finished uploading reports and sending email...' + CHR(10) + ;
		            'Uploaded: ' + TRANSFORM(THISFORM.nFilesToUpload,'999,999') + ' reports uploaded and ' + TRANSFORM(thisform.nUserCount,'999,999') + ' users.',64,'Report Upload')
		      ELSE
		         IF (thisform.pages.page1.chk1099s.Value OR ;
		            thisform.pages.page1.chkUpOwnJIB.Value OR ;
		            thisform.pages.pAGE1.chkupOwnStmt.Value OR ;
		            thisform.pages.PaGE1.chkupOwnStub.value OR ;
		            thisform.pages.PAGE1.chkOwnerRec.value) AND llResult
		           MESSAGEBOX('Finished uploading reports...' + CHR(10) + ;
		               'Uploaded: ' + TRANSFORM(THISFORM.nFilesToUpload,'999,999') + ' reports uploaded and ' + TRANSFORM(thisform.nUserCount,'999,999') + ' users.',64,'Report Upload')
		        ELSE
		           IF thisform.nUserCount > 0 AND llResult
		              MESSAGEBOX('Finished uploading user records...' + CHR(10) + ;
		               'Uploaded: ' + TRANSFORM(thisform.nUserCount,'999,999') + ' users.',64,'User Upload')
		           ELSE
		             MESSAGEBOX('Nothing found to upload!',48,'Report Upload')
		           ENDIF 
		        ENDIF        
		      ENDIF
		   ELSE
		      IF THISFORM.PAGES.page1.chksendemail.VALUE = .T. AND llResult
		         THISFORM.omessage.DISPLAY('Finished sending email...')
		      ENDIF
		   ENDIF
		ENDIF
		
	ENDPROC

	PROCEDURE pulltype		&& Remove owner types not being reported.
	ENDPROC

	PROCEDURE rounding		&& Reports rounding
	ENDPROC

	PROCEDURE saveconfig
	ENDPROC

	PROCEDURE sendemail
		LOCAL lcSender, lcMailServer, lcSenderName, llDirectDepOnly
		
		#DEFINE CRLF  CHR(13)+CHR(10)
		
		IF THIS.lerrorfound = .T.
		   RETURN
		ENDIF
		
		* If wwipstuff.dll doesn't exist on the pc, tell them to send an email themselves
		IF NOT FILE('wwipstuff.dll')
		   THISFORM.omessage.DISPLAY('Missing critical file for sending email. Please contact SherWare support.')
		   RETURN
		ENDIF
		
		llDirectDepOnly = THISFORM.PAGES.page1.chkOnlyDirectDep.VALUE
		
		tcOwner1    = THISFORM.PAGES.page1.swrptlook1.txtBegID.VALUE
		tcOwner2    = THISFORM.PAGES.page1.swrptlook1.txtEndID.VALUE
		tlEmailOnly = THISFORM.PAGES.page1.chkemailOnly.VALUE
		llUseTLS    = thisform.pages.page2.chkUseTLS.Value
		llOS        = THISFORM.PAGES.page1.chkupownstmt.VALUE
		llSS        = THISFORM.PAGES.page1.chkupownstub.VALUE
		llJB        = THISFORM.PAGES.page1.chkupownjib.VALUE
		ll99        = THISFORM.PAGES.page1.chk1099s.VALUE
		lcYear      = THISFORM.PAGES.page1.runcombo1.LISTITEM[thisform.pages.page1.runcombo1.listitemid, 2]
		lnRunNo     = INT(VAL(THISFORM.PAGES.page1.runcombo1.LISTITEM[thisform.pages.page1.runcombo1.listitemid, 3]))
		
		IF NOT USED('bademails')
		   CREATE CURSOR bademails ;
		      (cownerid   c(10), ;
		      cownname   c(60), ;
		      cemail     c(120), ;
		      cmessage   c(254))
		ENDIF
		
		swselect('options')
		GO top
		
		IF NOT USED('offr1')
		   USE (m.goapp.cdatafilepath+'offr1') IN 0
		ENDIF
		
		llAsync = .F.
		
		SELE offr1
		GO TOP
		IF NOT thisform.lUseEmailPrefs
		   lcSender     = offr1.cMailAddr
		   lcSenderName = m.goapp.ccompanyname
		   lcMailServer = offr1.cMailServ
		   lcEmailUser  = offr1.cEmailUser
		   lcEmailPass  = offr1.cEmailPass
		   lnSMTPPort   = offr1.iSMTPPort
		   llUseOutlook = .f.
		ELSE
		   lcSender = options.cemailaddress
		   lcSenderName = m.goapp.ccompanyname
		   lcMailServer = options.cemailserver
		   lcEmailUser  = options.cemailuser
		   lcEmailPass = options.cemailpass
		   lnSMTPPort  = options.nsmtpport
		   llUseTLS    = options.lusessl
		   llUseOutlook = options.lUseOutlook
		ENDIF 
		   
		IF NOT '@' $ lcSender
		   THISFORM.omessage.DISPLAY('Invalid company email address. Cannot send emails.')
		   RETURN
		ENDIF
		
		*  Here, we'll send an email automatically to let us know the backup is there
		
		IF NOT THISFORM.PAGES.page1.chkupownstmt.VALUE AND ;
		      NOT THISFORM.PAGES.page1.chkupownstub.VALUE AND ;
		      NOT THISFORM.PAGES.page1.chkupownjib.VALUE AND ;
		      NOT THISFORM.PAGES.page1.chk1099s.VALUE
		
		   IF llDirectDepOnly
		      SELE cownerid, cemail ;
		         FROM investor ;
		         WHERE NOT EMPTY(cemail);
		           AND BETWEEN(cownerid,tcOwner1,tcOwner2) ;
		           AND ldirectdep ;
		           AND cownerid in (select cownerid from disbhist where crunyear = lcYear and nrunno = lnRunNo and nnetcheck # 0) ;
		           INTO CURSOR temp
		   ELSE
		      SELE cownerid, cemail ;
		         FROM investor ;
		         WHERE NOT EMPTY(cemail) ;
		           AND BETWEEN(cownerid,tcOwner1,tcOwner2) ;
		           AND cownerid in (select cownerid from disbhist where crunyear = lcYear and nrunno = lnRunNo and nnetcheck # 0) ;
		         INTO CURSOR temp
		   ENDIF
		
		   STORE .F. TO m.lownerstmt, m.lownerstub, m.lownerjib, m.lowner1099
		   m.dacctdate = DATE()
		   m.nrunno = 0
		   m.crunyear = ''
		
		   SELE temp
		   SCAN
		      SCATTER MEMVAR
		      THIS.addemail(m.cownerid, 5, 0, '', DATE())
		   ENDSCAN
		ENDIF
		
		IF USED('tempemail')
		   * Send email to each owner in the tempemail file.
		   SELE tempemail
		   SCAN FOR NOT EMPTY(cemail)
		     SCATTER MEMVAR 
		      IF llDirectDepOnly
		         SELE investor
		         LOCATE FOR cownerid == tempemail.cownerid
		         IF FOUND()
		            IF NOT ldirectdep
		               LOOP
		            ENDIF
		         ELSE
		            LOOP
		         ENDIF
		      ENDIF
		
		      lcBody     = offr1.memailtxt
		      IF EMPTY(offr1.cSubject)
		         lcSubject = "New Statements Available Online"
		      ELSE
		         lcSubject = ALLTRIM(offr1.csubject)
		      ENDIF    
		      lcBody = ALLTRIM(lcBody) + CRLF + CRLF + ;
		         'Your username for the online site is: ' + tempemail.cownerid + CRLF + ;
		         'The following statements have been uploaded:' + CRLF + CRLF
		      IF tempemail.lownerstmt
		         lcBody = lcBody + '  -Owner Distribution Statement - Dated: ' + DTOC(tempemail.dacctdate) + ' ' + m.coslink + CRLF + CRLF
		      ENDIF
		      IF tempemail.lownerstub
		         lcBody = lcBody + '  -Owner Stub Statement - Dated: ' + DTOC(tempemail.dacctdate) + ' ' + m.csslink  + CRLF + CRLF
		      ENDIF
		      IF tempemail.lownerjib
		         lcBody = lcBody + '  -Owner JIB Statement - Dated: ' + DTOC(tempemail.dacctdate) + ' ' + m.cjblink  + CRLF + CRLF
		      ENDIF
		      IF tempemail.lowner1099Misc
		         lcBody = lcBody + '  -Owner 1099 Misc Statement - Dated: ' + DTOC(tempemail.dacctdate) + ' ' + m.c1099Misclink  + CRLF + CRLF
		      ENDIF
		      IF tempemail.lowner1099Nec
		         lcBody = lcBody + '  -Owner 1099 NEC Statement - Dated: ' + DTOC(tempemail.dacctdate) + ' ' + m.c1099Neclink  + CRLF + CRLF
		      ENDIF
		       IF tempemail.lowner1099R
		         lcBody = lcBody + '  -Owner 1099 Reconciliation Statement - Dated: ' + DTOC(tempemail.dacctdate) + ' ' + m.c1099Rlink  + CRLF + CRLF
		      ENDIF
		
		      WAIT WIND NOWAIT "Sending Email To: " + tempemail.cownerid
		      oSendMail = swEmailReport(ALLTRIM(tempemail.cEmail),;
		                                ALLTRIM(lcSubject), ;
		                                'None', ;
		                                .f., ;
		                                ALLTRIM(lcBody), ;
		                                ALLTRIM(lcSender), ;
		                                ALLTRIM(lcMailServer), ;
		                                ALLTRIM(lcEmailUser), ;
		                                ALLTRIM(lcEmailPass), ;
		                                lnSMTPPort, ;
		                                llUseTLS, ;
		                                llAsync, ;
		                                llUseOutLook)
		
		      IF NOT osendmail.lResult
		         m.cemail = tempemail.cemail
		         m.cownerid = tempemail.cownerid
		         m.cmessage = osendmail.cerrormsg
		         swselect('investor')
		         SET ORDER TO cownerid
		         IF SEEK(m.cownerid)
		            m.cownname = cownname
		         ELSE
		            m.cownname = ''
		         ENDIF
		         INSERT INTO bademails FROM MEMVAR
		      ELSE
		         WAIT WINDOW NOWAIT "Message sent..."
		      ENDIF
		      INKEY(.5)
		   ENDSCAN
		
		   SELE bademails
		   IF RECC() > 0
		      REPORT FORM dmrbademail TO PRINTER PROMPT PREVIEW NOCONSOLE
		   ENDIF
		ELSE
		   thisform.omessage.warning('There were no owners with valid email addresses in the range of owners selected.')
		ENDIF
		
		swclose('tempemail')
		RETURN
		
	ENDPROC

	PROCEDURE stmtnotes		&& Brings in any statement notes.
	ENDPROC

	PROCEDURE ten99
		LOCAL tcyear, tntype, tcid1, tcid2, lcReportName, lcTemp
		LOCAL lcAlias, lcFile, lcOutputFile, lcRptsName, lcSelect, lcSortOrder, lcTitle1, lcTitle2
		LOCAL lcdeleted, llReturn, lnCount, loError
		*:Global cid, cproducer, ctype, dDate, paddr1, paddr2, paddr3, pphoneno, ptaxid, tcOwner1, tcOwner2
		*:Global tdAcctDate
		
		IF THIS.lerrorfound = .T.
		   RETURN
		ENDIF
		
		llReturn = .T.
		
		TRY
		   llNewFormat = .T.
		   tcyear   = THISFORM.PAGES.page1.txtcyear.VALUE
		
		   tcOwner1 = THISFORM.PAGES.page1.swrptlook1.txtBegID.VALUE
		   tcOwner2 = THISFORM.PAGES.page1.swrptlook1.txtEndID.VALUE
		   llSelected   = THISFORM.PAGES.page1.chkselected.VALUE
		
		   IF NOT llSelected
		      SELECT cownerid AS cid FROM investor ;
		         INTO CURSOR SELECTED ;
		         WHERE BETWEEN(cownerid,tcOwner1,tcOwner2) ;
		         ORDER BY cid
		   ENDIF
		
		   THISFORM.ctitle1    = 'For Year: ' + tcyear
		   THISFORM.ctitle2    = ''
		   THISFORM.csortorder = 'ID'
		
		   lcdeleted = SET('Deleted')
		   SET DELETED ON
		
		   * Check on the existence of the application object
		   * if it doesn't exist, we're running in development
		   * mode and need to initialize the company address info.
		   IF TYPE('m.goApp') = 'O'
		      m.cproducer = m.goapp.ccompanyname
		      m.paddr1    = m.goapp.caddress1
		      m.paddr2    = m.goapp.caddress2
		      m.paddr3    = m.goapp.caddress3
		      m.ptaxid    = cmencrypt(m.goapp.ctaxid,m.goapp.cEncryptionKey)
		      m.pphoneno  = m.goapp.cphoneno
		   ELSE
		      m.cproducer = 'Developement Company'
		      m.paddr1    = 'PO Box 223'
		      m.paddr2    = 'Wooster, OH  44691'
		      m.paddr3    = ''
		      m.ptaxid    = '99-9999999'
		      m.pphoneno  = '330-682-5882'
		   ENDIF
		
		   SELECT  *, ;
		      m.cproducer AS cproducer, ;
		      m.paddr1 AS paddr1, ;
		      m.paddr2 AS paddr2, ;
		      m.paddr3 AS paddr3, ;
		      m.pphoneno AS pphoneno, ;
		      tcyear + ' 1099 MISC Replacement' AS ctitle,  ;
		      m.ptaxid   AS ptaxid ;
		      FROM tax1099 ;
		      WHERE cid IN (SELECT cid FROM SELECTED) ;
		      AND cidtype = 'I' ;
		      AND cyear  = tcyear ;
		      INTO CURSOR temp1099 READWRITE ;
		      ORDER BY cid
		
		   IF _TALLY > 0
		
		      * Mask the tax ids
		      SELECT temp1099
		      SCAN
		         REPLACE ctaxid WITH cmencrypt(ALLTRIM(ctaxid),m.goapp.cEncryptionKey)
		         *  If the 3rd character is a hyphen, it's a Fed ID #, so mask accordingly
		         IF SUBSTR(ctaxid, 3, 1) = '-'
		            REPLACE ctaxid WITH 'XX-XXX' + SUBSTR(ALLTRIM(ctaxid), 7, 4)
		         ENDIF
		         *  If the 4th character is a hyphen, it's a SSN, so mask accordingly
		         IF SUBSTR(ctaxid, 4, 1) = '-'
		            REPLACE ctaxid WITH 'XXX-XX-' + SUBSTR(ALLTRIM(ctaxid), 8, 4)
		         ENDIF
		         *  It's got a number of some kind in it, but it has no hyphens, so put some kind of a mask on it
		         IF NOT '-' $ ctaxid AND LEN(ALLTRIM(ctaxid)) > 8
		            REPLACE ctaxid WITH 'XXXXX' + SUBSTR(ctaxid, 6, 4)
		         ENDIF
		      ENDSCAN
		
		      THISFORM.GetFormats()
		
		      SET DELETED &lcdeleted
		
		      SELECT temp1099
		
		      *
		      *  Check to see if the requirements for calling this method are met.
		      *
		      IF TYPE('this.ctitle1') # 'C'
		         THIS.ctitle1 = ''
		      ENDIF
		      IF TYPE('this.ctitle2') # 'C'
		         THIS.ctitle2 = ''
		      ENDIF
		
		      lcAlias = ALIAS()
		
		      lcTitle1    = THISFORM.ctitle1
		      lcTitle2    = THISFORM.ctitle2
		      lcSortOrder = THISFORM.csortorder
		      lcSelect    = THISFORM.cSelectCriteria
		
		      *
		      *  Set defaults for titles and criteria if not in correct format
		      *
		      IF TYPE('lcTitle1') # 'C'
		         lcTitle1 = ''
		      ENDIF
		      IF TYPE('lcTitle2') # 'C'
		         lcTitle2 = ''
		      ENDIF
		      IF TYPE('lcSortOrder') # 'C'
		         lcSortOrder = ''
		      ENDIF
		      IF TYPE('lcSelect') # 'C'
		         lcSelect = ''
		      ENDIF
		
		      SELECT (lcAlias)
		
		      lcRptsName = THISFORM.createtempfile()
		
		      SELE cid FROM temp1099 INTO CURSOR temp ORDER BY cid GROUP BY cid
		
		      lnCount            = _TALLY
		      THISFORM.oprogress = THISFORM.omessage.progressbar('Building 1099 Files To Transfer...')
		      THISFORM.oprogress.setprogressrange(0, lnCount)
		      SELE 0
		
		
		      IF llNewFormat
		         m.ctype = '99'
		      ELSE
		         m.ctype = 'O'
		      ENDIF
		      lnCount = 1
		
		      tdAcctDate = CTOD('12/31/' + tcyear)
		      m.dDate    = tdAcctDate
		
		      * Set the temp location for the PDF files
		      lcTemp = ADDBS(ALLTRIM(m.goapp.ccommonfolder)) + 'ONLINE\'
		
		      SET REPORTBEHAVIOR 90
		      SELE temp
		      SCAN
		         m.cid = cid
		         IF THISFORM.PAGES.page1.chkonlyUpload.VALUE
		            swselect('investor')
		            SET ORDER TO cownerid
		            IF SEEK(m.cid) AND investor.lOnlineRpts
		               LOOP
		            ENDIF
		         ENDIF
		         THIS.addemail(m.cid, 4, 12, tcyear, tdAcctDate)
		         THISFORM.oprogress.updateprogress(lnCount)
		         lnCount   = lnCount + 1
		         lcOwnerID = THIS.FormatOwnerID(temp.cid)
		
		         m.cownerid  = m.cid
		
		         SELE temp1099
		         SET FILT TO cid == m.cid
		         GO TOP 
		         IF (nroyalty + nother + nrents + nattorney) # 0
		            lcFile    = 'ten99' + '_' + ALLTRIM(lcOwnerID) + '_' + 'MISC' + '_' +tcyear + ".pdf"
		            lcFile    = STRTRAN(lcFile, ' ', '_')
		            INSERT INTO (lcRptsName) VALUE(m.ctype, temp.cid, m.dDate, lcFile)
		
		            m.c1099Misclink = 'https://' + ALLTRIM(THISFORM.PAGES.page2.txtsiteName.VALUE) + '/displayreport.or?filename=' + ALLTRIM(lcFile)
		
		            SELECT tempemail
		            LOCATE FOR cownerid == m.cownerid
		            IF NOT FOUND()
		               INSERT INTO tempemail FROM MEMVAR
		            ELSE
		               REPLACE lowner1099Misc WITH .T., ;
		                  c1099Misclink   WITH m.c1099Misclink
		            ENDIF
		
		            * Only send to pdf when the option to only send report definitions isn't enabled
		            IF NOT THISFORM.PAGES.page1.chkReportDefs.VALUE
		               TRY
		                  lcOutputFile         = lcTemp + lcFile
		                  THISFORM.cAlias      = 'temp1099'
		                  THISFORM.cReportName = m.goapp.cRptsFolder+'1099s\ten99misc'
		                  lcTitle              = tcyear + ' 1099 MISC Replacement'
		                  THISFORM.ctitle1     = lcTitle
		                  llReturn             = THIS.CreatePDF(lcOutputFile)
		               CATCH
		                  MESSAGEBOX('There is a problem with the SherWare PDF Printer driver. ' + ;
		                     'Please try reinstalling the driver by running the INSTALL.EXE ' + ;
		                     'application found in the PDF subfolder.', 16, 'PDF Printer Driver Problem')
		                  SELECT temp
		                  GO BOTT
		                  THIS.lerrorfound = .T.
		               ENDTRY
		            ENDIF
		         ENDIF
		         SELE temp1099
		         GO TOP 
		         IF temp1099.nnonemp # 0
		            lcFile    = 'ten99' + '_' + ALLTRIM(lcOwnerID) + '_' + 'NEC' + '_' +tcyear + ".pdf"
		            lcFile    = STRTRAN(lcFile, ' ', '_')
		            INSERT INTO (lcRptsName) VALUE(m.ctype, temp.cid, m.dDate, lcFile)
		            m.c1099Neclink = 'https://' + ALLTRIM(THISFORM.PAGES.page2.txtsiteName.VALUE) + '/displayreport.or?filename=' + ALLTRIM(lcFile)
		            SELECT tempemail
		            LOCATE FOR cownerid == m.cownerid
		            IF NOT FOUND()
		               INSERT INTO tempemail FROM MEMVAR
		            ELSE
		               REPLACE lowner1099NEC WITH .T., ;
		                  c1099Neclink   WITH m.c1099Neclink
		            ENDIF
		
		            * Only send to pdf when the option to only send report definitions isn't enabled
		            IF NOT THISFORM.PAGES.page1.chkReportDefs.VALUE
		               TRY
		                  lcOutputFile         = lcTemp + lcFile
		                  THISFORM.cAlias      = 'temp1099'
		                  THISFORM.cReportName = m.goapp.cRptsFolder+'1099s\ten99necr'
		                  lcTitle              = tcyear + ' 1099 NEC Replacement'
		                  THISFORM.ctitle1     = lcTitle
		                  llReturn             = THIS.CreatePDF(lcOutputFile)
		               CATCH
		                  MESSAGEBOX('There is a problem with the SherWare PDF Printer driver. ' + ;
		                     'Please try reinstalling the driver by running the INSTALL.EXE ' + ;
		                     'application found in the PDF subfolder.', 16, 'PDF Printer Driver Problem')
		                  SELECT temp
		                  GO BOTT
		                  THIS.lerrorfound = .T.
		               ENDTRY
		            ENDIF
		         ENDIF
		      ENDSCAN
		      SET REPORTBEHAVIOR 90
		      USE IN (lcRptsName)
		      THISFORM.oprogress.CloseProgress()
		      THISFORM.oprogress = .NULL.
		   ENDIF
		CATCH TO loError
		   llReturn = .F.
		   DO errorlog WITH 'Ten99', loError.LINENO, 'DMRonline', loError.ERRORNO, loError.MESSAGE, '', loError
		   MESSAGEBOX('Unable to upload the 1099s at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		      'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		RETURN llReturn
		
		
		
		
		
	ENDPROC

	PROCEDURE ten99rec
		LOCAL lcYear, lcOwnerID1, lcOwnerID2, llSelected
		
		llReturn = .T.
		tlMask   = .F.
		
		TRY
		   swselect('tax1099det')
		
		   llNewFormat = .T.
		   tcyear   = THISFORM.PAGES.page1.txtcyear.VALUE
		
		   tcOwner1 = THISFORM.PAGES.page1.swrptlook1.txtBegID.VALUE
		   tcOwner2 = THISFORM.PAGES.page1.swrptlook1.txtEndID.VALUE
		   llSelected   = THISFORM.PAGES.page1.chkselected.VALUE
		
		   IF NOT llSelected
		      SELECT cownerid AS cid FROM investor ;
		         INTO CURSOR SELECTED ;
		         WHERE BETWEEN(cownerid,tcOwner1,tcOwner2) ;
		         ORDER BY cid
		   ENDIF
		
		   THISFORM.ctitle1         = ALLTRIM(tcYear) + ' Owner 1099 Reconciliation Statement'
		   THISFORM.ctitle2    = ''
		   THISFORM.csortorder = 'ID'
		
		   IF m.goapp.lPluggingModule
		      THISFORM.cReportname = m.goapp.cRptsFolder + 'ten99reconplug'
		   ELSE
		      THISFORM.cReportname = m.goapp.cRptsFolder + 'ten99recon'
		   ENDIF
		
		   IF NOT FILE(m.goapp.cRptsFolder + 'ten99reconplug.frx')
		      THISFORM.GetFormats()
		   ELSE
		      * Check to see if we need new report formats
		      lnFiles = ADIR(laRpts, m.goapp.cRptsFolder + 'ten99recon.frx')
		
		      llGetFormats = .F.
		
		      IF lnFiles > 0
		         FOR lnx = 1 TO lnFiles
		            IF LOWER(laRpts[lnx, 1]) = 'ten99recon.frx'
		               IF laRpts[lnx, 3] < {11/12/2019}
		                  llGetFormats = .T.
		                  lnx          = lnFiles + 1
		               ENDIF
		            ENDIF
		         ENDFOR
		      ENDIF
		      IF llGetFormats
		         THISFORM.GetFormats()
		      ENDIF
		   ENDIF
		
		   SELECT  *,;
		      SPACE(30) AS cCompanyName,;
		      SPACE(15) AS cOperTax ;
		      FROM tax1099det NOFILTER ;
		      WHERE cYear = tcYear  ;
		      AND cid IN (SELECT cid FROM SELECTED)  ;
		      INTO CURSOR temp1099r READWRITE  ;
		      ORDER BY cid, cWellTax, crptgroup, cWellName
		
		   IF !m.goapp.oSecurity.HasPrivilege('Tax Ids')
		      tlMask = .T.
		   ENDIF
		
		   SELECT temp1099r
		   SCAN
		      IF NOT EMPTY(cWellTax)
		         REPLACE cWellTax WITH cmEncrypt(ALLTRIM(cWellTax),m.goapp.cEncryptionKey)
		         REPLACE cCompanyName WITH cWellName, cOperTax WITH cWellTax
		      ELSE
		         REPLACE cCompanyName WITH m.goapp.cCompanyName, cOperTax WITH cmEncrypt(m.goapp.cTaxID,m.goapp.cEncryptionKey)
		      ENDIF
		      *  If masking tax ID numbers
		      REPLACE cTaxID WITH cmEncrypt(ALLTRIM(cTaxID), m.goapp.cEncryptionKey)
		      IF tlMask
		         *  If the 3rd character is a hyphen, it's a Fed ID #, so mask accordingly
		         IF SUBSTR(cTaxID, 3, 1) = '-'
		            REPLACE cTaxID WITH 'XX-XXX' + SUBSTR(ALLTRIM(cTaxID), 7, 4)
		         ENDIF
		         *  If the 4th character is a hyphen, it's a SSN, so mask accordingly
		         IF SUBSTR(cTaxID, 4, 1) = '-'
		            REPLACE cTaxID WITH 'XXX-XX-' + SUBSTR(ALLTRIM(cTaxID), 8, 4)
		         ENDIF
		         *  It's got a number of some kind in it, but it has no hyphens, so put some kind of a mask on it
		         IF NOT '-' $ cTaxID AND LEN(ALLTRIM(cTaxID)) > 8
		            REPLACE cTaxID WITH 'XXXXX' + SUBSTR(cTaxID, 6, 4)
		         ENDIF
		         *  If the 3rd character is a hyphen, it's a Fed ID #, so mask accordingly
		         IF SUBSTR(cOperTax,3,1) = '-'
		            REPLACE cOperTax WITH 'XX-XXX' + SUBSTR(ALLTRIM(cOperTax),7,4)
		         ENDIF
		         *  If the 4th character is a hyphen, it's a SSN, so mask accordingly
		         IF SUBSTR(cOperTax,4,1) = '-'
		            REPLACE cOperTax WITH 'XXX-XX-' + SUBSTR(ALLTRIM(cOperTax),8,4)
		         ENDIF
		         *  It's got a number of some kind in it, but it has no hyphens, so put some kind of a mask on it
		         IF NOT '-' $ cOperTax AND LEN(ALLTRIM(cOperTax)) > 8
		            REPLACE cOperTax WITH 'XXXXX' + SUBSTR(cOperTax,6,4)
		         ENDIF
		      ENDIF
		
		   ENDSCAN
		
		   *
		   *  Check to see if the requirements for calling this method are met.
		   *
		   IF TYPE('this.ctitle1') # 'C'
		      THIS.ctitle1 = ''
		   ENDIF
		   IF TYPE('this.ctitle2') # 'C'
		      THIS.ctitle2 = ''
		   ENDIF
		
		   lcAlias = ALIAS()
		
		   lcTitle1    = THISFORM.ctitle1
		   lcTitle2    = THISFORM.ctitle2
		   lcSortOrder = THISFORM.csortorder
		   lcSelect    = THISFORM.cselectcriteria
		
		   *
		   *  Set defaults for titles and criteria if not in correct format
		   *
		   IF TYPE('lcTitle1') # 'C'
		      lcTitle1 = ''
		   ENDIF
		   IF TYPE('lcTitle2') # 'C'
		      lcTitle2 = ''
		   ENDIF
		   IF TYPE('lcSortOrder') # 'C'
		      lcSortOrder = ''
		   ENDIF
		   IF TYPE('lcSelect') # 'C'
		      lcSelect = ''
		   ENDIF
		
		   SELECT (lcAlias)
		
		   lcRptsName = THISFORM.createtempfile()
		
		   SELE cid FROM temp1099r INTO CURSOR temprecons ORDER BY cid GROUP BY cid
		
		   lnCount            = _TALLY
		   THISFORM.oprogress = THISFORM.omessage.progressbar('Building 1099 Files To Transfer...')
		   THISFORM.oprogress.setprogressrange(0, lnCount)
		   SELE 0
		
		
		   IF llNewFormat
		      m.ctype = '9R'
		   ELSE
		      m.ctype = 'R'
		   ENDIF
		   lnCount = 1
		
		   tdAcctDate = CTOD('12/31/' + tcyear)
		   m.dDate    = tdAcctDate
		
		   * Set the temp location for the PDF files
		   lcTemp = ADDBS(ALLTRIM(m.goapp.ccommonfolder)) + 'ONLINE\'
		
		   SET REPORTBEHAVIOR 90
		   SELE temprecons
		   SCAN
		      m.cid = cid
		      IF THISFORM.PAGES.page1.chkonlyUpload.VALUE
		         swselect('investor')
		         SET ORDER TO cownerid
		         IF SEEK(m.cid) AND investor.lOnlineRpts
		            LOOP
		         ENDIF
		      ENDIF
		      THIS.addemail(m.cid, 1, 12, tcyear, tdAcctDate)
		      THISFORM.oprogress.updateprogress(lnCount)
		      lnCount   = lnCount + 1
		      lcOwnerID = THIS.FormatOwnerID(temprecons.cid)
		      lcFile    = 'ten9R' + '_' + ALLTRIM(lcOwnerID) + '_' + tcyear + ".pdf"
		      lcFile    = STRTRAN(lcFile, ' ', '_')
		      INSERT INTO (lcRptsName) VALUE(m.ctype, lcOwnerId, m.dDate, lcFile)
		      m.cownerid  = m.cid
		      m.c1099rlink = 'https://' + ALLTRIM(THISFORM.PAGES.page2.txtsiteName.VALUE) + '/displayreport.or?filename=' + ALLTRIM(lcFile)
		      SELECT tempemail
		      LOCATE FOR cownerid == m.cownerid
		      IF NOT FOUND()
		         INSERT INTO tempemail FROM MEMVAR
		      ELSE
		         REPLACE lowner1099r WITH .T., ;
		                 c1099rlink   WITH m.c1099rlink
		      ENDIF
		      SELE temp1099r
		      SET FILT TO cid == m.cid
		
		      * Only send to pdf when the option to only send report definitions isn't enabled
		      IF NOT THISFORM.PAGES.page1.chkReportDefs.VALUE
		         TRY
		            lcOutputFile         = lcTemp + lcFile
		            THISFORM.cAlias      = 'temp1099r'
		            llReturn             = THIS.CreatePDF(lcOutputFile)
		         CATCH TO loError
		            llreturn = .f.
		         ENDTRY
		      ENDIF
		   ENDSCAN
		   SET REPORTBEHAVIOR 90
		   USE IN (lcRptsName)
		   THISFORM.oprogress.CloseProgress()
		   THISFORM.oprogress = .NULL.
		CATCH TO loError
		   llReturn = .F.
		   DO errorlog WITH 'Ten99', loError.LINENO, 'DMRonline', loError.ERRORNO, loError.MESSAGE, '', loError
		   MESSAGEBOX('Unable to upload the 1099 reconciliations at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		      'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		RETURN llReturn
		
		
		
		
		
		
		
		
		
		
	ENDPROC

	PROCEDURE togglepassiveftp
	ENDPROC

	PROCEDURE Unload
		SET CENTURY ON
		on key label esc
		DODEFAULT()
	ENDPROC

	PROCEDURE users		&& Build temp usersx file to upload to website.
		LOCAL lnBadCount
		LOCAL lChangePwd, lDDInfo, llReturn, loError
		*:Global ADMIN, CREATED, EMAIL, EXPIRESON, PK, USERNAME, active, fh, fullname, password, tcOwner1
		*:Global tcOwner2
		
		llReturn = .T.
		
		TRY
		   lnBadCount = 0
		   swselect('investor')
		
		   tcOwner1 = THISFORM.PAGES.page1.swrptlook1.txtBegID.VALUE
		   tcOwner2 = THISFORM.PAGES.page1.swrptlook1.txtEndID.VALUE
		   llSelected   = THISFORM.PAGES.page1.chkselected.VALUE
		
		   IF NOT llSelected
		      SELECT cownerid AS cid FROM investor ;
		         INTO CURSOR SELECTED ;
		         WHERE BETWEEN(cownerid,tcOwner1,tcOwner2) ;
		         ORDER BY cid
		   ENDIF
		
		
		
		      llNewFormat = .T.
		      CREATE TABLE (m.goapp.cdatafilepath + 'usersx') FREE ;
		         (PK              i, ;
		         USERNAME        C(80), ;
		         PASSWORD        C(80), ;
		         FULLNAME        C(80), ;
		         MAPPEDID        C(40), ;
		         EMAIL           M, ;
		         NOTES           M, ;
		         PROPERTIES      M, ;
		         LOG             M, ;
		         ADMIN           L, ;
		         CREATED         T, ;
		         LASTON          T, ;
		         LEVEL           N(12,2), ;
		         LOGONCOUNT      i, ;
		         ACTIVE          L, ;
		         lChangePwd      L, ;
		         ddinfo          L, ;
		         EXPIRESON       D, ;
		         fpwd_token      C(38), ;
		         fpwd_exp        T)
		   
		   fh  = FCREATE('baduser.txt')
		
		   THISFORM.nUserCount = 0
		
		   SELECT * FROM investor ;
		      WHERE cownerid in (SELECT cid FROM selected) AND  ;
		      cownerid IN (SELECT cownerid FROM wellinv) ;
		      INTO CURSOR tempusers ;
		      ORDER BY cownerid
		
		   SCAN
		      IF THISFORM.PAGES.page1.chkonlyUpload.VALUE
		         IF NOT tempusers.lonlinerpts
		            LOOP
		         ENDIF
		      ENDIF
		
		      m.USERNAME = UPPER(tempusers.cownerid)
		      m.fullname = tempusers.csortfield
		
		      IF NOT EMPTY(ctaxid)
		         m.password = PADR(RIGHT(ALLT(cmEncrypt(ALLTRIM(tempusers.ctaxid),m.goapp.cEncryptionKey)), 4), 15, ' ')
		      ELSE
		         m.password = PADR(SUBSTR(tempusers.csortfield, 1, 4), 15, ' ')
		      ENDIF
		
		      IF EMPTY(m.password)
		         LOOP
		      ENDIF
		
		      m.CREATED    = DATE()
		      m.active     = .T.
		      m.EXPIRESON  = {12/31/2999}
		      m.ADMIN      = tempusers.lOnlineAdmin
		      m.EMAIL      = tempusers.cemail
		      IF NOT llNewFormat
		         m.PK         = TRANSFORM(THISFORM.nUserCount)
		      ELSE
		         m.PK         = THISFORM.nUserCount
		      ENDIF
		      m.MAPPEDID   = tempusers.cownerid
		      m.LASTON     = {}
		      m.lChangePwd = .T.
		      m.lDDInfo    = .F.
		      INSERT INTO usersx FROM MEMVAR
		      THISFORM.nUserCount = THISFORM.nUserCount + 1
		   ENDSCAN
		
		   = FFLUSH(fh)
		   = FCLOSE(fh)
		
		   IF lnBadCount > 0
		      MODI FILE baduser.txt
		   ENDIF
		CATCH TO loError
		   llReturn = .F.
		   DO errorlog WITH 'Users', loError.LINENO, 'DMROnline', loError.ERRORNO, loError.MESSAGE, '', loError
		   MESSAGEBOX('Unable to process the users at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		      'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		RETURN llReturn
		
		
		
		
		
		
		
		
	ENDPROC

	PROCEDURE pages.Page1.chkEmailOnly.Click
		IF this.Value
		   thisform.pages.page1.chkSendEmail.Value = .t.
		   thisform.pages.page1.chk1099s.Value = .f.
		   thisform.pages.page1.chkUpOwnJIB.Value = .f.
		   thisform.pages.page1.chkupOwnStmt.Value = .f.
		   thisform.pages.page1.chkupOwnStub.Value = .f.
		ENDIF 
		   
	ENDPROC

	PROCEDURE pages.Page1.chkOnlyDirectDep.Click
		IF this.Value
		   thisform.pages.page1.chkSendEmail.Value = .t.
		ENDIF 
		   
	ENDPROC

	PROCEDURE pages.Page1.chkSelected.Click
		IF this.Value
		   DO FORM commonsource\selected-ids WITH 'OWNER' LINKED 
		   lnCount = RECCOUNT('selected')
		   thisform.pages.page1.lblselected.Caption = TRANSFORM(lnCount) + ' Owners Selected'
		   thisform.pages.page1.lblselected.Visible = .T.
		   thisform.pages.page1.lblbegID.Visible = .F.
		   thisform.pages.page1.lblendID.Visible = .F.
		   thisform.pages.page1.swrptlook1.Visible = .F.
		ELSE
		   thisform.pages.page1.lblselected.Visible = .F.
		   thisform.pages.page1.lblbegID.Visible = .T.
		   thisform.pages.page1.lblendID.Visible = .T.
		   thisform.pages.page1.swrptlook1.Visible = .T.
		ENDIF 
	ENDPROC

	PROCEDURE pages.Page1.chkSendEmail.Click
		IF NOT this.Value
		   thisform.pages.page1.chkOnlyDirectDep.Value = .f.
		   thisform.pages.page1.chkemailOnly.Value = .f.
		ENDIF 
		   
	ENDPROC

	PROCEDURE pages.Page1.chkUpOwnJIB.Valid
		IF NOT this.Value
		   thisform.pages.page1.runcombo2.enabled = .f.
		ELSE
		   thisform.pages.page1.runcombo2.enabled = .t.
		ENDIF
		DODEFAULT()
	ENDPROC

	PROCEDURE pages.Page1.chkUpOwnStmt.Valid
		IF NOT this.Value AND NOT thisform.pages.page1.chkupownstub.Value
		   thisform.pages.page1.runcombo1.enabled = .f.
		ELSE
		   thisform.pages.page1.runcombo1.enabled = .t.
		ENDIF
		DODEFAULT()
	ENDPROC

	PROCEDURE pages.Page1.chkUpOwnStub.Valid
		IF NOT this.Value AND NOT thisform.pages.page1.chkupownstmt.Value
		   thisform.pages.page1.runcombo1.enabled = .f.
		ELSE
		   thisform.pages.page1.runcombo1.enabled = .t.
		ENDIF
		DODEFAULT()
	ENDPROC

	PROCEDURE pages.Page1.cmdExit.Click
		thisform.release()
	ENDPROC

	PROCEDURE pages.Page1.cmdProcess.Click
		thisform.process()
	ENDPROC

	PROCEDURE pages.Page1.Runcombo1.Init
		IF DODEFAULT()
		   IF this.ListCount > 0
		      this.listitemid = 1
		      thisform.pages.page1.chkUpOwnStmt.Enabled = .t.
		      thisform.pages.page1.chkUpOwnStub.Enabled = .t.
		      thisform.pages.page1.chkFlatRate.Enabled  = .t.
		   ELSE
		      thisform.pages.page1.chkUpOwnStmt.value = .f.
		      thisform.pages.page1.chkUpOwnStub.value = .f.
		      thisform.pages.page1.chkFlatRate.value = .f.
		      thisform.pages.page1.chkFlatRate.Enabled = .f.
		      thisform.pages.page1.chkUpOwnStub.Enabled = .f.
		      thisform.pages.page1.chkUpOwnStmt.Enabled = .f.
		   ENDIF    
		ENDIF   
	ENDPROC

	PROCEDURE pages.Page1.Runcombo2.Init
		IF DODEFAULT()
		   IF this.ListCount > 0
		      this.listitemid = 1
		      thisform.pages.page1.chkUpOwnJIB.Enabled = .t.
		   ELSE
		      thisform.pages.page1.chkUpOwnJIB.value = .f.
		      thisform.pages.page1.chkUpOwnJIB.Enabled = .f.
		   ENDIF    
		ENDIF   
	ENDPROC

	PROCEDURE pages.Page1.Swrptlook1.Swlookupbutton1.Click
		LOCAL lcList
		PRIV llOK
		
		llOK = .F.
		lcList = 'cownerid,csortfield'
		
		DO FORM ..\custom\picklist WITH 'Investor', lcList, thisform.pages.page1.swrptlook1.txtbegid.value, 2
		
		IF llOK
		   thisform.pages.page1.swrptlook1.txtBegId.value = cOwnerID
		   thisform.pages.page1.swrptlook1.txtBegName.value = cOwnname
		   thisform.pages.page1.swrptlook1.txtBegId.refresh()
		   thisform.pages.page1.swrptlook1.txtBegName.refresh()
		ENDIF   
		
		thisform.setnextcontrol(thisform.pages.page1.swrptlook1.txtBegId)
		
	ENDPROC

	PROCEDURE pages.Page1.Swrptlook1.Swlookupbutton2.Click
		LOCAL lcList
		PRIV llOK
		
		llOK = .F.
		lcList = 'cownerid,csortfield'
		
		DO FORM ..\custom\picklist WITH 'Investor', lcList, thisform.pages.page1.swrptlook1.txtendid.value, 2
		
		IF llOK
		   thisform.pages.page1.swrptlook1.txtEndId.value = cOwnerID
		   thisform.pages.page1.swrptlook1.txtEndName.value = cOwnname
		   thisform.pages.page1.swrptlook1.txtEndId.refresh()
		   thisform.pages.page1.swrptlook1.txtEndName.refresh()
		ENDIF   
		
		thisform.setnextcontrol(thisform.pages.page1.swrptlook1.txtEndId)
		
	ENDPROC

	PROCEDURE pages.Page1.Swrptlook1.txtBegID.GotFocus
		ON KEY LABEL F2 _screen.activeform.pages.page1.swrptlook1.swlookupbutton1.Click()
	ENDPROC

	PROCEDURE pages.Page1.Swrptlook1.txtEndID.GotFocus
		ON KEY LABEL F2 _screen.activeform.pages.page1.swrptlook1.swlookupbutton2.Click()
	ENDPROC

	PROCEDURE pages.Page1.txtcYear.Valid
		IF NOT BETWEEN(VAL(this.value),1900,2099)
		   WAIT WIND 'Invalid year, please re-enter...'
		   RETURN 0
		ENDIF
	ENDPROC

	PROCEDURE pages.Page2.Activate
		
		IF swIsEmailSetup()
		   THIS.txtEmailPass.lenabled   = .F.
		   THIS.txtEmailUser.lenabled   = .F.
		   THIS.txtMailAddress.lenabled = .F.
		   THIS.txtMailServer.lenabled  = .F.
		   THIS.ChkUseTLS.lenabled      = .F.
		   THIS.txtsMTPPort.lenabled    = .F.
		   THISFORM.lUseEmailPrefs      = .T.
		   this.lblEmailPrefs.Caption   = 'Using Email Settings in Email Preferences'
		ELSE
		   THIS.txtEmailPass.lenabled   = .T.
		   THIS.txtEmailUser.lenabled   = .T.
		   THIS.txtMailAddress.lenabled = .T.
		   THIS.txtMailServer.lenabled  = .T.
		   THIS.ChkUseTLS.lenabled      = .T.
		   THIS.txtsMTPPort.lenabled    = .T.
		   THISFORM.lUseEmailPrefs      = .F.
		   this.lblEmailPrefs.Caption   = ''
		   IF offr1.iport = 0
		      THISFORM.PAGES.page2.txtPort.VALUE = 21
		      swselect('offr1')
		      COUNT FOR NOT DELETED() TO lncount
		      IF lncount = 0
		         APPEND BLANK
		      ELSE
		         GO TOP
		      ENDIF
		      REPL offr1.iport WITH 21
		   ENDIF
		   THIS.lbltEST.CAPTION = ''
		   THISFORM.PAGES.page2.txtPort.REFRESH()
		ENDIF
		DODEFAULT()
		
		
	ENDPROC

	PROCEDURE pages.Page2.chkUseFTP.Click
		if this.value
		   this.parent.chkUseLocal.value = .f.
		else
		   this.parent.chkUseLocal.value = .t.
		endif   
	ENDPROC

	PROCEDURE pages.Page2.chkUseLocal.Click
		if this.value
		   this.parent.chkUseFTP.value = .f.
		else
		   this.parent.chkUseFTP.value = .t.
		endif   
	ENDPROC

	PROCEDURE pages.Page2.Cmdcommandbuttoncustom1.Click
		llReturn = thisform.ftpconnect()
		
		IF VARTYPE(llReturn) = 'O'
		   thisform.pages.page2.lblTest.caption = 'Connection to Server Successful!'
		ELSE
		   thisform.pages.page2.lblTest.caption = 'Unable to connect to server'
		ENDIF 
	ENDPROC

	PROCEDURE pages.Page2.cmdExit.Click
		thisform.release()
	ENDPROC

	PROCEDURE pages.Page2.cmdSave.Click
		LOCAL llReturn, loError
		LOCAL oProgress
		
		llReturn = .T.
		
		TRY
		*!*	   IF THISFORM.flushcontrolbuffer()
		*!*	      IF offr1.cpassword # this.Parent.txtpassword.value
		*!*	         THIS.PARENT.txtpassword.SET('value', THISFORM.swencrypt.ENCRYPT('@349asks', ALLT(THIS.PARENT.txtpassword.VALUE)))
		*!*	      ENDIF    
		*!*	   ENDIF
		   thisform.save()
		CATCH TO loError
		   llReturn = .F.
		   IF VARTYPE(oProgress) = 'O'
		      oProgress.closeprogress()
		      oProgress = .NULL.
		   ENDIF
		   DO errorlog WITH 'cmdSave', loError.LINENO, 'Online Reporting', loError.ERRORNO, loError.MESSAGE, '', loError
		   MESSAGEBOX('Unable to process the report at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		        'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY 
	ENDPROC

	PROCEDURE pages.Page3.cmdExit.Click
		thisform.release()
	ENDPROC

	PROCEDURE pages.Page3.cmdSave.Click
		thisform.save()
	ENDPROC

ENDDEFINE
