*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="dmr1065rpt.scx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="2" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Cursor3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor4" UniqueID="" Timestamp="" />

	AutoOpenTables = .F.
	DataSource = .NULL.
	Height = 200
	Left = 40
	Name = "Dataenvironment"
	Top = 235
	Width = 520

	ADD OBJECT 'Cursor1' AS cursor WITH ;
		Alias = "form1065", ;
		CursorSource = "form1065", ;
		Database = ..\datafiles\monbelunit2data\appdata.dbc, ;
		Height = 90, ;
		Left = 150, ;
		Name = "Cursor1", ;
		Top = 20, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor2' AS cursor WITH ;
		Alias = "programs", ;
		CursorSource = "programs", ;
		Database = ..\datafiles\monbelunit2data\appdata.dbc, ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor2", ;
		Top = 20, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor3' AS cursor WITH ;
		Alias = "k1file", ;
		CursorSource = "k1file", ;
		Database = ..\datafiles\monbelunit2data\appdata.dbc, ;
		Height = 90, ;
		Left = 290, ;
		Name = "Cursor3", ;
		Top = 20, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor4' AS cursor WITH ;
		Alias = "investor", ;
		CursorSource = "investor", ;
		Database = ..\datafiles\monbelunit2data\appdata.dbc, ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor4", ;
		Top = 140, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

ENDDEFINE

DEFINE CLASS formrpt1065 AS frmrptcriteria OF "..\source\appforms.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Lbllabelcustom1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcYear" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Swrptlook1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkInitial" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkFinal" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkFormB2" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: buildformb2		&& Builds the file for Form B2 - Election Out of Centralized Partnership Regime
		*m: checkformats
	*</DefinedPropArrayMethod>

	Caption = "Print 1065 Forms"
	DoCreate = .T.
	Height = 371
	HelpContextID = 633
	Name = "formrpt1065"
	Width = 421
	_memberdata = <VFPData>
		<memberdata name="buildformb2" display="BuildFormB2"/>
		</VFPData>
	Swrptcriteriabuttons1.chkExport.Alignment = 0
	Swrptcriteriabuttons1.chkExport.Name = "chkExport"
	Swrptcriteriabuttons1.cmdclose.Name = "cmdclose"
	Swrptcriteriabuttons1.cmdPreview.Name = "cmdPreview"
	Swrptcriteriabuttons1.cmdPrint.Name = "cmdPrint"
	Swrptcriteriabuttons1.Left = 93
	Swrptcriteriabuttons1.Name = "Swrptcriteriabuttons1"
	Swrptcriteriabuttons1.TabIndex = 9
	Swrptcriteriabuttons1.Top = 293

	ADD OBJECT 'chkFinal' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Final Return", ;
		Left = 248, ;
		Name = "chkFinal", ;
		TabIndex = 8, ;
		Top = 240, ;
		Value = .F.
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkFormB2' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Include Schedule B2 - Election Out of the Centralized Partnership Audit Regime", ;
		Height = 30, ;
		Left = 104, ;
		Name = "chkFormB2", ;
		TabIndex = 6, ;
		Top = 192, ;
		Value = .F., ;
		Width = 216, ;
		WordWrap = .T.
		*< END OBJECT: ClassLib="..\..\wellprofits\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkInitial' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Initial Return", ;
		Left = 104, ;
		Name = "chkInitial", ;
		TabIndex = 7, ;
		Top = 240, ;
		Value = .F.
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'Lbllabelcustom1' AS lbllabelcustom WITH ;
		Caption = "Year", ;
		FontBold = .F., ;
		Height = 16, ;
		Left = 107, ;
		Name = "Lbllabelcustom1", ;
		TabIndex = 1, ;
		Top = 25, ;
		Width = 26
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom2' AS lbllabelcustom WITH ;
		Caption = "Beginning Program", ;
		Left = 41, ;
		Name = "Lbllabelcustom2", ;
		TabIndex = 4, ;
		Top = 97
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom3' AS lbllabelcustom WITH ;
		Caption = "Ending Program", ;
		Left = 56, ;
		Name = "Lbllabelcustom3", ;
		TabIndex = 5, ;
		Top = 150
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Swrptlook1' AS swrptlook WITH ;
		Left = 145, ;
		Name = "Swrptlook1", ;
		TabIndex = 3, ;
		Top = 77, ;
		Swlookupbutton1.Name = "Swlookupbutton1", ;
		Swlookupbutton2.Name = "Swlookupbutton2", ;
		txtBegID.clistexpression = programs.cprogcode, ;
		txtBegID.clistworkarea = programs, ;
		txtBegID.Name = "txtBegID", ;
		TxtBegName.Name = "TxtBegName", ;
		txtEndID.clistexpression = programs.cprogcode, ;
		txtEndID.clistworkarea = programs, ;
		txtEndID.Name = "txtEndID", ;
		TxtEndName.Name = "TxtEndName"
		*< END OBJECT: ClassLib="..\custom\swcontrol.vcx" BaseClass="container" />

	ADD OBJECT 'txtcYear' AS swyear WITH ;
		Left = 145, ;
		Name = "txtcYear", ;
		TabIndex = 2, ;
		Top = 21
		*< END OBJECT: ClassLib="..\custom\swcontrol.vcx" BaseClass="textbox" />
	
	PROCEDURE builddata
		LOCAL lcYear, lcProg1, lcProg2, llInitial, llFinal
		
		lcYear    = THISFORM.txtcyear.VALUE
		lcProg1   = THISFORM.swrptlook1.txtbegid.VALUE
		lcProg2   = THISFORM.swrptlook1.txtendid.VALUE
		
		llFormB2  = thisform.chkFormB2.Value 
		llInitial = thisform.chkinitial.value
		llFinal   = thisform.chkfinal.value
		
		THISFORM.csortorder = ''
		THISFORM.cselectcriteria = ''
		THISFORM.ctitle1 = ''
		THISFORM.ctitle2 = ''
		
		lcYear    = THISFORM.txtcyear.VALUE
		
		CREATE CURSOR temp1065 ;
		   (cprogcode   C(10), ;
		   cprogname  C(30), ;
		   cprogadd1  C(30), ;
		   cprogadd2  C(30), ;
		   cprogadd3  C(30), ;
		   ctaxid     C(15), ;
		   dbegindate d, ;
		   nacctmeth  I, ;
		   dprogstart D, ;
		   linitial   l, ;
		   lfinal     l, ;
		   lRoyalty   l, ;
		   lFormB2    l, ;
		   centity    c(20), ;
		   nentity    I, ;
		   nk1count   N(5), ;
		   nbox3_rents N(12,2), ;
		   nbox3a      N(12,2), ;
		   ngrossinc  N(12,2), ;
		   ndeduct    N(12,2), ;
		   ntaxes     N(12,2), ;
		   ndepr      N(12,2), ;
		   nidc       N(12,2), ;
		   nroydeducts n(12,2), ;
		   nroyalties n(12,2), ;
		   nbegcash   n(12,2), ;
		   nendcash   n(12,2), ;
		   notherdeducts n(12,2), ;
		   nordincome N(12,2))
		
		WAIT WIND NOWAIT 'Processing Report Request...Please Wait'
		
		SELECT form1065.cprogcode, ;
		   nordincome, ;
		   ngrossinc, ;
		   ntaxes, ;
		   ndeduct, ;
		   nroydeducts, ;
		   nroyalties, ;
		   notherdeducts, ;
		   nbegcash, ;
		   nendcash, ;
		   cprogname, ;
		   cprogadd1, ;
		   cprogadd2, ;
		   cprogadd3, ;
		   form1065.dbegindate, ;
		   nprogtype AS nentity, ;
		   cprogtaxid AS ctaxid, ;
		   llInitial  AS lInitial, ;
		   llFinal    AS lFinal, ;
		   llFormB2 as lFormB2, ;
		   nbox3_rents, ;
		   ndepr, ;
		   nidc, ;
		   nacctmeth, ;
		   dprogstart ;
		   WHERE BETWEEN(form1065.cprogcode,lcProg1,lcProg2) ;
		   AND form1065.cyear = lcYear ;
		   AND form1065.cprogcode = programs.cprogcode ;
		   FROM form1065, programs ;
		   INTO CURSOR temp ;
		   ORDER BY form1065.cprogcode
		
		IF _TALLY = 0
		   RETURN .F.
		ENDIF
		
		SELECT temp
		SCAN
		   SCATTER MEMVAR 
		   IF NOT ISDIGIT(LEFT(m.ctaxid,1))
		      m.ctaxid = cmEncrypt(ALLTRIM(m.ctaxid),m.goapp.cEncryptionkey)
		   ENDIF    
		   INSERT INTO temp1065 FROM MEMVAR 
		ENDSCAN 
		USE IN temp
		
		SELECT temp1065
		SCAN
		   SCATTER MEMVAR
		   IF m.nacctmeth = 0
		      REPLACE nacctmeth WITH 1
		   endif
		   m.centity = ''
		   IF NOT INLIST(m.nentity,2,4,5,8,9)
		      DO CASE 
		         CASE m.nEntity = 1
		            m.centity = 'Joint Venture'
		         CASE m.nEntity = 3
		            m.centity = 'S-Corp'  
		         CASE m.nEntity = 6
		            m.centity = 'Sole Proprietor'   
		         CASE m.nEntity = 7
		            m.centity = 'C-Corp'
		         OTHERWISE
		            m.centity = ''      
		      ENDCASE 
		      m.nentity = 99
		      SELECT temp1065
		      REPLACE nentity WITH m.nentity, ;
		              centity WITH m.centity
		   ENDIF         
		   SELECT k1file
		   COUNT FOR cyear = lcYear AND cprogcode = m.cprogcode TO m.nk1count
		   SELECT temp1065
		   REPLACE nk1count WITH m.nk1count
		ENDSCAN
		
		IF llFormB2
		   thisform.BuildFormB2()
		ENDIF 
		
		RETURN .T.
		
	ENDPROC

	PROCEDURE buildformb2		&& Builds the file for Form B2 - Election Out of Centralized Partnership Regime
		
		
		lcYear    = THISFORM.txtcyear.VALUE
		lcProg1   = THISFORM.swrptlook1.txtbegid.VALUE
		lcProg2   = THISFORM.swrptlook1.txtendid.VALUE
		
		
		CREATE CURSOR formb2_page1 ;
		(cyear      c(4), ;
		 cprogcode  c(10), ;
		 cprogname  c(60), ;
		 cprogtaxid c(15), ;
		 cpartner1   c(60), ;
		 ctaxid1     c(15), ;
		 ctype1      c(1), ;
		 cpartner2   c(60), ;
		 ctaxid2     c(15), ;
		 ctype2      c(1), ;
		 cpartner3   c(60), ;
		 ctaxid3     c(15), ;
		 ctype3      c(1), ;
		 cpartner4   c(60), ;
		 ctaxid4     c(15), ;
		 ctype4      c(1), ;
		 cpartner5   c(60), ;
		 ctaxid5     c(15), ;
		 ctype5      c(1), ;
		 cpartner6   c(60), ;
		 ctaxid6     c(15), ;
		 ctype6      c(1), ;
		 cpartner7   c(60), ;
		 ctaxid7     c(15), ;
		 ctype7      c(1), ;
		 cpartner8   c(60), ;
		 ctaxid8     c(15), ;
		 ctype8      c(1), ;
		 cpartner9   c(60), ;
		 ctaxid9     c(15), ;
		 ctype9      c(1), ;
		 cpartner10  c(60), ;
		 ctaxid10    c(15), ;
		 ctype10     c(1), ;
		 cpartner11  c(60), ;
		 ctaxid11    c(15), ;
		 ctype11     c(1), ;
		 cpartner12  c(60), ;
		 ctaxid12    c(15), ;
		 ctype12     c(1), ;
		 cpartner13  c(60), ;
		 ctaxid13    c(15), ;
		 ctype13     c(1), ;
		 cpartner14  c(60), ;
		 ctaxid14    c(15), ;
		 ctype14     c(1), ;
		 cpartner15  c(60), ;
		 ctaxid15    c(15), ;
		 ctype15     c(1), ;
		 ib2count    i)
		 
		 
		 SELECT k1file.cprogcode, ;
		        programs.cprogname, ;
		        programs.cprogtaxid, ;
		        k1file.cownerid, ;
		        investor.cownname, ;
		        investor.csortfield, ;
		        investor.ctaxid, ;
		        'I' as ctype ;
		    FROM k1file ;
		         JOIN programs ON programs.cprogcode = k1file.cprogcode ;
		         JOIN investor ON investor.cownerid  = k1file.cownerid ;
		    WHERE BETWEEN(k1file.cprogcode,lcProg1,lcProg2) ;
		      AND cYear = lcYear ;
		      AND NOT EMPTY(investor.ctaxid) ;
		    INTO CURSOR temp  readwrite;
		    ORDER BY k1file.cprogcode, investor.csortfield 
		  
		 m.ib2count = _tally  
		 liCount = 1   
		 SELECT temp
		 SCAN 
		    SCATTER MEMVAR 
		    lcVar1 = 'm.cpartner' + TRANSFORM(liCount)
		    lcVar2 = 'm.ctaxid'   + TRANSFORM(liCount)
		    lcVar3 = 'm.ctype'    + TRANSFORM(liCount)
		    liCount = liCount + 1 
		    
		    &lcVar1 = m.cownname
		    &lcVar2 = cmEncrypt(ALLTRIM(m.cTaxid),m.goapp.cEncryptionKey)
		    &lcVar3 = 'I'
		    
		    SELECT temp
		    DELETE NEXT 1
		    
		    IF liCount > 15
		      EXIT
		    ENDIF 
		 ENDSCAN 
		 
		 INSERT INTO formb2_page1 FROM MEMVAR 
		 
		 CREATE CURSOR formb2_page2 ;
		(cyear      c(4), ;
		 cprogcode  c(10), ;
		 cprogname  c(60), ;
		 cprogtaxid c(15), ;
		 cpartner16   c(60), ;
		 ctaxid16     c(15), ;
		 ctype16      c(1), ;
		 cpartner17   c(60), ;
		 ctaxid17     c(15), ;
		 ctype17      c(1), ;
		 cpartner18   c(60), ;
		 ctaxid18     c(15), ;
		 ctype18      c(1), ;
		 cpartner19   c(60), ;
		 ctaxid19     c(15), ;
		 ctype19      c(1), ;
		 cpartner20   c(60), ;
		 ctaxid20     c(15), ;
		 ctype20      c(1), ;
		 cpartner21   c(60), ;
		 ctaxid21     c(15), ;
		 ctype21     c(1), ;
		 cpartner22   c(60), ;
		 ctaxid22     c(15), ;
		 ctype22      c(1), ;
		 cpartner23   c(60), ;
		 ctaxid23     c(15), ;
		 ctype23      c(1), ;
		 cpartner24   c(60), ;
		 ctaxid24     c(15), ;
		 ctype24      c(1), ;
		 cpartner25   c(60), ;
		 ctaxid25     c(15), ;
		 ctype25      c(1), ;
		 cpartner26  c(60), ;
		 ctaxid26    c(15), ;
		 ctype26     c(1), ;
		 cpartner27  c(60), ;
		 ctaxid27    c(15), ;
		 ctype27     c(1), ;
		 cpartner28  c(60), ;
		 ctaxid28   c(15), ;
		 ctype28    c(1), ;
		 cpartner29  c(60), ;
		 ctaxid29    c(15), ;
		 ctype29     c(1), ;
		 cpartner30  c(60), ;
		 ctaxid30    c(15), ;
		 ctype30     c(1), ;
		 cpartner31  c(60), ;
		 ctaxid31    c(15), ;
		 ctype31     c(1), ;
		 cpartner32   c(60), ;
		 ctaxid32     c(15), ;
		 ctype32      c(1), ;
		 cpartner33   c(60), ;
		 ctaxid33     c(15), ;
		 ctype33      c(1), ;
		 cpartner34   c(60), ;
		 ctaxid34     c(15), ;
		 ctype34      c(1), ;
		 cpartner35   c(60), ;
		 ctaxid35     c(15), ;
		 ctype35      c(1), ;
		 cpartner36   c(60), ;
		 ctaxid36     c(15), ;
		 ctype36     c(1), ;
		 cpartner37   c(60), ;
		 ctaxid37     c(15), ;
		 ctype37      c(1), ;
		 cpartner38   c(60), ;
		 ctaxid38     c(15), ;
		 ctype38      c(1), ;
		 cpartner39   c(60), ;
		 ctaxid39     c(15), ;
		 ctype39      c(1), ;
		 cpartner40   c(60), ;
		 ctaxid40     c(15), ;
		 ctype40      c(1), ;
		 cpartner41  c(60), ;
		 ctaxid41    c(15), ;
		 ctype41     c(1), ;
		 cpartner42  c(60), ;
		 ctaxid42   c(15), ;
		 ctype42    c(1), ;
		 cpartner43  c(60), ;
		 ctaxid43    c(15), ;
		 ctype43     c(1), ;
		 cpartner44  c(60), ;
		 ctaxid44    c(15), ;
		 ctype44     c(1), ;
		 cpartner45  c(60), ;
		 ctaxid45    c(15), ;
		 ctype45     c(1), ;
		 cpartner46  c(60), ;
		 ctaxid46    c(15), ;
		 ctype46     c(1), ;
		 cpartner47  c(60), ;
		 ctaxid47    c(15), ;
		 ctype47     c(1), ;
		 cpartner48  c(60), ;
		 ctaxid48   c(15), ;
		 ctype48    c(1), ;
		 cpartner49  c(60), ;
		 ctaxid49    c(15), ;
		 ctype49     c(1), ;
		 cpartner50  c(60), ;
		 ctaxid50    c(15), ;
		 ctype50     c(1), ;
		 cpartner51  c(60), ;
		 ctaxid51    c(15), ;
		 ctype51     c(1), ;
		 cpartner52   c(60), ;
		 ctaxid52     c(15), ;
		 ctype52      c(1), ;
		 cpartner53   c(60), ;
		 ctaxid53     c(15), ;
		 ctype53      c(1), ;
		 cpartner54   c(60), ;
		 ctaxid54     c(15), ;
		 ctype54      c(1), ;
		 cpartner55   c(60), ;
		 ctaxid55     c(15), ;
		 ctype55      c(1), ;
		 cpartner56   c(60), ;
		 ctaxid56     c(15), ;
		 ctype56     c(1), ;
		 cpartner57   c(60), ;
		 ctaxid57     c(15), ;
		 ctype57      c(1), ;
		 cpartner58   c(60), ;
		 ctaxid58     c(15), ;
		 ctype58      c(1), ;
		 cpartner59   c(60), ;
		 ctaxid59     c(15), ;
		 ctype59      c(1), ;
		 cpartner60   c(60), ;
		 ctaxid60     c(15), ;
		 ctype60      c(1), ;
		 cpartner61  c(60), ;
		 ctaxid61    c(15), ;
		 ctype61     c(1), ;
		 cpartner62  c(60), ;
		 ctaxid62    c(15), ;
		 ctype62     c(1), ;
		 cpartner63  c(60), ;
		 ctaxid63   c(15), ;
		 ctype63    c(1), ;
		 cpartner64  c(60), ;
		 ctaxid64    c(15), ;
		 ctype64     c(1), ;
		 cpartner65  c(60), ;
		 ctaxid65    c(15), ;
		 ctype65     c(1), ;
		 cpartner66  c(60), ;
		 ctaxid66    c(15), ;
		 ctype6     c(1), ;
		 cpartner67  c(60), ;
		 ctaxid67    c(15), ;
		 ctype67     c(1), ;
		 ib2count    i)
		 
		 SELECT temp
		 SCAN 
		    SCATTER MEMVAR 
		    lcVar1 = 'm.cpartner' + TRANSFORM(liCount)
		    lcVar2 = 'm.ctaxid'   + TRANSFORM(liCount)
		    lcVar3 = 'm.ctype'    + TRANSFORM(liCount)
		    liCount = liCount + 1 
		    
		    &lcVar1 = m.cownname
		    &lcVar2 = cmEncrypt(ALLTRIM(m.cTaxid),m.goapp.cEncryptionKey)
		    &lcVar3 = 'I'
		    
		    SELECT temp
		    DELETE NEXT 1
		    
		    IF liCount > 67
		      EXIT
		    ENDIF 
		 ENDSCAN 
		 
		 INSERT INTO formb2_page2 FROM MEMVAR 
		
	ENDPROC

	PROCEDURE checkformats
		LPARAMETERS tcYear
		
		lc1065p1 = m.goapp.cRptsFolder+'1065-k1\'+tcYear+'\f1065_Page_1_' + tcYear + '.jpg'
		lc1065p2 = m.goapp.cRptsFolder+'1065-k1\'+tcYear+'\f1065_Page_2_' + tcYear + '.jpg'
		lc1065p3 = m.goapp.cRptsFolder+'1065-k1\'+tcYear+'\f1065_Page_3_' + tcYear + '.jpg'
		lc1065p4 = m.goapp.cRptsFolder+'1065-k1\'+tcYear+'\f1065_Page_4_' + tcYear + '.jpg'
		lc1065p5 = m.goapp.cRptsFolder+'1065-k1\'+tcYear+'\f1065_Page_5_' + tcYear + '.jpg'
		lcK1p1   = m.goapp.cRptsFolder+'1065-k1\'+tcYear+'\f1065sk1_Page_1_' + tcYear + '.jpg'
		lcK1p2   = m.goapp.cRptsFolder+'1065-k1\'+tcYear+'\f1065sk1_Page_2_' + tcYear + '.jpg'
		
		llReturn = .T.
		
		DO CASE 
		   CASE NOT FILE(lc1065p1)
		      llReturn = .f.
		   CASE NOT FILE(lc1065p2)
		      llReturn = .f.
		   CASE NOT FILE(lc1065p3)
		      llReturn = .F.
		   CASE NOT FILE(lc1065p4)
		      llReturn = .F.
		   CASE NOT FILE(lc1065p5)
		      llReturn = .F.
		   CASE NOT FILE(lcK1p1)
		      llReturn = .F.
		   CASE NOT FILE(lcK1p2)
		      llReturn = .F.
		ENDCASE 
		
		IF NOT llReturn
		   llReturn = form1065_k1_upd(tcYear)
		ENDIF
		
		RETURN llReturn    
		                  
		        
	ENDPROC

	PROCEDURE Init
		IF DODEFAULT()
		   * If we're in demo mode, tell the user that this is an optional module
		   IF m.goapp.ldemo
		      thisform.omessage.warning('The 1065/K1 module is an optional module that can be purchased separately.' + ;
		                                ' It is included in the demo for evaluation purposes.')
		   ENDIF
		   *
		   *  Initialize the Year textbox
		   *
		   swselect('form1065')
		   SET ORDER to yearprog
		   IF RECCOUNT() > 0
		      GO BOTTOM 
		      THISFORM.txtcYear.VALUE = form1065.cyear
		   ELSE
		      THISFORM.txtcYear.VALUE = STR(YEAR(DATE())-1,4)
		   ENDIF    
		
		   SELECT programs
		   SET FILTER TO lprog1099 = .f.
		   SET ORDER TO cProgcode
		   GO TOP
		   THISFORM.swrptlook1.txtbegid.VALUE = cProgcode
		   THISFORM.swrptlook1.txtbegname.VALUE = cprogname
		   GO BOTT
		   THISFORM.swrptlook1.txtendid.VALUE = cProgcode
		   THISFORM.swrptlook1.txtendname.VALUE = cprogname
		 
		   *
		   *  Find the Registry object
		   *
		   THIS.oRegistry = FindGlobalObject('cmRegistry')
		   thisform.creportname = m.goapp.cRptsFolder+'frm10651'
		ENDIF
		
	ENDPROC

	PROCEDURE report
		LPARA cButton
		LOCAL lnResult, lcAlias, llError, lcYear
		PRIV lcTitle1, lcTitle2, lcSortOrder, lcSelect, glGrpName, m.cGrpName, llPrinted
		
		* Check for the parameter. If it's not a character we're being called by the toolbar print button
		* Bail out if we got here by the toolbar button.
		IF VARTYPE(cButton) <> 'C'
		   RETURN
		ENDIF
		
		llRound = .F.
		llError = .F.
		
		TRY
		   IF NOT USED('stmtone1065')
		      USE (m.goapp.cdatafilepath+'stmtone1065') IN 0
		   ENDIF
		CATCH
		   llError = .T.
		ENDTRY
		
		IF llError
		   THISFORM.omessage.warning('Could not locate the Statement 1 file. Make sure the 1065/K1 files have been created and try again.')
		   RETURN
		ENDIF
		
		lcYear   = THISFORM.txtcyear.VALUE
		llReturn = THISFORM.checkformats(lcYear)
		llFormB2  = THISFORM.chkFormB2.VALUE
		
		IF NOT llReturn
		   RETURN
		ENDIF
		
		*
		*  Check to see if the requirements for calling this method are met.
		*
		ASSERT TYPE('this.cReportName') = 'C' MESSAGE 'You must set the cReportName property to use this class'
		ASSERT INLIST(m.cButton,'F','P','S')  MESSAGE 'The parm to the report method must be either "F" or "P"'
		
		IF TYPE('this.ctitle1') <> 'C'
		   THIS.ctitle1 = ''
		ENDIF
		IF TYPE('this.ctitle2') <> 'C'
		   THIS.ctitle2 = ''
		ENDIF
		
		lcAlias = ALIAS()
		
		llPrinted = .F.
		llError   = .F.
		
		*
		*  Check on using group name in place of company name
		*
		IF NOT USED('options')
		   IF TYPE('m.goApp') = 'O'
		      USE (ALLTRIM(m.goapp.cdatafilepath)+'options') IN 0
		   ENDIF
		ENDIF
		IF NOT USED('groups')
		   IF TYPE('m.goApp') = 'O'
		      USE (ALLTRIM(m.goapp.cdatafilepath)+'groups') IN 0
		   ENDIF
		ENDIF
		
		* If the form doesn't have a swgroup control
		* don't try to get the company name from the group
		IF TYPE('thisform.swgroup1') <> 'O'
		   glGrpName = .F.
		ELSE
		   SELECT options
		   GO TOP
		   glGrpName = lGrpName
		   IF glGrpName
		      SELECT groups
		      SET ORDER TO cgroup
		      * If the Runcombo dropdown exists, and the value isn't New Run, get the group from that
		      IF VARTYPE(THISFORM.RunCombo1) = 'O'  AND THISFORM.RunCombo1.VISIBLE AND THISFORM.RunCombo1.ENABLED
		         IF NOT 'NEW RUN' $ UPPER(THISFORM.RunCombo1.VALUE)
		            IF SEEK(THISFORM.RunCombo1.LISTITEM(THISFORM.RunCombo1.LISTITEMID,4))
		               m.cGrpName = cDesc
		            ELSE
		               m.cGrpName = ''
		            ENDIF
		         ELSE
		            IF SEEK(LEFT(THISFORM.swgroup1.VALUE,2))
		               m.cGrpName = cDesc
		            ELSE
		               IF LEFT(THISFORM.swgroup1.VALUE,2) = '**'
		                  m.cGrpName = 'All Companies'
		               ELSE
		                  m.cGrpName = ''
		               ENDIF
		            ENDIF
		         ENDIF
		      ELSE
		         IF SEEK(LEFT(THISFORM.swgroup1.VALUE,2))
		            m.cGrpName = cDesc
		         ELSE
		            IF LEFT(THISFORM.swgroup1.VALUE,2) = '**'
		               m.cGrpName = 'All Companies'
		            ELSE
		               m.cGrpName = ''
		            ENDIF
		         ENDIF
		      ENDIF
		   ELSE
		      m.cGrpName = ''
		   ENDIF
		ENDIF
		
		*
		*  Make the cProducer variable a default value for development purposes
		*
		IF TYPE('m.goApp') = 'O'
		   m.cProducer = m.goapp.cCompanyName
		   IF m.goapp.lDemo
		      m.cProducer = 'Demo Version of Software'
		      m.cGrpName  = m.cProducer
		   ENDIF
		ELSE
		   m.cProducer = 'Sample Development Company'
		ENDIF
		
		IF TYPE('m.cProcessor') <> 'C'
		   m.cProcessor = ''
		ENDIF
		
		IF EMPTY(m.cProducer) OR m.cProducer = "''"
		   m.cProducer = 'Sample Development Company'
		ENDIF
		
		lcTitle1    = THISFORM.ctitle1
		lcTitle2    = THISFORM.ctitle2
		lcSortOrder = THISFORM.cSortOrder
		lcSelect    = THISFORM.cSelectCriteria
		
		*
		*  Set defaults for titles and criteria if not in correct format
		*
		IF TYPE('lcTitle1') <> 'C'
		   lcTitle1 = ''
		ENDIF
		IF TYPE('lcTitle2') <> 'C'
		   lcTitle2 = ''
		ENDIF
		IF TYPE('lcSortOrder') <> 'C'
		   lcSortOrder = ''
		ENDIF
		IF TYPE('lcSelect') <> 'C'
		   lcSelect = ''
		ENDIF
		
		SELECT (lcAlias)
		
		* Disable F1 Help
		ON KEY LABEL F1 *
		
		* Disable the picklist key
		ON KEY LABEL F2 *
		
		* Get the unique program codes we're printing
		SELECT cprogcode FROM temp1065 INTO CURSOR tempprog ORDER BY cprogcode GROUP BY cprogcode
		lnProgs = _TALLY
		lnCount = 1
		
		lcYear = ALLTRIM(THISFORM.txtcyear.VALUE)
		IF lcYear < '2012'
		   lcPage1 = m.goapp.cRptsFolder+'frm10651'
		   lcPage2 = m.goapp.cRptsFolder+'frm10652'
		   lcPage3 = m.goapp.cRptsFolder+'frm10653'
		   lcPage4 = m.goapp.cRptsFolder+'frm10654'
		   lcPage5 = m.goapp.cRptsFolder+'frm10655'
		ELSE
		   lcPage1   = m.goapp.cRptsFolder+'1065-K1\' + lcYear + '\frm10651_'+lcYear+'.frx'
		   lcPage2   = m.goapp.cRptsFolder+'1065-K1\' + lcYear + '\frm10652_'+lcYear+'.frx'
		   lcPage3   = m.goapp.cRptsFolder+'1065-K1\' + lcYear + '\frm10653_'+lcYear+'.frx'
		   lcPage4   = m.goapp.cRptsFolder+'1065-K1\' + lcYear + '\frm10654_'+lcYear+'.frx'
		   lcPage5   = m.goapp.cRptsFolder+'1065-K1\' + lcYear + '\frm10655_'+lcYear+'.frx'
		   lcFormB2a = m.goapp.cRptsFolder+'1065-K1\' + lcYear + '\frmB2_Page1_'+lcYear+'.frx'
		   lcFormB2b = m.goapp.cRptsFolder+'1065-K1\' + lcYear + '\frmB2_Page2_'+lcYear+'.frx'
		ENDIF
		
		
		*
		*  Send the report to the proper location based upon the button pressed.
		*
		DO CASE
		
		   CASE m.cButton = 'P'
		      loReportListener = NEWOBJECT('swReportListener','..\custom\swReports.vcx')
		      loReportListener.LISTENERTYPE = 0
		      loReportListener.PRINTJOBNAME = 'Form 1065'
		
		      TRY
		         *-- Run the report (with NOWAIT)
		         SELECT tempprog
		         SCAN
		            lcFileName = '_'+SYS(3)
		            SELECT * FROM temp1065 WHERE cprogcode = tempprog.cprogcode INTO CURSOR (lcFileName)
		            SCATTER MEMVAR
		            llPrinted = .F.
		            loReportListener.AddReport(lcPage1,'to printer prompt nopageeject',,lcFileName)
		            loReportListener.AddReport(lcPage2,'to printer prompt nopageeject',,lcFileName)
		            loReportListener.AddReport(lcPage3,'to printer prompt nopageeject',,lcFileName)
		            loReportListener.AddReport(lcPage4,'to printer prompt nopageeject',,lcFileName)
		            loReportListener.AddReport(lcPage5,'to printer prompt nopageeject',,lcFileName)
		
		            PRIVATE lcStmt1Title
		            lcStmt1Title = 'Box 20 - Other Deductions'
		            IF llFormB2
		               
		               SELECT nroydeducts FROM temp1065 WHERE cprogcode = tempprog.cprogcode INTO CURSOR temp
		               IF temp.nroydeducts # 0
		                  lcStmt1Title = 'Box 13D - Royalty Deductions'
		               ELSE
		                  lcStmt1Title = 'Box 20 - Other Deductions'
		               ENDIF
		               USE IN temp
		
		
		               lcFormB2Page1 = 'B2_1' + SYS(3)
		               lcFormB2Page2 = 'B2_2' + SYS(3) 
		               SELECT * FROM formb2_page1 WHERE cProgCode = tempprog.cprogcode INTO cursor (lcFormB2Page1)
		               SELECT * FROM formb2_page2 WHERE cProgCode = tempprog.cprogcode INTO cursor (lcFormB2Page2)
		               SELECT formb2_page1
		               loReportListener.AddReport(lcFormB2a,'to printer prompt preview nopageeject',,lcFormB2Page1)
		               SELECT (lcFormB2Page2)
		               IF RECCOUNT() > 0
		                  loReportListener.AddReport(lcFormB2b,'to printer prompt preview nopageeject',,lcFormB2Page2)
		               ENDIF
		            ENDIF
		
		            SELECT stmtone1065.*, ;
		                   taxcodes.cdesc as ctaxdesc, ;
		                   m.cprogname AS cprogname  ;
		               FROM stmtone1065 ;
		                    JOIN taxcodes ON taxcodes.ctaxcode = stmtone1065.ctaxcode ;
		               INTO CURSOR (lcStmtFile) READWRITE ;
		               WHERE cprogcode = tempprog.cprogcode AND cYear = lcYear ;
		               ORDER BY stmtone1065.ctaxcode, stmtone1065.ccateg
		            IF lnCount = lnProgs
		               loReportListener.AddReport(m.goapp.cRptsFolder+'1065-k1\'+lcYear+'\frm1065s1','to printer prompt ',,'tempstmt1')
		            ELSE
		               loReportListener.AddReport(m.goapp.cRptsFolder+'1065-k1\'+lcYear+'\frm1065s1','to printer prompt nopageeject',,'tempstmt1')
		            ENDIF
		            lnCount = lnCount + 1
		         ENDSCAN
		         SELECT (lcFilename)
		         loReportListener.RunReports()
		
		      CATCH TO loError
		         llError = .T.
		      ENDTRY
		
		      IF llError
		         IF loError.ERRORNO = 1958
		            MESSAGEBOX('There was an error loading the printer driver. Make sure you have a valid printer selected or setup as your default printer.',16,'Windows Printer Driver Error')
		         ELSE
		            MESSAGEBOX('Error sending the report to the printer.' + CHR(10) + ;
		               'Error: ' + loError.MESSAGE,16,'Report Print Problem')
		         ENDIF
		      ENDIF
		
		   CASE m.cButton = 'S'
		      LOCAL loPreviewContainer, loReportListener
		      SET REPORTBEHAVIOR 90
		
		      loReportListener = NEWOBJECT('swReportListener','..\custom\swReports.vcx')
		      loReportListener.LISTENERTYPE = 1
		      loReportListener.PRINTJOBNAME = 'Form 1065'
		
		      TRY
		         *-- Run the report (with NOWAIT)
		         SELECT tempprog
		         SCAN
		            lcFileName1 = '_'+SYS(3)
		            SELECT * FROM temp1065 WHERE cprogcode = tempprog.cprogcode INTO CURSOR (lcFileName1)
		            SCATTER MEMVAR
		            llPrinted = .F.
		            loReportListener.AddReport(lcPage1,'to printer prompt preview nopageeject',,lcFileName1)
		            loReportListener.AddReport(lcPage2,'to printer prompt preview nopageeject',,lcFileName1)
		            loReportListener.AddReport(lcPage3,'to printer prompt preview nopageeject',,lcFileName1)
		            loReportListener.AddReport(lcPage4,'to printer prompt preview nopageeject',,lcFileName1)
		            loReportListener.AddReport(lcPage5,'to printer prompt preview nopageeject',,lcFileName1)
		
		            PRIVATE lcStmt1Title
		            lcStmt1Title = 'Box 20 - Other Deductions'
		            IF llFormB2
		               SELECT nroydeducts FROM temp1065 WHERE cprogcode = tempprog.cprogcode INTO CURSOR temp
		               IF temp.nroydeducts # 0
		                  lcStmt1Title = 'Box 13D - Royalty Deductions'
		               ELSE
		                  lcStmt1Title = 'Box 20 - Other Deductions'
		               ENDIF
		               USE IN temp
		
		               lcFormB2Page1 = 'B2_1' + SYS(3)
		               lcFormB2Page2 = 'B2_2' + SYS(3) 
		               SELECT * FROM formb2_page1 WHERE cProgCode = tempprog.cprogcode INTO cursor (lcFormB2Page1)
		               SELECT * FROM formb2_page2 WHERE cProgCode = tempprog.cprogcode INTO cursor (lcFormB2Page2)
		               SELECT formb2_page1
		               loReportListener.AddReport(lcFormB2a,'to printer prompt preview nopageeject',,lcFormB2Page1)
		               SELECT (lcFormB2Page2)
		               IF RECCOUNT() > 0
		                  loReportListener.AddReport(lcFormB2b,'to printer prompt preview nopageeject',,lcFormB2Page2)
		               ENDIF
		            ENDIF
		
		            lcStmtFile = 'D_' + SYS(3)
		            SELECT stmtone1065.*, ;
		                   taxcodes.cdesc as ctaxdesc, ;
		                   m.cprogname AS cprogname  ;
		               FROM stmtone1065 ;
		                    JOIN taxcodes ON taxcodes.ctaxcode = stmtone1065.ctaxcode ;
		               INTO CURSOR (lcStmtFile) ;
		               WHERE cprogcode = tempprog.cprogcode AND cYear = lcYear ;
		               ORDER BY stmtone1065.ctaxcode, stmtone1065.ccateg
		               
		            IF lnCount = lnProgs
		               loReportListener.AddReport(m.goapp.cRptsFolder+'1065-k1\'+lcYear+'\frm1065s1','to printer prompt preview',,lcStmtFile)
		            ELSE
		               loReportListener.AddReport(m.goapp.cRptsFolder+'1065-k1\'+lcYear+'\frm1065s1','to printer prompt preview nopageeject',,lcStmtFile)
		            ENDIF
		            SELECT tempprog
		            lnCount = lnCount + 1
		         ENDSCAN
		         SELECT (lcFilename1)
		         loReportListener.RunReports()
		         
		      CATCH TO loError
		         llError = .T.
		      ENDTRY
		      IF llError
		         IF loError.ERRORNO = 1958
		            MESSAGEBOX('There was an error loading the printer driver. Make sure you have a valid printer selected or setup as your default printer.',16,'Windows Printer Driver Error')
		         ELSE
		            MESSAGEBOX('Error sending the report to the printer.' + CHR(10) + ;
		               'Error: ' + loError.MESSAGE,16,'Report Print Problem')
		         ENDIF
		      ENDIF
		ENDCASE
		
	ENDPROC

	PROCEDURE Swrptlook1.Swlookupbutton1.Click
		PRIV llOK
		LOCAL lcList
		
		llOK = .F.
		
		lcList = 'cprogcode,cprogname'
		
		DO FORM ..\custom\picklist WITH 'Programs',lcList,thisform.swrptlook1.txtbegid.value, 2
		
		IF llOK
		   thisform.swrptlook1.txtbegid.value = programs.cprogcode
		   thisform.swrptlook1.txtbegid.refresh()
		   thisform.swrptlook1.txtbegname.value = programs.cprogname
		   thisform.swrptlook1.txtbegname.refresh()
		ENDIF   
	ENDPROC

	PROCEDURE Swrptlook1.Swlookupbutton2.Click
		PRIV llOK
		LOCAL lcList
		
		llOK = .F.
		
		lcList = 'cprogcode,cprogname'
		
		DO FORM ..\custom\picklist WITH 'Programs',lcList,thisform.swrptlook1.txtendid.value, 2
		
		IF llOK
		   thisform.swrptlook1.txtendid.value = programs.cprogcode
		   thisform.swrptlook1.txtendid.refresh()
		   thisform.swrptlook1.txtendname.value = programs.cprogname
		   thisform.swrptlook1.txtendname.refresh()
		ENDIF   
	ENDPROC

	PROCEDURE Swrptlook1.txtBegID.InteractiveChange
		SELECT programs
		SET ORDER TO cprogcode
		IF SEEK(THIS.VALUE)
		   THIS.PARENT.txtBegName.SET('value',programs.cprogname)
		ELSE
		   THIS.PARENT.txtBegName.SET('value','')
		ENDIF
		DODEFAULT()
		
	ENDPROC

	PROCEDURE Swrptlook1.txtEndID.InteractiveChange
		SELECT programs
		SET ORDER TO cprogcode
		IF SEEK(THIS.VALUE)
		   THIS.PARENT.txtEndName.SET('value',programs.cprogname)
		ELSE
		   THIS.PARENT.txtEndName.SET('value','')
		ENDIF
		DODEFAULT()
		
	ENDPROC

	PROCEDURE txtcYear.Valid
		IF NOT BETWEEN(VAL(this.value),1900,2099)
		   WAIT WIND 'Invalid year, please re-enter...'
		   RETURN 0
		ENDIF
	ENDPROC

ENDDEFINE
