*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="ten99createst.scx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="2" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Cursor4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor9" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor12" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor6" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor2" UniqueID="" Timestamp="" />

	AutoOpenTables = .F.
	DataSource = .NULL.
	Height = 608
	Left = 289
	Name = "Dataenvironment"
	Top = 174
	Width = 898

	ADD OBJECT 'Cursor1' AS cursor WITH ;
		Alias = "tax1099det", ;
		CursorSource = "tax1099det", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 520, ;
		Left = 246, ;
		Name = "Cursor1", ;
		Top = 20, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor12' AS cursor WITH ;
		Alias = "tax1099st", ;
		BufferModeOverride = 5, ;
		CursorSource = "tax1099st", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 286, ;
		Left = 4, ;
		Name = "Cursor12", ;
		Top = 136, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor2' AS cursor WITH ;
		Alias = "options", ;
		CursorSource = "options", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 464, ;
		Left = 368, ;
		Name = "Cursor2", ;
		Top = 22, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor4' AS cursor WITH ;
		Alias = "investor", ;
		CursorSource = "investor", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 6, ;
		Name = "Cursor4", ;
		Top = 15, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor6' AS cursor WITH ;
		Alias = "tax1099st1", ;
		CursorSource = "tax1099st", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 123, ;
		Name = "Cursor6", ;
		Top = 136, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor9' AS cursor WITH ;
		Alias = "wells", ;
		CursorSource = "wells", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 125, ;
		Name = "Cursor9", ;
		Top = 18, ;
		Width = 101
		*< END OBJECT: BaseClass="cursor" />

ENDDEFINE

DEFINE CLASS form1099createst AS frmformcustom OF "..\custom\cforms.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Lbllabelcustom1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdCreate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdExit" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcYear" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: archive		&& Archives prior year 1099s
		*m: cleanoldsusp
		*m: createauditrecs
		*m: fixaudit
		*m: makefile		&& Create the 1099 file
		*m: plughdate
		*m: processoldsuspense
	*</DefinedPropArrayMethod>

	Caption = "Create State 1099 File"
	DataSession = 2
	DoCreate = .T.
	Height = 133
	HelpContextID = 513
	lcloseonescape = .T.
	Name = "Form1099createST"
	Width = 331
	Mwresize1.lblHighLight.Name = "lblHighLight"
	Mwresize1.lblShading.Name = "lblShading"
	Mwresize1.Name = "Mwresize1"

	ADD OBJECT 'cmdCreate' AS cmdcommandbuttoncustom WITH ;
		Caption = "\<Create", ;
		Height = 36, ;
		Left = 87, ;
		Name = "cmdCreate", ;
		TabIndex = 4, ;
		Top = 79, ;
		Width = 75
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdExit' AS cmdcommandbuttoncustom WITH ;
		Caption = "E\<xit", ;
		Height = 36, ;
		Left = 171, ;
		Name = "cmdExit", ;
		TabIndex = 5, ;
		Top = 79, ;
		Width = 72
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'Lbllabelcustom1' AS lbllabelcustom WITH ;
		Caption = "Create State 1099 file for year:", ;
		FontBold = .T., ;
		Height = 16, ;
		Left = 62, ;
		Name = "Lbllabelcustom1", ;
		TabIndex = 1, ;
		Top = 36, ;
		Width = 166
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'txtcYear' AS swyear WITH ;
		Left = 232, ;
		Name = "txtcYear", ;
		TabIndex = 2, ;
		Top = 34
		*< END OBJECT: ClassLib="..\custom\swcontrol.vcx" BaseClass="textbox" />
	
	PROCEDURE archive		&& Archives prior year 1099s
	ENDPROC

	PROCEDURE cleanoldsusp
	ENDPROC

	PROCEDURE createauditrecs
	ENDPROC

	PROCEDURE fixaudit
	ENDPROC

	PROCEDURE Init
		DODEFAULT()
		*
		*  Initialize the Year textbox
		*
		thisform.txtcYear.value = STR(YEAR(DATE())-1,4)
		
		*
		*  Find the Registry object
		*
		THIS.oRegistry = FindGlobalObject('cmRegistry')
		
		
	ENDPROC

	PROCEDURE makefile		&& Create the 1099 file
		*  Get all information from the tax1099det file.  That's already had all
		*  the suspense adjustments and processing done to it, so we just need
		*  to pull the data from there and group by well state.
		
		LOCAL lcYear, llGross
		 
		lcYear = THISFORM.txtcYear.VALUE
		
		IF NOT THISFORM.oMessage.CONFIRM('Are you sure you want to create the 1099 file for ' + ALLTRIM(lcYear) + '?')
		   RETURN
		ENDIF
		
		SELECT tax1099st
		LOCATE FOR cYear = lcYear
		IF FOUND()
		   IF NOT THISFORM.oMessage.CONFIRM('The state 1099 file for tax year ' + TRIM(lcYear) + ' already exists. Do you want to overwrite it?  This will eliminate any manual changes already made to the 1099 file for this year.')
		      WAIT WIND NOWAIT TIMEOUT 2 'The 1099 process was canceled...'
		      RETURN
		   ELSE
		      WAIT WINDOW NOWAIT 'Deleting 1099 Records...'
		      SELECT tax1099st
		      SET ORDER TO cYear   && CYEAR
		      SCAN FOR cYear = lcYear
		         DELETE NEXT 1
		      ENDSCAN
		   ENDIF
		ENDIF
		
		SELECT options
		GO TOP
		llGross = options.lGross1099
		lnMin1099Roy = nMin1099Roy
		lnMin1099Non = nMin1099Non
		
		SELECT tax1099det
		LOCATE FOR cYear = lcYear
		IF NOT FOUND()
		   THISFORM.oMessage.Warning('Because the State 1099 file is based on the regular 1099 file, the 1099 file will need to be created before the state 1099 file can be built.')
		   RETURN .F.
		ENDIF
		
		
		*  Pull Royalty entries first, then merge in WI later
		SELECT tax1099det.*, IIF(llGross,SUM(nIncome),SUM(nNetCheck)) AS nRoyalty, 000000.00 AS nNonEmp,  ;
		   SUM(nStateTax) AS nStateTax1, SUM(nFedTax) AS nFedTax1, wells.cState AS c1099State  ;
		   FROM tax1099det, wells  ;
		   WHERE cYear = lcYear  ;
		   AND tax1099det.cWellID = wells.cWellID  ;
		   AND cRptGroup <> 'W'  ;
		   GROUP BY cid, c1099State  ;
		   INTO CURSOR state1099tempR READWRITE
		
		*  WI entries
		SELECT tax1099det.*, IIF(llGross,SUM(nIncome),SUM(nNetCheck)) AS nNonEmp,  ;
		   SUM(nStateTax) AS nStateTax1, SUM(nFedTax) AS nFedTax1, wells.cState AS c1099State,  ;
		   tax1099det.cState as cState  ;
		   FROM tax1099det, wells  ;
		   WHERE cYear = lcYear  ;
		   AND tax1099det.cWellID = wells.cWellID  ;
		   AND cRptGroup = 'W'  ;
		   GROUP BY cid, c1099State  ;
		   INTO CURSOR state1099tempW
		
		*  Merge together
		SELECT state1099tempW
		SCAN FOR NOT INLIST(c1099state,'AK','FL','NH','NV','SD','TN','TX','WA','WY')
		   SCATTER MEMVAR
		   SELECT state1099tempR
		   LOCATE FOR cYear = m.cYear AND c1099State = m.c1099State AND cid = m.cid
		   IF FOUND()
		      REPLACE nNonEmp WITH nNonEmp + m.nNonEmp,  ;
		         nStateTax1 WITH nStateTax1 + m.nStateTax1,  ;
		         nFedTax1 WITH nFedTax1 + m.nFedTax1
		   ELSE
		      INSERT INTO state1099tempR FROM MEMVAR
		   ENDIF
		ENDSCAN
		
		SELECT state1099tempR
		SCAN FOR NOT INLIST(c1099state,'AK','FL','NH','NV','SD','TN','TX','WA','WY')
		   SCATTER MEMVAR
		
		   m.nStateTax = m.nStateTax1
		   m.nFedTax = m.nFedTax1
		
		   m.cidtax1 = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.1099Key')
		   SET DELE OFF
		   SELE tax1099st1
		   SET ORDER TO cidtax1
		   DO WHILE INDEXSEEK(m.cidtax1)
		      m.cidtax1 = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.1099Key')
		   ENDDO
		   SET DELE ON
		   INSERT INTO tax1099st FROM MEMVAR
		ENDSCAN
		
		*
		*  Clean up the 1099 file.  There should be no "Dummy"
		*  owners in the file,  There should also not be any
		*  negative numbers.  If any are found, deleted them.
		*
		SELECT tax1099st
		GO TOP
		SCAN
		   SCATTER MEMVAR
		   IF nroyalty < 0
		      REPLACE nroyalty WITH 0
		   ENDIF   
		   IF nrents < 0
		      REPLACE nrents WITH 0
		   ENDIF
		   IF nFedTax < 0
		      REPLACE nFedTax WITH 0
		   ENDIF
		   IF nStateTax < 0
		      REPLACE nStateTax WITH 0
		   ENDIF
		   IF nNonEmp < 0
		      replace nNonEmp WITH 0
		   endif
		   IF nroyalty = 0 AND nrents = 0 AND nFedTax = 0 AND nStateTax = 0 AND nNonEmp = 0
		      DELETE NEXT 1
		   ENDIF
		   IF lnMin1099Non > 0
		      IF nNonEmp < lnMin1099Non AND nroyalty = 0 AND nrents = 0 
		         DELETE NEXT 1
		      ENDIF
		   ENDIF
		   IF lnMin1099Roy > 0
		      IF nroyalty < lnMin1099Roy AND nrents = 0 AND nNonEmp = 0
		         DELETE NEXT 1
		      ENDIF
		   ENDIF
		ENDSCAN
		
		SELECT tax1099st
		=TABLEUPDATE(.T.,.T.)
		
		IF USED('state1099tempR')
		   USE IN state1099tempR 
		ENDIF
		IF USED('state1099tempW')
		   USE IN state1099tempW 
		ENDIF
		
		SELECT tax1099st
		count for not deleted() and cyear=lcyear to lncount
		
		*  Display the total number of 1099 records created.
		THISFORM.oMessage.DISPLAY('Added ' + ALLTRIM(STR(lnCount,5)) + ' Records for to the state 1099 File')
	ENDPROC

	PROCEDURE plughdate
	ENDPROC

	PROCEDURE processoldsuspense
	ENDPROC

	PROCEDURE cmdCreate.Click
		thisform.makefile()
	ENDPROC

	PROCEDURE cmdExit.Click
		thisform.release()
	ENDPROC

	PROCEDURE txtcYear.Valid
		IF NOT BETWEEN(VAL(this.value),1900,2099)
		   WAIT WIND 'Invalid year, please re-enter...'
		   RETURN 0
		ENDIF
	ENDPROC

ENDDEFINE
