*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="ten99magst.scx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
#INCLUDE "vfp2c.h"

DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="2" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Cursor1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor4" UniqueID="" Timestamp="" />

	AutoOpenTables = .F.
	DataSource = .NULL.
	Height = 449
	Left = 40
	Name = "Dataenvironment"
	Top = 235
	Width = 520

	ADD OBJECT 'Cursor1' AS cursor WITH ;
		Alias = "tax1099", ;
		CursorSource = "tax1099", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Filter = "NOT DELETED()", ;
		Height = 90, ;
		Left = 21, ;
		Name = "Cursor1", ;
		Top = 19, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor2' AS cursor WITH ;
		Alias = "vendor", ;
		CursorSource = "vendor", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 150, ;
		Name = "Cursor2", ;
		Order = "cvendorid", ;
		Top = 20, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor3' AS cursor WITH ;
		Alias = "investor", ;
		CursorSource = "investor", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 290, ;
		Name = "Cursor3", ;
		Top = 20, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor4' AS cursor WITH ;
		Alias = "tax1099st", ;
		CursorSource = "tax1099st", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 251, ;
		Left = 10, ;
		Name = "Cursor4", ;
		Top = 140, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

ENDDEFINE

DEFINE CLASS form1099magst AS frmformcustom OF "..\custom\cforms.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="txtPayerAcct" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkCorrect" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdCreate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdExit" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcTCC" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcYear" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cbostate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom6" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkSelected" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cntgetfile1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblTCC" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblSelected" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblPayerAcct" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkTestFile" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: buildreca		&& Builds an "A" record
		*m: buildrecb		&& Builds a "B" record
		*m: buildrecc		&& Builds a "C" record
		*m: buildrecf		&& Builds an "F" record
		*m: buildrect		&& Creates a "T" record
		*m: createfile		&& Creates the 1099 file for magnetic media
		*m: fileio		&& Low-level file I/O
		*m: lookup
		*m: numfmt		&& Format Numbers
		*m: parsename
	*</DefinedPropArrayMethod>

	BufferMode = 0
	Caption = "State Magnetic 1099 File"
	DataSession = 2
	DoCreate = .T.
	Height = 300
	HelpContextID = 255
	lcloseonescape = .T.
	Name = "Form1099magst"
	Width = 494
	MWRESIZE1.lblHighLight.Name = "lblHighLight"
	MWRESIZE1.lblShading.Name = "lblShading"
	MWRESIZE1.Left = 480
	MWRESIZE1.Name = "MWRESIZE1"
	MWRESIZE1.TabIndex = 2
	MWRESIZE1.Top = 348

	ADD OBJECT 'cbostate' AS cbocomboboxcustom WITH ;
		Height = 20, ;
		Left = 166, ;
		Name = "cbostate", ;
		TabIndex = 1, ;
		Top = 23, ;
		Width = 60, ;
		ZOrderSet = 7
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="combobox" />

	ADD OBJECT 'chkCorrect' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		AutoSize = .T., ;
		Caption = "Mark Records As Corrected 1099s", ;
		Left = 263, ;
		Name = "chkCorrect", ;
		TabIndex = 13, ;
		Top = 181, ;
		ZOrderSet = 1
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkSelected' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Choose Selected 1099s", ;
		Left = 91, ;
		Name = "chkSelected", ;
		TabIndex = 12, ;
		Top = 181, ;
		Value = .F.
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkTestFile' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = 'Mark the File as a "Test" File', ;
		Left = 263, ;
		Name = "chkTestFile", ;
		TabIndex = 4, ;
		Top = 48, ;
		Value = .F.
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'cmdCreate' AS cmdcommandbuttoncustom WITH ;
		Caption = "Create \<File", ;
		Height = 36, ;
		Left = 138, ;
		Name = "cmdCreate", ;
		TabIndex = 14, ;
		Top = 240, ;
		Width = 72, ;
		ZOrderSet = 2
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdExit' AS cmdcommandbuttoncustom WITH ;
		Caption = "E\<xit", ;
		Height = 36, ;
		Left = 240, ;
		Name = "cmdExit", ;
		TabIndex = 15, ;
		Top = 240, ;
		Width = 72, ;
		ZOrderSet = 4
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'Cntgetfile1' AS cntgetfile WITH ;
		cdefaultextension = , ;
		cextensionlist = , ;
		Height = 20, ;
		Left = 168, ;
		lfullpath = .T., ;
		lmustexist = .F., ;
		lpathonly = .T., ;
		Name = "Cntgetfile1", ;
		TabIndex = 9, ;
		Top = 132, ;
		Width = 300, ;
		ZOrderSet = 13, ;
		cmdPath.FontBold = .T., ;
		cmdPath.FontSize = 10, ;
		cmdPath.Height = 20, ;
		cmdPath.Left = 272, ;
		cmdPath.Name = "cmdPath", ;
		cmdPath.Top = 0, ;
		edtPath.Height = 21, ;
		edtPath.Left = 0, ;
		edtPath.Margin = 1, ;
		edtPath.Name = "edtPath", ;
		edtPath.Top = 0, ;
		edtPath.Width = 266
		*< END OBJECT: ClassLib="..\common\cmgadget.vcx" BaseClass="container" />

	ADD OBJECT 'Lbllabelcustom1' AS lbllabelcustom WITH ;
		Caption = "State", ;
		Left = 128, ;
		Name = "Lbllabelcustom1", ;
		TabIndex = 3, ;
		Top = 25, ;
		ZOrderSet = 11
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom2' AS lbllabelcustom WITH ;
		Caption = "Accounting Year:", ;
		Height = 16, ;
		Left = 68, ;
		Name = "Lbllabelcustom2", ;
		TabIndex = 6, ;
		Top = 61, ;
		Width = 87, ;
		ZOrderSet = 12
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom6' AS lbllabelcustom WITH ;
		Caption = "File Location:", ;
		Height = 16, ;
		Left = 91, ;
		Name = "Lbllabelcustom6", ;
		TabIndex = 11, ;
		Top = 136, ;
		Width = 65, ;
		ZOrderSet = 8
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblPayerAcct' AS lbllabelcustom WITH ;
		Caption = "Payer Acct No", ;
		Left = 78, ;
		Name = "lblPayerAcct", ;
		TabIndex = 16, ;
		Top = 97, ;
		Visible = .F., ;
		ZOrderSet = 15
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblSelected' AS lbllabelcustom WITH ;
		Caption = " ", ;
		Left = 120, ;
		Name = "lblSelected", ;
		TabIndex = 17, ;
		Top = 209
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblTCC' AS lbllabelcustom WITH ;
		Caption = "TCC:", ;
		Height = 16, ;
		Left = 132, ;
		Name = "lblTCC", ;
		TabIndex = 10, ;
		Top = 97, ;
		Width = 25, ;
		ZOrderSet = 14
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'txtcTCC' AS txttextboxcustom WITH ;
		Height = 20, ;
		InputMask = "XXXXX", ;
		Left = 168, ;
		Margin = 1, ;
		Name = "txtcTCC", ;
		TabIndex = 7, ;
		Top = 94, ;
		Width = 60, ;
		ZOrderSet = 5
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcYear' AS swyear WITH ;
		Left = 166, ;
		Name = "txtcYear", ;
		TabIndex = 5, ;
		Top = 59, ;
		ZOrderSet = 6
		*< END OBJECT: ClassLib="..\custom\swcontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtPayerAcct' AS txttextboxcustom WITH ;
		Height = 20, ;
		Left = 170, ;
		Name = "txtPayerAcct", ;
		TabIndex = 8, ;
		Top = 94, ;
		Visible = .F., ;
		Width = 120, ;
		ZOrderSet = 0
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />
	
	PROCEDURE buildreca		&& Builds an "A" record
	ENDPROC

	PROCEDURE buildrecb		&& Builds a "B" record
	ENDPROC

	PROCEDURE buildrecc		&& Builds a "C" record
	ENDPROC

	PROCEDURE buildrecf		&& Builds an "F" record
	ENDPROC

	PROCEDURE buildrect		&& Creates a "T" record
	ENDPROC

	PROCEDURE createfile		&& Creates the 1099 file for magnetic media
		*
		*  Creates the magnetic media 1099 file
		*
		LOCAL m.totrecs, m.maxrecs, m.reccount, m.crlf, m.bcount, m.total2, m.total7
		LOCAL m.diskno, fh, lc1099File, lcMagFile, oProgress, lnFCount
		LOCAL tcDrive, tcYear, tcTCC, tnType, tcCorrect, tcID1, tcID2, lnTotal
		LOCAL llReturn, lnMax, lnPARecs, lnPos, lnProgress, lnRecordSeq
		LOCAL  AAddress, AAmtcodes, ABlank1, ABlank2, ABlank3, ABlank4, ABlank5, ACity, ACorrect, AForeign
		LOCAL  ANamectl, AOrig, APayer, APayer2, APhone, ARecSeq, AReplace, AState, ATransfer, AZipCode
		LOCAL  Acombined, Acrlf, Alast, Arettype, Atin, Atype, Ayear, B2ndTIN, BAcct, BBlank, BBlank3
		LOCAL  BBlank4, BBlank5, BBlank6, BBlank7, BBlank8, BCRLF, BCode, BCorrected, BDirect, BLocalWH
		LOCAL  BNamectl, BPayAddr, BPayCity, BPayState, BPayZip, BPayee, BPayee2, BPmt1, BPmt2, BPmt3
		LOCAL  BPmt4, BPmt5, BPmt6, BPmt7, BPmt8, BPmt9, BPmtA, BPmtB, BPmtC, BPmtD, BPmtE, BPmtF, BPmtG
		LOCAL  BRecSeq, BSpecial, BStateAmt, BStateCode, BStateWH, BTin, BType, BTypeTin, BYear, Bforeign
		LOCAL  CBlank, CBlank2, CBlank3, CCRLF, CPayeeNum, CRecSeq, CTotal1, CTotal2, CTotal3, CTotal4
		LOCAL  CTotal5, CTotal6, CTotal7, CTotal8, CTotal9, CTotalA, CTotalB, CTotalC, CTotalD, CTotalE
		LOCAL  CTotalF, CTotalG, CType, FBlanks, FBlanks2, FBlanks3, FCRLF, FPayerNum, FPayerNum2, FRecSeq
		LOCAL  FType, FZeros, KBlank1, KBlank2, KBlank3, KBlank4, KCRLF, KLocalWH, KPayeeNum, KRecSeq
		LOCAL  KStateCode, KStateWH, KTotal1, KTotal2, KTotal3, KTotal4, KTotal5, KTotal6, KTotal7
		LOCAL  KTotal8, KTotal9, KTotalA, KTotalB, KTotalC, KTotalD, KTotalE, KTotalF, KTotalG, KType
		LOCAL  TAddress, TBlank, TBlank2, TBlank3, TBlank4, TBlank5, TCRLF, TCity, TCompCont, TCompany
		LOCAL  TContact, TEmail, TForeign, TMagInd, TName, TNameCont, TOrigFile, TPayeeNo, TPhone, TPrior
		LOCAL  TRecSeq, TReplace, TState, TTCC, TTest, TTransTIN, TType, TVendAdd, TVendCity, TVendCon
		LOCAL  TVendEmail, TVendName, TVendPhone, TVendState, TVendZip, TVendor, TYear, TZip, bcount
		LOCAL  cProducer, cTaxYear, cTaxid, caddress, cownerid, cpayeracct, cpayerid, crlf, czip, diskno
		LOCAL  maxrecs, nnonemp, npaincome, nstatetax, paddr1, paddr2, paddr3, pcity, pcontact, pphone
		LOCAL  pstate, ptax, pzip, RECCOUNT, tcPath, tcPayerAcct, tcState, test, total1, total2, total7
		LOCAL  totrecs, onames
		
		llReturn = .T.
		
		TRY
		   tcPath      = THISFORM.cntgetfile1.edtpath.VALUE
		   tcYear      = THISFORM.txtcYear.VALUE
		   tcTCC       = THISFORM.txtcTCC.VALUE
		   tcCorrect   = IIF(THISFORM.chkCorrect.VALUE, 'Y', 'N')
		   tcState     = THISFORM.cboState.VALUE
		   tcPayerAcct = THISFORM.numfmt(THISFORM.txtPayerAcct.VALUE, 9)
		   tlSelected  = THISFORM.chkselected.VALUE
		
		   lnFCount  = 0
		   
		   IF NOT USED('compmast')
		      USE (m.goapp.cCommonFolder+'compmast') IN 0
		   ENDIF 
		   SELECT compmast
		   LOCATE FOR cidcomp = m.goapp.cidcomp
		   IF FOUND()
		      m.cpayersname = cproducer
		      m.cpayeradd1  = caddress1
		      m.cpayeradd2  = caddress2
		      m.cpayeradd3  = ''
		      m.cpayertown  = ccity
		      m.cpayerdist  = cstate
		      m.cpayerzip   = czipcode
		      m.cpayercntry = 'US'
		   ENDIF 
		
		   IF EMPTY(tcTCC) AND NOT tcState = 'PA'
		      THISFORM.oMessage.Warning("You must specify a TCC number before the magnetic file can be built. If your state doesn't require a TCC number, enter '00000' instead.")
		      THISFORM.setnextcontrol(THISFORM.txtcTCC)
		      llReturn = .F.
		      EXIT 
		   ENDIF
		
		   IF NOT DIRECTORY(tcPath)
		      THISFORM.oMessage.Warning('The given file location does not exist. Please choose a valid location.')
		      llReturn = .F.
		      EXIT 
		   ENDIF
		
		* Check on the existence of the application object
		* if it doesn't exist, we're running in development
		* mode and need to initialize the company address info.
		   IF TYPE('m.goApp') = 'O'
		      m.cProducer = m.goApp.ccompanyname
		      m.paddr1    = m.goApp.cAddress1
		      m.paddr2    = m.goApp.cAddress2
		      m.paddr3    = m.goApp.cAddress3
		      m.ptax      = cmEncrypt(m.goApp.cTaxid,m.goapp.cEncryptionKey)
		      m.pcity     = m.goApp.ccity
		      m.pzip      = m.goApp.czip
		      m.pstate    = m.goApp.cstate
		      m.pcontact  = m.goApp.cContact
		      m.pphone    = m.goApp.cPhoneno
		
		**  Force them to make sure all the T-record fields are specified, so we ensure that the file doesn't get rejected for something bogus
		**  like leaving off the company phone number or contact name
		      IF EMPTY(m.cProducer)
		         THISFORM.oMessage.Warning('Please specify a valid company name on the Maintain >> Company Information screen before creating the magnetic file.')
		         llReturn = .F.
		      EXIT 
		      ENDIF
		      IF EMPTY(m.paddr1)
		         THISFORM.oMessage.Warning('Please specify a valid company address on the Maintain >> Company Information screen before creating the magnetic file.')
		         llReturn = .F.
		      EXIT 
		      ENDIF
		      IF EMPTY(m.ptax)
		         THISFORM.oMessage.Warning('Please specify a valid company tax ID on the Maintain >> Company Information screen before creating the magnetic file.')
		         llReturn = .F.
		      EXIT 
		      ENDIF
		      IF EMPTY(m.pcity)
		         THISFORM.oMessage.Warning('Please specify a valid city in the address on the Maintain >> Company Information screen before creating the magnetic file.')
		         llReturn = .F.
		      EXIT 
		      ENDIF
		      IF EMPTY(m.pstate)
		         THISFORM.oMessage.Warning('Please specify a valid state in the address on the Maintain >> Company Information screen before creating the magnetic file.')
		         llReturn = .F.
		      EXIT 
		      ENDIF
		      IF EMPTY(m.pzip)
		         THISFORM.oMessage.Warning('Please specify a valid zip code in the address on the Maintain >> Company Information screen before creating the magnetic file.')
		         llReturn = .F.
		      EXIT 
		      ENDIF
		      IF EMPTY(m.pcontact)
		         THISFORM.oMessage.Warning('Please specify a valid contact name on the Maintain >> Company Information screen before creating the magnetic file.')
		         llReturn = .F.
		      EXIT 
		      ENDIF
		      IF EMPTY(m.pphone)
		         THISFORM.oMessage.Warning('Please specify a valid phone number on the Maintain >> Company Information screen before creating the magnetic file.')
		         llReturn = .F.
		      EXIT 
		      ENDIF
		   ELSE
		      m.cProducer = 'SherWare, Inc.'
		      m.paddr1    = '4182 Clemmons Road #285'
		      m.paddr2    = 'Clemmons, NC  27012'
		      m.paddr3    = ''
		      m.ptax      = '99-9999999'
		      m.pcontact  = 'Phil Sherwood'
		      m.pphone    = '3302620200'
		      m.pcity     = 'Clemmons'
		      m.pstate    = 'NC'
		      m.pzip      = '27012'
		   ENDIF
		
		   IF NOT tlSelected
			  SELECT  tcCorrect AS correct, ;
					  m.paddr1 AS paddr1, ;
					  m.paddr2 AS paddr2, ;
					  m.paddr3 AS paddr3, ;
					  m.ptax   AS ptax, ;
					  m.pphone AS pphone, ;
					  m.pcontact AS pcontact, ;
					  m.cProducer AS cProducer, ;
					  tax1099st.cYear, ;
					  tax1099st.cid, ;
					  tax1099st.cidtype, ;
					  tax1099st.cprogcode, ;
					  tax1099st.cname, ;
					  tax1099st.cname2, ;
					  tax1099st.caddr1, ;
					  tax1099st.caddr2, ;
					  tax1099st.ccity, ;
					  tax1099st.cstate, ;
					  tax1099st.czip, ;
					  tax1099st.cTaxid, ;
					  tax1099st.nother, ;
					  tax1099st.nnonemp, ;
					  tax1099st.nroyalty, ;
					  tax1099st.nrents, ;
					  tax1099st.nstatetax, ;
					  tax1099st.nfedtax ;
				  FROM tax1099st ;
				  WHERE cYear  = tcYear ;
					  AND c1099State = tcState ;
					  AND NOT DELETED() ;
				  INTO CURSOR temp1099 ;
				  ORDER BY cid
		   ELSE
			  SELECT  tcCorrect AS correct, ;
					  m.paddr1 AS paddr1, ;
					  m.paddr2 AS paddr2, ;
					  m.paddr3 AS paddr3, ;
					  m.ptax   AS ptax, ;
					  m.pphone AS pphone, ;
					  m.pcontact AS pcontact, ;
					  m.cProducer AS cProducer, ;
					  tax1099st.cYear, ;
					  tax1099st.cid, ;
					  tax1099st.cidtype, ;
					  tax1099st.cprogcode, ;
					  tax1099st.cname, ;
					  tax1099st.cname2, ;
					  tax1099st.caddr1, ;
					  tax1099st.caddr2, ;
					  tax1099st.ccity, ;
					  tax1099st.cstate, ;
					  tax1099st.czip, ;
					  tax1099st.cTaxid, ;
					  tax1099st.nother, ;
					  tax1099st.nnonemp, ;
					  tax1099st.nroyalty, ;
					  tax1099st.nrents, ;
					  tax1099st.nstatetax, ;
					  tax1099st.nfedtax ;
				  FROM tax1099st ;
				  WHERE cYear  = tcYear ;
					  AND c1099State = tcState ;
					  AND cid IN (SELECT  cid ;
									  FROM ten99sel) ;
					  AND NOT DELETED() ;
				  INTO CURSOR temp1099 ;
				  ORDER BY cid
		   ENDIF
		
		   lnFCount  = 0
		   m.totrecs = 0
		   m.bcount  = 0
		   m.total1  = 0
		   m.total2  = 0
		   m.total7  = 0
		   m.diskno  = 1
		   m.crlf    = CHR(13) + CHR(10)
		   tcDrive   = tcDrive
		   fh        = ' '
		
		   m.test = .f.
		
		   IF 'SHERWARE' $ UPPER(m.cProducer)
		      IF THISFORM.oMessage.CONFIRM('Is This A Test File?')
		         m.test = .t.
		      ENDIF
		   ENDIF
		   
		   IF thisform.chkTestFile.value
		      m.test = .T.
		   ENDIF 
		
		   IF tcState = 'PA'
		      CREATE CURSOR pa1099 ;
		         (cpayeracct   c(9), ;
		           cEntityType c(3), ;
		           cPayerID    c(9), ;
		           cTaxYear    c(4), ;
		           cTaxid      c(9), ;
		           cType       C(3), ;
		           cownerid    c(10), ;
		           cLastName   c(30), ;
		           cfirstname  c(20), ;
		           cmidname    c(20), ;
		           csuffix     c(20), ;
		           caddress1   c(50), ;
		           caddress2   c(50), ;
		           caddress3   c(50), ;
		           ccity       c(22), ;
		           cstate      c(2), ;
		           czip        c(15), ;
		           ccountry    c(2), ;
		           nrents      N(12, 2), ;
		           nroyalty    N(12, 2), ;
		           nother      n(12,2), ;
		           nmedpmts    n(12,2), ;
		           nnonemp     N(12, 2), ;
		           nattorney   n(12,2), ;
		           nstatetax   n(12,2), ;
		           npaincome   N(12, 2), ;
		           cpayersname c(50), ;
		           cpayeradd1  c(50), ;
		           cpayeradd2  c(50), ;
		           cpayeradd3  c(50), ;
		           cpayertown  c(50), ;
		           cpayerdist  c(2), ;
		           cpayerzip   c(15), ;
		           cpayercntry c(2))
		   ENDIF
		
		
		*
		*  Transmitter Record
		*
		   TType      = 'T'			&& Record Type						1
		   TYear      = tcYear         && Payment Year						2-5
		   TPrior     = ' '            && Prior Year Data Indicator		6
		   TTransTIN  = THISFORM.numfmt(m.ptax, 9)  && Transmitter's taxid #			7-15
		   TTCC       = tcTCC			&& Transmitter Control Code			16-20
		   TReplace   = SPACE(2)    	&& Replacement File Character		21-22
		   TBlank     = SPACE(5)		&& Blank							23-27
		   TTest      = IIF(m.test,'T',' ')			&& Test Indicator					28
		   TForeign   = ' '			&& Foreign Entity Indicator, blank means no	29
		   TName      = UPPER(PADR(ALLTRIM(m.cProducer), 40, ' '))  	&&		30-69
		   TNameCont  = SPACE(40)      && Transmitter Name Continuation	70-109
		   TCompany   = UPPER(PADR(ALLTRIM(m.cProducer), 40, ' '))	&&		110-149
		   TCompCont  = SPACE(40)		&& Company Name Continuation		150-189
		   TAddress   = UPPER(PADR(ALLTRIM(m.paddr1), 40, ' '))		&&		190-229
		   TCity      = UPPER(PADR(ALLTRIM(m.pcity), 40, ' '))		&&		230-269
		   TState     = UPPER(m.pstate) && Transmitter State Code			270-271
		   TZip       = UPPER(PADR(TRANSFORM(m.pzip), 9, ' ')) 		&&		272-280
		   TBlank2    = SPACE(15)		&& Blank					&&		281-295
		   TPayeeNo   = '00000000'		&& Number of B Payee records		296-303
		   TContact   = UPPER(PADR(ALLTRIM(m.pcontact), 40, ' '))	&&		304-343
		   TPhone     = PADR(ALLTRIM(m.pphone), 15, ' ')				&&		344-358
		   TEmail     = SPACE(35)      && Contact email address            359-393
		   TMagInd    = SPACE(2)		&& Magnetic Tape Indicator			394-395
		   TOrigFile  = SPACE(15)		&& Original File Name				396-410
		   TBlank3    = SPACE(89 )     && Blank							411-499
		   TRecSeq    = '00000001'     && Record sequence number           500-507
		   TBlank4    = SPACE(10)      && Blank                            508-517
		   TVendor    = 'V'            && Vendor indicator.  SherWare is the vendor 518
		   TVendName  = 'SherWare, Inc.                          '  && Vendor Name 519-558
		   TVendAdd   = '4182 Clemmons Road Box 285              '  && Vendor Address 559-598
		   TVendCity  = 'Clemmons                                '  &&  Vendor City 599-638
		   TVendState = 'NC'           && Vendor state                     639-640
		   TVendZip   = '27012    '    && Vendor Zip                       641-649
		   TVendCon   = 'Phil Sherwood                           '  && Vendor contact 650-689
		   TVendPhone = '3302620200     '  &&  Vendor phone                690-704
		   TVendEmail = 'sales@sherware.com                 '  &&  Vendor email  705-739
		   TBlank5    = '         '    &&  Blank                           740-748
		   TCRLF      = m.crlf         && Carriage Return and Line Feed	749-750
		
		*
		*  Record "A"
		*
		   Atype     = 'A'			&& Record Type						1
		   Ayear     = tcYear			&& Payment Year						2-5
		   Acombined = ' '			&& Combined federal/state filer		6
		   ABlank1   = SPACE(5)       && Blank							7-11
		   Atin      = THISFORM.numfmt(m.ptax, 9) && Payer's TIN			12-20
		   ANamectl  = SPACE(4)   	&& Payer Name Control				21-24
		   Alast     = ' '			&& Last filing indicator			25
		   Arettype  = 'A '			&& Return type   1099-misc = "A"	26-27
		   AAmtcodes = '12347C      '	&& Amount codes						28-39
		   ABlank2   = SPACE(8)       && Blank							40-47
		   AOrig     = ' ' 			&& Original File Indicator			48  &&  Blanked out original file marker, per IRS instructions for 2007 files - BH 12/03/2007
		   AReplace  = ' ' 			&& Replacement File Indicator		49
		   ACorrect  = ' '			&& Corrected File Indicator			50
		   ABlank3   = ' '       		&& Blank							51
		   AForeign  = ' '			&& Foreign Corporation				52
		   APayer    = UPPER(PADR(ALLTRIM(m.cProducer), 40, ' '))	&&		53-92
		   APayer2   = SPACE(40)		&& Payer name line 2				93-132
		   ATransfer = '0'			&& 2nd payer type					133
		   AAddress  = UPPER(PADR(ALLTRIM(m.paddr1), 40, ' '))		&&		134-173
		   ACity     = UPPER(PADR(ALLTRIM(m.pcity), 40, ' '))		&&		174-213
		   AState    = UPPER(m.pstate) && Payer State						214-215
		   AZipCode  = UPPER(PADR(TRANSFORM(m.pzip), 9, ' ')) && Payer Zip Cd	216-224
		   APhone    = PADR(ALLTRIM(m.pphone), 15, ' ')	&& Payer Phone Num	225-239
		   ABlank4   = SPACE(260)     && Blank							240-499
		   ARecSeq   = '00000002'     && Record sequence                  500-507
		   ABlank5   = SPACE(241)     && Blanks                           508-748
		   Acrlf     = m.crlf			&& Carriage Return/Line Feed		749-750
		*
		*  Record "B"
		*
		   BType      = 'B'			    && Record Type						1
		   BYear      = tcYear			&& Payment year						2-5
		   BCorrected = ' '			    && Corrected Return Indicator		6
		   BNamectl   = SPACE(4)  		&& Name control						7-10
		   BTypeTin   = ' '			    && Type of Tin						11
		   BTin       = SPACE(9)		&& TIN								12-20
		   BAcct      = SPACE(20)		&& Payer's acct # for payee			21-40
		   BCode      = SPACE(4)		&& Payer's office code				41-44
		   BBlank     = SPACE(10) 		&& Blank							45-54
		   BPmt1      = '000000000000'  && Payment amount 1  				55-66
		   BPmt2      = '000000000000'  && Payment amount 2					67-78
		   BPmt3      = '000000000000'  && Payment amount 3					79-90
		   BPmt4      = '000000000000'  && Payment amount 4					91-102
		   BPmt5      = '000000000000'  && Payment amount 5					103-114
		   BPmt6      = '000000000000'  && Payment amount 6					115-126
		   BPmt7      = '000000000000'  && Payment amount 7					127-138
		   BPmt8      = '000000000000'	&& Payment amount 8					139-150
		   BPmt9      = '000000000000'	&& Payment amount 9					151-162
		   BPmtA      = '000000000000'	&& Payment amount A					163-174
		   BPmtB      = '000000000000'	&& Payment amount B					175-186
		   BPmtC      = '000000000000'	&& Payment amount C					187-198
		   BPmtD      = '000000000000'	&& Payment amount C					199-210
		   BPmtE      = '000000000000'	&& Payment amount C					211-222
		   BPmtF      = '000000000000'	&& Payment amount C					223-234
		   BPmtG      = '000000000000'	&& Payment amount C					235-246
		   Bforeign   = ' '			    && Foreign country indicator		247
		   BPayee     = SPACE(40) 		&& Payee name						248-287
		   BPayee2    = SPACE(40)		&& Payee name 2						288-327
		   BBlank3    = SPACE(40)		&& Blank							328-367
		   BPayAddr   = SPACE(40)		&& Payee address					368-407
		   BBlank4    = SPACE(40) 		&& Blank							408-447
		   BPayCity   = SPACE(40)		&& Payee city						448-487
		   BPayState  = SPACE(2) 		&& Payee state						488-489
		   BPayZip    = SPACE(9)		&& Payee zip						490-498
		   BBlank5    = SPACE(1)		&& blanks							499
		   BRecSeq    = '00000001'      && Record sequence                  500-507
		   BBlank6    = SPACE(36)       && Blanks                           508-543
		   B2ndTIN    = ' '	 	    	&& 2nd TIN Notice					544
		   BBlank7    = SPACE(2)		&& Blank							545-546
		   BDirect    = ' ' 			&& Direct sales indicator			547
		   BBlank8    = SPACE(115)		&& Blank							548-662
		   BSpecial   = SPACE(60)       && Special Data Entries             553-722
		   BStateWH   = SPACE(12)       && State Income Tax Withheld        723-734
		   BLocalWH   = SPACE(12)       && Local Income Tax Withheld        735-746
		   BStateCode = SPACE(2)        && Combined Federal/State Code      747-748
		   BCRLF      = m.crlf			&& Carriage Return/Line Feed		749-750
		*
		* Record "C"
		*
		   CType     = 'C'			&& Record Type						1
		   CPayeeNum = '00000000'		&& Number of B records				2-9
		   CBlank    = SPACE(6)   	&& Blanks							10-15
		   CTotal1   = '000000000000000000'	&& Control Total 1			16-33
		   CTotal2   = '000000000000000000'	&& Control Total 2			34-51
		   CTotal3   = '000000000000000000'	&& Control Total 3			52-69
		   CTotal4   = '000000000000000000'	&& Control Total 4			70-87
		   CTotal5   = '000000000000000000'	&& Control Total 5			88-105
		   CTotal6   = '000000000000000000'	&& Control Total 6			106-123
		   CTotal7   = '000000000000000000'	&& Control Total 7			124-141
		   CTotal8   = '000000000000000000'	&& Control Total 8			142-159
		   CTotal9   = '000000000000000000'	&& Control Total 9			160-177
		   CTotalA   = '000000000000000000'	&& Control Total A			178-195
		   CTotalB   = '000000000000000000'	&& Control Total B			196-213
		   CTotalC   = '000000000000000000'	&& Control Total C			214-231
		   CTotalD   = '000000000000000000'	&& Control Total D			232-249
		   CTotalE   = '000000000000000000'	&& Control Total E			250-267
		   CTotalF   = '000000000000000000'	&& Control Total F			268-285
		   CTotalG   = '000000000000000000'	&& Control Total G			286-303
		   CBlank2   = SPACE(196)			&& Blank					304-499
		   CRecSeq   = '00000001'           && Record sequence          500-507
		   CBlank3   = SPACE(241)           && Blank                    508-748
		   CCRLF     = m.crlf				&& Carriage Ret/Line Feed	749-750
		*
		* Record "K"
		*
		   KType      = 'K'                  && Record Type              1
		   KPayeeNum  = '00000000'           && Number of B Recs for St  2-9
		   KBlank1    = SPACE(6)             && Blank                    10-15
		   KTotal1    = '000000000000000000' && Control Total 1          16-33
		   KTotal2    = '000000000000000000' && Control Total 2          34-51
		   KTotal3    = '000000000000000000' && Control Total 3          52-69
		   KTotal4    = '000000000000000000' && Control Total 4          70-87
		   KTotal5    = '000000000000000000' && Control Total 5          88-105
		   KTotal6    = '000000000000000000' && Control Total 6          106-123
		   KTotal7    = '000000000000000000' && Control Total 7          124-141
		   KTotal8    = '000000000000000000' && Control Total 8          142-159
		   KTotal9    = '000000000000000000' && Control Total 9          160-177
		   KTotalA    = '000000000000000000' && Control Total A          178-195
		   KTotalB    = '000000000000000000' && Control Total B          196-213
		   KTotalC    = '000000000000000000' && Control Total C          214-231
		   KTotalD    = '000000000000000000' && Control Total D          232-249
		   KTotalE    = '000000000000000000' && Control Total E          250-267
		   KTotalF    = '000000000000000000' && Control Total F          268-285
		   KTotalG    = '000000000000000000' && Control Total G          286-303
		   KBlank2    = SPACE(196)           && Blank                    304-499
		   KRecSeq    = '00000001'           && Record Sequence          500-507
		   KBlank3    = SPACE(199)           && Blank                    508-706
		   KStateWH   = '000000000000000000' && State Income Tax WH      707-724
		   KLocalWH   = '000000000000000000' && Local Income Tax WH      725-742
		   KBlank4    = SPACE(4)             && Blank                    743-746
		   KStateCode = tcState             && State Code               747-748
		   KCRLF      = m.crlf               && Carriage ret/line feed   749-750
		
		
		*
		* Record "F"
		*
		   FType      = 'F'			        && Record Type						1
		   FPayerNum  = '00000001'	        && Number of A records				2-9
		   FZeros     = '000000000000000000000'  && Zeros					10-30
		   FBlanks    = SPACE(19)  	        && Blanks							31-49
		   FPayerNum2 = '00000001'          && Number of B records              50-57
		   FBlanks2   = SPACE(442)          && Blanks                           58-499
		   FRecSeq    = '00000001'          && Record sequence number           500-508
		   FBlanks3   = SPACE(241)          && Blanks                           509-748
		   FCRLF      = m.crlf			    && Carriage Ret/Line Feed			749-750
		
		   SELECT temp1099
		   COUNT FOR cYear = tcYear TO lnMax
		   GO TOP
		   lnProgress = 1
		   oProgress  = THISFORM.oMessage.ProgressBar('Creating 1099 Magnetic File For ' + tcYear + '....')
		   oProgress.SetProgressRange(0, lnMax)
		
		   m.maxrecs  = 999999999
		   m.reccount = 999999999
		   lnTotal    = 0
		
		   lnRecordSeq = 1
		
		   lcMagFile = 'IRSTAX_' + tcState + '.txt'
		   IF FILE(ADDBS(tcPath) + lcMagFile)
		      ERASE (ADDBS(tcPath) + lcMagFile)
		   ENDIF
		*!*	   IF tcState <> 'PA'
		*!*	      fh = FCREATE(ADDBS(tcPath) + lcMagFile)
		*!*	   ENDIF
		 
		   lcFileName = ADDBS(tcPath) + lcMagFile
		   
		   TRecSeq     = PADL(TRANSFORM(lnRecordSeq), 8, '0')
		   lnRecordSeq = lnRecordSeq + 1
		
		   TPayeeNo    = PADL(ALLTRIM(STR(lnMax, 8)), 8, '0')
		   lcString = TType + TYear + TPrior + TTransTIN + TTCC + TReplace + TBlank + TTest + ;
		              TForeign + TName + TNameCont + TCompany + TCompCont + TAddress + ;
		              TCity + TState + TZip + TBlank2 + TPayeeNo + TContact + TPhone + ;
		              TEmail + TMagInd + TOrigFile + TBlank3 + TRecSeq + TBlank4 + ;
		              TVendor + TVendName + TVendAdd + TVendCity + TVendState + TVendZip + ;
		              TVendCon + TVendPhone + TVendEmail + TBlank5 + TCRLF
		              
		   lnReturn = STRTOFILE(lcString, lcFileName, .f.)
		
		   ARecSeq     = PADL(TRANSFORM(lnRecordSeq), 8, '0')
		   lnRecordSeq = lnRecordSeq + 1
		   
		   lcString = "A" + Ayear + ABlank1 + Atin + ANamectl + Alast + Acombined + Arettype + AAmtcodes + ;
		              ABlank2 + AOrig + AReplace + ACorrect + ABlank3 + AForeign + ;
		              APayer + APayer2 + ATransfer + AAddress + ACity + AState + AZipCode + ;
		              APhone + ABlank4 + ARecSeq + ABlank5 + Acrlf
		              
		   lnReturn = STRTOFILE(lcString, lcFileName, .t.)           
		 
		   STORE 0 TO lnStateTax, lnFedTax
		   
		   SELECT temp1099
		   SCAN
		      SCATTER MEMVAR
		      m.cTaxID = cmEncrypt(ALLTRIM(m.cTaxID),m.goApp.cEncryptionKey)
		      oProgress.UpdateProgress(lnProgress)
		      lnProgress = lnProgress + 1
		
		      m.reccount = 1
		      m.totrecs  = m.totrecs + 1
		      m.reccount = m.reccount + 1
		      
		      lnStateTax = lnStateTax + nStateTax
		      lnFedTax   = lnFedTax   + nFedTax
		
		      BRecSeq     = PADL(TRANSFORM(lnRecordSeq), 8, '0')
		      lnRecordSeq = lnRecordSeq + 1
		      
		      BTin      = THISFORM.numfmt(m.cTaxid, 9)
		      BPmt1     = THISFORM.numfmt(PADL(ALLTRIM(STR(m.nrents, 12, 2)), 12, '0'), 12)
		      BPmt2     = THISFORM.numfmt(PADL(ALLTRIM(STR(m.nroyalty, 12, 2)), 12, '0'), 12)
		      BPmt7     = THISFORM.numfmt(PADL(ALLTRIM(STR(m.nother+m.nNonEmp, 12, 2)), 12, '0'), 12)
		      BStateAmt = THISFORM.numfmt(PADL(ALLTRIM(STR(0, 12, 2)), 12, '0'), 12)
		      BPayee    = PADR(ALLTRIM(m.cname), 40, ' ')
		      BPayAddr  = PADR(ALLTRIM(m.caddr1), 40, ' ')
		      BPayCity  = PADR(ALLTRIM(m.ccity), 40, ' ')
		      BPayState = m.cstate
		      IF '-' $ m.czip
		         lnPos  = AT('-', m.czip)
		         m.czip = SUBSTR(m.czip, 1, lnPos - 1) + SUBSTR(m.czip, lnPos + 1)
		      ENDIF
		      BPayZip  = PADR(ALLTRIM(m.czip), 9, ' ')
		      m.total1 = m.total1 + m.nrents
		      m.total2 = m.total2 + m.nroyalty
		      m.total7 = m.total7 + m.nother+m.nNonEmp
		      BAcct    = PADR(ALLTRIM(m.cid), 20, ' ')
		      
		      IF tcCorrect = 'Y'
		         BCorrected = 'G'
		      ENDIF
		      
		      lcString = BType + BYear + BCorrected + BNamectl + BTypeTin + BTin + ;
		                 BAcct + BCode + BBlank + ;
		                 BPmt1 + BPmt2 + BPmt3 + BPmt4 + BPmt5 + BPmt6 + ;
		                 BPmt7 + BPmt8 + BPmt9 + BPmtA + BPmtB + BPmtC + ;
		                 BPmtD + BPmtE + BPmtF + BPmtG + Bforeign + ;
		                 BPayee + BPayee2 + BBlank3 + BPayAddr + BBlank4 + BPayCity + BPayState + ;
		                 BPayZip + BBlank5 + BRecSeq + BBlank6 + B2ndTIN + BBlank7 + ;
		                 BDirect + BBlank8 + BSpecial + BStateWH + BLocalWH + BStateCode + BCRLF
		                 
		      lnReturn = STRTOFILE(lcString, lcFilename, .T.)            
		
		      m.reccount = m.reccount + 1
		      m.bcount   = m.bcount + 1
		      lnTotal    = lnTotal + 1
		
		      IF tcState = 'PA'
		         swselect('investor')
		         LOCATE FOR cownerid = m.cid
		         IF FOUND()
		            m.itaxidtype = itaxidtype
		         ELSE
		            m.itaxidtype = 2
		         ENDIF 
		         m.cpayeracct = tcPayerAcct
		         m.cTaxYear   = tcYear
		         m.cTaxid     = BTin
		         m.cownerid   = m.cid
		         m.caddress1  = m.caddr1
		         m.caddress2  = m.caddr2
		         m.nnonemp    = m.nother+m.nnonemp
		         m.npaincome  = m.nrents + m.nroyalty + m.nnonemp
		         m.nmedpmts   = 0
		         m.nother     = 0
		         m.cpayerid   = Atin
		         m.cEntitytype = '001'
		         m.CType      = PADL(TRANSFORM(m.itaxidtype),3,'0')
		         
		         IF VARTYPE(oNames) # 'O'
		            oNames = CREATEOBJECT('cmNameParser')
		         ENDIF    
		
				STORE '' TO lcName, ;
		            lcFirst, ;
		            lcSalute, ;
		            lcMiddle, ;
		            lcLast, ;
		            lcSuffix
		
		        lcname = m.cname
		        
				oNames.ParseName(lcName, @lcSalute, @lcFirst, @lcMiddle, @lcLast, @lcSuffix)
				m.cfirstname = lcFirst
				m.cLastname  = lcLast
				m.cmidname   = lcMiddle
				m.csuffix    = lcsuffix
				
				IF m.cpayerdist = 'PA'
		   			STORE '' TO m.cpayersname, m.cpayeradd1, m.cpayeradd2, m.cpayeradd3, m.cpayertown, ;
				            m.cpayerdist, m.cpayerzip, m.cpayercntry
				ENDIF             
		
		         INSERT INTO pa1099 FROM MEMVAR
		      ENDIF
		   ENDSCAN
		   
		   oNames = .Null.
		
		   CPayeeNum = PADL(ALLTRIM(STR(m.bcount, 8)), 8, '0')
		   CTotal1   = THISFORM.numfmt(PADL(ALLTRIM(STR(m.total1, 18, 2)), 18, '0'), 18)
		   CTotal2   = THISFORM.numfmt(PADL(ALLTRIM(STR(m.total2, 18, 2)), 18, '0'), 18)
		   CTotal7   = THISFORM.numfmt(PADL(ALLTRIM(STR(m.total7, 18, 2)), 18, '0'), 18)
		
		   CRecSeq     = PADL(TRANSFORM(lnRecordSeq), 8, '0')
		   lnRecordSeq = lnRecordSeq + 1
		
		   lcString = 'C' + CPayeeNum + CBlank + CTotal1 + CTotal2 + CTotal3 + ;
		              CTotal4 + CTotal5 + CTotal6 + CTotal7 + CTotal8 + CTotal9 + ;
		              CTotalA + CTotalB + CTotalC + CTotalD + CTotalE + CTotalF + CTotalG + ;
		              CBlank2 + CRecSeq + CBlank3 + CCRLF
		   
		   KRecSeq = PADL(TRANSFORM(lnRecordSeq), 8, '0')           
		    lnRecordSeq = lnRecordSeq + 1
		   lnReturn = STRTOFILE(lcString, lcFileName, .T.)
		   
		   kStateWH = THISFORM.numfmt(PADL(ALLTRIM(STR(lnStateTax, 18, 2)), 18, '0'), 18)
		   KFedWH   = THISFORM.numfmt(PADL(ALLTRIM(STR(lnFedTax, 18, 2)), 18, '0'), 18)
		
		   
		   lcString = KType + cPayeeNum + kBlank1 + cTotal1 + cTotal2 + cTotal3 + cTotal4 + ;
		              CTotal5 + CTotal6 + CTotal7 + CTotal8 + CTotal9 + ;
		              CTotalA + CTotalB + CTotalC + CTotalD + CTotalE + CTotalF + CTotalG + ;
		              kBlank2 + KRecSeq + KBlank3 + KStateWH + KFedWH + KBlank4 + KStateCode + KCRLF
		              
		   lnReturn = STRTOFILE(lcString, lcFileName, .t.)
		   
		   m.reccount = m.reccount + 1
		   lnFCount   = lnFCount + 1
		
		   FPayerNum2 = PADL(ALLTRIM(STR(RECC('Temp1099'))), 8, '0')
		
		   FRecSeq     = PADL(TRANSFORM(lnRecordSeq), 8, '0')
		   lnRecordSeq = lnRecordSeq + 1
		
		   lcString = FType + FPayerNum + FZeros + FBlanks + FPayerNum2 + FBlanks2 + FRecSeq + FBlanks3 + FCRLF
		   
		   lnReturn = STRTOFILE(lcString, lcFileName, .T.)
		
		   WAIT CLEAR
		
		   IF tcState = 'PA'
		      TRY
		         SELECT pa1099
		         COPY TO (ADDBS(tcPath) + 'pa1099.csv') TYPE DELIMITED
		         COUNT TO lnPARecs
		         MESSAGEBOX('Created the file: ' + ADDBS(tcPath) + 'pa1099.csv with ' + TRANSFORM(lnPARecs) + ' records.', 48, 'PA 1099 File')
		      CATCH
		      ENDTRY
		   ENDIF
		
		   IF TYPE('oProgress') = 'O'
		      oProgress.CLOSE()
		   ENDIF
		
		   IF tcState <> 'PA'
		      THISFORM.oMessage.DISPLAY('Created ' + ALLTRIM(STR(RECC('temp1099'))) + ' Magnetic 1099 Records.')
		   ENDIF
		
		   IF USED('temp1099')
		      SELECT temp1099
		      USE
		   ENDIF
		CATCH TO loError
		   llReturn = .F.
		   DO errorlog WITH 'CreateFile', loError.LINENO, 'Create State 1099s', loError.ERRORNO, loError.MESSAGE
		   MESSAGEBOX('Unable to process the state 1099s at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		        'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		RETURN llReturn
		
		
		
		
	ENDPROC

	PROCEDURE fileio		&& Low-level file I/O
		LPARA handle, bytes
		
		IF thisform.cbostate.Value = 'PA'
		   RETURN
		ENDIF
		
		=FWRITE(handle,bytes)
		IF ferror() > 0
		   DO CASE
		      CASE ferror() = 4
		           m.msg = 'TOO MANY FILE OPEN (OUT OF HANDLES)'
		      CASE ferror() = 5
		           m.msg = 'FILE ACCESS DENIED'
		      CASE ferror() = 8
		           m.msg = 'OUT OF MEMORY'
		      CASE ferror() = 29
		           m.msg = 'DISK FULL (OUT OF SPACE)'
		      CASE ferror() = 31
		           m.msg = 'GENERAL FAILURE'
		      OTHERWISE     
		           m.msg = 'UNKNOWN DISK FAILURE' + STR(ferror(),3)
		   ENDCASE                            
		   WAIT WIND 'FILE WRITE ERROR: ' + m.msg
		ENDIF  
		
		RETURN 
		
	ENDPROC

	PROCEDURE Init
		IF DODEFAULT()
		   *
		   *  Initialize the form criteria
		   *
		   swselect('tax1099st')
		   SET ORDER TO cyear
		   GO BOTT
		   THISFORM.txtcyear.VALUE = cyear
		
		
		   THISFORM.txtcTCC.VALUE = ' '
		   THISFORM.chkCorrect.VALUE = .F.
		
		   IF m.goapp.lCloudServer
		      THISFORM.cntgetfile1.edtpath.VALUE = specialfolders('Personal')
		   ELSE
		      THISFORM.cntgetfile1.edtpath.VALUE = specialfolders('CommonDocuments')
		   ENDIF
		
		   IF NOT m.goapp.oSecurity.HasPrivilege('Tax Ids')
		      MESSAGEBOX('You must have Tax IDs privilege to create the magnetic media 1099 file',16,'Need Tax IDs Privilege')
		      RETURN .F.
		   ENDIF
		
		ENDIF
		
	ENDPROC

	PROCEDURE lookup
	ENDPROC

	PROCEDURE numfmt		&& Format Numbers
		*
		*  numfmt - format a number to specified length removing extra chars
		*
		LPARA m.num, m.dlen
		
		LOCAL LEN, len1
		
		IF VARTYPE(m.dlen) <> 'N'
		   m.dlen = 0
		ENDIF
		
		m.len = LEN(m.num)
		
		FOR zx = 1 TO m.len
		   IF zx > m.len
		      EXIT
		   ENDIF
		   IF !ISDIGIT(SUBSTR(m.num, zx, 1))
		      IF zx > 1
		         m.num = SUBSTR(m.num, 1, zx - 1) + SUBSTR(m.num, zx + 1, m.len - zx + 1)
		         m.len = m.len - 1
		      ELSE
		         m.num = SUBSTR(m.num, zx + 1, m.len - zx + 1)
		         m.len = m.len - 1
		      ENDIF
		   ENDIF
		ENDFOR
		
		m.len1 = LEN(ALLTRIM(m.num))
		
		IF m.len1 = m.dlen
		   RETURN (ALLTRIM(m.num))
		ENDIF
		
		IF m.len1 > m.dlen
		   RETURN (SUBSTR(m.num, 1, m.dlen))
		ENDIF
		
		m.num = ALLTRIM(m.num)
		
		m.num = PADL(m.num, m.dlen, '0')
		
		RETURN (m.num)
		
	ENDPROC

	PROCEDURE parsename
	ENDPROC

	PROCEDURE cbostate.Init
		
		dodefault()
		
		sele c1099state from tax1099st into array lastate order by c1099state group by c1099state
		
		if _tally > 0
		 
		   for lnx = 1 to _tally
		   
		       this.addlistitem(laState[lnx],lnx)
		   endfor
		   this.listitemid = 1
		endif       
	ENDPROC

	PROCEDURE cbostate.Valid
		IF DODEFAULT()
		   IF this.Value = 'PA'
		      thisform.lbltCC.Visible = .f.
		      thisform.txtctCC.Visible = .f.
		      thisform.lblpayerAcct.Visible = .t.
		      thisform.txtpAYERACCT.Visible = .t.
		   ELSE
		      thisform.lbltCC.Visible = .t.
		      thisform.txtctCC.Visible = .t.
		      thisform.lblpayerAcct.Visible = .f.
		      thisform.txtpAYERACCT.Visible = .f.
		   ENDIF
		ENDIF    
		   
	ENDPROC

	PROCEDURE chkSelected.Click
		LOCAL lnCount
		
		IF this.value
		   do form commonsource\ten99selected NAME oTen99Sel LINKED WITH thisform.txtcyear.value, .T., thisform.cbostate.Value 
		   RELEASE oTen99Sel
		   SELECT ten99sel
		   lnCount = RECCOUNT()
		   thisform.lblselected.Caption = TRANSFORM(lnCount) + ' Owners Selected'
		ELSE
		   thisform.lblselected.Caption = ''   
		ENDIF   
	ENDPROC

	PROCEDURE cmdCreate.Click
		thisform.createfile()
	ENDPROC

	PROCEDURE cmdExit.Click
		thisform.release()
	ENDPROC

	PROCEDURE Cntgetfile1.cmdPath.Click
		LOCAL llReturn, loError
		llReturn = .T.
		#INCLUDE vfp2c.h
		
		TRY
		    IF NOT DIRECTORY(THISFORM.cntgetfile1.edtpath.VALUE)
		        THISFORM.cntgetfile1.edtpath.VALUE = ''
		    ENDIF
		
		    LOCAL cPath
		    IF THIS.PARENT.lPathOnly
		
		        IF NOT FILE(m.goapp.cCommonFolder+'bin\vfp2c32.fll')
		            llReturn = GetVFPc32()
		        ENDIF
		
		        IF llReturn
		            SET LIBRARY TO (m.goapp.cCommonFolder + 'bin\vfp2c32.fll') ADDITIVE
		            INITVFP2C32(VFP2C_INIT_ALL)
		
		            LOCAL lcFolder
		
		            SHBROWSEFOLDER('Choose a Folder', BIF_NEWDIALOGSTYLE, @cPath)
		        ELSE
		            m.cPath = GETDIR(CURDIR(), 'Choose the location for saving the electronic file', 'Choose File Location', 64)
		        ENDIF
		    ELSE
		        m.cPath = GETFILE(THIS.PARENT.cExtensionList)
		    ENDIF
		    IF NOT EMPTY(m.cPath)
		        THIS.PARENT.SetValue(m.cPath)
		    ENDIF
		
		    THISFORM.cntgetfile1.edtpath.VALUE = ADDBS(ALLTRIM(THISFORM.cntgetfile1.edtpath.VALUE))
		
		CATCH TO loError
		    llReturn = .F.
		    DO errorlog WITH 'cmdPath.click', loError.LINENO, 'Ten99MagST', loError.ERRORNO, loError.MESSAGE
		    MESSAGEBOX('Unable to choose the file location at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		          'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		RETURN llReturn
		
		
		
		
		
		
	ENDPROC

ENDDEFINE
