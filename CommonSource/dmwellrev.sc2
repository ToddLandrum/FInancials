*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="dmwellrev.scx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="2" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Cursor1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor6" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor8" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor11" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor12" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor14" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor15" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor16" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor18" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor9" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor7" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor10" UniqueID="" Timestamp="" />

	AutoOpenTables = .F.
	DataSource = .NULL.
	Height = 638
	InitialSelectedAlias = "wells"
	Left = 1
	Name = "Dataenvironment"
	Top = 37
	Width = 1073

	ADD OBJECT 'Cursor1' AS cursor WITH ;
		Alias = "income", ;
		BufferModeOverride = 5, ;
		CursorSource = "income", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 88, ;
		Left = 273, ;
		Name = "Cursor1", ;
		Top = 148, ;
		Width = 98
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor10' AS cursor WITH ;
		Alias = "glmaster", ;
		BufferModeOverride = 5, ;
		CursorSource = "glmaster", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 645, ;
		Name = "Cursor10", ;
		Top = 308, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor11' AS cursor WITH ;
		Alias = "glopt", ;
		CursorSource = "glopt", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 431, ;
		Name = "Cursor11", ;
		Top = 144, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor12' AS cursor WITH ;
		Alias = "sysctl", ;
		CursorSource = "sysctl", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 570, ;
		Name = "Cursor12", ;
		Top = 145, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor14' AS cursor WITH ;
		Alias = "options", ;
		CursorSource = "options", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 850, ;
		Name = "Cursor14", ;
		Top = 140, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor15' AS cursor WITH ;
		Alias = "wellinv", ;
		CursorSource = "wellinv", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 287, ;
		Left = 280, ;
		Name = "Cursor15", ;
		Top = 22, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor16' AS cursor WITH ;
		Alias = "incsusp", ;
		BufferModeOverride = 5, ;
		CursorSource = "incsusp", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 556, ;
		Name = "Cursor16", ;
		Top = 26, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor18' AS cursor WITH ;
		Alias = "incsusp1", ;
		CursorSource = "incsusp", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 851, ;
		Name = "Cursor18", ;
		Top = 21, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor2' AS cursor WITH ;
		Alias = "revsrc", ;
		CursorSource = "revsrc", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 143, ;
		Name = "Cursor2", ;
		Order = "crevkey", ;
		Top = 24, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor3' AS cursor WITH ;
		Alias = "income1", ;
		CursorSource = "income", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 2, ;
		Name = "Cursor3", ;
		Top = 177, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor4' AS cursor WITH ;
		Alias = "investor", ;
		CursorSource = "investor", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 126, ;
		Name = "Cursor4", ;
		Top = 149, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor5' AS cursor WITH ;
		Alias = "coa", ;
		CursorSource = "coa", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 1005, ;
		Name = "Cursor5", ;
		Top = 20, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor6' AS cursor WITH ;
		Alias = "wells", ;
		CursorSource = "wells", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Filter = "inlist(cwellstat,'A','T','D','N')", ;
		Height = 75, ;
		Left = 707, ;
		Name = "Cursor6", ;
		Order = "cwellid", ;
		Top = 14, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor7' AS cursor WITH ;
		Alias = "coabal", ;
		BufferModeOverride = 5, ;
		CursorSource = "coabal", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 435, ;
		Name = "Cursor7", ;
		Top = 322, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor8' AS cursor WITH ;
		Alias = "checks", ;
		BufferModeOverride = 5, ;
		CursorSource = "checks", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 140, ;
		Name = "Cursor8", ;
		Top = 273, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor9' AS cursor WITH ;
		Alias = "wellrev", ;
		BufferModeOverride = 5, ;
		CursorSource = "wellrev", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 330, ;
		Left = 14, ;
		Name = "Cursor9", ;
		NoDataOnLoad = .T., ;
		Top = 24, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

ENDDEFINE

DEFINE CLASS formdmwellrev AS frmdatamanagerformcustom OF "..\custom\cforms.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="txtrevkey" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Shpshapecustom1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdAllocate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column1.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column1.txtcSource" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column2.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column2.txtcRevName" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column3.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column3.txtdRevDate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column4.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column4.txtnUnits" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column5.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column5.txtnPrice" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column6.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column6.txtnTotalInc" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column7.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column7.txtcYear" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column8.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column8.txtcPeriod" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column9.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column9.txtDeck" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcWellName" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblWellid2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtRefid" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblRefid" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblSource" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblDate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtnUnits" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblUnits" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtnPrice" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblAmount" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcPurchaser" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtnDaysOn" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtnTotalInc" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcWellID" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblIncnote" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblClosed" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblGroup" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtCbegrange" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtCendrange" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtTotalInc" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdLookWell" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdRevsrc" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdDelDetail" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblRunNo" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbltextcustom4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Swyear" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Glmaint" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbltextcustom6" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Swperiod" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdEditDetail" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbltextcustom7" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbltextcustom17" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboSource" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcOwnerID" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Runcombo1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcNotes" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtdRevDate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtGroup" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboAcct" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblAccount" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom7" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboDeck" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: adddetail		&& Add the detail information to the income table
		*m: calcdayson		&& Calculates the days on.
		*m: calctot		&& Calculates the total  income for the period.
		*m: calctotalinc		&& Calculates the total income based on the units and price entered.
		*m: checkclose		&& Checks to see if the period has been closed.
		*m: checkcloserun
		*m: checkruns		&& Checks for last closed run for given well.
		*m: debug
		*m: editdetail		&& Brings the current record in the grid up to the detail section in the form.
		*m: getrange		&& Gets the period range for gas and oil
		*m: getrevenue		&& Refreshes the form with revenue entries for the given criteria.
		*m: setaccount
		*p: cwellsave		&& When saves the value of txtcwellid on entry.
		*p: lclosed
		*p: lcloserun
		*p: lcperiod
		*p: lcyear
		*p: ldeldetail
		*p: leditdetail		&& Edit Detail Flag
		*p: nrunitemid		&& The itemid of runcombo1 on entry.
	*</DefinedPropArrayMethod>

	Caption = "Well Revenue by Well (8/8ths)"
	cnavworkarea = wells
	cworkarea = wellrev
	DoCreate = .T.
	Height = 596
	HelpContextID = 96
	lnonewask = .T.
	lrememberposition = .T.
	lrememberrecord = .T.
	Name = "FormDmwellrev"
	nrunitemid = 1		&& The itemid of runcombo1 on entry.
	ShowTips = .T.
	Visible = .T.
	Width = 709
	WindowState = 0
	cmdatamanager.Name = "cmdatamanager"
	cmdatamanager.TabIndex = 1
	cmdatamanager.ZOrderSet = 0
	cmlookupmanager.Name = "cmlookupmanager"
	Mwresize1.LBLHIGHLIGHT.Name = "LBLHIGHLIGHT"
	Mwresize1.LBLSHADING.Name = "LBLSHADING"
	Mwresize1.Name = "Mwresize1"
	Mwresize1.TabIndex = 2

	ADD OBJECT 'cboAcct' AS cbocomboboxcustom WITH ;
		BoundColumn = 2, ;
		BoundTo = .T., ;
		ColumnCount = 1, ;
		ControlSource = "", ;
		Height = 20, ;
		Left = 409, ;
		Name = "cboAcct", ;
		TabIndex = 7, ;
		Top = 42, ;
		Width = 275
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="combobox" />

	ADD OBJECT 'cboDeck' AS cbocomboboxcustom WITH ;
		BoundColumn = 2, ;
		ControlSource = "", ;
		Height = 20, ;
		Left = 174, ;
		Name = "cboDeck", ;
		Style = 0, ;
		TabIndex = 24, ;
		Top = 118, ;
		ZOrderSet = 64
		*< END OBJECT: ClassLib="..\..\..\codeminenew\ampro_rv\custom\ccontrol.vcx" BaseClass="combobox" />

	ADD OBJECT 'cboSource' AS cbocomboboxcustom WITH ;
		cdisplayname = Type, ;
		ControlSource = "", ;
		Height = 20, ;
		Left = 5, ;
		lrequired = .T., ;
		Name = "cboSource", ;
		SelectOnEntry = .T., ;
		TabIndex = 16, ;
		Top = 93, ;
		Width = 61, ;
		ZOrderSet = 41
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="combobox" />

	ADD OBJECT 'cmdAllocate' AS cmdcommandbuttoncustom WITH ;
		Caption = "Allocate All To", ;
		Height = 20, ;
		Left = 513, ;
		Name = "cmdAllocate", ;
		TabIndex = 35, ;
		TabStop = .F., ;
		Top = 142, ;
		ZOrderSet = 3
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdDelDetail' AS cmdcommandbuttoncustom WITH ;
		Caption = "Delete Detail Line", ;
		Height = 21, ;
		Left = 113, ;
		Name = "cmdDelDetail", ;
		TabIndex = 42, ;
		Top = 561, ;
		Width = 97, ;
		ZOrderSet = 29
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdEditDetail' AS cmdcommandbuttoncustom WITH ;
		Caption = "Edit Detail Line", ;
		Height = 21, ;
		Left = 217, ;
		Name = "cmdEditDetail", ;
		TabIndex = 43, ;
		Top = 561, ;
		Width = 97, ;
		ZOrderSet = 36
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdLookWell' AS cmdcommandbuttoncustom WITH ;
		Anchor = 3, ;
		Caption = " Well ID", ;
		Height = 20, ;
		Left = 18, ;
		Name = "cmdLookWell", ;
		TabIndex = 3, ;
		TabStop = .F., ;
		Top = 13, ;
		Width = 48, ;
		ZOrderSet = 27
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdRevsrc' AS cmdcommandbuttoncustom WITH ;
		Caption = "Received From", ;
		Height = 19, ;
		Left = 68, ;
		Name = "cmdRevsrc", ;
		TabIndex = 41, ;
		Top = 71, ;
		Width = 85, ;
		ZOrderSet = 28
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'Glmaint' AS glmaint WITH ;
		Height = 17, ;
		Left = 341, ;
		Name = "Glmaint", ;
		Top = 565, ;
		Width = 12
		*< END OBJECT: ClassLib="..\custom\swgl.vcx" BaseClass="custom" />

	ADD OBJECT 'Grdgridcustom1' AS grdgridcustom WITH ;
		BackColor = 255,255,255, ;
		ColumnCount = 9, ;
		cworkarea = wellrev, ;
		Height = 368, ;
		lallownew = .F., ;
		lcolumnmemory = .F., ;
		Left = 0, ;
		LinkMaster = "", ;
		Name = "Grdgridcustom1", ;
		Panel = 1, ;
		RecordSource = "wellrev", ;
		RelationalExpr = "", ;
		TabIndex = 38, ;
		ToolTipText = "Test", ;
		Top = 172, ;
		Width = 696, ;
		ZOrderSet = 5, ;
		Column1.BackColor = 255,255,255, ;
		Column1.ColumnOrder = 1, ;
		Column1.ControlSource = "wellrev.csource", ;
		Column1.FontName = "Courier New", ;
		Column1.FontSize = 8, ;
		Column1.Name = "Column1", ;
		Column1.Width = 38, ;
		Column2.BackColor = 255,255,255, ;
		Column2.ColumnOrder = 5, ;
		Column2.ControlSource = "wellrev.crevname", ;
		Column2.FontName = "Courier New", ;
		Column2.FontSize = 8, ;
		Column2.Name = "Column2", ;
		Column2.Width = 134, ;
		Column3.BackColor = 255,255,255, ;
		Column3.ColumnOrder = 6, ;
		Column3.ControlSource = "wellrev.drevdate", ;
		Column3.FontName = "Courier New", ;
		Column3.FontSize = 8, ;
		Column3.Name = "Column3", ;
		Column3.Width = 73, ;
		Column4.BackColor = 255,255,255, ;
		Column4.ColumnOrder = 7, ;
		Column4.ControlSource = "wellrev.nunits", ;
		Column4.FontName = "Courier New", ;
		Column4.FontSize = 8, ;
		Column4.Name = "Column4", ;
		Column4.Width = 88, ;
		Column5.BackColor = 255,255,255, ;
		Column5.ColumnOrder = 8, ;
		Column5.ControlSource = "wellrev.nprice", ;
		Column5.FontName = "Courier New", ;
		Column5.FontSize = 8, ;
		Column5.Name = "Column5", ;
		Column5.Width = 83, ;
		Column6.BackColor = 255,255,255, ;
		Column6.ColumnOrder = 9, ;
		Column6.ControlSource = "wellrev.ntotalinc", ;
		Column6.FontName = "Courier New", ;
		Column6.FontSize = 8, ;
		Column6.Name = "Column6", ;
		Column6.Width = 92, ;
		Column7.BackColor = 255,255,255, ;
		Column7.ColumnOrder = 4, ;
		Column7.ControlSource = "wellrev.cyear", ;
		Column7.FontSize = 8, ;
		Column7.Name = "Column7", ;
		Column7.Width = 44, ;
		Column8.BackColor = 255,255,255, ;
		Column8.ColumnOrder = 3, ;
		Column8.ControlSource = "wellrev.cperiod", ;
		Column8.FontSize = 8, ;
		Column8.Name = "Column8", ;
		Column8.Width = 27, ;
		Column9.BackColor = 255,255,255, ;
		Column9.ColumnOrder = 2, ;
		Column9.ControlSource = "wellrev.cdeck", ;
		Column9.FontSize = 8, ;
		Column9.Name = "Column9"
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="grid" />

	ADD OBJECT 'Grdgridcustom1.Column1.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "Type", ;
		FontSize = 8, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'Grdgridcustom1.Column1.txtcSource' AS txtquickfill WITH ;
		clistexpression = crevtype, ;
		clistworkarea = revcat, ;
		Left = 13, ;
		Name = "txtcSource", ;
		Top = 31
		*< END OBJECT: ClassLib="..\custom\cgadget.vcx" BaseClass="textbox" />

	ADD OBJECT 'Grdgridcustom1.Column2.Header1' AS header WITH ;
		Caption = "Purchaser", ;
		FontSize = 8, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'Grdgridcustom1.Column2.txtcRevName' AS textbox WITH ;
		BackColor = 255,255,255, ;
		BorderStyle = 0, ;
		ControlSource = "wellrev.crevname", ;
		FontName = "Courier New", ;
		FontSize = 8, ;
		ForeColor = 0,0,0, ;
		Margin = 0, ;
		Name = "txtcRevName"
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'Grdgridcustom1.Column3.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "Date", ;
		FontSize = 8, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'Grdgridcustom1.Column3.txtdRevDate' AS txttextboxcustom WITH ;
		BackColor = 255,255,255, ;
		ControlSource = "wellrev.drevdate", ;
		FontName = "Courier New", ;
		FontSize = 8, ;
		Left = 50, ;
		Name = "txtdRevDate", ;
		Top = 31
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'Grdgridcustom1.Column4.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "Units", ;
		FontSize = 8, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'Grdgridcustom1.Column4.txtnUnits' AS txttextboxcustom WITH ;
		BackColor = 255,255,255, ;
		ControlSource = "wellrev.nunits", ;
		FontName = "Courier New", ;
		FontSize = 8, ;
		Left = 63, ;
		Name = "txtnUnits", ;
		Top = 31
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'Grdgridcustom1.Column5.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "Price", ;
		FontSize = 8, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'Grdgridcustom1.Column5.txtnPrice' AS txttextboxcustom WITH ;
		BackColor = 255,255,255, ;
		ControlSource = "wellrev.nprice", ;
		FontName = "Courier New", ;
		FontSize = 8, ;
		Left = 66, ;
		Name = "txtnPrice", ;
		Top = 31
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'Grdgridcustom1.Column6.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "Total", ;
		FontName = "Arial", ;
		FontSize = 8, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'Grdgridcustom1.Column6.txtnTotalInc' AS txttextboxcustom WITH ;
		BackColor = 255,255,255, ;
		ControlSource = "wellrev.ntotalinc", ;
		FontName = "Courier New", ;
		FontSize = 8, ;
		Left = 54, ;
		Name = "txtnTotalInc", ;
		Top = 31
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'Grdgridcustom1.Column7.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "Year", ;
		FontSize = 8, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'Grdgridcustom1.Column7.txtcYear' AS txttextboxcustom WITH ;
		BackColor = 255,255,255, ;
		ControlSource = "wellrev.cYear", ;
		FontSize = 8, ;
		Left = 30, ;
		Name = "txtcYear", ;
		Top = 31
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'Grdgridcustom1.Column8.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "Prd", ;
		FontSize = 8, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'Grdgridcustom1.Column8.txtcPeriod' AS txttextboxcustom WITH ;
		BackColor = 255,255,255, ;
		ControlSource = "wellrev.cperiod", ;
		FontSize = 8, ;
		Left = 10, ;
		Name = "txtcPeriod", ;
		Top = 19
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'Grdgridcustom1.Column9.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "Deck", ;
		FontSize = 8, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'Grdgridcustom1.Column9.txtDeck' AS textbox WITH ;
		BackColor = 255,255,255, ;
		BorderStyle = 0, ;
		ControlSource = "wellrev.cdeck", ;
		FontSize = 8, ;
		ForeColor = 0,0,0, ;
		Margin = 0, ;
		Name = "txtDeck"
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'lblAccount' AS lbllabelcustom WITH ;
		Caption = "Account:", ;
		Left = 351, ;
		Name = "lblAccount", ;
		TabIndex = 49, ;
		Top = 44
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblAmount' AS lblfieldlabelcustom WITH ;
		BackStyle = 0, ;
		Caption = "Total", ;
		FontBold = .T., ;
		FontSize = 8, ;
		Height = 16, ;
		Left = 643, ;
		Name = "lblAmount", ;
		TabIndex = 15, ;
		Top = 77, ;
		Width = 29, ;
		ZOrderSet = 16
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblClosed' AS lbllabelcustom WITH ;
		Caption = "RUN CLOSED", ;
		FontSize = 20, ;
		ForeColor = 255,0,0, ;
		Left = 218, ;
		Name = "lblClosed", ;
		TabIndex = 10, ;
		Top = 240, ;
		Visible = .F., ;
		ZOrderSet = 22
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblDate' AS lblfieldlabelcustom WITH ;
		BackStyle = 0, ;
		Caption = "Acct Date", ;
		FontBold = .T., ;
		FontSize = 8, ;
		Height = 16, ;
		Left = 287, ;
		Name = "lblDate", ;
		TabIndex = 12, ;
		Top = 77, ;
		Width = 53, ;
		ZOrderSet = 12
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblGroup' AS lbllabelcustom WITH ;
		Caption = " ", ;
		Left = 492, ;
		Name = "lblGroup", ;
		TabIndex = 8, ;
		Top = 15, ;
		ZOrderSet = 23
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblIncnote' AS lblfieldlabelcustom WITH ;
		Caption = "Notes:", ;
		FontSize = 8, ;
		Height = 16, ;
		Left = 9, ;
		Name = "lblIncnote", ;
		TabIndex = 37, ;
		Top = 144, ;
		Width = 33, ;
		ZOrderSet = 21
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom1' AS lbllabelcustom WITH ;
		BackStyle = 0, ;
		Caption = "Price", ;
		Comment = "P", ;
		FontBold = .T., ;
		Left = 497, ;
		Name = "Lbllabelcustom1", ;
		TabIndex = 14, ;
		Top = 77, ;
		ZOrderSet = 42
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom2' AS lbllabelcustom WITH ;
		Caption = "/", ;
		Left = 86, ;
		Name = "Lbllabelcustom2", ;
		TabIndex = 46, ;
		Top = 120, ;
		ZOrderSet = 38
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom3' AS lbllabelcustom WITH ;
		Caption = "Prod Prd", ;
		Left = 12, ;
		Name = "Lbllabelcustom3", ;
		TabIndex = 47, ;
		Top = 120, ;
		ZOrderSet = 40
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom4' AS lbllabelcustom WITH ;
		Caption = "Group", ;
		Left = 624, ;
		Name = "Lbllabelcustom4", ;
		TabIndex = 48, ;
		Top = 14
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom7' AS lbllabelcustom WITH ;
		Caption = "Deck:", ;
		Left = 138, ;
		Name = "Lbllabelcustom7", ;
		TabIndex = 28, ;
		Top = 120, ;
		ZOrderSet = 63
		*< END OBJECT: ClassLib="..\..\..\codeminenew\ampro_rv\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblRefid' AS lblfieldlabelcustom WITH ;
		Caption = "Ref ID:", ;
		FontSize = 8, ;
		Height = 16, ;
		Left = 540, ;
		Name = "lblRefid", ;
		TabIndex = 33, ;
		Top = 120, ;
		Width = 34, ;
		ZOrderSet = 9
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblRunNo' AS lbllabelcustom WITH ;
		Caption = "Run No", ;
		Left = 21, ;
		Name = "lblRunNo", ;
		TabIndex = 45, ;
		Top = 44, ;
		ZOrderSet = 30
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblSource' AS lblfieldlabelcustom WITH ;
		BackStyle = 0, ;
		Caption = "Type", ;
		FontBold = .T., ;
		FontSize = 8, ;
		Height = 16, ;
		Left = 21, ;
		Name = "lblSource", ;
		TabIndex = 11, ;
		Top = 77, ;
		Width = 29, ;
		ZOrderSet = 10
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbltextcustom17' AS lbltextcustom WITH ;
		Caption = "Total Income This Period:", ;
		Left = 456, ;
		Name = "Lbltextcustom17", ;
		TabIndex = 40, ;
		Top = 564, ;
		ZOrderSet = 39
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbltextcustom4' AS lbltextcustom WITH ;
		Caption = "-", ;
		FontBold = .T., ;
		FontSize = 8, ;
		Height = 16, ;
		Left = 382, ;
		Name = "Lbltextcustom4", ;
		TabIndex = 31, ;
		Top = 120, ;
		Width = 6, ;
		ZOrderSet = 31
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbltextcustom6' AS lbltextcustom WITH ;
		Caption = "Days On:", ;
		FontSize = 8, ;
		Height = 16, ;
		Left = 445, ;
		Name = "Lbltextcustom6", ;
		TabIndex = 32, ;
		Top = 120, ;
		Width = 47, ;
		ZOrderSet = 34
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbltextcustom7' AS lbltextcustom WITH ;
		Caption = "Prd Range", ;
		Left = 281, ;
		Name = "Lbltextcustom7", ;
		TabIndex = 30, ;
		Top = 120, ;
		ZOrderSet = 37
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblUnits' AS lblfieldlabelcustom WITH ;
		BackStyle = 0, ;
		Caption = "# Units", ;
		FontBold = .T., ;
		FontSize = 8, ;
		Height = 16, ;
		Left = 399, ;
		Name = "lblUnits", ;
		TabIndex = 13, ;
		Top = 77, ;
		Width = 39, ;
		ZOrderSet = 14
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblWellid2' AS lblfieldlabelcustom WITH ;
		Anchor = 768, ;
		Caption = "Well Name:", ;
		FontSize = 8, ;
		Height = 16, ;
		Left = 160, ;
		Name = "lblWellid2", ;
		TabIndex = 9, ;
		Top = 15, ;
		Width = 55, ;
		ZOrderSet = 7
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Runcombo1' AS runcombo WITH ;
		ColumnWidths = "230,0,0", ;
		cshowwhat = R, ;
		Height = 20, ;
		Left = 70, ;
		Name = "Runcombo1", ;
		TabIndex = 6, ;
		Top = 42, ;
		Width = 261, ;
		ZOrderSet = 44
		*< END OBJECT: ClassLib="..\custom\swcontrol.vcx" BaseClass="combobox" />

	ADD OBJECT 'Shpshapecustom1' AS shpshapecustom WITH ;
		BackColor = 255,255,128, ;
		Height = 101, ;
		Left = 2, ;
		Name = "Shpshapecustom1", ;
		Top = 67, ;
		Width = 694, ;
		ZOrderSet = 2
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="shape" />

	ADD OBJECT 'Swperiod' AS swperiod WITH ;
		Left = 59, ;
		Name = "Swperiod", ;
		TabIndex = 22, ;
		Top = 118, ;
		ZOrderSet = 35
		*< END OBJECT: ClassLib="..\custom\swcontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'Swyear' AS swyear WITH ;
		Left = 95, ;
		Name = "Swyear", ;
		TabIndex = 23, ;
		Top = 118, ;
		ZOrderSet = 32
		*< END OBJECT: ClassLib="..\custom\swcontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtCbegrange' AS txttextboxcustom WITH ;
		ControlSource = "", ;
		FontSize = 8, ;
		Height = 20, ;
		InputMask = "99/99", ;
		Left = 336, ;
		MaxLength = 5, ;
		Name = "txtCbegrange", ;
		SelectOnEntry = .T., ;
		TabIndex = 25, ;
		Top = 118, ;
		Width = 42, ;
		ZOrderSet = 24
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtCendrange' AS txttextboxcustom WITH ;
		ControlSource = "", ;
		FontSize = 8, ;
		Height = 20, ;
		InputMask = "99/99", ;
		Left = 390, ;
		MaxLength = 5, ;
		Name = "txtCendrange", ;
		SelectOnEntry = .T., ;
		TabIndex = 26, ;
		Top = 118, ;
		Width = 44, ;
		ZOrderSet = 25
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcNotes' AS txttextboxcustom WITH ;
		Height = 20, ;
		Left = 52, ;
		Name = "txtcNotes", ;
		TabIndex = 34, ;
		Top = 142, ;
		Width = 323, ;
		ZOrderSet = 45
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcOwnerID' AS txtquickfill WITH ;
		clistexpression = investor.cownerid, ;
		clistworkarea = investor, ;
		ControlSource = "", ;
		Format = "!", ;
		Height = 20, ;
		InputMask = "", ;
		Left = 597, ;
		MaxLength = 10, ;
		Name = "txtcOwnerID", ;
		SelectOnEntry = .T., ;
		TabIndex = 36, ;
		Top = 142, ;
		Width = 76, ;
		ZOrderSet = 43
		*< END OBJECT: ClassLib="..\custom\cgadget.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcPurchaser' AS txtquickfill WITH ;
		clistexpression = crevname, ;
		clistworkarea = revsrc, ;
		Height = 20, ;
		lallowexceptions = .F., ;
		Left = 68, ;
		MaxLength = 30, ;
		Name = "txtcPurchaser", ;
		TabIndex = 17, ;
		Top = 93, ;
		Width = 196, ;
		ZOrderSet = 17
		*< END OBJECT: ClassLib="..\custom\cgadget.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcWellID' AS txtquickfill WITH ;
		Anchor = 768, ;
		clistexpression = cWellID, ;
		clistworkarea = wells, ;
		ControlSource = "wells.cwellid", ;
		Format = "!", ;
		Height = 20, ;
		Left = 70, ;
		lrequired = .T., ;
		MaxLength = 10, ;
		Name = "txtcWellID", ;
		TabIndex = 4, ;
		Top = 13, ;
		Width = 84, ;
		ZOrderSet = 20
		*< END OBJECT: ClassLib="..\custom\cgadget.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcWellName' AS txttextboxcustom WITH ;
		BackColor = 212,208,200, ;
		Comment = "", ;
		ControlSource = "", ;
		FontSize = 8, ;
		Height = 20, ;
		Left = 222, ;
		MaxLength = 0, ;
		Name = "txtcWellName", ;
		TabIndex = 5, ;
		Top = 13, ;
		Width = 390, ;
		ZOrderSet = 6
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtdRevDate' AS dpk WITH ;
		ControlSource = "", ;
		Height = 20, ;
		Left = 280, ;
		Name = "txtdRevDate", ;
		TabIndex = 18, ;
		Top = 93, ;
		Visible = .T., ;
		Width = 69
		*< END OBJECT: ClassLib="..\custom\swdate.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtGroup' AS txttextboxcustom WITH ;
		BackColor = 212,208,200, ;
		Height = 20, ;
		Left = 660, ;
		Name = "txtGroup", ;
		TabIndex = 50, ;
		Top = 12, ;
		Width = 24
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtnDaysOn' AS txttextboxcustom WITH ;
		FontSize = 8, ;
		Height = 20, ;
		InputMask = "999", ;
		Left = 492, ;
		Name = "txtnDaysOn", ;
		SelectOnEntry = .T., ;
		TabIndex = 27, ;
		Top = 118, ;
		Width = 41, ;
		ZOrderSet = 18
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtnPrice' AS txttextboxcustom WITH ;
		ControlSource = "", ;
		FontSize = 8, ;
		Height = 20, ;
		InputMask = "999.999999", ;
		Left = 485, ;
		Name = "txtnPrice", ;
		SelectOnEntry = .T., ;
		TabIndex = 20, ;
		Top = 93, ;
		Width = 80, ;
		ZOrderSet = 15
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtnTotalInc' AS txttextboxcustom WITH ;
		ControlSource = "", ;
		FontSize = 8, ;
		Height = 20, ;
		InputMask = "999999999.99", ;
		Left = 583, ;
		Name = "txtnTotalInc", ;
		SelectOnEntry = .T., ;
		TabIndex = 21, ;
		Top = 93, ;
		Width = 102, ;
		ZOrderSet = 19
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtnUnits' AS txttextboxcustom WITH ;
		ControlSource = "", ;
		FontSize = 8, ;
		Height = 20, ;
		InputMask = "9999999999.99", ;
		Left = 363, ;
		Name = "txtnUnits", ;
		SelectOnEntry = .T., ;
		TabIndex = 19, ;
		Top = 93, ;
		Width = 108, ;
		ZOrderSet = 13
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtRefid' AS txttextboxcustom WITH ;
		ControlSource = "", ;
		FontSize = 8, ;
		Height = 20, ;
		Left = 578, ;
		MaxLength = 10, ;
		Name = "txtRefid", ;
		SelectOnEntry = .T., ;
		TabIndex = 29, ;
		Top = 118, ;
		Width = 107, ;
		ZOrderSet = 8
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtrevkey' AS txttextboxcustom WITH ;
		Left = 408, ;
		Name = "txtrevkey", ;
		TabIndex = 44, ;
		Top = 142, ;
		Visible = .F., ;
		ZOrderSet = 1
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtTotalInc' AS txttextboxcustom WITH ;
		Height = 20, ;
		Left = 578, ;
		Name = "txtTotalInc", ;
		TabIndex = 39, ;
		Top = 560, ;
		Width = 106, ;
		ZOrderSet = 26
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />
	
	PROCEDURE adddetail		&& Add the detail information to the income table
		LOCAL m.cWellID, m.cYear, m.cPeriod, m.cSource, m.cRevKey, m.nUnits
		LOCAL m.nPrice, m.nTotalInc, m.cBegRange, m.cEndRange, m.cNotes
		LOCAL m.cOwnerID, m.nDaysOn
		LOCAL lCSTran, lClosed, lOneMan, llGoodDate, llNoGo, llReturn, loError
		LOCAL cBegRange, cEndRange, cMemo, cOwnerID, cPeriod, cRefID, cRevKey, cRevName, cSource, cWellID
		LOCAL cYear, cacctno, cidinch, dRevDate, mIncNote, nDaysOn, nPrice, nTotalInc, nUnits
		
		llReturn = .T.
		
		TRY
		*
		*  Check to see if period is closed
		*
		    IF THISFORM.lClosed
		        WAIT WIND NOWAIT 'This period and group is closed. No updates allowed.'
		        llReturn = .F.
		        EXIT
		    ENDIF
		
		*  Don't allow zero-amount lines to be added
		    IF THISFORM.txtntotalInc.VALUE = 0
		        THISFORM.oMessage.Warning('Zero-amount detail lines cannot be added.')
		        THISFORM.setnextcontrol(THISFORM.txtntotalInc)
		        llReturn = .F.
		        EXIT
		    ENDIF
		
		    swselect('wells', .T.)
		    SET ORDER TO cWellID
		    IF SEEK(THISFORM.txtcwellID.VALUE)
		        IF INLIST(wells.cwellstat, 'I', 'S', 'P')
		            THISFORM.oMessage.Warning('This well is not active. No revenue can be allocated to it.')
		            llReturn = .F.
		            EXIT
		        ENDIF
		        IF wells.cwellstat = 'V'  &&  Warn them if trying to enter revenue for an investment well
		            THISFORM.oMessage.Warning('This well is marked as an investment well, so no entries should be made here. Make all revenue entries through the Tasks >> Production Receipts Screen.')
		            llReturn = .F.
		            EXIT
		        ENDIF
		    ELSE
		        MESSAGEBOX('Please specify a valid Well for this revenue entry.', 16, 'Invalid Well ID')
		        THISFORM.setnextcontrol(THISFORM.txtcwellID)
		        llReturn = .F.
		        EXIT
		    ENDIF
		
		* Check to make sure the date is a valid date
		    llGoodDate = THISFORM.glmaint.checkperiod(THISFORM.txtdrevdate.VALUE, .T.)
		    IF NOT llGoodDate
		        THISFORM.oMessage.Warning('The date entered cannot be used. The fiscal year/period for this date has been closed.')
		        llReturn = .F.
		        EXIT
		    ENDIF
		    
		    lcYear   = THISFORM.RunCombo1.LISTITEM[THISFORM.RunCombo1.LISTITEMID, 2]
		    lcGroup  = THISFORM.RunCombo1.LISTITEM[THISFORM.RunCombo1.LISTITEMID, 4]
		    lcWellID = wells.cwellid
		    lnRunNo  = INT(VAL(THISFORM.RunCombo1.LISTITEM[THISFORM.RunCombo1.LISTITEMID, 3]))
		
		*
		*  Call distproc to create the (invtmp) and (wellwork) cursors
		*
		    oDist = CREATEOBJECT('distproc', lcWellID, lcWellID, ;
		          '01', ;
		          '1980', ;
		          lcGroup, 'W', DATE(), .F., 0)
		
		
		    WITH THISFORM
		        .lChanged = .T.
		*  Store the detail in memory variables that are the same names
		*  as the table fields
		
		        swselect('income', .T.)
		        m.cidinch   = ''
		        m.cWellID   = wells.cWellID
		        m.cPeriod   = .swperiod.VALUE
		        m.cYear     = .swyear.VALUE
		        m.cSource   = .cboSource.VALUE
		        m.cRevKey   = revsrc.cRevKey
		        m.cRevName  = revsrc.cRevName
		        m.dRevDate  = .txtdrevdate.VALUE
		        m.nUnits    = .txtnUnits.VALUE
		        m.nPrice    = .txtnPrice.VALUE
		        m.nTotalInc = .txtntotalInc.VALUE
		        m.cBegRange = .txtcBegRange.VALUE
		        m.cEndRange = .txtcEndRange.VALUE
		        m.cMemo     = .txtcNotes.VALUE
		        m.cOwnerID  = .txtcOwnerID.VALUE
		        m.nDaysOn   = .txtnDaysOn.VALUE
		        m.mIncNote  = ''
		        m.cRefID    = .txtrefid.VALUE
		        m.cacctno   = .cboacct.VALUE
		        m.cDeck     = .cboDeck.value 
		        STORE .F. TO m.lOneMan, m.lCSTran, m.lClosed
		        
		        m.cType = m.cSource
		            lcType  = ''
		*  Net down the revenue for direct paid and "Dummy" owners
		            IF INLIST(m.cType, 'BBL', 'OTAX1', 'OTAX2', 'OTAX3', 'OTAX4')
		                lcType = 'O'
		            ENDIF
		            IF INLIST(m.cType, 'MCF', 'GTAX1', 'GTAX2', 'GTAX3', 'GTAX4')
		                lcType = 'G'
		            ENDIF
		            IF lcType = 'O' OR lcType = 'G'
		                m.nNetAMount  = swNetRevenue(m.cwellid, m.nTotalInc, lcType, .F., .T., .F., m.cOwnerID,,,m.cDeck)
		                m.nNetUnits   = swNetRevenue(m.cwellid, m.nUnits, lcType, .F., .T., .F., m.cOwnerID,,,m.cDeck)
		            ELSE
		                m.nNetAmount  = m.nTotalInc
		                m.nNetUnits   = m.nUnits
		            ENDIF
		            IF m.cType = 'TRANS'
		                lcType = 'T'
		                m.nNetAmount = swNetRevenue(m.cwellid, m.nTotalInc, lcType, .F., .T., .F., m.cOwnerID,,,m.cDeck)
		            ENDIF
		            IF m.cType = 'OTH'
		                lcType = 'P'
		                m.nNetAmount = swNetRevenue(m.cwellid, m.nTotalInc, lcType, .F., .T., .F., m.cOwnerID,,,m.cDeck)
		            ENDIF
		
		        IF 'TAX' $ m.cSource
		            m.nTotalInc = m.nTotalInc * -1
		            m.nNetAmount = m.nNetAmount * -1
		        ENDIF
		
		*
		*  Check to see if its a one man item.  If so check to see
		*  if the type of income is directly paid.  If so, don't let
		*  this allocation happen.
		*
		        swselect('wellinv')
		        LOCATE FOR cOwnerID = m.cOwnerID AND cWellID = m.cWellID
		        IF FOUND()
		            llNoGo = .F.
		            DO CASE
		                CASE m.cSource = 'BBL'
		                    IF wellinv.cdirect = 'O' OR wellinv.cdirect = 'B'
		                        llNoGo = .T.
		                    ENDIF
		                CASE m.cSource = 'MCF'
		                    IF wellinv.cdirect = 'G' OR wellinv.cdirect = 'B'
		                        llNoGo = .T.
		                    ENDIF
		            ENDCASE
		            IF llNoGo
		                THISFORM.oMessage.Warning('This type of income cannot be allocated all to this owner. The owner is directly paid this type of well revenue.')
		                THISFORM.setnextcontrol(THISFORM.txtcOwnerID)
		                llReturn = .F.
		                EXIT
		            ENDIF
		        ENDIF
		
		        swselect('revsrc')
		        LOCATE FOR TRIM(.txtcPurchaser.VALUE) $ cRevName
		        IF FOUND()
		            m.cRevKey = cRevKey
		        ELSE
		            THISFORM.oMessage.Warning('You must specify a purchaser for this revenue entry.')
		            THISFORM.setnextcontrol(THISFORM.txtcPurchaser)
		            llReturn = .F.
		            EXIT 
		        ENDIF
		
		        THISFORM.cmdatamanager.new('Wellrev')
		        swselect('wellrev')
		        GATHER MEMVAR
		
		        STORE '' TO .txtcNotes.VALUE, .txtcOwnerID.VALUE
		        .txtnUnits.setvalue(0)
		        .txtntotalInc.setvalue(0)
		
		        .calctot()
		        .setnextcontrol(THISFORM.cboSource)
		        THISFORM.cboSource.SETFOCUS()
		        m.goStateManager.RefreshAll('Form Edit')
		        THISFORM.REFRESH()
		    ENDWITH
		CATCH TO loError
		    llReturn = .F.
		    DO errorlog WITH 'AddDetail', loError.LINENO, 'DMWellRev', loError.ERRORNO, loError.MESSAGE, '', loError
		    MESSAGEBOX('Unable to process the revenue at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		          'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		RETURN llReturn
		
	ENDPROC

	PROCEDURE calcdayson		&& Calculates the days on.
		LOCAL lcBegRange, lcEndRange, lcYear, lcYear1, ldDate1, ldDate2, lnDays
		
		lcYear = STR(YEAR(DATE()),4)
		
		SELECT options
		GO TOP
		glCalcDays = lCalcDays
		
		lcBegRange = THISFORM.txtcBegRange.VALUE
		lcEndRange = THISFORM.txtcEndRange.VALUE
		
		*
		*  If both oil & gas periods are displayed, use the gas period to
		*  calculate the dayson.  Otherwise use the oil period.
		*
		IF glCalcDays
		   IF LEFT(lcBegRange,2) > LEFT(lcEndRange,2)
		      lcYear1 = STR(VAL(lcYear)+1,4)
		   ELSE
		      lcYear1 = lcYear
		   ENDIF
		   ldDate1 = CTOD(lcBegRange+'/'+lcYear)
		   ldDate2 = CTOD(lcEndRange+'/'+lcYear1)
		   lnDays  = ldDate2 - ldDate1
		   thisform.txtnDaysOn.setvalue(lnDays)
		   thisform.txtnDaysOn.refresh()
		ENDIF
		
	ENDPROC

	PROCEDURE calctot		&& Calculates the total  income for the period.
		LOCAL lnTotal, lcidinch, lnRecNo, lcSelect
		
		lcSelect = SELECT()
		
		SELECT wellrev
		lnRecNo = RECNO()
		SUM(nTotalInc) TO lnTotal
		IF lnRecNo <= RECC()
		   GOTO lnRecNO
		ENDIF   
		
		thisform.txtTotalInc.Value = lnTotal
		thisform.txtTotalInc.Refresh()
		
		SELECT (lcSelect)
		
	ENDPROC

	PROCEDURE calctotalinc		&& Calculates the total income based on the units and price entered.
		LOCAL lntotal
		lnTotal = ROUND(thisform.txtnUnits.Value * thisform.txtnPrice.value,2)
		thisform.txtnTotalInc.SetValue(lntotal)
		thisform.txtnTotalInc.Refresh()
		
		
	ENDPROC

	PROCEDURE checkclose		&& Checks to see if the period has been closed.
		LOCAL lcYear, lcPeriod, lcGroup, lcAlias, llReturn
		SET DELETED ON
		lcAlias = ALIAS()
		
		lnRunNo    = INT(VAL(THISFORM.RunCombo1.LISTITEM[THISFORM.RunCombo1.LISTITEMID,3]))
		
		IF lnRunNo <> 0
		   RETURN .T.
		ELSE
		   RETURN .F.
		ENDIF      
		
		
	ENDPROC

	PROCEDURE checkcloserun
		LOCAL lcYear, lcPeriod, lcGroup, lcAlias, llReturn
		SET DELETED ON
		lcAlias = ALIAS()
		
		lnRunNo    = INT(VAL(THISFORM.RunCombo1.LISTITEM[THISFORM.RunCombo1.LISTITEMID,3]))
		
		IF lnRunNo = 0
		   RETURN .F.
		ELSE
		   RETURN .T.
		ENDIF      
	ENDPROC

	PROCEDURE checkruns		&& Checks for last closed run for given well.
	ENDPROC

	PROCEDURE debug
		
		
		
		
		
		
		
		
		
		
		lnd = thisform.DataSession
		thisform.omessage.display('Datasession = ' + TRANSFORM(lnd) + CHR(13) + ;
		                          'Income = ' + strtran(DBF('income'),'\','\\') + CHR(13) + ;
		                          'Wells =  ' + DBF('wells') )
		SET DATASESSION TO 2        
		lcfile = DBF('appdata_appreg01')
		SET datasession to 3
		lcfile = STRTRAN(lcfile,'\','\\')                  
		thisform.omessage.display('Appreg01 = ' + lcfile)
		
		SET DATASESSION TO 3                         
	ENDPROC

	PROCEDURE delete
		LPARAMETERS cworkarea, tlDetail
		
		thisform.lDelDetail = tlDetail
		
		IF TYPE('cworkarea') <> 'C'
		   cworkarea = 'Wellrev'
		ENDIF
		   
		IF cworkarea = 'Wells'
		   cworkarea = 'Wellrev'
		ENDIF   
		thisform.lDelDetail = .t.
		
		DODEFAULT(cworkarea)
		
		
	ENDPROC

	PROCEDURE editdetail		&& Brings the current record in the grid up to the detail section in the form.
		LOCAL llReturn, llValidDate, lnRecNo, loError
		IF wellrev.nrunno <> 0
		    WAIT WIND NOWAIT 'This period and group is closed. No updates allowed.'
		    RETURN
		ENDIF
		
		IF wellrev.lcstran = .T.
		    THISFORM.oMessage.Warning('This revenue entry was entered through the Cash/Production Revenue Receipts screen. ' +  ;
		          'Changes cannot be made here.')
		    RETURN
		ENDIF
		
		IF m.goapp.lamversion
		    llValidDate = THISFORM.glmaint.checkperiod(wellrev.drevdate, .T.)
		    IF NOT llValidDate
		        THISFORM.oMessage.Warning('This entry cannot be changed, since the fiscal year/period has been closed.')
		        RETURN
		    ENDIF
		ENDIF
		
		llReturn = .T.
		
		TRY
		    THISFORM.leditdetail = .T.
		
		    WITH THISFORM
		        .lChanged        = .T.
		        .cbosource.VALUE = wellrev.csource
		
		        .txtdRevDate.SETVALUE(wellrev.drevdate)
		        .txtnUnits.SETVALUE(wellrev.nUnits)
		        .txtnPrice.SETVALUE(wellrev.nPrice)
		        IF 'TAX' $ wellrev.csource
		            .txtnTotalInc.SETVALUE(wellrev.nTotalInc * -1)
		        ELSE
		            .txtnTotalInc.SETVALUE(wellrev.nTotalInc)
		        ENDIF
		        .txtcBegRange.VALUE = wellrev.cBegRange
		        .txtcEndRange.VALUE = wellrev.cEndRange
		        .txtnDaysOn.SETVALUE(wellrev.nDaysOn)
		        .txtcOwnerID.VALUE = wellrev.cownerid
		        .txtrefid.VALUE    = wellrev.crefid
		        .txtrevkey.VALUE   = wellrev.crevkey
		        .cboacct.SETVALUE(wellrev.cacctno)
		        SELECT revsrc
		        LOCATE FOR crevkey = wellrev.crevkey
		        IF FOUND()
		            .txtcPurchaser.VALUE = revsrc.crevname
		        ENDIF
		        .swperiod.VALUE  = wellrev.cperiod
		        .swyear.VALUE    = wellrev.cyear
		        .txtcNotes.VALUE = wellrev.cmemo
		
		        SELECT wellrev
		        lnRecNo = RECNO()
		        = TABLEUPDATE(.T.)
		        TRY
		            IF lnRecNo > 0  &&  Avoid bogus "out of range" errors
		                GOTO lnRecNo
		            ENDIF
		        CATCH
		        ENDTRY
		        THISFORM.glmaint.delbatch(wellrev.cBatch, 'DM')
		        THISFORM.glmaint.delcheck(wellrev.cBatch, .T.)
		        THISFORM.ldeldetail = .T.
		        THISFORM.cmdatamanager.DELETE('wellrev')
		        THISFORM.ldeldetail = .F.
		        THISFORM.grdgridcustom1.REFRESH()
		        THISFORM.setnextcontrol(THISFORM.cbosource)
		        THISFORM.cbosource.SETFOCUS()
		    ENDWITH
		CATCH TO loError
		    llReturn = .F.
		    DO errorlog WITH 'EditDetail', loError.LINENO, 'DMWellRev', loError.ERRORNO, loError.MESSAGE, '', loError
		    MESSAGEBOX('Unable to edit the revenue at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		          'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		RETURN llReturn
		
		
		
		
	ENDPROC

	PROCEDURE getrange		&& Gets the period range for gas and oil
	ENDPROC

	PROCEDURE getrevenue		&& Refreshes the form with revenue entries for the given criteria.
		LOCAL lcYear, lcPeriod, lcWellID, lnRecNo, lcWellName, lcGroup
		
		llReturn = .T.
		
		TRY
		    IF THISFORM.cmdatamanager.ischanged()
		        swselect('wellrev', .T.)
		        = TABLEUPDATE(.T.)
		        swselect('income',.T.)
		        = TABLEUPDATE(.T.)
		    ENDIF
		
		    THISFORM.REQUERY()
		
		    IF THISFORM.checkclose()
		        WAIT WIND NOWAIT 'This run is closed. No updates allowed.'
		        THISFORM.lblClosed.VISIBLE = .F.
		        THISFORM.cmdatamanager.revertall()
		    ELSE
		        THISFORM.lblClosed.VISIBLE = .F.
		    ENDIF
		
		    THISFORM.setaccount()
		    
		CATCH TO loError
		    llReturn = .F.
		    DO errorlog WITH 'GetRevenue', loError.LINENO, 'DMWellRev', loError.ERRORNO, loError.MESSAGE, '', loError
		    MESSAGEBOX('Unable to process the report at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		          'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		RETURN llReturn
	ENDPROC

	PROCEDURE Init
		*thisform.cworkarea = 'Income'
		IF DODEFAULT()
		   thisform.cworkarea = 'Wellrev'
		   IF TYPE('m.goApp') = 'O'
		      IF NOT m.goApp.lAMVersion
		         thisform.lblAccount.visible = .f.
		         thisform.cboAcct.Visible = .f.
		      ENDIF
		   ENDIF
		
		   THISFORM.RunCombo1.LISTITEMID = 1
		   WITH THISFORM
		   .txtnUnits.setvalue(0)
		   .txtnPrice.setvalue(0)
		   .txtnTotalInc.setvalue(0)
		   .txtnDaysOn.setvalue(0)
		   .setaccount()
		   ENDWITH
		ENDIF
		
		ON KEY LABEL f8 _screen.ActiveForm.debug()
		
	ENDPROC

	PROCEDURE new
		LPARAMETERS cworkarea
		
		*
	ENDPROC

	PROCEDURE requery
		LPARAMETERS cworkarealist
		
		lnRunNo     = INT(VAL(THISFORM.RUNCOMBO1.LISTITEM[THISFORM.RUNCOMBO1.LISTITEMID,3]))
		lcRunYear      = THISFORM.RUNCOMBO1.LISTITEM[THISFORM.RUNCOMBO1.LISTITEMID,2]
		lcTypeClose = THISFORM.RUNCOMBO1.LISTITEM[THISFORM.RUNCOMBO1.LISTITEMID,6]
		lcGroup     = THISFORM.RUNCOMBO1.LISTITEM[THISFORM.RUNCOMBO1.LISTITEMID,4]
		lcWellID    = wells.cwellid
		lcWellName  = THISFORM.txtcWellName.VALUE
		
		IF TXNLEVEL() = 0
		   SELE wellrev
		   requery()
		ENDIF    
		
		thisform.calctot()
		thisform.refresh()
	ENDPROC

	PROCEDURE save
		LPARAMETERS cworkarealist
		
		thisform.setnextcontrol(thisform.txtcWellID)
		
		IF DODEFAULT(cworkarealist)
		   SELECT wellrev
		   GO TOP
		   thisform.grdgridcustom1.refresh()
		ENDIF   
	ENDPROC

	PROCEDURE setaccount
		
		*!*	SELE glopt
		*!*	IF glopt.ldmnorev OR glopt.ldmnopost
		*!*	   THISFORM.cboacct.LISTITEMID = 1
		*!*	ELSE
		*!*	   * Set the default account
		*!*	   IF FILE('defacct.dbf')
		*!*	      IF NOT USED('defacct')
		*!*	         USE defacct IN 0
		*!*	      ENDIF
		
		*!*	      SELE defacct
		*!*	      GO TOP
		*!*	      lcAcct = cAcctNo
		*!*	      USE
		
		*!*	      lnItemID = 1
		*!*	      FOR lnX = 1 TO THISFORM.cboacct.LISTCOUNT
		*!*	         IF THISFORM.cboacct.LISTITEM[lnx] = lcAcct
		*!*	            lnItemID = lnX
		*!*	            EXIT
		*!*	         ENDIF
		*!*	      ENDFOR
		*!*	      THISFORM.cboacct.LISTITEMID = lnItemID
		*!*	   ENDIF
		*!*	ENDIF
		
	ENDPROC

	PROCEDURE cboAcct.Init
		LOCAL lnItemID, lnX, lcAcct, lnTally, lnY
		
		*
		*  Builds the data displayed in the combo list box
		*
		
		SELECT  cAcctNo+'-'+cAcctdesc AS cAcct, cAcctNo FROM coa INTO ARRAY laAcct WHERE nAcctType < 7 ORDER BY cAcctNo
		
		lnTally = _TALLY
		lnY = 1
		
		*!*    SELE glopt
		*!*    IF glopt.ldmnorev OR glopt.ldmnopost
		*!*       THIS.ADDLISTITEM('NO POSTING',lnY,1)
		*!*       THIS.ADDLISTITEM('NOPOST',lnY,2)
		*!*    ELSE
		
		IF lnTally > 0
		   FOR lnX = 1 TO ALEN(laAcct,1)
		      THIS.ADDLISTITEM(laAcct[lnX,1],lnX,1)
		      THIS.ADDLISTITEM(laAcct[lnX,2],lnX,2)
		   ENDFOR
		ENDIF
		*!*    ENDIF
		
		SELECT options
		GO TOP
		IF m.goApp.lAMVersion
		   IF EMPTY(cWellIncAcct)  &&  Get default account, if it's specified
		      THIS.set('value',options.cdisbacct)
		   ELSE
		      THIS.SET('value',options.cWellIncAcct)
		   ENDIF
		ELSE
		   THIS.VISIBLE = .F.
		ENDIF
		DODEFAULT()
		
	ENDPROC

	PROCEDURE cboAcct.Valid
		IF DODEFAULT()
		    swselect('coa')
		    LOCATE FOR cAcctNo = THIS.VALUE
		    IF FOUND() AND NOT lbankacct
		        IF MESSAGEBOX('This account should normally be a bank account. ' + ;
		                  'Are you sure you want to use this account?', 36, 'Bank Account?') = 7
		            RETURN 0
		        ENDIF
		    ENDIF
		ENDIF
		
		
	ENDPROC

	PROCEDURE cboDeck.Init
		IF DODEFAULT()
		   this.Requery()
		ENDIF    
	ENDPROC

	PROCEDURE cboDeck.Requery
		LPARAMETERS tcDeck, tcYear, tcPeriod
		
		IF DODEFAULT()
			THIS.Clear()
			this.Value = ''
			this.DisplayValue = ''
			IF VARTYPE(tcYear) # 'C'
			   tcYear = ''
			ENDIF 
			IF VARTYPE(tcPeriod) # 'C'
			   tcPeriod = ''
			ENDIF 
		
		    IF VARTYPE(tcDeck) # 'C'
		       tcDeck = ''
		    ENDIF 
		       
		    lcWellID = thisform.txtcwellID.Value 
		    IF EMPTY(lcWellID)
		       RETURN
		    ENDIF 
		    
		    lnIndex = 1
		    
		    * Get a list of decks for the given well
			SELECT cdeck, ldefault, effstartyr, effstartprd FROM doidecks ;
				INTO CURSOR temp ;
				WHERE cwellid = lcwellid ;
				ORDER BY cdeck DESC  ;
				GROUP BY cdeck
		
		    * Add the decks to the dropdown
			lnx = 1
			IF _TALLY > 0
				SELECT temp
				SCAN
					SCATTER MEMVAR
					IF EMPTY(m.cdeck)
					   m.cdeck = '(blank)'
					ENDIF 
					THIS.ADDLISTITEM(m.cdeck,lnx,1)
					THIS.ADDLISTITEM(m.cdeck,lnx,2)
					
					* If we passed the deck or production period
					* set the deck to the given deck or the one
					* that has an effective date for the production period.
					IF NOT EMPTY(tcDeck)
						IF m.cDeck = tcDeck
					  	 	lnIndex = lnx
						ENDIF 
					ELSE
					   IF tcYear = m.effstartyr AND tcPeriod = m.effstartprd
					      lnIndex = lnX
					   ENDIF 
					ENDIF 	
					lnx = lnx + 1 
				ENDSCAN
			    this.ListItemId = lnIndex
			ELSE 		
			    this.ListItemId = 1
			ENDIF
		ENDIF
		
	ENDPROC

	PROCEDURE cboDeck.Valid
		RETURN .t.
	ENDPROC

	PROCEDURE cboSource.Init
		LOCAL lnCount
		
		
		swselect('revcat')
		lnCount = 2
		
		THIS.ADDLISTITEM('     ', 1, 1)
		THIS.ADDLISTITEM('              ', 1, 2)
		
		SCAN
		   SCATTER MEMVAR
		   THIS.ADDLISTITEM(revcat.crevtype, lnCount, 1)
		   THIS.ADDLISTITEM(revcat.crevdesc, lnCount, 2)
		   lnCount = lnCount + 1
		ENDSCAN
		
		THIS.LISTITEMID = 1
		DODEFAULT()
	ENDPROC

	PROCEDURE cboSource.LostFocus
		LOCAL lcWellID
		
		lcWellID = wells.cwellid
		
		*
		*  Check to make sure the division of interests for this
		*  class are 100%.  If not, give a message.
		*
		IF NOT chkdoi(lcWellID,THIS.VALUE)
		   RETURN .F.
		ENDIF
		
		*
		*  Get the default purchaser and price
		*
		SELECT wells
		SET ORDER TO cwellid
		IF SEEK(lcWellID)
		
		   IF wells.cWellStat = 'I'  &&  Don't let them enter enter income for inactive wells.  Just warn them here, adddetail() won't let them save it. - BH 10/10/2006
		      THISFORM.oMessage.Warning('This well is marked as inactive.  No income can be entered for it.')
		   ENDIF
		   THISFORM.txtnPrice.ENABLED = .T.
		   THISFORM.txtnunits.ENABLED = .T.
		
		   DO CASE
		      CASE THIS.VALUE = 'BBL' OR INLIST(THIS.VALUE,'OTAX1','OTAX2','OTAX3','OTAX4')
		
		         IF THISFORM.txtnPrice.VALUE = 0 AND THIS.VALUE = 'BBL'
		            THISFORM.txtnPrice.setvalue(wells.nbblprice)
		            THISFORM.txtnPrice.REFRESH()
		         ENDIF
		         lcrev = wells.crevbbl
		         IF NOT EMPTY(lcrev)
		            SELECT revsrc
		            LOCATE FOR crevkey = lcrev
		            IF FOUND()
		               THISFORM.txtcPurchaser.VALUE = crevname
		               *  If the purchaser's default price is not
		               *  zero, plug that price in.
		               IF revsrc.ndefprice <> 0 AND wells.nbblprice = 0 AND THIS.VALUE = 'BBL'
		                  THISFORM.txtnPrice.setvalue(revsrc.ndefprice)
		               ENDIF
		            ENDIF
		         ENDIF
		      CASE THIS.VALUE = 'MCF' OR INLIST(THIS.VALUE,'GTAX1','GTAX2','GTAX3','GTAX4')
		         IF THISFORM.txtnPrice.VALUE = 0 AND THIS.VALUE = 'MCF'
		            THISFORM.txtnPrice.setvalue(wells.nmcfprice)
		            THISFORM.txtnPrice.REFRESH()
		         ENDIF
		         lcrev = wells.crevmcf
		         IF NOT EMPTY(lcrev)
		            SELECT revsrc
		            LOCATE FOR crevkey = lcrev
		            IF FOUND()
		               THISFORM.txtcPurchaser.VALUE = crevname
		               *  If the purchaser's default price is not
		               *  zero, plug that price in.
		               IF revsrc.ndefprice <> 0 AND wells.nmcfprice = 0 AND THIS.VALUE = 'MCF'
		                  THISFORM.txtnPrice.setvalue(revsrc.ndefprice)
		               ENDIF
		            ENDIF
		         ENDIF
		   ENDCASE
		   IF 'TAX' $ THIS.VALUE
		      THISFORM.txtnPrice.ENABLED = .F.
		      THISFORM.txtnunits.ENABLED = .F.
		      THISFORM.txtnunits.VALUE = 0
		      THISFORM.txtnPrice.VALUE = 0
		      
		      *  If a tax is chosen, check to see if the well is marked as exempt from any of the tax types.
		      *  If it is, don't let them enter it.   
		      SELECT wells
		      LOCATE FOR cWellID == this.Parent.txtcwellID.Value
		      IF FOUND()
		         IF lTaxExempt1 OR lTaxExempt2 OR lTaxExempt3 OR lTaxExempt4
		            IF ('1' $ this.Value AND lTaxExempt1) OR ('2' $ this.Value AND lTaxExempt2);
		                  OR ('3' $ this.Value AND lTaxExempt3) OR ('4' $ this.Value AND lTaxExempt4)
		               thisform.oMessage.Warning('Well ' + ALLTRIM(this.Parent.txtcwellID.Value) + ' is marked as exempt from this type of tax, so it cannot be entered.')
		               this.set('value','BBL')
		               thisform.setnextcontrol(this)
		            ENDIF
		         ENDIF
		      ENDIF 
		   ENDIF
		ENDIF
		
		DODEFAULT()
		
		
		
	ENDPROC

	PROCEDURE cmdAllocate.Click
		LOCAL lcList
		PRIV llOK
		
		llOK = .F.
		lcList = 'cownerid\Owner ID,csortfield\Owner Name'
		
		SET SAFETY OFF
		SELECT cownerid, csortfield FROM investor INTO CURSOR temp ;
		  WHERE cownerid IN (SELECT cOwnerid FROM wellinv WHERE cWellID = thisform.txtcwellid.value) ;
		  ORDER BY cownerid
		
		USE DBF('temp') AGAIN IN 0 ALIAS tempown
		SELECT tempown
		INDEX ON cownerid TAG cownerid
		INDEX ON csortfield TAG csortfield
		
		DO FORM ..\custom\picklist WITH 'Tempown', lcList, thisform.txtcownerid.value, 2, .t.,.t.
		
		IF llOK
		   thisform.txtcOwnerID.setvalue(tempown.cownerid)
		   thisform.txtcOwnerID.Refresh()
		   thisform.setnextcontrol(thisform.txtcownerid)
		ENDIF   
		
		IF USED('temp')
		   USE IN temp
		ENDIF
		
		IF USED('tempown')
		   USE IN tempown
		ENDIF      
	ENDPROC

	PROCEDURE cmdAllocate.When
		RETURN MDOWN()
	ENDPROC

	PROCEDURE cmdatamanager.afterdelete
		LPARAMETERS cworkarea
		
		RETURN .T.
	ENDPROC

	PROCEDURE cmdatamanager.afternav
		LPARAMETERS cworkarea
		
		IF ALLTRIM(cworkarea) == 'Wells'
		
		   THISFORM.txtcwellname.VALUE = wells.cwellname
		   THISFORM.txtgroup.VALUE = wells.cgroup
		   thisform.getrevenue()
		
		   SELECT options
		   GO TOP
		   IF m.goapp.lAMVersion
		      IF EMPTY(cWellIncAcct)  &&  Get default account, if it's specified
		         THISFORM.cboAcct.LISTITEMID = 1
		      ELSE
		         THISFORM.cboAcct.SET('value',options.cWellIncAcct)
		      ENDIF
		   ENDIF
		ENDIF
		
	ENDPROC

	PROCEDURE cmdatamanager.afternew
		LPARAMETERS cworkarea
		LOCAL lcidinch, lcidinco
		
		IF m.cWorkArea = 'Wellrev'
		   lcidinco = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Income')
		   SET DELETED OFF
		   SELECT income
		   SET ORDER TO cidinco
		   DO WHILE SEEK(lcidinco)
		      lcidinco = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Income')
		   ENDDO
		   lcBatch = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Batch')
		   SET DELETED ON
		   SELECT wellrev
		   REPL cidinco WITH lcidinco, ;
		        cBatch  WITH lcBatch
		   THISFORM.setnextcontrol(THISFORM.txtcWellID)
		ENDIF
		
		DODEFAULT(cworkarea)
		
	ENDPROC

	PROCEDURE cmdatamanager.afterupdate
		LPARAMETERS cWorkareaList, lCurrentRecordOnly
		
		thisform.requery()
		SELECT wellrev
		GO top
		thisform.grdgridcustom1.Refresh()
		
		thisform.lEditDetail = .F.
		
		return(DODEFAULT(cworkareaList, lCurrentRecordOnly))
	ENDPROC

	PROCEDURE cmdatamanager.beforedelete
		LPARAMETERS cworkarea
		LOCAL lcBatch, lnIncCnt
		LOCAL llReturn, llValidDate, loError
		LOCAL cidincs
		
		llReturn = .T.
		
		TRY
		* Can't delete a closed period's record
		    IF THISFORM.checkclose()
		        THISFORM.oMessage.Warning('The revenue has been processed. You cannot delete this record.')
		        llReturn = .F.
		        EXIT
		    ENDIF
		
		    IF m.goapp.lamversion
		        llValidDate = THISFORM.glmaint.checkperiod(wellrev.drevdate, .T.)
		        IF NOT llValidDate
		            THISFORM.oMessage.Warning('This entry cannot be changed, since the fiscal year/period has been closed.')
		            llReturn = .F.
		            EXIT
		        ENDIF
		    ENDIF
		
		    DO CASE
		        CASE m.cworkarea = 'Wellrev' AND NOT THISFORM.lDelDetail
		            lnIncCnt = 0
		
		            SELECT wellrev
		            SCAN
		                SCATTER MEMVAR
		
		                IF lcstran
		                    m.cidincs = THISFORM.oregistry.incrementcounter('%Shared.Counters.Income')
		                    lnIncCnt  = lnIncCnt + 1
		                    SELECT incsusp1
		                    SET DELE OFF
		                    SET ORDER TO cidincs
		                    DO WHILE SEEK(m.cidincs)
		                        m.cidincs = THISFORM.oregistry.incrementcounter('%Shared.Counters.Income')
		                    ENDDO
		                    SET DELE ON
		
		                    INSERT INTO incsusp FROM MEMVAR
		                ELSE
		*  Delete the batch from glmaster
		                    THISFORM.glmaint.delbatch(m.cBatch, 'DM')
		*  Delete the deposit entry from the check register
		                    THISFORM.glmaint.delcheck(m.cBatch, .T.)
		                ENDIF
		                SELE wellrev
		                DELE NEXT 1
		            ENDSCAN
		            IF lnIncCnt > 0
		                THISFORM.oMessage.DISPLAY('Returned ' + ALLTRIM(STR(lnIncCnt)) + ' entries to the allocation file.')
		            ENDIF
		            THISFORM.runcombo1.VALID()
		
		        CASE m.cworkarea = 'Wellrev' AND THISFORM.lDelDetail
		            SELECT wellrev
		            SCATTER MEMVAR
		            IF NOT THISFORM.leditdetail
		                IF wellrev.lcstran  &&  Don't ask if it's a CSTran, just send it to the allocation file - BH 10/10/2006
		                    m.cidincs = THISFORM.oregistry.incrementcounter('%Shared.Counters.Income')
		
		                    SELECT incsusp1
		                    SET DELE OFF
		                    SET ORDER TO cidincs
		                    DO WHILE SEEK(m.cidincs)
		                        m.cidincs = THISFORM.oregistry.incrementcounter('%Shared.Counters.Income')
		                    ENDDO
		                    SET DELE ON
		
		                    INSERT INTO incsusp FROM MEMVAR
		                    THISFORM.oMessage.DISPLAY('This entry has been placed in the allocation file.')
		                ELSE
		                    IF THIS.oMessage.CONFIRM('Send the revenue entry to the revenue allocation file?')
		                        m.cidincs = THISFORM.oregistry.incrementcounter('%Shared.Counters.Income')
		
		                        SELECT incsusp1
		                        SET DELE OFF
		                        SET ORDER TO cidincs
		                        DO WHILE SEEK(m.cidincs)
		                            m.cidincs = THISFORM.oregistry.incrementcounter('%Shared.Counters.Income')
		                        ENDDO
		                        SET DELE ON
		
		                        INSERT INTO incsusp FROM MEMVAR
		                        THISFORM.oMessage.DISPLAY('This entry has been placed in the allocation file.')
		                    ELSE  &&  Only delete the GL and check register stuff if they answer No about sending it to the allocation file - BH 08/08/2008
		*  Delete the batch from glmaster
		                        THISFORM.glmaint.delbatch(m.cBatch, 'DM')
		*  Delete the deposit entry from the check register
		                        THISFORM.glmaint.delcheck(m.cBatch, .T.)
		                    ENDIF
		                ENDIF
		            ENDIF
		        CASE m.cworkarea = 'Wells'
		            llReturn = .F.
		            EXIT 
		    ENDCASE
		
		CATCH TO loError
		    llReturn  = .F.
		    DO errorlog WITH 'BeforeDelete', loError.LINENO, 'DMWellRev', loError.ERRORNO, loError.MESSAGE, '', loError
		    MESSAGEBOX('Unable to process the revenue at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		          'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		RETURN llReturn
		
		 
	ENDPROC

	PROCEDURE cmdatamanager.beforenav
		LPARAMETERS cWorkarea
		
		IF m.cWorkarea = 'Wells'
		   IF THISFORM.lChanged AND THISFORM.omessage.CONFIRM('Do you want to save changes to this form?')
		      THISFORM.SAVE()
		   ENDIF
		ENDIF
		
		DODEFAULT(cWorkarea)
		
	ENDPROC

	PROCEDURE cmdatamanager.beforeupdate
		LPARAMETERS cworkarealist
		LOCAL lcBatch, lcCash, lcRevClear, lcGroup, llReturn
		LOCAL oDist AS 'distproc'
		LOCAL lcDeptNo, lcExpClear, lcType, lcWellID, lcYear, lnRunNo, loError
		LOCAL cAcctNo, cType, jGross, nTotalInc
		
		*
		*  Builds the glmaster journal entries for the income for the well
		*
		
		llReturn = .T.
		
		TRY
		    THISFORM.setnextcontrol(THISFORM.txtcwellid)
		    
		    lcYear   = THISFORM.RunCombo1.LISTITEM[THISFORM.RunCombo1.LISTITEMID, 2]
		    lcGroup  = THISFORM.RunCombo1.LISTITEM[THISFORM.RunCombo1.LISTITEMID, 4]
		    lcWellID = wells.cwellid
		    lnRunNo  = INT(VAL(THISFORM.RunCombo1.LISTITEM[THISFORM.RunCombo1.LISTITEMID, 3])) 
		    lnRunNo    = INT(VAL(THISFORM.RunCombo1.LISTITEM[THISFORM.RunCombo1.LISTITEMID, 3]))
		
		    IF EMPTY(lcGroup)
		        lcGroup = '00'
		    ENDIF
		
		* Can't save to a period that's already closed
		    IF lnRunNo <> 0
		        WAIT WIND NOWAIT 'This run and group are closed. No updates allowed.'
		        THISFORM.cmdatamanager.revertall()
		        THISFORM.lchanged = .F.
		        llReturn = .F.
		        EXIT 
		    ENDIF
		    
		*
		*  Call distproc to create the (invtmp) and (wellwork) cursors
		*
		    oDist = CREATEOBJECT('distproc', lcWellID, lcWellID, ;
		          '01', ;
		          '1980', ;
		          lcGroup, 'W', DATE(), .F., 0)
		*  Get the default cash account
		    swselect('options')
		    lcCash   = cDisbAcct
		    lcDeptNo = cDeptNo
		    lcTax1Acct = ctaxacct1
		    lcTax2Acct = ctaxacct2
		    lcTax3Acct = ctaxacct3
		    lcTax4Acct = ctaxacct4
		
		*  Get the default revenue clearing account
		    swselect('glopt')
		    lcRevClear = cRevClear
		    lcExpClear = cExpClear
		
		*  Get the group for this well
		    swselect('wells')
		    SET ORDER TO cwellid
		    IF SEEK(lcWellID)
		        lcGroup = cGroup
		    ELSE
		        lcGroup = '00'
		    ENDIF
		
		    WITH THISFORM
		
		* Post the entries entered through this form.
		* When lCSTran = .T. the entry was added by the Acct Mgr
		        SELECT wellrev
		        SCAN FOR NOT lCSTran
		            SCATTER MEMVAR
		
		* Remove any entries for this batch
		            .glmaint.delbatch(m.cBatch, 'DM')
		
		            .glmaint.delcheck(m.cBatch, .T.)
		
		*  Set the properties
		            .glmaint.cBatch     = m.cBatch
		            .glmaint.dgldate    = wellrev.drevdate
		            .glmaint.cDeptNo    = lcDeptNo
		            .glmaint.cidchec    = ''
		            .glmaint.cunitno    = m.cwellid
		            .glmaint.creference = 'Prod: ' + wellrev.cYear + '/' + wellrev.cPeriod
		            .glmaint.cSource    = 'DM'
		            .glmaint.dCheckDate = wellrev.drevdate
		            .glmaint.dPostDate  = wellrev.drevdate
		            .glmaint.cGroup     = lcGroup
		            .glmaint.lPrinted   = .T.
		            .glmaint.cEntryType = 'D'
		            .glmaint.cIDType    = 'D'
		            .glmaint.ccheckno   = wellrev.crefid
		
		            m.cType = m.cSource
		            lcType  = ''
		*  Net down the revenue for direct paid and "Dummy" owners
		            IF INLIST(m.cType, 'BBL', 'OTAX1', 'OTAX2', 'OTAX3', 'OTAX4')
		                lcType = 'O'
		            ENDIF
		            IF INLIST(m.cType, 'MCF', 'GTAX1', 'GTAX2', 'GTAX3', 'GTAX4')
		                lcType = 'G'
		            ENDIF
		            IF lcType = 'O' OR lcType = 'G'
		                jGross  = swNetRevenue(m.cwellid, m.nTotalInc, lcType, .F., .T., .F., m.cOwnerID,,,m.cDeck)
		            ELSE
		                jGross  = m.nTotalInc
		            ENDIF
		            IF m.cType = 'TRANS'
		                lcType = 'T'
		                jGross = swNetRevenue(m.cwellid, m.nTotalInc, lcType, .F., .T., .F., m.cOwnerID,,,m.cDeck)
		            ENDIF
		            IF m.cType = 'OTH'
		                lcType = 'P'
		                jGross = swNetRevenue(m.cwellid, m.nTotalInc, lcType, .F., .T., .F., m.cOwnerID,,,m.cDeck)
		            ENDIF
		            DO CASE
		                CASE INLIST(m.cType, 'OTAX1', 'OTAX2', 'OTAX3', 'OTAX4')
		                    swselect('wells')
		                    LOCATE FOR cwellid == m.cwellid
		                    IF FOUND()
		* Offset RevClear with RevClear since the purchaser
		* is not withholding the tax and we need to post
		* to tax liability when closing. Should work like
		* calculated tax.
		                        IF m.cType = 'OTAX1'
		                            IF NOT wells.lSev1O
		                                m.cAcctNo = lcTax1Acct
		                            ENDIF
		                        ENDIF
		                        IF m.cType = 'OTAX2'
		                            IF NOT wells.lSev2O
		                                m.cAcctNo = lcTax2Acct
		                            ENDIF
		                        ENDIF
		                        IF m.cType = 'OTAX3'
		                            IF NOT wells.lSev3O
		                                m.cAcctNo = lcTax3Acct
		                            ENDIF
		                        ENDIF
		                        IF m.cType = 'OTAX4'
		                            IF NOT wells.lSev4O
		                                m.cAcctNo = lcTax4Acct
		                            ENDIF
		                        ENDIF
		                    ENDIF
		                    swselect('wellinv')
		                    SCAN FOR cwellid = m.cwellid
		                        SCATTER MEMVAR
		                        SELECT investor
		                        SET ORDER TO cOwnerID
		                        IF SEEK(m.cOwnerID) AND lExempt AND NOT INLIST(m.cDirect, 'O', 'B')
		                            IF m.cType = 'OTAX1'
		                                jGross = jGross - (jGross * (m.nrevtax1 / 100))
		                            ENDIF
		                            IF m.cType = 'OTAX2'
		                                jGross = jGross - (jGross * (m.nrevtax4 / 100))
		                            ENDIF
		                            IF m.cType = 'OTAX3'
		                                jGross = jGross - (jGross * (m.nrevtax7 / 100))
		                            ENDIF
		                            IF m.cType = 'OTAX4'
		                                jGross = jGross - (jGross * (m.nrevtax10 / 100))
		                            ENDIF
		                        ENDIF
		                    ENDSCAN
		                CASE INLIST(m.cType, 'GTAX1', 'GTAX2', 'GTAX3', 'GTAX4')
		                    swselect('wells')
		                    LOCATE FOR cwellid == m.cwellid
		                    IF FOUND()
		* Offset RevClear with RevClear since the purchaser
		* is not withholding the tax and we need to post
		* to tax liability when closing. Should work like
		* calculated tax.
		                        IF m.cType = 'GTAX1'
		                            IF NOT wells.lSev1G
		                                m.cAcctNo = lcTax1Acct
		                            ENDIF
		                        ENDIF
		                        IF m.cType = 'GTAX2'
		                            IF NOT wells.lSev2G
		                                m.cAcctNo = lcTax2Acct
		                            ENDIF
		                        ENDIF
		                        IF m.cType = 'GTAX3'
		                            IF NOT wells.lSev3G
		                                m.cAcctNo = lcTax3Acct
		                            ENDIF
		                        ENDIF
		                        IF m.cType = 'GTAX4'
		                            IF NOT wells.lSev4G
		                                m.cAcctNo = lcTax4Acct
		                            ENDIF
		                        ENDIF
		                    ENDIF
		                    swselect('wellinv')
		                    SCAN FOR cwellid = m.cwellid
		                        SCATTER MEMVAR
		                        swselect('investor')
		                        SET ORDER TO cOwnerID
		                        IF SEEK(m.cOwnerID) AND lExempt AND NOT INLIST(m.cDirect, 'G', 'B')
		                            IF m.cType = 'GTAX1'
		                                jGross = jGross - (jGross * (m.nrevtax2 / 100))
		                            ENDIF
		                            IF m.cType = 'GTAX2'
		                                jGross = jGross - (jGross * (m.nrevtax5 / 100))
		                            ENDIF
		                            IF m.cType = 'GTAX3'
		                                jGross = jGross - (jGross * (m.nrevtax8 / 100))
		                            ENDIF
		                            IF m.cType = 'GTAX4'
		                                jGross = jGross - (jGross * (m.nrevtax11 / 100))
		                            ENDIF
		                        ENDIF
		                    ENDSCAN
		                CASE INLIST(m.cType, 'PTAX1', 'PTAX2', 'PTAX3', 'PTAX4')
		                    swselect('wells')
		                    LOCATE FOR cwellid == m.cwellid
		                    IF FOUND()
		* Offset RevClear with RevClear since the purchaser
		* is not withholding the tax and we need to post
		* to tax liability when closing. Should work like
		* calculated tax.
		                        IF m.cType = 'PTAX1'
		                            IF NOT wells.lSev1P
		                                m.cAcctNo = lcTax1Acct
		                            ENDIF
		                        ENDIF
		                        IF m.cType = 'PTAX2'
		                            IF NOT wells.lSev2P
		                                m.cAcctNo = lcTax2Acct
		                            ENDIF
		                        ENDIF
		                        IF m.cType = 'PTAX3'
		                            IF NOT wells.lSev3P
		                                m.cAcctNo = lcTax3Acct
		                            ENDIF
		                        ENDIF
		                        IF m.cType = 'PTAX4'
		                            IF NOT wells.lSev4P
		                                m.cAcctNo = lcTax4Acct
		                            ENDIF
		                        ENDIF
		                    ENDIF
		            ENDCASE
		            m.nTotalInc = jGross
		
		*  Add deposit to check register
		            .glmaint.cid     = m.crevkey
		            .glmaint.cPayee  = wellrev.crevname
		            .glmaint.cDesc   = wellrev.crevname
		            .glmaint.nAmount = m.nTotalInc
		            IF EMPTY(m.cAcctNo)
		                m.cAcctNo = lcCash
		            ENDIF
		            .glmaint.cAcctNo    = m.cAcctNo
		
		            IF m.goapp.lAMVersion
		                swselect('coa')
		                LOCATE FOR cAcctNo = m.cAcctNo AND lBankAcct  &&  Only create the check register entry if the account chosen is a bank account
		                IF FOUND()
		                    .glmaint.addcheck()
		                ENDIF
		            ELSE
		                .glmaint.addcheck()
		            ENDIF
		
		* Add cash entry to glmaster
		            .glmaint.updatebatch()
		
		* Add revenue clearing entry to glmaster
		            IF m.cType <> 'EXP'
		                .glmaint.cAcctNo    = lcRevClear
		            ELSE
		                .glmaint.cAcctNo    = lcExpClear
		            ENDIF
		            .glmaint.nAmount    = m.nTotalInc * -1
		            .glmaint.updatebatch()
		*  Check to make sure the batch is in balance
		            llReturn = .glmaint.chkbalance()
		
		            IF NOT llReturn
		                THISFORM.oMessage.Severe('The G/L entry created for this revenue is not in balance.')
		                llReturn = .F.
		                EXIT
		            ENDIF
		        ENDSCAN
		        SELECT wellrev
		        = TABLEUPDATE(.T.)
		        swselect('glmaster', .T.)
		        = TABLEUPDATE(.T.)
		        swselect('income', .T.)
		        = TABLEUPDATE(.T.)
		    ENDWITH
		CATCH TO loError
		    llReturn = .F.
		    DO errorlog WITH 'BeforeUpdate', loError.LINENO, 'DMWellRev', loError.ERRORNO, loError.MESSAGE, '', loError
		    MESSAGEBOX('Unable to process the revenue at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		          'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		RETURN llReturn
		
		
	ENDPROC

	PROCEDURE cmdDelDetail.Click
		thisform.lconfirmdelete = .F.
		thisform.delete('Wellrev',.T.)
		thisform.save()
		thisform.calctot()
		thisform.lconfirmdelete = .T.
	ENDPROC

	PROCEDURE cmdEditDetail.Click
		thisform.editdetail()
		
	ENDPROC

	PROCEDURE cmdEditDetail.When
		RETURN MDOWN()
	ENDPROC

	PROCEDURE cmdLookWell.Click
		LOCAL lcList
		PRIV llOK
		
		llOK = .F.
		
		IF THISFORM.flushcontrolbuffer()
		    IF THISFORM.cmdatamanager.ischanged()
		        IF THISFORM.omessage.CONFIRM('Save changes to records for this well?')
		            THISFORM.SAVE()
		        ENDIF
		    ENDIF
		
		    lcList = 'cwellid,cwellname,cgroup,cwellstat'
		
		    DO FORM ..\CUSTOM\picklist WITH 'Wells', lcList, THISFORM.txtcwellid.VALUE, 4
		
		    IF llOK
		        THISFORM.cmdatamanager.revertall()
		        THISFORM.txtcwellid.VALUE = wells.cwellid
		        THISFORM.txtcWellName.VALUE = wells.cwellname
		        THISFORM.txtcWellName.REFRESH()
		        THISFORM.txtgroup.VALUE = wells.cgroup
		        THISFORM.txtgroup.REFRESH()
		        THISFORM.checkruns(wells.cwellid)
		        THISFORM.GetRevenue()
		    ENDIF
		
		* Reset the filter in case the picklist set it to something different
		    SELECT wells
		    SET FILTER TO INLIST(cwellstat,'A','T','D','N')
		
		    THISFORM.setnextcontrol(THISFORM.txtcwellid)
		ENDIF
		
	ENDPROC

	PROCEDURE cmdRevsrc.Click
		LOCAL lcList
		PRIV llOK
		
		llOK = .F.
		
		lcList = 'crevname\Purchaser Name,crevkey\Purchaser ID'
		
		DO FORM ..\CUSTOM\picklist WITH 'revsrc', lcList, allt(thisform.txtcPurchaser.value), 2,.f.,.t.
		
		IF llOK
		   THISFORM.txtcPurchaser.VALUE = revsrc.crevname
		   THISFORM.txtcPurchaser.REFRESH()
		ENDIF
		
		THISFORM.setnextcontrol(THISFORM.txtcPurchaser)
		
	ENDPROC

	PROCEDURE cmdRevsrc.When
		RETURN MDOWN()
	ENDPROC

	PROCEDURE Grdgridcustom1.AfterRowColChange
		LPARAMETERS ncol
		
		thisform.calctot()
	ENDPROC

	PROCEDURE Grdgridcustom1.Column1.txtcSource.LostFocus
		IF DODEFAULT()
		   SELECT revcat
		   LOCATE FOR crevtype = ALLTRIM(this.Value)
		   IF NOT FOUND()
		      MESSAGEBOX('Please enter a valid type in order to continue.',16,'Bad Type')
		      RETURN .f. 
		   ENDIF 
		ENDIF 
	ENDPROC

	PROCEDURE Grdgridcustom1.Column2.txtcRevName.DblClick
		thisform.editdetail()
	ENDPROC

	PROCEDURE Grdgridcustom1.Column2.txtcRevName.Valid
		IF NOT wellrev.lcstran
		   DODEFAULT()
		ENDIF   
	ENDPROC

	PROCEDURE Grdgridcustom1.Column2.txtcRevName.When
		RETURN .F.
	ENDPROC

	PROCEDURE Grdgridcustom1.Column3.txtdRevDate.DblClick
		thisform.editdetail()
	ENDPROC

	PROCEDURE Grdgridcustom1.Column3.txtdRevDate.Valid
		LOCAL llValidDate
		
		IF NOT wellrev.lcstran
		   *  If this is the AM and they change the date down here, make sure the old or new dates aren't in a closed year/period
		   IF m.goapp.lamversion
		      IF THIS.VALUE <> wellrev.drevdate
		         llValidDate = THISFORM.glmaint.checkperiod(wellrev.drevdate,.T.)
		         IF NOT llValidDate
		            THISFORM.oMessage.Warning('The original date of this entry cannot be changed, since the fiscal year/period has been closed.')
		            THIS.REFRESH()
		            RETURN
		         ENDIF
		         llValidDate = THISFORM.glmaint.checkperiod(THIS.VALUE,.T.)
		         IF NOT llValidDate
		            THISFORM.oMessage.Warning('This date cannot be used, since the fiscal year/period has been closed.')
		            THIS.REFRESH()
		            RETURN
		         ENDIF
		      ENDIF
		   ENDIF
		   DODEFAULT()
		ENDIF
		
	ENDPROC

	PROCEDURE Grdgridcustom1.Column4.txtnUnits.DblClick
		thisform.editdetail()
	ENDPROC

	PROCEDURE Grdgridcustom1.Column4.txtnUnits.Valid
		LOCAL lnTotal
		
		IF NOT wellrev.lcstran
		   DODEFAULT()
		ENDIF   
		
		lnTotal = this.value * wellrev.nPrice
		IF wellrev.nTotalInc <> lnTotal AND NOT wellrev.lCSTran AND lnTotal <> 0
		   thisform.cmdatamanager.replace('Wellrev','Ntotalinc',lnTotal)
		   thisform.calctot()
		   thisform.grdgridcustom1.column6.txtntotalinc.refresh()
		ENDIF   
		
		  
	ENDPROC

	PROCEDURE Grdgridcustom1.Column5.txtnPrice.DblClick
		thisform.editdetail()
	ENDPROC

	PROCEDURE Grdgridcustom1.Column5.txtnPrice.Valid
		LOCAL lnTotal
		
		IF NOT wellrev.lcstran
		   DODEFAULT()
		ENDIF   
		
		lnTotal = wellrev.nUnits * this.value
		IF wellrev.nTotalInc <> lnTotal AND NOT wellrev.lCSTran AND lnTotal <> 0
		   thisform.cmdatamanager.replace('Wellrev','Ntotalinc',lnTotal)
		   thisform.calctot()
		   thisform.grdgridcustom1.column6.txtntotalinc.refresh()
		ENDIF   
		
		  
	ENDPROC

	PROCEDURE Grdgridcustom1.Column6.txtnTotalInc.DblClick
		thisform.editdetail()
	ENDPROC

	PROCEDURE Grdgridcustom1.Column6.txtnTotalInc.Valid
		IF NOT wellrev.lcstran
		   DODEFAULT()
		ENDIF   
	ENDPROC

	PROCEDURE Grdgridcustom1.Init
		FOR EACH oCol IN THIS.Columns
		 oCol.DynamicforeColor = "IIF(wellrev.lCSTran,rgb(0,0,255),IIF(wellrev.loneman,RGB(255,128,0),rgb(0,0,0)))"
		ENDFOR
		DODEFAULT()
		
	ENDPROC

	PROCEDURE Grdgridcustom1.MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		IF NOT EMPTY(wellrev.cMemo)
		   THIS.TOOLTIPTEXT = wellrev.cMemo
		ELSE
		   THIS.TOOLTIPTEXT = ''
		ENDIF
		
		DODEFAULT(nButton, nShift, nXCoord, nYCoord)
		
	ENDPROC

	PROCEDURE lblAccount.Init
		IF NOT m.goapp.lAMVersion
		   this.Visible = .f.
		ENDIF 
		DODEFAULT()
	ENDPROC

	PROCEDURE Runcombo1.fieldvalid
		IF THISFORM.cmdatamanager.ischanged()
		   IF MESSAGEBOX('The changes made to the revenue for this well will not be saved if you continue. Do you want to continue?',36,'Discard Changes?') = 6
		      thisform.cmdatamanager.revertall()
		   ELSE
		      this.ListItemId = thisform.nrunitemid
		      RETURN     
		   ENDIF 
		ENDIF
		
		RETURN thisform.getrevenue()
	ENDPROC

	PROCEDURE Runcombo1.When
		thisform.nrunitemid = this.ListItemId
		DODEFAULT()
	ENDPROC

	PROCEDURE txtCendrange.LostFocus
		thisform.calcdayson()
		DODEFAULT()
	ENDPROC

	PROCEDURE txtcOwnerID.GotFocus
		ON KEY LABEL F2 _screen.activeform.cmdAllocate.Click()
	ENDPROC

	PROCEDURE txtcOwnerID.LostFocus
		IF (LASTKEY() = 13 OR LASTKEY() = 9) AND NOT MDOWN()  &&  Tab or enter, but not a mouseclick
		
		   SELECT wells  &&  Don't let them enter enter expenses for inactive wells - BH 10/10/2006
		   LOCATE FOR cwellid == THISFORM.txtcWellID.VALUE
		   IF NOT FOUND() OR (FOUND() AND wells.cWellStat = 'I')
		      THISFORM.oMessage.Warning('This well is marked as inactive.  No income can be entered for it.')
		      RETURN
		   ELSE
		      IF wells.cWellStat = 'V'  &&  Warn them if trying to enter revenue for an investment well
		         THISFORM.oMessage.Warning('This well is marked as an investment well, so no entries should be made here. Make all revenue entries through the Tasks >> Production Receipts Screen.')
		         RETURN
		      ENDIF
		   ENDIF
		
		   THISFORM.adddetail()
		ENDIF
		
	ENDPROC

	PROCEDURE txtcOwnerID.Valid
		ON KEY LABEL F2
		
		IF EMPTY(THIS.VALUE)
		   RETURN
		ENDIF
		
		SELECT wellinv
		LOCATE FOR cWellID+cOwnerID = THISFORM.txtcwellid.VALUE+THIS.VALUE
		IF NOT FOUND()
		   WAIT WINDOW 'The owner entered is not an owner in the given well. Please choose another.'
		   THIS.SET('value','')
		   THISFORM.setnextcontrol(THISFORM.txtcOwnerID)
		   RETURN 0
		ENDIF
		
		IF 'TAX' $ THISFORM.cbosource.VALUE
		   SELECT investor
		   SET ORDER TO cOwnerID
		   IF SEEK(THIS.VALUE)
		      IF lExempt
		         THISFORM.omessage.warning('This owner is tax exempt. One man tax items can not be allocated to tax exempt owners.')
		         RETURN 0
		      ENDIF
		   ENDIF
		ENDIF
		
	ENDPROC

	PROCEDURE txtcPurchaser.GotFocus
		ON KEY LABEL F2 _screen.activeform.cmdrevsrc.click()
		DODEFAULT()
	ENDPROC

	PROCEDURE txtcPurchaser.LostFocus
		ON KEY LABEL F2  *
		DODEFAULT()
	ENDPROC

	PROCEDURE txtcWellID.GotFocus
		ON KEY LABEL F2 _screen.activeform.cmdLookWell.Click()
		DODEFAULT()
	ENDPROC

	PROCEDURE txtcWellID.InteractiveChange
		IF DODEFAULT()
		   thisform.txtcwellname.set('value',wells.cwellname)
		   thisform.txtgroup.set('value',wells.cgroup)
		ENDIF
	ENDPROC

	PROCEDURE txtcWellID.LostFocus
		LOCAL lcWellID 
		ON KEY LABEL F2 *
		
		IF THIS.VALUE <> THISFORM.cwellsave
		   IF LASTKEY() <> -1 AND NOT MDOWN()
		      lcWellID = THIS.VALUE
		      THISFORM.SAVE()
		      SELECT wells
		      LOCATE FOR cwellid = lcWellID
		      THISFORM.GetRevenue()
		   ENDIF
		ENDIF
		
	ENDPROC

	PROCEDURE txtcWellID.When
		thisform.cwellsave = this.value
		DODEFAULT()
	ENDPROC

	PROCEDURE txtcWellName.When
		RETURN .F.
	ENDPROC

	PROCEDURE txtGroup.When
		DODEFAULT()
		RETURN .f.
	ENDPROC

	PROCEDURE txtnDaysOn.Valid
		IF DODEFAULT()
		   m.nDaysOn = this.Value
		   IF VARTYPE(m.nDaysOn) # 'N'
		      m.nDaysOn = INT(VAL(m.nDaysOn))
		   ENDIF
		   IF NOT BETWEEN(m.nDaysOn,0,365)
		      MESSAGEBOX('The Days On value must be between 0 and 365. Please correct.',64,'Invalid Days On')
		      RETURN 0
		   ENDIF
		ENDIF 
	ENDPROC

	PROCEDURE txtnPrice.LostFocus
		thisform.calctotalinc()
		DODEFAULT()
	ENDPROC

	PROCEDURE txtnTotalInc.Valid
		
		lcvalue = THISFORM.txtnprice.VALUE
		IF NOT 'TAX' $ THISFORM.cboSource.VALUE AND NOT INLIST(ALLTRIM(thisform.cbosource.Value),'COMP','GATH')
		   IF EMPTY(THISFORM.txtnprice.VALUE)
		      IF THISFORM.txtnUnits.VALUE > 0 AND THISFORM.txtnTotalInc.VALUE > 0
		         IF THISFORM.omessage.CONFIRM('Should the price be calculated?')
		            THISFORM.txtnprice.VALUE = ROUND(THISFORM.txtnTotalInc.VALUE/THISFORM.txtnUnits.VALUE,6)
		            THISFORM.txtnprice.REFRESH()
		         ENDIF
		         THISFORM.setnextcontrol(THISFORM.swPeriod)
		      ENDIF
		   ENDIF
		   IF EMPTY(THISFORM.txtnUnits.VALUE)
		      IF THISFORM.txtnprice.VALUE > 0 AND THISFORM.txtnTotalInc.VALUE > 0
		         IF THISFORM.omessage.CONFIRM('Should the units be calculated?')
		            THISFORM.txtnUnits.VALUE = ROUND(THISFORM.txtnTotalInc.VALUE/THISFORM.txtnprice.VALUE,2)
		            THISFORM.txtnUnits.REFRESH()
		         ENDIF
		         THISFORM.setnextcontrol(THISFORM.swPeriod)
		      ENDIF
		   ENDIF
		ELSE
		   IF 'TAX' $ THISFORM.cboSource.VALUE AND this.Value < 0
		      IF NOT thisform.omessage.confirm("Taxes don't have to be entered as a negative. You are entering this as a tax credit. Is that what you want to do?")
		         this.Value = ABS(this.Value)
		      ENDIF 
		   ENDIF    
		   IF INLIST(ALLTRIM(thisform.cbosource.Value),'COMP','GATH') AND this.Value < 0
		      IF NOT thisform.omessage.confirm("Compression/Gathering don't have to be entered as a negative. You are entering this as a credit. Is that what you want to do?")
		         this.Value = ABS(this.Value)
		      ENDIF 
		   ENDIF    
		ENDIF
		
		DODEFAULT()
	ENDPROC

	PROCEDURE txtTotalInc.When
		RETURN .F.
	ENDPROC

ENDDEFINE
