*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="dmdoicopy.scx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="1" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Cursor1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor5" UniqueID="" Timestamp="" />

	AutoOpenTables = .F.
	DataSource = .NULL.
	Height = 299
	Left = 40
	Name = "Dataenvironment"
	Top = 235
	Width = 520

	ADD OBJECT 'Cursor1' AS cursor WITH ;
		Alias = "wells", ;
		BufferModeOverride = 5, ;
		CursorSource = "wells", ;
		Database = ..\..\..\_gcwversion\dmie\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor1", ;
		Top = 20, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor2' AS cursor WITH ;
		Alias = "wellinv", ;
		BufferModeOverride = 5, ;
		CursorSource = "wellinv", ;
		Database = ..\..\..\_gcwversion\dmie\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 150, ;
		Name = "Cursor2", ;
		Top = 20, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor3' AS cursor WITH ;
		Alias = "wellinv1", ;
		CursorSource = "wellinv", ;
		Database = ..\..\..\_gcwversion\dmie\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 290, ;
		Name = "Cursor3", ;
		Top = 20, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor4' AS cursor WITH ;
		Alias = "doifile", ;
		BufferModeOverride = 5, ;
		CursorSource = "wellinv", ;
		Database = ..\..\..\_gcwversion\dmie\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor4", ;
		Top = 140, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor5' AS cursor WITH ;
		Alias = "doidecks", ;
		BufferModeOverride = 5, ;
		CursorSource = "doidecks", ;
		Database = ..\..\..\_gcwversion\dmie\newdbc\appdata.dbc, ;
		Height = 90, ;
		Left = 448, ;
		Name = "Cursor5", ;
		Top = 180, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

ENDDEFINE

DEFINE CLASS formdmdoicopy AS frmform OF "..\..\..\_gcwversion\dmie\common\cmforms.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Shpshapecustom2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Shpshapecustom1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdLookWellFrom" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcWellIDFrom" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcWellNameFrom" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdLookWellTo" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcWellIDTo" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcWellNameTo" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboInterestClassFrom" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboInterestClassTo" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdCopy" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdExit" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkAllWells" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboDeckFrom" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom6" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboDeckTo" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtEffstartyr" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblEffstartyr" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtEffstartprd" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblEffstartprd" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkSelectedTo" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblSelectedTo" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: copydoi		&& Perform the copy
		*m: recalcrev
	*</DefinedPropArrayMethod>

	AutoCenter = .T.
	Caption = "Copy Division of Interests"
	DoCreate = .T.
	Height = 452
	HelpContextID = 256
	Icon = ..\..\..\_gcwversion\dmie\graphics\sherwareicon.ico
	Name = "FormDmdoicopy"
	ShowTips = .T.
	Width = 721

	ADD OBJECT 'cboDeckFrom' AS cbocomboboxcustom WITH ;
		BoundColumn = 2, ;
		ControlSource = "", ;
		Left = 178, ;
		MaxLength = 10, ;
		Name = "cboDeckFrom", ;
		Style = 2, ;
		TabIndex = 6, ;
		Top = 120
		*< END OBJECT: ClassLib="..\..\..\codeminenew\ampro_rv\custom\ccontrol.vcx" BaseClass="combobox" />

	ADD OBJECT 'cboDeckTo' AS cbocomboboxcustom WITH ;
		BoundColumn = 1, ;
		ControlSource = "", ;
		Format = "!", ;
		Left = 178, ;
		MaxLength = 10, ;
		Name = "cboDeckTo", ;
		Style = 0, ;
		TabIndex = 14, ;
		Top = 296
		*< END OBJECT: ClassLib="..\..\..\codeminenew\ampro_rv\custom\ccontrol.vcx" BaseClass="combobox" />

	ADD OBJECT 'cboInterestClassFrom' AS cbocomboboxcustom WITH ;
		FontName = "Courier New", ;
		Height = 20, ;
		Left = 178, ;
		Name = "cboInterestClassFrom", ;
		TabIndex = 8, ;
		Top = 162, ;
		Width = 167, ;
		ZOrderSet = 9
		*< END OBJECT: ClassLib="..\..\..\_gcwversion\dmie\custom\ccontrol.vcx" BaseClass="combobox" />

	ADD OBJECT 'cboInterestClassTo' AS cbocomboboxcustom WITH ;
		FontName = "Courier New", ;
		Height = 20, ;
		Left = 178, ;
		Name = "cboInterestClassTo", ;
		TabIndex = 20, ;
		Top = 332, ;
		Width = 167, ;
		ZOrderSet = 11
		*< END OBJECT: ClassLib="..\..\..\_gcwversion\dmie\custom\ccontrol.vcx" BaseClass="combobox" />

	ADD OBJECT 'chkAllWells' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Copy Within All Wells", ;
		Left = 301, ;
		Name = "chkAllWells", ;
		TabIndex = 1, ;
		ToolTipText = "Copy an interest from one class in a well to another class in the same well. Do this for all wells.", ;
		Top = 15, ;
		Value = .F.
		*< END OBJECT: ClassLib="..\..\..\_gcwversion\dmie\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkSelectedTo' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Choose Selected Wells", ;
		Left = 192, ;
		Name = "chkSelectedTo", ;
		TabIndex = 3, ;
		Top = 232, ;
		Value = .F.
		*< END OBJECT: ClassLib="..\..\..\_gcwversion\dmie\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'cmdCopy' AS cmdcommandbuttoncustom WITH ;
		Caption = "\<Copy", ;
		Height = 45, ;
		Left = 252, ;
		Name = "cmdCopy", ;
		TabIndex = 22, ;
		Top = 387, ;
		Width = 95, ;
		ZOrderSet = 13
		*< END OBJECT: ClassLib="..\..\..\_gcwversion\dmie\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdExit' AS cmdcommandbuttoncustom WITH ;
		Cancel = .T., ;
		Caption = "E\<xit", ;
		Default = .F., ;
		Height = 45, ;
		Left = 368, ;
		Name = "cmdExit", ;
		TabIndex = 23, ;
		Top = 387, ;
		Width = 88, ;
		ZOrderSet = 14
		*< END OBJECT: ClassLib="..\..\..\_gcwversion\dmie\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdLookWellFrom' AS cmdcommandbuttoncustom WITH ;
		Caption = " Well ID", ;
		Height = 23, ;
		Left = 112, ;
		Name = "cmdLookWellFrom", ;
		TabIndex = 3, ;
		TabStop = .F., ;
		Top = 80, ;
		Width = 60, ;
		ZOrderSet = 3
		*< END OBJECT: ClassLib="..\..\..\_gcwversion\dmie\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdLookWellTo' AS cmdcommandbuttoncustom WITH ;
		Caption = " Well ID", ;
		Height = 23, ;
		Left = 112, ;
		Name = "cmdLookWellTo", ;
		TabIndex = 11, ;
		TabStop = .F., ;
		Top = 258, ;
		Width = 60, ;
		ZOrderSet = 6
		*< END OBJECT: ClassLib="..\..\..\_gcwversion\dmie\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'lblEffstartprd' AS lbllabelcustom WITH ;
		Caption = "Effective Start Period", ;
		Height = 16, ;
		Left = 456, ;
		Name = "lblEffstartprd", ;
		TabIndex = 19, ;
		Top = 301, ;
		Width = 104
		*< END OBJECT: ClassLib="..\..\..\_gcwversion\dmie\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblEffstartyr' AS lbllabelcustom WITH ;
		Caption = "Effective Start Year", ;
		Height = 16, ;
		Left = 303, ;
		Name = "lblEffstartyr", ;
		TabIndex = 18, ;
		Top = 301, ;
		Width = 98
		*< END OBJECT: ClassLib="..\..\..\_gcwversion\dmie\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom1' AS lbllabelcustom WITH ;
		BackStyle = 1, ;
		Caption = "Copy From Well", ;
		FontBold = .T., ;
		Left = 24, ;
		Name = "Lbllabelcustom1", ;
		TabIndex = 2, ;
		Top = 44, ;
		ZOrderSet = 2
		*< END OBJECT: ClassLib="..\..\..\_gcwversion\dmie\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom2' AS lbllabelcustom WITH ;
		Caption = "Interest Class To Copy From", ;
		Left = 34, ;
		Name = "Lbllabelcustom2", ;
		TabIndex = 9, ;
		Top = 164, ;
		ZOrderSet = 10
		*< END OBJECT: ClassLib="..\..\..\_gcwversion\dmie\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom3' AS lbllabelcustom WITH ;
		Caption = "Interest Class To Copy To", ;
		Left = 36, ;
		Name = "Lbllabelcustom3", ;
		TabIndex = 21, ;
		Top = 334, ;
		ZOrderSet = 12
		*< END OBJECT: ClassLib="..\..\..\_gcwversion\dmie\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom4' AS lbllabelcustom WITH ;
		BackStyle = 1, ;
		Caption = "Copy To Well", ;
		FontBold = .T., ;
		Left = 24, ;
		Name = "Lbllabelcustom4", ;
		TabIndex = 10, ;
		Top = 215
		*< END OBJECT: ClassLib="..\..\..\_gcwversion\dmie\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom5' AS lbllabelcustom WITH ;
		Caption = "Deck:", ;
		Left = 143, ;
		Name = "Lbllabelcustom5", ;
		TabIndex = 7, ;
		Top = 123
		*< END OBJECT: ClassLib="..\..\..\codeminenew\ampro_rv\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom6' AS lbllabelcustom WITH ;
		Caption = "Deck:", ;
		Left = 133, ;
		Name = "Lbllabelcustom6", ;
		TabIndex = 15, ;
		Top = 299
		*< END OBJECT: ClassLib="..\..\..\codeminenew\ampro_rv\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblSelectedTo' AS lbllabelcustom WITH ;
		Caption = "All IDs Selected", ;
		ForeColor = 0,0,255, ;
		Left = 360, ;
		Name = "lblSelectedTo", ;
		TabIndex = 17, ;
		Top = 232, ;
		Visible = .F.
		*< END OBJECT: ClassLib="..\..\..\_gcwversion\dmie\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Shpshapecustom1' AS shpshapecustom WITH ;
		Height = 155, ;
		Left = 12, ;
		Name = "Shpshapecustom1", ;
		Top = 49, ;
		Width = 696, ;
		ZOrderSet = 1
		*< END OBJECT: ClassLib="..\..\..\_gcwversion\dmie\custom\ccontrol.vcx" BaseClass="shape" />

	ADD OBJECT 'Shpshapecustom2' AS shpshapecustom WITH ;
		Height = 151, ;
		Left = 12, ;
		Name = "Shpshapecustom2", ;
		Top = 221, ;
		Width = 696, ;
		ZOrderSet = 0
		*< END OBJECT: ClassLib="..\..\..\_gcwversion\dmie\custom\ccontrol.vcx" BaseClass="shape" />

	ADD OBJECT 'txtcWellIDFrom' AS txtquickfill WITH ;
		clistexpression = cwellid, ;
		clistworkarea = wells, ;
		Height = 20, ;
		Left = 178, ;
		Name = "txtcWellIDFrom", ;
		TabIndex = 4, ;
		Top = 80, ;
		Width = 78, ;
		ZOrderSet = 4
		*< END OBJECT: ClassLib="..\..\..\_gcwversion\dmie\custom\cgadget.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcWellIDTo' AS txtquickfill WITH ;
		clistexpression = cwellid, ;
		clistworkarea = wells, ;
		Height = 20, ;
		Left = 178, ;
		Name = "txtcWellIDTo", ;
		TabIndex = 12, ;
		Top = 258, ;
		Width = 78, ;
		ZOrderSet = 7
		*< END OBJECT: ClassLib="..\..\..\_gcwversion\dmie\custom\cgadget.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcWellNameFrom' AS txttextboxcustom WITH ;
		BackColor = 212,208,200, ;
		Height = 20, ;
		Left = 264, ;
		Name = "txtcWellNameFrom", ;
		TabIndex = 5, ;
		Top = 80, ;
		Width = 252, ;
		ZOrderSet = 5
		*< END OBJECT: ClassLib="..\..\..\_gcwversion\dmie\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcWellNameTo' AS txttextboxcustom WITH ;
		BackColor = 212,208,200, ;
		Height = 20, ;
		Left = 266, ;
		Name = "txtcWellNameTo", ;
		TabIndex = 13, ;
		Top = 258, ;
		Width = 252, ;
		ZOrderSet = 8
		*< END OBJECT: ClassLib="..\..\..\_gcwversion\dmie\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtEffstartprd' AS txttextboxcustom WITH ;
		ControlSource = "doidecks.effstartprd", ;
		Height = 20, ;
		Left = 577, ;
		MaxLength = 2, ;
		Name = "txtEffstartprd", ;
		TabIndex = 17, ;
		Top = 299, ;
		Width = 24
		*< END OBJECT: ClassLib="..\..\..\_gcwversion\dmie\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtEffstartyr' AS txttextboxcustom WITH ;
		ControlSource = "doidecks.effstartyr", ;
		Height = 20, ;
		Left = 407, ;
		MaxLength = 4, ;
		Name = "txtEffstartyr", ;
		TabIndex = 16, ;
		Top = 299, ;
		Width = 36
		*< END OBJECT: ClassLib="..\..\..\_gcwversion\dmie\custom\ccontrol.vcx" BaseClass="textbox" />
	
	PROCEDURE copydoi		&& Perform the copy
		LOCAL lcClassFrom, lcClassTo, lcFrom, lcTo, lcWellFrom, lcWellTo, llAllWells, llReCalc, lnRecNo
		*:Global cidwinv, cwellid
		
		lcWellFrom  = THISFORM.txtcWellIDFrom.VALUE
		lcWellTo    = THISFORM.txtcWellIDTo.VALUE
		lcClassFrom = THISFORM.cboInterestClassFrom.VALUE
		lcClassTo   = THISFORM.cboInterestClassTo.VALUE
		llAllWells  = THISFORM.chkAllWells.VALUE
		lcDeckFrom  = THISFORM.cboDeckFrom.VALUE
		lcDeckTo    = THISFORM.cboDeckTo.DISPLAYVALUE
		lcEffStartYr = THISFORM.txteffstartyr.VALUE
		lcEffStartPrd = THISFORM.txteffstartprd.VALUE
		llSelected    = THISFORM.chkselectedTo.VALUE
		
		IF NOT llSelected
		   SELECT cwellid AS cid FROM wells WHERE cwellid = lcWellFrom INTO CURSOR SELECTEDTO
		ENDIF
		
		IF NOT llAllWells 
		   IF EMPTY(lcWellFrom)
		      MESSAGEBOX('You must specify a well from which to copy the DOI.', 16, 'Missing From Well')
		      RETURN
		   ENDIF
		
		   swselect('wellinv')
		   LOCATE FOR cwellid == lcWellFrom
		   IF NOT FOUND()
		      MESSAGEBOX('The FROM well does not have any interests to copy. Please choose another well.', 16, 'No DOI to Copy')
		      THISFORM.setnextcontrol(THISFORM.txtcWellIDFrom)
		      THISFORM.txtcWellIDFrom.SETFOCUS()
		      RETURN
		   ENDIF
		
		   IF EMPTY(lcWellTo) AND NOT llSelected
		      MESSAGEBOX('You must specify a well to copy the DOI to.', 16, 'Missing To Well')
		      RETURN
		   ENDIF
		ENDIF
		
		IF NOT THISFORM.oMessage.CONFIRM('Are you sure you want to copy the selected interests?')
		   RETURN
		ENDIF
		
		IF llAllWells
		   DO CASE
		      CASE lcClassFrom = 'All Interests'
		         THISFORM.oMessage.Warning('You cannot copy all interests when the option for all wells is chosen.  Please select a different class.')
		         RETURN
		      CASE lcClassFrom = 'Working Interest'
		         lcFrom = 'nworkint'
		      CASE lcClassFrom = 'Misc Revenue 1'
		         lcFrom = 'nrevmisc1'
		      CASE lcClassFrom = 'Misc Revenue 2'
		         lcFrom = 'nrevmisc2'
		      CASE lcClassFrom = 'Other Revenue'
		         lcFrom = 'nrevoth'
		      CASE lcClassFrom = 'Oil Taxes 1'
		         lcFrom = 'nrevtax1'
		      CASE lcClassFrom = 'Gas Taxes 1'
		         lcFrom = 'nrevtax2'
		      CASE lcClassFrom = 'Other Taxes 1'
		         lcFrom = 'nrevtax3'
		      CASE lcClassFrom = 'Oil Taxes 2'
		         lcFrom = 'nrevtax4'
		      CASE lcClassFrom = 'Gas Taxes 2'
		         lcFrom = 'nrevtax5'
		      CASE lcClassFrom = 'Other Taxes 2'
		         lcFrom = 'nrevtax6'
		      CASE lcClassFrom = 'Oil Taxes 3'
		         lcFrom = 'nrevtax7'
		      CASE lcClassFrom = 'Gas Taxes 3'
		         lcFrom = 'nrevtax8'
		      CASE lcClassFrom = 'Other Taxes 3'
		         lcFrom = 'nrevtax9'
		      CASE lcClassFrom = 'Oil Taxes 4'
		         lcFrom = 'nrevtax10'
		      CASE lcClassFrom = 'Gas Taxes 4'
		         lcFrom = 'nrevtax11'
		      CASE lcClassFrom = 'Other Taxes 4'
		         lcFrom = 'nrevtax12'
		      CASE lcClassFrom = 'Expense Class 1'
		         lcFrom = 'nintclass1'
		      CASE lcClassFrom = 'Expense Class 2'
		         lcFrom = 'nintclass2'
		      CASE lcClassFrom = 'Expense Class 3'
		         lcFrom = 'nintclass3'
		      CASE lcClassFrom = 'Expense Class 4'
		         lcFrom = 'nintclass4'
		      CASE lcClassFrom = 'Expense Class 5'
		         lcFrom = 'nintclass5'
		      CASE lcClassFrom = 'Oil Revenue'
		         lcFrom = 'nrevoil'
		      CASE lcClassFrom = 'Gas Revenue'
		         lcFrom = 'nrevgas'
		      CASE lcClassFrom = 'Trans Revenue'
		         lcFrom = 'nrevtrp'
		      CASE lcClassFrom = 'Before Casing Point'
		         lcFrom = 'nbcpint'
		      CASE lcClassFrom = 'After Casing Point'
		         lcFrom = 'nacpint'
		      CASE lcClassFrom = 'Plugging Pct'
		         lcFrom = 'nplugpct'
		   ENDCASE
		   DO CASE
		      CASE lcClassTo = 'Working Interest'
		         lcTo = 'nworkint'
		      CASE lcClassTo = 'Misc Revenue 1'
		         lcTo = 'nrevmisc1'
		      CASE lcClassTo = 'Misc Revenue 2'
		         lcTo = 'nrevmisc2'
		      CASE lcClassTo = 'Other Revenue'
		         lcTo = 'nrevoth'
		      CASE lcClassTo = 'Oil Taxes 1'
		         lcTo = 'nrevtax1'
		      CASE lcClassTo = 'Gas Taxes 1'
		         lcTo = 'nrevtax2'
		      CASE lcClassTo = 'Other Taxes 1'
		         lcTo = 'nrevtax3'
		      CASE lcClassTo = 'Oil Taxes 2'
		         lcTo = 'nrevtax4'
		      CASE lcClassTo = 'Gas Taxes 2'
		         lcTo = 'nrevtax5'
		      CASE lcClassTo = 'Other Taxes 2'
		         lcTo = 'nrevtax6'
		      CASE lcClassTo = 'Oil Taxes 3'
		         lcTo = 'nrevtax7'
		      CASE lcClassTo = 'Gas Taxes 3'
		         lcTo = 'nrevtax8'
		      CASE lcClassTo = 'Other Taxes 3'
		         lcTo = 'nrevtax9'
		      CASE lcClassTo = 'Oil Taxes 4'
		         lcTo = 'nrevtax10'
		      CASE lcClassTo = 'Gas Taxes 4'
		         lcTo = 'nrevtax11'
		      CASE lcClassTo = 'Other Taxes 4'
		         lcTo = 'nrevtax12'
		      CASE lcClassTo = 'Expense Class 1'
		         lcTo = 'nintclass1'
		      CASE lcClassTo = 'Expense Class 2'
		         lcTo = 'nintclass2'
		      CASE lcClassTo = 'Expense Class 3'
		         lcTo = 'nintclass3'
		      CASE lcClassTo = 'Expense Class 4'
		         lcTo = 'nintclass4'
		      CASE lcClassTo = 'Expense Class 5'
		         lcTo = 'nintclass5'
		      CASE lcClassTo = 'Oil Revenue'
		         lcTo = 'nrevoil'
		      CASE lcClassTo = 'Gas Revenue'
		         lcTo = 'nrevgas'
		      CASE lcClassTo = 'Trans Revenue'
		         lcTo = 'nrevtrp'
		      CASE lcClassTo = 'Before Casing Point'
		         lcTo = 'nbcpint'
		      CASE lcClassTo = 'After Casing Point'
		         lcTo = 'nacpint'
		      CASE lcClassTo = 'Plugging Pct'
		         lcTo = 'nplugpct'
		   ENDCASE
		
		   SELECT wells
		   SCAN
		      lcWellTo = cwellid
		      SELECT wellinv
		      REPLACE &lcTo WITH &lcFrom FOR cwellid = lcWellTo
		   ENDSCAN
		
		   IF lcClassTo = 'Working Interest'  &&  If copying to WI, ask them if they want to re-calc NRI percentages - BH 10/23/2006
		      SELECT wells
		      LOCATE FOR cwellid = lcWellTo
		      IF FOUND() AND NOT wells.lReCalc  &&  Only ask if the option isn't marked about not automatically re-calcing
		         IF THISFORM.oMessage.CONFIRM('Should the net revenue percentages be re-calculated for the working interest owners at this time?')
		            SELECT wellinv  &&  Make sure all changes are committed before doing any calcs on the table
		            = TABLEUPDATE(.T., .T.)
		            THISFORM.RecalcRev()
		         ENDIF
		      ENDIF
		   ENDIF
		
		   THISFORM.oMessage.DISPLAY('Finished Copying...')
		   SELECT wellinv
		   TABLEUPDATE(.T., .T.)
		
		ELSE
		
		   SELECT SELECTEDTO
		   SCAN
		      lcWellFrom = thisform.txtcWellIDFrom.Value 
		
		      IF llSelected
		         lcWellTo = cid
		      ENDIF
		      SELECT wellinv
		      SET ORDER TO 0
		      GO TOP
		      DO CASE
		         CASE (lcClassFrom = 'All Interests' AND lcClassTo <> 'All Interests') OR (lcClassFrom <> 'All Interests' AND lcClassTo = 'All Interests')
		            THISFORM.oMessage.Warning('You cannot choose to copy from All Interests without copying to All Interests, or vice versa.  Please correct.')
		         CASE lcWellFrom <> lcWellTo AND lcClassFrom = 'All Interests' AND lcClassTo = 'All Interests'
		            IF THISFORM.oMessage.CONFIRM('Please confirm that you want to copy all interests from ' + ;
		                  ALLTRIM(THISFORM.txtcWellNameFrom.VALUE) + ' to ' + ;
		                  ALLTRIM(THISFORM.txtcWellNameTo.VALUE) + '.  All existing interests will be replaced.')
		               SELECT wellinv
		               SCAN FOR cwellid = lcWellTo AND cDeck = lcDeckTo
		                  DELETE NEXT 1
		               ENDSCAN
		
		               SELECT wellinv1
		               GO TOP
		               SCAN FOR cwellid = lcWellFrom AND cDeck = ALLTRIM(lcDeckFrom)
		                  SCATTER MEMVAR
		                  m.cwellid = lcWellTo
		                  m.cDeck   = lcDeckTo
		
		                  * Create the deck record if it doesn't exist for this well
		                  swselect('doidecks')
		                  LOCATE FOR cwellid = m.cwellid AND cDeck = m.cDeck
		                  IF NOT FOUND()
		                     m.effstartyr = lcEffStartYr
		                     m.effstartprd = lcEffStartPrd
		                     INSERT INTO doidecks FROM MEMVAR
		                  ENDIF
		
		                  SELECT wellinv
		                  LOCATE FOR cwellid = m.cwellid AND cownerid = m.cownerid AND ctypeinv = m.ctypeinv AND cDeck = m.cDeck
		                  IF FOUND()
		                     REPLACE nrevgas WITH  m.nrevgas, ;
		                        nrevoil WITH  m.nrevoil, ;
		                        nrevmisc1 WITH   m.nrevmisc1, ;
		                        nrevmisc2 WITH   m.nrevmisc2, ;
		                        nintclass1 WITH   m.nintclass1, ;
		                        nintclass2 WITH   m.nintclass2, ;
		                        nintclass3 WITH   m.nintclass3, ;
		                        nintclass4 WITH   m.nintclass4, ;
		                        nintclass5 WITH   m.nintclass5, ;
		                        nACPInt WITH   m.nACPInt, ;
		                        nBCPInt WITH   m.nBCPInt, ;
		                        nworkint WITH   m.nworkint, ;
		                        nrevtax1 WITH   m.nrevtax1, ;
		                        nrevtax2 WITH   m.nrevtax2, ;
		                        nrevtax3 WITH   m.nrevtax3, ;
		                        nrevtax4 WITH   m.nrevtax4, ;
		                        nrevtax5 WITH   m.nrevtax5, ;
		                        nrevtax6 WITH   m.nrevtax6, ;
		                        nrevtax7 WITH   m.nrevtax7, ;
		                        nrevtax8 WITH   m.nrevtax8, ;
		                        nrevtax9 WITH   m.nrevtax9, ;
		                        nrevtax10 WITH   m.nrevtax10, ;
		                        nrevtax11 WITH   m.nrevtax11, ;
		                        nrevtax12 WITH   m.nrevtax12
		                  ELSE
		                     m.cidwinv = GetNextPK('DOI')
		                     INSERT INTO wellinv FROM MEMVAR
		                  ENDIF
		               ENDSCAN
		
		               SELECT wells
		               LOCATE FOR cwellid = lcWellFrom  &&  Copy the setting for whether to re-calc the revenue interests - BH 11/30/06
		               IF FOUND()  &&  It better be....
		                  llReCalc = lReCalc
		                  LOCATE FOR cwellid = lcWellTo
		                  IF FOUND()  &&  Again, it better be...
		                     REPLACE lReCalc WITH llReCalc
		                     = TABLEUPDATE(.T., .T.)
		                  ENDIF
		               ENDIF
		
		               THISFORM.oMessage.DISPLAY('Finished Copying...')
		               SELECT wellinv
		               TABLEUPDATE(.T., .T.)
		               SELECT doidecks
		               TABLEUPDATE(.T.,.T.)
		            ENDIF
		         CASE lcWellFrom = lcWellTo AND lcDeckFrom <> lcDeckTo
		            DO CASE
		               CASE lcClassFrom = 'All Interests'
		
		                  SELECT wellinv1
		                  SCAN FOR cwellid = lcWellFrom AND cDeck = lcDeckFrom
		                     SCATTER MEMVAR
		                     m.cidwinv = GetNextPK('DOI')
		                     m.cDeck   = lcDeckTo
		
		                     * Create the deck record if it doesn't exist for this well
		                     swselect('doidecks')
		                     LOCATE FOR cwellid = m.cwellid AND cDeck = m.cDeck
		                     IF NOT FOUND()
		                        m.effstartyr = lcEffStartYr
		                        m.effstartprd = lcEffStartPrd
		                        INSERT INTO doidecks FROM MEMVAR
		                     ENDIF
		
		                     SELECT wellinv
		                     LOCATE FOR cwellid = m.cwellid AND cownerid = m.cownerid AND ctypeinv = m.ctypeinv AND cDeck = m.cDeck
		                     IF FOUND()
		                        REPLACE nrevgas WITH  m.nrevgas, ;
		                           nrevoil WITH  m.nrevoil, ;
		                           nrevmisc1 WITH   m.nrevmisc1, ;
		                           nrevmisc2 WITH   m.nrevmisc2, ;
		                           nintclass1 WITH   m.nintclass1, ;
		                           nintclass2 WITH   m.nintclass2, ;
		                           nintclass3 WITH   m.nintclass3, ;
		                           nintclass4 WITH   m.nintclass4, ;
		                           nintclass5 WITH   m.nintclass5, ;
		                           nACPInt WITH   m.nACPInt, ;
		                           nBCPInt WITH   m.nBCPInt, ;
		                           nworkint WITH   m.nworkint, ;
		                           nrevtax1 WITH   m.nrevtax1, ;
		                           nrevtax2 WITH   m.nrevtax2, ;
		                           nrevtax3 WITH   m.nrevtax3, ;
		                           nrevtax4 WITH   m.nrevtax4, ;
		                           nrevtax5 WITH   m.nrevtax5, ;
		                           nrevtax6 WITH   m.nrevtax6, ;
		                           nrevtax7 WITH   m.nrevtax7, ;
		                           nrevtax8 WITH   m.nrevtax8, ;
		                           nrevtax9 WITH   m.nrevtax9, ;
		                           nrevtax10 WITH   m.nrevtax10, ;
		                           nrevtax11 WITH   m.nrevtax11, ;
		                           nrevtax12 WITH   m.nrevtax12
		                     ELSE
		                        INSERT INTO wellinv FROM MEMVAR
		                     ENDIF
		                  ENDSCAN
		                  THISFORM.oMessage.DISPLAY('Finished Copying...')
		                  SELECT wellinv
		                  TABLEUPDATE(.T., .T.)
		                  SELECT doidecks
		                  TABLEUPDATE(.T.,.T.)
		            ENDCASE
		         CASE lcWellFrom = lcWellTo AND lcDeckFrom = lcDeckTo
		            DO CASE
		               CASE lcClassFrom = 'Working Interest'
		                  lcFrom = 'nworkint'
		               CASE lcClassFrom = 'Misc Revenue 1'
		                  lcFrom = 'nrevmisc1'
		               CASE lcClassFrom = 'Misc Revenue 2'
		                  lcFrom = 'nrevmisc2'
		               CASE lcClassFrom = 'Other Revenue'
		                  lcFrom = 'nrevoth'
		               CASE lcClassFrom = 'Oil Taxes 1'
		                  lcFrom = 'nrevtax1'
		               CASE lcClassFrom = 'Gas Taxes 1'
		                  lcFrom = 'nrevtax2'
		               CASE lcClassFrom = 'Other Taxes 1'
		                  lcFrom = 'nrevtax3'
		               CASE lcClassFrom = 'Oil Taxes 2'
		                  lcFrom = 'nrevtax4'
		               CASE lcClassFrom = 'Gas Taxes 2'
		                  lcFrom = 'nrevtax5'
		               CASE lcClassFrom = 'Other Taxes 2'
		                  lcFrom = 'nrevtax6'
		               CASE lcClassFrom = 'Oil Taxes 3'
		                  lcFrom = 'nrevtax7'
		               CASE lcClassFrom = 'Gas Taxes 3'
		                  lcFrom = 'nrevtax8'
		               CASE lcClassFrom = 'Other Taxes 3'
		                  lcFrom = 'nrevtax9'
		               CASE lcClassFrom = 'Oil Taxes 4'
		                  lcFrom = 'nrevtax10'
		               CASE lcClassFrom = 'Gas Taxes 4'
		                  lcFrom = 'nrevtax11'
		               CASE lcClassFrom = 'Other Taxes 4'
		                  lcFrom = 'nrevtax12'
		               CASE lcClassFrom = 'Expense Class 1'
		                  lcFrom = 'nintclass1'
		               CASE lcClassFrom = 'Expense Class 2'
		                  lcFrom = 'nintclass2'
		               CASE lcClassFrom = 'Expense Class 3'
		                  lcFrom = 'nintclass3'
		               CASE lcClassFrom = 'Expense Class 4'
		                  lcFrom = 'nintclass4'
		               CASE lcClassFrom = 'Expense Class 5'
		                  lcFrom = 'nintclass5'
		               CASE lcClassFrom = 'Oil Revenue'
		                  lcFrom = 'nrevoil'
		               CASE lcClassFrom = 'Gas Revenue'
		                  lcFrom = 'nrevgas'
		               CASE lcClassFrom = 'Trans Revenue'
		                  lcFrom = 'nrevtrp'
		               CASE lcClassFrom = 'Before Casing Point'
		                  lcFrom = 'nbcpint'
		               CASE lcClassFrom = 'After Casing Point'
		                  lcFrom = 'nacpint'
		               CASE lcClassFrom = 'Plugging Pct'
		                  lcFrom = 'nplugpct'
		            ENDCASE
		            DO CASE
		               CASE lcClassTo = 'Working Interest'
		                  lcTo = 'nworkint'
		               CASE lcClassTo = 'Misc Revenue 1'
		                  lcTo = 'nrevmisc1'
		               CASE lcClassTo = 'Misc Revenue 2'
		                  lcTo = 'nrevmisc2'
		               CASE lcClassTo = 'Other Revenue'
		                  lcTo = 'nrevoth'
		               CASE lcClassTo = 'Oil Taxes 1'
		                  lcTo = 'nrevtax1'
		               CASE lcClassTo = 'Gas Taxes 1'
		                  lcTo = 'nrevtax2'
		               CASE lcClassTo = 'Other Taxes 1'
		                  lcTo = 'nrevtax3'
		               CASE lcClassTo = 'Oil Taxes 2'
		                  lcTo = 'nrevtax4'
		               CASE lcClassTo = 'Gas Taxes 2'
		                  lcTo = 'nrevtax5'
		               CASE lcClassTo = 'Other Taxes 2'
		                  lcTo = 'nrevtax6'
		               CASE lcClassTo = 'Oil Taxes 3'
		                  lcTo = 'nrevtax7'
		               CASE lcClassTo = 'Gas Taxes 3'
		                  lcTo = 'nrevtax8'
		               CASE lcClassTo = 'Other Taxes 3'
		                  lcTo = 'nrevtax9'
		               CASE lcClassTo = 'Oil Taxes 4'
		                  lcTo = 'nrevtax10'
		               CASE lcClassTo = 'Gas Taxes 4'
		                  lcTo = 'nrevtax11'
		               CASE lcClassTo = 'Other Taxes 4'
		                  lcTo = 'nrevtax12'
		               CASE lcClassTo = 'Expense Class 1'
		                  lcTo = 'nintclass1'
		               CASE lcClassTo = 'Expense Class 2'
		                  lcTo = 'nintclass2'
		               CASE lcClassTo = 'Expense Class 3'
		                  lcTo = 'nintclass3'
		               CASE lcClassTo = 'Expense Class 4'
		                  lcTo = 'nintclass4'
		               CASE lcClassTo = 'Expense Class 5'
		                  lcTo = 'nintclass5'
		               CASE lcClassTo = 'Oil Revenue'
		                  lcTo = 'nrevoil'
		               CASE lcClassTo = 'Gas Revenue'
		                  lcTo = 'nrevgas'
		               CASE lcClassTo = 'Trans Revenue'
		                  lcTo = 'nrevtrp'
		               CASE lcClassTo = 'Before Casing Point'
		                  lcTo = 'nbcpint'
		               CASE lcClassTo = 'After Casing Point'
		                  lcTo = 'nacpint'
		               CASE lcClassTo = 'Plugging Pct'
		                  lcTo = 'nplugpct'
		            ENDCASE
		
		            SELECT wellinv
		            REPLACE &lcTo WITH &lcFrom FOR cwellid = lcWellTo
		
		            IF lcClassTo = 'Working Interest'  &&  If copying to WI, ask them if they want to re-calc NRI percentages - BH 10/23/2006
		               SELECT wells
		               LOCATE FOR cwellid = lcWellTo
		               IF FOUND() AND NOT wells.lReCalc  &&  Only ask if the option isn't marked about not automatically re-calcing
		                  IF THISFORM.oMessage.CONFIRM('Should the net revenue percentages be re-calculated for the working interest owners at this time?')
		                     SELECT wellinv  &&  Make sure all changes are committed before doing any calcs on the table
		                     = TABLEUPDATE(.T., .T.)
		                     THISFORM.RecalcRev()
		                  ENDIF
		               ENDIF
		            ENDIF
		
		            THISFORM.oMessage.DISPLAY('Finished Copying...')
		            SELECT wellinv
		            = TABLEUPDATE(.T., .T.)
		
		         CASE lcWellFrom <> lcWellTo AND lcClassFrom <> 'All Interests'
		            THISFORM.oMessage.Warning('Interests other than ALL INTERESTS cannot be copied from one well to another.')
		      ENDCASE
		   ENDSCAN
		ENDIF
		
		
		
		
		
		
	ENDPROC

	PROCEDURE Init
		DODEFAULT()
		SELECT wells
		SET ORDER TO cWellID
		GO TOP
		thisform.txtcWellIDFrom.value = cWellID
		thisform.txtcWellNameFrom.value = cWellName
		thisform.txtcWellIDTo.value = cWellID
		thisform.txtcWellNameTo.value = cWellName
		
		thisform.oRegistry = FindGlobalObject('cmRegistry')
		
		if not used('wells')
		   use in wells
		endif
		if not used('wellinv')
		   use in wellinv
		endif
	ENDPROC

	PROCEDURE recalcrev
		LOCAL lnGasRev, lnOilRev, jnGasRev, jnOilRev, llTaxes
		
		llTaxes = .t.
		
		WAIT WIND NOWAIT 'Recalculating Revenue Interests...'
		SELECT cWellID, cownerid, nworkint, ctypeinv, cTypeInt, ;
		   000.00000000 AS noinc, 000.00000000 AS nginc, ;
		   lflat, nflatrate, cDirect, lprogram, cprogcode, cidwinv, ;
		   nrevgas, nrevoil, lJIB, lOnHold ;
		   FROM wellinv  ;
		   INTO CURSOR doiwrk ;
		   WHERE cWellID = THISFORM.txtcWellIDTo.VALUE ;
		   AND (nworkint >= 0 OR lflat) ;
		   ORDER BY ctypeinv, cprogcode, cownerid
		
		lnNumInv = _TALLY
		
		SELECT SUM(nrevgas) AS nGasPct, SUM(nrevoil) AS nOilPct ;
		   FROM wellinv ;
		   INTO CURSOR revwrk ;
		   WHERE cWellID = THISFORM.txtcWellIDTo.VALUE ;
		   AND INLIST(ctypeinv,'L','O')
		
		lnGasRev = nGasPct
		lnOilRev = nOilPct
		jnGasRev = nGasPct
		jnOilRev = nOilPct
		
		SELECT doifile
		SET ORDER TO cidinvwell
		
		SELECT doiwrk
		SCAN FOR NOT lprogram
		   SCATTER MEMVAR
		   IF m.ctypeinv = 'W'
		      if INLIST(m.cTypeInt,'B','G')
		         lnGas = ROUND(m.nworkint * (100-lnGasRev)/100,7)
		      ELSE
		         lnGas = 0
		      ENDIF   
		      if INLIST(m.cTypeInt,'B','O')
		         lnOil = ROUND(m.nworkint * (100-lnOilRev)/100,7)
		      else
		         lnOil = 0
		      endif   
		      jnGasRev = jnGasRev + lnGas
		      jnOilRev = jnOilRev + lnOil
		      lcKey = m.cidwinv + m.cownerid + m.cWellID
		      SELECT doifile
		      IF SEEK (lcKey)
		         IF nrevgas <> lnGas
		            REPLACE nrevgas WITH lnGas
		            IF llTaxes
		               REPL nRevTax2  WITH lnGas, ;
		                  nRevTax5  WITH lnGas, ;
		                  nRevTax8  WITH lnGas, ;
		                  nRevTax11 WITH lnGas
		            ENDIF
		         ENDIF
		         IF nrevoil <> lnOil
		            REPLACE nrevoil WITH lnOil
		            IF llTaxes
		               REPL nRevTax1  WITH lnOil, ;
		                  nRevTax4  WITH lnOil, ;
		                  nRevTax7  WITH lnOil, ;
		                  nRevTax10 WITH lnOil
		            ENDIF
		         ENDIF
		      ENDIF
		   ENDIF
		ENDSCAN
		*
		*  If the gas revenue percentages total over 100%, subtract the
		*  overage from the last owner in the well.
		*
		IF jnGasRev > 100
		   lnOver = jnGasRev - 100.0000000
		   lnGas  = lnGas - lnOver
		   SELECT doifile
		   IF SEEK(lcKey)
		      IF nrevgas <> lnGas
		         REPLACE nrevgas WITH lnGas
		         IF llTaxes
		            REPL nRevTax2  WITH lnGas, ;
		               nRevTax5  WITH lnGas, ;
		               nRevTax8  WITH lnGas, ;
		               nRevTax11 WITH lnGas
		         ENDIF
		      ENDIF
		   ENDIF
		ENDIF
		*
		*  If the gas revenue percentages are under 100%, add the
		*  amount to the last owner in the well.  This is only if
		*  the amount the total is under 100% is less than 1%.
		*
		IF jnGasRev < 100 AND jnGasRev > 99
		   lnOver = 100 - jnGasRev
		   lnGas  = lnGas + lnOver
		   SELECT doifile
		   IF SEEK(lcKey)
		      IF nrevgas <> lnGas
		         REPLACE nrevgas WITH lnGas
		         IF llTaxes
		            REPL nRevTax2  WITH lnGas, ;
		               nRevTax5  WITH lnGas, ;
		               nRevTax8  WITH lnGas, ;
		               nRevTax11 WITH lnGas
		         ENDIF
		      ENDIF
		   ENDIF
		ENDIF
		*
		*  If the oil revenue percentages total over 100%, subtract the
		*  overage from the last owner in the well.
		*
		IF jnOilRev > 100
		   lnOver = jnOilRev - 100.0000000
		   lnOil  = lnOil - lnOver
		   SELECT doifile
		   IF SEEK (lcKey)
		      IF nrevoil <> lnOil
		         REPLACE nrevoil WITH lnOil
		         IF llTaxes
		            REPL nRevTax1  WITH lnOil, ;
		               nRevTax4  WITH lnOil, ;
		               nRevTax7  WITH lnOil, ;
		               nRevTax10 WITH lnOil
		         ENDIF
		      ENDIF
		   ENDIF
		ENDIF
		*
		*  If the gas revenue percentages are under 100%, add the
		*  amount to the last owner in the well.  This is only if
		*  the amount the total is under 100% is less than 1%.
		*
		IF jnOilRev < 100 AND jnOilRev > 99
		   lnOver = 100 - jnOilRev
		   lnOil  = lnOil + lnOver
		   SELECT doifile
		   IF SEEK (lcKey)
		      IF nrevoil <> lnOil
		         REPLACE nrevoil WITH lnOil
		         IF llTaxes
		            REPL nRevTax1  WITH lnOil, ;
		               nRevTax4  WITH lnOil, ;
		               nRevTax7  WITH lnOil, ;
		               nRevTax10 WITH lnOil
		         ENDIF
		      ENDIF
		   ENDIF
		ENDIF
		
		*  Update landowner and override pcts in the well record
		SELECT wells
		IF nOilInt <> lnOilRev
		   REPL nOilInt WITH lnOilRev
		ENDIF
		IF nGasInt <> lnGasRev
		   REPL nGasInt WITH lnGasRev
		ENDIF
		
		SELE doifile
		=TABLEUPDATE(.T.,.T.)
		
		SELE wells
		=TABLEUPDATE(.T.,.T.)
		
		WAIT CLEAR
	ENDPROC

	PROCEDURE cboDeckFrom.Init
		IF DODEFAULT()
		   this.Requery()
		ENDIF    
	ENDPROC

	PROCEDURE cboDeckFrom.Requery
		LPARAMETERS lcDeck
		
		IF DODEFAULT()
			THIS.CLEAR()
		
		    IF VARTYPE(lcDeck) # 'C'
		       lcDeck = this.Value
		    ENDIF 
		    
		    lcWellID = thisform.txtcWellIDFrom.value
		    lnIndex = 1
		    
			SELECT cdeck, ldefault FROM doidecks ;
				INTO CURSOR temp ;
				WHERE cwellid = lcwellid ;
				ORDER BY cdeck DESC  ;
				GROUP BY cdeck
		
			lnx = 1
			IF _TALLY > 0
				SELECT temp
				SCAN
					SCATTER MEMVAR
					IF EMPTY(m.cdeck)
					   m.cdeck = '(blank)'
					ENDIF 
					THIS.ADDLISTITEM(m.cdeck,lnx,1)
					THIS.ADDLISTITEM(m.cdeck,lnx,2)
					IF m.cDeck = lcDeck
					   lnIndex = lnx
					ENDIF 
					lnx = lnx + 1 
				ENDSCAN
			    this.ListItemId = lnIndex
			ELSE 		
			    this.ListItemId = 1
			ENDIF
		ENDIF
		
	ENDPROC

	PROCEDURE cboDeckFrom.Valid
		lcDeck = this.Value
		SELECT cwellid FROM doidecks WHERE cdeck = lcDeck INTO CURSOR doiwells READWRITE ORDER BY cwellid
		INDEX on cwellid TAG cwellid
		
		RETURN .t.
	ENDPROC

	PROCEDURE cboDeckTo.Init
		IF DODEFAULT()
		   this.Requery()
		ENDIF    
	ENDPROC

	PROCEDURE cboDeckTo.Requery
		LPARAMETERS lcDeck
		
		IF DODEFAULT()
			THIS.CLEAR()
		
		    IF VARTYPE(lcDeck) # 'C'
		       lcDeck = this.Value
		    ENDIF 
		       
		    lcWellID = thisform.txtcWellIDTo.value
		    lnIndex = 1
		    
			SELECT cdeck, ldefault FROM doidecks ;
				INTO CURSOR temp ;
				WHERE cwellid = lcwellid ;
				ORDER BY cdeck DESC  ;
				GROUP BY cdeck
		
			lnx = 1
			IF _TALLY > 0
				SELECT temp
				SCAN
					SCATTER MEMVAR
					IF EMPTY(m.cdeck)
					   m.cdeck = '(blank)'
					ENDIF 
					THIS.ADDLISTITEM(m.cdeck,lnx,1)
					THIS.ADDLISTITEM(m.cdeck,lnx,2)
					IF m.cDeck = lcDeck
					   lnIndex = lnx
					ENDIF 
					lnx = lnx + 1 
				ENDSCAN
			    this.ListItemId = lnIndex
			ELSE 		
			    this.ListItemId = 1
			ENDIF
		ENDIF
		
	ENDPROC

	PROCEDURE cboDeckTo.Valid
		lcDeck = this.Value
		SELECT cwellid FROM doidecks WHERE cdeck = lcDeck INTO CURSOR doiwells READWRITE ORDER BY cwellid
		INDEX on cwellid TAG cwellid
		
		RETURN .t.
	ENDPROC

	PROCEDURE cboInterestClassFrom.Init
		*
		*  Initialize the interest classes available
		*
		THIS.ADDLISTITEM('All Interests',1)
		
		THIS.ADDLISTITEM('Working Interest',2)
		
		THIS.ADDLISTITEM('Oil Revenue',3)
		
		THIS.ADDLISTITEM('Gas Revenue',4)
		
		THIS.ADDLISTITEM('Trans Revenue',5)
		
		THIS.ADDLISTITEM('Misc Revenue 1',6)
		
		THIS.ADDLISTITEM('Misc Revenue 2',7)
		
		THIS.ADDLISTITEM('Other Revenue',8)
		
		THIS.ADDLISTITEM('Before Casing Point',9)
		
		THIS.ADDLISTITEM('After Casing Point',10)
		
		THIS.ADDLISTITEM('Expense Class 1',11)
		
		THIS.ADDLISTITEM('Expense Class 2',12)
		
		THIS.ADDLISTITEM('Expense Class 3',13)
		
		THIS.ADDLISTITEM('Expense Class 4',14)
		
		THIS.ADDLISTITEM('Expense Class 5',15)
		
		THIS.ADDLISTITEM('Oil Taxes 1',16)
		
		THIS.ADDLISTITEM('Gas Taxes 1',17)
		
		THIS.ADDLISTITEM('Other Taxes 1',18)
		
		THIS.ADDLISTITEM('Oil Taxes 2',19)
		
		THIS.ADDLISTITEM('Gas Taxes 2',20)
		
		THIS.ADDLISTITEM('Other Taxes 2',21)
		
		THIS.ADDLISTITEM('Oil Taxes 3',22)
		
		THIS.ADDLISTITEM('Gas Taxes 3',23)
		
		THIS.ADDLISTITEM('Other Taxes 3',24)
		
		THIS.ADDLISTITEM('Oil Taxes 4',25)
		
		THIS.ADDLISTITEM('Gas Taxes 4',26)
		
		THIS.ADDLISTITEM('Other Taxes 4',27)
		
		THIS.ADDLISTITEM('Plugging Pct',28)
		
		THIS.LISTITEMID = 1
		
		DODEFAULT()
	ENDPROC

	PROCEDURE cboInterestClassTo.Init
		*
		*  Initialize the interest classes available
		*
		THIS.ADDLISTITEM('All Interests',1)
		
		THIS.ADDLISTITEM('Working Interest',2)
		
		THIS.ADDLISTITEM('Oil Revenue',3)
		
		THIS.ADDLISTITEM('Gas Revenue',4)
		
		THIS.ADDLISTITEM('Trans Revenue',5)
		
		THIS.ADDLISTITEM('Misc Revenue 1',6)
		
		THIS.ADDLISTITEM('Misc Revenue 2',7)
		
		THIS.ADDLISTITEM('Other Revenue',8)
		
		THIS.ADDLISTITEM('Before Casing Point',9)
		
		THIS.ADDLISTITEM('After Casing Point',10)
		
		THIS.ADDLISTITEM('Expense Class 1',11)
		
		THIS.ADDLISTITEM('Expense Class 2',12)
		
		THIS.ADDLISTITEM('Expense Class 3',13)
		
		THIS.ADDLISTITEM('Expense Class 4',14)
		
		THIS.ADDLISTITEM('Expense Class 5',15)
		
		THIS.ADDLISTITEM('Oil Taxes 1',16)
		
		THIS.ADDLISTITEM('Gas Taxes 1',17)
		
		THIS.ADDLISTITEM('Other Taxes 1',18)
		
		THIS.ADDLISTITEM('Oil Taxes 2',19)
		
		THIS.ADDLISTITEM('Gas Taxes 2',20)
		
		THIS.ADDLISTITEM('Other Taxes 2',21)
		
		THIS.ADDLISTITEM('Oil Taxes 3',22)
		
		THIS.ADDLISTITEM('Gas Taxes 3',23)
		
		THIS.ADDLISTITEM('Other Taxes 3',24)
		
		THIS.ADDLISTITEM('Oil Taxes 4',25)
		
		THIS.ADDLISTITEM('Gas Taxes 4',26)
		
		THIS.ADDLISTITEM('Other Taxes 4',27)
		
		THIS.ADDLISTITEM('Plugging Pct',28)
		
		THIS.LISTITEMID = 1
		
		DODEFAULT()
	ENDPROC

	PROCEDURE chkAllWells.Click
		IF THIS.VALUE
		   THISFORM.cmdLookWellFrom.ENABLED = .F.
		   THISFORM.txtcwellIDFrom.ENABLED  = .F.
		   THISFORM.cmdlookWellTo.ENABLED   = .F.
		   THISFORM.txtcWellIDTo.ENABLED    = .F.
		   thisform.txtcwellIDFrom.Value    = ''
		   thisform.txtcWellIDTo.Value      = ''
		ELSE
		   THISFORM.cmdLookWellFrom.ENABLED = .T.
		   THISFORM.txtcwellIDFrom.ENABLED  = .T.
		   THISFORM.cmdlookWellTo.ENABLED   = .T.
		   THISFORM.txtcWellIDTo.ENABLED    = .T.
		ENDIF
	ENDPROC

	PROCEDURE chkSelectedTo.Click
		IF this.Value
		   DO FORM commonsource\selected-ids WITH 'WELL','SelectedTo' LINKED 
		   lnCount = RECCOUNT('selectedto')
		   thisform.lblselectedTo.Caption = TRANSFORM(lnCount) + ' Wells Selected'
		   thisform.lblselectedTo.Visible = .T.
		   thisform.txtcWellIDTo.Visible = .F.
		   thisform.txtcWellNameTo.visible = .F.
		   thisform.txtcwellIDTo.Visible = .F.
		   thisform.txtcWellNameTo.Visible = .f. 
		*   thisform.cmdlOOKWELLFROM.Visible = .f.
		   thisform.cmdlOOKWELLTO.Visible = .f.
		ELSE
		   thisform.lblselectedTo.Visible = .F.
		    thisform.txtcWellIDFrom.Visible = .t.
		   thisform.txtcWellNameFrom.visible = .t.
		   thisform.txtcwellIDTo.Visible = .t.
		   thisform.txtcWellNameTo.Visible = .t. 
		   thisform.cmdlOOKWELLFROM.Visible = .t.
		   thisform.cmdlOOKWELLTO.Visible = .t.
		ENDIF 
	ENDPROC

	PROCEDURE cmdCopy.Click
		thisform.copydoi()
	ENDPROC

	PROCEDURE cmdExit.Click
		thisform.release()
	ENDPROC

	PROCEDURE cmdLookWellFrom.Click
		LOCAL lcList
		PRIV llOK
		
		llOK   = .T.
		lcList = 'cwellid,cwellname,cgroup,cwellstat'
		
		DO FORM ..\custom\picklist WITH 'Wells', lcList, thisform.txtcwellidfrom.value, 4
		
		IF llOK
		   thisform.txtcWellIDFrom.value = wells.cwellid
		   thisform.txtcWellNameFrom.value = wells.cWellName
		   thisform.refresh()
		ENDIF   
		
		THISFORM.setnextcontrol(thisform.txtcWellIDFrom)
	ENDPROC

	PROCEDURE cmdLookWellTo.Click
		LOCAL lcList
		PRIV llOK
		
		llOK   = .T.
		lcList = 'cwellid,cwellname,cgroup,cwellstat'
		
		DO FORM ..\custom\picklist WITH 'Wells', lcList, thisform.txtcwellidto.value, 4
		
		IF llOK
		   thisform.txtcWellIDTo.value = wells.cwellid
		   thisform.txtcWellNameTo.value = wells.cWellName
		   thisform.refresh()
		ENDIF   
		
		THISFORM.setnextcontrol(thisform.txtcWellIDTo)
	ENDPROC

	PROCEDURE txtcWellIDFrom.GotFocus
		ON KEY LABEL F2 _SCREEN.ACTIVEFORM.cmdLookWellFrom.CLICK()
		
		DODEFAULT()
		
	ENDPROC

	PROCEDURE txtcWellIDFrom.InteractiveChange
		IF DODEFAULT()
		   SELECT wells
		   LOCATE FOR cwellid == this.Value
		   IF FOUND()
		      thisform.txtcWellNameFrom.set('value',wells.cwellname)
		   ELSE
		      thisform.txtcWellNameFrom.set('value','')
		   ENDIF 
		ENDIF    
	ENDPROC

	PROCEDURE txtcWellIDFrom.LostFocus
		ON KEY LABEL F2 *
		thisform.cboDeckFrom.Requery()
		DODEFAULT()
	ENDPROC

	PROCEDURE txtcWellIDTo.GotFocus
		ON KEY LABEL F2 _SCREEN.ACTIVEFORM.cmdLookWellTo.CLICK()
		
		DODEFAULT()
		
	ENDPROC

	PROCEDURE txtcWellIDTo.InteractiveChange
		IF DODEFAULT()
		   SELECT wells
		   LOCATE FOR cwellid == this.Value
		   IF FOUND()
		      thisform.txtcWellNameTo.set('value',wells.cwellname)
		   ELSE
		      thisform.txtcWellNameTo.set('value','')
		   ENDIF 
		ENDIF    
	ENDPROC

	PROCEDURE txtcWellIDTo.LostFocus
		ON KEY LABEL F2 *
		thisform.cboDeckTo.Requery()
		DODEFAULT()
	ENDPROC

	PROCEDURE txtcWellNameFrom.When
		RETURN .F.
	ENDPROC

	PROCEDURE txtcWellNameTo.When
		RETURN .F.
	ENDPROC

	PROCEDURE txtEffstartprd.Valid
		IF DODEFAULT()
		   this.set('value',PADL(ALLTRIM(this.Value),2,'0'))
		   lnvalue = INT(VAL(this.Value))
		   IF NOT BETWEEN(lnValue,1,12)
		      MESSAGEBOX('The effective production period is invalid. Please enter a period between 01 and 12',16,'DOI Decks')
		      RETURN 0
		   ENDIF 
		ENDIF 
	ENDPROC

	PROCEDURE txtEffstartyr.Valid
		IF DODEFAULT()
		   IF NOT BETWEEN(this.Value,'2010','2030')
		      MESSAGEBOX('The effective year is invalid. Please enter a valid year.',16,'DOI Decks')
		      RETURN 0
		   ENDIF
		ENDIF 
	ENDPROC

ENDDEFINE
