*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="ten99submission.scx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="2" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Cursor1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor3" UniqueID="" Timestamp="" />

	AutoOpenTables = .F.
	DataSource = .NULL.
	Height = 200
	Left = 1
	Name = "Dataenvironment"
	Top = 220
	Width = 520

	ADD OBJECT 'Cursor1' AS cursor WITH ;
		Alias = "tax1099", ;
		CursorSource = "tax1099", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor1", ;
		Top = 20, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor2' AS cursor WITH ;
		Alias = "investor", ;
		CursorSource = "investor", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 150, ;
		Name = "Cursor2", ;
		Top = 20, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor3' AS cursor WITH ;
		Alias = "tax1099corrections", ;
		CursorSource = "tax1099corrections", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 290, ;
		Name = "Cursor3", ;
		Top = 20, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

ENDDEFINE

DEFINE CLASS frmten99submission AS frmdatamanagerformcustom OF "..\custom\cforms.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Lbltextcustom1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbltextcustom2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbltextcustom3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcYear" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdUpload" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdExit" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblHyperlink" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkCorrected" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkNonEmp" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkAllBut" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbltextcustom4" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: backup
		*m: builddata		&& Builds the XML file
		*m: getdlls
		*m: getproxy
		*m: isforeignaddress
		*m: sendtonelco		&& Sends the Soap request to Nelco
		*p: cstate
		*p: currentyear
	*</DefinedPropArrayMethod>

	BackColor = 255,255,255
	Caption = "SherWare 1099 Web Reporting/Submission"
	cstate = AL MO AK MT AZ NE AR NV CA NH CO NJ CT NM DE NY DC NC FL ND GA OH HI OK ID OR IL PA IN RI IA SC KS SD KY TN LA TX ME UT MD VT MA VA MI WA MN WV MS WI WY
	currentyear = 2021
	DoCreate = .T.
	Height = 508
	lnonewask = .T.
	Name = "frmTen99Submission"
	Width = 707
	_memberdata = <VFPData>
		<memberdata name="builddata" display="BuildData"/>
		<memberdata name="sendtonelco" display="SendToNelco"/>
		<memberdata name="backup" display="Backup"/>
		<memberdata name="getproxy" display="GetProxy"/>
		</VFPData>
	cmdatamanager.Name = "cmdatamanager"
	cmdatamanager.TabIndex = 2
	cmlookupmanager.Name = "cmlookupmanager"
	Mwresize1.lblHighLight.Name = "lblHighLight"
	Mwresize1.lblShading.Name = "lblShading"
	Mwresize1.Left = 744
	Mwresize1.Name = "Mwresize1"
	Mwresize1.TabIndex = 1
	Mwresize1.Top = 564

	ADD OBJECT 'chkAllBut' AS checkbox WITH ;
		Alignment = 0, ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "Submit All But Non-Employee Compensation 1099s", ;
		FontSize = 12, ;
		Height = 21, ;
		Left = 240, ;
		Name = "chkAllBut", ;
		TabIndex = 11, ;
		Top = 344, ;
		Value = .F., ;
		Width = 377
		*< END OBJECT: BaseClass="checkbox" />

	ADD OBJECT 'chkCorrected' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Submit Only Corrected Returns", ;
		FontSize = 12, ;
		Left = 242, ;
		Name = "chkCorrected", ;
		TabIndex = 12, ;
		Top = 380, ;
		Value = .F.
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkNonEmp' AS checkbox WITH ;
		Alignment = 0, ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "Submit Only Non-Employee Compensation 1099s", ;
		FontSize = 12, ;
		Height = 21, ;
		Left = 240, ;
		Name = "chkNonEmp", ;
		TabIndex = 10, ;
		Top = 308, ;
		Value = .F., ;
		Width = 363
		*< END OBJECT: BaseClass="checkbox" />

	ADD OBJECT 'cmdExit' AS cmdcommandbuttoncustom WITH ;
		Caption = "E\<xit", ;
		FontSize = 12, ;
		Height = 36, ;
		Left = 348, ;
		Name = "cmdExit", ;
		TabIndex = 14, ;
		Top = 453, ;
		Width = 96
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdUpload' AS cmdcommandbuttoncustom WITH ;
		Caption = "\<Upload", ;
		FontSize = 12, ;
		Height = 36, ;
		Left = 228, ;
		Name = "cmdUpload", ;
		TabIndex = 13, ;
		Top = 453, ;
		Width = 96
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'lblHyperlink' AS lbllabelcustom WITH ;
		Caption = "MORE INFORMATION", ;
		FontBold = .T., ;
		FontSize = 11, ;
		FontUnderline = .T., ;
		ForeColor = 0,0,255, ;
		Left = 281, ;
		Name = "lblHyperlink", ;
		TabIndex = 8, ;
		Top = 65
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom2' AS lbllabelcustom WITH ;
		Caption = "Accounting Year:", ;
		FontSize = 12, ;
		Height = 21, ;
		Left = 241, ;
		Name = "Lbllabelcustom2", ;
		TabIndex = 5, ;
		Top = 257, ;
		Width = 119, ;
		ZOrderSet = 11
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbltextcustom1' AS lbltextcustom WITH ;
		AutoSize = .F., ;
		Caption = "This is an optional process that will submit your 1099s electronically using a 3rd party service", ;
		FontSize = 12, ;
		Height = 48, ;
		Left = 96, ;
		Name = "Lbltextcustom1", ;
		TabIndex = 4, ;
		Top = 19, ;
		Width = 528, ;
		WordWrap = .T.
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbltextcustom2' AS lbltextcustom WITH ;
		Caption = "The cost estimates can be seen with the above link. Your exact pricing can be seen after uploading your files.", ;
		FontSize = 12, ;
		Height = 38, ;
		Left = 96, ;
		Name = "Lbltextcustom2", ;
		TabIndex = 6, ;
		Top = 105, ;
		Width = 482, ;
		WordWrap = .T.
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbltextcustom3' AS lbltextcustom WITH ;
		Caption = "**The deadline to submit 1099 Misc forms to the IRS is March 31st", ;
		FontBold = .T., ;
		FontSize = 12, ;
		ForeColor = 255,0,0, ;
		Height = 22, ;
		Left = 96, ;
		Name = "Lbltextcustom3", ;
		TabIndex = 7, ;
		Top = 165, ;
		Width = 494, ;
		WordWrap = .T.
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbltextcustom4' AS lbltextcustom WITH ;
		Caption = "**The deadline to submit 1099 NEC forms to the IRS is January 31st", ;
		FontBold = .T., ;
		FontSize = 12, ;
		ForeColor = 255,0,0, ;
		Height = 22, ;
		Left = 96, ;
		Name = "Lbltextcustom4", ;
		TabIndex = 7, ;
		Top = 198, ;
		Width = 509, ;
		WordWrap = .T.
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'txtcYear' AS swyear WITH ;
		FontSize = 12, ;
		Height = 24, ;
		Left = 361, ;
		lnoinit = .T., ;
		Name = "txtcYear", ;
		TabIndex = 3, ;
		Top = 255, ;
		Width = 68, ;
		ZOrderSet = 6
		*< END OBJECT: ClassLib="..\custom\swcontrol.vcx" BaseClass="textbox" />
	
	PROCEDURE backup
		LOCAL lcNameCtl, lcPhone, lcState, lcTIN, lcXML, lcaddr1, lcaddr2, lccity, lcemail, lcproducer
		LOCAL lczip, llReturn, lnPayee, loError
		LOCAL cStateNameOne, cStateNameTwo, cTINType, cemail, cname, cname2, ctaxid, ctaxstate1
		LOCAL ctaxstate2, nStateIncome, tcYear
		
		llReturn = .T.
		lcXML = ''
		
		TRY
		    tcYear = THISFORM.txtcYear.VALUE
		
		    IF NOT check_1099_errors(tcYear, .T.)
		        llReturn = .F.
		        EXIT
		    ENDIF
		
		    IF FILE('datafiles\misc1099.xml')
		        ERASE ('datafiles\misc1099.xml')
		    ENDIF
		
		    IF NOT USED(m.goapp.ccommonfolder + 'compmast')
		        USE (m.goapp.ccommonfolder + 'compmast') IN 0
		    ENDIF
		
		    SELECT compmast
		    SET ORDER TO cidcomp
		    SEEK(m.goapp.cidcomp)
		
		    lcproducer = ALLTRIM(STRTRAN(compmast.cproducer, '&', '&amp;'))
		    lcaddr1    = ALLTRIM(STRTRAN(compmast.caddress1, '&', '&amp;'))
		    lcaddr2    = ALLTRIM(STRTRAN(compmast.caddress2, '&', '&amp;'))
		    lccity     = ALLTRIM(STRTRAN(compmast.ccity, '&', '&amp;'))
		    lcState    = ALLTRIM(compmast.cstate)
		    lczip      = ALLTRIM(compmast.czipcode)
		    lcTIN      = ALLTRIM(STRTRAN(compmast.ctaxid, '-', ''))
		    lcPhone    = ALLTRIM(STRTRAN(compmast.cphoneno, '-', ''))
		    lcPhone    = ALLTRIM(STRTRAN(lcPhone,'(',''))
		    lcPhone    = ALLTRIM(STRTRAN(lcPhone,')',''))
		    lcPhone    = ALLTRIM(STRTRAN(lcPhone,' ',''))
		    lcemail    = ALLTRIM(compmast.cemail)
		    lcNameCtl  = ALLTRIM(UPPER(LEFT(lcproducer, 4)))
		
		    lnPayee        = 0
		    m.nStateIncome = 0
		    USE IN COMPMAST
		    
		    TEXT TO lcXML NOSHOW TEXTMERGE PRETEXT 3
		<?xml version="1.0" encoding="utf-8"?>
		<!-- edited with XMLSPY v5 rel. 3 U (http://www.xmlspy.com) by Jason O'Leary (Greatland Corporation) -->
		<gwx:DataPacket Version="2.0" xmlns:gwx="http://www.greatland.com/Schemas/GWX/1.0/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.greatland.com/Schemas/GWX/1.0/
		C:\_Dev\WageFiler\Dev\Shared\GWXml\WageFiler\WageFiler1099s.xsd">
		<Payer PayerId="0">
		    <TIN><<lcTIN>></TIN>
		    <TypeOfTIN>E</TypeOfTIN>
		    <PayerNameControl><<lcNameCtl>></PayerNameControl>
		    <PayerCompany>
		        <Name1><<lcproducer>></Name1>
		        <TradeName><<lcproducer>></TradeName>
		        <Addr1><<lcaddr1>></Addr1>
		        <City><<lcCity>></City>
		        <USState><<lcState>></USState>
		        <USZipCode><<lcZip>></USZipCode>
		        <EmailAddress><<lcEmail>></EmailAddress>
		        <Phone><<lcPhone>></Phone>
		   </PayerCompany> 
		    ENDTEXT
		
		    SELECT tax1099
		    SCAN FOR cYear = tcYear
		        SCATTER MEMVAR
		        IF NOT EMPTY(ctaxstate1) 
		            REPLACE ctaxstate1 WITH ''
		            m.ctaxstate1 = ''
		        ENDIF
		        IF NOT EMPTY(ctaxstate2) 
		            REPLACE ctaxstate2 WITH ''
		            m.ctaxstate2 = ''
		        ENDIF
		        m.cemail = ''
		        swselect('investor')
		        SET ORDER TO cownerid
		        IF SEEK(m.cID)
		            IF NOT EMPTY(cemail)
		                m.cemail = ALLTRIM(cemail)
		            ENDIF
		            IF itaxidtype = 1
		                m.cTINType = 'E'
		            ELSE
		                m.cTINType = 'S'
		            ENDIF
		        ELSE
		            m.cTINType = 'S'
		            m.cemail   = ''
		        ENDIF
		        IF NOT EMPTY(m.ctaxstate1)
		            m.cStateNameOne = m.ctaxstate1
		        ELSE
		            m.cStateNameOne = ''
		        ENDIF
		        IF NOT EMPTY(m.ctaxstate2)
		            m.cStateNameTwo = m.ctaxstate2
		        ELSE
		            m.cStateNameTwo = ''
		        ENDIF
		        m.cname  = STRTRAN(m.cname, '&', '&amp;')
		        m.cname  = STRTRAN(m.cname, "'", "")
		        m.cname  = STRTRAN(m.cname, ".", "")
		        m.cname2 = STRTRAN(m.cname2, '&', '&amp;')
		        m.cname2 = STRTRAN(m.cname2, "'", "")
		        m.cname2 = STRTRAN(m.cname2, ".", "")
		        m.ctaxid = ALLTRIM(STRTRAN(m.ctaxid, '-', ''))
		        TEXT TO lcXML ADDITIVE TEXTMERGE NOSHOW PRETEXT 3
		      <Payee PayeeId="<<transform(lnPayee)>>">
		          <TIN><<STRTRAN(m.ctaxid,'-','')>></TIN>
		          <TypeOfTIN><<m.cTINType>></TypeOfTIN>
		          <PayeeNameControl><<UPPER(LEFT(ALLTRIM(STRTRAN(STRTRAN(m.cname,'&amp;',''),' ','')),4))>></PayeeNameControl>
		          <AssociationName><<ALLTRIM(m.cName)>></AssociationName>
		        ENDTEXT
		
		        IF NOT EMPTY(m.cname2)
		            lcXML = lcXML + CHR(10) + "<NameLine2>" + ALLTRIM(m.cname2) + "</NameLine2>"
		        ENDIF
		
		        lcXML = lcXML + CHR(10) + "<Addr1>" + ALLTRIM(m.caddr1) + "</Addr1>"
		
		        IF NOT EMPTY(m.caddr2)
		            lcXML = lcXML + CHR(10) + "<Addr2>" + ALLTRIM(m.caddr2) + "</Addr2>"
		        ENDIF
		
		        TEXT TO lcXML ADDITIVE TEXTMERGE NOSHOW PRETEXT 3
		          <City><<ALLTRIM(m.cCity)>></City>
		          <USState><<m.cstate>></USState>
		          <USZipCode><<m.czip>></USZipCode>
		        ENDTEXT
		
		        IF NOT EMPTY(m.cemail)
		            lcXML = lcXML + CHR(10) + "<EmailAddress>" + ALLTRIM(m.cemail) + "</EmailAddress>"
		        ENDIF
		
		        TEXT TO lcXML ADDITIVE TEXTMERGE NOSHOW PRETEXT 3
		          <PayeeForms>
		              <Form1099MISC Occurrence="1">
		                  <AcctNumber><<ALLTRIM(m.cID)>></AcctNumber>
		                  <Ret2ndTINNoticeInd>false</Ret2ndTINNoticeInd>
		                  <DirectSalesInd>false</DirectSalesInd>
		        ENDTEXT
		
		        IF NOT EMPTY(m.cStateNameOne)
		            lcXML = lcXML + CHR(10) + "<StateNameOne>" + m.cStateNameOne + "</StateNameOne>"
		        ENDIF
		        IF NOT EMPTY(m.cStateNameTwo)
		            lcXML = lcXML + CHR(10) + "<StateNameTwo>" + m.cStateNameTwo + "</StateNameTwo>"
		
		        ENDIF
		        IF NOT EMPTY(m.cStateNameOne)
		            lcXML = lcXML + CHR(10) + "<StateIdOne>" + STRTRAN(STRTRAN(m.cStatePayerNO1, '-', ''), ' ', '') + "</StateIdOne>"
		        ENDIF
		        IF NOT EMPTY(m.cStateNameTwo)
		            lcXML = lcXML + CHR(10) + "<StateIdTwo>" + STRTRAN(STRTRAN(m.cStatePayerNO2, '-', ''), ' ', '') + "</StateIdTwo>"
		        ENDIF
		
		        lcXML = lcXML + CHR(10) + "<ReturnAmountsForm1099MISC>"
		
		        IF NOT EMPTY(m.nrents)
		            lcXML = lcXML + CHR(10) + "<Rents>" + TRANSFORM(m.nrents) + "</Rents>"
		        ENDIF
		        IF NOT EMPTY(m.nroyalty)
		            lcXML = lcXML + CHR(10) + "<Royalties>" + TRANSFORM(m.nroyalty) + "</Royalties>"
		        ENDIF
		        IF NOT EMPTY(m.nOther)
		            lcXML = lcXML + CHR(10) + "<OtherIncome>" + TRANSFORM(m.nOther) + "</OtherIncome>"
		        ENDIF
		        IF NOT EMPTY(m.nfedtax)
		            lcXML = lcXML + CHR(10) + "<FITWithh>" + TRANSFORM(m.nfedtax) + "</FITWithh>"
		        ENDIF
		        IF NOT EMPTY(m.nNonEmp)
		            lcXML = lcXML + CHR(10) + "<NonEmpComp>" + TRANSFORM(m.nNonEmp) + "</NonEmpComp>"
		        ENDIF
		        IF NOT EMPTY(m.nAttorney)
		            lcXML = lcXML + CHR(10) + "<GrossAttorneyProc>" + TRANSFORM(m.nAttorney) + "</GrossAttorneyProc>"
		        ENDIF
		        IF NOT EMPTY(m.nstatetax1)
		            lcXML = lcXML + CHR(10) + "<StateTaxWithhOne>" + TRANSFORM(m.nstatetax1) + "</StateTaxWithhOne>"
		        ENDIF
		        IF NOT EMPTY(m.nstatetax2)
		            lcXML = lcXML + CHR(10) + "<StateTaxWithhTwo>" + TRANSFORM(m.nstatetax2) + "</StateTaxWithhTwo>"
		        ENDIF
		        IF m.nstatetax1 # 0
		            lcXML = lcXML + CHR(10) + "<StateIncomeOne>" + TRANSFORM(m.nStateIncome1) + "</StateIncomeOne>"
		        ENDIF
		        IF m.nstatetax2 # 0
		            lcXML = lcXML + CHR(10) + "<StateIncomeTwo>" + TRANSFORM(m.nStateIncome2) + "</StateIncomeTwo>"
		        ENDIF
		        lcXML = lcXML + CHR(10) +  "</ReturnAmountsForm1099MISC>" + ;
		            CHR(10) + "</Form1099MISC>" + ;
		            CHR(10) + "</PayeeForms>" + ;
		            CHR(10) + "</Payee>" + CHR(10)
		
		        lnPayee = lnPayee + 1
		    ENDSCAN
		
		    lcXML = lcXML + "</Payer>" + CHR(10) + "</gwx:DataPacket>"
		
		    STRTOFILE(lcXML, 'datafiles\misc1099.xml')
		
		    THISFORM.SendToNelco(lcXML)
		CATCH TO loError
		    llReturn = .F.
		    DO errorlog WITH 'BuildData', loError.LINENO, '1099 Submission', loError.ERRORNO, loError.MESSAGE, '', loError
		    MESSAGEBOX('Unable to submit the 1099s at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		          'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		RETURN llReturn
	ENDPROC

	PROCEDURE builddata		&& Builds the XML file
		LOCAL lcNameCtl, lcPhone, lcState, lcTIN, lcXML, lcaddr1, lcaddr2, lccity, lcemail, lcproducer
		LOCAL lczip, llReturn, lnPayee, loError, ln1099Count
		LOCAL cStateNameOne, cStateNameTwo, cTINType, cemail, cname, cname2, ctaxid, ctaxstate1
		LOCAL ctaxstate2, nStateIncome, tcYear, lcZipExt, llCorrected
		
		llReturn	= .T.
		lcXML		= ''
		llCorrected	= THISFORM.chkCorrected.VALUE
		llAll1099s  = .F.
		llNonEmp    = THISFORM.chknonEmp.VALUE 
		llAllBut    = THISFORM.chkallbut.VALUE 
		llPATS      = FILE('datafiles\pats.txt')
		
		IF NOT llNonEmp AND NOT llAllBut
		   MESSAGEBOX('You must choose either 1099 NEC for All But NEC',64,thisform.Caption)
		   RETURN
		ENDIF 
		
		TRY
		   tcYear = THISFORM.txtcYear.VALUE
		
		   IF NOT check_1099_errors(tcYear, .T.)
		      llReturn = .F.
		      EXIT
		   ENDIF
		
		   IF llCorrected
		      DO CASE
		         CASE llNonEmp
		            SELECT * FROM tax1099corrections WHERE cyear = tcYear AND lnec INTO CURSOR temp1099s ORDER BY cid
		            IF _tally = 0
		               MESSAGEBOX('There were no Non-Employee Corrected Returns to Submit.',16,'Submit 1099s')
		               llReturn = .F.
		               EXIT 
		            ENDIF 
		         CASE llAllBut
		            SELECT * FROM tax1099corrections WHERE cyear = tcYear AND NOT lnec INTO CURSOR temp1099s ORDER BY cid
		            IF _tally = 0
		               MESSAGEBOX('There were no 1099 Misc Corrected Returns to Submit.',16,'Submit 1099s')
		               llReturn = .F.
		               EXIT 
		            ENDIF 
		         OTHERWISE
		            SELECT * FROM tax1099corrections WHERE cyear = tcYear INTO CURSOR temp1099s ORDER BY cid  
		            IF _tally = 0
		               MESSAGEBOX('There were no Corrected Returns to Submit.',16,'Submit 1099s')
		               llReturn = .F.
		               EXIT 
		            ENDIF  
		      ENDCASE
		   ELSE
		      SELECT * FROM tax1099 WHERE cyear = tcYear INTO CURSOR temp1099s ORDER BY cid
		   ENDIF
		
		   lcVersion = VAL(CheckDotNetVersion())
		
		   IF VAL(CheckDotNetVersion()) < 4
		      IF MESSAGEBOX('The version of the .NET framework installed on this workstation needs to be updated. ' + ;
		            'The upload to the SherWare 1099 Web Portal requires a newer version. ' + CHR(10) + CHR(10) + ;
		            'Do you want to install it now?', 36, '.NET Update Needed') = 6
		         * Download .Net Install
		         oLink = CREATEOBJECT('hyperlink')
		         oLink.NAVIGATETO('https://www.microsoft.com/en-us/download/confirmation.aspx?id=42643')
		         llReturn = .F.
		         EXIT
		      ELSE
		         MESSAGEBOX("Since the .NET version wasn't updated, the 1099s cannot be uploaded to the web portal. " + ;
		            "Please update to version 4.5.1 or greater of the .NET framework and then try again.", 16, '.NET Update Needed')
		         llReturn = .F.
		         EXIT
		      ENDIF
		   ENDIF
		
		   IF FILE('datafiles\misc1099.xml')
		      ERASE ('datafiles\misc1099.xml')
		   ENDIF
		
		   swselect('compmast')
		   SET ORDER TO cidcomp
		   SEEK(m.goapp.cidcomp)
		
		
		   lcproducer = ALLTRIM(STRTRAN(compmast.cproducer, '&', '&amp;'))
		   lcproducer = STRTRAN(lcproducer, ',', '')
		   lcproducer = LEFT(lcproducer,34)
		   lcaddr1	  = ALLTRIM(STRTRAN(compmast.caddress1, '&', '&amp;'))
		   lcaddr2	  = ALLTRIM(STRTRAN(compmast.caddress2, '&', '&amp;'))
		   lccity	  = ALLTRIM(STRTRAN(compmast.ccity, '&', '&amp;'))
		   lcState	  = ALLTRIM(compmast.cstate)
		   IF NOT THIS.ISForeignaddress(lcState)
		      IF LEN(ALLTRIM(compmast.czipcode)) > 5
		         lczip	   = LEFT(ALLTRIM(compmast.czipcode), 5)
		         lcZipExt = RIGHT(ALLTRIM(compmast.czipcode), 4)
		      ELSE
		         lcZipExt = ''
		         lczip	   = ALLTRIM(compmast.czipcode)
		      ENDIF
		   ELSE
		      lczip = ALLTRIM(compmast.czipcode)
		      lcZipExt = ''
		   ENDIF
		   lcTIN	 = ALLTRIM(STRTRAN(cmEncrypt(ALLTRIM(compmast.ctaxid),m.goapp.cEncryptionKey), '-', ''))
		   lcPhone	 = ALLTRIM(STRTRAN(compmast.cphoneno, '-', ''))
		   lcPhone	 = ALLTRIM(STRTRAN(lcPhone, '(', ''))
		   lcPhone	 = ALLTRIM(STRTRAN(lcPhone, ')', ''))
		   lcPhone	 = ALLTRIM(STRTRAN(lcPhone, ' ', ''))
		   lcemail	 = ALLTRIM(compmast.cemail)
		   lcNameCtl = ALLTRIM(UPPER(LEFT(lcproducer, 4)))
		
		   lnPayee		  = 0
		   ln1099Count    = 0
		   m.nStateIncome = 0
		   swclose('compmast')
		
		   IF THIS.ISForeignaddress(lcState)
		      TEXT TO lcXML NOSHOW TEXTMERGE PRETEXT 3
		      <?xml version="1.0" encoding="utf-8"?>
		      <gwx:DataPacket Version="2.0" xmlns:gwx="http://www.greatland.com/Schemas/GWX/1.0/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.greatland.com/Schemas/GWX/1.0/
		        C:\_Dev\WageFiler\Dev\Shared\GWXml\WageFiler\WageFiler1099s.xsd">
		    <Payer PayerId="0">
		    <TIN><<lcTIN>></TIN>
		    <TypeOfTIN>E</TypeOfTIN>
		    <PayerCompany>
		        <Name1><<lcproducer>></Name1>
		      ENDTEXT
		
		      IF 'EARLY' $ UPPER(lcaddr1)
		         * NELCO Testing
		         lcXML = lcXML + CHR(13) + "<Name2>" + lcaddr1 + "</Name2>" + CHR(13) + ;
		            "<ForeignAddress>true</ForeignAddress>" + CHR(13) + ;
		            "<Addr1>" + lcaddr2 + "</Addr1>" + CHR(13) + ;
		            "<City>" + lccity + "</City>" + CHR(13) + ;
		            "<ForeignStateOrProvince>" + lcState + "</ForeignStateOrProvince>" + CHR(13) + ;
		            "<ForeignPostalCode>" + lczip + "</ForeignPostalCode>" + CHR(13) + ;
		            "<CountryCode>CA</CountryCode>" + CHR(13)
		      ELSE
		         TEXT TO lcXML ADDITIVE NOSHOW TEXTMERGE PRETEXT 3
		        <ForeignAddress>true</ForeignAddress>
		        <Addr1><<lcaddr1>></Addr1>
		        <City><<lcCity>></City>
		        <ForeignStateOrProvince><<lcState>></ForeignStateOrProvince>
		        <ForeignPostalCode><<lcZip>></ForeignPostalCode>
		        <CountryCode>CA</CountryCode>
		         ENDTEXT
		      ENDIF
		   ELSE
		      TEXT TO lcXML NOSHOW TEXTMERGE PRETEXT 3
		     <?xml version="1.0" encoding="utf-8"?>
		     <gwx:DataPacket Version="2.0" xmlns:gwx="http://www.greatland.com/Schemas/GWX/1.0/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.greatland.com/Schemas/GWX/1.0/
		       C:\_Dev\WageFiler\Dev\Shared\GWXml\WageFiler\WageFiler1099s.xsd">
		    <Payer PayerId="0">
		    <TIN><<lcTIN>></TIN>
		    <TypeOfTIN>E</TypeOfTIN>
		    <PayerCompany>
		        <Name1><<lcproducer>></Name1>
		        <Addr1><<lcaddr1>></Addr1>
		        <City><<lcCity>></City>
		        <USState><<lcState>></USState>
		        <USZipCode><<lcZip>></USZipCode>
		      ENDTEXT
		      IF NOT EMPTY(lcZipExt)
		         lcXML = lcXML + CHR(10) + "<USZipExt>" + ALLTRIM(lcZipExt) + "</USZipExt>"
		      ENDIF
		   ENDIF
		
		   IF NOT EMPTY(lcemail)
		      lcXML = lcXML + CHR(10) + "<EmailAddress>" + ALLT(lcemail) + "</EmailAddress>"
		   ENDIF
		   lcXML = lcXML + CHR(10) + "<Phone>" + ALLTRIM(lcPhone) + "</Phone>" + CHR(10) + "</PayerCompany> "
		
		   SELECT temp1099s
		   SCAN FOR cyear = tcYear
		
		      lnMiscTots = temp1099s.nroyalty + temp1099s.nOther + temp1099s.nAttorney + temp1099s.nRents
		      lnNecTots  = temp1099s.nnonemp
		
		      IF llCorrected
		         IF temp1099s.lcorrected # .T.
		            LOOP  && Only send corrected 1099s
		         ENDIF
		      ENDIF
		
		      IF llNonEmp AND NOT llAll1099s
		         IF lnNecTots = 0
		            LOOP && Only send non-employee compensation 1099s
		         ENDIF
		      ENDIF
		
		      IF llAllBut AND NOT llAll1099s AND NOT llCorrected
		         IF lnMiscTots = 0
		            LOOP && Send all but non-employee compensation 1099s
		         ENDIF
		      ENDIF
		
		      SCATTER MEMVAR
		
		      lnMiscTots = temp1099s.nroyalty + temp1099s.nOther + temp1099s.nAttorney + temp1099s.nRents
		      lnNecTots  = temp1099s.nnonemp
		
		      m.cemail = ''
		      IF m.cidtype = 'I'
		         swselect('investor')
		         SET ORDER TO cownerid
		         IF SEEK(m.cid)
		            IF NOT EMPTY(cemail)
		               m.cemail = LOWER(STRTRAN(ALLTRIM(cemail),'&',''))
		               IF NOT '@' $ m.cemail
		                  m.cemail = ''
		               ENDIF
		               IF NOT AT(m.cemail,'.com') > 0 AND ;
		                     NOT AT(m.cemail,'.net') > 0 AND ;
		                     NOT AT(m.cemail,'.us')  > 0 AND ;
		                     NOT AT(m.cemail,'.biz')  > 0 AND ;
		                     NOT AT(m.cemail,'.org') > 0
		                  m.cemail = ''
		               ENDIF
		            ENDIF
		            IF itaxidtype = 1
		               m.cTINType = 'E'
		            ELSE
		               m.cTINType = 'S'
		            ENDIF
		         ELSE
		            IF SUBSTR(ALLTRIM(cmEncrypt(m.ctaxid,m.goapp.cEncryptionKey)),3,1)='-'
		               m.cTINType = 'E'
		            ELSE
		               m.cTINType = 'S'
		               m.cemail   = ''
		            ENDIF
		         ENDIF
		      ELSE
		         swselect('vendor')
		         SET ORDER TO cvendorid
		         IF SEEK(m.cid)
		            IF NOT EMPTY(cemail)
		               m.cemail = LOWER(STRTRAN(ALLTRIM(cemail),'&',''))
		            ENDIF
		            IF NOT '@' $ m.cemail
		               m.cemail = ''
		            ENDIF
		            IF NOT AT(m.cemail,'.com') > 0 AND ;
		                  NOT AT(m.cemail,'.net') > 0 AND ;
		                  NOT AT(m.cemail,'.us')  > 0 AND ;
		                  NOT AT(m.cemail,'.biz')  > 0 AND ;
		                  NOT AT(m.cemail,'.org') > 0
		               m.cemail = ''
		            ENDIF
		            IF itaxidtype = 1
		               m.cTINType = 'E'
		            ELSE
		               m.cTINType = 'S'
		            ENDIF
		         ELSE
		            IF SUBSTR(cmEncrypt(ALLTRIM(m.ctaxid),m.goapp.cEncryptionKey),3,1)='-'
		               m.cTINType = 'E'
		            ELSE
		               m.cTINType = 'S'
		               m.cemail   = ''
		            ENDIF
		         ENDIF
		      ENDIF
		      IF NOT EMPTY(m.ctaxstate1)
		         m.cStateNameOne = m.ctaxstate1
		      ELSE
		         m.cStateNameOne = ''
		      ENDIF
		      IF NOT EMPTY(m.ctaxstate2)
		         m.cStateNameTwo = m.ctaxstate2
		      ELSE
		         m.cStateNameTwo = ''
		      ENDIF
		
		      m.cname = STRTRAN(m.cname, '&', '&amp;')
		      m.cname = STRTRAN(m.cname, "'", "")
		      m.cname = STRTRAN(m.cname, '"', '')
		      m.cname = STRTRAN(m.cname, ",", "")
		      m.cname = STRTRAN(m.cname, ".", "")
		      m.cname = STRTRAN(m.cname, "\", "")
		      m.cname = STRTRAN(m.cname, "/", "")
		      m.cname = STRTRAN(m.cname, "(", "")
		      m.cname = STRTRAN(m.cname, ")", "")
		      m.cname = STRTRAN(m.cname, "_", "")
		      m.cname = STRTRAN(m.cname, "+", "")
		      m.cname = STRTRAN(m.cname, "#", "")
		      IF LEN(m.cname) > 34
		         m.cname = LEFT(ALLTRIM(m.cname), 34)
		         IF '&a' $ m.cname AND NOT '&amp;' $ m.cname
		            m.cname = STRTRAN(m.cname,'&amp','')
		            m.cname = STRTRAN(m.cname,'&am','')
		            m.cname = STRTRAN(m.cname,'&a','')
		            m.cname = STRTRAN(m.cname,'&','')
		         ENDIF
		      ENDIF
		
		      * NELCO Testing
		      IF llPATS
		         IF 'VENDERPUT' $ UPPER(m.cname)
		            m.cname2 = 'ATTORNEYS AT LAW'
		         ENDIF
		      ENDIF
		
		      m.cname2 = STRTRAN(m.cname2, '&', '&amp;')
		      m.cname2 = STRTRAN(m.cname2, "'", "")
		      m.cname2 = STRTRAN(m.cname2, '"', '')
		      m.cname2 = STRTRAN(m.cname2, ".", "")
		      m.cname2 = STRTRAN(m.cname2, "\", "")
		      m.cname2 = STRTRAN(m.cname2, "/", "")
		      m.cname2 = STRTRAN(m.cname2, "(", "")
		      m.cname2 = STRTRAN(m.cname2, ")", "")
		      m.cname2 = STRTRAN(m.cname2, "_", "")
		      m.cname2 = STRTRAN(m.cname2, "+", "")
		      m.cname2 = STRTRAN(m.cname2, "#", "")
		      IF LEN(m.cname2) > 34
		         m.cname2 = LEFT(ALLTRIM(m.cname2), 34)
		         IF '&a' $ m.cname2 AND NOT '&amp;' $ m.cname2
		            m.cname2 = STRTRAN(m.cname2,'&amp','')
		            m.cname2 = STRTRAN(m.cname2,'&am','')
		            m.cname2 = STRTRAN(m.cname2,'&a','')
		            m.cname2 = STRTRAN(m.cname2,'&','')
		         ENDIF
		      ENDIF
		      m.ctaxid = ALLTRIM(STRTRAN(cmEncrypt(ALLTRIM(m.ctaxid),m.goapp.cEncryptionKey), '-', ''))
		
		      lcXML = lcXML + CHR(10)
		
		      TEXT TO lcXML ADDITIVE TEXTMERGE NOSHOW PRETEXT 3
		      <Payee PayeeId="<<transform(lnPayee)>>">
		          <TIN><<STRTRAN(m.ctaxid,'-','')>></TIN>
		          <TypeOfTIN><<m.cTINType>></TypeOfTIN>
		      ENDTEXT
		
		      IF NOT EMPTY(m.cname2)
		         lcXML = lcXML + CHR(10) + "<NameLine2>" + ALLTRIM(m.cname2) + "</NameLine2>"
		      ENDIF
		
		      lcXML = lcXML + CHR(10) + "<AssociationName>" + ALLTRIM(m.cname) + "</AssociationName>"
		
		      m.caddr1 = STRTRAN(m.caddr1, '&', ' ')
		      m.caddr1 = STRTRAN(m.caddr1, '(', '')
		      m.caddr1 = STRTRAN(m.caddr1, ')', '')
		      m.caddr1 = STRTRAN(m.caddr1, '/', '')
		      m.caddr1 = STRTRAN(m.caddr1, '\', '')
		      m.caddr1 = STRTRAN(m.caddr1, '#', '')
		      m.caddr1 = STRTRAN(m.caddr1, '+', '')
		      m.caddr1 = STRTRAN(m.caddr1, '"', '')
		      m.caddr1 = STRTRAN(m.caddr1, "'", '')
		      m.caddr1 = LEFT(ALLTRIM(m.caddr1), 34)
		      m.caddr2 = STRTRAN(m.caddr2, '&', ' ')
		      m.caddr2 = STRTRAN(m.caddr2, '(', '')
		      m.caddr2 = STRTRAN(m.caddr2, ')', '')
		      m.caddr2 = STRTRAN(m.caddr2, '/', '')
		      m.caddr2 = STRTRAN(m.caddr2, '\', '')
		      m.caddr2 = STRTRAN(m.caddr2, '#', '')
		      m.caddr2 = STRTRAN(m.caddr2, '+', '')
		      m.caddr2 = STRTRAN(m.caddr2, '"', '')
		      m.caddr2 = STRTRAN(m.caddr2, "'", '')
		      m.caddr2 = LEFT(ALLTRIM(m.caddr2), 34)
		      m.ccity  = STRTRAN(m.ccity, '&', ' ')
		      m.czip   = STRTRAN(m.czip, '-', '')
		      m.czip   = STRTRAN(m.czip, ' ', '')
		
		      IF THISFORM.ISForeignaddress(m.cstate)
		         lcXML = lcXML + CHR(10) + "<ForeignAddress>true</ForeignAddress>"
		         lcXML = lcXML + CHR(10) + "<Addr1>" + ALLTRIM(m.caddr1) + "</Addr1>"
		
		         IF NOT EMPTY(m.caddr2)
		            lcXML = lcXML + CHR(10) + "<Addr2>" + ALLTRIM(m.caddr2) + "</Addr2>"
		         ENDIF
		
		         TEXT TO lcXML ADDITIVE TEXTMERGE NOSHOW PRETEXT 3
					   <City><<ALLTRIM(m.cCity)>></City>
		        		<ForeignStateOrProvince><<m.cstate>></ForeignStateOrProvince>
		         ENDTEXT
		
		         IF NOT EMPTY(m.czip)
		            lcXML = lcXML + "<ForeignPostalCode>" + ALLTRIM(m.czip) + "</ForeignPostalCode>"
		         ENDIF
		
		         lcXML = lcXML + "<CountryCode>" + m.cCountry + "</CountryCode>"
		
		      ELSE
		         lcXML = lcXML + CHR(10) + "<Addr1>" + ALLTRIM(m.caddr1) + "</Addr1>"
		
		         IF NOT EMPTY(m.caddr2)
		            lcXML = lcXML + CHR(10) + "<Addr2>" + ALLTRIM(m.caddr2) + "</Addr2>"
		         ENDIF
		
		         TEXT TO lcXML ADDITIVE TEXTMERGE NOSHOW PRETEXT 3
		          <City><<ALLTRIM(m.cCity)>></City>
		          <USState><<m.cstate>></USState>
		          <USZipCode><<LEFT(ALLTRIM(m.czip),5)>></USZipCode>
		         ENDTEXT
		
		         IF LEN(ALLTRIM(m.czip)) > 5
		            lcZipExt = RIGHT(ALLTRIM(m.czip), 4)
		            lcXML	 = lcXML + CHR(10) + "<USZipExt>" + RIGHT(ALLTRIM(m.czip), 4) + "</USZipExt>"
		         ELSE
		            lcZipExt = ''
		         ENDIF
		      ENDIF
		
		      IF NOT '@' $ m.cemail
		         m.cemail = ''
		      ENDIF
		
		      m.cemail = STRTRAN(m.cemail, '_', '-')
		
		      IF NOT EMPTY(m.cemail)
		         IF ',' $ m.cemail
		            m.cemail = SUBSTR(ALLTRIM(m.cemail), 1, AT(',', m.cemail) - 1)
		         ENDIF
		         IF ';' $ m.cemail
		            m.cemail = SUBSTR(ALLTRIM(m.cemail), 1, AT(';', m.cemail) - 1)
		         ENDIF
		         m.cemail = STRTRAN(m.cemail, '<', '')
		         m.cemail = STRTRAN(m.cemail, '>', '')
		         m.cemail = STRTRAN(m.cemail, ' ', '')
		         lcXML	  = lcXML + CHR(10) + "<EmailAddress>" + ALLTRIM(m.cemail) + "</EmailAddress>"
		      ENDIF
		      
		      STORE 0 TO lnRents, lnRoyalty, lnOther, lnNonEmp, lnAttorney
		
		      IF llCorrected AND m.iCorrectionType = 1
		         SELECT tax1099
		         LOCATE FOR cidTax1 = m.cidTax1
		         IF FOUND()
		            prevtaxid = ALLTRIM(STRTRAN(cmEncrypt(ALLTRIM(tax1099.ctaxid),m.goapp.cEncryptionKey), '-', ''))
		            TEXT TO lcXML ADDITIVE TEXTMERGE NOSHOW PRETEXT 3
		           <PrevReportedDataForCorrectedReturns>
						<PreviouslyReportedTIN><<prevtaxid>></PreviouslyReportedTIN>
						<PreviouslyReportedTypeOfTIN><<m.cTinType>></PreviouslyReportedTypeOfTIN>
						<PreviouslyReportedAssociationName><<ALLTRIM(tax1099.cName)>></PreviouslyReportedAssociationName>
						<IsForeign>false</IsForeign>
		            ENDTEXT
		
		            lcXML = lcXML + CHR(10) + "<PreviouslyReportedAddr1>" + ALLTRIM(tax1099.caddr1) + "</PreviouslyReportedAddr1>"
		
		            IF NOT EMPTY(m.caddr2)
		               lcXML = lcXML + CHR(10) + "<PreviouslyReportedAddr2>" + ALLTRIM(tax1099.caddr2) + "</PreviouslyReportedAddr2>"
		            ENDIF
		
		            TEXT TO lcXML ADDITIVE TEXTMERGE NOSHOW PRETEXT 3
						<PreviouslyReportedCity><<ALLTRIM(tax1099.cCity)>></PreviouslyReportedCity>
						<PreviouslyReportedStateOrProvince><<tax1099.cstate>></PreviouslyReportedStateOrProvince>
						<PreviouslyReportedPostalCode><<LEFT(ALLTRIM(tax1099.czip),5)>></PreviouslyReportedPostalCode>
		            ENDTEXT
		
		            IF LEN(ALLTRIM(tax1099.czip)) > 5
		               jcZipExt = RIGHT(ALLTRIM(tax1099.czip), 4)
		               lcXML = lcXML + CHR(10) + "<PreviouslyReportedPostalCodeExt>" + jcZipExt + "</PreviouslyReportedPostalCodeExt>"
		            ENDIF
		
		            lcXML = lcXML + CHR(10) + "</PrevReportedDataForCorrectedReturns>"
		         ENDIF
		      ELSE
		         * Get the amounts that were reported on the original 1099
		         SELECT tax1099
		         LOCATE FOR cidTax1 = m.cidTax1
		         IF FOUND()
		            IF nrents # 0
		               lnRents = nRents
		            ENDIF
		            IF nOther # 0
		               lnOther = nOther
		            ENDIF
		            IF nRoyalty # 0
		               lnRoyalty = nRoyalty
		            ENDIF
		            IF nNonEmp # 0
		               lnNonEmp = nNonEmp
		            ENDIF 
		            IF nAttorney # 0
		               lnAttorney = nAttorney
		            ENDIF 
		         ENDIF 
		      ENDIF && llCorrected
		
		      * NELCO Testing
		      IF llPATS
		         IF '88877' $ m.cid
		            m.cid = SUBSTR(m.cid,1,5) + '-' + SUBSTR(m.cid,6)
		         ENDIF
		      ENDIF
		      m.cid = STRTRAN(m.cid, '&', ' ')
		
		      IF llAllBut
		         lcXML = lcXML + CHR(10) + "<PayeeForms>" + CHR(10)
		         
		         IF llPATS AND 'MARIA' $ m.cname
		            m.cid = '38965-82056-3'
		         ENDIF 
		         IF lnMiscTots > 0 OR llCorrected
		            IF NOT llCorrected
		               TEXT TO lcXML ADDITIVE TEXTMERGE NOSHOW PRETEXT 3
		              <Form1099MISC Occurrence="1">
		                  <AcctNumber><<ALLTRIM(m.cID)>></AcctNumber>
		                  <Ret2ndTINNoticeInd>false</Ret2ndTINNoticeInd>
		               ENDTEXT
		
		               IF THISFORM.ISForeignaddress(m.cstate) AND FILE('datafiles\pats.txt')
		                  lcXML = lcXML + CHR(10) + "<FATCAFilingReqInd>true</FATCAFilingReqInd>"
		               ENDIF
		
		               lcXML = lcXML + CHR(10) + "<DirectSalesInd>false</DirectSalesInd>"
		
		            ELSE
		               IF m.iCorrectionType = 1
		                  TEXT TO lcXML ADDITIVE TEXTMERGE NOSHOW PRETEXT 3
		              <Form1099MISC Occurrence="1">
		                  <WrongNameAddrTIN>true</WrongNameAddrTIN>
		                  <AcctNumber><<ALLTRIM(m.cID)>></AcctNumber>
		                  <Ret2ndTINNoticeInd>false</Ret2ndTINNoticeInd>
		                  <DirectSalesInd>false</DirectSalesInd>
		                  ENDTEXT
		               ELSE
		                  TEXT TO lcXML ADDITIVE TEXTMERGE NOSHOW PRETEXT 3
		              <Form1099MISC Occurrence="1">
		                  <WrongAmountOrFiling>true</WrongAmountOrFiling>
		                  <AcctNumber><<ALLTRIM(m.cID)>></AcctNumber>
		                  <Ret2ndTINNoticeInd>false</Ret2ndTINNoticeInd>
		                  <DirectSalesInd>false</DirectSalesInd>
		                  ENDTEXT
		               ENDIF
		            ENDIF
		
		            IF NOT EMPTY(m.cStateNameOne)
		               lcXML = lcXML + CHR(10) + "<StateNameOne>" + m.cStateNameOne + "</StateNameOne>"
		            ENDIF
		            IF NOT EMPTY(m.cStateNameTwo)
		               lcXML = lcXML + CHR(10) + "<StateNameTwo>" + m.cStateNameTwo + "</StateNameTwo>"
		
		            ENDIF
		            IF NOT EMPTY(m.cStateNameOne)
		               lcXML = lcXML + CHR(10) + "<StateIdOne>" + STRTRAN(cmEncrypt(ALLTRIM(m.cStatePayerNO1),m.goapp.cEncryptionKey), ' ', '') + "</StateIdOne>"
		            ENDIF
		            IF NOT EMPTY(m.cStateNameTwo)
		               lcXML = lcXML + CHR(10) + "<StateIdTwo>" + STRTRAN(cmEncrypt(ALLTRIM(m.cStatePayerNO2),m.goapp.cEncryptionKey), ' ', '') + "</StateIdTwo>"
		            ENDIF
		
		            lcXML = lcXML + CHR(10) + "<ReturnAmountsForm1099MISC>"
		
		            IF NOT EMPTY(m.nRents) OR (llCorrected AND lnRents # 0)
		               lcXML = lcXML + CHR(10) + "<Rents>" + TRANSFORM(m.nRents) + "</Rents>"
		            ENDIF
		            IF NOT EMPTY(m.nroyalty) OR (llCorrected AND lnRoyalty # 0)
		               lcXML = lcXML + CHR(10) + "<Royalties>" + TRANSFORM(m.nroyalty) + "</Royalties>"
		            ENDIF
		            IF m.nOther # 0 OR (llCorrected AND lnOther # 0)
		               lcXML = lcXML + CHR(10) + "<OtherIncome>" + TRANSFORM(m.nOther) + "</OtherIncome>"
		            ENDIF
		            IF NOT EMPTY(m.nfedtax)
		               lcXML = lcXML + CHR(10) + "<FITWithh>" + TRANSFORM(m.nfedtax) + "</FITWithh>"
		            ENDIF
		
		            IF NOT EMPTY(m.nAttorney)
		               lcXML = lcXML + CHR(10) + "<GrossAttorneyProc>" + TRANSFORM(m.nAttorney) + "</GrossAttorneyProc>"
		            ENDIF
		            IF llPATS
		               IF llCorrected
		                  DO CASE
		                     CASE m.iCorrectionType = 1
		                        lcXML = lcXML + CHR(10) + "<FishBoatProc>950.00</FishBoatProc>" + ;
		                           CHR(10) + "<MedHealthPymnts>265.00</MedHealthPymnts>"
		                     CASE m.iCorrectionType = 2
		                        lcXML = lcXML + CHR(10) + "<MedHealthPymnts>365.00</MedHealthPymnts>"
		                        IF NOT EMPTY(m.nnonemp) AND tcYear < '2020'
		                           lcXML = lcXML + CHR(10) + "<NonEmpComp>" + TRANSFORM(m.nnonemp) + "</NonEmpComp>"
		                        ENDIF
		                        lcXML = lcXML + CHR(10) + "<ExcessGoldenPymnts>582.00</ExcessGoldenPymnts>"
		                  ENDCASE
		               ELSE 
		                  IF 'ATTORNEY' $ m.cname2
		                     lcXML = lcXML + CHR(10) + "<FishPurchForResale>235000.00</FishPurchForResale>"
		                  ENDIF    
		               ENDIF
		            ENDIF
		            IF NOT EMPTY(m.nnonemp) AND NOT llPATS AND NOT m.iCorrectionType = 2 AND tcYear < '2020'
		               lcXML = lcXML + CHR(10) + "<NonEmpComp>" + TRANSFORM(m.nnonemp) + "</NonEmpComp>"
		            ENDIF
		            
		            IF NOT EMPTY(m.nstatetax1)
		               lcXML = lcXML + CHR(10) + "<StateTaxWithhOne>" + TRANSFORM(m.nstatetax1) + "</StateTaxWithhOne>"
		            ENDIF
		            IF NOT EMPTY(m.nstatetax2)
		               lcXML = lcXML + CHR(10) + "<StateTaxWithhTwo>" + TRANSFORM(m.nstatetax2) + "</StateTaxWithhTwo>"
		            ENDIF
		            IF m.nstatetax1 # 0
		               lcXML = lcXML + CHR(10) + "<StateIncomeOne>" + TRANSFORM(m.nStateIncome1) + "</StateIncomeOne>"
		            ENDIF
		            IF m.nstatetax2 # 0
		               lcXML = lcXML + CHR(10) + "<StateIncomeTwo>" + TRANSFORM(m.nStateIncome2) + "</StateIncomeTwo>"
		            ENDIF
		
		            IF llPATS
		               IF llCorrected
		                  IF m.iCorrectionType = 2
		                     lcXML = lcXML + CHR(10) + "<Sect409ADeferrals>652.00</Sect409ADeferrals>" + ;
		                        CHR(10) + "<Sect409AIncome>2910.00</Sect409AIncome>"
		                  ENDIF
		               ENDIF
		            ENDIF
		
		
		            lcXML = lcXML + CHR(10) +  "</ReturnAmountsForm1099MISC>" + ;
		               CHR(10) + "</Form1099MISC>"
		
		            IF lnMiscTots # 0 OR llCorrected
		               lcXML = lcXML + CHR(10) + "</PayeeForms>" + ;
		                  CHR(10) + "</Payee>" + CHR(10)
		            ENDIF
		            ln1099Count = ln1099Count + 1
		         ENDIF
		      ENDIF
		
		      IF llNonEmp AND tcYear > '2019' AND (lnNecTots > 0 OR llCorrected)
		         IF NOT llAll1099s
		            lcXML = lcXML + CHR(10) + "<PayeeForms>" + CHR(10)
		         ENDIF
		         IF NOT llCorrected
		            TEXT TO lcXML ADDITIVE TEXTMERGE NOSHOW PRETEXT 3
		              <Form1099NEC Occurrence="1">
		                  <AcctNumber><<ALLTRIM(m.cID)>></AcctNumber>
		                  <Ret2ndTINNoticeInd>false</Ret2ndTINNoticeInd>
		            ENDTEXT
		
		            IF THISFORM.ISForeignaddress(m.cstate) AND FILE('datafiles\pats.txt')
		               lcXML = lcXML + CHR(10) + "<FATCAFilingReqInd>true</FATCAFilingReqInd>"
		            ENDIF
		            IF llPATS AND m.nfedtax = 515.00
		               lcXML = lcXML + CHR(10) + "<DirectSalesInd>true</DirectSalesInd>"
		            ENDIF    
		         ELSE
		            IF m.iCorrectionType = 1
		               TEXT TO lcXML ADDITIVE TEXTMERGE NOSHOW PRETEXT 3
		              <Form1099NEC Occurrence="1">
		                  <WrongNameAddrTIN>true</WrongNameAddrTIN>
		                  <AcctNumber><<ALLTRIM(m.cID)>></AcctNumber>
		                  <Ret2ndTINNoticeInd>false</Ret2ndTINNoticeInd>
		               ENDTEXT
		               IF llPATS AND m.nfedtax = 515.00
		                  lcXML = lcXML + CHR(10) + "<DirectSalesInd>true</DirectSalesInd>"
		               ENDIF    
		            ELSE
		               TEXT TO lcXML ADDITIVE TEXTMERGE NOSHOW PRETEXT 3
		              <Form1099NEC Occurrence="1">
		                  <WrongAmountOrFiling>true</WrongAmountOrFiling>
		                  <AcctNumber><<ALLTRIM(m.cID)>></AcctNumber>
		                  <Ret2ndTINNoticeInd>false</Ret2ndTINNoticeInd>
		               ENDTEXT
		            ENDIF
		         ENDIF
		
		         IF NOT EMPTY(m.cStateNameOne)
		            lcXML = lcXML + CHR(10) + "<StateNameOne>" + m.cStateNameOne + "</StateNameOne>"
		         ENDIF
		         IF NOT EMPTY(m.cStateNameTwo)
		            lcXML = lcXML + CHR(10) + "<StateNameTwo>" + m.cStateNameTwo + "</StateNameTwo>"
		         ENDIF
		         IF NOT EMPTY(m.cStateNameOne)
		            lcXML = lcXML + CHR(10) + "<StateIdOne>" + STRTRAN(cmEncrypt(ALLTRIM(m.cStatePayerNO1),m.goapp.cEncryptionKey), ' ', '') + "</StateIdOne>"
		         ENDIF
		         IF NOT EMPTY(m.cStateNameTwo)
		            lcXML = lcXML + CHR(10) + "<StateIdTwo>" + STRTRAN(cmEncrypt(ALLTRIM(m.cStatePayerNO2),m.goapp.cEncryptionKey), ' ', '') + "</StateIdTwo>"
		         ENDIF
		
		         lcXML = lcXML + CHR(10) + "<ReturnAmountsForm1099NEC>"
		         IF NOT EMPTY(m.nfedtax)
		            lcXML = lcXML + CHR(10) + "<FITWithh>" + TRANSFORM(m.nfedtax) + "</FITWithh>"
		         ENDIF
		         IF NOT EMPTY(m.nnonemp) OR (llCorrected AND lnNonEmp # 0)
		            lcXML = lcXML + CHR(10) + "<NonEmpComp>" + TRANSFORM(m.nnonemp) + "</NonEmpComp>"
		         ENDIF
		         IF NOT EMPTY(m.nstatetax1)
		            lcXML = lcXML + CHR(10) + "<StateTaxWithhOne>" + TRANSFORM(m.nstatetax1) + "</StateTaxWithhOne>"
		         ENDIF
		         IF NOT EMPTY(m.nstatetax2)
		            lcXML = lcXML + CHR(10) + "<StateTaxWithhTwo>" + TRANSFORM(m.nstatetax2) + "</StateTaxWithhTwo>"
		         ENDIF
		         IF m.nstatetax1 # 0
		            lcXML = lcXML + CHR(10) + "<StateIncomeOne>" + TRANSFORM(m.nStateIncome1) + "</StateIncomeOne>"
		         ENDIF
		         IF m.nstatetax2 # 0
		            lcXML = lcXML + CHR(10) + "<StateIncomeTwo>" + TRANSFORM(m.nStateIncome2) + "</StateIncomeTwo>"
		         ENDIF
		         lcXML = lcXML + CHR(10) +  "</ReturnAmountsForm1099NEC>" + ;
		            CHR(10) + "</Form1099NEC>" + ;
		            CHR(10) + "</PayeeForms>" + ;
		            CHR(10) + "</Payee>" + CHR(10)
		         ln1099Count = ln1099Count + 1
		      ENDIF
		
		      lnPayee = lnPayee + 1
		
		
		   ENDSCAN
		
		   lcXML = lcXML + "</Payer>" + CHR(10) + "</gwx:DataPacket>"
		
		   IF ln1099Count > 0
		      STRTOFILE(lcXML, 'datafiles\misc1099.xml')
		      THISFORM.SendToNelco(lcXML)
		   ENDIF
		CATCH TO loError
		   llReturn = .F.
		   DO errorlog WITH 'BuildData', loError.LINENO, '1099 Submission', loError.ERRORNO, loError.MESSAGE, '', loError
		   MESSAGEBOX('Unable to submit the 1099s at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		      'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		RETURN llReturn
		
	ENDPROC

	PROCEDURE getdlls
	ENDPROC

	PROCEDURE getproxy
		LOCAL lcLibrary
		LOCAL loIP AS 'wwftp'
		LOCAL lcSourceFile, lcTargetFile, llReturn, llSupport, lnResult, loerror
		
		llReturn = .T.
		
		TRY
		    lcLibrary = SET('library')
		
		    lcSourceFile = 'NelcoReportingProxy.dll'
		    lcTargetFile = (m.goapp.cCommonFolder + 'NelcoReportingProxy.dll')
		
		    loUpdate.cSourceFile  = lcSourceFile
		    loUpdate.cTargetFile  = lcTargetFile
		    loUpdate.cDescription = 'Nelco Proxy'
		    loUpdate.cUnzipTo     = m.goapp.cCommonFolder
		    llReturn              = loUpdate.GetUpdate(.T.)
		CATCH TO loerror
		    llReturn = .F.
		    DO errorlog WITH 'GetProxy', loerror.LINENO, 'Submit 1099s', loerror.ERRORNO, loerror.MESSAGE
		    MESSAGEBOX('Unable to get the required submit dll at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		          'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		RETURN llReturn
		
		
		
		
	ENDPROC

	PROCEDURE Init
		IF DODEFAULT()
		
		   IF NOT m.goapp.oSecurity.HasPrivilege('Tax Ids')
		      MESSAGEBOX('You must have Tax IDs privilege to submit the 1099 file',16,'Need Tax IDs Privilege')
		      RETURN .f.
		   ENDIF 
		 
		  swselect('tax1099')
		   SELECT MAX(cyear) as cyear FROM tax1099 INTO CURSOR temp 
		   IF EMPTY(temp.cyear)
		      thisform.txtcYear.Value = TRANSFORM(YEAR(DATE()))
		   ELSE 
		      THISFORM.txtcYear.VALUE = temp.cyear
		   ENDIF    
		   thisform.txtcYear.Refresh()
		   
		   thisform.CurrentYear = thisform.txtcyear.Value 
		   
		ENDIF    
	ENDPROC

	PROCEDURE isforeignaddress
		LPARAMETERS tcState
		
		lcStates = 'AL MO AK MT AZ NE AR NV CA NH CO NJ CT NM DE NY DC NC FL ND GA OH HI OK ID OR IL PA IN RI IA SC KS SD KY TN LA TX ME UT MD VT MA VA MI WA MN WV MS WI WY,VI,PR'
		IF NOT tcstate $ lcstates
		   RETURN .t.
		ELSE
		   RETURN .f.   
		ENDIF 
	ENDPROC

	PROCEDURE sendtonelco		&& Sends the Soap request to Nelco
		LPARAMETERS tcBatch
		LOCAL loBridge AS wwDotNetBridge
		LOCAL llCorrected
		
		llCorrected	= THISFORM.chkCorrected.VALUE
		
		llReturn = .T.
		
		llDebug = FILE(m.goapp.ccommonfolder+'debugww.txt')
		
		TRY
		*!*      IF NOT FILE(m.goapp.ccommonfolder + 'NelcoReportingProxy.dll')
		*!*         llReturn = THISFORM.GetProxy()
		*!*      ENDIF
		*!*      
		*!*      IF NOT FILE(m.goapp.ccommonfolder+'wwdotnetbridge.dll')
		*!*         llReturn = GetDLLS()
		*!*      ENDIF 
		
		   SET PROCEDURE TO m.goapp.cCommonFolder+'\bin\wwDotNetBridge' ADDITIVE
		   
		      lcPath = SET('path')
		*!*      SET PATH TO 'datafiles\bin\,' + lcPath ADDITIVE
		
		   loBridge   = CREATEOBJECT("wwDotNetBridge", "V4")
		   loValue = loBridge.CreateComValue()
		   IF VARTYPE(loValue) # 'O'
		      IF llDebug
		         MESSAGEBOX('wwDotNetBridge Error: ' + loBridge.cErrorMsg,0,'Debug')
		      ENDIF
		   ENDIF 
		   loValue.SetEnum("System.Net.SecurityProtocolType.Tls12")
		   loBridge.SetStaticProperty("System.Net.ServicePointManager", "SecurityProtocol", loValue)
		   loTransmit = .NULL.
		
		   IF !loBridge.LoadAssembly("NelcoReportingProxy.dll")
		      MESSAGEBOX("Problem loading web reporting dll. Invalid library..." + CHR(10) + loBridge.cErrorMsg, 0, 'Error Loading Service')
		      llReturn = .F.
		      EXIT
		   ENDIF
		
		   LOCAL loService AS NelcoReportingProxy.Proxy.IntegrationService
		   loService = loBridge.CreateInstance("NelcoReportingProxy.Proxy.IntegrationService")
		
		*** Always check for errors!
		   IF ISNULL(loService)
		      MESSAGEBOX("Unable to create web reporting service: " + CHR(10) + loBridge.cErrorMsg, 0, 'Error Loading Web Service')
		      llReturn = .F.
		      EXIT
		   ENDIF
		
		   IF FILE('datafiles\pats.txt')
		      loBridge.SetProperty(loService, "Url", "https://sherwaresdkdev.nelcoportal.com/integrationservice.svc")
		   ELSE
		      loBridge.SetProperty(loService, "Url", "https://sherware.nelcoportal.com/integrationservice.svc")
		   ENDIF   
		   
		   * Increase the web.service timeout to 150000 milliseconds (150 seconds)
		   loBridge.SetProperty(loService, "Timeout", 150000) 
		
		   lnEnum	   = loBridge.GetEnumValue("NelcoReportingProxy.Proxy.BatchDataFormat", "GWXml")
		   loBatch	   = loBridge.CreateInstance("NelcoReportingProxy.Proxy.Batch")
		   lcBatchData = tcBatch
		
		
		   loBatch.BatchData   = lcBatchData
		   loBatch.BatchFormat = lnEnum
		   loBatch.Compressed  = "false"
		   loBatch.Email	   = ""
		   IF NOT llCorrected
		      loBatch.FormType	   = "1"
		   ELSE
		      loBatch.FormType	   = "5" 
		   ENDIF    
		   IF FILE("datafiles\pats.txt")
		      loBatch.PATS        = "true"
		   ELSE
		      loBatch.PATS        = "false"
		   ENDIF
		   loBatch.PASSWORD	= ""
		   loTransmit		= loService.Transmit(loBatch)
		
		*** Always check for errors
		   IF ISNULL(loTransmit)
		      MESSAGEBOX("Couldn't get item: " + CHR(10) + loService.cErrorMsg, 16, 'Error Transmitting')
		      llReturn = .F.
		      EXIT
		   ENDIF
		
		   oLink = CREATEOBJECT('hyperlink')
		
		   DO CASE 
		      CASE loTransmit.ErrorCode = 1
		         oLink.NAVIGATETO(loTransmit.RedirectURL)
		      CASE loTransmit.ErrorCode = -2
		         MESSAGEBOX('There were no forms to transmit.', 16, 'Missing Forms')
		      CASE loTransmit.ErrorCode = -999
		         MESSAGEBOX('There were errors found in the data being transmitted.',16,'Transmit Error')
		      OTHERWISE 
		         MESSAGEBOX('There were errors found in the data transmitted. Please check the errors showing in the ' + ;
		              'web page that is brought up after you dismiss this message. ' + ;
		              'If you need help resolving the errors, please contact SherWare support.', 16, 'Transmit Error')
		         oLink.NAVIGATETO(loTransmit.RedirectURL)
		   ENDCASE 
		CATCH TO loError
		   llReturn = .F.
		   DO errorlog WITH 'SendToNelco', loError.LINENO, '1099 Submission', loError.ERRORNO, loError.MESSAGE, ' ', loError
		   ERRORMESSAGE('SendToNelco', loError.LINENO, '1099 Submission', loError.ERRORNO, loError.MESSAGE)
		ENDTRY
	ENDPROC

	PROCEDURE chkAllBut.Click
		IF this.Value
		   thisform.chknonEmp.Value = .f.
		ENDIF 
	ENDPROC

	PROCEDURE chkCorrected.Click
		IF this.Value
		   IF thisform.chknonEmp.Value = .f. AND thisform.chkallbut.Value = .f.
		      thisform.chkallbut.Value = .t.
		   ENDIF 
		ENDIF 
	ENDPROC

	PROCEDURE chkNonEmp.Click
		IF this.Value
		   thisform.chkallbut.Value = .f.
		ENDIF 
	ENDPROC

	PROCEDURE cmdExit.Click
		thisform.Release()
	ENDPROC

	PROCEDURE cmdUpload.Click
		thisform.BuildData()
	ENDPROC

	PROCEDURE lblHyperlink.Click
		oLink = createobject('hyperlink')
		oLink.NavigateTo('https://sherware.nelcoportal.com/Content/Filing_Information')
	ENDPROC

ENDDEFINE
