*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="dmselexp.scx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="2" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Cursor1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor6" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor7" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor8" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor9" UniqueID="" Timestamp="" />

	AutoOpenTables = .F.
	DataSource = .NULL.
	Height = 369
	Left = 264
	Name = "Dataenvironment"
	Top = 266
	Width = 657

	ADD OBJECT 'Cursor1' AS cursor WITH ;
		Alias = "expsusp", ;
		BufferModeOverride = 5, ;
		CursorSource = "expsusp", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Filter = "", ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor1", ;
		Order = "cWellID", ;
		Top = 20, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor2' AS cursor WITH ;
		Alias = "wells", ;
		CursorSource = "wells", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 150, ;
		Name = "Cursor2", ;
		Top = 20, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor3' AS cursor WITH ;
		Alias = "expense", ;
		BufferModeOverride = 5, ;
		CursorSource = "expense", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 290, ;
		Name = "Cursor3", ;
		Top = 20, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor4' AS cursor WITH ;
		Alias = "options", ;
		CursorSource = "options", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor4", ;
		Top = 140, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor5' AS cursor WITH ;
		Alias = "sysctl", ;
		CursorSource = "sysctl", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 150, ;
		Name = "Cursor5", ;
		Top = 140, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor6' AS cursor WITH ;
		Alias = "expense1", ;
		CursorSource = "expense", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 476, ;
		Name = "Cursor6", ;
		Top = 18, ;
		Width = 97
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor7' AS cursor WITH ;
		Alias = "groups", ;
		CursorSource = "groups", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 290, ;
		Name = "Cursor7", ;
		Top = 140, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor8' AS cursor WITH ;
		Alias = "appurchh", ;
		CursorSource = "appurchh", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 430, ;
		Name = "Cursor8", ;
		Top = 140, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor9' AS cursor WITH ;
		Alias = "csrcthdr", ;
		CursorSource = "csrcthdr", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor9", ;
		Top = 260, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

ENDDEFINE

DEFINE CLASS formdmselexp AS frmformcustom OF "..\custom\cforms.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="cmdAllocate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdMark" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdUnmark" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Swgroup1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdDelete" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdExit" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column1.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column1.Chkcheckboxcustom1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column2.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column2.Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column3.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column3.Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column4.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column4.Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column5.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column5.Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column6.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column6.Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column7.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column7.Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column8.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column8.Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column9.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column9.Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column10.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column10.Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtnCount" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtnTotal" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="opgShow" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcProdPeriod" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcProdYear" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcPeriod" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcYear" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom6" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom7" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: updategrid
		*p: cgroup
		*p: cperiod
		*p: cyear
	*</DefinedPropArrayMethod>

	Caption = "Select Well ExpensesTo Allocate"
	DataSession = 2
	DoCreate = .T.
	Height = 473
	HelpContextID = 104
	Name = "FormDmselexp"
	Visible = .T.
	Width = 768
	Mwresize1.lblHighLight.Name = "lblHighLight"
	Mwresize1.lblShading.Name = "lblShading"
	Mwresize1.Name = "Mwresize1"

	ADD OBJECT 'cmdAllocate' AS cmdcommandbuttoncustom WITH ;
		Caption = "\<Allocate", ;
		Left = 225, ;
		Name = "cmdAllocate", ;
		TabIndex = 14, ;
		Top = 430
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdDelete' AS cmdcommandbuttoncustom WITH ;
		Caption = "\<Delete", ;
		Left = 486, ;
		Name = "cmdDelete", ;
		TabIndex = 17, ;
		Top = 430
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdExit' AS cmdcommandbuttoncustom WITH ;
		Caption = "E\<xit", ;
		Left = 573, ;
		Name = "cmdExit", ;
		TabIndex = 18, ;
		Top = 430
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdMark' AS cmdcommandbuttoncustom WITH ;
		Caption = "Mark All", ;
		Left = 312, ;
		Name = "cmdMark", ;
		TabIndex = 15, ;
		Top = 430
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdUnmark' AS cmdcommandbuttoncustom WITH ;
		Caption = "UnMark All", ;
		Left = 399, ;
		Name = "cmdUnmark", ;
		TabIndex = 16, ;
		Top = 430
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'Grdgridcustom1' AS grdgridcustom WITH ;
		AllowHeaderSizing = .F., ;
		AllowRowSizing = .F., ;
		ColumnCount = 10, ;
		Height = 278, ;
		lallowdelete = .F., ;
		lallownew = .F., ;
		lcolumnmemory = .F., ;
		Left = 0, ;
		Name = "Grdgridcustom1", ;
		Panel = 1, ;
		RecordSource = "exptmp", ;
		TabIndex = 11, ;
		Top = 127, ;
		Width = 756, ;
		Column1.ControlSource = "", ;
		Column1.Name = "Column1", ;
		Column1.Sparse = .F., ;
		Column1.Width = 17, ;
		Column10.ColumnOrder = 6, ;
		Column10.ControlSource = "exptmp.crefid", ;
		Column10.Name = "Column10", ;
		Column2.ControlSource = "", ;
		Column2.Name = "Column2", ;
		Column2.ReadOnly = .T., ;
		Column3.ControlSource = "", ;
		Column3.Name = "Column3", ;
		Column3.ReadOnly = .T., ;
		Column3.Width = 161, ;
		Column4.ColumnOrder = 5, ;
		Column4.ControlSource = "", ;
		Column4.Name = "Column4", ;
		Column4.ReadOnly = .T., ;
		Column4.Width = 126, ;
		Column5.ColumnOrder = 8, ;
		Column5.ControlSource = "", ;
		Column5.Name = "Column5", ;
		Column5.ReadOnly = .T., ;
		Column6.ColumnOrder = 9, ;
		Column6.ControlSource = "", ;
		Column6.Name = "Column6", ;
		Column6.ReadOnly = .T., ;
		Column6.Width = 87, ;
		Column7.ColumnOrder = 7, ;
		Column7.Name = "Column7", ;
		Column7.Width = 34, ;
		Column8.ColumnOrder = 10, ;
		Column8.Name = "Column8", ;
		Column8.Width = 26, ;
		Column9.ColumnOrder = 4, ;
		Column9.ControlSource = "exptmp.ccatcode", ;
		Column9.Name = "Column9", ;
		Column9.Width = 31
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="grid" />

	ADD OBJECT 'Grdgridcustom1.Column1.Chkcheckboxcustom1' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "", ;
		ControlSource = "exptmp.lallocated", ;
		Left = 1, ;
		Name = "Chkcheckboxcustom1", ;
		Top = 23
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'Grdgridcustom1.Column1.Header1' AS header WITH ;
		Caption = "", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'Grdgridcustom1.Column10.Header1' AS header WITH ;
		Caption = "Inv No", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'Grdgridcustom1.Column10.Text1' AS textbox WITH ;
		BackColor = 255,255,255, ;
		BorderStyle = 0, ;
		ControlSource = "exptmp.crefid", ;
		ForeColor = 0,0,0, ;
		Margin = 0, ;
		Name = "Text1"
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'Grdgridcustom1.Column2.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "Well ID", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'Grdgridcustom1.Column2.Text1' AS textbox WITH ;
		BackColor = 255,255,255, ;
		BorderStyle = 0, ;
		ControlSource = "exptmp.cwellid", ;
		ForeColor = 0,0,0, ;
		Margin = 0, ;
		Name = "Text1", ;
		ReadOnly = .T.
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'Grdgridcustom1.Column3.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "Well Name", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'Grdgridcustom1.Column3.Text1' AS textbox WITH ;
		BackColor = 255,255,255, ;
		BorderStyle = 0, ;
		ControlSource = "exptmp.cwellname", ;
		ForeColor = 0,0,0, ;
		Margin = 0, ;
		Name = "Text1", ;
		ReadOnly = .T.
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'Grdgridcustom1.Column4.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "Expense Desc", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'Grdgridcustom1.Column4.Text1' AS textbox WITH ;
		BackColor = 255,255,255, ;
		BorderStyle = 0, ;
		ControlSource = "exptmp.ccateg", ;
		ForeColor = 0,0,0, ;
		Margin = 0, ;
		Name = "Text1", ;
		ReadOnly = .T.
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'Grdgridcustom1.Column5.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "Date", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'Grdgridcustom1.Column5.Text1' AS textbox WITH ;
		BackColor = 255,255,255, ;
		BorderStyle = 0, ;
		ControlSource = "exptmp.dexpdate", ;
		ForeColor = 0,0,0, ;
		Margin = 0, ;
		Name = "Text1", ;
		ReadOnly = .T.
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'Grdgridcustom1.Column6.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "Amount", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'Grdgridcustom1.Column6.Text1' AS textbox WITH ;
		BackColor = 255,255,255, ;
		BorderStyle = 0, ;
		ControlSource = "exptmp.namount", ;
		ForeColor = 0,0,0, ;
		Margin = 0, ;
		Name = "Text1", ;
		ReadOnly = .T.
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'Grdgridcustom1.Column7.Header1' AS header WITH ;
		Caption = "Year", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'Grdgridcustom1.Column7.Text1' AS textbox WITH ;
		BackColor = 255,255,255, ;
		BorderStyle = 0, ;
		ControlSource = "exptemp.cYear", ;
		ForeColor = 0,0,0, ;
		Margin = 0, ;
		Name = "Text1"
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'Grdgridcustom1.Column8.Header1' AS header WITH ;
		Caption = "Prd", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'Grdgridcustom1.Column8.Text1' AS textbox WITH ;
		Alignment = 3, ;
		BackColor = 255,255,255, ;
		BorderStyle = 0, ;
		ControlSource = "exptemp.cPeriod", ;
		ForeColor = 0,0,0, ;
		Margin = 0, ;
		Name = "Text1"
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'Grdgridcustom1.Column9.Header1' AS header WITH ;
		Caption = "Code", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'Grdgridcustom1.Column9.Text1' AS textbox WITH ;
		BackColor = 255,255,255, ;
		BorderStyle = 0, ;
		ControlSource = "exptmp.ccatcode", ;
		ForeColor = 0,0,0, ;
		Margin = 0, ;
		Name = "Text1"
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'Lbllabelcustom1' AS lbllabelcustom WITH ;
		Caption = "Entries", ;
		Left = 133, ;
		Name = "Lbllabelcustom1", ;
		TabIndex = 13, ;
		Top = 421
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom2' AS lbllabelcustom WITH ;
		Caption = "Total", ;
		Left = 133, ;
		Name = "Lbllabelcustom2", ;
		TabIndex = 20, ;
		Top = 445
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom3' AS lbllabelcustom WITH ;
		Caption = "/", ;
		FontSize = 10, ;
		Left = 228, ;
		Name = "Lbllabelcustom3", ;
		TabIndex = 5, ;
		Top = 30, ;
		ZOrderSet = 46
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom4' AS lbllabelcustom WITH ;
		Caption = "**  Click on any column heading to sort the list by that column  **", ;
		FontBold = .T., ;
		FontSize = 9, ;
		ForeColor = 255,0,0, ;
		Left = 151, ;
		Name = "Lbllabelcustom4", ;
		TabIndex = 10, ;
		Top = 104
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom5' AS lbllabelcustom WITH ;
		Caption = "Any expenses without a production period already on them should be assigned to:", ;
		FontSize = 8, ;
		Left = 63, ;
		Name = "Lbllabelcustom5", ;
		TabIndex = 9, ;
		Top = 71
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom6' AS lbllabelcustom WITH ;
		Caption = "/", ;
		FontSize = 10, ;
		Left = 494, ;
		Name = "Lbllabelcustom6", ;
		TabIndex = 8, ;
		Top = 69, ;
		ZOrderSet = 46
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom7' AS lbllabelcustom WITH ;
		Caption = "Group:", ;
		FontSize = 8, ;
		Height = 16, ;
		Left = 384, ;
		Name = "Lbllabelcustom7", ;
		TabIndex = 9, ;
		Top = 19, ;
		Width = 35
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'opgShow' AS opgoptiongroupcustom WITH ;
		AutoSize = .T., ;
		BorderStyle = 0, ;
		ButtonCount = 2, ;
		Left = 27, ;
		Name = "opgShow", ;
		TabIndex = 1, ;
		Top = 6, ;
		Value = 1, ;
		Option1.AutoSize = .T., ;
		Option1.Caption = "Show All Entries", ;
		Option1.FontSize = 8, ;
		Option1.Height = 16, ;
		Option1.Left = 5, ;
		Option1.Name = "Option1", ;
		Option1.Top = 5, ;
		Option1.Value = 1, ;
		Option1.Width = 98, ;
		Option2.AutoSize = .T., ;
		Option2.Caption = "Show Only Entries for Period:", ;
		Option2.FontSize = 8, ;
		Option2.Height = 16, ;
		Option2.Left = 5, ;
		Option2.Name = "Option2", ;
		Option2.Top = 24, ;
		Option2.Width = 161
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="optiongroup" />

	ADD OBJECT 'Swgroup1' AS swgroup WITH ;
		BoundColumn = 2, ;
		Left = 434, ;
		Name = "Swgroup1", ;
		TabIndex = 4, ;
		Top = 16, ;
		ZOrderSet = 4
		*< END OBJECT: ClassLib="..\custom\swcontrol.vcx" BaseClass="combobox" />

	ADD OBJECT 'txtcPeriod' AS txttextboxcustom WITH ;
		Enabled = .T., ;
		Height = 20, ;
		Left = 465, ;
		MaxLength = 2, ;
		Name = "txtcPeriod", ;
		SelectOnEntry = .T., ;
		TabIndex = 6, ;
		Top = 68, ;
		Width = 24, ;
		ZOrderSet = 34
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcProdPeriod' AS txttextboxcustom WITH ;
		Enabled = .F., ;
		Height = 20, ;
		Left = 199, ;
		MaxLength = 2, ;
		Name = "txtcProdPeriod", ;
		SelectOnEntry = .T., ;
		TabIndex = 2, ;
		Top = 28, ;
		Width = 24, ;
		ZOrderSet = 34
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcProdYear' AS txttextboxcustom WITH ;
		Enabled = .F., ;
		Height = 20, ;
		Left = 235, ;
		MaxLength = 4, ;
		Name = "txtcProdYear", ;
		SelectOnEntry = .T., ;
		TabIndex = 3, ;
		Top = 28, ;
		Width = 39, ;
		ZOrderSet = 45
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcYear' AS txttextboxcustom WITH ;
		Enabled = .T., ;
		Height = 20, ;
		Left = 501, ;
		MaxLength = 4, ;
		Name = "txtcYear", ;
		SelectOnEntry = .T., ;
		TabIndex = 7, ;
		Top = 68, ;
		Width = 39, ;
		ZOrderSet = 45
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtnCount' AS txttextboxcustom WITH ;
		BackColor = 212,208,200, ;
		FontBold = .T., ;
		Height = 20, ;
		InputMask = "99,999", ;
		Left = 63, ;
		Name = "txtnCount", ;
		TabIndex = 12, ;
		Top = 418, ;
		Width = 62
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtnTotal' AS txttextboxcustom WITH ;
		BackColor = 212,208,200, ;
		FontBold = .T., ;
		Height = 20, ;
		InputMask = "99,999,999.99", ;
		Left = 14, ;
		Name = "txtnTotal", ;
		TabIndex = 19, ;
		Top = 442, ;
		Width = 111
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />
	
	PROCEDURE beforeclose
		LPARAMETERS nclosereason
		
		DO CASE
		   CASE nclosereason = 1  &&  Close by Cancel
		      SELECT expsusp
		      REPL lAllocated WITH .F. ALL
		      RETURN .T.
		ENDCASE      
	ENDPROC

	PROCEDURE Init
		this.caption = 'Select Expenses To Allocate'
		
		thisform.txtnCount.value = 0
		thisform.txtnTotal.value = 0
		
		DODEFAULT()
		
		This.Grdgridcustom1.Column1.controlsource        = "exptmp.lAllocated"
		This.Grdgridcustom1.Column2.controlsource        = "exptmp.cwellid"
		This.Grdgridcustom1.Column3.controlsource        = "exptmp.cwellname"
		This.Grdgridcustom1.Column4.controlsource        = "exptmp.ccateg"
		This.Grdgridcustom1.Column5.controlsource        = "exptmp.dExpDate"
		This.Grdgridcustom1.Column6.controlsource        = "exptmp.nAmount"
		This.Grdgridcustom1.Column7.controlsource        = "exptmp.cYear"
		This.Grdgridcustom1.Column8.controlsource        = "exptmp.cPeriod"
		This.Grdgridcustom1.Column9.controlsource        = "exptmp.cCatCode"
		
		SELECT exptmp
		SET ORDER TO cwellid
		GO TOP
		
		IF TYPE('thisform.oRegistry') <> 'O'
		   thisform.oRegistry = FindGlobalObject('cmRegistry')
		ENDIF   
	ENDPROC

	PROCEDURE Load
		DODEFAULT()
		
		swclose('exptmp')
		swselect('expsusp')
		SELECT expsusp.*, SPACE(30) AS cwellname, SPACE(2) AS cGroup FROM expsusp WHERE NOT DELETED() INTO CURSOR exptmp READWRITE ORDER BY expsusp.cwellid
		
		SELECT exptmp
		SCAN
		   SWSELECT('wells')
		   LOCATE FOR cwellid == exptmp.cwellid
		   IF FOUND()
		      REPLACE exptmp.cwellname WITH wells.cwellname, exptmp.cGroup WITH wells.cGroup
		   ENDIF
		ENDSCAN
		
		SELECT exptmp
		INDEX ON cwellid+DTOC(dexpdate)+cCateg TAG cwellid
		INDEX ON cwellname+DTOC(dexpdate)+cCateg TAG cwellname
		INDEX ON cCateg+cwellid+DTOC(dexpdate) TAG cCateg
		INDEX ON DTOC(dexpdate)+cwellid DESC TAG dexpdate
		INDEX on cYear+cPeriod+cWellID TAG cYearPrd
		INDEX ON nAmount DESC TAG nAmount
		INDEX on crefid TAG crefid
		INDEX on ccatcode TAG ccatcode
		SET ORDER TO cwellid
		
	ENDPROC

	PROCEDURE updategrid
		LOCAL lnShow, lcYear, lcPeriod, lcGroup
		
		wait window nowait 'Building List of Expenses' 
		
		lnShow           = THISFORM.opgShow.VALUE
		THISFORM.cYear   = THISFORM.txtcProdYear.VALUE
		THISFORM.cPeriod = THISFORM.txtcProdPeriod.VALUE
		THISFORM.cGroup  = THISFORM.swGroup1.VALUE
		
		SELECT exptmp
		
		DO CASE
		   CASE THISFORM.cGroup = '**' AND lnShow = 1  &&  All Groups and all entries
		      SET FILT TO
		   CASE THISFORM.cGroup = '**' AND lnShow = 2  &&  All Groups and Entries for a specific period
		      SET FILT TO cYear+cPeriod = THISFORM.cYear+THISFORM.cPeriod
		   CASE THISFORM.cGroup <> '**' AND lnShow = 1  &&  Specific Group and All Entries
		      SET FILT TO cGroup = THISFORM.cGroup
		   CASE THISFORM.cGroup <> '**' AND lnShow = 2  &&  Specific Group and Entries for a specific period
		      SET FILT TO cGroup = THISFORM.cGroup AND cYear+cPeriod = THISFORM.cYear+THISFORM.cPeriod
		ENDCASE
		
		GO TOP
		THISFORM.Grdgridcustom1.REFRESH()
		
		wait clear
	ENDPROC

	PROCEDURE cmdAllocate.Click
		LOCAL m.cYear, m.cPeriod, m.cGroup, lcidexpe, oWellInv
		
		* Create the oWellInv object so we can lookup the DOI Deck if needed
		oWellInv = CREATEOBJECT('swbizobj_wellinv')
		   
		SELECT exptmp
		lnrecno = RECNO()
		GO TOP
		IF EOF()
		   RETURN .F.
		ENDIF
		LOCATE FOR lAllocated
		IF NOT FOUND()
		   GOTO lnrecno
		   RETURN .F.
		ENDIF
		GOTO lnrecno
		
		* Set the index on the expense allocation file
		SWSELECT('expsusp')
		SET ORDER to cidexps
		
		* Set the index on bill headers
		swselect('appurchh')
		SET ORDER to cbatch
		
		* Set the index on cash receipts headers
		swselect('csrcthdr')
		SET ORDER to cbatch
		
		* Set the index on wells
		swselect('wells')
		SET ORDER to cWellID
		
		* Set the index for wellinv
		swselect('wellinv')
		SET ORDER to CWELLID   && CWELLID 
		
		IF !THISFORM.oMessage.CONFIRM('OK to allocate the chosen expenses?')
		   WAIT WIND 'Allocation of expenses cancelled...'
		   RETURN
		ENDIF
		
		lnCount     = 0
		lnProcessed = 0
		lnMax       = 0
		SELECT exptmp
		COUNT FOR lAllocated TO lnMax
		
		m.lAPTran = .F.  &&  Temporarily assigning the variable, until it gets added to DB - BH 10/10/2006
		
		oProgress = thisform.oMessage.ProgressBarEx('Allocating Expenses...')
		oProgress.SetProgressRange(1,lnMax)
		
		CREATE CURSOR NoOwners (cWellID C(10))
		CREATE CURSOR NotActive (cWellID C(10))
		*
		*  Allocate the expenses to the correct period and well.
		*
		SELECT exptmp
		SCAN FOR lAllocated
		   SWSELECT('expsusp')
		   IF SEEK(exptmp.cidexps)
		      SCATTER MEMVAR
		      lcidexpe = m.cidexps
		      lnProcessed = lnProcessed + 1
		      * Check to see if there is a batch in appurchh/csrcthdr that would make it true - BH 10/10/2006
		      IF m.lAPTran = .F. AND NOT EMPTY(m.cBatch)  
		         SELECT appurchh
		         IF SEEK(m.cBatch)
		            m.lAPTran = .T.
		         ENDIF
		         SELECT csrcthdr  &&  Since expenses can be entered as lines on production receipts, check csrcthdr, too.
		         IF SEEK(m.cBatch)  &&  There is a matching batch, so it should be marked as a aptran entry
		            m.lAPTran = .T.
		         ENDIF
		      ENDIF
		      
		      * Look to make sure there are owners in this well
		      * We can't allocate to the well if there are no owners in the DOI
		      SWSELECT('wellinv')
		      IF SEEK(m.cWellID)
		         SWSELECT('wells')
		         IF SEEK(m.cWellID)
		            m.cGroup = cGroup
		            oProgress.setProgressMessage('Processing well: ' + ALLTRIM(m.cwellid) + ' ' + ALLTRIM(wells.cwellname))
		            oProgress.UpdateProgress(lnProcessed)
		
		            IF INLIST(cWellStat,'I','S','P')  
		               * Not active, so don't let them allocate those entries
		               INSERT INTO notactive FROM MEMVAR 
		               LOOP
		            ENDIF
		         ELSE
		            LOOP
		         ENDIF    
		      ELSE    
		         INSERT INTO noowners FROM MEMVAR 
		         LOOP
		      ENDIF
		         
		      * Only fill in blank decks when sending straight to the income and expense tables
		      IF EMPTY(m.cDeck) 
		         m.cDeck = oWellInv.DOIDeckNameLookup(m.cyear, m.cperiod, m.cWellID)
		      ENDIF
		            
		      RELEASE temp
		      SET DELETED OFF
		      m.cidexph = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Batch')
		      m.cidexpe = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Expense')
		      SELECT expense1
		      SET ORDER TO cidexpe
		      DO WHILE SEEK(m.cidexpe)
		         m.cidexpe = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Expense')
		      ENDDO
		      m.cRunYearRev = ''
		      m.cRunYearJIB = ''
		      m.nRunNoRev = 0
		      m.nRunNoJIB = 0
		
		      IF EMPTY(m.cPeriod) OR EMPTY(m.cYear)
		         m.cPeriod = THISFORM.txtcPeriod.VALUE
		         m.cYear   = THISFORM.txtcYear.VALUE
		      ENDIF
		
		      INSERT INTO expense FROM MEMVAR
		      SET DELETED ON
		
		      IF m.goapp.lqbversion
		         *  Update the exptxnid table with the new cidexpe for this entry, so if it
		         *  gets re-allocated and then deleted, it can properly remove the posting.
		         swselect('exptxnid',.T.)
		         LOCATE FOR cidexpe = lcidexpe
		         IF FOUND()
		            REPLACE cidexpe WITH m.cidexpe
		            =TABLEUPDATE(.T.)
		         ENDIF
		      ENDIF
		      
		      
		      lnCount = lnCount + 1
		      SELECT expsusp
		      DELETE NEXT 1
		
		   ENDIF
		   SELECT exptmp
		   DELETE NEXT 1
		ENDSCAN
		
		oProgress.CloseProgress()
		
		WAIT WINDOW NOWAIT 'Finalizing expense entry allocations. Please wait...'
		swselect('expsusp')
		SCAN FOR lAllocated
		   REPL lAllocated WITH .F.
		ENDSCAN
		
		SELECT exptmp
		GO TOP
		THISFORM.Grdgridcustom1.REFRESH()
		THISFORM.txtnCount.VALUE = 0
		THISFORM.txtnTotal.VALUE = 0
		
		swselect('expense')
		=TABLEUPDATE(.t.)
		swselect('expsusp')
		=TABLEUPDATE(.t.)
		
		WAIT CLEAR
		
		lnMessage = 'Allocated ' + ALLTRIM(STR(lnCount)) + ' Expense Entries'
		
		SELECT notactive
		IF RECCOUNT() > 0
		   SELECT cwellid FROM notactive INTO CURSOR notactive1 ORDER BY cwellid GROUP BY cwellid
		   lnmessage = lnmessage + CHR(10) + CHR(10) + 'The following wells could not be allocated because they are not active:' 
		   SELECT notactive1
		   SCAN
		      lnMessage = lnMessage +  CHR(10) + notactive1.cwellid
		   ENDSCAN
		ENDIF 
		  
		SELECT noowners
		IF RECCOUNT() > 0
		   SELECT cwellid FROM noowners INTO CURSOR noowners1 ORDER BY cwellid GROUP BY cwellid
		   lnmessage = lnmessage + CHR(10) + CHR(10) + 'The following wells could not be allocated because they have no owners:'  
		   SELECT noowners1
		   SCAN
		      lnMessage = lnMessage +  CHR(10) + noowners1.cwellid
		   ENDSCAN
		ENDIF 
		
		oWellInv = .Null.
		
		MESSAGEBOX(lnMessage,64,'Allocate Expenses')
	ENDPROC

	PROCEDURE cmdDelete.Click
		SELECT exptmp
		lnrecno = RECNO()
		GO TOP
		IF EOF()
		   RETURN .F.
		ENDIF
		LOCATE FOR lAllocated
		IF NOT FOUND()
		   GOTO lnrecno
		   RETURN .F.
		ENDIF
		GOTO lnrecno
		
		IF !THISFORM.oMessage.CONFIRM('OK to delete the chosen entry? Deleting the entry will NOT remove the entry from the G/L!')
		   WAIT WIND NOWAIT 'Deletion of expenses cancelled...' TIMEOUT 3
		   RETURN
		ELSE
		   IF !thisform.oMessage.Confirm('Are you really sure you want to delete the entry?')
		      RETURN
		   ENDIF    
		ENDIF
		
		WAIT WINDOW NOWAIT 'Deleting selected expenses, please wait...'
		
		*
		*  Delete the expenses
		*
		SELECT exptmp
		SCAN FOR lAllocated
		   SELECT expsusp
		   SCAN FOR cidexps = exptmp.cidexps
		      DELETE NEXT 1
		   ENDSCAN
		   SELECT exptmp
		   DELETE NEXT 1
		ENDSCAN
		
		THISFORM.txtnCount.VALUE = 0
		THISFORM.txtnTotal.VALUE = 0
		
		SELECT exptmp
		GO TOP
		THISFORM.Grdgridcustom1.REFRESH()
		
		swselect('expense')
		=TABLEUPDATE(.t.)
		SWSELECT('expsusp')
		=TABLEUPDATE(.t.)
		
		WAIT CLEAR
		
		THISFORM.oMessage.DISPLAY('The Chosen Expenses Were Deleted...')
		
	ENDPROC

	PROCEDURE cmdExit.Click
		IF thisform.beforeclose(1)
		   thisform.release()
		ENDIF   
	ENDPROC

	PROCEDURE cmdMark.Click
		THISFORM.txtnCount.VALUE = 0
		THISFORM.txtnTotal.VALUE = 0
		
		SELECT exptmp
		SCAN FOR lAllocated = .F.
		   REPL lAllocated WITH .T.
		ENDSCAN
		SCAN FOR lAllocated = .T.
		   THISFORM.txtnCount.VALUE = THISFORM.txtnCount.VALUE + 1
		   THISFORM.txtnTotal.VALUE = THISFORM.txtnTotal.VALUE + nAmount
		ENDSCAN
		
		THISFORM.REFRESH()
		
		
		
	ENDPROC

	PROCEDURE cmdUnmark.Click
		thisform.txtnCount.value = 0
		thisform.txtnTotal.value = 0
		
		SELECT exptmp
		SCAN FOR lAllocated = .T.
		   REPL lAllocated WITH .F.
		ENDSCAN
		
		thisform.Refresh()
		
		   
	ENDPROC

	PROCEDURE Grdgridcustom1.Column1.Chkcheckboxcustom1.InteractiveChange
		IF this.value 
		   thisform.txtnCount.value = thisform.txtnCount.value + 1
		   thisform.txtnTotal.value = thisform.txtnTotal.value + Exptmp.nAmount
		ELSE
		      thisform.txtnCount.value = thisform.txtnCount.value - 1
		      thisform.txtnTotal.value = thisform.txtnTotal.value - Exptmp.nAmount
		ENDIF      
		
		thisform.txtnCount.refresh()
		thisform.txtnTotal.refresh()
	ENDPROC

	PROCEDURE Grdgridcustom1.Column1.Header1.Click
		DODEFAULT()
		
		SELECT exptmp
		SET ORDER TO cwellid
		GO TOP
		THIS.PARENT.PARENT.REFRESH()
		
	ENDPROC

	PROCEDURE Grdgridcustom1.Column10.Header1.Click
		DODEFAULT()
		
		SELECT exptmp
		SET ORDER TO crefid
		GO TOP
		THIS.PARENT.PARENT.REFRESH()
		
	ENDPROC

	PROCEDURE Grdgridcustom1.Column2.Header1.Click
		DODEFAULT()
		
		SELECT exptmp
		SET ORDER TO cwellid
		GO TOP
		THIS.PARENT.PARENT.REFRESH()
		
	ENDPROC

	PROCEDURE Grdgridcustom1.Column2.Text1.When
		RETURN .F.
	ENDPROC

	PROCEDURE Grdgridcustom1.Column3.Header1.Click
		DODEFAULT()
		
		SELECT exptmp
		SET ORDER TO cwellname
		GO TOP
		THIS.PARENT.PARENT.REFRESH()
		
	ENDPROC

	PROCEDURE Grdgridcustom1.Column3.Text1.When
		RETURN .F.
	ENDPROC

	PROCEDURE Grdgridcustom1.Column4.Header1.Click
		DODEFAULT()
		
		SELECT exptmp
		SET ORDER TO ccateg
		GO TOP
		THIS.PARENT.PARENT.REFRESH()
		
	ENDPROC

	PROCEDURE Grdgridcustom1.Column4.Text1.When
		RETURN .F.
	ENDPROC

	PROCEDURE Grdgridcustom1.Column5.Header1.Click
		DODEFAULT()
		
		SELECT exptmp
		SET ORDER TO dExpDate
		GO TOP
		THIS.PARENT.PARENT.REFRESH()
		
	ENDPROC

	PROCEDURE Grdgridcustom1.Column5.Text1.When
		RETURN .F.
	ENDPROC

	PROCEDURE Grdgridcustom1.Column6.Header1.Click
		DODEFAULT()
		
		SELECT exptmp
		SET ORDER TO nAmount
		GO TOP
		THIS.PARENT.PARENT.REFRESH()
		
	ENDPROC

	PROCEDURE Grdgridcustom1.Column6.Text1.When
		RETURN .F.
	ENDPROC

	PROCEDURE Grdgridcustom1.Column7.Header1.Click
		DODEFAULT()
		
		SELECT exptmp
		SET ORDER TO cYearPrd
		GO TOP
		THIS.PARENT.PARENT.REFRESH()
		
	ENDPROC

	PROCEDURE Grdgridcustom1.Column8.Header1.Click
		DODEFAULT()
		
		SELECT exptmp
		SET ORDER TO cYearPrd
		GO TOP
		THIS.PARENT.PARENT.REFRESH()
		
	ENDPROC

	PROCEDURE Grdgridcustom1.Column9.Header1.Click
		DODEFAULT()
		
		SELECT exptmp
		SET ORDER TO ccatcode
		GO TOP
		THIS.PARENT.PARENT.REFRESH()
		
	ENDPROC

	PROCEDURE Grdgridcustom1.Resize
		return .f.
	ENDPROC

	PROCEDURE opgShow.Click
		DODEFAULT()
		
		IF THIS.VALUE = 2  &&  Selected period, so enable those textboxes
		   THISFORM.txtcProdPeriod.ENABLED = .T.
		   THISFORM.txtcProdYear.ENABLED   = .T.
		ELSE
		   THISFORM.txtcProdPeriod.ENABLED = .F.
		   THISFORM.txtcProdYear.ENABLED   = .F.
		ENDIF
		
		thisform.updategrid()
	ENDPROC

	PROCEDURE Swgroup1.Init
		dodefault()
		
		this.listitemid = 1
	ENDPROC

	PROCEDURE Swgroup1.Valid
		dodefault()
		
		thisform.updategrid()
	ENDPROC

	PROCEDURE txtcPeriod.Init
		dodefault()
		
		THIS.SET('value',PADL(ALLT(STR(MONTH(DATE()))),2,'0'))
	ENDPROC

	PROCEDURE txtcPeriod.Valid
		IF NOT EMPTY(THIS.VALUE)
		   THIS.set('VALUE',PADL(ALLTRIM(THIS.VALUE),2,'0'))
		   IF NOT BETWEEN(THIS.VALUE,'01','12')
		      THISFORM.omessage.warning('Please enter a valid production period. The period must be between 01 and 12')
		      RETURN 0
		   ENDIF
		ELSE
		   THIS.SET('value',PADL(ALLT(STR(MONTH(DATE()))),2,'0'))
		ENDIF
	ENDPROC

	PROCEDURE txtcProdPeriod.Init
		dodefault()
		
		THIS.SET('value',PADL(ALLT(STR(MONTH(DATE()))),2,'0'))
	ENDPROC

	PROCEDURE txtcProdPeriod.Valid
		IF NOT EMPTY(THIS.VALUE)
		   THIS.set('VALUE',PADL(ALLTRIM(THIS.VALUE),2,'0'))
		   IF NOT BETWEEN(THIS.VALUE,'01','12')
		      THISFORM.omessage.warning('Please enter a valid production period. The period must be between 01 and 12')
		      RETURN 0
		   ENDIF
		*!*	ELSE
		*!*	   THIS.SET('value',PADL(ALLT(STR(MONTH(DATE()))),2,'0'))
		ENDIF
		
		*!*	IF EMPTY(THISFORM.txtcProdYear.VALUE)
		*!*	   THISFORM.txtcProdYear.SET('value',ALLT(STR(YEAR(DATE()))))
		*!*	ENDIF
		
		thisform.updategrid()
	ENDPROC

	PROCEDURE txtcProdYear.Init
		dodefault()
		
		THIS.SET('value',allt(str(year(date()))))
	ENDPROC

	PROCEDURE txtcProdYear.Valid
		DODEFAULT()
		
		IF NOT EMPTY(THIS.VALUE)
		   IF NOT BETWEEN(THIS.VALUE,'1980','2025')
		      WAIT WIND NOWAIT 'Invalid production year entered. Please correct.'
		      RETURN 0
		   ENDIF
		*!*	ELSE
		*!*	   THIS.SET('value',allt(str(year(date()))))
		ENDIF
		
		thisform.updategrid()
	ENDPROC

	PROCEDURE txtcYear.Init
		dodefault()
		
		THIS.SET('value',allt(str(year(date()))))
	ENDPROC

	PROCEDURE txtcYear.Valid
		DODEFAULT()
		
		IF NOT EMPTY(THIS.VALUE)
		   IF NOT BETWEEN(THIS.VALUE,'1980','2025')
		      WAIT WIND NOWAIT 'Invalid production year entered. Please correct.'
		      RETURN 0
		   ENDIF
		ELSE
		   THIS.SET('value',allt(str(year(date()))))
		ENDIF
	ENDPROC

	PROCEDURE txtnCount.When
		RETURN .F.
	ENDPROC

	PROCEDURE txtnTotal.When
		RETURN .F.
	ENDPROC

ENDDEFINE
