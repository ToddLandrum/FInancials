*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="compnew.scx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="2" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Cursor1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor2" UniqueID="" Timestamp="" />

	AutoOpenTables = .F.
	DataSource = .NULL.
	Height = 176
	Left = 67
	Name = "Dataenvironment"
	Top = 388
	Width = 510

	ADD OBJECT 'Cursor1' AS cursor WITH ;
		Alias = "compmast", ;
		BufferModeOverride = 5, ;
		CursorSource = ..\datafiles\compmast.dbf, ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor1", ;
		Top = 20, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor2' AS cursor WITH ;
		Alias = "compmast1", ;
		CursorSource = ..\datafiles\compmast.dbf, ;
		Height = 90, ;
		Left = 150, ;
		Name = "Cursor2", ;
		Top = 20, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

ENDDEFINE

DEFINE CLASS formcompnew AS frmdatamanagerformcustom OF "..\custom\cforms.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="txtCproducer" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblCproducer" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblCaddress1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtCaddress2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtCcity" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblCcity" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtCstate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtCzipcode" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtCphoneno" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblCphoneno" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtCprocessor" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblCprocessor" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtCtaxid" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblCtaxid" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcEmail" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lblfieldlabelcustom1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtCcontact" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblCcontact" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblCdatapath" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cntokcancelcustom1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cntgetfile1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcAddress1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtCfax" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblCfax" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: checkfiles		&& Checks and sets up the files.
		*m: checkpath
		*m: createcompany		&& Creates the company record and builds all the data files.
		*m: createpath
		*m: openalltables		&& Calls Stonefield Database Toolkit to open all the tables.
		*m: setdmopt		&& Set up the Disb Mgr options
		*m: updatetables		&& Creates or updates the tables in the given database
		*p: cidcomp
		*p: lsample		&& .T. if the sample files are used.
		*p: lusevfpc32
		*p: omega		&& Stonefield Database Toolkit object.
		*p: ometa
	*</DefinedPropArrayMethod>

	BufferMode = 2
	Caption = "Setup a New Company"
	cdataenvironment = 
	cidcomp = 
	cworkarea = 
	DataSession = 2
	DoCreate = .T.
	Height = 364
	HelpContextID = 45
	lrememberrecord = .F.
	lusevfpc32 = .F.
	Name = "FormCompnew"
	Width = 515
	_memberdata = <VFPData>
		<memberdata name="lusevfpc32" display="lUseVFPC32"/>
		</VFPData>
	cmdatamanager.Name = "cmdatamanager"
	cmdatamanager.TabIndex = 2
	cmlookupmanager.Name = "cmlookupmanager"
	Mwresize1.lblHighLight.Name = "lblHighLight"
	Mwresize1.lblShading.Name = "lblShading"
	Mwresize1.Name = "Mwresize1"
	Mwresize1.TabIndex = 1

	ADD OBJECT 'Cntgetfile1' AS cntgetfile WITH ;
		Height = 24, ;
		Left = 92, ;
		lfullpath = .T., ;
		lmustexist = .F., ;
		lpathonly = .T., ;
		Name = "Cntgetfile1", ;
		TabIndex = 25, ;
		Top = 273, ;
		Width = 421, ;
		cmdPath.FontBold = .T., ;
		cmdPath.FontSize = 10, ;
		cmdPath.Height = 20, ;
		cmdPath.Left = 392, ;
		cmdPath.Name = "cmdPath", ;
		cmdPath.TabStop = .F., ;
		cmdPath.Top = 2, ;
		edtPath.ControlSource = "compmast.cdatapath", ;
		edtPath.FontSize = 8, ;
		edtPath.Height = 20, ;
		edtPath.Left = 0, ;
		edtPath.Margin = 1, ;
		edtPath.Name = "edtPath", ;
		edtPath.SelectOnEntry = .T., ;
		edtPath.Top = 2, ;
		edtPath.Width = 388
		*< END OBJECT: ClassLib="..\custom\cgadget.vcx" BaseClass="container" />

	ADD OBJECT 'Cntokcancelcustom1' AS cntokcancelcustom WITH ;
		Height = 48, ;
		Left = 172, ;
		Name = "Cntokcancelcustom1", ;
		TabIndex = 26, ;
		Top = 299, ;
		Width = 174, ;
		cmdcancel.Height = 35, ;
		cmdcancel.Left = 95, ;
		cmdcancel.Name = "cmdcancel", ;
		cmdcancel.Top = 12, ;
		cmdcancel.Width = 75, ;
		cmdok.Default = .F., ;
		cmdok.Height = 35, ;
		cmdok.Left = 9, ;
		cmdok.Name = "cmdok", ;
		cmdok.Top = 12, ;
		cmdok.Width = 75
		*< END OBJECT: ClassLib="..\custom\cbutton.vcx" BaseClass="container" />

	ADD OBJECT 'lblCaddress1' AS lblfieldlabelcustom WITH ;
		Alignment = 0, ;
		Caption = "Address", ;
		Height = 16, ;
		Left = 40, ;
		Name = "lblCaddress1", ;
		TabIndex = 6, ;
		Top = 44, ;
		Width = 44
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblCcity' AS lblfieldlabelcustom WITH ;
		Alignment = 0, ;
		Caption = "City/ST/Zip", ;
		Height = 16, ;
		Left = 30, ;
		Name = "lblCcity", ;
		TabIndex = 11, ;
		Top = 92, ;
		Width = 54
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblCcontact' AS lblfieldlabelcustom WITH ;
		Alignment = 0, ;
		Caption = "Contact", ;
		Height = 16, ;
		Left = 45, ;
		Name = "lblCcontact", ;
		TabIndex = 20, ;
		Top = 210, ;
		Width = 39
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblCdatapath' AS lblfieldlabelcustom WITH ;
		Alignment = 0, ;
		Caption = "Data File Path", ;
		Height = 16, ;
		Left = 17, ;
		Name = "lblCdatapath", ;
		TabIndex = 24, ;
		Top = 277, ;
		Width = 67
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblCfax' AS lblfieldlabelcustom WITH ;
		Caption = "Fax No", ;
		Height = 16, ;
		Left = 221, ;
		Name = "lblCfax", ;
		TabIndex = 18, ;
		Top = 181, ;
		Width = 36
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblCphoneno' AS lblfieldlabelcustom WITH ;
		Alignment = 0, ;
		Caption = "Phone", ;
		Height = 16, ;
		Left = 52, ;
		Name = "lblCphoneno", ;
		TabIndex = 16, ;
		Top = 181, ;
		Width = 32
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblCprocessor' AS lblfieldlabelcustom WITH ;
		Alignment = 0, ;
		Caption = "Agent Name", ;
		Height = 16, ;
		Left = 23, ;
		Name = "lblCprocessor", ;
		TabIndex = 13, ;
		Top = 123, ;
		Width = 61
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblCproducer' AS lblfieldlabelcustom WITH ;
		Alignment = 0, ;
		Caption = "Company Name", ;
		Height = 16, ;
		Left = 7, ;
		Name = "lblCproducer", ;
		TabIndex = 4, ;
		Top = 20, ;
		Width = 77
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblCtaxid' AS lblfieldlabelcustom WITH ;
		Alignment = 0, ;
		Caption = "Tax ID", ;
		Height = 16, ;
		Left = 52, ;
		Name = "lblCtaxid", ;
		TabIndex = 15, ;
		Top = 152, ;
		Width = 32
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lblfieldlabelcustom1' AS lblfieldlabelcustom WITH ;
		Alignment = 1, ;
		Caption = "Email Addr", ;
		Height = 16, ;
		Left = 31, ;
		Name = "Lblfieldlabelcustom1", ;
		TabIndex = 23, ;
		Top = 243, ;
		Visible = .T., ;
		Width = 53, ;
		ZOrderSet = 18
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'txtcAddress1' AS txttextboxcustom WITH ;
		ControlSource = "compmast.caddress1", ;
		Height = 20, ;
		Left = 92, ;
		MaxLength = 40, ;
		Name = "txtcAddress1", ;
		TabIndex = 5, ;
		Top = 42, ;
		Width = 340
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtCaddress2' AS txttextboxcustom WITH ;
		ControlSource = "compmast.caddress2", ;
		Height = 20, ;
		Left = 92, ;
		MaxLength = 40, ;
		Name = "txtCaddress2", ;
		TabIndex = 7, ;
		Top = 66, ;
		Width = 340
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtCcity' AS txttextboxcustom WITH ;
		ControlSource = "compmast.ccity", ;
		Height = 20, ;
		Left = 92, ;
		MaxLength = 30, ;
		Name = "txtCcity", ;
		TabIndex = 8, ;
		Top = 90, ;
		Width = 166
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtCcontact' AS txttextboxcustom WITH ;
		ControlSource = "compmast.ccontact", ;
		Height = 20, ;
		Left = 92, ;
		MaxLength = 40, ;
		Name = "txtCcontact", ;
		TabIndex = 21, ;
		Top = 208, ;
		Width = 288
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcEmail' AS txttextboxcustom WITH ;
		ControlSource = "compmast.cemail", ;
		Height = 20, ;
		Left = 93, ;
		MaxLength = 40, ;
		Name = "txtcEmail", ;
		SelectOnEntry = .T., ;
		TabIndex = 22, ;
		Top = 241, ;
		Visible = .T., ;
		Width = 411, ;
		ZOrderSet = 17
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtCfax' AS txttextboxcustom WITH ;
		ControlSource = "compmast.cfax", ;
		Height = 20, ;
		Left = 265, ;
		MaxLength = 15, ;
		Name = "txtCfax", ;
		TabIndex = 19, ;
		Top = 179, ;
		Width = 111
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtCphoneno' AS txttextboxcustom WITH ;
		ControlSource = "compmast.cphoneno", ;
		Height = 20, ;
		InputMask = "", ;
		Left = 92, ;
		MaxLength = 15, ;
		Name = "txtCphoneno", ;
		TabIndex = 17, ;
		Top = 179, ;
		Width = 113
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtCprocessor' AS txttextboxcustom WITH ;
		ControlSource = "compmast.cprocessor", ;
		Height = 20, ;
		Left = 92, ;
		MaxLength = 40, ;
		Name = "txtCprocessor", ;
		TabIndex = 12, ;
		Top = 121, ;
		Width = 340
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtCproducer' AS txttextboxcustom WITH ;
		ControlSource = "compmast.cproducer", ;
		Height = 20, ;
		Left = 92, ;
		MaxLength = 40, ;
		Name = "txtCproducer", ;
		TabIndex = 3, ;
		Top = 18, ;
		Width = 340
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtCstate' AS txttextboxcustom WITH ;
		ControlSource = "compmast.cstate", ;
		Height = 20, ;
		InputMask = "!!", ;
		Left = 268, ;
		MaxLength = 2, ;
		Name = "txtCstate", ;
		TabIndex = 9, ;
		Top = 90, ;
		Width = 23
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtCtaxid' AS txttextboxcustom WITH ;
		cencryptionkey = SherWareKey_@8@2899909, ;
		ControlSource = "compmast.ctaxid", ;
		creadprivilege = Tax Ids, ;
		Height = 20, ;
		Left = 92, ;
		MaxLength = 15, ;
		Name = "txtCtaxid", ;
		TabIndex = 14, ;
		Top = 150, ;
		Width = 192
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtCzipcode' AS txttextboxcustom WITH ;
		ControlSource = "compmast.czipcode", ;
		Format = "!K", ;
		Height = 20, ;
		Left = 301, ;
		MaxLength = 10, ;
		Name = "txtCzipcode", ;
		TabIndex = 10, ;
		Top = 90, ;
		Width = 79
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />
	
	PROCEDURE checkfiles		&& Checks and sets up the files.
	ENDPROC

	PROCEDURE checkpath
		LPARAMETERS lcFile
		LOCAL lnX
		
		IF DIRECTORY(lcFile)
		   lnx = 1
		   DO WHILE DIRECTORY(lcFile+ALLT(STR(lnx)))
		      lnx = lnx + 1
		   ENDDO
		   lcFile = lcFile + ALLT(STR(lnx))
		ENDIF
		
		lcFile = LOWER(FULLPATH(ADDBS(lcFile)))
		
		RETURN (lcFile)
	ENDPROC

	PROCEDURE createcompany		&& Creates the company record and builds all the data files.
		LOCAL cDataPath, llFoundComp, lcidcomp, llCopySamp, llNoLogon, lcDataVersion
		
		llCopySamp = .F.
		
		IF TYPE('m.goApp') <> 'O'
		   THISFORM.oMessage.Severe('This form does not work in the development environment!')
		   *   RETURN
		ENDIF
		
		* Check for open forms. Don't allow setup of companies if a form is open.
		IF swOpenForms(THIS.NAME)
		   m.goapp.oMessage.Severe('All open forms must be closed before creating a new company.')
		   RETURN .F.
		ENDIF
		
		IF NOT USED('compmast')
		   USE (m.goapp.cCommonFolder + 'compmast') IN 0
		ENDIF
		SELECT compmast
		lcidcomp = compmast.cidcomp
		
		IF EMPTY(ALLTRIM(THISFORM.cntgetfile1.edtPath.VALUE))  &&  Don't let them proceed with a blank data file path
		   THISFORM.oMessage.Warning('Please specify a data file path location before proceeding.')
		   THISFORM.setnextcontrol(THISFORM.cntgetfile1.edtPath)
		   RETURN .F.
		ENDIF
		
		llFoundComp = .F.
		m.cDataPath = ADDBS(ALLTRIM(THISFORM.cntgetfile1.edtPath.VALUE))
		
		DO CASE
		   CASE FILE(ALLT(m.cDataPath) + 'ampro.exe')
		      llBadPath = .T.
		   CASE FILE(ALLT(m.cDataPath) + 'dmpro.exe')
		      llBadPath = .T.
		   CASE FILE(ALLT(m.cDataPath) + 'bmpro.exe')
		      llBadPath = .T.
		   OTHERWISE
		      llBadPath = .F.
		ENDCASE
		
		IF llBadPath
		   THISFORM.oMessage.Severe('The data file path is invalid. The path cannot be the same as the installation folder.')
		   THISFORM.setnextcontrol(THISFORM.cntgetfile1.edtPath)
		   RETURN .F.
		ENDIF
		
		IF EMPTY(THISFORM.txtcproducer.VALUE)
		   THISFORM.oMessage.Severe('You must supply a company name.')
		   THISFORM.setnextcontrol(THISFORM.txtcproducer)
		   RETURN .F.
		ENDIF
		
		lcVersion = m.goapp.cFileVersion
		
		m.cVersion = STRTRAN(lcVersion, '.', '')
		SELE compmast
		REPL cVersion WITH m.cVersion
		
		IF FILE(m.cDataPath + 'coa.dbf')
		   llFoundComp = .T.
		   IF FILE(m.cDataPath + 'version.dbf')
		      USE (m.cDataPath + 'version.dbf') IN 0
		      SELECT VERSION
		      GO TOP
		      lcDataVersion = cVersion
		      USE IN VERSION
		   ELSE
		      IF NOT USED('compmast')
		         USE datafiles\compmast IN 0
		      ENDIF
		      SELECT compmast
		      SCATTER MEMVAR
		      lnx     = AFIELDS(latemp)
		      lcTable = ALLTRIM(m.cDataPath) + 'version'
		      CREATE TABLE (lcTable) FREE FROM ARRAY latemp
		      INSERT INTO VERSION FROM MEMVAR
		      USE IN VERSION
		      lcDataVersion = m.cVersion
		   ENDIF
		   IF MESSAGEBOX('There are data files already in this path. Continuing will link this company to ' + ;
		         'those existing files. Do you want to continue?', 17, 'Existing Data Found') = 1
		
		      THISFORM.cmdatamanager.UPDATE('Compmast')
		
		      DO closecomp WITH .T.
		
		      IF m.cVersion > lcDataVersion
		         ERASE ADDBS(ALLTRIM(m.cDataPath)) + 'appdata.*'
		         m.cDataPath = ADDBS(ALLTRIM(m.cDataPath))
		
		         USE newdbc.DBC IN 0
		         SELECT newdbc
		         COPY TO (m.cDataPath + 'appdata.dbc') CDX
		         USE IN newdbc
		         lnHandle = FOPEN(m.cDataPath + 'appdata.dbc', 2)
		         = FSEEK(lnHandle, 28)
		         = FWRITE(lnHandle, CHR(7))
		         = FCLOSE(lnHandle)
		         USE (m.cDataPath + 'appdata.dbc') IN 0 EXCL
		         SELECT appdata
		         REINDEX
		         USE
		
		         IF FILE(m.cDataPath + 'appdata.dbc')
		            OPEN DATABASE (m.cDataPath + 'appdata')
		         ENDIF
		
		         * Create SDT object
		         m.goapp.opensdt()
		         oMeta.SetDatabase(DBC())
		
		         oMeta.oSDTMgr.UPDATE()
		
		         IF FILE(m.cDataPath + 'version.dbf')
		            USE (m.cDataPath + 'version') IN 0
		            SELECT VERSION
		            GO TOP
		            REPLACE cVersion WITH m.cVersion
		         ELSE
		            IF NOT USED('compmast')
		               USE datafiles\compmast IN 0
		            ENDIF
		            SELECT compmast
		            SCATTER MEMVAR
		            lnx     = AFIELDS(latemp)
		            lcTable = ALLTRIM(m.cDataPath) + 'version'
		            CREATE TABLE (lcTable) FREE FROM ARRAY latemp
		            INSERT INTO VERSION FROM MEMVAR
		            USE IN VERSION
		         ENDIF
		      ENDIF
		   ELSE
		      RETURN .F.
		   ENDIF
		
		   TRY
		      * Remove last open company files
		      ERASE (m.goapp.cCommonDocuments + '*.loc')
		   CATCH
		   ENDTRY
		
		   * Create last open company file
		   fh = FCREATE(m.goapp.cCommonDocuments + (lcidcomp) + '.loc')
		   FCLOSE(fh)
		   THISFORM.cidcomp = lcidcomp
		
		   IF DIRECTORY(m.cDataPath)
		      m.goapp.cDataFilePath = TRIM(m.cDataPath)
		      m.goapp.setsearchpath()
		      OPEN DATABASE (m.cDataPath + 'AppData')
		      llOK = m.goapp.logon()
		   ENDIF
		ELSE
		   llCopySamp = .T.
		   
		   * Put the dupechk1.txt file in the data folder so we don't run a dupe check on the new company
		   lcString = 'New Company - No dupe check needed'
		*   STRTOFILE(lcString,ALLTRIM(m.goapp.cDataFilePath)+'dupechk1.txt')  && No longer being used - 10/28/21 - pws
		
		   THISFORM.cmdatamanager.UPDATE('Compmast')
		
		   IF m.goapp.lAMVersion
		      IF THISFORM.oMessage.CONFIRM('Would you like to copy the sample chart of accounts and expense codes to your company?')
		         llCopySamp = .T.
		      ELSE
		         llCopySamp = .F.
		      ENDIF
		   ELSE
		      IF THISFORM.oMessage.CONFIRM('Would you like to copy the sample expense codes to your company?')
		         llCopySamp = .T.
		      ELSE
		         llCopySamp = .F.
		      ENDIF
		   ENDIF
		
		   llGoodPath = .T.
		
		   IF NOT DIRECTORY(m.cDataPath)
		      TRY
		         MD (m.cDataPath)
		         DO closecomp WITH .T.
		      CATCH
		         THISFORM.oMessage.Warning("There was a problem creating the files in the selected data file path. Make sure it's a valid location, and that you have full read/write access.")
		         llGoodPath = .F.
		      ENDTRY
		   ENDIF
		
		   IF NOT llGoodPath
		      RETURN .F.
		   ENDIF
		
		   *
		   *  Copy the dbc to the new directory
		   *
		
		   THISFORM.VISIBLE = .F.  &&  Make invisible during this time, to avoid any clicking that screws up stuff.
		
		   USE newdbc.DBC IN 0
		   SELECT newdbc
		   COPY TO (m.cDataPath + 'appdata.dbc') CDX
		   USE IN newdbc
		   lnHandle = FOPEN(m.cDataPath + 'appdata.dbc', 2)
		   = FSEEK(lnHandle, 28)
		   = FWRITE(lnHandle, CHR(7))
		   = FCLOSE(lnHandle)
		   USE (m.cDataPath + 'appdata.dbc') IN 0 EXCL
		   SELECT appdata
		   REINDEX
		   USE
		
		   CLOSE DATA ALL
		
		   TRY
		      ERASE (m.goapp.cCommonDocuments + '*.loc')
		   CATCH
		   ENDTRY
		
		   * Create last open company file
		   fh = FCREATE(m.goapp.cCommonDocuments + (lcidcomp) + '.loc')
		   FCLOSE(fh)
		
		   m.goapp.cDataFilePath = TRIM(m.cDataPath)
		   m.goapp.setsearchpath()
		   OPEN DATABASE (m.cDataPath + 'AppData')
		
		   * Create SDT object
		   m.goapp.opensdt()
		
		   * Create the tables for the new company
		   oMeta.SetDatabase(DBC())
		   oMeta.oSDTMgr.UPDATE()
		
		   IF NOT USED('appreg01')
		      USE (m.cDataPath + 'appreg01') IN 0
		   ENDIF
		
		   USE tempreg01 IN 0
		   SELECT appreg01
		   APPEND FROM DBF('tempreg01')
		
		   * Open the new company
		   IF m.goapp.lDemo
		      llNoLogon = .F.
		   ELSE
		      llNoLogon = .F.
		   ENDIF
		
		   * Create an options record so that the encryption question
		   * doesn't come up for new companies.
		   swselect('options')
		   IF RECCOUNT() = 0
		      APPEND BLANK
		   ENDIF
		   REPLACE lGross1099 WITH .T., ;
		      lEncrypted WITH .T.
		   m.goapp.lEncrypted = .T.
		
		
		   IF NOT USED('compmast')
		      USE datafiles\compmast IN 0
		   ENDIF
		   SELECT compmast
		   LOCATE FOR cidcomp == lcidcomp
		   SCATTER MEMVAR
		   lnx     = AFIELDS(latemp)
		   lcTable = m.goapp.cDataFilePath + 'version'
		   CREATE TABLE (lcTable) FREE FROM ARRAY latemp
		   INSERT INTO VERSION FROM MEMVAR
		   USE IN VERSION
		
		   m.goapp.cidcomp = lcidcomp
		   llOK            = m.goapp.logon()
		ENDIF
		
		IF m.goapp.lOpenCompany
		   IF NOT llFoundComp
		      IF m.goapp.lAMVersion
		         IF llCopySamp
		            THISFORM.lSample = .T.
		            swselect('coa')
		            IF FILE('sampcoa.dbf')
		               USE sampcoa IN 0
		               SELECT coa
		               IF RECCOUNT() = 0
		                  APPEND FROM DBF('sampcoa') FOR NOT lTotalAcct  &&  Don't include Totaling accounts - BH 06/02/2006
		               ENDIF
		               USE IN sampcoa
		            ENDIF
		            lnkey = 1000
		            swselect('expcat')
		            IF FILE('sampcat.dbf')
		               USE sampcat IN 0
		               SELECT sampcat
		               SCAN
		                  SCATTER MEMVAR
		                  m.cidexpc = PADL(TRANSFORM(lnkey),8,'0')
		                  lnkey = lnkey + 1
		                  SELECT expcat
		                  LOCATE FOR ccatcode = m.ccatcode
		                  IF NOT FOUND()
		                     INSERT INTO expcat FROM MEMVAR
		                  ENDIF    
		               ENDSCAN
		               SELECT expcat  &&  Scan and make sure the accounts that came from the sampcat file are valid - BH 8/15/06
		               SCAN
		                  swselect('coa')
		                  LOCATE FOR cAcctNo = expcat.cdraccto
		                  IF NOT FOUND()
		                     SELECT expcat
		                     REPLACE cdraccto WITH ''
		                  ENDIF
		                  swselect('coa')
		                  LOCATE FOR cAcctNo = expcat.cCrAcctV
		                  IF NOT FOUND()
		                     SELECT expcat
		                     REPLACE cCrAcctV WITH ''
		                  ENDIF
		               ENDSCAN
		               USE IN sampcat
		            ENDIF
		            swselect('revcat')
		            swselect('taxcodes')
		            IF FILE('samptax.dbf')
		               USE samptax IN 0
		               SELECT samptax
		               SCAN
		                  SCATTER MEMVAR
		                  SELECT taxcodes
		                  LOCATE FOR ctaxcode = m.ctaxcode
		                  IF NOT FOUND()
		                     INSERT INTO taxcodes FROM MEMVAR
		                  ENDIF
		               ENDSCAN
		               USE IN samptax
		            ENDIF
		            swselect('glacctyp')
		            IF FILE('samptype.dbf')
		               USE samptype IN 0
		               SELECT glacctyp
		               IF RECCOUNT() = 0
		                  APPEND FROM DBF('samptype')
		               ENDIF
		               USE IN samptype
		            ENDIF
		            swselect('options')
		            IF FILE('sampopt.dbf')
		               USE sampopt IN 0
		               SELECT options
		               APPEND FROM DBF('sampopt')
		               * Make gross 1099s be the default
		               REPLACE lGross1099 WITH .T., ;
		                  lEncrypted WITH .T.
		               m.goapp.lEncrypted = .T.
		               USE IN sampopt
		            ENDIF
		            swselect('landopt')
		            IF FILE('sampland.dbf')
		               USE sampland IN 0
		               SELECT landopt
		               APPEND FROM DBF('sampland')
		               USE IN sampland
		            ENDIF
		            swselect('glopt')
		            IF FILE('sampgl.dbf')
		               USE sampgl IN 0
		               SELECT glopt
		               DELETE ALL
		               APPEND FROM DBF('sampgl')
		               GO TOP
		               REPLACE lBunch WITH .F.  &&  Group by screen session s/b .f. by default - BH 03/05/2007
		               USE IN sampgl
		            ENDIF
		            swselect('apopt')
		            IF FILE('sampap.dbf')
		               USE sampap IN 0
		               SELECT apopt
		               APPEND FROM DBF('sampap')
		               USE IN sampap
		            ENDIF
		            swselect('aropt')
		            IF FILE('sampar.dbf')
		               USE sampar IN 0
		               SELECT aropt
		               APPEND FROM DBF('sampar')
		               USE IN sampar
		            ENDIF
		            swselect('propt')
		            IF FILE('samppr.dbf')
		               USE samppr IN 0
		               SELECT propt
		               APPEND FROM DBF('samppr')
		               USE IN samppr
		            ENDIF
		            swselect('progopt')
		            IF FILE('sampprog.dbf')
		               USE sampprog IN 0
		               SELECT progopt
		               APPEND FROM DBF('sampprog')
		               USE IN sampprog
		            ENDIF
		         ELSE  &&  Not copying sample stuff - always set up the sample account types - BH 1/10/06
		            swselect('glacctyp')
		            IF FILE('samptype.dbf')
		               USE samptype IN 0
		               SELECT glacctyp
		               IF RECCOUNT() = 0
		                  APPEND FROM DBF('samptype')
		               ENDIF    
		               USE IN samptype
		            ENDIF
		
		            swselect('taxcodes')
		            IF FILE('samptax.dbf')
		               USE samptax IN 0
		               SELECT samptax
		               SCAN
		                  SCATTER MEMVAR
		                  SELECT taxcodes
		                  LOCATE FOR ctaxcode = m.ctaxcode
		                  IF NOT FOUND()
		                     INSERT INTO taxcodes FROM MEMVAR
		                  ENDIF
		               ENDSCAN
		               USE IN samptax
		            ENDIF
		
		            * Make gross 1099s be the default
		            swselect('options')
		            IF RECCOUNT() = 0
		               APPEND BLANK
		            ENDIF
		            REPLACE lGross1099 WITH .T., ;
		               lEncrypted WITH .T.
		            m.goapp.lEncrypted = .T.
		
		         ENDIF
		      ELSE
		         IF llCopySamp
		            THISFORM.lSample = .T.
		            swselect('expcat')
		            IF FILE('sampcat.dbf')
		               DELETE ALL
		               lnkey = 10000
		               USE sampcat IN 0
		               SELECT sampcat
		               SCAN
		                  SCATTER MEMVAR
		                  m.cidexpc = PADL(TRANSFORM(lnkey),8,'0')
		                  lnkey = lnkey + 1
		                  SELECT expcat
		                  LOCATE FOR ccatcode = m.ccatcode
		                  IF NOT FOUND()
		                     INSERT INTO expcat FROM MEMVAR
		                  ENDIF    
		               ENDSCAN
		               USE IN sampcat
		            ENDIF
		            swselect('revcat')
		         ENDIF
		         swselect('taxcodes')
		         IF FILE('samptax.dbf')  &&  Always copy in the tax codes, even if they answer No about the expcat stuff - BH 06/18/2008
		            USE samptax IN 0
		            SELECT samptax
		            SCAN
		               SCATTER MEMVAR
		               SELECT taxcodes
		               LOCATE FOR ctaxcode = m.ctaxcode
		               IF NOT FOUND()
		                  INSERT INTO taxcodes FROM MEMVAR
		               ENDIF
		            ENDSCAN
		            USE IN samptax
		         ENDIF
		      ENDIF
		   ENDIF
		
		   IF NOT USED('compmast')
		      USE datafiles\compmast IN 0
		   ENDIF
		
		   *
		   *  Check to see if the glopt and payroll taxes tables need setup.
		   *
		   IF m.goapp.lAMVersion
		      THISFORM.checkfiles()
		   ELSE
		      *
		      *  Set the global options for the disbursement manager
		      *
		      THISFORM.setdmopt()
		   ENDIF
		  
		ENDIF
		
		RETURN .T.
		
		
	ENDPROC

	PROCEDURE createpath
		LOCAL lcValue
		*
		* Creates the company data path name from the company name
		*
		lcvalue = STRTRAN(THIS.txtcproducer.VALUE,' ','')
		lcvalue = STRTRAN(lcvalue,'.','')
		lcvalue = STRTRAN(lcvalue,'%','')
		lcvalue = STRTRAN(lcvalue,'&','')
		lcvalue = STRTRAN(lcvalue,' ','')
		lcvalue = STRTRAN(lcvalue,',','')
		lcValue = ALLTRIM(lcValue)+'Data'
		
		RETURN (lcValue)
		
	ENDPROC

	PROCEDURE Init
		LOCAL llReturn, lcdbcx
		
		IF DODEFAULT()
		   * Check for open forms. Don't allow setup of companies if a form is open.
		   IF swOpenForms(THIS.NAME)
		      m.goapp.oMessage.Severe('All open forms must be closed before creating a new company.')
		   ENDIF
		
		   llReturn = .T.
		
		   IF m.goapp.lDemo
		      SELECT compmast
		      COUNT FOR NOT DELETED() TO lnCount
		      IF lnCount > 1
		         MESSAGEBOX('Only one extra company is allowed besides the Sample Company while the software is in "DEMO" mode.',16,'Demo Mode Warning')
		         thisform.Release()
		         RETURN .f.
		      ENDIF 
		   ENDIF 
		   llReturn = .T.
		   IF NOT FILE(m.goapp.cCommonFolder+'bin\vfp2c32.fll')
		*      llReturn = GetVFPc32()
		   ENDIF 
		   thisform.lUseVFPC32 = llReturn
		   * Create a new record in compmast
		   THISFORM.new('Compmast')
		ENDIF
		
		
	ENDPROC

	PROCEDURE openalltables		&& Calls Stonefield Database Toolkit to open all the tables.
	ENDPROC

	PROCEDURE save
		LPARAMETERS cworkarealist
		
		*  Don't let them save with the word "Sample" in the company name, since that's used later to keep them
		*  from changing the name of the sample company
		IF 'SAMPLE' $ UPPER(thisform.txtcproducer.Value)
		   thisform.oMessage.Warning("The word 'Sample' cannot be part of a company name, since it's reserved for internal use.")
		   RETURN .f.
		ENDIF 
		
		IF thisform.createcompany()
		   thisform.release()   
		ELSE
		   RETURN .F.
		ENDIF
		
		   
		
	ENDPROC

	PROCEDURE setdmopt		&& Set up the Disb Mgr options
		
		swselect('options')
		
		* Don't add more than one options record
		COUNT FOR NOT DELETED() TO lnCount
		IF lnCount > 0
		   RETURN
		ENDIF 
		   
		SELECT options
		IF RECC() = 0
		   m.lacctdesc = .f.
		   m.lstmcomp  = .f.
		   m.nmincheck = 0
		   m.cchecktype = 'LV'
		   m.lstminv    = .f.
		   m.ldirinv    = .f.
		   m.nmin1099roy = 12.00
		   m.nmin1099non = 600.00
		   m.lzerostmt   = .t.
		   m.ldefstmt    = .t.
		   m.lminstmt    = .t.
		   m.ldirroy     = .f.
		   m.ldirwork    = .f.
		   m.lexpdate    = .f.
		   m.lpostdm     = .t.
		   m.lshowroy    = .t.
		   m.lgrpname    = .f.
		   m.lpostrev    = .t.
		   m.lrefid      = .f.
		   m.ljibnet     = .t.
		   m.lchgprice   = .f.
		   m.ldirtot     = .f.
		   m.lshowprev   = .t.
		   m.lcalcrange  = .f.
		   m.lcalcdays   = .f.
		   m.ldirwktax   = .f.
		   m.lUseOutlook = .f.
		   m.lexpsum     = .f.
		   m.lhidecomp   = .f.
		   m.lskipperf   = .f.
		   m.lgross1099  = .t.
		   m.nstubline   = 0
		   m.ncompress   = 0
		   m.ngather     = 0
		   m.ccheckno    = '000001'
		   m.cdisbacct   = '102000'
		   m.cdefacct    = '125000'
		   m.cminacct    = '210000'
		   m.csevacct    = '225000'
		   m.cbackacct   = '230000'
		   m.ctaxacct    = '230000'
		   m.lEncrypted  = .T.
		   INSERT INTO options FROM MEMVAR
		ENDIF   
	ENDPROC

	PROCEDURE updatetables		&& Creates or updates the tables in the given database
	ENDPROC

	PROCEDURE cmdatamanager.afternew
		LPARAMETERS cworkarea
		
		IF m.cWorkArea = 'Compmast'
		   SELECT compmast1
		   SET DELETED OFF
		   SET ORDER TO cidcomp
		   lcidcomp = thisform.oRegistry.IncrementCounter('%Local.Counters.Company Master')
		   DO WHILE SEEK(lcidcomp)
		      lcidcomp = thisform.oRegistry.IncrementCounter('%Local.Counters.Company Master')
		   ENDDO
		   SET DELETED ON
		   SELECT compmast
		   REPL cidcomp WITH lcidcomp   
		   m.goapp.cidcomp = lcidcomp  &&  Reset global variable, so the company info screen can go to the right record - BH 03/01/2007
		ENDIF   
	ENDPROC

	PROCEDURE Cntgetfile1.cmdPath.Click
		LOCAL cPath
		
		#INCLUDE vfp2c.h
		
		IF THIS.PARENT.lPathOnly
		    IF THISFORM.lUseVFPC32
		        SET LIBRARY TO m.goapp.cCommonFolder +'bin\vfp2c32.fll' ADDITIVE
		        INITVFP2C32(VFP2C_INIT_ALL)
		
		        LOCAL lcFolder
		
		        SHBROWSEFOLDER('Choose a Folder', BIF_NEWDIALOGSTYLE, @cPath)
		    ELSE
		        m.cPath = GETDIR(CURDIR(), 'Choose the folder containing the data for the company you want to connect to', 'Choose Data Folder', 64)
		    ENDIF
		ELSE
		    m.cPath = GETFILE(THIS.PARENT.cExtensionList)
		ENDIF
		IF NOT EMPTY(m.cPath)
		    THIS.PARENT.SetValue(m.cPath)
		ENDIF
		
		THISFORM.cntgetfile1.edtpath.VALUE = ADDBS(ALLTRIM(THISFORM.cntgetfile1.edtpath.VALUE))
		
		IF LEN(THISFORM.cntgetfile1.edtpath.VALUE) > 120  &&  Greater than the max, so don't let them choose it.
		    THISFORM.oMessage.Warning('The chosen path contains more than the maximum of 120 characters.  Please choose a different path, or use a relative path to shorten the length.')
		    THISFORM.cntgetfile1.edtpath.SET('value', '')
		ENDIF
		
		SELECT compmast
		REPLACE Cdatapath WITH ALLTRIM(THISFORM.cntgetfile1.edtpath.VALUE)
		THISFORM.cntgetfile1.edtpath.REFRESH()
		THISFORM.cntgetfile1.edtpath.SETFOCUS()
		
		
		
		
		
	ENDPROC

	PROCEDURE Cntokcancelcustom1.cmdcancel.Click
		
		thisform.cmdatamanager.revertall('Compmast')
		SELECT compmast
		IF compmast.cproducer = THISFORM.txtcproducer.VALUE
		   DELETE NEXT 1
		ENDIF 
		thisform.release()
	ENDPROC

	PROCEDURE Cntokcancelcustom1.cmdok.Click
		thisform.save()
		thisform.Release()
	ENDPROC

	PROCEDURE txtCproducer.LostFocus
		LOCAL lcFile
		
		IF DODEFAULT()
			lcFile = THISFORM.CreatePath()
		
			lcFile = LOWER(ALLTRIM(CURDIR()) + 'DataFiles\'+lcFile)
		
			lcFile = THISFORM.CheckPath(lcFile)
		
			SELECT compmast
			THISFORM.cmdatamanager.REPLACE('Compmast','Cdatapath',lcFile)
		
			THISFORM.cntgetfile1.edtpath.VALUE = lcFile
			THISFORM.cntgetfile1.edtpath.REFRESH()
		ENDIF
		
	ENDPROC

ENDDEFINE
