*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="dmgroups.scx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="2" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Cursor1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor3" UniqueID="" Timestamp="" />

	AutoOpenTables = .F.
	DataSource = .NULL.
	Height = 173
	Left = 40
	Name = "Dataenvironment"
	Top = 385
	Width = 278

	ADD OBJECT 'Cursor1' AS cursor WITH ;
		Alias = "groups", ;
		CursorSource = "groups", ;
		Database = s:\program distribution\ampro new\sampledata\appdata.dbc, ;
		Height = 90, ;
		Name = "Cursor1", ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor2' AS cursor WITH ;
		Alias = "groups1", ;
		CursorSource = "groups", ;
		Database = s:\program distribution\ampro new\sampledata\appdata.dbc, ;
		Height = 90, ;
		Left = 150, ;
		Name = "Cursor2", ;
		Top = 20, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor3' AS cursor WITH ;
		Alias = "wells", ;
		CursorSource = "wells", ;
		Database = s:\program distribution\ampro new\sampledata\appdata.dbc, ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor3", ;
		Top = 140, ;
		Width = 91
		*< END OBJECT: BaseClass="cursor" />

ENDDEFINE

DEFINE CLASS formdmgroups AS frmdatamanagerformcustom OF "..\custom\cforms.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="txtCgroup" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblCgroup" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtCdesc" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblCdesc" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkLnetdef" UniqueID="" Timestamp="" />

	Caption = "Well Group Definitions"
	clistexpression = groups.cgroup
	DoCreate = .T.
	Height = 104
	HelpContextID = 64
	lexpliciteditmode = .F.
	Name = "FormDmgroups"
	Width = 449
	CMDATAMANAGER.Name = "CMDATAMANAGER"
	cmlookupmanager.Name = "cmlookupmanager"

	ADD OBJECT 'chkLnetdef' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Net deficits within this group", ;
		ControlSource = "groups.lnetdef", ;
		Height = 16, ;
		Left = 144, ;
		Name = "chkLnetdef", ;
		Top = 76, ;
		Width = 155
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'lblCdesc' AS lblfieldlabelcustom WITH ;
		Alignment = 0, ;
		AutoSize = .T., ;
		Caption = "Group Name", ;
		Height = 16, ;
		Left = 45, ;
		Name = "lblCdesc", ;
		TabIndex = 4, ;
		Top = 45, ;
		Width = 62
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblCgroup' AS lblfieldlabelcustom WITH ;
		Alignment = 0, ;
		AutoSize = .T., ;
		Caption = "Group Code", ;
		Height = 16, ;
		Left = 45, ;
		Name = "lblCgroup", ;
		TabIndex = 2, ;
		Top = 16, ;
		Width = 60
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'txtCdesc' AS txttextboxcustom WITH ;
		ControlSource = "groups.cdesc", ;
		Height = 20, ;
		Left = 144, ;
		lrequired = .T., ;
		MaxLength = 40, ;
		Name = "txtCdesc", ;
		TabIndex = 5, ;
		Top = 43, ;
		Width = 288
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtCgroup' AS txttextboxcustom WITH ;
		ControlSource = "groups.cgroup", ;
		Height = 20, ;
		InputMask = "!!", ;
		Left = 144, ;
		lrequired = .T., ;
		MaxLength = 2, ;
		Name = "txtCgroup", ;
		TabIndex = 3, ;
		Top = 14, ;
		Width = 28
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />
	
	PROCEDURE delete
		LPARAMETERS cworkarea
		frmDataForm::Delete(cworkarea)
	ENDPROC

	PROCEDURE list
		LPARAMETERS cworkarea
		LOCAL lcList, lnRecNo
		PRIV llOK
		
		llOK = .T.
		lcList = 'cgroup\Code,cdesc\Group Description'
		
		SELECT groups
		lnRecNo = RECNO()
		
		IF this.flushcontrolbuffer() AND this.beforenav('Groups')
		   DO FORM ..\custom\picklist WITH 'Groups', lcList, thisform.txtcgroup.value, 2,.f.,.t.
		   
		   IF NOT llOK
		      GOTO lnRecNo
		   ENDIF   
		
		   thisform.refresh()
		ELSE
		   RETURN 
		ENDIF   
		
		
	ENDPROC

	PROCEDURE CMDATAMANAGER.afternew
		LPARAMETERS cworkarea
		
		thisform.setnextcontrol(thisform.txtcgroup)
		
		DODEFAULT(cworkarea)
	ENDPROC

	PROCEDURE CMDATAMANAGER.beforedelete
		LPARAMETERS cworkarea
		
		IF m.cworkarea = 'Groups'
		   SELE wells
		   LOCATE FOR wells.cgroup = groups.cgroup
		   IF FOUND()
		      THISFORM.omessage.warning('This group cannot be deleted since there are wells in this group.')
		      RETURN .F.
		   ENDIF
		ENDIF
		
	ENDPROC

	PROCEDURE CMDATAMANAGER.beforeupdate
		LPARAMETERS cworkarealist
		
		IF THISFORM.txtcGroup.VALUE = '**'  &&  Don't let them save a code of **, since that will screw up reporting later - BH - 1-21-2004
		   THISFORM.oMessage.Warning('You cannot save a group with a code of **, since that code is reserved for internal system use.')
		   thisform.txtcGroup.set('value','')
		   thisform.setnextcontrol(thisform.txtcGroup)
		   RETURN .F.
		ENDIF
		
		DODEFAULT(cworkarealist)
		
	ENDPROC

	PROCEDURE txtCgroup.Valid
		* Check for the existence of a group with the same id
		lcGroup = THIS.VALUE
		IF NOT EMPTY(lcGroup) AND lcGroup <> groups.cgroup
		   SET DELETED OFF
		   SELECT groups1
		   SET ORDER TO cgroup
		   IF SEEK(lcGroup)
		      IF NOT DELETED()
		         IF THISFORM.omessage.CONFIRM('There is already a group with this ID.  Would you like to edit the existing record?')
		            THISFORM.cmdatamanager.revertall()
		            SELECT groups
		            SET ORDER TO cgroup
		            LOCATE FOR cgroup= lcGroup
		            THISFORM.REFRESH()
		         ELSE
		            THIS.VALUE = ''
		            RETURN 0
		         ENDIF
		      ELSE
		         THISFORM.cmdatamanager.revertall()
		         SELECT groups
		         SET ORDER TO cgroup
		         LOCATE FOR cgroup = lcGroup
		         RECALL
		         REPLACE cdesc WITH ''
		         REPLACE lnetdef WITH .F.
		         THISFORM.REFRESH()
		      ENDIF
		   ENDIF
		   SET DELETED ON
		   SELECT groups
		ENDIF
		
		DODEFAULT()
		
		
	ENDPROC

ENDDEFINE
