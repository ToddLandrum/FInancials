*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="dmfixedpct.scx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="2" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Cursor4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor6" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor14" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor15" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor7" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor1" UniqueID="" Timestamp="" />

	AutoOpenTables = .F.
	DataSource = .NULL.
	Height = 619
	Left = 39
	Name = "Dataenvironment"
	Top = 339
	Width = 831

	ADD OBJECT 'Cursor1' AS cursor WITH ;
		Alias = "wellfixed", ;
		BufferModeOverride = 5, ;
		CursorSource = "wellfixed", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 29, ;
		Name = "Cursor1", ;
		NoDataOnLoad = .T., ;
		Top = 34, ;
		Width = 91
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor14' AS cursor WITH ;
		Alias = "options", ;
		CursorSource = "options", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 268, ;
		Name = "Cursor14", ;
		Top = 162, ;
		Width = 97
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor15' AS cursor WITH ;
		Alias = "expense1", ;
		BufferModeOverride = 5, ;
		CursorSource = "expense", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 387, ;
		Name = "Cursor15", ;
		Order = "", ;
		Top = 164, ;
		Width = 91
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor2' AS cursor WITH ;
		Alias = "expense", ;
		BufferModeOverride = 5, ;
		CursorSource = "expense", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Filter = "cyear='FIXD'", ;
		Height = 90, ;
		Left = 487, ;
		Name = "Cursor2", ;
		Order = "", ;
		Top = 32, ;
		Width = 97
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor3' AS cursor WITH ;
		Alias = "expcat", ;
		CursorSource = "expcat", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 261, ;
		Name = "Cursor3", ;
		Top = 35, ;
		Width = 91
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor4' AS cursor WITH ;
		Alias = "investor", ;
		CursorSource = "investor", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 151, ;
		Name = "Cursor4", ;
		Top = 161, ;
		Width = 97
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor5' AS cursor WITH ;
		Alias = "vendor", ;
		CursorSource = "vendor", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 31, ;
		Name = "Cursor5", ;
		Top = 162, ;
		Width = 97
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor6' AS cursor WITH ;
		Alias = "wells", ;
		CursorSource = "wells", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Filter = "inlist(cwellstat,'A','T','D','N')", ;
		Height = 90, ;
		Left = 150, ;
		Name = "Cursor6", ;
		Order = "cwellid", ;
		Top = 36, ;
		Width = 91
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor7' AS cursor WITH ;
		Alias = "wellinv", ;
		CursorSource = "wellinv", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 375, ;
		Name = "Cursor7", ;
		Top = 32, ;
		Width = 91
		*< END OBJECT: BaseClass="cursor" />
	
	PROCEDURE OpenTables
		
		
	ENDPROC

ENDDEFINE

DEFINE CLASS formdmwellexpense AS frmdatamanagerformcustom OF "..\custom\cforms.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="txtcWellName" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Shpshapecustom1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblWellid2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column1.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column1.txtcCategory" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column2.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column2.txtcatcode" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column3.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column3.txtcPayee" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column4.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column4.txtnAmount" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column5.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column5.txtcOwnerIDgrd" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column6.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column6.chklCopy" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column7.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column7.txtClass" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcWellID" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblGroup" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtTotalExp" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdLookWell" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcatcode" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcCategory" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbltextcustom17" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="spnBBL" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblDate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbltextcustom2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcRefID" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdLookVend" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblRefid" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcVendName" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtMaxAmount" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdLookCat" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtnAmount" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcVendorID" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcOwnerID" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdOwner" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcNotes" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblMemo" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdSaveDetail" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdDelDetail" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdEditDetail" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdCopy" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboClass" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="opgType" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblMaxAmt" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: adddetail		&& Add the detail information to the income table
		*m: calctot		&& Calculates the total  income for the period.
		*m: editdetail		&& Brings the current record in the grid up to the detail section in the form.
		*m: loaddetail
		*p: ldolostfocus
	*</DefinedPropArrayMethod>

	Caption = "Recurring Well Expenses"
	clistexpression = wellfixed.cwellid
	cnavworkarea = wells
	cworkarea = wells
	DoCreate = .T.
	Height = 403
	HelpContextID = 68
	lrememberposition = .F.
	Name = "FormDmwellexpense"
	Visible = .T.
	Width = 629
	cmdatamanager.Name = "cmdatamanager"
	cmdatamanager.TabIndex = 2
	cmdatamanager.ZOrderSet = 0
	cmlookupmanager.Name = "cmlookupmanager"
	Mwresize1.lblHighLight.Name = "lblHighLight"
	Mwresize1.lblShading.Name = "lblShading"
	Mwresize1.Name = "Mwresize1"
	Mwresize1.TabIndex = 1
	Mwresize1.ZOrderSet = 4

	ADD OBJECT 'cboClass' AS cbocomboboxcustom WITH ;
		ColumnCount = 2, ;
		Height = 20, ;
		Left = 258, ;
		Name = "cboClass", ;
		TabIndex = 22, ;
		Top = 132, ;
		Width = 40, ;
		ZOrderSet = 34
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="combobox" />

	ADD OBJECT 'cmdCopy' AS cmdcommandbuttoncustom WITH ;
		Caption = "Copy Expenses", ;
		FontBold = .T., ;
		ForeColor = 255,0,0, ;
		Height = 22, ;
		Left = 238, ;
		Name = "cmdCopy", ;
		TabIndex = 32, ;
		Top = 370, ;
		Width = 97, ;
		ZOrderSet = 32
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdDelDetail' AS cmdcommandbuttoncustom WITH ;
		Caption = "Delete Detail Line", ;
		Height = 22, ;
		Left = 20, ;
		Name = "cmdDelDetail", ;
		TabIndex = 30, ;
		Top = 370, ;
		Width = 97, ;
		ZOrderSet = 30
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdEditDetail' AS cmdcommandbuttoncustom WITH ;
		Caption = "Edit Detail Line", ;
		Height = 22, ;
		Left = 129, ;
		Name = "cmdEditDetail", ;
		TabIndex = 31, ;
		Top = 370, ;
		Width = 97, ;
		ZOrderSet = 31
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdLookCat' AS cmdcommandbuttoncustom WITH ;
		Caption = "Expense Desc", ;
		Height = 23, ;
		Left = 19, ;
		Name = "cmdLookCat", ;
		TabIndex = 8, ;
		Top = 53, ;
		Width = 108, ;
		ZOrderSet = 22
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdLookVend' AS cmdcommandbuttoncustom WITH ;
		Caption = "Vendor", ;
		Height = 23, ;
		Left = 287, ;
		Name = "cmdLookVend", ;
		TabIndex = 9, ;
		Top = 53, ;
		Width = 46, ;
		ZOrderSet = 18
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdLookWell' AS cmdcommandbuttoncustom WITH ;
		Caption = " Well ID", ;
		Height = 20, ;
		Left = 18, ;
		Name = "cmdLookWell", ;
		TabIndex = 3, ;
		Top = 11, ;
		Width = 48, ;
		ZOrderSet = 10
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdOwner' AS cmdcommandbuttoncustom WITH ;
		Caption = "Allocate All To", ;
		Height = 20, ;
		Left = 316, ;
		Name = "cmdOwner", ;
		TabIndex = 23, ;
		Top = 132, ;
		ZOrderSet = 26
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdSaveDetail' AS cmdcommandbuttoncustom WITH ;
		Caption = "\<Save Detail", ;
		Left = 507, ;
		Name = "cmdSaveDetail", ;
		TabIndex = 25, ;
		Top = 132, ;
		ZOrderSet = 29
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'Grdgridcustom1' AS grdgridcustom WITH ;
		AllowHeaderSizing = .F., ;
		AllowRowSizing = .F., ;
		ColumnCount = 7, ;
		cworkarea = wellfixed, ;
		Height = 190, ;
		lcolumnmemory = .F., ;
		Left = 7, ;
		LinkMaster = "", ;
		Name = "Grdgridcustom1", ;
		Panel = 1, ;
		RecordSource = "wellfixed", ;
		RelationalExpr = "", ;
		TabIndex = 27, ;
		Top = 172, ;
		Width = 605, ;
		ZOrderSet = 6, ;
		Column1.ColumnOrder = 2, ;
		Column1.ControlSource = "wellfixed.ccateg", ;
		Column1.FontName = "Courier New", ;
		Column1.FontSize = 8, ;
		Column1.Name = "Column1", ;
		Column1.Width = 177, ;
		Column2.ColumnOrder = 3, ;
		Column2.ControlSource = "wellfixed.ccatcode", ;
		Column2.FontName = "Courier New", ;
		Column2.FontSize = 8, ;
		Column2.Name = "Column2", ;
		Column2.Width = 39, ;
		Column3.ColumnOrder = 5, ;
		Column3.ControlSource = "wellfixed.cpayee", ;
		Column3.FontName = "Courier New", ;
		Column3.FontSize = 8, ;
		Column3.Name = "Column3", ;
		Column3.Width = 171, ;
		Column4.ColumnOrder = 7, ;
		Column4.ControlSource = "wellfixed.namount", ;
		Column4.FontName = "Courier New", ;
		Column4.FontSize = 8, ;
		Column4.Name = "Column4", ;
		Column4.Width = 74, ;
		Column5.ColumnOrder = 6, ;
		Column5.ControlSource = "wellfixed.cownerid", ;
		Column5.FontSize = 8, ;
		Column5.Name = "Column5", ;
		Column5.Width = 67, ;
		Column6.ColumnOrder = 1, ;
		Column6.ControlSource = "wellfixed.laptran", ;
		Column6.Name = "Column6", ;
		Column6.Sparse = .F., ;
		Column6.Width = 14, ;
		Column7.ColumnOrder = 4, ;
		Column7.ControlSource = "wellfixed.cexpclass", ;
		Column7.FontSize = 8, ;
		Column7.Name = "Column7", ;
		Column7.Width = 21
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="grid" />

	ADD OBJECT 'Grdgridcustom1.Column1.Header1' AS header WITH ;
		Caption = "Expense Description", ;
		FontSize = 8, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'Grdgridcustom1.Column1.txtcCategory' AS txtquickfill WITH ;
		clistexpression = ccateg, ;
		clistworkarea = expcat, ;
		ControlSource = "wellfixed.ccateg", ;
		lallowexceptions = .F., ;
		Left = 109, ;
		Name = "txtcCategory", ;
		Top = 23
		*< END OBJECT: ClassLib="..\custom\cgadget.vcx" BaseClass="textbox" />

	ADD OBJECT 'Grdgridcustom1.Column2.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "Code", ;
		FontSize = 8, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'Grdgridcustom1.Column2.txtcatcode' AS txtquickfill WITH ;
		clistexpression = ccatcode, ;
		clistworkarea = expcat, ;
		ControlSource = "wellfixed.ccatcode", ;
		Left = 17, ;
		Name = "txtcatcode", ;
		Top = 28
		*< END OBJECT: ClassLib="..\custom\cgadget.vcx" BaseClass="textbox" />

	ADD OBJECT 'Grdgridcustom1.Column3.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "Vendor Name", ;
		FontSize = 8, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'Grdgridcustom1.Column3.txtcPayee' AS txtquickfill WITH ;
		clistexpression = cvendname, ;
		clistworkarea = vendor, ;
		ControlSource = "wellfixed.cpayee", ;
		Left = 90, ;
		Name = "txtcPayee", ;
		Top = 23
		*< END OBJECT: ClassLib="..\custom\cgadget.vcx" BaseClass="textbox" />

	ADD OBJECT 'Grdgridcustom1.Column4.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "Total", ;
		FontName = "Arial", ;
		FontSize = 8, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'Grdgridcustom1.Column4.txtnAmount' AS txttextboxcustom WITH ;
		ControlSource = "wellfixed.namount", ;
		FontName = "Courier New", ;
		FontSize = 8, ;
		Left = 54, ;
		Name = "txtnAmount", ;
		Top = 31
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'Grdgridcustom1.Column5.Header1' AS header WITH ;
		Caption = "Owner", ;
		FontSize = 8, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'Grdgridcustom1.Column5.txtcOwnerIDgrd' AS textbox WITH ;
		BackColor = 255,255,255, ;
		BorderStyle = 0, ;
		ControlSource = "wellfixed.cownerid", ;
		FontSize = 8, ;
		ForeColor = 0,0,0, ;
		Format = "!", ;
		Margin = 0, ;
		MaxLength = 10, ;
		Name = "txtcOwnerIDgrd"
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'Grdgridcustom1.Column6.chklCopy' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "", ;
		ControlSource = "wellfixed.laptran", ;
		Left = 13, ;
		Name = "chklCopy", ;
		Top = 31
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'Grdgridcustom1.Column6.Header1' AS header WITH ;
		Caption = "", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'Grdgridcustom1.Column7.Header1' AS header WITH ;
		Caption = "Cls", ;
		FontSize = 8, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'Grdgridcustom1.Column7.txtClass' AS textbox WITH ;
		BackColor = 255,255,255, ;
		BorderStyle = 0, ;
		ControlSource = "wellfixed.cexpclass", ;
		FontSize = 8, ;
		ForeColor = 0,0,0, ;
		Margin = 0, ;
		Name = "txtClass"
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'lblDate' AS lblfieldlabelcustom WITH ;
		Caption = "Code", ;
		Height = 16, ;
		Left = 252, ;
		Name = "lblDate", ;
		TabIndex = 11, ;
		Top = 62, ;
		Width = 27, ;
		ZOrderSet = 15
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblGroup' AS lbllabelcustom WITH ;
		Caption = " ", ;
		Left = 609, ;
		Name = "lblGroup", ;
		TabIndex = 7, ;
		Top = 13, ;
		ZOrderSet = 8
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom5' AS lbllabelcustom WITH ;
		Caption = "DOI Class", ;
		FontBold = .F., ;
		Left = 203, ;
		Name = "Lbllabelcustom5", ;
		TabIndex = 33, ;
		Top = 134, ;
		ZOrderSet = 33
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblMaxAmt' AS lbllabelcustom WITH ;
		Caption = "Max Amt:", ;
		Left = 456, ;
		Name = "lblMaxAmt", ;
		TabIndex = 35, ;
		Top = 108, ;
		Visible = .F., ;
		ZOrderSet = 36
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblMemo' AS lblfieldlabelcustom WITH ;
		Caption = "Memo:", ;
		Height = 16, ;
		Left = 103, ;
		Name = "lblMemo", ;
		TabIndex = 20, ;
		Top = 110, ;
		Width = 33, ;
		ZOrderSet = 28
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblRefid' AS lblfieldlabelcustom WITH ;
		Caption = "Refid:", ;
		Height = 16, ;
		Left = 20, ;
		Name = "lblRefid", ;
		TabIndex = 26, ;
		Top = 136, ;
		Width = 30, ;
		ZOrderSet = 19
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbltextcustom17' AS lbltextcustom WITH ;
		Caption = "Total Fixed Expenses:", ;
		Left = 379, ;
		Name = "Lbltextcustom17", ;
		TabIndex = 29, ;
		Top = 373, ;
		ZOrderSet = 13
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbltextcustom2' AS lbltextcustom WITH ;
		AutoSize = .T., ;
		Caption = "BBL", ;
		Left = 20, ;
		Name = "Lbltextcustom2", ;
		TabIndex = 19, ;
		Top = 110, ;
		ZOrderSet = 16
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblWellid2' AS lblfieldlabelcustom WITH ;
		Caption = "Well Name:", ;
		FontSize = 8, ;
		Height = 16, ;
		Left = 160, ;
		Name = "lblWellid2", ;
		TabIndex = 6, ;
		Top = 13, ;
		Width = 55, ;
		ZOrderSet = 5
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'opgType' AS opgoptiongroupcustom WITH ;
		AutoSize = .T., ;
		BorderStyle = 0, ;
		ButtonCount = 2, ;
		Height = 27, ;
		Left = 494, ;
		Name = "opgType", ;
		TabIndex = 34, ;
		Top = 54, ;
		Value = 1, ;
		Width = 135, ;
		ZOrderSet = 35, ;
		Option1.BackStyle = 0, ;
		Option1.Caption = "Amount", ;
		Option1.FontSize = 8, ;
		Option1.Height = 17, ;
		Option1.Left = 5, ;
		Option1.Name = "Option1", ;
		Option1.Top = 5, ;
		Option1.Value = 1, ;
		Option1.Width = 61, ;
		Option2.BackStyle = 0, ;
		Option2.Caption = "Pct", ;
		Option2.FontSize = 8, ;
		Option2.Height = 17, ;
		Option2.Left = 69, ;
		Option2.Name = "Option2", ;
		Option2.Top = 5, ;
		Option2.Width = 61
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="optiongroup" />

	ADD OBJECT 'Shpshapecustom1' AS shpshapecustom WITH ;
		BackColor = 255,255,128, ;
		Height = 121, ;
		Left = 6, ;
		Name = "Shpshapecustom1", ;
		Top = 42, ;
		Width = 606, ;
		ZOrderSet = 2
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="shape" />

	ADD OBJECT 'spnBBL' AS spnspinnercustom WITH ;
		Height = 20, ;
		Left = 44, ;
		Name = "spnBBL", ;
		TabIndex = 16, ;
		Top = 106, ;
		Width = 51, ;
		ZOrderSet = 14
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="spinner" />

	ADD OBJECT 'txtcatcode' AS txtquickfill WITH ;
		clistexpression = ccatcode, ;
		clistworkarea = expcat, ;
		Height = 20, ;
		Left = 246, ;
		Name = "txtcatcode", ;
		TabIndex = 13, ;
		Top = 80, ;
		Width = 36, ;
		ZOrderSet = 11
		*< END OBJECT: ClassLib="..\custom\cgadget.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcCategory' AS txtquickfill WITH ;
		clistexpression = ccateg, ;
		clistworkarea = expcat, ;
		Height = 20, ;
		Left = 19, ;
		Name = "txtcCategory", ;
		TabIndex = 12, ;
		Top = 80, ;
		Width = 222, ;
		ZOrderSet = 12
		*< END OBJECT: ClassLib="..\custom\cgadget.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcNotes' AS txttextboxcustom WITH ;
		ControlSource = "", ;
		Height = 20, ;
		Left = 140, ;
		MaxLength = 40, ;
		Name = "txtcNotes", ;
		TabIndex = 17, ;
		Top = 106, ;
		Width = 460, ;
		ZOrderSet = 27
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcOwnerID' AS txtquickfill WITH ;
		clistexpression = cOwnerid, ;
		clistworkarea = investor, ;
		ControlSource = "", ;
		Height = 20, ;
		Left = 399, ;
		MaxLength = 10, ;
		Name = "txtcOwnerID", ;
		TabIndex = 24, ;
		Top = 132, ;
		Width = 76, ;
		ZOrderSet = 25
		*< END OBJECT: ClassLib="..\custom\cgadget.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcRefID' AS txttextboxcustom WITH ;
		ControlSource = "", ;
		Height = 20, ;
		Left = 56, ;
		MaxLength = 20, ;
		Name = "txtcRefID", ;
		TabIndex = 21, ;
		Top = 132, ;
		Width = 131, ;
		ZOrderSet = 17
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcVendName' AS txtquickfill WITH ;
		clistexpression = cvendname, ;
		clistworkarea = vendor, ;
		Height = 20, ;
		Left = 287, ;
		Name = "txtcVendName", ;
		TabIndex = 14, ;
		Top = 80, ;
		Width = 200, ;
		ZOrderSet = 20
		*< END OBJECT: ClassLib="..\custom\cgadget.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcVendorID' AS txttextboxcustom WITH ;
		BackColor = 212,208,200, ;
		Height = 20, ;
		Left = 417, ;
		Name = "txtcVendorID", ;
		TabIndex = 10, ;
		Top = 54, ;
		Width = 70, ;
		ZOrderSet = 24
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcWellID' AS txtquickfill WITH ;
		clistexpression = cWellID, ;
		clistworkarea = wells, ;
		ControlSource = "", ;
		Height = 20, ;
		Left = 70, ;
		lrequired = .T., ;
		MaxLength = 10, ;
		Name = "txtcWellID", ;
		TabIndex = 4, ;
		Top = 11, ;
		Width = 84, ;
		ZOrderSet = 7
		*< END OBJECT: ClassLib="..\custom\cgadget.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcWellName' AS txttextboxcustom WITH ;
		BackColor = 212,208,200, ;
		ControlSource = "", ;
		FontSize = 8, ;
		Height = 20, ;
		Left = 222, ;
		MaxLength = 0, ;
		Name = "txtcWellName", ;
		TabIndex = 5, ;
		Top = 11, ;
		Width = 378, ;
		ZOrderSet = 1
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtMaxAmount' AS txttextboxcustom WITH ;
		ControlSource = "", ;
		Format = "999999.99", ;
		Height = 20, ;
		InputMask = "999999.99", ;
		Left = 504, ;
		Name = "txtMaxAmount", ;
		TabIndex = 18, ;
		Top = 106, ;
		Visible = .F., ;
		Width = 95, ;
		ZOrderSet = 21
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtnAmount' AS txttextboxcustom WITH ;
		ControlSource = "", ;
		Height = 20, ;
		InputMask = "999999.99", ;
		Left = 487, ;
		Name = "txtnAmount", ;
		TabIndex = 15, ;
		Top = 80, ;
		Width = 113, ;
		ZOrderSet = 23
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtTotalExp' AS txttextboxcustom WITH ;
		Height = 20, ;
		Left = 499, ;
		Name = "txtTotalExp", ;
		TabIndex = 28, ;
		Top = 371, ;
		Width = 91, ;
		ZOrderSet = 9
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />
	
	PROCEDURE adddetail		&& Add the detail information to the income table
		LOCAL m.cWellID, m.cYear, m.cPeriod, m.cSource, m.cRevKey, m.nUnits
		LOCAL m.nPrice, m.nTotalInc, m.cBegRange, m.cEndRange, m.cNotes
		LOCAL m.cOwnerID, m.nDaysOn
		
		*  Don't save if the category is empty
		   IF EMPTY(THISFORM.txtcCategory.VALUE)
		      THISFORM.omessage.DISPLAY('A detail line must have a category assigned to it. Please correct.')
		      THISFORM.setnextcontrol(THISFORM.txtcCategory)
		      RETURN .f.
		   ENDIF
		
		*  Store the detail in memory variables that are the same names
		*  as the table fields
		   m.cidexpe    = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Expense')
		
		   SELECT expense1
		   SET ORDER TO cidexpe
		   SET DELE OFF
		   DO WHILE SEEK(m.cidexpe)
		      m.cidexpe    = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Expense')
		   ENDDO
		   SET DELE ON
		
		   m.cBatch      = ''
		   m.cidexph     = ''
		   m.cWellID     = wells.cWellID
		   m.cPeriod     = ''
		   m.cYear       = 'FIXD'
		   m.cRunYearRev = 'FIXD'
		   m.nRunNoRev   = 0
		   m.cRunYearJIB = 'FIXD'
		   m.nRunNoJIB   = 0
		   m.cCateg      = THISFORM.txtcCategory.VALUE
		   m.cVendorID   = THISFORM.txtcVendorID.VALUE
		   m.cPayee      = THISFORM.txtcVendName.VALUE
		   m.dExpDate    = {}
		   m.ccatcode    = THISFORM.txtcatcode.VALUE
		   m.nAmount     = THISFORM.txtnAmount.VALUE
		   m.cRefID      = THISFORM.txtcRefID.VALUE
		   m.cMemo       = THISFORM.txtcNotes.VALUE
		   m.cOwnerID    = THISFORM.txtcOwnerID.VALUE
		   m.nSaltWater  = THISFORM.spnBBL.VALUE
		   m.iType       = thisform.opgType.Value 
		   m.nMaxAmount  = thisform.txtmaxAmount.Value 
		   m.cPaidByCk   = ''
		   m.cPrdPaid    = ''
		   m.lAPTran     = .F.
		   m.cExpClass   = THISFORM.cboClass.VALUE
		
		   IF EMPTY(m.cExpClass)
		      m.cExpClass = '0'
		   ENDIF
		
		   IF m.ccatcode = 'PLUG'
		      SWSELECT('vendor')
		      SET ORDER TO cVendorID
		      IF SEEK(m.cVendorID) AND vendor.linteggl = .F.
		         MESSAGEBOX('Plugging exepenses must be entered with a vendor that is marked to post to the G/L.', 16, 'Wrong Vendor')
		         RETURN .f.
		      ENDIF
		
		      SWSELECT('plugwell')
		      LOCATE FOR cWellID = m.cWellID
		      IF NOT FOUND()
		         MESSAGEBOX('The "PLUG" expense code is designated for the Plugging module. ' + ;
		              'A target must be setup on the Plugging Fund Well Targets window ' + ;
		              'for this well before you can use the PLUG expense code for the well.', 16, 'Missing Plugging Target')
		         RETURN .f.
		      ENDIF
		   ENDIF
		
		*  Check to see if a valid vendor was chosen.
		   IF m.goApp.lAMVersion OR m.goApp.lQBVersion
		      SELE vendor
		      LOCATE FOR cVendorID == m.cVendorID
		      IF NOT FOUND()
		         THISFORM.omessage.warning('There must be a valid vendor associated with this expense. Please enter a vendor.')
		         THISFORM.setnextcontrol(THISFORM.txtcVendName)
		         RETURN .f.
		      ENDIF
		   ENDIF
		
		*  Get the fiscal year and period from the accounting date entered
		   m.cAcctPrd  = ''
		   m.cAcctYear = ''
		
		   STORE .F. TO m.lOneMan, m.lAPTran, m.lClosed
		
		   THISFORM.cmdatamanager.new('wellfixed')
		   SELECT wellfixed
		   THISFORM.cmdatamanager.REPLACE('wellfixed', 'cidexpe', m.cidexpe)
		   THISFORM.cmdatamanager.REPLACE('wellfixed', 'cwellid', m.cWellID)
		   THISFORM.cmdatamanager.REPLACE('wellfixed', 'cvendorid', m.cVendorID)
		   THISFORM.cmdatamanager.REPLACE('wellfixed', 'ccateg', m.cCateg)
		   THISFORM.cmdatamanager.REPLACE('wellfixed', 'cpayee', m.cPayee)
		   THISFORM.cmdatamanager.REPLACE('wellfixed', 'namount', m.nAmount)
		   THISFORM.cmdatamanager.REPLACE('wellfixed', 'cexpclass', m.cExpClass)
		   THISFORM.cmdatamanager.REPLACE('wellfixed', 'ccatcode', m.ccatcode)
		   THISFORM.cmdatamanager.REPLACE('wellfixed', 'cownerid', m.cOwnerID)
		   THISFORM.cmdatamanager.REPLACE('wellfixed', 'crefid', m.cRefID)
		   THISFORM.cmdatamanager.REPLACE('wellfixed', 'laptran', .F.)
		   THISFORM.cmdatamanager.REPLACE('wellfixed', 'cMemo', m.cMemo)
		   THISFORM.cmdatamanager.REPLACE('wellfixed', 'nSaltWater', m.nSaltWater)
		   THISFORM.cmdatamanager.REPLACE('wellfixed', 'cyear', m.cYear)
		   THISFORM.cmdatamanager.REPLACE('wellfixed', 'crunyearrev', m.cYear)
		   THISFORM.cmdatamanager.REPLACE('wellfixed', 'crunyearjib', m.cYear)
		   THISFORM.cmdatamanager.REPLACE('wellfixed', 'itype', m.itype)
		   THISFORM.cmdatamanager.REPLACE('wellfixed', 'nmaxamount', m.nmaxamount)
		
		*   INSERT INTO expense FROM MEMVAR
		
		   STORE '' TO THISFORM.txtcNotes.VALUE, THISFORM.txtcVendName.VALUE, THISFORM.txtcVendorID.VALUE, ;
		      THISFORM.txtcOwnerID.VALUE, THISFORM.txtcCategory.VALUE, THISFORM.txtcRefID.VALUE
		   THISFORM.txtnAmount.setvalue(0)
		   thisform.txtmaxAmount.setvalue(0)
		   STORE 0  TO THISFORM.spnBBL.VALUE
		   THISFORM.calctot()
		   THISFORM.setnextcontrol(THISFORM.txtcCategory)
		   THISFORM.cmdatamanager.updateall()
		   THISFORM.lChanged = .T.
		   THISFORM.opgType.Value = 1
		   thisform.opgtype.Valid()
		   THISFORM.REFRESH()
		
		
		
	ENDPROC

	PROCEDURE calctot		&& Calculates the total  income for the period.
		LOCAL lnTotal, lcidexph, lnRecNo, lcSelect
		
		lcSelect = SELECT()
		
		SELECT wellfixed
		lnRecNo = RECNO()
		SUM(nAmount) TO lnTotal 
		IF lnRecNo <= RECC()
		   GOTO lnRecNo
		ENDIF   
		
		thisform.txtTotalExp.Value = lnTotal
		thisform.txtTotalExp.Refresh()
		
		SELECT (lcSelect)
		
	ENDPROC

	PROCEDURE delete
		LPARAMETERS cworkarea, lDetail
		
		IF lDetail
		   dodefault('wellfixed')
		ELSE
		   sele wellfixed
		   scan
		     dele next 1
		   endscan
		   thisform.cmdatamanager.updateall()
		   thisform.requery()
		endif      
		
	ENDPROC

	PROCEDURE editdetail		&& Brings the current record in the grid up to the detail section in the form.
		WITH THISFORM
		   .txtcatcode.SETVALUE(wellfixed.ccatcode)
		   .txtnAmount.setvalue(wellfixed.nAmount)
		   .txtcVendName.VALUE = wellfixed.cPayee
		   .txtcVendorID.VALUE = wellfixed.cVendorID
		   .txtcOwnerID.VALUE = wellfixed.cownerid
		   .txtcNotes.VALUE = wellfixed.cmemo
		   .txtcCategory.VALUE = wellfixed.ccateg
		   .txtcRefID.VALUE = wellfixed.crefid
		   .spnBBL.VALUE = wellfixed.nsaltwater
		   .cboClass.value = wellfixed.cExpClass
		   .opgType.value = wellfixed.itype
		   .txtmaxamount.value = wellfixed.nmaxamount
		   IF .opgType.value # 1 AND .opgType.value # 2
		      .opgType.value = 1
		   ENDIF 
		   thisform.opgType.Valid()
		   thisform.txtcCategory.SetFocus()
		   SWSELECT('vendor')
		   locate for cVendorID = wellfixed.cVendorID
		   dele next 1 in wellfixed
		   thisform.cmdatamanager.updateall()
		   thisform.Refresh()
		   THISFORM.calctot()
		ENDWITH
		
		
	ENDPROC

	PROCEDURE Init
		IF m.goapp.RecallFixedExpenses()
		   thisform.requery()
		ENDIF 
		DODEFAULT()
	ENDPROC

	PROCEDURE list
		LPARAMETERS cworkarea
		LOCAL lcList, lnRecNo
		PRIV llOK
		
		llOK = .T.
		
		lcList = 'cwellid\Well ID,cwellname\Well Name'
		
		thisform.save()
		  
		IF this.flushcontrolbuffer()
		   DO FORM ..\custom\picklist WITH 'Wells', lcList, thisform.txtcwellid.value, 2 
		
		
		   IF llOK
		      thisform.txtcwellid.value = wells.cwellid
		      thisform.txtcwellname.value = wells.cwellname
		      thisform.requery()
		      thisform.cmdatamanager.setrecordposition('wells')
		   ENDIF   
		ENDIF   
		
		   
	ENDPROC

	PROCEDURE loaddetail
	ENDPROC

	PROCEDURE new
		LPARAMETERS cworkarea
		
		thisform.list()
	ENDPROC

	PROCEDURE requery
		LPARAMETERS cworkarealist
		
		
		lcWellID = wells.cwellid
		lnRunNo  = 0
		lcRunYear = 'FIXD'
		
		Requery('WellFixed')
		
		thisform.refresh()
		thisform.calctot()
	ENDPROC

	PROCEDURE save
		LPARAMETERS cworkarealist
		
		select wellfixed
		scan for lAPTran = .t.
		   replace lAPTran with .f.
		endscan
		
		DODEFAULT(cworkarealist)
		
		thisform.setnextcontrol(thisform.txtcwellid)
		thisform.txtcwellid.setfocus()
	ENDPROC

	PROCEDURE cboClass.Init
		IF DODEFAULT()
		   this.addlistitem('0',1,1)
		   this.addlistitem('Working Interest',1,2)
		   this.addlistitem('1',2,1)
		   this.addlistitem('Class 1',2,2)
		   this.addlistitem('2',3,1)
		   this.addlistitem('Class 2',3,2)
		   this.addlistitem('3',4,1)
		   this.addlistitem('Class 3',4,2)
		   this.addlistitem('4',5,1)
		   this.addlistitem('Class 4',5,2)
		   this.addlistitem('5',6,1)
		   this.addlistitem('Class 5',6,2)
		   this.addlistitem('A',7,1)
		   this.addlistitem('After Casing Point',7,2)
		   this.addlistitem('B',8,1)
		   this.addlistitem('Before Casing Point',8,2)
		   this.listitemid = 1
		ENDIF   
	ENDPROC

	PROCEDURE cmdatamanager.afternav
		LPARAMETERS cworkarea
		
		IF m.cWorkarea = 'Wells'
		    thisform.txtcwellid.value=wells.cwellid
		   THISFORM.txtcwellname.value=wells.cwellname
		   THISFORM.lblGroup.CAPTION = wells.cGroup
		
		   thisform.requery()
		   
		   STORE 0 TO THISFORM.txtnAmount.value, THISFORM.txtmaxAmount.Value 
		  
		   THISFORM.calctot()
		   
		   thisform.txtcCategory.value=''
		   thisform.txtCatCode.value=''
		   thisform.txtcVendName.value=''
		   thisform.txtcVendorID.value=''
		   thisform.spnBBL.value=0
		   thisform.txtcNotes.value=''
		   thisform.txtcRefID.value=''
		   thisform.txtcOwnerID.value=''
		
		ENDIF
		
		RETURN .T.
		
	ENDPROC

	PROCEDURE cmdatamanager.afternew
		LPARAMETERS cworkarea
		LOCAL lcidexph, lcidexpe
		
		DO CASE
		   CASE m.cworkarea = 'wellfixed'
		      lcidexpe = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Expense')
		
		      SWSELECT('expense')
		      SET ORDER TO cidexpe
		      SET DELE OFF
		      DO WHILE SEEK(lcidexpe)
		         lcidexpe = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Expense')
		      ENDDO
		      SET DELE ON
		
		      SELECT wellfixed
		      REPL cidexpe  WITH lcidexpe, ;
		           cYear    WITH 'FIXD',  ;
		           cRunYearRev WITH 'FIXD', ;
		           nRunNoRev   WITH 0, ;
		           cRunYearJIB WITH 'FIXD', ;
		           nRunNoJIB   WITH 0
		
		ENDCASE
		
		RETURN(DODEFAULT(cworkarea))
		
	ENDPROC

	PROCEDURE cmdCopy.Click
		SELECT wellfixed
		IF EOF() or recc() = 0  &&  No records, so don't try and delete anything, since it causes a Record is Out of Range error - BH 8/1/05
		   RETURN
		ENDIF
		
		lnRecNo = RECNO()
		LOCATE FOR lAPTran = .T.
		IF NOT FOUND()
		   GOTO lnRecNo
		   THISFORM.oMessage.DISPLAY('No expenses are selected to be copied. Please choose one or more expenses to be copied by selecting the checkbox beside each entry.')
		ELSE
		   THISFORM.cmdatamanager.updateall()
		   THISFORM.grdGridCustom1.REFRESH()
		   THISFORM.CalcTot()
		
		   IF THISFORM.oMessage.CONFIRM('This will allow you to choose one or more wells to have the selected expenses copied to.  Would you like to continue?')
		      DO FORM dmselwells WITH '**'
		
		      SELECT wellsel
		      COUNT FOR NOT DELETED() TO lnCount
		      IF lnCount > 0
		         SELECT wellsel
		         SCAN
		            SELECT wellfixed
		            SCAN FOR lAPTran = .T.
		               SCATTER MEMVAR
		               m.cwellid = wellsel.cwellid
		               m.lAPTran = .f.
		
		               m.cidexpe = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Expense')
		               SWSELECT('expense')
		               SET ORDER TO cidexpe
		               SET DELE OFF
		               DO WHILE SEEK(m.cidexpe)
		                  m.cidexpe = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Expense')
		               ENDDO
		               SET DELE ON
		               INSERT INTO expense FROM MEMVAR
		            ENDSCAN
		         ENDSCAN
		         SELECT wellfixed
		         GOTO lnRecNo
		         THISFORM.cmdatamanager.updateall()
		         thisform.requery()
		         THISFORM.grdGridCustom1.REFRESH()
		         THISFORM.CalcTot()
		         
		         thisform.oMessage.display('The selected fixed expenses have been created for the chosen wells.  They will be included in the RELEASE FIXED EXPENSES processing.')
		
		      ELSE
		         THISFORM.oMessage.DISPLAY('No wells were selected, so no fixed expenses were copied.  To select a well, double-click on it to move it to the right-hand side of the screen.')
		      ENDIF
		
		   ENDIF
		ENDIF
		
		DODEFAULT()
		
	ENDPROC

	PROCEDURE cmdCopy.When
		RETURN MDOWN()
	ENDPROC

	PROCEDURE cmdDelDetail.Click
		LOCAL lnrecno
		
		THISFORM.lConfirmDelete = .F.
		
		SELECT wellfixed
		IF EOF() OR RECC() = 0  &&  No records, so don't try and delete anything, since it causes a Record is Out of Range error - BH 8/1/05
		   RETURN
		ENDIF
		
		lnrecno = RECNO()
		LOCATE FOR lAPTran = .T.
		IF NOT FOUND()
		   GOTO lnrecno
		   THISFORM.oMessage.DISPLAY('No expenses are selected to be deleted. Please choose one or more records to be deleted by selecting the checkbox beside each entry.')
		ELSE
		   lnrecno = RECNO()
		   LOCATE FOR lAPTran = .T.
		   IF FOUND()
		      SELECT wellfixed
		      SCAN FOR lAPTran = .T.
		         DELETE NEXT 1
		      ENDSCAN
		   ELSE
		      GOTO lnrecno
		      THISFORM.DELETE('wellfixed',.T.)
		   ENDIF
		
		   THISFORM.cmdatamanager.updateall()
		   THISFORM.grdGridCustom1.REFRESH()
		   THISFORM.lConfirmDelete = .T.
		   THISFORM.CalcTot()
		ENDIF
		
	ENDPROC

	PROCEDURE cmdDelDetail.When
		RETURN MDOWN()
	ENDPROC

	PROCEDURE cmdEditDetail.Click
		LOCAL lnCount
		lnCount = 0
		
		SELECT wellfixed
		IF EOF() OR RECC() = 0  &&  No records, so don't try and delete anything, since it causes a Record is Out of Range error - BH 8/1/05
		   RETURN
		ENDIF
		
		lnRecNo = RECNO()
		LOCATE FOR lAPTran = .T.
		IF NOT FOUND()
		   GOTO lnRecNo
		   THISFORM.oMessage.DISPLAY('No expenses are selected to be edited. Please choose a record to be copied by selecting the checkbox beside the entry.')
		ELSE
		
		   lnRecNo = RECNO()
		   LOCATE FOR lAPTran = .T.
		   IF FOUND()
		      SELECT wellfixed
		      SCAN FOR lAPTran = .T.
		         REPL lAPTran WITH .F.
		         lnCount = lnCount + 1
		      ENDSCAN
		   ENDIF
		
		   GOTO lnRecNo
		
		   THISFORM.cmdatamanager.updateall()
		   THISFORM.grdGridCustom1.REFRESH()
		   THISFORM.CalcTot()
		
		   IF lnCount > 1
		      THISFORM.oMessage.DISPLAY('Even though more than one expense was selected with the checkbox, only the current record can be edited.')
		   ENDIF
		
		   THISFORM.editdetail()
		ENDIF
		
	ENDPROC

	PROCEDURE cmdEditDetail.When
		RETURN MDOWN()
	ENDPROC

	PROCEDURE cmdLookCat.Click
		LOCAL lcList
		PRIV llOK
		
		llOK = .T.
		SELECT cCateg,cCatCode,cExpClass,IIF(lAFEType,'A','') AS cAFEType, IIF(lJIBOnly,'J','') AS cJIBOnly  ;
		    FROM expcat INTO CURSOR exptmp READWRITE
		
		SELECT exptmp
		INDEX ON cCatCode           TAG cCatCode
		INDEX ON UPPER(cCateg)      TAG cCateg
		INDEX ON cExpClass+cCatCode TAG cExpClass
		INDEX ON cAFEType           TAG cAFEType
		INDEX ON cJIBOnly           TAG cJIBOnly
		
		lcList = 'ccateg\Category,ccatcode\Code,cexpclass\Cls,cAFEType\AFE,cJIBOnly\JIB'
		
		DO FORM '..\custom\picklist' WITH 'exptmp', lcList, THISFORM.txtcCategory.VALUE, 5, .T., .T.
		
		
		IF llOK
		    THISFORM.txtcCategory.VALUE = exptmp.cCateg
		    THISFORM.txtcCategory.REFRESH()
		    THISFORM.txtcatcode.VALUE = exptmp.cCatCode
		    THISFORM.txtcatcode.REFRESH()
		ENDIF
		
		THISFORM.setnextcontrol(THISFORM.txtcCategory)
		
	ENDPROC

	PROCEDURE cmdLookCat.When
		RETURN MDOWN()
	ENDPROC

	PROCEDURE cmdLookVend.Click
		LOCAL lcList
		PRIV llOK
		llOK = .T.
		lcList = 'cvendorid,csortfield'
		
		DO FORM ..\custom\picklist WITH 'Vendor', lcList, thisform.txtcvendorid.value, 2
		
		IF llOK
		   thisform.txtcVendorID.value = vendor.cvendorid
		   thisform.txtcVendName.value = vendor.cvendname
		   thisform.txtcVendorID.Refresh()
		   thisform.txtcVendName.Refresh()
		ENDIF   
		
		thisform.setnextcontrol(thisform.txtcVendName)
	ENDPROC

	PROCEDURE cmdLookVend.When
		RETURN MDOWN()
	ENDPROC

	PROCEDURE cmdLookWell.Click
		LOCAL lcList
		PRIV llOK
		
		llOK = .T.
		lcList = 'cwellid,cwellname,cgroup,cwellstat'
		
		THISFORM.ldolostfocus = .f.
		
		DO FORM ..\custom\picklist WITH 'Wells', lcList, thisform.txtcwellid.value, 4
		
		IF llOK
		   thisform.cmdatamanager.revertall()
		   thisform.txtcWellID.Value = wells.cwellid
		   thisform.txtcWellName.value = wells.cwellname
		   thisform.requery()
		ENDIF
		
		* Reset the filter in case the picklist set it to something different
		SWSELECT('wells')
		SET FILTER TO inlist(cwellstat,'A','T','D','N')
		
		THISFORM.ldolostfocus = .t.
		
		
		
		
	ENDPROC

	PROCEDURE cmdLookWell.When
		RETURN MDOWN()
	ENDPROC

	PROCEDURE cmdOwner.Click
		LOCAL lcList
		PRIV llOK
		
		llOK = .T.
		lcList = 'cownerid,cownname'
		
		DO FORM ..\custom\picklist WITH 'Investor', lcList, thisform.txtcownerid.value, 2
		
		IF llOK
		   thisform.txtcOwnerID.value = Investor.cownerid
		   thisform.setnextcontrol(thisform.txtcOwnerID)
		   thisform.refresh()
		ENDIF   
	ENDPROC

	PROCEDURE cmdOwner.When
		RETURN MDOWN()
	ENDPROC

	PROCEDURE cmdSaveDetail.Click
		*  Add the data to the income table
		
		IF NOT EMPTY(THISFORM.txtcOwnerID.VALUE)
		   SWSELECT('wellinv')
		   LOCATE FOR cownerid = THISFORM.txtcOwnerID.VALUE AND cwellid = THISFORM.txtcWellID.VALUE AND NOT DELETED()
		   IF NOT FOUND()
		      THISFORM.oMessage.Warning('This owner does not have any interests in this well.  Please choose a different owner.')
		      THISFORM.setnextcontrol(THISFORM.txtcOwnerID)
		      RETURN .F.
		   ENDIF
		   SWSELECT('wells')
		   LOCATE FOR cWellID = thisform.txtcWellID.Value
		   IF FOUND() AND wells.cWellStat = 'V'  &&  Warn them if trying to enter expenses for an investment well
		      thisform.oMessage.Warning('This well is marked as an investment well, so no entries should be made here. Make all expense entries through the Tasks >> Enter Bills Screen.')
		      RETURN .f.
		   endif
		ENDIF
		
		THISFORM.adddetail()
		thisform.save()
		
		THISFORM.setnextcontrol(THISFORM.txtcCategory)
		thisform.txtcCategory.setfocus()
		
	ENDPROC

	PROCEDURE Grdgridcustom1.AfterRowColChange
		LPARAMETERS ncol
		
		thisform.calctot()
	ENDPROC

	PROCEDURE Grdgridcustom1.Column1.txtcCategory.DblClick
		thisform.editdetail()
	ENDPROC

	PROCEDURE Grdgridcustom1.Column1.txtcCategory.Valid
		dodefault()
		
		IF EMPTY(THIS.PARENT.PARENT.Column2.txtcatcode.VALUE)
		   SWSELECT('expcat')
		   SET ORDER TO ccateg
		   IF SEEK(THIS.VALUE)
		      THIS.PARENT.PARENT.Column2.txtcatcode.SET('value',expcat.ccatcode)
		   ENDIF
		ENDIF
		
	ENDPROC

	PROCEDURE Grdgridcustom1.Column2.txtcatcode.Valid
		DODEFAULT()
		
		IF EMPTY(THIS.PARENT.PARENT.Column1.txtcCategory.VALUE)
		   SWSELECT('expcat')
		   SET ORDER TO ccatcode
		   IF SEEK(THIS.VALUE)
		      THIS.PARENT.PARENT.Column1.txtcCategory.SET('value',expcat.ccateg)
		   ENDIF
		ENDIF
		
	ENDPROC

	PROCEDURE Grdgridcustom1.Column3.txtcPayee.DblClick
		thisform.editdetail()
	ENDPROC

	PROCEDURE Grdgridcustom1.Column3.txtcPayee.Valid
		IF DODEFAULT()
		   SWSELECT('vendor')
		   SET ORDER TO cvendname
		   LOCATE FOR allt(this.value) $ cvendname 
		   IF FOUND()
		      if wellfixed.cvendorid <> vendor.cvendorid
		         thisform.cmdatamanager.replace('wellfixed','Cvendorid',vendor.cvendorid)
		      endif   
		   ELSE
		      thisform.cmdatamanager.replace('wellfixed','Cvendorid',' ')   
		   ENDIF
		ENDIF
		   
	ENDPROC

	PROCEDURE Grdgridcustom1.Column4.txtnAmount.DblClick
		thisform.editdetail()
	ENDPROC

	PROCEDURE Grdgridcustom1.Column5.txtcOwnerIDgrd.Valid
		IF NOT EMPTY(THIS.VALUE)
		   SWSELECT('wellinv')
		   LOCATE FOR cownerid = THIS.VALUE AND cwellid = THISFORM.txtcWellID.VALUE AND NOT DELETED()
		   IF NOT FOUND()
		      THISFORM.oMessage.Warning('This owner does not have any interests in this well.  Please choose a different owner.')
		      RETURN 0
		   ENDIF
		ENDIF
		
		DODEFAULT()
		
	ENDPROC

	PROCEDURE Grdgridcustom1.Column7.txtClass.Valid
		if not inlist(this.value,'0','1','2','3','4','5','A','B')
		   thisform.omessage.warning('The expense class must be one of the following values: 0,1,2,3,4,5,A,B')
		   this.value = '0'
		   return .f.
		endif
		
		dodefault()   
		   
	ENDPROC

	PROCEDURE Grdgridcustom1.RightClick
		*
	ENDPROC

	PROCEDURE opgType.Valid
		IF DODEFAULT()
		   IF this.Value = 1
		      thisform.txtcnotes.Width = 460
		      thisform.lblmaxAmt.Visible = .f.
		      thisform.txtmaxAmount.Visible = .f.
		   ELSE
		      thisform.txtcnotes.Width = 304
		      thisform.lblmaxAmt.Visible = .t.
		      thisform.txtmaxAmount.Visible = .t.
		   ENDIF
		ENDIF 
	ENDPROC

	PROCEDURE spnBBL.When
		IF 'BRINE' $ UPPER(thisform.txtcCategory.value) OR ;
		   'WATER' $ UPPER(thisform.txtcCategory.value) OR ;
		   'SALT'  $ UPPER(thisform.txtcCategory.value) OR ;
		   'H2O'   $ UPPER(thisform.txtcCategory.value)
		   RETURN .T.
		ELSE
		   RETURN .F.
		ENDIF
		      
	ENDPROC

	PROCEDURE txtcatcode.GotFocus
		ON KEY LABEL F2 _screen.activeform.cmdLookCat.Click()
		DODEFAULT()
	ENDPROC

	PROCEDURE txtcatcode.InteractiveChange
		DODEFAULT()
		
		thisform.txtcCategory.value = expcat.ccateg
		IF NOT EMPTY(expcat.cExpclass)
		   THISFORM.cboclass.VALUE   = expcat.cExpclass
		ELSE
		   THISFORM.cboclass.VALUE   = '0'
		ENDIF
		
	ENDPROC

	PROCEDURE txtcatcode.LostFocus
		ON KEY LABEL F2 *
		
		IF EMPTY(THIS.VALUE) AND NOT EMPTY(THISFORM.txtcCategory.VALUE)
		   THIS.SET('value',expcat.cCatCode)
		ENDIF
		
		IF NOT EMPTY(THIS.VALUE) AND EMPTY(THISFORM.txtcCategory.VALUE)
		   THISFORM.txtcCategory.SET('value',expcat.cCateg)
		ENDIF
		
		SWSELECT('expcat')  &&  Fill in expense class
		LOCATE FOR cCatCode = THIS.VALUE
		IF FOUND()
		   THISFORM.cboClass.SET('value',expcat.cExpClass)
		ELSE
		   THISFORM.cboClass.SET('value','0')
		ENDIF
		
	ENDPROC

	PROCEDURE txtcCategory.GotFocus
		ON KEY LABEL F2 _screen.activeform.cmdLookCat.Click()
		DODEFAULT()
	ENDPROC

	PROCEDURE txtcCategory.InteractiveChange
		IF DODEFAULT()
		   thisform.txtcatcode.value = expcat.ccatcode
		   thisform.cboclass.value   = expcat.cexpclass
		endif   
	ENDPROC

	PROCEDURE txtcCategory.LostFocus
		ON KEY LABEL F2 *
		
	ENDPROC

	PROCEDURE txtcOwnerID.GotFocus
		ON KEY LABEL F2 _screen.activeform.cmdOwner.Click()
		DODEFAULT()
	ENDPROC

	PROCEDURE txtcOwnerID.LostFocus
		ON KEY LABEL F2 *
		DODEFAULT()
		
		
	ENDPROC

	PROCEDURE txtcVendName.GotFocus
		ON KEY LABEL F2 _screen.activeform.cmdLookVend.Click()
		DODEFAULT()
	ENDPROC

	PROCEDURE txtcVendName.InteractiveChange
		IF DODEFAULT()
		   thisform.txtcVendorID.value = vendor.cVendorID
		endif   
	ENDPROC

	PROCEDURE txtcVendName.LostFocus
		ON KEY LABEL F2
		IF NOT EMPTY(this.value) AND NOT LEFT(this.value,1) = '*'
		   thisform.txtcVendorID.value = vendor.cVendorID
		   thisform.txtcVendorID.Refresh()
		ELSE
		   thisform.txtcVendorID.value = ''
		   thisform.txtcVendorID.Refresh()
		ENDIF   
		DODEFAULT()
	ENDPROC

	PROCEDURE txtcVendName.Valid
		SELECT vendor
		LOCATE FOR cVendorID = thisform.txtcvendorID.Value
		IF FOUND()
		   IF lHold  &&  Don't let them continue with a vendor marked to be on hold
		      THISFORM.oMessage.Warning('This vendor is on hold.  No expenses can be entered for them.')
		      THIS.SET('value','')
		      thisform.txtcvendorID.set('value','')
		      RETURN 0
		   ENDIF
		ENDIF
		
		DODEFAULT()
	ENDPROC

	PROCEDURE txtcVendorID.When
		RETURN .F.
	ENDPROC

	PROCEDURE txtcWellID.GotFocus
		ON KEY LABEL F2 _screen.activeform.cmdLookWell.Click()
		DODEFAULT()
	ENDPROC

	PROCEDURE txtcWellID.InteractiveChange
		IF DODEFAULT()
		   SWSELECT('wells')
		   LOCATE FOR cwellid == this.Value
		   IF FOUND()
		      this.Parent.txtcwellName.set('value',wells.cwellname)
		   ELSE
		      this.Parent.txtcwellName.set('value','')
		   ENDIF
		ENDIF       
		    
	ENDPROC

	PROCEDURE txtcWellID.LostFocus
		LOCAL lcWellID
		
		lcWellID = wells.cwellid
		
		IF wells.cWellStat = 'V'  &&  Warn them if trying to enter expenses for an investment well
		   thisform.oMessage.Warning('This well is marked as an investment well, so no entries should be made here. Make all expense entries through the Tasks >> Enter Bills Screen.')
		endif
		
		THISFORM.cmdatamanager.updateall()
		thisform.requery()
	ENDPROC

	PROCEDURE txtcWellID.Valid
		ON KEY LABEL F2 *
		DODEFAULT()
		
		
	ENDPROC

	PROCEDURE txtcWellName.When
		RETURN .F.
	ENDPROC

	PROCEDURE txtTotalExp.When
		RETURN .F.
	ENDPROC

ENDDEFINE
