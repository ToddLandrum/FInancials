*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="dmwellexp.scx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="2" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Cursor4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor6" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor11" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor12" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor14" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor7" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor16" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor17" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor18" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor8" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor9" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor10" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor13" UniqueID="" Timestamp="" />

	AutoOpenTables = .F.
	DataSource = .NULL.
	Height = 587
	Left = -3
	Name = "Dataenvironment"
	Top = 98
	Width = 1016

	ADD OBJECT 'Cursor1' AS cursor WITH ;
		Alias = "wellexp", ;
		BufferModeOverride = 5, ;
		CursorSource = "wellexp", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Filter = "cyear <> 'FIXD'", ;
		Height = 90, ;
		Left = 147, ;
		Name = "Cursor1", ;
		NoDataOnLoad = .T., ;
		Top = 12, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor10' AS cursor WITH ;
		Alias = "glmaster", ;
		BufferModeOverride = 5, ;
		CursorSource = "glmaster", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 150, ;
		Name = "Cursor10", ;
		Top = 260, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor11' AS cursor WITH ;
		Alias = "glopt", ;
		CursorSource = "glopt", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 430, ;
		Name = "Cursor11", ;
		Top = 140, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor12' AS cursor WITH ;
		Alias = "sysctl", ;
		CursorSource = "sysctl", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 552, ;
		Name = "Cursor12", ;
		Top = 24, ;
		Width = 91
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor13' AS cursor WITH ;
		Alias = "afehdr", ;
		CursorSource = "afehdr", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 685, ;
		Name = "Cursor13", ;
		Top = 281, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor14' AS cursor WITH ;
		Alias = "options", ;
		CursorSource = "options", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 850, ;
		Name = "Cursor14", ;
		Top = 140, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor16' AS cursor WITH ;
		Alias = "wellinv", ;
		CursorSource = "wellinv", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 296, ;
		Name = "Cursor16", ;
		Top = 265, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor17' AS cursor WITH ;
		Alias = "expsusp", ;
		BufferModeOverride = 5, ;
		CursorSource = "expsusp", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 439, ;
		Name = "Cursor17", ;
		Top = 266, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor18' AS cursor WITH ;
		Alias = "expsusp1", ;
		BufferModeOverride = 5, ;
		CursorSource = "expsusp", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 558, ;
		Name = "Cursor18", ;
		Top = 142, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor2' AS cursor WITH ;
		Alias = "expense", ;
		BufferModeOverride = 5, ;
		CursorSource = "expense", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Filter = "cYear<>'FIXD'", ;
		Height = 90, ;
		Left = 290, ;
		Name = "Cursor2", ;
		Top = 19, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor3' AS cursor WITH ;
		Alias = "expcat", ;
		CursorSource = "expcat", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 400, ;
		Name = "Cursor3", ;
		Top = 22, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor4' AS cursor WITH ;
		Alias = "investor", ;
		CursorSource = "investor", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 150, ;
		Name = "Cursor4", ;
		Top = 140, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor5' AS cursor WITH ;
		Alias = "vendor", ;
		CursorSource = "vendor", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 11, ;
		Name = "Cursor5", ;
		Top = 143, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor6' AS cursor WITH ;
		Alias = "wells", ;
		CursorSource = "wells", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Filter = "inlist(cwellstat,'A','T','D','N')", ;
		Height = 90, ;
		Left = 710, ;
		Name = "Cursor6", ;
		Order = "cwellid", ;
		Top = 20, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor7' AS cursor WITH ;
		Alias = "apopt", ;
		CursorSource = "apopt", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 860, ;
		Name = "Cursor7", ;
		Top = 20, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor8' AS cursor WITH ;
		Alias = "coa", ;
		CursorSource = "coa", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor8", ;
		Top = 20, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor9' AS cursor WITH ;
		Alias = "coabal", ;
		BufferModeOverride = 5, ;
		CursorSource = "coabal", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor9", ;
		Top = 260, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

ENDDEFINE

DEFINE CLASS formdmwellexp AS frmdatamanagerformcustom OF "..\custom\cforms.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="txtcDispCode" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtwastecode" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcdisperm" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtnSaltBBL" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Shpshapecustom1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcOwnerID" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column1.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column1.txtcCategory" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column2.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column2.txtdExpDate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column3.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column3.txtcPayee" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column4.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column4.txtnAmount" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column5.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column5.txtcYear" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column6.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column6.txtcPeriod" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column7.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column7.Txtquickfill1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column8.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column8.txtClass" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column9.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column9.txtDeck" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblClosed" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcWellName" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblWellid2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcWellID" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Swyear" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblGroup" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtTotalExp" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdLookWell" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbltextcustom17" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblDate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lblfieldlabelcustom1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblRunNo" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcRefID" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblRefid" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcCategory" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcatcode" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtnAmount" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Glmaint" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblAmount" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcNotes" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblMemo" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="spnBBL" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbltextcustom2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdLookVend" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcVendName" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdLookCat" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcVendorID" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Runcombo1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdOwner" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdDelDetail" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdEditDetail" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtafeno" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Swperiod" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboClass" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtdExpDate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtGroup" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdAFENo" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom7" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboDeck" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: adddetail		&& Add the detail information to the income table
		*m: addfixed		&& Adds fixed expenses to the period
		*m: calcdayson		&& Calculates the days on.
		*m: calctot		&& Calculates the total  income for the period.
		*m: calctotalinc		&& Calculates the total income based on the units and price entered.
		*m: checkclose		&& Checks to see if the period has been closed.
		*m: checkruns		&& Check for runs for the given well id.
		*m: editdetail		&& Brings the current record in the grid up to the detail section in the form.
		*m: expprocessed		&& Checks to see if the expense has been processed in a run closing
		*m: getexpenses
		*m: listwells
		*p: cwellsave		&& Saves wellid on entry to txtcwellid
		*p: lclosed
		*p: ldeldetail		&& .T. = deleting a detail entry
		*p: lfromedit
		*p: lgridclicked
		*p: ljibwell
		*p: lvalidwell
		*p: nrunitemid		&& The itemid of runcombo on entry.
		*p: opicklist
	*</DefinedPropArrayMethod>

	Caption = "Well Expenses by Well (8/8ths)"
	clistexpression = wells.cwellid
	cnavworkarea = wells
	cworkarea = Wells
	DoCreate = .T.
	Height = 626
	HelpContextID = 100
	lgridclicked = .F.
	lnonewask = .T.
	lrememberposition = .F.
	lremembersize = .F.
	Name = "FormDmwellexp"
	nrunitemid = 1		&& The itemid of runcombo on entry.
	opicklist = .NULL.
	Visible = .T.
	Width = 868
	_memberdata = <VFPData>
		<memberdata name="opicklist" display="oPickList"/>
		<memberdata name="expprocessed" display="ExpProcessed"/>
		</VFPData>
	cmdatamanager.Name = "cmdatamanager"
	cmdatamanager.TabIndex = 1
	cmdatamanager.ZOrderSet = 0
	cmlookupmanager.Name = "cmlookupmanager"
	MWRESIZE1.LBLHIGHLIGHT.Name = "LBLHIGHLIGHT"
	MWRESIZE1.LBLSHADING.Name = "LBLSHADING"
	MWRESIZE1.Name = "MWRESIZE1"
	MWRESIZE1.TabIndex = 2
	MWRESIZE1.ZOrderSet = 15

	ADD OBJECT 'cboClass' AS cbocomboboxcustom WITH ;
		ColumnCount = 2, ;
		Height = 20, ;
		Left = 253, ;
		Name = "cboClass", ;
		TabIndex = 28, ;
		Top = 165, ;
		Width = 40, ;
		ZOrderSet = 46
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="combobox" />

	ADD OBJECT 'cboDeck' AS cbocomboboxcustom WITH ;
		BoundColumn = 2, ;
		ControlSource = "", ;
		Height = 20, ;
		Left = 244, ;
		Name = "cboDeck", ;
		Style = 0, ;
		TabIndex = 18, ;
		Top = 110, ;
		ZOrderSet = 64
		*< END OBJECT: ClassLib="..\..\..\codeminenew\ampro_rv\custom\ccontrol.vcx" BaseClass="combobox" />

	ADD OBJECT 'cmdAFENo' AS cmdcommandbuttoncustom WITH ;
		Caption = "AFE No", ;
		FontBold = .T., ;
		Height = 20, ;
		Left = 308, ;
		Name = "cmdAFENo", ;
		TabIndex = 34, ;
		TabStop = .F., ;
		Top = 165, ;
		Width = 46, ;
		ZOrderSet = 50
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdDelDetail' AS cmdcommandbuttoncustom WITH ;
		Caption = "Delete Detail Line", ;
		Height = 22, ;
		Left = 225, ;
		Name = "cmdDelDetail", ;
		TabIndex = 40, ;
		Top = 586, ;
		Width = 96, ;
		ZOrderSet = 40
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdEditDetail' AS cmdcommandbuttoncustom WITH ;
		Caption = "Edit Detail Line", ;
		Height = 22, ;
		Left = 333, ;
		Name = "cmdEditDetail", ;
		TabIndex = 41, ;
		Top = 586, ;
		Width = 97, ;
		ZOrderSet = 41
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdLookCat' AS cmdcommandbuttoncustom WITH ;
		Caption = "Expense Description", ;
		Height = 20, ;
		Left = 7, ;
		Name = "cmdLookCat", ;
		TabIndex = 10, ;
		Top = 87, ;
		Width = 108, ;
		ZOrderSet = 36
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdLookVend' AS cmdcommandbuttoncustom WITH ;
		Caption = "Vendor", ;
		Height = 20, ;
		Left = 464, ;
		Name = "cmdLookVend", ;
		TabIndex = 11, ;
		Top = 87, ;
		Width = 46, ;
		ZOrderSet = 34
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdLookWell' AS cmdcommandbuttoncustom WITH ;
		Caption = " Well ID", ;
		Height = 20, ;
		Left = 13, ;
		Name = "cmdLookWell", ;
		TabIndex = 3, ;
		Top = 12, ;
		Width = 53, ;
		ZOrderSet = 18
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdOwner' AS cmdcommandbuttoncustom WITH ;
		Caption = "Allocate All To", ;
		Height = 20, ;
		Left = 696, ;
		Name = "cmdOwner", ;
		TabIndex = 32, ;
		Top = 165, ;
		ZOrderSet = 39
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'Glmaint' AS glmaint WITH ;
		Height = 24, ;
		Left = 564, ;
		Name = "Glmaint", ;
		Top = 36, ;
		Width = 36
		*< END OBJECT: ClassLib="..\custom\swgl.vcx" BaseClass="custom" />

	ADD OBJECT 'Grdgridcustom1' AS grdgridcustom WITH ;
		ColumnCount = 9, ;
		cworkarea = wellexp, ;
		Height = 372, ;
		lallownew = .F., ;
		lcolumnmemory = .F., ;
		Left = 2, ;
		LinkMaster = "", ;
		Name = "Grdgridcustom1", ;
		Panel = 1, ;
		RecordSource = "wellexp", ;
		RelationalExpr = "", ;
		TabIndex = 38, ;
		Top = 204, ;
		Width = 862, ;
		ZOrderSet = 8, ;
		Column1.ColumnOrder = 3, ;
		Column1.ControlSource = "wellexp.ccateg", ;
		Column1.FontName = "Courier New", ;
		Column1.FontSize = 8, ;
		Column1.Name = "Column1", ;
		Column1.Width = 232, ;
		Column2.ColumnOrder = 7, ;
		Column2.ControlSource = "wellexp.dexpdate", ;
		Column2.FontName = "Courier New", ;
		Column2.FontSize = 8, ;
		Column2.Name = "Column2", ;
		Column2.Width = 75, ;
		Column3.ColumnOrder = 8, ;
		Column3.ControlSource = "wellexp.cpayee", ;
		Column3.FontName = "Courier New", ;
		Column3.FontSize = 8, ;
		Column3.Name = "Column3", ;
		Column3.Width = 178, ;
		Column4.ColumnOrder = 9, ;
		Column4.ControlSource = "wellexp.namount", ;
		Column4.FontName = "Courier New", ;
		Column4.FontSize = 8, ;
		Column4.Name = "Column4", ;
		Column4.Width = 110, ;
		Column5.ColumnOrder = 1, ;
		Column5.ControlSource = "wellexp.cyear", ;
		Column5.FontName = "Courier New", ;
		Column5.FontSize = 8, ;
		Column5.Name = "Column5", ;
		Column5.Width = 36, ;
		Column6.ColumnOrder = 2, ;
		Column6.ControlSource = "wellexp.cperiod", ;
		Column6.FontName = "Courier New", ;
		Column6.FontSize = 8, ;
		Column6.Name = "Column6", ;
		Column6.Width = 33, ;
		Column7.ColumnOrder = 4, ;
		Column7.ControlSource = "wellexp.ccatcode", ;
		Column7.FontName = "Courier New", ;
		Column7.FontSize = 8, ;
		Column7.Name = "Column7", ;
		Column7.Width = 48, ;
		Column8.ColumnOrder = 5, ;
		Column8.ControlSource = "wellexp.cexpclass", ;
		Column8.FontName = "Courier New", ;
		Column8.FontSize = 8, ;
		Column8.Name = "Column8", ;
		Column8.Width = 34, ;
		Column9.ColumnOrder = 6, ;
		Column9.ControlSource = "wellexp.cdeck", ;
		Column9.FontSize = 8, ;
		Column9.Name = "Column9"
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="grid" />

	ADD OBJECT 'Grdgridcustom1.Column1.Header1' AS header WITH ;
		Caption = "Expense Description", ;
		FontSize = 8, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'Grdgridcustom1.Column1.txtcCategory' AS txtquickfill WITH ;
		clistexpression = ccateg, ;
		clistworkarea = expcat, ;
		ControlSource = "wellexp.ccateg", ;
		FontName = "Courier New", ;
		lallowexceptions = .F., ;
		Left = 109, ;
		Name = "txtcCategory", ;
		Top = 23
		*< END OBJECT: ClassLib="..\custom\cgadget.vcx" BaseClass="textbox" />

	ADD OBJECT 'Grdgridcustom1.Column2.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "Date", ;
		FontSize = 8, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'Grdgridcustom1.Column2.txtdExpDate' AS txttextboxcustom WITH ;
		ControlSource = "wellexp.dexpdate", ;
		FontName = "Courier New", ;
		FontSize = 8, ;
		InputMask = "99/99/9999", ;
		Left = 50, ;
		Name = "txtdExpDate", ;
		Top = 31
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'Grdgridcustom1.Column3.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "Vendor Name", ;
		FontSize = 8, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'Grdgridcustom1.Column3.txtcPayee' AS txtquickfill WITH ;
		clistexpression = cvendname, ;
		clistworkarea = vendor, ;
		ControlSource = "wellexp.cpayee", ;
		FontName = "Courier New", ;
		Left = 90, ;
		Name = "txtcPayee", ;
		Top = 23
		*< END OBJECT: ClassLib="..\custom\cgadget.vcx" BaseClass="textbox" />

	ADD OBJECT 'Grdgridcustom1.Column4.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "Total", ;
		FontName = "Arial", ;
		FontSize = 8, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'Grdgridcustom1.Column4.txtnAmount' AS txttextboxcustom WITH ;
		ControlSource = "wellexp.namount", ;
		FontName = "Courier New", ;
		FontSize = 8, ;
		Left = 54, ;
		Name = "txtnAmount", ;
		Top = 31
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'Grdgridcustom1.Column5.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "Year", ;
		FontSize = 8, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'Grdgridcustom1.Column5.txtcYear' AS txttextboxcustom WITH ;
		ControlSource = "wellexp.cyear", ;
		FontName = "Courier New", ;
		Left = 13, ;
		Name = "txtcYear", ;
		Top = 23
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'Grdgridcustom1.Column6.Header1' AS header WITH ;
		Caption = "Period", ;
		FontSize = 8, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'Grdgridcustom1.Column6.txtcPeriod' AS txttextboxcustom WITH ;
		ControlSource = "wellexp.cperiod", ;
		FontName = "Courier New", ;
		Left = 12, ;
		Name = "txtcPeriod", ;
		Top = 35
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'Grdgridcustom1.Column7.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "Code", ;
		FontSize = 8, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'Grdgridcustom1.Column7.Txtquickfill1' AS txtquickfill WITH ;
		clistexpression = expcat.ccatcode, ;
		clistworkarea = expcat, ;
		FontName = "Courier New", ;
		Left = 21, ;
		Name = "Txtquickfill1", ;
		Top = 23
		*< END OBJECT: ClassLib="..\custom\cgadget.vcx" BaseClass="textbox" />

	ADD OBJECT 'Grdgridcustom1.Column8.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "Cls", ;
		FontSize = 8, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'Grdgridcustom1.Column8.txtClass' AS txttextboxcustom WITH ;
		FontName = "Courier New", ;
		FontSize = 8, ;
		InputMask = "!", ;
		Left = 8, ;
		Name = "txtClass", ;
		Top = 23
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'Grdgridcustom1.Column9.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "Deck", ;
		FontSize = 8, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'Grdgridcustom1.Column9.txtDeck' AS textbox WITH ;
		BackColor = 255,255,255, ;
		BorderStyle = 0, ;
		ControlSource = "wellexp.cdeck", ;
		FontSize = 8, ;
		ForeColor = 0,0,0, ;
		Margin = 0, ;
		Name = "txtDeck"
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'lblAmount' AS lblfieldlabelcustom WITH ;
		Caption = "Total", ;
		Height = 16, ;
		Left = 811, ;
		Name = "lblAmount", ;
		TabIndex = 15, ;
		Top = 89, ;
		Width = 25, ;
		ZOrderSet = 29
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblClosed' AS lbllabelcustom WITH ;
		Caption = "RUN CLOSED", ;
		FontSize = 20, ;
		ForeColor = 255,0,0, ;
		Left = 324, ;
		Name = "lblClosed", ;
		TabIndex = 39, ;
		Top = 360, ;
		Visible = .F., ;
		ZOrderSet = 9
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblDate' AS lblfieldlabelcustom WITH ;
		Caption = "Acct Date", ;
		Height = 16, ;
		Left = 365, ;
		Name = "lblDate", ;
		TabIndex = 14, ;
		Top = 89, ;
		Width = 50, ;
		ZOrderSet = 20
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lblfieldlabelcustom1' AS lblfieldlabelcustom WITH ;
		Caption = "Code", ;
		Height = 16, ;
		Left = 202, ;
		Name = "Lblfieldlabelcustom1", ;
		TabIndex = 13, ;
		Top = 89, ;
		Width = 27, ;
		ZOrderSet = 21
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblGroup' AS lbllabelcustom WITH ;
		Caption = " ", ;
		Left = 492, ;
		Name = "lblGroup", ;
		TabIndex = 6, ;
		Top = 14, ;
		ZOrderSet = 16
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom1' AS lbllabelcustom WITH ;
		Caption = "Prod Period", ;
		Left = 11, ;
		Name = "Lbllabelcustom1", ;
		TabIndex = 26, ;
		Top = 139, ;
		ZOrderSet = 12
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom2' AS lbllabelcustom WITH ;
		Caption = "/", ;
		Left = 95, ;
		Name = "Lbllabelcustom2", ;
		TabIndex = 29, ;
		Top = 139, ;
		ZOrderSet = 43
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom3' AS lbllabelcustom WITH ;
		Caption = "Group", ;
		Left = 792, ;
		Name = "Lbllabelcustom3", ;
		TabIndex = 45, ;
		Top = 14, ;
		ZOrderSet = 48
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom5' AS lbllabelcustom WITH ;
		Caption = "DOI Class", ;
		FontBold = .F., ;
		Left = 199, ;
		Name = "Lbllabelcustom5", ;
		TabIndex = 44, ;
		Top = 167, ;
		ZOrderSet = 45
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom7' AS lbllabelcustom WITH ;
		Caption = "Deck:", ;
		Left = 271, ;
		Name = "Lbllabelcustom7", ;
		TabIndex = 30, ;
		Top = 90, ;
		ZOrderSet = 63
		*< END OBJECT: ClassLib="..\..\..\codeminenew\ampro_rv\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblMemo' AS lblfieldlabelcustom WITH ;
		Caption = "Notes:", ;
		Height = 16, ;
		Left = 478, ;
		Name = "lblMemo", ;
		TabIndex = 33, ;
		Top = 139, ;
		Width = 33, ;
		ZOrderSet = 31
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblRefid' AS lblfieldlabelcustom WITH ;
		Caption = "Ref ID", ;
		Height = 16, ;
		Left = 11, ;
		Name = "lblRefid", ;
		TabIndex = 37, ;
		Top = 167, ;
		Width = 31, ;
		ZOrderSet = 24
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblRunNo' AS lbllabelcustom WITH ;
		Caption = "Run No", ;
		Left = 22, ;
		Name = "lblRunNo", ;
		TabIndex = 9, ;
		Top = 45, ;
		ZOrderSet = 22
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbltextcustom17' AS lbltextcustom WITH ;
		Caption = "Total Expenses This Period:", ;
		Left = 605, ;
		Name = "Lbltextcustom17", ;
		TabIndex = 43, ;
		Top = 588, ;
		ZOrderSet = 19
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbltextcustom2' AS lbltextcustom WITH ;
		AutoSize = .T., ;
		Caption = "BBL", ;
		Left = 143, ;
		Name = "Lbltextcustom2", ;
		TabIndex = 31, ;
		Top = 139, ;
		ZOrderSet = 33
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblWellid2' AS lblfieldlabelcustom WITH ;
		Caption = "Well Name:", ;
		FontSize = 8, ;
		Height = 16, ;
		Left = 160, ;
		Name = "lblWellid2", ;
		TabIndex = 7, ;
		Top = 14, ;
		Width = 55, ;
		ZOrderSet = 11
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Runcombo1' AS runcombo WITH ;
		ColumnWidths = "230,0,0", ;
		cshowwhat = B, ;
		Height = 20, ;
		HelpContextID = 100, ;
		Left = 71, ;
		lnewrunboth = .T., ;
		Name = "Runcombo1", ;
		TabIndex = 8, ;
		Top = 43, ;
		Width = 263, ;
		ZOrderSet = 38
		*< END OBJECT: ClassLib="..\custom\swcontrol.vcx" BaseClass="combobox" />

	ADD OBJECT 'Shpshapecustom1' AS shpshapecustom WITH ;
		BackColor = 255,255,128, ;
		Height = 121, ;
		Left = 3, ;
		Name = "Shpshapecustom1", ;
		Top = 72, ;
		Width = 861, ;
		ZOrderSet = 6
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="shape" />

	ADD OBJECT 'spnBBL' AS spnspinnercustom WITH ;
		Enabled = .F., ;
		Height = 20, ;
		Left = 167, ;
		lenabled = .F., ;
		Name = "spnBBL", ;
		SelectOnEntry = .T., ;
		TabIndex = 24, ;
		Top = 137, ;
		Width = 51, ;
		ZOrderSet = 32
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="spinner" />

	ADD OBJECT 'Swperiod' AS swperiod WITH ;
		Left = 70, ;
		Name = "Swperiod", ;
		TabIndex = 22, ;
		Top = 137, ;
		ZOrderSet = 44
		*< END OBJECT: ClassLib="..\custom\swcontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'Swyear' AS swyear WITH ;
		BackColor = 255,255,255, ;
		Left = 103, ;
		Name = "Swyear", ;
		TabIndex = 23, ;
		Top = 137, ;
		ZOrderSet = 14
		*< END OBJECT: ClassLib="..\custom\swcontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtafeno' AS txtquickfill WITH ;
		clistexpression = afehdr.cafeno, ;
		clistworkarea = afehdr, ;
		Height = 20, ;
		Left = 358, ;
		MaxLength = 10, ;
		Name = "txtafeno", ;
		TabIndex = 35, ;
		Top = 165, ;
		Width = 79, ;
		ZOrderSet = 42
		*< END OBJECT: ClassLib="..\custom\cgadget.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcatcode' AS txtquickfill WITH ;
		clistexpression = ccatcode, ;
		clistworkarea = expcat, ;
		Height = 20, ;
		Left = 194, ;
		Name = "txtcatcode", ;
		TabIndex = 17, ;
		Top = 110, ;
		Width = 41, ;
		ZOrderSet = 26
		*< END OBJECT: ClassLib="..\custom\cgadget.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcCategory' AS txtquickfill WITH ;
		clistexpression = ccateg, ;
		clistworkarea = expcat, ;
		Height = 20, ;
		Left = 7, ;
		Name = "txtcCategory", ;
		TabIndex = 16, ;
		Top = 110, ;
		Width = 185, ;
		ZOrderSet = 25
		*< END OBJECT: ClassLib="..\custom\cgadget.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcDispCode' AS txttextboxcustom WITH ;
		Left = 84, ;
		Name = "txtcDispCode", ;
		TabIndex = 50, ;
		Top = 276, ;
		Visible = .F., ;
		ZOrderSet = 1
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcdisperm' AS txttextboxcustom WITH ;
		Left = 108, ;
		Name = "txtcdisperm", ;
		TabIndex = 49, ;
		Top = 288, ;
		Visible = .F., ;
		ZOrderSet = 3
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcNotes' AS txttextboxcustom WITH ;
		ControlSource = "", ;
		Height = 20, ;
		Left = 521, ;
		MaxLength = 40, ;
		Name = "txtcNotes", ;
		TabIndex = 25, ;
		Top = 137, ;
		Width = 330, ;
		ZOrderSet = 30
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcOwnerID' AS txtquickfill WITH ;
		clistexpression = investor.cownerid, ;
		clistworkarea = investor, ;
		ControlSource = "", ;
		Format = "!", ;
		Height = 20, ;
		Left = 774, ;
		MaxLength = 10, ;
		Name = "txtcOwnerID", ;
		SelectOnEntry = .T., ;
		TabIndex = 36, ;
		TabStop = .T., ;
		Top = 165, ;
		Width = 76, ;
		ZOrderSet = 7
		*< END OBJECT: ClassLib="..\custom\cgadget.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcRefID' AS txttextboxcustom WITH ;
		ControlSource = "", ;
		Height = 20, ;
		Left = 48, ;
		MaxLength = 20, ;
		Name = "txtcRefID", ;
		SelectOnEntry = .T., ;
		TabIndex = 27, ;
		Top = 165, ;
		Width = 144, ;
		ZOrderSet = 23
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcVendName' AS txtquickfill WITH ;
		clistexpression = cvendname, ;
		clistworkarea = vendor, ;
		Height = 20, ;
		Left = 464, ;
		Name = "txtcVendName", ;
		TabIndex = 20, ;
		Top = 110, ;
		Width = 240, ;
		ZOrderSet = 35
		*< END OBJECT: ClassLib="..\custom\cgadget.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcVendorID' AS txttextboxcustom WITH ;
		BackColor = 212,208,200, ;
		Height = 20, ;
		Left = 564, ;
		MaxLength = 10, ;
		Name = "txtcVendorID", ;
		TabIndex = 12, ;
		Top = 87, ;
		Width = 70, ;
		ZOrderSet = 37
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcWellID' AS txtquickfill WITH ;
		clistexpression = cWellID, ;
		clistworkarea = wells, ;
		ControlSource = "wells.cwellid", ;
		Format = "!", ;
		Height = 20, ;
		Left = 70, ;
		lreadonly = .F., ;
		lrequired = .T., ;
		MaxLength = 10, ;
		Name = "txtcWellID", ;
		TabIndex = 4, ;
		Top = 12, ;
		Width = 84, ;
		ZOrderSet = 13
		*< END OBJECT: ClassLib="..\custom\cgadget.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcWellName' AS txttextboxcustom WITH ;
		BackColor = 212,208,200, ;
		ControlSource = "wells.cwellname", ;
		FontSize = 8, ;
		Height = 20, ;
		Left = 222, ;
		MaxLength = 0, ;
		Name = "txtcWellName", ;
		TabIndex = 5, ;
		Top = 12, ;
		Width = 462, ;
		ZOrderSet = 10
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtdExpDate' AS dpk WITH ;
		ControlSource = "", ;
		Height = 20, ;
		Left = 351, ;
		Name = "txtdExpDate", ;
		TabIndex = 19, ;
		Top = 110, ;
		Visible = .T., ;
		Width = 75, ;
		ZOrderSet = 47
		*< END OBJECT: ClassLib="..\custom\swdate.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtGroup' AS txttextboxcustom WITH ;
		BackColor = 212,208,200, ;
		Height = 20, ;
		Left = 828, ;
		Name = "txtGroup", ;
		TabIndex = 46, ;
		Top = 12, ;
		Width = 24, ;
		ZOrderSet = 49
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtnAmount' AS txttextboxcustom WITH ;
		ControlSource = "", ;
		FontSize = 8, ;
		ForeColor = 0,0,0, ;
		Height = 20, ;
		InputMask = "999999999.99", ;
		Left = 752, ;
		MaxLength = 0, ;
		Name = "txtnAmount", ;
		SelectOnEntry = .T., ;
		TabIndex = 21, ;
		Top = 110, ;
		Width = 99, ;
		ZOrderSet = 27
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtnSaltBBL' AS txttextboxcustom WITH ;
		Height = 20, ;
		Left = 108, ;
		Name = "txtnSaltBBL", ;
		SelectOnEntry = .T., ;
		TabIndex = 47, ;
		Top = 288, ;
		Visible = .F., ;
		Width = 36, ;
		ZOrderSet = 4
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtTotalExp' AS txttextboxcustom WITH ;
		Height = 20, ;
		Left = 747, ;
		Name = "txtTotalExp", ;
		TabIndex = 42, ;
		Top = 586, ;
		Width = 91, ;
		ZOrderSet = 17
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtwastecode' AS txttextboxcustom WITH ;
		Left = 120, ;
		Name = "txtwastecode", ;
		TabIndex = 48, ;
		Top = 300, ;
		Visible = .F., ;
		ZOrderSet = 2
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />
	
	PROCEDURE adddetail		&& Add the detail information to the income table
		LOCAL m.cWellID, m.cYear, m.cPeriod, m.cSource, m.cRevKey, m.nUnits
		LOCAL m.nPrice, m.nTotalInc, m.cBegRange, m.cEndRange, m.cNotes
		LOCAL m.cOwnerID, m.nDaysOn
		
		IF THISFORM.txtnAmount.VALUE = 0  &&  No amount
		   THISFORM.oMessage.warning('You cannot add a zero-amount expense entry.  Please specify an amount before saving this entry.')
		   THISFORM.setnextcontrol(THISFORM.txtnAmount)
		   RETURN .F.
		ENDIF
		*
		*  Check to see if period is closed
		*
		IF THISFORM.lClosed
		   WAIT WIND NOWAIT 'This period and group are closed. No updates allowed.'
		   RETURN
		ENDIF
		
		SELE wells
		LOCATE FOR cWellID = THISFORM.txtcwellid.VALUE
		IF FOUND()
		   IF INLIST(cwellstat, 'I', 'S', 'P')
		      WAIT WIND NOWAIT 'This well is not active. Expenses cannot be allocated to it.'
		      RETURN
		   ENDIF
		   IF wells.cwellstat = 'V'  &&  Warn them if trying to enter expenses for an investment well
		      THISFORM.oMessage.warning('This well is marked as an investment well, so no entries should be made here. Make all expense entries through the Tasks >> Enter Bills Screen.')
		      RETURN
		   ENDIF
		ELSE
		   MESSAGEBOX('Please specify a valid well for this expense.', 16, 'Invalid Well ID')
		   THISFORM.setnextcontrol(THISFORM.txtcwellid)
		   RETURN
		ENDIF
		
		* Check for a valid category
		IF EMPTY(THISFORM.cboclass.VALUE) OR EMPTY(THISFORM.txtcatcode.VALUE)
		   THISFORM.oMessage.warning('Please choose a valid expense category for this expense.')
		   THISFORM.setnextcontrol(THISFORM.txtcCategory)
		   RETURN
		ENDIF
		
		* Check to make sure this category of expense can be added for the well.
		IF NOT chkdoi(THISFORM.txtcwellid.VALUE, THISFORM.cboclass.VALUE)
		   THISFORM.setnextcontrol(THISFORM.txtcwellid)
		   RETURN
		ENDIF
		
		* Make sure the expense category is valid
		IF EMPTY(THISFORM.txtcatcode.VALUE)
		   THISFORM.oMessage.warning('Please select a valid expense category for this expense.')
		   THISFORM.setnextcontrol(THISFORM.txtcCategory)
		   RETURN
		ENDIF
		
		* Validate vendor...Must have a valid vendor
		IF m.goapp.lAMVersion
		   IF EMPTY(THISFORM.txtcvendorID.VALUE)
		      THISFORM.oMessage.warning('Please select a vendor for this expense.')
		      THISFORM.setnextcontrol(THISFORM.txtcvendName)
		      RETURN
		   ELSE
		      SELECT vendor
		      LOCATE FOR cVendorID == THISFORM.txtcvendorID.VALUE
		      IF NOT FOUND()
		         THISFORM.oMessage.warning('Please select a vendor for this expense.')
		         THISFORM.setnextcontrol(THISFORM.txtcvendName)
		         RETURN
		      ENDIF
		   ENDIF
		ENDIF
		
		SWSELECT('afeopt')
		GO TOP
		llAllocExp = lAllocExp
		
		SELECT expcat
		LOCATE FOR ccatcode == THISFORM.txtcatcode.VALUE
		IF FOUND()
		* Make sure the expense class is valid
		   IF EMPTY(THISFORM.cboclass.VALUE)
		      THISFORM.cboclass.VALUE = expcat.cexpclass
		   ENDIF
		   IF expcat.lafetype
		      MESSAGEBOX("This is an AFE expense code, and the option to 'Allocate Expenses to Owners'" + " is not enabled on the Preferences screen under the AFE " +  ;
		           "Management preferences.  "  +  ;
		           "When AFE expenses are entered using this screen, they will be expensed to the owners " + ;
		           "regardless of whether the option is enabled or not.", 0, 'AFE Option Conflict')
		   ENDIF
		ENDIF
		
		* Check to make sure the date is a valid date
		llGoodDate = THISFORM.glmaint.checkperiod(THISFORM.txtdexpdate.VALUE, .T.)
		IF NOT llGoodDate
		   THISFORM.oMessage.warning('The date entered cannot be used. The fiscal year/period for this date has been closed.')
		   RETURN
		ENDIF
		
		WITH THISFORM
		*  Store the detail in memory variables that are the same names
		*  as the table fields
		
		   SELECT wellexp
		   m.cidexph   = ''
		   m.cWellID   = wells.cWellID
		   m.cPeriod   = .swPeriod.VALUE
		   m.cYear     = .swYear.VALUE
		   m.cCateg    = .txtcCategory.VALUE
		   m.cVendorID = .txtcvendorID.VALUE
		   m.cPayee    = .txtcvendName.VALUE
		   m.dExpDate  = .txtdexpdate.VALUE
		   m.nAmount   = .txtnAmount.VALUE
		* Net out "Dummy" owner's share
		*   m.nNetAmount = swNetExp(m.nAmount, m.cWellid, .T., wellexp.cexpclass, 'B')
		   m.cRefID     = .txtcRefID.VALUE
		   m.cMemo      = .txtcNotes.VALUE
		   m.cOwnerID   = .txtcOwnerID.VALUE
		   m.nSaltWater = .txtnSaltBBL.Value
		   m.cdisperm   = .txtcdisperm.value
		   m.cYear      = .swYear.VALUE
		   m.cPeriod    = .swPeriod.VALUE
		   m.cPaidByCk  = ''
		   m.cPrdPaid   = ''
		   m.ccatcode   = .txtcatcode.VALUE
		   m.cexpclass  = .cboclass.VALUE
		   m.cafeno     = .txtafeno.value
		   m.cDeck      = .cboDeck.value
		   
		   IF NOT INLIST(VARTYPE(m.nSaltWater),'I','N')
		      m.nSaltWater = 0
		   ENDIF 
		
		*  Change all one-man items to class 0   
		   IF NOT EMPTY(m.cOwnerID) AND m.cexpclass # 'P'
		      m.cexpclass = '0'
		   ENDIF
		
		*  Plug in today's date for the accounting date if it is empty
		   IF EMPTY(wellexp.dExpDate)
		      THISFORM.cmdatamanager.REPLACE('wellexp', 'DExpdate', DATE())
		   ENDIF
		
		*  Get the fiscal year and period from the accounting date entered
		   m.cAcctPrd  = THISFORM.glmaint.getperiod(wellexp.dExpDate, .F.)
		   m.cAcctYear = THISFORM.glmaint.getperiod(wellexp.dExpDate, .T.)
		
		   IF m.ccatcode = 'PLUG'
		      SWSELECT('vendor')
		      SET ORDER TO cVendorID
		      IF SEEK(m.cVendorID) AND vendor.linteggl = .F. AND (m.goapp.lAMVersion OR m.goapp.lQBVersion)
		         MESSAGEBOX('Plugging exepenses must be entered with a vendor that is marked to post to the G/L.', 16, 'Wrong Vendor')
		         llReturn = .F.
		         RETURN llReturn 
		      ENDIF
		
		      SWSELECT('plugwell')
		      LOCATE FOR cWellID = m.cWellID
		      IF NOT FOUND()
		         MESSAGEBOX('The "PLUG" expense code is designated for the Plugging module. ' + ;
		              'A target must be setup on the Plugging Fund Well Targets window ' + ;
		              'for this well before you can use the PLUG expense code for the well.', 16, 'Missing Plugging Target')
		         llReturn = .F.
		         RETURN llReturn
		      ENDIF
		   ENDIF
		
		   STORE .F. TO m.lOneMan, m.lAPTran, m.lClosed, m.lFixed
		
		   THISFORM.cmdatamanager.new('Wellexp')
		   m.cBatch     = wellexp.cBatch
		
		   lcidexpe = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Expense')
		
		   SWSELECT('expense', .T.)
		   SET DELE OFF
		   SET ORDER TO cidexpe
		   DO WHILE SEEK(lcidexpe)
		      lcidexpe = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Expense')
		   ENDDO
		   SET DELE ON
		
		   THISFORM.cmdatamanager.REPLACE('wellexp', 'cwellid', m.cWellID)
		   THISFORM.cmdatamanager.REPLACE('wellexp', 'cvendorid', m.cVendorID)
		   THISFORM.cmdatamanager.REPLACE('wellexp', 'ccateg', m.cCateg)
		   THISFORM.cmdatamanager.REPLACE('wellexp', 'cpayee', m.cPayee)
		   THISFORM.cmdatamanager.REPLACE('wellexp', 'namount', m.nAmount)
		   THISFORM.cmdatamanager.REPLACE('wellexp', 'cexpclass', m.cexpclass)
		   THISFORM.cmdatamanager.REPLACE('wellexp', 'ccatcode', m.ccatcode)
		   THISFORM.cmdatamanager.REPLACE('wellexp', 'cownerid', m.cOwnerID)
		   THISFORM.cmdatamanager.REPLACE('wellexp', 'crefid', m.cRefID)
		   THISFORM.cmdatamanager.REPLACE('wellexp', 'cyear', m.cYear)
		   THISFORM.cmdatamanager.REPLACE('wellexp', 'cperiod', m.cPeriod)
		   THISFORM.cmdatamanager.REPLACE('wellexp', 'dexpdate', m.dExpDate)
		   THISFORM.cmdatamanager.REPLACE('wellexp', 'cidexpe', lcidexpe)
		   THISFORM.cmdatamanager.REPLACE('wellexp', 'nsaltwater', m.nSaltWater)
		   THISFORM.cmdatamanager.REPLACE('wellexp', 'cdisperm', m.cdisperm)
		   THISFORM.cmdatamanager.REPLACE('wellexp', 'cmemo', m.cMemo)
		   THISFORM.cmdatamanager.REPLACE('wellexp', 'cafeno', m.cAFENo)
		   THISFORM.cmdatamanager.REPLACE('wellexp', 'cdeck', m.cDeck)
		
		
		
		   STORE '' TO .txtcNotes.VALUE, .txtcvendName.VALUE, .txtcvendorID.VALUE, ;
		      .txtcOwnerID.VALUE, .txtcCategory.VALUE, .txtcRefID.VALUE, .txtafeno.value
		   .txtnAmount.setvalue(0)
		   THISFORM.spnBBL.VALUE = 0
		
		   .calctot()
		   THISFORM.setnextcontrol(THISFORM.grdgridcustom1.Column1.txtcCategory)
		   THISFORM.setnextcontrol(THISFORM.txtcCategory)
		   THISFORM.lChanged = .T.
		   m.goStateManager.RefreshAll('Form Edit')
		   THISFORM.REFRESH()
		ENDWITH
		
		
	ENDPROC

	PROCEDURE addfixed		&& Adds fixed expenses to the period
		LPARA tlNoCheck
		LOCAL lcYear, lcPeriod, lcWellID, lcidexph, lnfixed, llContinue
		
		IF THISFORM.lClosed
		   WAIT WIND NOWAIT 'This period and group are closed. No updates allowed.'
		   RETURN
		ENDIF
		
		lcYear   = wellexp.cYear
		lcPeriod = wellexp.cPeriod
		lcWellID = wells.cWellID
		lcidexph = ''
		ldAcctDate = DATE()
		
		m.dFixDate = ldAcctDate
		
		SELECT expense
		COUNT FOR cWellID = lcWellID AND cYear = 'FIXD' TO lnCount
		
		COUNT FOR cWellID = lcWellID AND cYear+cPeriod = lcYear+lcPeriod AND lFixed TO lnfixed
		
		IF NOT tlNoCheck
		   DO CASE
		      CASE lnfixed > 0
		         IF THISFORM.oMessage.CONFIRM('Fixed wellexps have already been released for this well and period. '  + ;
		               'Do you want to continue?')
		            llContinue = .T.
		         ELSE
		            llContinue = .F.
		         ENDIF
		      CASE lnCount > 0
		         llContinue = .T.
		      CASE lnCount = 0
		         llContinue = .F.
		         THISFORM.oMessage.DISPLAY('There are no fixed wellexps set up for this well.')
		   ENDCASE
		ELSE
		   IF lnfixed = 0
		      IF THISFORM.oMessage.CONFIRM('Should the fixed wellexps be released for this well now?')
		         llContinue = .T.
		      ELSE
		         llContinue = .F.
		      ENDIF
		   ENDIF
		ENDIF
		
		IF llContinue
		   SELECT expense
		   SCAN FOR cWellID = lcWellID AND cYear = 'FIXD' AND NOT DELETED()
		      SCATTER MEMVAR
		      m.cYear     = lcYear
		      m.cPeriod   = lcPeriod
		      m.cAcctYear = THISFORM.glmaint.getperiod(ldAcctDate,.T.)
		      m.cAcctPrd  = THISFORM.glmaint.getperiod(ldAcctDate,.F.)
		      m.dExpdate  = m.dFixDate
		      m.cidexph   = lcidexph
		      m.cidexpe   = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Expense')
		      m.lFixed    = .T.
		      m.lAPTran   = .F.
		
		      SELECT expense1
		      SET DELE OFF
		      SET ORDER TO cidexpe
		      DO WHILE SEEK(m.cidexpe)
		         m.cidexpe   = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Expense')
		      ENDDO
		      SET DELE ON
		
		      INSERT INTO wellexp FROM MEMVAR
		   ENDSCAN
		   THISFORM.oMessage.DISPLAY(ALLTRIM(STR(lnCount)) + ' Fixed wellexps Were Added For This Well')
		   THISFORM.calctot()
		   THISFORM.REFRESH()
		ENDIF
		
	ENDPROC

	PROCEDURE calcdayson		&& Calculates the days on.
	ENDPROC

	PROCEDURE calctot		&& Calculates the total  income for the period.
		LOCAL lnTotal, lcidexph, lnRecNo, lcSelect
		
		lcSelect = SELECT()
		
		SELECT wellexp
		lnRecNo = RECNO()
		SUM(nAmount) TO lnTotal 
		IF lnRecNo <= RECCOUNT()
		   GOTO lnRecNo
		ENDIF   
		
		thisform.txtTotalExp.Value = lnTotal
		thisform.txtTotalExp.Refresh()
		
		SELECT (lcSelect)
		
		
	ENDPROC

	PROCEDURE calctotalinc		&& Calculates the total income based on the units and price entered.
	ENDPROC

	PROCEDURE checkclose		&& Checks to see if the period has been closed.
		LOCAL lcYear, lcPeriod, lcGroup, lcAlias, llReturn
		
		WAIT CLEAR
		
		lnRunNo    = INT(VAL(THISFORM.RunCombo1.LISTITEM[THISFORM.RunCombo1.LISTITEMID,3]))
		
		IF lnrunno <> 0
		   RETURN .T.
		ELSE
		   RETURN .F.
		ENDIF
		      
		
	ENDPROC

	PROCEDURE checkruns		&& Check for runs for the given well id.
	ENDPROC

	PROCEDURE delete
		LPARAMETERS cworkarea, tlDelDetail, tlEdit
		
		thisform.lDelDetail = tlDelDetail
		
		IF TYPE('m.cWorkarea') <> 'C'
		   m.cWorkArea = 'Wellexp'
		ENDIF
		
		IF m.cworkarea = 'Wells'
		   m.cworkarea = 'Wellexp'
		ENDIF   
		
		IF m.cworkarea = 'Wellexp' AND tlDelDetail AND tledit
		   THISFORM.glmaint.delbatch(wellexp.cbatch,'DM')
		   SELECT wellexp
		   DELETE NEXT 1
		   GO top
		   return
		ENDIF 
		DODEFAULT(cworkarea)
	ENDPROC

	PROCEDURE editdetail		&& Brings the current record in the grid up to the detail section in the form.
		IF thisform.ExpProcessed()
		   WAIT WIND NOWAIT 'This expense has been processed in a run closing. It cannot be modified.'
		   RETURN
		ENDIF
		
		IF wellexp.laptran
		   thisform.omessage.warning('This well expense came from A/P or Cash Disbursements. It cannot be changed here.')
		   RETURN
		ENDIF
		
		IF m.goapp.lamversion
		   llValidDate = THISFORM.glmaint.checkperiod(wellexp.dExpDate,.T.)
		   IF NOT llValidDate
		      THISFORM.oMessage.Warning('This entry cannot be changed, since the fiscal year/period has been closed.')
		      RETURN
		   ENDIF
		ENDIF
		      
		WITH THISFORM
		   .lConfirmDelete = .F.
		   .txtdexpdate.SETVALUE(wellexp.dexpdate)
		   .txtcatcode.SETVALUE(wellexp.ccatcode)
		   .txtnAmount.setvalue(wellexp.nAmount)
		   .txtcVendName.VALUE = wellexp.cPayee
		   .txtcVendorID.VALUE = wellexp.cVendorID
		   .txtcOwnerID.VALUE = wellexp.cownerid
		   .txtcNotes.VALUE = wellexp.cmemo
		   .txtcCategory.VALUE = wellexp.ccateg
		   .txtcRefID.VALUE = wellexp.crefid
		   .cboclass.value  = wellexp.cexpclass
		   .spnBBL.VALUE = wellexp.nsaltwater
		   .txtafeno.value = wellexp.cafeno
		   thisform.lFromEdit = .t.
		   .DELETE('Wellexp',.T.,.T.)
		   thisform.lFromEdit = .f.
		   .getexpenses()
		   .grdgridcustom1.Refresh()
		   .txtccategory.setfocus()
		   .lConfirmDelete = .t.
		ENDWITH
		
		
	ENDPROC

	PROCEDURE expprocessed		&& Checks to see if the expense has been processed in a run closing
		LOCAL llReturn
		
		* Check to see if the current expense has been processed in a run closing
		* Return .T. if it has been processed
		
		llReturn = .f.
		
		IF NOT THISFORM.lJIBWell
		   IF wellexp.nrunnojib <> 0 OR wellexp.nrunnorev <> 0
		      llReturn = .T.
		   ENDIF
		ELSE
		   IF wellexp.nrunnojib <> 0
		      llReturn = .t.
		   ENDIF    
		ENDIF
		
		RETURN llReturn
	ENDPROC

	PROCEDURE getexpenses
		LOCAL lcYear, lcPeriod, lcWellID, lnRecNo, lcWellName
		
		lnRunNo    = INT(VAL(THISFORM.runcombo1.LISTITEM[THISform.runcombo1.LISTITEMID,3]))
		lcYear     = THISFORM.runcombo1.LISTITEM[THISform.runcombo1.LISTITEMID,2]
		lcWellID   = THISFORM.txtcwellid.VALUE
		lcWellName = THISFORM.txtcWellName.VALUE
		
		IF THISFORM.checkclose()
		   WAIT WIND NOWAIT 'This run is closed. No updates allowed.'
		   THISFORM.lblClosed.VISIBLE = .T.
		   THISFORM.cmdatamanager.revertall()
		ELSE
		   THISFORM.lblClosed.VISIBLE = .F.
		ENDIF
		
		THISFORM.REQUERY()
		
		RETURN .T.
		
		
		
		
		
		
	ENDPROC

	PROCEDURE Init
		IF DODEFAULT()
		   THISFORM.RunCombo1.LISTITEMID = 1
		   thisform.txtdExpDate.value = date()
		   
		   *  If it's the DM, allow exceptions in the quickfills for the vendor name textbox, and the vendor name in the grid
		   IF NOT m.goapp.lamversion
		      ThisForm.txtcVendName.lallowexceptions = .t.
		      thisform.grdgridcustom1.column3.txtcPayee.lallowexceptions = .t.
		   ENDIF 
		
		ENDIF 
	ENDPROC

	PROCEDURE list
		thisform.listwells()
	ENDPROC

	PROCEDURE listwells
		LOCAL lcList
		PRIV llOK
		
		IF THISFORM.flushcontrolbuffer()
		   IF thisform.cmdatamanager.ischanged()
		      IF thisform.omessage.confirm('Save changes to records for this well?')
		         thisform.save()
		      ENDIF
		   ENDIF 
		
		    llOK = .F.
		    lcList = 'cwellid,cwellname,cgroup,cwellstat'
		
		    DO FORM ..\CUSTOM\picklist WITH 'Wells', lcList, THISFORM.txtcwellid.VALUE, 4
		
		    IF llOK
		        THISFORM.cmdatamanager.revertall()
		        THISFORM.txtcwellid.VALUE = wells.cwellid
		        THISFORM.txtcWellName.VALUE = wells.cwellname
		        THISFORM.txtgroup.VALUE = wells.cgroup
		        THISFORM.txtcWellName.REFRESH()
		        THISFORM.txtgroup.REFRESH()
		        THISFORM.getexpenses()
		    ENDIF
		ENDIF
		
	ENDPROC

	PROCEDURE new
		LPARAMETERS cworkarea
		*
	ENDPROC

	PROCEDURE requery
		LPARAMETERS cworkarealist
		
		lcWellID  = wells.cwellid
		lcRunYear = THISFORM.runcombo1.LISTITEM[thisform.runcombo1.listitemid,2]
		lnRunNo   = INT(VAL(THISFORM.runcombo1.LISTITEM[thisform.runcombo1.listitemid,3]))
		lcType    = THISFORM.runcombo1.LISTITEM[thisform.runcombo1.listitemid,6]
		
		sele wellexp
		=tableupdate(.T.)
		sele expense
		=tableupdate(.T.)
		
		=requery('wellexp')
		select wellexp
		go top
		thisform.calctot()
		thisform.refresh()
	ENDPROC

	PROCEDURE save
		LPARAMETERS cworkarealist
		
		thisform.setnextcontrol(thisform.txtcwellid)
		
		DODEFAULT(cworkarealist)
		
	ENDPROC

	PROCEDURE cboClass.Init
		IF DODEFAULT()
		   this.Requery()
		ENDIF   
	ENDPROC

	PROCEDURE cboClass.Requery
		THIS.CLEAR()
		THIS.ADDLISTITEM('0',1,1)
		THIS.ADDLISTITEM('Working Interest',1,2)
		THIS.ADDLISTITEM('1',2,1)
		THIS.ADDLISTITEM('Class 1',2,2)
		THIS.ADDLISTITEM('2',3,1)
		THIS.ADDLISTITEM('Class 2',3,2)
		THIS.ADDLISTITEM('3',4,1)
		THIS.ADDLISTITEM('Class 3',4,2)
		THIS.ADDLISTITEM('4',5,1)
		THIS.ADDLISTITEM('Class 4',5,2)
		THIS.ADDLISTITEM('5',6,1)
		THIS.ADDLISTITEM('Class 5',6,2)
		THIS.ADDLISTITEM('A',7,1)
		THIS.ADDLISTITEM('After Casing Point',7,2)
		THIS.ADDLISTITEM('B',8,1)
		THIS.ADDLISTITEM('Before Casing Point',8,2)
		THIS.ADDLISTITEM('G',9,1)
		THIS.ADDLISTITEM('Net Gas Interest',9,2)
		
		lnI = 10
		IF m.goapp.lPluggingModule
		   THIS.ADDLISTITEM('Plugging', lnI, 2)
		   THIS.ADDLISTITEM('P', lnI, 1)
		   lnI = lnI + 1 
		ENDIF    
		
	ENDPROC

	PROCEDURE cboDeck.Init
		IF DODEFAULT()
		   this.Requery()
		ENDIF    
	ENDPROC

	PROCEDURE cboDeck.Requery
		LPARAMETERS tcDeck, tcYear, tcPeriod
		
		IF DODEFAULT()
			THIS.Clear()
			this.Value = ''
			this.DisplayValue = ''
			IF VARTYPE(tcYear) # 'C'
			   tcYear = ''
			ENDIF 
			IF VARTYPE(tcPeriod) # 'C'
			   tcPeriod = ''
			ENDIF 
		
		    IF VARTYPE(tcDeck) # 'C'
		       tcDeck = ''
		    ENDIF 
		       
		    lcWellID = thisform.txtcwellID.Value 
		    IF EMPTY(lcWellID)
		       RETURN
		    ENDIF 
		    
		    lnIndex = 1
		    
		    * Get a list of decks for the given well
			SELECT cdeck, ldefault, effstartyr, effstartprd FROM doidecks ;
				INTO CURSOR temp ;
				WHERE cwellid = lcwellid ;
				ORDER BY cdeck DESC  ;
				GROUP BY cdeck
		
		    * Add the decks to the dropdown
			lnx = 1
			IF _TALLY > 0
				SELECT temp
				SCAN
					SCATTER MEMVAR
					IF EMPTY(m.cdeck)
					   m.cdeck = '(blank)'
					ENDIF 
					THIS.ADDLISTITEM(m.cdeck,lnx,1)
					THIS.ADDLISTITEM(m.cdeck,lnx,2)
					
					* If we passed the deck or production period
					* set the deck to the given deck or the one
					* that has an effective date for the production period.
					IF NOT EMPTY(tcDeck)
						IF m.cDeck = tcDeck
					  	 	lnIndex = lnx
						ENDIF 
					ELSE
					   IF tcYear = m.effstartyr AND tcPeriod = m.effstartprd
					      lnIndex = lnX
					   ENDIF 
					ENDIF 	
					lnx = lnx + 1 
				ENDSCAN
			    this.ListItemId = lnIndex
			ELSE 		
			    this.ListItemId = 1
			ENDIF
		ENDIF
		
	ENDPROC

	PROCEDURE cboDeck.Valid
		RETURN .t.
	ENDPROC

	PROCEDURE cmdAFENo.Click
		LOCAL lcList
		PRIV llOK, lcWell 
		
		llOK = .T.
		
		lcList = 'cafeno,cwellid'
		
		lcWell = thisform.txtcwellID.value
		SELECT afehdr
		SET FILTER TO cwellid = lcWell
		
		IF _TALLY > 0
		   DO FORM ..\CUSTOM\Picklist WITH 'afehdr', lcList, THISFORM.txtafeno.VALUE, 2, .F.
		
		   IF llOK
		      THISFORM.txtafeno.VALUE = afehdr.cafeno
		      THISFORM.txtafeno.REFRESH()
		   ENDIF
		
		   THISFORM.setnextcontrol(THISFORM.txtafeno)
		ENDIF
		
		SELECT afehdr
		SET FILTER TO 
		
	ENDPROC

	PROCEDURE cmdAFENo.When
		RETURN MDOWN()
	ENDPROC

	PROCEDURE cmdatamanager.afterdelete
		LPARAMETERS cFldState, lForce, cDeleteCmd, lResult
		
		RETURN .t.
	ENDPROC

	PROCEDURE cmdatamanager.afternav
		LPARAMETERS cworkarea
		LOCAL lcgroup
		
		IF m.cworkarea = 'Wells'
		   thisform.lgridclicked = .f.
		   lnrunno    = INT(VAL(THISFORM.runcombo1.LISTITEM[THISFORM.RunCombo1.LISTITEMID,3]))
		   lcyear     = THISFORM.runcombo1.LISTITEM[THISFORM.RunCombo1.LISTITEMID,2]
		   lcwellid   = wells.cwellid
		   lcgroup = wells.cgroup
		   thisform.txtcwellname.value = wells.cwellname
		   thisform.txtgroup.value = wells.cgroup
		
		   STORE 0 TO THISFORM.txtnamount.VALUE
		   
		   SWSELECT('afeopt')
		   GO TOP
		   llAllocExp = lAllocExp
		   
		   IF NOT llAllocExp
		      thisform.cmdaFENo.Visible = .f.
		      thisform.txtafeno.Visible = .f.
		   ELSE
		      thisform.cmdaFENo.Visible = .t.
		      thisform.txtafeno.Visible = .t.
		   ENDIF 
		
		   SELE wellinv
		   LOCATE FOR cwellid=lcwellid AND ctypeinv='W' AND ljib
		   IF FOUND()
		      THISFORM.ljibwell = .T.
		   ELSE
		      THISFORM.ljibwell = .F.
		   ENDIF
		
		   THISFORM.getexpenses()
		
		   *   thisform.calctot()
		
		ENDIF
		
		
	ENDPROC

	PROCEDURE cmdatamanager.afternew
		LPARAMETERS cworkarea
		LOCAL lcidexph, lcidexpe
		
		IF m.cworkarea = 'Wellexp'
		   m.cBatch = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Batch')
		   lcidexpe = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Expense')
		
		   SELECT expense
		   SET DELE OFF
		   SET ORDER TO cidexpe
		   DO WHILE SEEK(lcidexpe)
		      lcidexpe = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Expense')
		   ENDDO
		   SET DELE ON
		
		   SELECT Wellexp
		   REPL cBatch  WITH m.cBatch, ;
		        cidexpe WITH lcidexpe
		        
		   THISFORM.setnextcontrol(THISFORM.txtcWellID)
		ENDIF
		
		
	ENDPROC

	PROCEDURE cmdatamanager.afterupdate
		LPARAMETERS cWorkareaList, lCurrentRecordOnly
		
		thisform.requery()
		
		return(DODEFAULT(cworkarealist,lcurrentrecordonly))
	ENDPROC

	PROCEDURE cmdatamanager.beforedelete
		LPARAMETERS cworkarea
		LOCAL lcbatch
		
		DO CASE
		   CASE m.cworkarea = 'Wellexp' AND NOT THISFORM.ldeldetail
		      IF NOT THISFORM.ljibwell
		         IF wellexp.nrunnojib <> 0 OR wellexp.nrunnorev <> 0
		            WAIT WIND NOWAIT 'These expenses have been processed in a closed run. They cannot be deleted.'
		            RETURN
		         ENDIF
		      ELSE
		         IF wellexp.nrunnojib <> 0
		            WAIT WIND NOWAIT 'These expenses have been processed in a closed run. They cannot be deleted.'
		            RETURN
		         ENDIF
		      ENDIF
		
		      lnexpcnt = 0
		      llalloc = THISFORM.omessage.CONFIRM('Should these expenses be placed in the allocation file?')
		      IF NOT llalloc
		         THISFORM.omessage.DISPLAY('Since these expenses are not being placed into the allocation file, any that came from a bill will not be deleted.  To delete those entries, the original bill must be deleted.')
		      ENDIF
		
		      SET DELETED ON
		      SELECT wellexp
		      SCAN
		         SCATTER MEMVAR
		         m.cidexps    = THISFORM.oregistry.incrementcounter('%Shared.Counters.Expense')
		
		         *  Get the batch number to delete
		         lcbatch = wellexp.cbatch
		         SELECT expsusp1
		         SET DELE OFF
		         SET ORDER TO cidexps
		         DO WHILE SEEK(m.cidexps)
		            m.cidexps    = THISFORM.oregistry.incrementcounter('%Shared.Counters.Expense')
		         ENDDO
		         SET DELE ON
		         *  Insert into expsusp if they told it to, or if it came from a bill
		         IF llalloc
		            SELECT expsusp
		            INSERT INTO expsusp FROM MEMVAR
		            IF llalloc
		               lnexpcnt = lnexpcnt + 1
		            ENDIF
		         ELSE
		            *  Delete the batch from glmaster
		            THISFORM.glmaint.delbatch(lcbatch,'DM')
		         ENDIF
		
		         IF llalloc OR (NOT llalloc AND NOT m.lAPTran)
		            SELE wellexp
		            DELE NEXT 1
		         ENDIF
		      ENDSCAN
		
		      SELECT wellexp
		      =TABLEUPDATE(.T.)
		      SELECT expsusp
		      =TABLEUPDATE(.T.)
		      SELECT expense
		      =TABLEUPDATE(.T.)
		
		      IF lnexpcnt > 0
		         THISFORM.omessage.DISPLAY('Placed ' + ALLTRIM(STR(lnexpcnt)) + ' entries in the allocation file.')
		      ENDIF
		
		   CASE m.cworkarea = 'Wellexp' AND THISFORM.ldeldetail
		      SELECT wellexp
		      SCATTER MEMVAR
		
		      IF m.goapp.lamversion
		         llValidDate = THISFORM.glmaint.checkperiod(wellexp.dExpDate,.T.)
		         IF NOT llValidDate
		            THISFORM.omessage.Warning('This entry cannot be changed, since the fiscal year/period has been closed.')
		            RETURN .F.
		         ENDIF
		      ENDIF
		
		      IF NOT THISFORM.lFromEdit
		         IF wellexp.lAPTran &&  If editing, don't ask about the allocation file - If lAPTran, don't ask about it, either - BH 10/10/2006
		            m.cidexps    = THISFORM.oregistry.incrementcounter('%Shared.Counters.Expense')
		            SELECT expsusp1
		            SET DELE OFF
		            SET ORDER TO cidexps
		            DO WHILE SEEK(m.cidexps)
		               m.cidexps    = THISFORM.oregistry.incrementcounter('%Shared.Counters.Expense')
		            ENDDO
		            SET DELE ON
		            SELECT expsusp
		            INSERT INTO expsusp FROM MEMVAR
		            THISFORM.omessage.DISPLAY('This expense has been placed in the allocation file.')
		         ELSE
		            IF THISFORM.omessage.CONFIRM('Should this expense be placed in the allocation file?')
		               m.cidexps    = THISFORM.oregistry.incrementcounter('%Shared.Counters.Expense')
		               SELECT expsusp1
		               SET DELE OFF
		               SET ORDER TO cidexps
		               DO WHILE SEEK(m.cidexps)
		                  m.cidexps    = THISFORM.oregistry.incrementcounter('%Shared.Counters.Expense')
		               ENDDO
		               SET DELE ON
		               SELECT expsusp
		               INSERT INTO expsusp FROM MEMVAR
		               THISFORM.omessage.DISPLAY('This expense has been placed in the allocation file.')
		            ELSE
		               lcbatch = wellexp.cbatch
		               IF NOT wellexp.lAPTran
		                  *  Delete the batch from glmaster
		                  THISFORM.glmaint.delbatch(lcbatch,'DM')
		               ENDIF
		            ENDIF
		         ENDIF
		      ELSE
		         * Delete this batch from the G/L
		         THISFORM.glmaint.delbatch(m.cbatch,'DM')
		         SELECT wellexp
		         DELETE NEXT 1
		         GO TOP
		      ENDIF
		ENDCASE
		
		
		
		
		
		
	ENDPROC

	PROCEDURE cmdatamanager.beforenav
		LPARAMETERS cworkarea
		
		IF m.cWorkarea = 'Wellexp'
		   IF thisform.lblClosed.Visible = .T.
		      thisform.cmdatamanager.revertall()
		      thisform.lChanged = .F.
		   ENDIF
		ENDIF
		
		DODEFAULT()      
	ENDPROC

	PROCEDURE cmdatamanager.beforeupdate
		LPARAMETERS cworkarealist
		LOCAL lcBatch, lcCash, lcRevClear, lcGroup, llReturn
		*
		*  Builds the glmaster journal entries for the wellexps for the well
		*
		THISFORM.setnextcontrol(THISFORM.txtcwellid)
		
		swselect('wells')
		SET ORDER to cwellid
		IF SEEK(thisform.txtcwellID.Value)
		   IF INLIST(wells.cwellstat,'I','S','P')
		      thisform.omessage.warning('This well is not active. No expenses can be allocated to it.')
		      RETURN .F.
		   ENDIF
		ENDIF 
		      
		lnRunNo    = INT(VAL(THISFORM.RunCombo1.LISTITEM[THISFORM.RunCombo1.LISTITEMID,3]))
		lcYear     = THISFORM.RunCombo1.LISTITEM[THISFORM.RunCombo1.LISTITEMID,2]
		lcWellID   = thisform.txtcwellid.value
		lcWellName = THISFORM.txtcWellName.VALUE
		  
		* Can't save to a period that's already closed
		IF THISFORM.checkclose()
		   WAIT WIND NOWAIT 'This run is closed. No updates allowed.'
		   THISFORM.cmdatamanager.revertall()
		   THISFORM.lchanged = .F.
		   RETURN .F.
		ENDIF
		
		* Don't post G/L entries if this is not the AM
		IF NOT m.goApp.lAMVersion
		   RETURN .T.
		ENDIF   
		
		*  Since we're looping out for the DM, we just need to make sure there's no blank vendors on any entries that are trying to be saved
		SELECT wellexp
		LOCATE FOR NOT lAPTran AND EMPTY(cVendorid)
		IF FOUND()
		   thisform.oMessage.Warning('You cannot save an expense entry without a valid vendor on it.  Please correct before proceeding.')
		   RETURN .f.
		ENDIF 
		
		*  Get the default A/P account
		swselect('apopt')
		lcapacct  = capacct
		
		* Get the dept no for disbursement manager
		swselect('options')
		lcDeptNo = cDeptNo
		lcFixedExp = cfixedacct
		
		IF EMPTY(lcFixedExp)
		   lcFixedExp = lcAPAcct
		ENDIF   
		
		*  Get the default wellexp clearing account
		swselect('glopt')
		lcExpClear = cExpClear
		llDMNoPost = .F.
		llDMNoExp  = .F.
		
		*  Get the group for this well
		swselect('wells')
		SET ORDER TO cwellid
		IF SEEK(lcWellID)
		   lcGroup = cGroup
		ELSE
		   lcGroup = '00'
		ENDIF
		
		WITH THISFORM
		   * Get the batch number these entries are to be posted under
		   lcBatch = thisform.oregistry.incrementcounter('%Shared.Counters.Batch')
		
		   * Remove any entries for this batch
		   .glmaint.delbatch(lcBatch,'DM')
		
		   *  Set the properties
		   .glmaint.cBatch     = lcBatch
		   .glmaint.cdeptno    = lcDeptNo
		   .glmaint.cidchec    = ''
		   .glmaint.cunitno    = lcWellID
		   .glmaint.cSource    = 'DM'
		   .glmaint.cGroup     = lcGroup
		   .glmaint.lPrinted   = .T.
		   .glmaint.cEntryType = 'C'
		   .glmaint.cIDType    = 'V'
		   .glmaint.ccheckno   = ''
		
		   * Post the entries entered through this form.
		   * When lAPTran = .T. the entry was added by the Acct Mgr
		   * When lFixed  = .T. the wellexp is a released fixed wellexp
		   IF NOT llDMNoPost AND NOT llDMNoExp
		      SELECT wellexp
		      SCAN FOR lAPTran = .F.
		         SCATTER MEMVAR
		         * Remove any entries for this batch
		        .glmaint.delbatch(m.cBatch,'DM')
		        .glmaint.cBatch  = m.cBatch
		         *  Check for valid vendor id. If there isn't one on the
		         *  record, don't post this entry.
		         swselect('vendor')
		         LOCATE FOR cVendorID == m.cVendorID
		         IF NOT FOUND()
		            LOOP
		         ENDIF   
		         *  Add deposit to check register
		         IF EMPTY(wellexp.dexpdate)
		            .glmaint.dgldate = DATE()
		         ELSE   
		            .glmaint.dgldate    = wellexp.dexpdate
		         ENDIF   
		         .glmaint.creference = 'Prod: ' + wellexp.cyear + '/'+wellexp.cperiod
		         .glmaint.dCheckDate = wellexp.dexpdate
		         .glmaint.dPostDate  = wellexp.dexpdate
		         .glmaint.cid        = m.cVendorID
		         .glmaint.cPayee     = m.cPayee
		         .glmaint.nAmount    = swNetExp(wellexp.nAmount, wellexp.cWellid, .T., wellexp.cexpclass, 'B',.f.,m.cownerid,m.ccatcode, m.cdeck)
		         .glmaint.cAcctNo    = lcExpClear
		         .glmaint.cDesc      = m.cCateg
		         .glmaint.ccatcode   = m.ccatcode
		         .glmaint.csource    = 'DM'
		         .glmaint.cafeno     = wellexp.cafeno
		         .glmaint.updatebatch()
		
		         * Add A/P entry
		         .glmaint.cAcctNo    = lcFixedExp
		         .glmaint.nAmount    = swNetExp(wellexp.nAmount * -1, wellexp.cWellid, .T., wellexp.cexpclass, 'B',.f.,m.cownerid,m.ccatcode, m.cdeck)
		         .glmaint.ccatcode   = ''
		         .glmaint.cafeno     = ''
		         .glmaint.updatebatch()
		      ENDSCAN
		
		      *  Check to make sure the batch is in balance
		      llReturn = .glmaint.chkbalance()
		
		   ELSE
		      llReturn = .T.
		   ENDIF
		
		   IF llReturn
		      RETURN .T.
		   ELSE
		      THISFORM.oMessage.Severe('The G/L entry created for this wellexp entry is not in balance.')
		      RETURN .F.
		   ENDIF
		
		ENDWITH
		
	ENDPROC

	PROCEDURE cmdDelDetail.Click
		SELECT wellexp
		IF EOF()  &&  Don't try to delete if there's no record - avoids a blank record getting sent to the allocation file
		   RETURN
		ENDIF
		
		IF THISFORM.lgridclicked
		   IF NOT THISFORM.lJIBWell
		      IF wellexp.nrunnojib <> 0 OR wellexp.nrunnorev <> 0
		         WAIT WIND NOWAIT 'This expense has been processed in a closed run. It cannot be modified.'
		         RETURN
		      ENDIF
		   ELSE
		      IF wellexp.nrunnojib <> 0
		         WAIT WIND NOWAIT 'This expense has been processed in a closed run. It cannot be modified.'
		         RETURN
		      ENDIF
		   ENDIF
		
		   THISFORM.lConfirmDelete = .F.
		   THISFORM.DELETE('Wellexp',.T.)
		   thisform.save()
		   THISFORM.setnextcontrol(THISFORM.txtcCategory)
		   THISFORM.lConfirmDelete = .T.
		ENDIF
		
	ENDPROC

	PROCEDURE cmdDelDetail.When
		RETURN MDOWN()
	ENDPROC

	PROCEDURE cmdEditDetail.Click
		thisform.editdetail()
		
	ENDPROC

	PROCEDURE cmdEditDetail.When
		RETURN MDOWN()
	ENDPROC

	PROCEDURE cmdLookCat.Click
		LOCAL lcList
		PRIV llOK
		
		llOK = .F.
		SELECT cCateg,cCatCode,cExpClass,IIF(lAFEType,'A','') AS cAFEType, IIF(lJIBOnly,'J','') AS cJIBOnly  ;
		    FROM expcat INTO CURSOR exptmp READWRITE
		
		SELECT exptmp
		INDEX ON cCatCode           TAG cCatCode
		INDEX ON UPPER(cCateg)      TAG cCateg
		INDEX ON cExpClass+cCatCode TAG cExpClass
		INDEX ON cAFEType           TAG cAFEType
		INDEX ON cJIBOnly           TAG cJIBOnly
		
		lcList = 'ccateg\Category,ccatcode\Code,cexpclass\Cls,cAFEType\AFE,cJIBOnly\JIB'
		
		DO FORM '..\custom\picklist' WITH 'exptmp', lcList, THISFORM.txtcCategory.VALUE, 5, .T., .T.
		
		IF llOK
		   THISFORM.txtccategory.VALUE = exptmp.ccateg
		   THISFORM.txtccategory.REFRESH()
		   THISFORM.txtCatCode.SET('value',exptmp.cCatCode)
		   thisform.cboclass.set('value',exptmp.cexpclass)
		ENDIF
		
		thisform.setnextcontrol(thisform.txtccategory)
		
	ENDPROC

	PROCEDURE cmdLookCat.When
		RETURN MDOWN()
	ENDPROC

	PROCEDURE cmdLookVend.Click
		LOCAL lcList
		PRIV llOK
		
		llOK = .F.
		lcList = 'cvendorid,cvendname'
		
		DO FORM ..\custom\picklist WITH 'Vendor', lcList, thisform.txtcvendorid.value, 2
		
		IF llOK
		   thisform.txtcVendorID.value = vendor.cvendorid
		   thisform.txtcVendName.value = vendor.cvendname
		   thisform.txtcVendorID.Refresh()
		   thisform.txtcVendName.Refresh()
		ENDIF   
		
		thisform.setnextcontrol(thisform.txtcVendName)
	ENDPROC

	PROCEDURE cmdLookVend.When
		RETURN MDOWN()
	ENDPROC

	PROCEDURE cmdLookWell.Click
		thisform.listwells()
		* Reset the filter in case the picklist set it to something different
		SELECT wells
		SET FILTER TO inlist(cwellstat,'A','T','D','N')
		
		   
	ENDPROC

	PROCEDURE cmdLookWell.When
		
		RETURN MDOWN()
	ENDPROC

	PROCEDURE cmdOwner.Click
		LOCAL lcList, oPickList
		PRIV llOK
		
		llOK = .F.
		lcList = 'cownerid\Owner ID,csortfield\Owner Name'
		
		SET SAFETY OFF
		SELECT cownerid, csortfield FROM investor INTO CURSOR temp ;
		  WHERE cownerid IN (SELECT cOwnerid FROM wellinv WHERE cWellID = thisform.txtcwellid.value) ;
		  ORDER BY cownerid
		
		USE DBF('temp') AGAIN IN 0 ALIAS tempown
		SELECT tempown
		INDEX ON cownerid TAG cownerid
		INDEX ON csortfield TAG csortfield
		
		DO FORM ..\custom\picklist WITH 'Tempown', lcList, thisform.txtcownerid.value, 2, .t.,.t.
		
		IF llOK
		   thisform.txtcOwnerID.setvalue(tempown.cownerid)
		   thisform.txtcOwnerID.Refresh()
		   thisform.setnextcontrol(thisform.txtcownerid)
		ENDIF   
		
		IF USED('temp')
		   USE IN temp
		ENDIF
		
		IF USED('tempown')
		   USE IN tempown
		ENDIF      
	ENDPROC

	PROCEDURE cmdOwner.When
		RETURN MDOWN()
	ENDPROC

	PROCEDURE Grdgridcustom1.AfterRowColChange
		LPARAMETERS ncol
		
		IF DODEFAULT(ncol)
		   thisform.calctot()
		endif   
	ENDPROC

	PROCEDURE Grdgridcustom1.Click
		thisform.lgridclicked = .t.
		DODEFAULT()
	ENDPROC

	PROCEDURE Grdgridcustom1.Column1.txtcCategory.DblClick
		
		thisform.editdetail()
	ENDPROC

	PROCEDURE Grdgridcustom1.Column1.txtcCategory.InteractiveChange
		
		IF NOT wellexp.laptran
		   DODEFAULT()
		   thisform.cmdatamanager.replace('wellexp','Ccatcode',expcat.ccatcode)
		   thisform.cmdatamanager.replace('wellexp','cexpclass',expcat.cexpclass)
		ENDIF   
	ENDPROC

	PROCEDURE Grdgridcustom1.Column1.txtcCategory.KeyPress
		LPARAMETERS nkeycode, nshiftaltctrl
		
		IF wellexp.laptran
		   THISFORM.omessage.warning('This expense came from A/P or G/L. It cannot be changed here.')
		   NODEFAULT
		ELSE
		   IF thisform.ExpProcessed()
		      THISFORM.omessage.warning('This expense has been processed in a run closing. It cannot be changed here.')
		      NODEFAULT
		   ELSE    
		      DODEFAULT(nkeycode, nshiftaltctrl)
		   ENDIF    
		ENDIF
	ENDPROC

	PROCEDURE Grdgridcustom1.Column1.txtcCategory.Valid
		IF NOT wellexp.laptran
		   DODEFAULT()
		ENDIF   
	ENDPROC

	PROCEDURE Grdgridcustom1.Column2.txtdExpDate.DblClick
		thisform.editdetail()
	ENDPROC

	PROCEDURE Grdgridcustom1.Column2.txtdExpDate.KeyPress
		LPARAMETERS nkeycode, nshiftaltctrl
		
		IF wellexp.laptran
		   THISFORM.omessage.warning('This expense came from A/P or G/L. It cannot be changed here.')
		   NODEFAULT
		ELSE
		   IF thisform.ExpProcessed()
		      THISFORM.omessage.warning('This expense has been processed in a run closing. It cannot be changed here.')
		      NODEFAULT
		   ELSE    
		      DODEFAULT(nkeycode, nshiftaltctrl)
		   ENDIF    
		ENDIF
	ENDPROC

	PROCEDURE Grdgridcustom1.Column2.txtdExpDate.Valid
		LOCAL llValidDate
		
		IF NOT wellexp.lAPTran
		   *  If this is the AM and they change the date down here, make sure the old or new dates aren't in a closed year/period
		   IF m.goapp.lamversion
		      IF THIS.VALUE <> wellexp.dExpDate
		         llValidDate = THISFORM.glmaint.checkperiod(wellexp.dExpDate,.T.)
		         IF NOT llValidDate
		            THISFORM.oMessage.Warning('The original date of this entry cannot be changed, since the fiscal year/period has been closed.')
		            THIS.REFRESH()
		            RETURN
		         ENDIF
		         llValidDate = THISFORM.glmaint.checkperiod(THIS.VALUE,.T.)
		         IF NOT llValidDate
		            THISFORM.oMessage.Warning('This date cannot be used, since the fiscal year/period has been closed.')
		            THIS.REFRESH()
		            RETURN
		         ENDIF
		      ENDIF
		   ENDIF
		   DODEFAULT()
		ENDIF
	ENDPROC

	PROCEDURE Grdgridcustom1.Column3.txtcPayee.DblClick
		thisform.editdetail()
	ENDPROC

	PROCEDURE Grdgridcustom1.Column3.txtcPayee.InteractiveChange
		IF NOT wellexp.laptran
		   DODEFAULT()
		   IF wellexp.cVendorID <> vendor.cVendorID
		      thisform.cmdatamanager.replace('wellexp','cvendorid',vendor.cvendorid)
		   endif
		ENDIF   
	ENDPROC

	PROCEDURE Grdgridcustom1.Column3.txtcPayee.KeyPress
		LPARAMETERS nkeycode, nshiftaltctrl
		
		IF wellexp.laptran
		   THISFORM.omessage.warning('This expense came from A/P or G/L. It cannot be changed here.')
		   NODEFAULT
		ELSE
		   IF thisform.ExpProcessed()
		      THISFORM.omessage.warning('This expense has been processed in a run closing. It cannot be changed here.')
		      NODEFAULT
		   ELSE    
		      DODEFAULT(nkeycode, nshiftaltctrl)
		   ENDIF    
		ENDIF
	ENDPROC

	PROCEDURE Grdgridcustom1.Column3.txtcPayee.Valid
		IF NOT wellexp.laptran   
		   IF DODEFAULT()
		      SELECT vendor
		      SET ORDER TO cvendname
		      LOCATE FOR ALLT(THIS.VALUE) $ cvendname
		      IF NOT FOUND()
		         IF wellexp.cVendorID <> ''
		            THISFORM.cmdatamanager.REPLACE('wellexp','Cvendorid','')
		         endif
		      ELSE
		         IF wellexp.cVendorID <> vendor.cVendorID
		            THISFORM.cmdatamanager.REPLACE('wellexp','Cvendorid',vendor.cvendorid)
		         ENDIF
		         IF wellexp.ccatcode = 'PLUG' AND NOT vendor.linteggl
		            MESSAGEBOX('Plugging exepenses must be entered with a vendor that is marked to post to the G/L.', 16, 'Wrong Vendor')
		            THISFORM.cmdatamanager.REPLACE('wellexp','Cvendorid','')
		         ENDIF        
		      ENDIF
		   ENDIF
		ENDIF
		
		
	ENDPROC

	PROCEDURE Grdgridcustom1.Column4.txtnAmount.DblClick
		thisform.editdetail()
	ENDPROC

	PROCEDURE Grdgridcustom1.Column4.txtnAmount.KeyPress
		LPARAMETERS nkeycode, nshiftaltctrl
		
		IF wellexp.laptran
		   THISFORM.omessage.warning('This expense came from A/P or G/L. It cannot be changed here.')
		   NODEFAULT
		ELSE
		   IF thisform.ExpProcessed()
		      THISFORM.omessage.warning('This expense has been processed in a run closing. It cannot be changed here.')
		      NODEFAULT
		   ELSE    
		      DODEFAULT(nkeycode, nshiftaltctrl)
		   ENDIF    
		ENDIF
	ENDPROC

	PROCEDURE Grdgridcustom1.Column4.txtnAmount.Valid
		IF NOT wellexp.laptran
		   DODEFAULT()
		ENDIF   
	ENDPROC

	PROCEDURE Grdgridcustom1.Column5.txtcYear.KeyPress
		LPARAMETERS nkeycode, nshiftaltctrl
		
		IF wellexp.laptran
		   THISFORM.omessage.warning('This expense came from A/P or G/L. It cannot be changed here.')
		   NODEFAULT
		ELSE
		   IF thisform.ExpProcessed()
		      THISFORM.omessage.warning('This expense has been processed in a run closing. It cannot be changed here.')
		      NODEFAULT
		   ELSE    
		      DODEFAULT(nkeycode, nshiftaltctrl)
		   ENDIF    
		ENDIF
	ENDPROC

	PROCEDURE Grdgridcustom1.Column5.txtcYear.Valid
		IF NOT wellexp.laptran
		   IF NOT BETWEEN(THIS.VALUE,'1960','2040')
		      WAIT WIND NOWAIT 'Invalid production year entered.'
		      RETURN 0
		   ENDIF
		
		   DODEFAULT()
		ENDIF
		
	ENDPROC

	PROCEDURE Grdgridcustom1.Column6.txtcPeriod.KeyPress
		LPARAMETERS nkeycode, nshiftaltctrl
		
		IF wellexp.laptran
		   THISFORM.omessage.warning('This expense came from A/P or G/L. It cannot be changed here.')
		   NODEFAULT
		ELSE
		   IF thisform.ExpProcessed()
		      THISFORM.omessage.warning('This expense has been processed in a run closing. It cannot be changed here.')
		      NODEFAULT
		   ELSE    
		      DODEFAULT(nkeycode, nshiftaltctrl)
		   ENDIF    
		ENDIF
	ENDPROC

	PROCEDURE Grdgridcustom1.Column6.txtcPeriod.Valid
		IF NOT wellexp.laptran
		   THIS.VALUE = PADL(ALLT(THIS.VALUE),2,'0')
		   IF NOT BETWEEN(THIS.VALUE,'01','12')
		      WAIT WIND NOWAIT 'Invalid production period entered.'
		      RETURN 0
		   ENDIF
		
		   DODEFAULT()
		ENDIF
		
	ENDPROC

	PROCEDURE Grdgridcustom1.Column7.Txtquickfill1.InteractiveChange
		IF NOT wellexp.laptran
		   DODEFAULT()
		   thisform.cmdatamanager.replace('wellexp','cCateg',expcat.cCateg)
		   thisform.cmdatamanager.replace('wellexp','cexpclass',expcat.cexpclass)
		ENDIF   
	ENDPROC

	PROCEDURE Grdgridcustom1.Column7.Txtquickfill1.KeyPress
		LPARAMETERS nkeycode, nshiftaltctrl
		
		IF wellexp.laptran
		   THISFORM.omessage.warning('This expense came from A/P or G/L. It cannot be changed here.')
		   NODEFAULT
		ELSE
		   IF thisform.ExpProcessed()
		      THISFORM.omessage.warning('This expense has been processed in a run closing. It cannot be changed here.')
		      NODEFAULT
		   ELSE    
		      DODEFAULT(nkeycode, nshiftaltctrl)
		   ENDIF    
		ENDIF
	ENDPROC

	PROCEDURE Grdgridcustom1.Column7.Txtquickfill1.Valid
		IF NOT wellexp.laptran
		   DODEFAULT()
		ENDIF 
	ENDPROC

	PROCEDURE Grdgridcustom1.Column8.txtClass.KeyPress
		LPARAMETERS nkeycode, nshiftaltctrl
		
		IF wellexp.laptran
		   THISFORM.omessage.warning('This expense came from A/P or G/L. It cannot be changed here.')
		   NODEFAULT
		ELSE
		   IF thisform.ExpProcessed()
		      THISFORM.omessage.warning('This expense has been processed in a run closing. It cannot be changed here.')
		      NODEFAULT
		   ELSE    
		      DODEFAULT(nkeycode, nshiftaltctrl)
		   ENDIF    
		ENDIF
	ENDPROC

	PROCEDURE Grdgridcustom1.Column8.txtClass.Valid
		IF NOT wellexp.laptran
		   IF NOT INLIST(THIS.VALUE,'0','1','2','3','4','5','A','B','P','G')
		      WAIT WIND NOWAIT 'Invalid expense class entered. Valid choices are 012345AB'
		      RETURN 0
		   ENDIF
		
		   DODEFAULT()
		ENDIF
		
	ENDPROC

	PROCEDURE Grdgridcustom1.Init
		IF DODEFAULT()
		   FOR EACH oCol IN THIS.COLUMNS
		      oCol.DYNAMICFORECOLOR = "IIF(wellexp.lFixed,rgb(255,0,0),IIF(wellexp.lAPTran,rgb(0,0,255),rgb(0,0,0)))"
		   ENDFOR
		ENDIF
		
	ENDPROC

	PROCEDURE Grdgridcustom1.When
		thisform.lgridclicked = .t.
		DODEFAULT()
	ENDPROC

	PROCEDURE Runcombo1.fieldvalid
		IF THISFORM.cmdatamanager.ischanged()
		   IF MESSAGEBOX('The changes made to the expenses for this well will not be saved if you continue. Do you want to continue?',36,'Discard Changes?') = 6
		      thisform.cmdatamanager.revertall()
		      
		   ELSE
		      this.ListItemId = thisform.nrunitemid
		      RETURN     
		   ENDIF 
		ENDIF
		
		RETURN thisform.getexpenses()
	ENDPROC

	PROCEDURE Runcombo1.When
		thisform.nrunitemid = this.listitemid
		DODEFAULT()
	ENDPROC

	PROCEDURE spnBBL.When
		IF DODEFAULT()
		   IF 'BRINE' $ UPPER(THISFORM.txtcCategory.VALUE) OR ;
		         'WATER' $ UPPER(THISFORM.txtcCategory.VALUE) OR ;
		         'SALT'  $ UPPER(THISFORM.txtcCategory.VALUE) OR ;
		         'H2O'   $ UPPER(THISFORM.txtcCategory.VALUE)
		      RETURN .T.
		   ELSE
		      RETURN .F.
		   ENDIF
		ENDIF
		
	ENDPROC

	PROCEDURE Swperiod.Valid
		IF EMPTY(THIS.VALUE)
		   THIS.SET('value',PADL(ALLTRIM(STR(MONTH(DATE()))),2,'0'))
		ENDIF
		
		DODEFAULT()
		
	ENDPROC

	PROCEDURE Swyear.Valid
		IF EMPTY(THIS.VALUE)
		   THIS.SET('value',ALLTRIM(STR(YEAR(DATE()))))
		ENDIF
		
		DODEFAULT()
		
	ENDPROC

	PROCEDURE txtafeno.GotFocus
		ON KEY LABEL F2 _SCREEN.ACTIVEFORM.cmdLookOwner.CLICK()
		
		DODEFAULT()
		
	ENDPROC

	PROCEDURE txtafeno.Valid
		IF DODEFAULT()
		   IF NOT EMPTY(THIS.VALUE)
		      swselect('afehdr')
		      LOCATE FOR cafeno = THIS.VALUE AND cwellid = THISFORM.txtcwellID.VALUE
		      IF NOT FOUND()
		         MESSAGEBOX('This AFE No is not valid for well: ' + ALLTRIM(THISFORM.txtcwellID.VALUE) + ' Please choose a valid AFE.',0,'Invalid AFE')
		         RETURN 0
		      ENDIF
		   ENDIF
		ENDIF
		
	ENDPROC

	PROCEDURE txtcatcode.GotFocus
		ON KEY LABEL F2 _screen.activeform.cmdLookCat.Click()
		DODEFAULT()
	ENDPROC

	PROCEDURE txtcatcode.InteractiveChange
		IF DODEFAULT()
		   THISFORM.txtcCategory.VALUE = expcat.cCateg
		   IF NOT EMPTY(expcat.cExpClass)
		      THISFORM.cboclass.VALUE   = expcat.cExpClass
		   ELSE
		      THISFORM.cboclass.VALUE   = '0'
		   ENDIF
		ENDIF
		
	ENDPROC

	PROCEDURE txtcatcode.LostFocus
		ON KEY LABEL F2
		DODEFAULT()
	ENDPROC

	PROCEDURE txtcatcode.Valid
		LOCAL lcClass, lcWellID
		
		IF EMPTY(THIS.VALUE)
		   return
		ENDIF
		IF EMPTY(THISFORM.txtcCategory.VALUE)
		   THISFORM.txtcCategory.SET('value',expcat.ccateg)
		   thisform.txtcCategory.Valid()
		ENDIF
		
		lcClass = expcat.cexpclass
		lcWellID = THISFORM.txtcwellid.VALUE
		
		IF NOT BETWEEN(lcClass,'0','P')
		   lcClass = '0'
		ENDIF
		
		thisform.cboclass.set('value',lcClass)
		
		IF NOT chkdoi(lcWellID,lcClass)
		   THIS.VALUE = ''
		   THISFORM.txtcCategory.SET('value','')
		ENDIF
		
		thisform.cboClass.Requery()
		
		DODEFAULT()
		
	ENDPROC

	PROCEDURE txtcCategory.GotFocus
		ON KEY LABEL F2 _screen.activeform.cmdLookCat.Click()
		DODEFAULT()
	ENDPROC

	PROCEDURE txtcCategory.InteractiveChange
		IF DODEFAULT()
		   THISFORM.txtcatcode.VALUE = expcat.ccatcode
		   THISFORM.cboclass.VALUE   = expcat.cexpclass
		ENDIF
		
	ENDPROC

	PROCEDURE txtcCategory.LostFocus
		ON KEY LABEL F2
		
		SELECT wells  &&  Don't let them enter enter expenses for inactive wells.  Just warn them here, adddetail() won't let them save it. - BH 10/10/2006
		LOCATE FOR cwellid == thisform.txtcWellID.value
		IF NOT FOUND() OR (FOUND() AND wells.cWellStat = 'I')
		   thisform.oMessage.Warning('This well is marked as inactive.  No expenses can be entered for it.')
		ENDIF
		
		DODEFAULT()
	ENDPROC

	PROCEDURE txtcCategory.Valid
		LOCAL lcClass, lcWellID
		
		IF EMPTY(THIS.VALUE)
		   RETURN
		ENDIF
		
		lnLastKey = LASTKEY()  &&  Store the last key, so if it's a tab or enter, we can set the cursor to the right field after returning from the brine lookup
		WITH THISFORM
		
		   IF 'SALT'  $ UPPER(.txtccategory.VALUE) OR ;
		      'BRINE' $ UPPER(.txtccategory.VALUE) OR ;
		      'WATER' $ UPPER(.txtccategory.VALUE)
		
		         m.odialog = CREATEOBJECT('frmWaterDialog',.txtnsaltbbl.VALUE,.txtcdisperm.VALUE,.txtcdispcode.VALUE,.txtWasteCode.VALUE, !m.goapp.lPARpts)
		         m.odialog.SHOW()
		         lnbbl   = m.odialog.txtwaterbbl.VALUE
		         lcperm  = m.odialog.cbodisposal.VALUE
		         lcdisp  = m.odialog.cbodispcode.VALUE
		         lcWaste = m.odialog.cbowastecode.value
		         m.odialog.RELEASE()
		         .txtnsaltbbl.VALUE = lnbbl
		         .txtcdisperm.VALUE = lcperm
		         .txtWasteCode.value = lcWaste
		         .txtcdispcode.value = lcdisp
		      
		   ENDIF
		ENDWITH
		
		SELE expcat
		LOCATE FOR ccateg = ALLT(THIS.VALUE)
		IF FOUND()
		   lcClass = expcat.cexpclass
		   lcWellID = THISFORM.txtcwellid.VALUE
		   thisform.txtcatcode.value = expcat.ccatcode
		   thisform.cboClass.Value = expcat.cexpclass 
		   IF NOT BETWEEN(lcClass,'0','P')
		      lcClass = '0'
		   ENDIF
		
		   IF NOT chkdoi(lcWellID,lcClass)
		      THIS.VALUE = ''
		      thisform.txtcatcode.set('value','')
		   ENDIF
		ENDIF
		DODEFAULT()
		
	ENDPROC

	PROCEDURE txtcOwnerID.GotFocus
		ON KEY LABEL F2 _screen.activeform.cmdOwner.Click()
		DODEFAULT()
	ENDPROC

	PROCEDURE txtcOwnerID.LostFocus
		ON KEY LABEL F2
		
		IF (LASTKEY() = 13 OR LASTKEY() = 9) AND NOT MDOWN()  &&  Tab or enter, but not a mouseclick
		   *  Add the data to the income table
		
		   SELECT wells  &&  Don't let them enter enter expenses for inactive wells - BH 10/10/2006
		   LOCATE FOR cwellid == THISFORM.txtcwellid.VALUE
		   IF NOT FOUND() OR (FOUND() AND wells.cWellStat = 'I')
		      THISFORM.oMessage.Warning('This well is marked as inactive.  No expenses can be entered for it.')
		      RETURN
		   ELSE
		      IF wells.cWellStat = 'V'  &&  Warn them if trying to enter expenses for an investment well
		         THISFORM.oMessage.Warning('This well is marked as an investment well, so no entries should be made here. Make all expense entries through the Tasks >> Enter Bills Screen.')
		         return
		      ENDIF
		   ENDIF
		
		   IF THISFORM.adddetail()
		      THISFORM.setnextcontrol(THISFORM.txtcCategory)
		      THISFORM.txtcCategory.SETFOCUS()
		   endif
		ENDIF
		
	ENDPROC

	PROCEDURE txtcOwnerID.Valid
		DODEFAULT()
		
		SELECT investor
		SET ORDER TO cownerid
		IF SEEK(this.value)
		   SELECT wellinv
		   LOCATE FOR cwellid = thisform.txtcwellid.value AND cownerid = this.value
		   IF NOT FOUND()
		      this.value = ''
		      WAIT WINDOW 'The owner chosen is not an owner in this well. Please choose another.'
		      RETURN .f.
		   ENDIF
		ELSE   
		   IF NOT EMPTY(this.Value)
		      thisform.oMessage.Display('%msgBadOwnerID')
		      RETURN 0
		   ENDIF    
		ENDIF   
	ENDPROC

	PROCEDURE txtcVendName.GotFocus
		ON KEY LABEL F2 _screen.activeform.cmdLookVend.Click()
		DODEFAULT()
	ENDPROC

	PROCEDURE txtcVendName.InteractiveChange
		IF DODEFAULT()
		   SELECT vendor
		   LOCATE FOR ALLT(cVendName) = ALLT(THIS.VALUE)
		   IF FOUND()
		      THISFORM.txtcvendorid.VALUE = vendor.cvendorid
		      THISFORM.txtcvendorid.REFRESH()
		   ENDIF
		ENDIF
		
	ENDPROC

	PROCEDURE txtcVendName.LostFocus
		ON KEY LABEL F2
		IF NOT EMPTY(this.value) AND NOT LEFT(this.value,1) = '*'
		   thisform.txtcVendorID.value = vendor.cVendorID
		   thisform.txtcVendorID.Refresh()
		ELSE
		   thisform.txtcVendorID.value = ''
		   thisform.txtcVendorID.Refresh()
		ENDIF   
		DODEFAULT()
	ENDPROC

	PROCEDURE txtcVendName.Valid
		DODEFAULT()
		
		IF NOT EMPTY(ALLTRIM(THIS.VALUE))
		   SELECT vendor
		   LOCATE FOR cvendorid = THISFORM.txtcvendorID.VALUE
		   IF FOUND()
		      IF lHold  &&  Don't let them continue with a vendor marked to be on hold
		         THISFORM.oMessage.Warning('This vendor is on hold.  No expenses can be entered for them.')
		         THIS.SET('value','')
		         THISFORM.txtcvendorID.SET('value','')
		         RETURN 0
		      ENDIF
		   ENDIF
		ENDIF
		
	ENDPROC

	PROCEDURE txtcVendorID.When
		RETURN .F.
	ENDPROC

	PROCEDURE txtcWellID.GotFocus
		ON KEY LABEL F2 _screen.activeform.cmdLookWell.Click()
		DODEFAULT()
	ENDPROC

	PROCEDURE txtcWellID.InteractiveChange
		IF DODEFAULT()
		   thisform.txtcwellname.set('value',wells.cwellname)
		   thisform.txtgroup.set('value',wells.cgroup)
		ENDIF
	ENDPROC

	PROCEDURE txtcWellID.LostFocus
		LOCAL lcWellID
		
		IF DODEFAULT()
		   ON KEY LABEL F2 *
		   IF THIS.VALUE <> THISFORM.cwellsave
		      IF LASTKEY() <> -1 AND NOT MDOWN()
		         lcWellID = THIS.VALUE
		         SELE wellexp
		         IF RECC() > 0
		            THISFORM.SAVE()
		         ENDIF
		         SELE wells
		         LOCATE FOR cwellid = lcWellID
		         IF FOUND()
		            IF wells.cwellstat = 'I'
		               THISFORM.lvalidwell = .F.
		            ELSE
		               THISFORM.lvalidwell = .T.
		            ENDIF
		         ENDIF
		         SELE wellinv
		         LOCATE FOR cwellid=lcWellID AND ctypeinv='W' AND lJIB
		         IF FOUND()
		            THISFORM.lJIBWell = .T.
		         ELSE
		            THISFORM.lJIBWell = .F.
		         ENDIF
		         THISFORM.getexpenses()
		      ENDIF
		   ENDIF
		ENDIF
		
	ENDPROC

	PROCEDURE txtcWellID.Valid
		SELECT wells
		SET ORDER to cwellid
		IF NOT EMPTY(this.value) AND NOT SEEK(this.Value)
		   thisform.omessage.warning('Invalid Well ID entered. Please correct.')
		   RETURN 0
		ENDIF 
		      
		      
	ENDPROC

	PROCEDURE txtcWellID.When
		thisform.cwellsave = this.value
		dodefault()
	ENDPROC

	PROCEDURE txtcWellName.When
		IF DODEFAULT()
		   RETURN .F.
		ENDIF   
	ENDPROC

	PROCEDURE txtGroup.When
		DODEFAULT()
		RETURN .f.
	ENDPROC

	PROCEDURE txtTotalExp.When
		IF DODEFAULT()
		   RETURN .F.
		ENDIF
		   
	ENDPROC

ENDDEFINE
