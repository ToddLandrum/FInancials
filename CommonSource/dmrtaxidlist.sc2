*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="dmrtaxidlist.scx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="2" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Cursor1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor2" UniqueID="" Timestamp="" />

	AutoOpenTables = .F.
	DataSource = .NULL.
	Height = 333
	Left = 4
	Name = "Dataenvironment"
	Top = 279
	Width = 520

	ADD OBJECT 'Cursor1' AS cursor WITH ;
		Alias = "investor", ;
		CursorSource = "investor", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 275, ;
		Left = 10, ;
		Name = "Cursor1", ;
		Order = "cownerid", ;
		Top = 19, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor2' AS cursor WITH ;
		Alias = "vendor", ;
		CursorSource = "vendor", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 252, ;
		Left = 150, ;
		Name = "Cursor2", ;
		Top = 20, ;
		Width = 85
		*< END OBJECT: BaseClass="cursor" />

ENDDEFINE

DEFINE CLASS formdmtaxlist AS frmrptcriteria OF "..\source\appforms.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="chklNoSSN" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkInvalid" UniqueID="" Timestamp="" />

	Caption = "Tax ID Listing"
	DataSession = 2
	DoCreate = .T.
	Height = 226
	HelpContextID = 215
	Name = "FormDMTaxList"
	Width = 432
	Swrptcriteriabuttons1.BackStyle = 0
	Swrptcriteriabuttons1.CHKEXPORT.Alignment = 0
	Swrptcriteriabuttons1.CHKEXPORT.Name = "CHKEXPORT"
	Swrptcriteriabuttons1.cmdclose.Name = "cmdclose"
	Swrptcriteriabuttons1.cmdPreview.Name = "cmdPreview"
	Swrptcriteriabuttons1.cmdPrint.Name = "cmdPrint"
	Swrptcriteriabuttons1.Left = 96
	Swrptcriteriabuttons1.Name = "Swrptcriteriabuttons1"
	Swrptcriteriabuttons1.TabIndex = 3
	Swrptcriteriabuttons1.Top = 147
	Swrptcriteriabuttons1.ZOrderSet = 0

	ADD OBJECT 'chkInvalid' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Only Show Blank or Invalid Tax IDs", ;
		Height = 16, ;
		Left = 120, ;
		Name = "chkInvalid", ;
		Style = 0, ;
		TabIndex = 2, ;
		Top = 90, ;
		Value = .F., ;
		Width = 186, ;
		ZOrderSet = 1
		*< END OBJECT: ClassLib="..\..\dmpro_rv\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chklNoSSN' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Mask Tax ID Numbers on Report", ;
		Height = 16, ;
		Left = 120, ;
		Name = "chklNoSSN", ;
		Style = 0, ;
		TabIndex = 1, ;
		Top = 48, ;
		Value = .F., ;
		Width = 172, ;
		ZOrderSet = 1
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />
	
	PROCEDURE builddata
		LOCAL lcBegID, lcBegName, lcBetween, lcEndID, lcEndName, lcOrderBy, lcReportName, lcSelectCriteria
		LOCAL lcSortOrder, llActive, llNoSSN, llNotes, llReturn, loError
		LOCAL llInterests, llSeparate
		
		llReturn = .T.
		
		TRY
		
		   llNoSSN		 = THISFORM.chklnoSSN.VALUE
		   llInvalidOnly = THISFORM.chkInvalid.VALUE
		
		   IF !m.goapp.oSecurity.HasPrivilege('Tax Ids')
		      llNoSSN = .T.
		   ENDIF
		
		   *
		   *   Builds the cursor needed by the report by using
		   *   the criteria given in the form
		   *
		
		   swclose('taxlist')
		
		   ******************************************************************************
		   *  If neither the Interests or Separate Page box is chosen
		   ******************************************************************************
		
		
		   SELECT  investor.cOwnerID AS cid,  ;
		      investor.cSortField AS cname, ;
		      'O' AS ctype, ;
		      IIF(investor.linv1099,'Y','N') as cSend1099, ;
		      investor.ctaxid ;
		      FROM investor  ;
		      ORDER BY cOwnerID ;
		      INTO CURSOR taxlist READWRITE
		
		   SELECT  vendor.cvendorid AS cid, ;
		      vendor.cvendname AS cname, ;
		      'V' AS ctype, ;
		      IIF(vendor.lsend1099,'Y','N') as cSend1099, ;
		      vendor.ctaxid ;
		      FROM vendor ;
		      ORDER BY cvendorid ;
		      INTO CURSOR temp
		
		   SELECT taxlist
		   APPEND FROM DBF('temp')
		   INDEX ON cid TAG cid
		
		   THISFORM.cTitle1			= 'Tax ID Listing'
		   THISFORM.cTitle2			= ''
		   THISFORM.cSelectCriteria	= ''
		   THISFORM.cSortOrder		= ''
		   THISFORM.cReportName		= 'dmrtaxlist'
		
		   swselect('options')
		   GO TOP
		
		   IF options.lEncrypted
		      SELECT taxlist
		      REPLACE ctaxid WITH cmEncrypt(ALLTRIM(ctaxid), m.goapp.cEncryptionKey) ALL
		   ENDIF
		
		   IF llNoSSN
		      SELECT taxlist
		      SCAN
		         IF NOT EMPTY(ctaxid)
		            IF SUBSTR(ctaxid, 4, 1) = '-'
		               REPLACE ctaxid WITH '***-**-' + RIGHT(ALLTRIM(ctaxid), 4)
		            ELSE
		               IF SUBSTR(ctaxid, 3, 1) = '-'
		                  REPLACE ctaxid WITH '**-**' + RIGHT(ALLTRIM(ctaxid), 4)
		               ELSE
		                  REPLACE ctaxid WITH '***-**-' + RIGHT(ALLTRIM(ctaxid), 4)
		               ENDIF
		            ENDIF
		         ENDIF
		      ENDSCAN
		   ENDIF
		
		   IF llInvalidOnly
		      SELECT taxlist
		      SCAN
		         lcTIN = ALLTRIM(STRTRAN(ctaxid, '-', ''))
		
		         * Look for missing TIN
		         IF EMPTY(lcTIN)
		            LOOP
		         ENDIF
		
		         * Check for TIN being all the same digit        
		         lcFirstDigit = LEFT(ALLTRIM(lcTIN), 1)
		         llSame		  = .T.
		         FOR x = 2 TO LEN(lcTIN)
		            IF SUBSTR(lcTIN, x, 1) # lcFirstDigit
		               llSame = .F.
		            ENDIF
		         ENDFOR
		         IF llSame
		            LOOP
		         ENDIF
		
		         * Look for an invalid TIN (not long enough)
		         IF LEN(lcTIN) # 9 AND LEN(lcTIN) > 0
		            LOOP
		         ENDIF
		
		         * Look for an invalid TIN (asterisks)
		         IF '*' $ lcTIN
		            LOOP
		         ENDIF
		
		
		         * Delete the good ones
		         DELETE NEXT 1
		      ENDSCAN
		
		      THISFORM.cTitle2 = 'Invalid Tax IDs Only'
		   ENDIF
		
		   COUNT FOR NOT DELETED() TO lnCount
		   SELECT taxlist
		   IF lnCount > 0
		      llReturn = .T.
		   ELSE
		      llReturn = .F.
		   ENDIF
		CATCH TO loError
		   llReturn = .F.
		   DO errorlog WITH 'BuildData', loError.LINENO, 'Tax ID Listing', loError.ERRORNO, loError.MESSAGE, '', loError
		   MESSAGEBOX('Unable to process the report at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		        'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		RETURN llReturn
		
		
		
		
	ENDPROC

	PROCEDURE chkInvalid.Click
		IF this.Value
		   thisform.chklNoSSN.Value = .f.
		ENDIF 
	ENDPROC

	PROCEDURE chklNoSSN.Click
		IF this.Value
		   thisform.chkInvalid.Value = .f.
		ENDIF 
	ENDPROC

ENDDEFINE
