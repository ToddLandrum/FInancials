*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="fileoffsite.scx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="2" />

	AutoOpenTables = .F.
	DataSource = .NULL.
	Height = 200
	Left = 40
	Name = "Dataenvironment"
	Top = 235
	Width = 520

ENDDEFINE

DEFINE CLASS formfileoffsite AS frmformcustom OF "..\custom\cforms.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="cmdGetFileList" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lstBackupFiles" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdDownload" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdExit" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdConfig" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: decrypt
		*m: deletefile
		*m: downloadfile
		*m: encrypt
		*m: ftpconnect
		*m: getfilelist
		*m: process
		*m: processoffrest
		*m: togglepassiveftp
		*p: crestorefile
		*p: lftpconnected
		*p: loffbackup
		*p: oprogress
		*p: _memberdata		&& XML Metadata for customizable properties
	*</DefinedPropArrayMethod>

	Caption = "Manage Offsite Backup Files"
	DataSession = 2
	DoCreate = .T.
	Height = 349
	HelpContextID = 46
	Name = "FormFileOffsite"
	Width = 604
	_memberdata = <VFPData>
		<memberdata name="decrypt" display="Decrypt"/>
		<memberdata name="encrypt" display="Encrypt"/>
		</VFPData>		&& XML Metadata for customizable properties
	Mwresize1.lblHighLight.Name = "lblHighLight"
	Mwresize1.lblShading.Name = "lblShading"
	Mwresize1.Left = 552
	Mwresize1.Name = "Mwresize1"
	Mwresize1.TabIndex = 6
	Mwresize1.Top = 324

	ADD OBJECT 'cmdConfig' AS cmdcommandbuttoncustom WITH ;
		Caption = "Config", ;
		Height = 35, ;
		Left = 263, ;
		Name = "cmdConfig", ;
		TabIndex = 4, ;
		Top = 300, ;
		Width = 75
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdDownload' AS cmdcommandbuttoncustom WITH ;
		Caption = "\<Download", ;
		Height = 36, ;
		Left = 155, ;
		Name = "cmdDownload", ;
		TabIndex = 3, ;
		Top = 300, ;
		Width = 75
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdExit' AS cmdcommandbuttoncustom WITH ;
		Caption = "E\<xit", ;
		Height = 36, ;
		Left = 371, ;
		Name = "cmdExit", ;
		TabIndex = 5, ;
		Top = 300, ;
		Width = 75
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdGetFileList' AS cmdcommandbuttoncustom WITH ;
		Caption = "Get File List", ;
		Height = 35, ;
		Left = 264, ;
		Name = "cmdGetFileList", ;
		TabIndex = 1, ;
		Top = 12, ;
		Width = 75
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'lstBackupFiles' AS lstlistboxcustom WITH ;
		ColumnCount = 4, ;
		ColumnWidths = "250,150,100,50", ;
		Height = 228, ;
		Left = 12, ;
		Name = "lstBackupFiles", ;
		TabIndex = 2, ;
		Top = 60, ;
		Width = 576
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="listbox" />
	
	PROCEDURE beforeclose
		LPARAMETERS nclosereason
		
		thisform.lChanged = .F.
		
		DODEFAULT(nclosereason)
	ENDPROC

	PROCEDURE decrypt
		LPARAMETERS tcPass
		LOCAL lnLen
		tcPass = ALLTRIM(tcPass)
		lnlen = LEN(tcPass)
		RETURN (THISFORM.swencrypt.decrypt(LEFT('@349asksqf50Pws1',lnLen),tcPass))
	ENDPROC

	PROCEDURE deletefile
		LOCAL lcFileName, loIP
		LOCAL llReturn, lnResult, loError
		
		llReturn = .T.
		
		TRY
		   loIP = CREATEOBJECT('swftp')
		
		   IF NOT USED('offb1')
		      USE (m.goapp.cdatafilepath + 'offb1') IN 0
		   ENDIF
		   SELE offb1
		   GO TOP
		   lcServer = ALLTRIM(m.goapp.cOffsiteServer)
		   IF EMPTY(lcServer)
		      lcServer = 'ftp.sherware.com'
		   ENDIF
		   IF '|' $ cUserName
		      lcuser = SUBSTR(cUserName, AT('|', cUserName) + 1)
		   ELSE
		      lcuser = ALLTRIM(cUserName)
		   ENDIF
		
		   lcpass       = THISFORM.decrypt(offb1.cpassword)
		   loIP.cUser   = lcuser
		   loIP.cPwd    = lcpass
		   loIP.cServer = lcServer
		   loIP.CONNECT()
		
		   lcFileName = THISFORM.lstBackupFiles.VALUE
		   IF EMPTY(lcFileName)
		      THISFORM.omessage.warning('There was no file selected to delete. Please select a file.')
		      loIP.FTPClose()
		      llReturn = .F.
		      EXIT
		   ENDIF
		
		   lnResult = loIP.FTPDeleteFile(lcFileName)
		
		   IF lnResult # 0
		      MESSAGEBOX(loIP.cErrorMsg, 48, "FTP Delete Error")
		   ELSE
		      MESSAGEBOX('Delete was successful.', 48, "FTP Delete File")
		      THISFORM.lstBackupFiles.REMOVEITEM(THISFORM.lstBackupFiles.LISTITEMID)
		   ENDIF
		
		   loIP.FTPClose()
		
		CATCH TO loError
		   llReturn = .F.
		   DO errorlog WITH 'DeleteFile', loError.LINENO, 'Manage Offsite Bkups', loError.ERRORNO, loError.MESSAGE
		   MESSAGEBOX('Unable to process the backups at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		        'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		RETURN llReturn
		
		
		
		
		
		
		
		
		
	ENDPROC

	PROCEDURE downloadfile
		LOCAL loApi AS "CleverFoxLog" OF "CleverFoxLog.prg"
		LOCAL lnLogItemID
		
		IF FILE(m.goApp.cCommonFolder + '_DEVICEKEY.TXT')
		    lnDevice = INT(VAL(FILETOSTR(m.goApp.cCommonFolder + '_DEVICEKEY.TXT')))
		    lnDevice = lnDevice / 777
		
		* Get the logitemid
		    lnLogItemID = THISFORM.lstBackupFiles.LISTITEM[thisform.lstbackupFiles.ListItemId, 4]
		    lcFileName  = ALLTRIM(THISFORM.lstBackupFiles.LISTITEM[thisform.lstbackupFiles.ListItemId, 1]) + '.zip'
		    lcDateTime  = ALLTRIM(THISFORM.lstBackupFiles.LISTITEM[thisform.lstbackupFiles.ListItemId, 2])
		    lcSize      = ALLTRIM(THISFORM.lstBackupFiles.LISTITEM[thisform.lstbackupFiles.ListItemId, 3])
		* Setup the Environment
		    SET PATH TO "classes" ADDITIVE
		    SET PATH TO "wwclient" ADDITIVE
		    SET PATH TO "wwhttp" ADDITIVE
		    SET PATH TO "swhttp" ADDITIVE
		
		* Instantiate the CleverFox API Class
		    LOCAL loApi AS "CleverFoxLog" OF "CleverFoxLog.prg"
		    loApi = NEWOBJECT("CleverFoxLog", "CleverFoxLog.prg")
		
		    loApi.cApiKey = "8cd17eb5-907e-4396-933d-5de509646f4c"
		    loApi.cApiURL = "https://cleverfoxbackup.com/api/"
		
		* LogItem Id
		    m.lnLogItemID = INT(VAL(lnLogItemID))
		
		    lcFolder = specialfolders('COMMONDOCUMENTS')
		* Execute the Request
		
		    IF loApi.DownloadBackupFile(m.lnLogItemID)
		        LOCAL lcFile
		        m.lcFile = CFBLOGITEM.url
		
		        IF MESSAGEBOX('This will download the file: ' + ALLTRIM(lcFileName) + ' ' + CHR(10) + ;
		                  'Dated: ' + lcDateTime + CHR(10) + ;
		                  'Size: ' + lcSize + CHR(10) + ;
		                  'To folder: ' + lcFolder + '.' + CHR(10) + ;
		                  'Do you want to continue?', 36, 'Download Backup') = 6
		            SET SAFETY OFF
		            DO wwHTTP
		
		            loHTTP = CREATEOBJECT('wwhttp')
		            WAIT WINDOW NOWAIT 'Downloading backup file...Please wait!'
		            llDownload = loHTTP.HTTPGet(m.lcFile, "", 0, lcFolder + lcFileName)
		            WAIT CLEAR
		            SET SAFETY ON
		            MESSAGEBOX('Download complete!',0,'Download Offsite Backup')
		        ENDIF
		    ELSE
		        loApi.DisplayLastError()
		    ENDIF
		
		ENDIF
		
		* Cleanup
		STORE .NULL. TO loApi
		
		
		
	ENDPROC

	PROCEDURE encrypt
		LPARAMETERS tcPass
		LOCAL lnLen
		tcPass = ALLTRIM(tcPass)
		lnlen = LEN(tcPass)
		RETURN (THISFORM.swencrypt.encrypt(LEFT('@349asksqf50Pws1',lnLen),tcPass))
	ENDPROC

	PROCEDURE Error
		LPARAMETERS nerror,cmethod,nline
		
		if nerror <> 1540
		   dodefault(nerror,cmethod,nline)
		endif   
	ENDPROC

	PROCEDURE ftpconnect
	ENDPROC

	PROCEDURE getfilelist
		LOCAL loApi AS "CleverFoxLog" OF "CleverFoxLog.prg"
		LOCAL lcBackup, lcKey, llReturn, lnBackup, lnDevice, lnx, loError
		
		llReturn = .T.
		
		TRY
		    IF FILE(m.goApp.cCommonFolder + '_APIKEY.TXT')
		
		        llReturn = getjson()
		        IF NOT llReturn
		            llReturn = .F.
		            EXIT
		        ENDIF
		        SET PATH TO (m.goApp.cCommonFolder + 'bin') ADDITIVE
		        lcKey = FILETOSTR(m.goApp.cCommonFolder + '_APIKEY.TXT')
		        IF FILE(m.goApp.cCommonFolder + '_DEVICEKEY.TXT')
		            lnDevice = INT(VAL(FILETOSTR(m.goApp.cCommonFolder + '_DEVICEKEY.TXT')))
		            lnDevice = lnDevice / 777
		
		* Setup the Environment
		            SET PATH TO "classes" ADDITIVE
		            SET PATH TO "wwclient" ADDITIVE
		
		* Instantiate the CleverFox API Class
		            LOCAL loApi AS "CleverFoxDevice" OF "CleverFoxDevice.prg"
		            loApi = NEWOBJECT("CleverFoxDevice", "CleverFoxDevice.prg")
		
		            loApi.cApiKey = "8cd17eb5-907e-4396-933d-5de509646f4c"
		            loApi.cApiURL = "https://cleverfoxbackup.com/api/"
		
		* Device Id
		            LOCAL lnDeviceId
		            m.lnDeviceId = lnDevice
		
		* Execute the Request
		            IF loApi.GetDeviceLogs(m.lnDeviceId)
		                IF USED('CFBLOG')
		                    CREATE CURSOR logid (logid i)
		                    SELECT cfblog
		                    SCAN
		                        SCATTER MEMVAR
		                        INSERT INTO logid FROM MEMVAR
		                    ENDSCAN
		
		                    IF USED('CFBLOGITEM')
		                        SELECT * FROM cfblogitem WHERE logid IN (SELECT logid FROM logid) INTO CURSOR mylogitems
		                        CREATE CURSOR tempbackup (NAME c(60), addedon T, backupfilesize N(12, 2), logitemid i)
		                        INDEX ON addedon DESCENDING TAG addedon
		                        SELECT mylogitems
		                        SCAN FOR NOT ISNULL(backupfilesize)
		                            SCATTER MEMVAR
		                            INSERT INTO tempbackup FROM MEMVAR
		                        ENDSCAN
		                        lnx = 1
		                        SELECT tempbackup
		                        SCAN
		                            SCATTER MEMVAR
		                            THISFORM.lstBackupFiles.ADDLISTITEM(m.name, lnx, 1)
		                            THISFORM.lstBackupFiles.ADDLISTITEM(TTOC(m.addedon), lnx, 2)
		                            lnBackup = m.backupfilesize / 1024 / 1024
		                            lcBackup = PADL(TRANSFORM(lnBackup, '999,999,999,999.99') + 'MB', 20, ' ')
		                            THISFORM.lstBackupFiles.ADDLISTITEM(lcBackup, lnx, 3)
		                            THISFORM.lstBackupFiles.ADDLISTITEM(TRANSFORM(logitemid), lnx, 4)
		                            lnx = lnx + 1
		                        ENDSCAN
		                        THISFORM.lstBackupFiles.REFRESH()
		                    ENDIF
		                ENDIF
		
		            ELSE
		                IF '404' $ loAPI.cLastResultCode
		                   MESSAGEBOX('There are no offsite backup files to restore.', 16, 'No Backups')
		                ELSE
		                   MESSAGEBOX('Please click the Config button to configure your offsite backup credentials', 16, 'Missing Offsite Config')
		                ENDIF    
		            ENDIF
		        ENDIF
		    ENDIF
		CATCH TO loError
		    llReturn = .F.
		    DO errorlog WITH 'GetFileList', loError.LINENO, 'FileOffsite', loError.ERRORNO, loError.MESSAGE, '', loError
		    MESSAGEBOX('Unable to process the offsite list at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		          'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		* Cleanup
		STORE .NULL. TO loApi
		
		RETURN llReturn
		
		
		
		
		
	ENDPROC

	PROCEDURE Init
		IF DODEFAULT()
		   * If we're in demo mode, tell the user that this is an optional module
		   IF m.goapp.ldemo
		      thisform.omessage.warning('The Offsite Backup module is an optional module that can be purchased separately.' + ;
		                                ' It is included in the demo for evaluation purposes.')
		   ENDIF
		ENDIF
		
	ENDPROC

	PROCEDURE process
	ENDPROC

	PROCEDURE processoffrest
	ENDPROC

	PROCEDURE togglepassiveftp
	ENDPROC

	PROCEDURE Unload
		_VFP.AutoYield = .T.
		ON KEY LABEL CTRL+p 
		DODEFAULT()
	ENDPROC

	PROCEDURE cmdConfig.Click
		m.gostatemanager.openform('offsiteconfig.scx')
	ENDPROC

	PROCEDURE cmdDownload.Click
		thisform.downloadfile()
	ENDPROC

	PROCEDURE cmdExit.Click
		thisform.release()
	ENDPROC

	PROCEDURE cmdGetFileList.Click
		thisform.getfilelist()
	ENDPROC

ENDDEFINE
