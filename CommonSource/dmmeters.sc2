*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="dmmeters.scx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="2" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Cursor1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor4" UniqueID="" Timestamp="" />

	AutoOpenTables = .F.
	DataSource = .NULL.
	Height = 200
	Left = 2
	Name = "Dataenvironment"
	Top = 393
	Width = 520

	ADD OBJECT 'Cursor1' AS cursor WITH ;
		Alias = "meters", ;
		CursorSource = "meters", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = -1, ;
		Name = "Cursor1", ;
		Order = "meterid", ;
		Top = 5, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor2' AS cursor WITH ;
		Alias = "wells", ;
		CursorSource = "wells", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor2", ;
		Top = 20, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor3' AS cursor WITH ;
		Alias = "meters1", ;
		CursorSource = "meters", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 290, ;
		Name = "Cursor3", ;
		Top = 20, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor4' AS cursor WITH ;
		Alias = "wells1", ;
		CursorSource = "wells", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor4", ;
		Top = 140, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

ENDDEFINE

DEFINE CLASS formdmmeters AS frmdatamanagerformcustom OF "..\custom\cforms.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="txtMeterid" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblMeterid" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtMeterdesc" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblMeterdesc" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdShowWells" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdWells" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdWells.Column1.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdWells.Column1.Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdWells.Column2.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdWells.Column2.Text1" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: refreshmeters
	*</DefinedPropArrayMethod>

	BorderStyle = 0
	Caption = "Master Meters"
	clistexpression = meters.cmeterid
	DoCreate = .T.
	Height = 160
	HelpContextID = 65
	lexpliciteditmode = .F.
	lremembersize = .F.
	Name = "FormDmmeters"
	Width = 431
	cmdatamanager.Name = "cmdatamanager"
	cmdatamanager.ZOrderSet = 0
	cmlookupmanager.Name = "cmlookupmanager"
	Mwresize1.lblHighLight.Name = "lblHighLight"
	Mwresize1.lblShading.Name = "lblShading"
	Mwresize1.Name = "Mwresize1"
	Mwresize1.ZOrderSet = 1

	ADD OBJECT 'cmdShowWells' AS cmdcommandbuttoncustom WITH ;
		AutoSize = .F., ;
		Caption = "Show Wells Attached To This Meter", ;
		FontBold = .T., ;
		Height = 20, ;
		Left = 104, ;
		Name = "cmdShowWells", ;
		TabStop = .F., ;
		Top = 126, ;
		Width = 223, ;
		ZOrderSet = 7
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'grdWells' AS grdgridcustom WITH ;
		ColumnCount = 2, ;
		cworkarea = meters, ;
		FontName = "Courier New", ;
		Height = 228, ;
		lallowdelete = .F., ;
		lallownew = .f.., ;
		lcolumnmemory = .F., ;
		Left = 12, ;
		LinkMaster = "", ;
		Name = "grdWells", ;
		Panel = 1, ;
		ReadOnly = .T., ;
		RecordSource = "tempmeter", ;
		RelationalExpr = "", ;
		Top = 168, ;
		Width = 408, ;
		ZOrderSet = 8, ;
		Column1.ControlSource = "", ;
		Column1.FontName = "Courier New", ;
		Column1.FontSize = 8, ;
		Column1.Name = "Column1", ;
		Column1.ReadOnly = .T., ;
		Column1.Width = 88, ;
		Column2.ControlSource = "", ;
		Column2.FontName = "Courier New", ;
		Column2.FontSize = 8, ;
		Column2.Name = "Column2", ;
		Column2.ReadOnly = .T., ;
		Column2.Width = 285
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="grid" />

	ADD OBJECT 'grdWells.Column1.Header1' AS header WITH ;
		Caption = "Well ID", ;
		FontName = "Courier New", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'grdWells.Column1.Text1' AS textbox WITH ;
		BackColor = 255,255,255, ;
		BorderStyle = 0, ;
		ControlSource = "tempmeter.cwellid", ;
		FontName = "Courier New", ;
		FontSize = 8, ;
		ForeColor = 0,0,0, ;
		Margin = 0, ;
		Name = "Text1", ;
		ReadOnly = .T.
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'grdWells.Column2.Header1' AS header WITH ;
		Caption = "Well Name", ;
		FontName = "Courier New", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'grdWells.Column2.Text1' AS textbox WITH ;
		BackColor = 255,255,255, ;
		BorderStyle = 0, ;
		ControlSource = "tempmeter.cwellid", ;
		FontName = "Courier New", ;
		FontSize = 8, ;
		ForeColor = 0,0,0, ;
		Margin = 0, ;
		Name = "Text1", ;
		ReadOnly = .T.
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'lblMeterdesc' AS lblfieldlabelcustom WITH ;
		Caption = "Meter Description", ;
		Height = 16, ;
		Left = 27, ;
		Name = "lblMeterdesc", ;
		TabIndex = 4, ;
		Top = 80, ;
		Width = 86, ;
		ZOrderSet = 6
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblMeterid' AS lblfieldlabelcustom WITH ;
		Caption = "Meter ID", ;
		Height = 16, ;
		Left = 77, ;
		Name = "lblMeterid", ;
		TabIndex = 2, ;
		Top = 33, ;
		Width = 41, ;
		ZOrderSet = 4
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'txtMeterdesc' AS txttextboxcustom WITH ;
		ControlSource = "meters.cmeterdesc", ;
		Height = 20, ;
		Left = 137, ;
		lrequired = .T., ;
		MaxLength = 30, ;
		Name = "txtMeterdesc", ;
		TabIndex = 5, ;
		Top = 78, ;
		Width = 266, ;
		ZOrderSet = 5
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtMeterid' AS txttextboxcustom WITH ;
		ControlSource = "meters.cmeterid", ;
		Height = 20, ;
		InputMask = "!!!!!!!!!!!!!!!", ;
		Left = 137, ;
		lrequired = .T., ;
		MaxLength = 15, ;
		Name = "txtMeterid", ;
		TabIndex = 3, ;
		Top = 31, ;
		Width = 114, ;
		ZOrderSet = 3
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />
	
	PROCEDURE list
		LPARAMETERS cworkarea
		LOCAL lcList, lnRecNo
		PRIV llOK
		
		llOK = .F.
		lcList = 'cmeterid/meterid,cmeterdesc/meterdesc'
		
		SELECT meters
		lnRecNo = RECNO()
		
		IF THIS.flushcontrolbuffer() AND THIS.beforenav('Meters')
		   DO FORM ..\CUSTOM\picklist WITH 'Meters', lcList, THISFORM.txtmeterid.VALUE, 2
		ELSE
		   IF NOT llOK
		      GOTO lnRecNo
		   ENDIF
		ENDIF
		
		THISFORM.REFRESH()
		THISFORM.refreshmeters()
		
	ENDPROC

	PROCEDURE Load
		CREATE CURSOR tempmeter (cwellid c(10), cwellname C(30))
		DODEFAULT()
	ENDPROC

	PROCEDURE refreshmeters
		SELECT wells
		SELECT cwellid, cwellname FROM wells ;
		   WHERE cMeterID  = meters.cMeterID OR ;
		   cMeterID2 = meters.cMeterID OR ;
		   cMeterID3 = meters.cMeterID OR ;
		   cMeterID4 = meters.cMeterID OR ;
		   cMeterid5 = meters.cMeterID ;
		   INTO CURSOR tempmeter ;
		   ORDER BY cwellid
		SELECT tempmeter
		GO TOP
		THISFORM.grdWells.RECORDSOURCE = 'tempmeter'
		THISFORM.grdWells.column1.CONTROLSOURCE = 'tempmeter.cwellid'
		THISFORM.grdWells.column1.text1.CONTROLSOURCE = 'tempmeter.cwellid'
		THISFORM.grdWells.column2.CONTROLSOURCE = 'tempmeter.cwellname'
		THISFORM.grdWells.column2.text1.CONTROLSOURCE = 'tempmeter.cwellname'
		THISFORM.grdWells.column1.header1.CAPTION = 'Well ID'
		THISFORM.grdWells.column2.header1.CAPTION = 'Well Name'
		THISFORM.grdWells.column1.WIDTH = 88
		THISFORM.grdWells.column2.WIDTH = 285
		THISFORM.grdWells.REFRESH()
		
	ENDPROC

	PROCEDURE cmdatamanager.afternav
		LPARAMETERS cworkarea
		
		IF m.cworkarea = 'Meters'
		   thisform.refreshmeters()
		ENDIF
		DODEFAULT(cworkarea)
		
	ENDPROC

	PROCEDURE cmdatamanager.afternew
		LPARAMETERS cworkarea
		
		thisform.setnextcontrol(thisform.txtmeterid)
		
		dodefault(cworkarea)
	ENDPROC

	PROCEDURE cmdatamanager.beforedelete
		LPARAMETERS cworkarea
		
		SELECT wells1
		LOCATE FOR cMeterID  = meters.cMeterID or ;
		           cMeterID2 = meters.cMeterID or ;
		           cMeterID3 = meters.cMeterID OR ;
		           cMeterID4 = meters.cMeterID OR ;
		           cMeterid5 = meters.cMeterID
		IF FOUND()
		   THISFORM.oMessage.Warning('There are wells attached to this meter.  It cannot be deleted.')
		   RETURN .F.
		ENDIF
		
		DODEFAULT(cworkarea)
		
	ENDPROC

	PROCEDURE cmdatamanager.initrelations
		
		*THIS.SetCursor("DeleteWithParent","Wells",.F.)
		
		RETURN DODEFAULT()
	ENDPROC

	PROCEDURE cmdShowWells.Click
		if empty(meters.cMeterID)  &&  No meter, so don't do anything when they click on it
		   return .f.
		endif
		
		DO CASE
		   CASE thisform.height = 160
		      thisform.height = 400
		      this.caption = "Don't Show Attached Wells"
		   CASE thisform.height = 400
		      thisform.height = 160   
		      this.caption = 'Show Wells Attached To This Meter'
		ENDCASE      
		   
	ENDPROC

	PROCEDURE grdWells.Column1.Text1.When
		RETURN .f.
		
	ENDPROC

	PROCEDURE grdWells.Column2.Text1.When
		RETURN .f.
	ENDPROC

	PROCEDURE grdWells.RightClick
		THISFORM.oMessage.Warning('Wells cannot be added here.  Wells are attached to meters through the well information screen.')
		RETURN .F.
		
	ENDPROC

	PROCEDURE txtMeterid.Valid
		lcMeterid = THIS.VALUE
		
		IF NOT EMPTY(lcMeterid) AND lcMeterid <> meters.cmeterid
		   SET DELE OFF
		   SELECT meters1
		   SET ORDER TO meterid
		   IF SEEK(lcMeterid)
		      IF DELETED()
		         SELECT meters
		         LOCATE FOR cMeterID = lcMeterID
		         RECALL
		      ELSE
		         IF THISFORM.omessage.CONFIRM('There is already a meter with this ID.  Would you like to edit the existing record?')
		            THISFORM.cmdatamanager.revertall()
		            SELECT meters
		            SET ORDER TO meterid
		            LOCATE FOR cmeterid= lcMeterid
		         ELSE
		            THIS.VALUE = ''
		            RETURN 0
		         ENDIF
		      ENDIF
		   ENDIF
		   SELECT meters
		ENDIF
		
		DODEFAULT()
		
		THISFORM.REFRESH()
		
	ENDPROC

ENDDEFINE
