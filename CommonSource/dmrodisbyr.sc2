*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="dmrodisbyr.scx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="2" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Cursor1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Relation1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor6" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor7" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor8" UniqueID="" Timestamp="" />

	AutoOpenTables = .F.
	DataSource = .NULL.
	Height = 497
	Left = 40
	Name = "Dataenvironment"
	Top = 235
	Width = 713

	ADD OBJECT 'Cursor1' AS cursor WITH ;
		Alias = "groups", ;
		CursorSource = "groups", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor1", ;
		Top = 20, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor2' AS cursor WITH ;
		Alias = "investor", ;
		CursorSource = "investor", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 150, ;
		Name = "Cursor2", ;
		Top = 20, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor3' AS cursor WITH ;
		Alias = "wells", ;
		CursorSource = "wells", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 290, ;
		Name = "Cursor3", ;
		Top = 20, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor4' AS cursor WITH ;
		Alias = "wellhist", ;
		CursorSource = "wellhist", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor4", ;
		Top = 140, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor5' AS cursor WITH ;
		Alias = "disbhist", ;
		CursorSource = "disbhist", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 150, ;
		Name = "Cursor5", ;
		Top = 140, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor6' AS cursor WITH ;
		Alias = "options", ;
		CursorSource = "options", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 290, ;
		Name = "Cursor6", ;
		Top = 140, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor7' AS cursor WITH ;
		Alias = "programs", ;
		CursorSource = "programs", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor7", ;
		Top = 278, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor8' AS cursor WITH ;
		Alias = "glopt", ;
		CursorSource = "glopt", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 430, ;
		Name = "Cursor8", ;
		Top = 140, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Relation1' AS relation WITH ;
		ChildAlias = "wells", ;
		ChildOrder = "cgroup", ;
		Name = "Relation1", ;
		ParentAlias = "groups", ;
		RelationalExpr = "cgroup"
		*< END OBJECT: BaseClass="relation" />

ENDDEFINE

DEFINE CLASS formdmrodisbyr AS frmrptcriteria OF "..\source\appforms.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="chkIncPayments" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chklActual" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkByMonth" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkIncDirect" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkOwnPage" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="LblBegYear" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="LblGroup" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="LblAccDate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkJIBHistory" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkIncSusp" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="LblBegID" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="LblEndID" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Swrptlook1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Swgroup1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="opgRange" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Swyear1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkByProgram" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Glmaint" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="LblRange" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtBegDate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtEndDate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Swperiod1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblDash1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Swyear2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Swperiod2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblDash2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkSelected" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblSelected" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblArchived" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboArchived" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: builddatamonth
		*m: builddatasummary
		*m: checkarchived
		*m: earnedmonthly
		*m: earnedsummary
		*m: getfiscalperiod
		*m: getfiscalyear
		*m: loadmonth
		*p: lpostedowners
		*a: lamonthend[1,0]
		*a: lamonth[1,0]
	*</DefinedPropArrayMethod>

	Caption = "Yearly Disbursement Summary"
	DataSession = 2
	DoCreate = .T.
	Height = 577
	HelpContextID = 220
	lpostedowners = .F.
	Name = "FormDmrodisbyr"
	ShowTips = .T.
	Width = 568
	_memberdata = <VFPData>
		<memberdata name="checkarchived" display="CheckArchived"/>
		<memberdata name="getfiscalyear" display="GetFiscalYear"/>
		<memberdata name="getfiscalperiod" display="GetFiscalPeriod"/>
		</VFPData>
	Swrptcriteriabuttons1.chkExport.Alignment = 0
	Swrptcriteriabuttons1.chkExport.Name = "chkExport"
	Swrptcriteriabuttons1.cmdclose.Name = "cmdclose"
	Swrptcriteriabuttons1.CMDPREVIEW.Name = "CMDPREVIEW"
	Swrptcriteriabuttons1.cmdPrint.Name = "cmdPrint"
	Swrptcriteriabuttons1.Left = 146
	Swrptcriteriabuttons1.Name = "Swrptcriteriabuttons1"
	Swrptcriteriabuttons1.TabIndex = 28
	Swrptcriteriabuttons1.Top = 477
	Swrptcriteriabuttons1.ZOrderSet = 0

	ADD OBJECT 'cboArchived' AS cbocomboboxcustom WITH ;
		ColumnCount = 1, ;
		Left = 390, ;
		Name = "cboArchived", ;
		Top = 36, ;
		Visible = .F.
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="combobox" />

	ADD OBJECT 'chkByMonth' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		AutoSize = .T., ;
		Caption = "Report By Month", ;
		Height = 16, ;
		Left = 303, ;
		Name = "chkByMonth", ;
		TabIndex = 21, ;
		Top = 341, ;
		Value = .F., ;
		Width = 98, ;
		ZOrderSet = 1
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkByProgram' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Report By Program", ;
		Left = 103, ;
		Name = "chkByProgram", ;
		TabIndex = 19, ;
		Top = 341, ;
		Value = .F.
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkIncDirect' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		AutoSize = .T., ;
		Caption = "Include Direct Paid Oil and Gas", ;
		Height = 16, ;
		Left = 303, ;
		Name = "chkIncDirect", ;
		TabIndex = 23, ;
		Top = 365, ;
		Value = .F., ;
		Width = 165, ;
		ZOrderSet = 2
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkIncPayments' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		AutoSize = .T., ;
		Caption = "Include Net Payments", ;
		Height = 16, ;
		Left = 103, ;
		Name = "chkIncPayments", ;
		TabIndex = 26, ;
		Top = 414, ;
		Value = .T., ;
		Width = 121, ;
		ZOrderSet = 1
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkIncSusp' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		AutoSize = .T., ;
		Caption = "Include Entries Still In Suspense", ;
		Height = 16, ;
		Left = 303, ;
		Name = "chkIncSusp", ;
		TabIndex = 24, ;
		Top = 389, ;
		Value = .T., ;
		Width = 170, ;
		ZOrderSet = 1
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkJIBHistory' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		AutoSize = .T., ;
		Caption = "Include JIB History", ;
		Height = 16, ;
		Left = 103, ;
		Name = "chkJIBHistory", ;
		TabIndex = 25, ;
		Top = 389, ;
		Value = .T., ;
		Width = 106, ;
		ZOrderSet = 1
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chklActual' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		AutoSize = .T., ;
		Caption = "Only Include Entries Originally Created During Selected Range", ;
		Height = 16, ;
		Left = 103, ;
		Name = "chklActual", ;
		TabIndex = 27, ;
		ToolTipText = "If this option is selected, the accounting date used when closing a run determines whether it's included on the report.", ;
		Top = 440, ;
		Value = .F., ;
		Visible = .F., ;
		Width = 314, ;
		ZOrderSet = 1
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkOwnPage' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		AutoSize = .T., ;
		Caption = "Start a New Page for Each Owner", ;
		Height = 16, ;
		Left = 103, ;
		Name = "chkOwnPage", ;
		TabIndex = 22, ;
		Top = 365, ;
		Value = .F., ;
		Width = 184, ;
		ZOrderSet = 2
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkSelected' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Choose Selected Owners", ;
		Left = 205, ;
		Name = "chkSelected", ;
		TabIndex = 14, ;
		Top = 151, ;
		Value = .F.
		*< END OBJECT: ClassLib="..\..\wellprofits\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'Glmaint' AS glmaint WITH ;
		Height = 24, ;
		Left = 354, ;
		Name = "Glmaint", ;
		Top = 60, ;
		Width = 24
		*< END OBJECT: ClassLib="..\custom\swgl.vcx" BaseClass="custom" />

	ADD OBJECT 'LblAccDate' AS lbllabelcustom WITH ;
		AutoSize = .T., ;
		Caption = "Accounting Date:", ;
		FontSize = 8, ;
		Height = 16, ;
		Left = 93, ;
		Name = "LblAccDate", ;
		TabIndex = 12, ;
		Top = 111, ;
		Width = 85, ;
		ZOrderSet = 6
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblArchived' AS lbllabelcustom WITH ;
		Caption = "Report on Archived History for Year", ;
		Left = 354, ;
		Name = "lblArchived", ;
		Top = 12, ;
		Visible = .F.
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'LblBegID' AS lbllabelcustom WITH ;
		Alignment = 1, ;
		AutoSize = .T., ;
		Caption = "First Owner:", ;
		FontSize = 8, ;
		Height = 16, ;
		Left = 99, ;
		Name = "LblBegID", ;
		TabIndex = 13, ;
		Top = 185, ;
		Width = 63, ;
		ZOrderSet = 10
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'LblBegYear' AS lbllabelcustom WITH ;
		AutoSize = .T., ;
		Caption = "Year:", ;
		FontSize = 8, ;
		Height = 16, ;
		Left = 149, ;
		Name = "LblBegYear", ;
		TabIndex = 7, ;
		Top = 85, ;
		Width = 29, ;
		ZOrderSet = 3
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblDash1' AS lbllabelcustom WITH ;
		Caption = "/", ;
		FontSize = 10, ;
		Left = 240, ;
		Name = "lblDash1", ;
		TabIndex = 29, ;
		Top = 85
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblDash2' AS lbllabelcustom WITH ;
		Caption = "/", ;
		FontSize = 10, ;
		Left = 330, ;
		Name = "lblDash2", ;
		TabIndex = 30, ;
		Top = 85
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'LblEndID' AS lbllabelcustom WITH ;
		AutoSize = .T., ;
		Caption = "Last Owner:", ;
		FontSize = 8, ;
		Height = 16, ;
		Left = 99, ;
		Name = "LblEndID", ;
		TabIndex = 16, ;
		Top = 236, ;
		Width = 63, ;
		ZOrderSet = 11
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'LblGroup' AS lbllabelcustom WITH ;
		AutoSize = .T., ;
		Caption = "Group:", ;
		FontSize = 8, ;
		Height = 16, ;
		Left = 127, ;
		Name = "LblGroup", ;
		TabIndex = 18, ;
		Top = 297, ;
		Width = 35, ;
		ZOrderSet = 4
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom1' AS lbllabelcustom WITH ;
		Caption = "-", ;
		FontBold = .T., ;
		FontSize = 10, ;
		Height = 18, ;
		Left = 276, ;
		Name = "Lbllabelcustom1", ;
		TabIndex = 8, ;
		Top = 84, ;
		Width = 6
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom2' AS lbllabelcustom WITH ;
		Caption = "-", ;
		FontBold = .T., ;
		FontSize = 10, ;
		Height = 18, ;
		Left = 299, ;
		Name = "Lbllabelcustom2", ;
		TabIndex = 9, ;
		Top = 111, ;
		Width = 6
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'LblRange' AS lbllabelcustom WITH ;
		AutoSize = .T., ;
		Caption = "Report By:", ;
		FontSize = 8, ;
		Height = 16, ;
		Left = 125, ;
		Name = "LblRange", ;
		TabIndex = 4, ;
		Top = 12, ;
		Width = 53, ;
		ZOrderSet = 20
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblSelected' AS lbllabelcustom WITH ;
		Caption = "All Owners Selected", ;
		ForeColor = 0,0,255, ;
		Left = 225, ;
		Name = "lblSelected", ;
		TabIndex = 20, ;
		Top = 212, ;
		Visible = .F.
		*< END OBJECT: ClassLib="..\..\wellprofits\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'opgRange' AS swrange_py_ay_ad WITH ;
		Height = 65, ;
		Left = 194, ;
		Name = "opgRange", ;
		TabIndex = 1, ;
		Top = 7, ;
		Width = 113, ;
		AccDate.Left = 5, ;
		AccDate.Name = "AccDate", ;
		AccDate.Top = 45, ;
		AccYear.Left = 5, ;
		AccYear.Name = "AccYear", ;
		AccYear.Top = 25, ;
		ProdYear.Caption = "Prod Period Range", ;
		ProdYear.Left = 5, ;
		ProdYear.Name = "ProdYear", ;
		ProdYear.Top = 5, ;
		ProdYear.Value = 1
		*< END OBJECT: ClassLib="..\custom\swcontrol.vcx" BaseClass="optiongroup" />

	ADD OBJECT 'Swgroup1' AS swgroup WITH ;
		Left = 181, ;
		Name = "Swgroup1", ;
		TabIndex = 17, ;
		Top = 295
		*< END OBJECT: ClassLib="..\custom\swcontrol.vcx" BaseClass="combobox" />

	ADD OBJECT 'Swperiod1' AS swperiod WITH ;
		Left = 247, ;
		Name = "Swperiod1", ;
		TabIndex = 3, ;
		Top = 83
		*< END OBJECT: ClassLib="..\custom\swcontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'Swperiod2' AS swperiod WITH ;
		Left = 337, ;
		Name = "Swperiod2", ;
		TabIndex = 6, ;
		Top = 83
		*< END OBJECT: ClassLib="..\custom\swcontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'Swrptlook1' AS swrptlook WITH ;
		Left = 182, ;
		Name = "Swrptlook1", ;
		TabIndex = 15, ;
		Top = 182, ;
		Swlookupbutton1.Name = "Swlookupbutton1", ;
		Swlookupbutton2.Name = "Swlookupbutton2", ;
		TxtBegID.clistexpression = investor.cownerid, ;
		TxtBegID.clistworkarea = investor, ;
		TxtBegID.Name = "TxtBegID", ;
		TxtBegName.Name = "TxtBegName", ;
		TxtEndID.clistexpression = investor.cownerid, ;
		TxtEndID.clistworkarea = investor, ;
		TxtEndID.Name = "TxtEndID", ;
		TxtEndName.Name = "TxtEndName"
		*< END OBJECT: ClassLib="..\custom\swcontrol.vcx" BaseClass="container" />

	ADD OBJECT 'Swyear1' AS swyear WITH ;
		Height = 20, ;
		Left = 198, ;
		MaxLength = 4, ;
		Name = "Swyear1", ;
		TabIndex = 2, ;
		Top = 83, ;
		Width = 39
		*< END OBJECT: ClassLib="..\custom\swcontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'Swyear2' AS swyear WITH ;
		Height = 20, ;
		Left = 288, ;
		MaxLength = 4, ;
		Name = "Swyear2", ;
		TabIndex = 5, ;
		Top = 83, ;
		Width = 39
		*< END OBJECT: ClassLib="..\custom\swcontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtBegDate' AS dpk WITH ;
		ControlSource = "", ;
		Height = 20, ;
		Left = 199, ;
		Name = "txtBegDate", ;
		TabIndex = 10, ;
		Top = 111, ;
		Width = 75
		*< END OBJECT: ClassLib="..\custom\swdate.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtEndDate' AS dpk WITH ;
		ControlSource = "", ;
		Height = 20, ;
		Left = 310, ;
		Name = "txtEndDate", ;
		TabIndex = 11, ;
		Top = 111, ;
		Width = 75
		*< END OBJECT: ClassLib="..\custom\swdate.vcx" BaseClass="textbox" />
	
	PROCEDURE builddata
		LOCAL tcOwner1, tcOwner2, tcYear1, tcYear2, tcPeriod1, tcPeriod2, tlSummary, tlNoPrior
		LOCAL lcWhere1, lcWhere2, ldirgaspurch, ldiroilpurch, llReturn, lnX, loError
		*:Global cMonth, cMonthName, cProgCode, cProgName, cYear, cperiod, glNetSusp, nNetCheck, nSevTaxes
		*:Global nTotBBL, nTotMcf, nTotProd, nrevgas, nrevoil, tcGroup, tcWellID1, tcWellID2, tdDate1
		*:Global tdDate2, tlActual, tlByMonth, tlByProgram, tlIncDirect, tlJIBHist, tlOwnPage, tnType
		
		SET DELETED ON
		
		llReturn = .T.
		
		TRY
		   tcOwner1    = THISFORM.swrptlook1.txtBegID.VALUE
		   tcOwner2    = THISFORM.swrptlook1.txtEndID.VALUE
		   tcYear1     = THISFORM.swYear1.VALUE
		   tcYear2     = THISFORM.swYear2.VALUE
		   tcPeriod1   = THISFORM.swPeriod1.VALUE
		   tcPeriod2   = THISFORM.swperiod2.VALUE
		   tlOwnPage   = THISFORM.chkOwnPage.VALUE
		   tlNoPrior   = .F.
		   tcGroup     = LEFT(THISFORM.swgroup1.VALUE, 2)
		   tdDate1     = THISFORM.txtbegdate.VALUE
		   tdDate2     = THISFORM.txtenddate.VALUE
		   tnType      = THISFORM.opgRange.VALUE
		   tlByMonth   = THISFORM.chkByMonth.VALUE
		   tlByProgram = THISFORM.chkByProgram.VALUE
		   tlIncDirect = THISFORM.chkincdirect.VALUE
		   tlJIBHist   = THISFORM.chkjibhistory.VALUE
		   tlActual    = THISFORM.chklActual.VALUE
		   llSelected  = THISFORM.chkselected.VALUE
		
		   IF NOT llSelected
		      SELECT cownerid AS cid FROM investor ;
		         INTO CURSOR SELECTED ;
		         WHERE BETWEEN(cownerid,tcOwner1,tcOwner2) ;
		         ORDER BY cid
		   ENDIF
		
		
		* Check to see if we need an archived history file
		   IF THISFORM.cboArchived.VISIBLE = .T.
		      lcYear = THISFORM.cboArchived.VALUE
		      IF NOT EMPTY(lcYear)
		         lcHist = 'ownhist' + lcYear
		         lcPcts = 'ownpcts' + lcYear
		         swclose('disbhist')
		         swclose('ownpcts')
		         
		* Check to see if we need to add the nplugexp field
		         swclose('ownhist')
		         USE (m.goapp.cdatafilepath+lcHist) IN 0 ALIAS ownhist EXCLUSIVE
		         SELECT ownhist
		         GO TOP
		         llNoPlug = .F.
		         TRY
		            IF VARTYPE(ownhist.nplugexp) # 'N'
		               ALTER TABLE ownhist ADD COLUMN nplugexp N(12,2)
		            ENDIF
		         CATCH TO loError
		            IF loError.ERRORNO = 12
		               llNoPlug = .T.
		            ENDIF
		         ENDTRY
		
		         IF llNoPlug
		            ALTER TABLE ownhist ADD COLUMN nplugexp N(12,2)
		         ENDIF
		         USE 
		
		         swclose('disbhist')
		         USE (m.goapp.cdatafilepath+lcHist) IN 0 ALIAS disbhist
		         swclose('ownpcts')
		         USE (m.goapp.cdatafilepath+lcPcts) IN 0 ALIAS ownpcts
		      ELSE
		         swclose('disbhist')
		         USE (m.goapp.cdatafilepath+'disbhist') IN 0 ALIAS disbhist
		         swclose('ownpcts')
		         USE (m.goapp.cdatafilepath+'ownpcts') IN 0 ALIAS ownpcts
		      ENDIF
		   ENDIF
		
		* Check to see if there are any owners in the range being printed
		* that have the option to post to the G/L enabled. If there are,
		* We need to use the hdate in their records instead of the posting
		* date in sysctl just in case they closed the runs with advanced
		* posting.  - pws 3/1/14
		   IF m.goapp.lAMVersion OR m.goapp.lQBVersion
		      SELECT cownerid FROM investor WHERE lIntegGl AND BETWEEN(cownerid,tcOwner1,tcOwner2) INTO CURSOR postedowners
		      IF _TALLY > 0
		         THISFORM.lPostedOwners = .T.
		      ENDIF
		   ENDIF
		
		   THISFORM.cSelectCriteria = 'Owners: ' + ALLTRIM(tcOwner1) + ' - ' + ALLTRIM(tcOwner2) + ' Group: ' + ALLTRIM(THISFORM.swgroup1.VALUE)
		   THISFORM.cSortOrder      = 'Owner ID, Owner Type, Well ID'
		   THISFORM.cTitle1         = 'Owner Yearly Disbursement Summary'
		
		   SWSELECT('wells')
		   SET ORDER TO cWellID
		   GO TOP
		   tcWellID1 = cWellID
		   GO BOTT
		   tcWellID2 = cWellID
		
		*
		*  Setup the report name
		*
		   DO CASE
		      CASE NOT tlOwnPage AND NOT tlByProgram AND NOT tlByMonth
		         THISFORM.cReportName = 'commonsource\dmrodisb1'
		      CASE NOT tlOwnPage AND NOT tlByMonth AND tlByProgram
		         THISFORM.cReportName = 'commonsource\dmrodisb2'
		      CASE NOT tlOwnPage AND tlByMonth AND NOT tlByProgram
		         THISFORM.cReportName = 'commonsource\dmrodisb3'
		      CASE NOT tlOwnPage AND tlByMonth AND tlByProgram
		         THISFORM.cReportName = 'commonsource\dmrodisb4'
		      CASE tlOwnPage AND NOT tlByMonth AND NOT tlByProgram
		         THISFORM.cReportName = 'commonsource\dmrodisb5'
		      CASE tlOwnPage AND NOT tlByMonth AND tlByProgram
		         THISFORM.cReportName = 'commonsource\dmrodisb6'
		      CASE tlOwnPage AND tlByMonth AND NOT tlByProgram
		         THISFORM.cReportName = 'commonsource\dmrodisb7'
		      CASE tlOwnPage AND tlByMonth AND tlByProgram
		         THISFORM.cReportName = 'commonsource\dmrodisb8'
		   ENDCASE
		
		   WAIT WIND NOWAIT 'Building Report File....'
		
		   THISFORM.loadmonth()
		
		   DO CASE
		      CASE tnType = 1
		         THISFORM.ctitle2 = 'By Production Period Range: ' + tcYear1 + '/' + tcPeriod1 + ' thru ' + tcYear2 + '/' + tcPeriod2
		         lcWhere1         = 'between(disbhist.hyear+disbhist.hperiod,tcYear1+tcPeriod1,tcYear2+tcPeriod2)'
		         lcWhere2         = 'between(suspense.hyear+suspense.hperiod,tcYear1+tcPeriod1,tcYear2+tcPeriod2)'
		      CASE tnType = 2
		         THISFORM.ctitle2 = 'By Accounting Year: ' + tcYear1
		         lcWhere1         = "(disbhist.cRunYear + PADL(TRANSFORM(disbhist.nrunno), 3, '0') IN (SELECT  crunyear + PADL(TRANSFORM(nrunno), 3, '0') FROM sysctl WHERE YEAR(dacctdate) = VAL(tcYear1)))"
		         lcWhere2         = "cRunYear_in+PADL(TRANSFORM(nrunno_in),3,'0') IN (SELECT crunyear+PADL(TRANSFORM(nrunno),3,'0') FROM sysctl WHERE YEAR(dacctdate)=VAL(tcYear1))"
		      CASE tnType = 3
		         THISFORM.ctitle2 = 'By Date Range: ' + DTOC(tdDate1) + '-' + DTOC(tdDate2)
		         lcWhere1         = "(disbhist.cRunYear + PADL(TRANSFORM(disbhist.nrunno), 3, '0') IN (SELECT  crunyear + PADL(TRANSFORM(nrunno), 3, '0') FROM sysctl WHERE BETWEEN(dacctdate,tdDate1,tdDate2)))"
		         lcWhere2         = "cRunYear_in+PADL(TRANSFORM(nrunno_in),3,'0') IN (SELECT crunyear+PADL(TRANSFORM(nrunno),3,'0') FROM sysctl WHERE BETWEEN(dacctdate,tdDate1,tdDate2))"
		   ENDCASE
		
		   CREATE CURSOR disbchks ;
		      (cownerid        C(10), ;
		      cOwnName        C(40), ;
		      cperiod         C(6), ;
		      CMONTH          C(2), ;
		      cyear           C(4), ;
		      cMonthName      C(20), ;
		      cWellID         C(10), ;
		      nTotBBL         N(12, 2), ;
		      nTotProd         N(12, 2), ;
		      nTotMcf         N(12, 2), ;
		      nIncome         N(12, 2), ;
		      nOilRev         N(12, 2), ;
		      nGasRev         N(12, 2), ;
		      nOthRev         N(12, 2), ;
		      cTypeInv        C(1), ;
		      cTypeInt        C(1), ;
		      cReportType     C(1), ;
		      cDirect         C(1), ;
		      nExpense        N(12, 2), ;
		      nplugexp        N(12, 2), ;
		      nSevTaxes       N(12, 2), ;
		      nOilTax         N(12, 2), ;
		      nGasTax         N(12, 2), ;
		      nOthTax         N(12, 2), ;
		      nNetCheck       N(12, 2), ;
		      hyear           C(4), ;
		      hperiod         C(2), ;
		      nGather         N(12, 2), ;
		      nCompress       N(12, 2), ;
		      cProgCode       C(10), ;
		      cProgName       C(40), ;
		      cWellName       C(30), ;
		      hDate           D, ;
		      nCheckAmt       N(12, 2))
		   INDEX ON cownerid + cperiod + cProgCode + cTypeInv + cWellID TAG wellprog
		   INDEX ON cownerid + cperiod + cTypeInv + cWellID TAG wellinv
		
		   IF NOT tlByMonth
		      IF NOT tlActual
		         THISFORM.BuildDataSummary()
		      ELSE
		         THISFORM.EarnedSummary()
		      ENDIF
		   ELSE
		      IF NOT tlActual
		         THISFORM.BuildDataMonth()
		      ELSE
		         THISFORM.EarnedMonthly()
		      ENDIF
		      IF tnType # 1
		         SELECT disbchk
		*         REPLACE hyear WITH '', hperiod WITH '' all
		      ENDIF
		   ENDIF
		
		   SWSELECT('WELLS')
		   SET ORDER TO cWellID
		
		   SELECT disbchk
		   SCAN
		      SCATTER MEMVAR
		      IF NOT tlIncDirect
		         SWSELECT('WELLS')
		         IF SEEK(m.cWellID)
		            m.ldiroilpurch = ldiroilpurch
		            m.ldirgaspurch = ldirgaspurch
		            SCATTER FIELDS LIKE lsev* MEMVAR
		         ELSE
		            LOOP
		         ENDIF
		         IF m.cDirect = 'O' OR m.cDirect = 'B'
		            IF m.lsev1o OR m.ldiroilpurch
		               m.nSevTaxes = m.nSevTaxes -  m.noiltax1
		            ENDIF
		            IF m.lsev2o OR m.ldiroilpurch
		               m.nSevTaxes = m.nSevTaxes - m.noiltax2
		            ENDIF
		            IF m.lsev3o OR m.ldiroilpurch
		               m.nSevTaxes = m.nSevTaxes - m.noiltax3
		            ENDIF
		            IF m.lsev4o OR m.ldiroilpurch
		               m.nSevTaxes = m.nSevTaxes - m.noiltax4
		            ENDIF
		         ENDIF
		         IF m.cDirect = 'G' OR m.cDirect = 'B'
		            IF m.lsev1g OR m.ldirgaspurch
		               m.nSevTaxes = m.nSevTaxes - m.ngastax1
		            ENDIF
		            IF m.lsev2g OR m.ldirgaspurch
		               m.nSevTaxes = m.nSevTaxes - m.ngastax2
		            ENDIF
		            IF m.lsev3g OR m.ldirgaspurch
		               m.nSevTaxes = m.nSevTaxes - m.ngastax3
		            ENDIF
		            IF m.lsev4g OR m.ldirgaspurch
		               m.nSevTaxes = m.nSevTaxes - m.ngastax4
		            ENDIF
		         ENDIF
		      ENDIF
		
		      IF tlByMonth
		         TRY
		            IF NOT BETWEEN(m.cMonth, '01', '12')
		               m.cMonth = '01'
		            ENDIF
		         CATCH
		            m.cMonth = '01'
		         ENDTRY
		         m.cperiod = m.cyear + m.cMonth
		         lnX       = VAL(m.cMonth)
		         IF NOT BETWEEN(lnX,1,12)
		            lnX = 1
		         ENDIF
		         IF tnType = 2 OR tnType = 3
		            m.cMonthName  = ALLTRIM(THISFORM.laMonth[lnX]) + ', ' + m.cyear
		         ELSE
		            m.cMonthName  = THISFORM.laMonthend[lnX] + ', ' + m.cyear
		         ENDIF
		      ELSE
		         m.cMonthName = ' '
		         m.cperiod    = ' '
		      ENDIF
		
		      SWSELECT('programs')
		      SET ORDER TO cProgCode
		      SEEK m.cProgCode
		      IF FOUND()
		         m.cProgName = cProgName
		      ELSE
		         m.cProgCode = 'None'
		         m.cProgName = 'Non Program Wells'
		      ENDIF
		      IF tlIncDirect
		         DO CASE
		            CASE m.cDirect = 'O'
		               m.nNetCheck = m.nNetCheck + m.nOilRev
		            CASE m.cDirect = 'G'
		               m.nNetCheck = m.nNetCheck + m.nGasRev
		            CASE m.cDirect = 'B'
		               m.nNetCheck = m.nNetCheck + m.nOilRev + m.nGasRev
		         ENDCASE
		      ENDIF
		      IF ISNULL(m.nTotBBL)
		         m.nTotBBL = 0
		      ENDIF
		      IF ISNULL(m.nTotMcf)
		         m.nTotMcf = 0
		      ENDIF
		      IF ISNULL(m.nTotProd)
		         m.nTotProd = 0
		      ENDIF
		      INSERT INTO disbchks FROM MEMVAR
		   ENDSCAN
		
		   IF tlByMonth
		      IF tlByProgram
		         lcOrderGroup = "cyear, CMONTH, cprogcode, cOwnerID, cTypeInv, cWellID, cDirect, hyear, hperiod"
		      ELSE
		         lcOrderGroup = "cyear, CMONTH, cprogcode, cOwnerID, cTypeInv, cWellID, cDirect, hyear, hperiod"
		      ENDIF
		   ELSE
		      IF tlByProgram
		         lcOrderGroup = "cyear, CMONTH, cprogcode, cOwnerID, cTypeInv, cWellID, cDirect"
		      ELSE
		         lcOrderGroup = "cyear, CMONTH, cprogcode, cOwnerID, cTypeInv, cWellID, cDirect"
		      ENDIF
		   ENDIF
		
		   SELECT  cownerid, ;
		      cOwnName, ;
		      cWellID, ;
		      cyear, ;
		      CMONTH, ;
		      cMonthName, ;
		      SUM(nIncome) AS nIncome, ;
		      SUM(nTotBBL) AS nTotBBL, ;
		      SUM(nTotMcf) AS nTotMcf, ;
		      SUM(nTotProd) AS nTotProd, ;
		      SUM(nOilRev) AS nOilRev, ;
		      SUM(nGasRev) AS nGasRev, ;
		      hDate, ;
		      SUM(nOthRev) AS nOthRev, ;
		      cTypeInv, ;
		      cTypeInt, ;
		      cDirect, ;
		      SUM(nExpense) AS nExpense, ;
		      SUM(nplugexp) AS nplugexp, ;
		      SUM(nSevTaxes) AS nSevTaxes, ;
		      SUM(nNetCheck) AS nNetCheck, ;
		      SUM(nGather) AS nGather, ;
		      SUM(nOilTax) AS nOilTax, ;
		      SUM(nGasTax) AS nGasTax, ;
		      SUM(nOthTax) AS nOthTax, ;
		      SUM(nCompress) AS nCompress, ;
		      IIF(tlByMonth, hyear, '') AS hyear, ;
		      IIF(tlByMonth, hperiod, '') AS hperiod, ;
		      cProgCode, ;
		      cProgName, ;
		      cWellName, ;
		      nCheckAmt ;
		      FROM disbchks ;
		      INTO CURSOR disbchks READWRITE  ;
		      ORDER BY &lcOrderGroup ;
		      GROUP BY &lcOrderGroup
		
		   INDEX ON cownerid + cyear + CMONTH + cProgCode + cTypeInv + cWellID TAG wellprog
		   INDEX ON cownerid + cyear + CMONTH + cTypeInv + cWellID TAG wellinv
		   INDEX ON cownerid + cyear + CMONTH + cTypeInv + cWellID TAG bymonth
		   INDEX ON cownerid + cyear + CMONTH + cProgCode + cTypeInv + cWellID TAG byprog
		
		   SELECT disbchks
		   IF NOT tlByProgram
		      IF tlByMonth
		         SET ORDER TO bymonth
		      ELSE
		         SET ORDER TO wellinv
		      ENDIF
		   ELSE
		      IF tlByMonth
		         SET ORDER TO byprog
		      ELSE
		         SET ORDER TO wellprog
		      ENDIF
		   ENDIF
		
		   SELECT disbchks
		   SCAN
		      IF nIncome = 0 AND ;
		            nExpense = 0 AND ;
		            nNetCheck = 0
		         DELETE NEXT 1
		      ENDIF
		   ENDSCAN
		
		   COUNT FOR NOT DELETED() TO lnCount
		   IF lnCount > 0
		      llReturn = .T.
		   ELSE
		      llReturn = .F.
		   ENDIF
		
		CATCH TO loError
		   llReturn = .F.
		   DO errorlog WITH 'BuildData', loError.LINENO, 'Yearly Disb Summary', loError.ERRORNO, loError.MESSAGE
		   MESSAGEBOX('Unable to process the report at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		      'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		WAIT CLEAR
		
		RETURN llReturn
		
	ENDPROC

	PROCEDURE builddatamonth
		LOCAL lcWhere1, lcWhere2
		LOCAL llReturn, loError
		*:Global nTotBBL, nTotMcf, nrevgas, nrevoil, tcGroup, tcOwner1, tcOwner2, tcPeriod1, tcPeriod2
		*:Global tcYear1, tcYear2, tdDate1, tdDate2, tlActual, tlByMonth, tlByProgram, tlIncDirect
		*:Global tlJIBHist, tlNoPrior, tlOwnPage, tnType
		
		llReturn = .T.
		
		TRY
		   tcOwner1    = THISFORM.swrptlook1.txtBegID.VALUE
		   tcOwner2    = THISFORM.swrptlook1.txtEndID.VALUE
		   tcYear1     = THISFORM.swYear1.VALUE
		   tcYear2     = THISFORM.swYear2.VALUE
		   tcPeriod1   = THISFORM.swPeriod1.VALUE
		   tcPeriod2   = THISFORM.swperiod2.VALUE
		   tlOwnPage   = THISFORM.chkOwnPage.VALUE
		   tlNoPrior   = .F.
		   tcGroup     = LEFT(THISFORM.swgroup1.VALUE, 2)
		   tdDate1     = THISFORM.txtbegdate.VALUE
		   tdDate2     = THISFORM.txtenddate.VALUE
		   tnType      = THISFORM.opgRange.VALUE
		   tlByMonth   = THISFORM.chkByMonth.VALUE
		   tlByProgram = THISFORM.chkByProgram.VALUE
		   tlIncDirect = THISFORM.chkincdirect.VALUE
		   tlJIBHist   = THISFORM.chkjibhistory.VALUE
		   tlActual    = THISFORM.chklActual.VALUE
		   tlIncPmts   = THISFORM.chkincPayments.VALUE
		   llSelected  = THISFORM.chkselected.VALUE
		
		   IF NOT llSelected
			  SELECT  cownerid AS cid ;
				  FROM investor ;
				  INTO CURSOR SELECTED ;
				  WHERE BETWEEN(cownerid, tcOwner1, tcOwner2) ;
				  ORDER BY cid
		   ENDIF
		
		
		   lcYear = THISFORM.cboArchived.VALUE
		   IF NOT EMPTY(lcYear)
		      llArchive = .T.
		      lcJoin    = 'IIF(EMPTY(disbhist.cRunYear_i), disbhist.crunyear = wellhist.crunyear AND disbhist.nrunno = wellhist.nrunno, disbhist.cRunYear_i = wellhist.crunyear'
		      lcWhereIn = "disbhist.cRunYear_i + PADL(TRANSFORM(disbhist.nrunno_in), 3, '0') NOT IN (SELECT  crunyear + PADL(TRANSFORM(nrunno), 3, '0') "
		   ELSE
		      llArchive = .F.
		      lcJoin    = 'IIF(EMPTY(disbhist.cRunYear_in), disbhist.crunyear = wellhist.crunyear AND disbhist.nrunno = wellhist.nrunno, disbhist.cRunYear_in = wellhist.crunyear'
		      lcWhereIn = "disbhist.cRunYear_in + PADL(TRANSFORM(disbhist.nrunno_in), 3, '0') NOT IN (SELECT  crunyear + PADL(TRANSFORM(nrunno), 3, '0') "
		   ENDIF
		
		   DO CASE
		      CASE tnType = 1
		         THISFORM.ctitle2 = 'By Production Period Range: ' + tcYear1 + '/' + tcPeriod1 + ' thru ' + tcYear2 + '/' + tcPeriod2
		         lcWhere1         = 'between(disbhist.hyear+disbhist.hperiod,tcYear1+tcPeriod1,tcYear2+tcPeriod2)'
		         lcWhere1a        = 'between(disbhist.hyear+disbhist.hperiod,tcYear1+tcPeriod1,tcYear2+tcPeriod2)'
		         lcWhere2         = 'between(suspense.hyear+suspense.hperiod,tcYear1+tcPeriod1,tcYear2+tcPeriod2)'
		         lcWhereP1        = 'between(disbhist.hyear+disbhist.hperiod,tcYear1+tcPeriod1,tcYear2+tcPeriod2)'
		         lcWhereP2        = 'between(suspense.hyear+suspense.hperiod,tcYear1+tcPeriod1,tcYear2+tcPeriod2)'
		      CASE tnType = 2
		         THISFORM.ctitle2 = 'By Accounting Year: ' + tcYear1
		         lcWhere1         = "disbhist.cRunYear + PADL(TRANSFORM(disbhist.nrunno), 3, '0')+disbhist.crectype+disbhist.cgroup IN " + ;
		            "(SELECT  crunyear + PADL(TRANSFORM(nrunno), 3, '0')+ctypeclose+cgroup FROM sysctl WHERE YEAR(dacctdate) = VAL(tcYear1)) "
		         lcWhere1a        = "(disbhist.cRunYear + PADL(TRANSFORM(disbhist.nrunno), 3, '0')+disbhist.cgroup IN " + ;
		            "(SELECT  crunyear + PADL(TRANSFORM(nrunno), 3, '0')+cgroup FROM sysctl WHERE YEAR(dacctdate) = VAL(tcYear1) and ctypeclose='R'))"
		         lcWhere2         = "cRunYear_in+PADL(TRANSFORM(nrunno_in),3,'0')+suspense.crectype+suspense.cgroup IN " + ;
		            "(SELECT crunyear+PADL(TRANSFORM(nrunno),3,'0')+ctypeclose+cgroup FROM sysctl WHERE YEAR(dacctdate)=VAL(tcYear1) and lDisbMan) "
		         lcWhereP1 = 'year(disbhist.hdate) = VAL(tcYear1)'
		         lcWhereP2 = 'year(suspense.hdate) = VAL(tcYear1)'
		      CASE tnType = 3
		         THISFORM.ctitle2 = 'By Date Range: ' + DTOC(tdDate1) + '-' + DTOC(tdDate2)
		         lcWhere1         = "(disbhist.cRunYear + PADL(TRANSFORM(disbhist.nrunno), 3, '0')+disbhist.crectype+disbhist.cgroup IN " + ;
		            "(SELECT  crunyear + PADL(TRANSFORM(nrunno), 3, '0')+ctypeclose+cgroup FROM sysctl WHERE BETWEEN(dacctdate,tdDate1,tdDate2))) "
		         lcWhere1a        = "(disbhist.cRunYear + PADL(TRANSFORM(disbhist.nrunno), 3, '0')+disbhist.cgroup IN " + ;
		            "(SELECT  crunyear + PADL(TRANSFORM(nrunno), 3, '0')+cgroup FROM sysctl WHERE BETWEEN(dacctdate,tdDate1,tdDate2) and ctypeclose='R'))  "
		         lcWhere2         = "cRunYear_in+PADL(TRANSFORM(nrunno_in),3,'0')+suspense.crectype+suspense.cgroup IN " + ;
		            "(SELECT crunyear+PADL(TRANSFORM(nrunno),3,'0')+ctypeclose+cgroup FROM sysctl WHERE BETWEEN(dacctdate,tdDate1,tdDate2) and lDisbMan) "
		         lcWhereP1 = 'between(disbhist.hdate,tdDate1,tdDate2)'
		         lcWhereP2 = 'between(suspense.hdate,tdDate1,tdDate2)'
		   ENDCASE
		
		   SET TALK ON
		* Get entries creating by run closings (no suspense entries)
		   SELECT  disbhist.cownerid, ;
				   investor.cOwnName, ;
				   disbhist.cWellID, ;
				   disbhist.crectype, ;
				   IIF(tnType = 1, disbhist.hperiod, CAST(THIS.GetFiscalPeriod(disbhist.hDate) AS C(2))) AS CMONTH, ;
				   IIF(tnType = 1, disbhist.hyear,   CAST(THIS.GetFiscalYear(disbhist.hDate) AS C(4))) AS cyear, ;
				   SUM(disbhist.nIncome) AS nIncome, ;
				   IIF(tlIncDirect, SUM(nOilRev), IIF(disbhist.cDirect # 'O', ;
						 IIF(disbhist.cDirect # 'B', SUM(disbhist.nOilRev), 000000.00), 000000.00)) AS nOilRev, ;
				   IIF(tlIncDirect, SUM(nGasRev), IIF(disbhist.cDirect # 'G', ;
						 IIF(disbhist.cDirect # 'B', SUM(disbhist.nGasRev + disbhist.nFlatRate), 000000.00), 000000.00)) AS nGasRev, ;
				   SUM(disbhist.nTrpRev + disbhist.nMiscRev1 + disbhist.nMiscRev2 + disbhist.nOthRev + disbhist.nFlatRate) AS nOthRev, ;
				   IIF(tlIncDirect, SUM(wellhist.nTotBBL * (ownpcts.nrevoil / 100)), ;
					   IIF(disbhist.cDirect # 'O', IIF(disbhist.cDirect # 'B', SUM(wellhist.nTotBBL * (ownpcts.nrevoil / 100)), 00000.00), 00000.00)) AS nTotBBL, ;
				   IIF(tlIncDirect, SUM(wellhist.nTotMcf * (ownpcts.nrevgas / 100)), ;
					   IIF(disbhist.cDirect # 'G', IIF(disbhist.cDirect # 'B', SUM(wellhist.nTotMcf * (ownpcts.nrevgas / 100)), 00000.00), 00000.00)) AS nTotMcf, ;
				   SUM(wellhist.nTotProd * (ownpcts.nrevoth / 100)) AS nTotProd, ;
				   SUM(wellhist.nTotBBL) AS nwellbbl, ;
				   SUM(wellhist.nTotMcf) AS nwellmcf, ;
				   ownpcts.nrevoil, ;
				   ownpcts.nrevgas, ;
				   disbhist.cTypeInv, ;
				   disbhist.cTypeInt, ;
				   disbhist.cDirect, ;
				   disbhist.hDate, ;
				   SUM(disbhist.nExpense + ;
					   disbhist.nTotale1 + ;
					   disbhist.nTotale2 + ;
					   disbhist.nTotale3 + ;
					   disbhist.nTotale4 + ;
					   disbhist.nTotale5 + ;
					   disbhist.nTotaleA + ;
					   disbhist.nTotaleB + ;
					   disbhist.nMKTGExp + ;
					   disbhist.nPlugExp) AS nExpense, ;
				   SUM(disbhist.nPlugExp) AS nPlugExp, ;
				   SUM(disbhist.noiltax1 + disbhist.noiltax2 + disbhist.noiltax3 + disbhist.noiltax4) AS nOilTax, ;
				   SUM(disbhist.ngastax1 + disbhist.ngastax2 + disbhist.ngastax3 + disbhist.ngastax4) AS nGasTax, ;
				   SUM(noiltax1) AS noiltax1, ;
				   SUM(noiltax2) AS noiltax2, ;
				   SUM(noiltax3) AS noiltax3, ;
				   SUM(noiltax4) AS noiltax4, ;
				   SUM(ngastax1) AS ngastax1, ;
				   SUM(ngastax2) AS ngastax2, ;
				   SUM(ngastax3) AS ngastax3, ;
				   SUM(ngastax4) AS ngastax4, ;
				   SUM(disbhist.nothtax1 + disbhist.nothtax2 + disbhist.nothtax3 + disbhist.nothtax4 + disbhist.nTaxWith + disbhist.nBackWith) AS nOthTax, ;
				   SUM(disbhist.nNetCheck) AS nNetCheck, ;
				   SUM(disbhist.nGather) AS nGather, ;
				   SUM(disbhist.nCompress) AS nCompress, ;
				   disbhist.hyear, ;
				   disbhist.hperiod, ;
				   disbhist.cProgCode, ;
				   wells.cWellName, ;
				   0.00 AS nCheckAmt ;
			   FROM disbhist ;
			   LEFT OUTER JOIN ownpcts ;
				   ON disbhist.ciddisb == ownpcts.ciddisb ;
			   JOIN wells ;
				   ON disbhist.cWellID = wells.cWellID ;
			   JOIN investor ;
				   ON disbhist.cownerid = investor.cownerid ;
			   LEFT OUTER JOIN wellhist ;
				   ON disbhist.cWellID = wellhist.cWellID AND ;
				   disbhist.lManual = .F. AND ;
				   disbhist.hyear + disbhist.hperiod = wellhist.hyear + wellhist.hperiod AND ;
				   &lcJoin ;
				   AND disbhist.nrunno_in = wellhist.nrunno) AND ;
				   disbhist.crectype = wellhist.crectype ;
			   WHERE &lcWhere1 ;
				   AND disbhist.lManual = .F. ;
				   AND disbhist.cownerid IN (;
					 SELECT cid ;
					 FROM SELECTED) ;
				   AND IIF(THISFORM.lPostedOwners, investor.lIntegGL = .F., .T.) ;
				   AND IIF(tlJIBHist, INLIST(disbhist.crectype, 'J', 'P', 'R'), INLIST(disbhist.crectype, 'P', 'R')) ;
				   AND IIF(tcGroup = '**', .T., disbhist.cGroup = tcGroup) ;
			   INTO CURSOR disbchk1 READWRITE ;
			   ORDER BY cyear, CMONTH, disbhist.cownerid, disbhist.cProgCode, disbhist.cTypeInv, disbhist.cWellID, disbhist.cTypeInt, disbhist.cDirect, disbhist.hyear, disbhist.hperiod ;
			   GROUP BY cyear, CMONTH, disbhist.cownerid, disbhist.cProgCode, disbhist.cTypeInv, disbhist.cWellID, disbhist.cTypeInt, disbhist.cDirect, disbhist.hyear, disbhist.hperiod
		
		
		* Get manual entries
		   SELECT  disbhist.cownerid, ;
				   investor.cOwnName, ;
				   disbhist.cWellID, ;
				   disbhist.crectype, ;
				   IIF(tnType = 1, disbhist.hperiod, CAST(THIS.GetFiscalPeriod(disbhist.hDate) AS C(2))) AS CMONTH, ;
				   IIF(tnType = 1, disbhist.hyear,   CAST(THIS.GetFiscalYear(disbhist.hDate) AS C(4))) AS cyear, ;
				   SUM(disbhist.nIncome) AS nIncome, ;
				   IIF(tlIncDirect, SUM(nOilRev), IIF(disbhist.cDirect # 'O', IIF(disbhist.cDirect # 'B', SUM(disbhist.nOilRev), 000000.00), 000000.00)) AS nOilRev, ;
				   IIF(tlIncDirect, SUM(nGasRev), IIF(disbhist.cDirect # 'G', IIF(disbhist.cDirect # 'B', SUM(disbhist.nGasRev + disbhist.nFlatRate), 000000.00), 000000.00)) AS nGasRev, ;
				   SUM(disbhist.nTrpRev + disbhist.nMiscRev1 + disbhist.nMiscRev2 + disbhist.nOthRev + disbhist.nFlatRate) AS nOthRev, ;
				   0.00 AS nTotBBL, ;
				   0.00 AS nTotMcf, ;
				   0.00 AS nTotProd, ;
				   ownpcts.nrevoil, ;
				   ownpcts.nrevgas, ;
				   disbhist.cTypeInv, ;
				   disbhist.cTypeInt, ;
				   disbhist.cDirect, ;
				   disbhist.hDate, ;
				   SUM(disbhist.nExpense + ;
					   disbhist.nTotale1 + ;
					   disbhist.nTotale2 + ;
					   disbhist.nTotale3 + ;
					   disbhist.nTotale4 + ;
					   disbhist.nTotale5 + ;
					   disbhist.nTotaleA + ;
					   disbhist.nTotaleB + ;
					   disbhist.nMKTGExp + ;
					   disbhist.nPlugExp) AS nExpense, ;
				   SUM(disbhist.nPlugExp) AS nPlugExp, ;
				   SUM(disbhist.noiltax1 + disbhist.noiltax2 + disbhist.noiltax3 + disbhist.noiltax4) AS nOilTax, ;
				   SUM(disbhist.ngastax1 + disbhist.ngastax2 + disbhist.ngastax3 + disbhist.ngastax4) AS nGasTax, ;
				   SUM(noiltax1) AS noiltax1, ;
				   SUM(noiltax2) AS noiltax2, ;
				   SUM(noiltax3) AS noiltax3, ;
				   SUM(noiltax4) AS noiltax4, ;
				   SUM(ngastax1) AS ngastax1, ;
				   SUM(ngastax2) AS ngastax2, ;
				   SUM(ngastax3) AS ngastax3, ;
				   SUM(ngastax4) AS ngastax4, ;
				   SUM(disbhist.nothtax1 + disbhist.nothtax2 + disbhist.nothtax3 + disbhist.nothtax4 + disbhist.nTaxWith + disbhist.nBackWith) AS nOthTax, ;
				   SUM(disbhist.nNetCheck) AS nNetCheck, ;
				   SUM(disbhist.nGather) AS nGather, ;
				   SUM(disbhist.nCompress) AS nCompress, ;
				   disbhist.hyear, ;
				   disbhist.hperiod, ;
				   disbhist.cProgCode, ;
				   wells.cWellName, ;
				   0.00 AS nCheckAmt ;
			   FROM disbhist ;
			   LEFT OUTER JOIN ownpcts ;
				   ON disbhist.ciddisb == ownpcts.ciddisb ;
			   JOIN wells ;
				   ON disbhist.cWellID = wells.cWellID ;
			   JOIN investor ;
				   ON disbhist.cownerid = investor.cownerid ;
			   WHERE &lcWhere1a ;
				   AND (disbhist.lManual = .T. ;
					 AND disbhist.crectype # 'P' ;
					 AND &lcWhereIn ;
					 FROM sysctl ;
					 WHERE EMPTY(cversion) ;
					 AND lDisbMan = .T.)) ;
				   AND disbhist.cownerid IN (;
					 SELECT cid ;
					 FROM SELECTED) ;
				   AND IIF(THISFORM.lPostedOwners, investor.lIntegGL = .F., .T.) ;
				   AND IIF(tlJIBHist, INLIST(disbhist.crectype, 'J', 'P', 'R'), INLIST(disbhist.crectype, 'P', 'R')) ;
				   AND IIF(tcGroup = '**', .T., disbhist.cGroup = tcGroup) ;
			   INTO CURSOR disbchk3 READWRITE ;
			   ORDER BY cyear, CMONTH, disbhist.cownerid, disbhist.cProgCode, disbhist.cTypeInv, disbhist.cWellID, disbhist.cTypeInt, disbhist.cDirect, disbhist.hyear, disbhist.hperiod ;
			   GROUP BY cyear, CMONTH, disbhist.cownerid, disbhist.cProgCode, disbhist.cTypeInv, disbhist.cWellID, disbhist.cTypeInt, disbhist.cDirect,  disbhist.hyear, disbhist.hperiod
		
		   SET TALK OFF
		   IF _TALLY > 0
		*  If it's a converted record, the percentages are all 100%, which throws off the units/owner calculation, so try
		*  and match back to a good record in disbchk1, and get their good interests for oil/gas off of that.
		      SELECT disbchk3
		      SCAN FOR nrevoil = 100 AND nrevgas = 100
		         SELECT disbchk1
		         LOCATE FOR disbchk1.cownerid == disbchk2.cownerid AND disbchk1.cWellID = disbchk2.cWellID AND disbchk1.cTypeInv = disbchk2.cTypeInv
		         IF FOUND()
		            m.nrevgas = disbchk1.nrevgas
		            m.nrevoil = disbchk1.nrevoil
		            m.nTotBBL = disbchk2.nTotBBL * (m.nrevoil / 100)
		            m.nTotMcf = disbchk2.nTotMcf * (m.nrevgas / 100)
		            SELECT disbchk3
		            REPLACE nTotBBL WITH m.nTotBBL, nTotMcf WITH m.nTotMcf
		         ENDIF
		      ENDSCAN
		      SELECT disbchk1
		      APPEND FROM DBF('disbchk3')
		   ENDIF
		
		   IF THISFORM.lPostedOwners
			  SELECT  disbhist.cownerid, ;
					  investor.cOwnName, ;
					  disbhist.cWellID, ;
					  disbhist.crectype, ;
					  IIF(tnType = 1, disbhist.hperiod, CAST(THIS.GetFiscalPeriod(disbhist.hDate) AS C(2))) AS CMONTH, ;
					  IIF(tnType = 1, disbhist.hyear,   CAST(THIS.GetFiscalYear(disbhist.hDate) AS C(4))) AS cyear, ;
					  SUM(disbhist.nIncome) AS nIncome, ;
					  IIF(tlIncDirect, SUM(nOilRev), IIF(disbhist.cDirect # 'O', IIF(disbhist.cDirect # 'B', SUM(disbhist.nOilRev), 000000.00), 000000.00)) AS nOilRev, ;
					  IIF(tlIncDirect, SUM(nGasRev), IIF(disbhist.cDirect # 'G', IIF(disbhist.cDirect # 'B', SUM(disbhist.nGasRev + disbhist.nFlatRate), 000000.00), 000000.00)) AS nGasRev, ;
					  SUM(disbhist.nTrpRev + disbhist.nMiscRev1 + disbhist.nMiscRev2 + disbhist.nOthRev + disbhist.nFlatRate) AS nOthRev, ;
					  IIF(tlIncDirect, SUM(wellhist.nTotBBL * (ownpcts.nrevoil / 100)), IIF(disbhist.cDirect # 'O', IIF(disbhist.cDirect # 'B', SUM(wellhist.nTotBBL * (ownpcts.nrevoil / 100)), 00000.00), 00000.00)) AS nTotBBL, ;
					  IIF(tlIncDirect, SUM(wellhist.nTotMcf * (ownpcts.nrevgas / 100)), IIF(disbhist.cDirect # 'G', IIF(disbhist.cDirect # 'B', SUM(wellhist.nTotMcf * (ownpcts.nrevgas / 100)), 00000.00), 00000.00)) AS nTotMcf, ;
					  SUM(wellhist.nTotProd * (ownpcts.nrevoth / 100)) AS nTotProd, ;
					  SUM(wellhist.nTotBBL) AS nwellbbl, ;
					  SUM(wellhist.nTotMcf) AS nwellmcf, ;
					  ownpcts.nrevoil, ;
					  ownpcts.nrevgas, ;
					  disbhist.cTypeInv, ;
					  disbhist.cTypeInt, ;
					  disbhist.cDirect, ;
					  disbhist.hDate, ;
					  SUM(disbhist.nExpense + ;
						  disbhist.nTotale1 + ;
						  disbhist.nTotale2 + ;
						  disbhist.nTotale3 + ;
						  disbhist.nTotale4 + ;
						  disbhist.nTotale5 + ;
						  disbhist.nTotaleA + ;
						  disbhist.nTotaleB + ;
						  disbhist.nMKTGExp + ;
						  disbhist.nPlugExp) AS nExpense, ;
					  SUM(disbhist.nPlugExp) AS nPlugExp, ;
					  SUM(disbhist.noiltax1 + disbhist.noiltax2 + disbhist.noiltax3 + disbhist.noiltax4) AS nOilTax, ;
					  SUM(disbhist.ngastax1 + disbhist.ngastax2 + disbhist.ngastax3 + disbhist.ngastax4) AS nGasTax, ;
					  SUM(noiltax1) AS noiltax1, ;
					  SUM(noiltax2) AS noiltax2, ;
					  SUM(noiltax3) AS noiltax3, ;
					  SUM(noiltax4) AS noiltax4, ;
					  SUM(ngastax1) AS ngastax1, ;
					  SUM(ngastax2) AS ngastax2, ;
					  SUM(ngastax3) AS ngastax3, ;
					  SUM(ngastax4) AS ngastax4, ;
					  SUM(disbhist.nothtax1 + disbhist.nothtax2 + disbhist.nothtax3 + disbhist.nothtax4 + disbhist.nTaxWith + disbhist.nBackWith) AS nOthTax, ;
					  SUM(disbhist.nNetCheck) AS nNetCheck, ;
					  SUM(disbhist.nGather) AS nGather, ;
					  SUM(disbhist.nCompress) AS nCompress, ;
					  disbhist.hyear, ;
					  disbhist.hperiod, ;
					  disbhist.cProgCode, ;
					  wells.cWellName, ;
					  0.00 AS nCheckAmt ;
				  FROM disbhist ;
				  LEFT OUTER JOIN ownpcts ;
					  ON disbhist.ciddisb == ownpcts.ciddisb ;
				  JOIN wells ;
					  ON disbhist.cWellID = wells.cWellID ;
				  JOIN investor ;
					  ON disbhist.cownerid = investor.cownerid ;
				  LEFT OUTER JOIN wellhist ;
					  ON disbhist.cWellID = wellhist.cWellID AND ;
					  disbhist.lManual = .F. AND ;
					  disbhist.hyear + disbhist.hperiod = wellhist.hyear + wellhist.hperiod AND ;
					  &lcJoin ;
					  AND disbhist.nrunno_in = wellhist.nrunno) AND ;
					  disbhist.crectype = wellhist.crectype ;
				  WHERE &lcWhereP1 ;
					  AND disbhist.lManual = .F. ;
					  AND disbhist.cownerid IN (;
						SELECT cid ;
						FROM SELECTED) ;
					  AND investor.lIntegGL = .T. ;
					  AND IIF(tlJIBHist, INLIST(disbhist.crectype, 'J', 'P', 'R'), INLIST(disbhist.crectype, 'P', 'R')) ;
					  AND IIF(tcGroup = '**', .T., disbhist.cGroup = tcGroup) ;
				  INTO CURSOR disbchkP1 READWRITE ;
				  ORDER BY cyear, CMONTH, disbhist.cownerid, disbhist.cProgCode, disbhist.cTypeInv, disbhist.cWellID, disbhist.cTypeInt, disbhist.cDirect, disbhist.hyear, disbhist.hperiod ;
				  GROUP BY cyear, CMONTH, disbhist.cownerid, disbhist.cProgCode, disbhist.cTypeInv, disbhist.cWellID, disbhist.cTypeInt, disbhist.cDirect, disbhist.hyear, disbhist.hperiod
		
		
		* Get manual entries
			  SELECT  disbhist.cownerid, ;
					  investor.cOwnName, ;
					  disbhist.cWellID, ;
					  disbhist.crectype, ;
					  IIF(tnType = 1, disbhist.hperiod, CAST(THIS.GetFiscalPeriod(disbhist.hDate) AS C(2))) AS CMONTH, ;
					  IIF(tnType = 1, disbhist.hyear,   CAST(THIS.GetFiscalYear(disbhist.hDate) AS C(4))) AS cyear, ;
					  SUM(disbhist.nIncome) AS nIncome, ;
					  IIF(tlIncDirect, SUM(nOilRev), IIF(disbhist.cDirect # 'O', IIF(disbhist.cDirect # 'B', SUM(disbhist.nOilRev), 000000.00), 000000.00)) AS nOilRev, ;
					  IIF(tlIncDirect, SUM(nGasRev), IIF(disbhist.cDirect # 'G', IIF(disbhist.cDirect # 'B', SUM(disbhist.nGasRev + disbhist.nFlatRate), 000000.00), 000000.00)) AS nGasRev, ;
					  SUM(disbhist.nTrpRev + disbhist.nMiscRev1 + disbhist.nMiscRev2 + disbhist.nOthRev + disbhist.nFlatRate) AS nOthRev, ;
					  0.00 AS nTotBBL, ;
					  0.00 AS nTotMcf, ;
					  0.00 AS nTotProd, ;
					  ownpcts.nrevoil, ;
					  ownpcts.nrevgas, ;
					  disbhist.cTypeInv, ;
					  disbhist.cTypeInt, ;
					  disbhist.cDirect, ;
					  disbhist.hDate, ;
					  SUM(disbhist.nExpense + ;
						  disbhist.nTotale1 + ;
						  disbhist.nTotale2 + ;
						  disbhist.nTotale3 + ;
						  disbhist.nTotale4 + ;
						  disbhist.nTotale5 + ;
						  disbhist.nTotaleA + ;
						  disbhist.nTotaleB + ;
						  disbhist.nMKTGExp + ;
						  disbhist.nPlugExp) AS nExpense, ;
					  SUM(disbhist.nPlugExp) AS nPlugExp, ;
					  SUM(disbhist.noiltax1 + disbhist.noiltax2 + disbhist.noiltax3 + disbhist.noiltax4) AS nOilTax, ;
					  SUM(disbhist.ngastax1 + disbhist.ngastax2 + disbhist.ngastax3 + disbhist.ngastax4) AS nGasTax, ;
					  SUM(noiltax1) AS noiltax1, ;
					  SUM(noiltax2) AS noiltax2, ;
					  SUM(noiltax3) AS noiltax3, ;
					  SUM(noiltax4) AS noiltax4, ;
					  SUM(ngastax1) AS ngastax1, ;
					  SUM(ngastax2) AS ngastax2, ;
					  SUM(ngastax3) AS ngastax3, ;
					  SUM(ngastax4) AS ngastax4, ;
					  SUM(disbhist.nothtax1 + disbhist.nothtax2 + disbhist.nothtax3 + disbhist.nothtax4 + disbhist.nTaxWith + disbhist.nBackWith) AS nOthTax, ;
					  SUM(disbhist.nNetCheck) AS nNetCheck, ;
					  SUM(disbhist.nGather) AS nGather, ;
					  SUM(disbhist.nCompress) AS nCompress, ;
					  disbhist.hyear, ;
					  disbhist.hperiod, ;
					  disbhist.cProgCode, ;
					  wells.cWellName, ;
					  0.00 AS nCheckAmt ;
				  FROM disbhist ;
				  LEFT OUTER JOIN ownpcts ;
					  ON disbhist.ciddisb == ownpcts.ciddisb ;
				  JOIN wells ;
					  ON disbhist.cWellID = wells.cWellID ;
				  JOIN investor ;
					  ON disbhist.cownerid = investor.cownerid ;
				  WHERE &lcWhereP1 ;
					  AND (disbhist.lManual = .T. ;
						AND &lcWhereIn ;
						FROM sysctl ;
						WHERE EMPTY(cversion) ;
						AND lDisbMan = .T.)) ;
					  AND disbhist.cownerid IN (;
						SELECT cid ;
						FROM SELECTED) ;
					  AND investor.lIntegGL = .T. ;
					  AND IIF(tlJIBHist, INLIST(disbhist.crectype, 'J', 'P', 'R'), INLIST(disbhist.crectype, 'P', 'R')) ;
					  AND IIF(tcGroup = '**', .T., disbhist.cGroup = tcGroup) ;
				  INTO CURSOR disbchkP3 READWRITE ;
				  ORDER BY cyear, CMONTH, disbhist.cownerid, disbhist.cProgCode, disbhist.cTypeInv, disbhist.cWellID, disbhist.cTypeInt, disbhist.cDirect, disbhist.hyear, disbhist.hperiod ;
				  GROUP BY cyear, CMONTH, disbhist.cownerid, disbhist.cProgCode, disbhist.cTypeInv, disbhist.cWellID, disbhist.cTypeInt, disbhist.cDirect, disbhist.hyear, disbhist.hperiod
		
		      SET TALK OFF
		
		      SELECT disbchk1
		      APPEND FROM DBF('disbchkp1')
		
		      IF _TALLY > 0
		*  If it's a converted record, the percentages are all 100%, which throws off the units/owner calculation, so try
		*  and match back to a good record in disbchk1, and get their good interests for oil/gas off of that.
		         SELECT disbchkP3
		         SCAN FOR nrevoil = 100 AND nrevgas = 100
		            SELECT disbchk1
		            LOCATE FOR disbchk1.cownerid == disbchk2.cownerid AND disbchk1.cWellID = disbchk2.cWellID AND disbchk1.cTypeInv = disbchk2.cTypeInv
		            IF FOUND()
		               m.nrevgas = disbchk1.nrevgas
		               m.nrevoil = disbchk1.nrevoil
		               m.nTotBBL = disbchk2.nTotBBL * (m.nrevoil / 100)
		               m.nTotMcf = disbchk2.nTotMcf * (m.nrevgas / 100)
		               SELECT disbchkP3
		               REPLACE nTotBBL WITH m.nTotBBL, nTotMcf WITH m.nTotMcf
		            ENDIF
		         ENDSCAN
		         SELECT disbchk1
		         APPEND FROM DBF('disbchkP3')
		      ENDIF
		   ENDIF
		
		   IF THISFORM.chkincSusp.VALUE
		      SET TALK ON
			  SELECT  suspense.cownerid, ;
					  investor.cOwnName, ;
					  suspense.cWellID, ;
					  suspense.crectype, ;
					  IIF(tnType = 1, suspense.hperiod, CAST(THIS.GetFiscalPeriod(suspense.hDate) AS C(2))) AS CMONTH, ;
					  IIF(tnType = 1, suspense.hyear,   CAST(THIS.GetFiscalYear(suspense.hDate) AS C(4))) AS cyear, ;
					  SUM(suspense.nIncome) AS nIncome, ;
					  IIF(tlIncDirect, SUM(nOilRev), IIF(suspense.cDirect # 'O', IIF(suspense.cDirect # 'B', SUM(suspense.nOilRev), 000000.00), 000000.00)) AS nOilRev, ;
					  IIF(tlIncDirect, SUM(nGasRev), IIF(suspense.cDirect # 'G', IIF(suspense.cDirect # 'B', SUM(suspense.nGasRev + suspense.nFlatRate), 000000.00), 000000.00)) AS nGasRev, ;
					  SUM(suspense.nTrpRev + suspense.nMiscRev1 + suspense.nMiscRev2 + suspense.nOthRev + suspense.nFlatRate) AS nOthRev, ;
					  IIF(tlIncDirect, SUM(wellhist.nTotBBL * (suspense.nrevoil / 100)), IIF(suspense.cDirect # 'O', IIF(suspense.cDirect # 'B', SUM(wellhist.nTotBBL * (suspense.nrevoil / 100)), 00000.00), 00000.00)) AS nTotBBL, ;
					  IIF(tlIncDirect, SUM(wellhist.nTotMcf * (suspense.nrevgas / 100)), IIF(suspense.cDirect # 'G', IIF(suspense.cDirect # 'B', SUM(wellhist.nTotMcf * (suspense.nrevgas / 100)), 00000.00), 00000.00)) AS nTotMcf, ;
					  SUM(wellhist.nTotProd * (suspense.nrevoth / 100)) AS nTotProd, ;
					  suspense.nrevoil, ;
					  suspense.nrevgas, ;
					  suspense.cTypeInv, ;
					  suspense.cTypeInt, ;
					  suspense.cDirect, ;
					  suspense.hDate, ;
					  SUM(suspense.nExpense + ;
						  suspense.nTotale1 + ;
						  suspense.nTotale2 + ;
						  suspense.nTotale3 + ;
						  suspense.nTotale4 + ;
						  suspense.nTotale5 + ;
						  suspense.nTotaleA + ;
						  suspense.nTotaleB + ;
						  disbhist.nMKTGExp + ;
						  suspense.nPlugExp) AS nExpense, ;
					  SUM(suspense.nPlugExp) AS nPlugExp, ;
					  SUM(suspense.noiltax1 + suspense.noiltax2 + suspense.noiltax3 + suspense.noiltax4) AS nOilTax, ;
					  SUM(suspense.ngastax1 + suspense.ngastax2 + suspense.ngastax3 + suspense.ngastax4) AS nGasTax, ;
					  SUM(noiltax1) AS noiltax1, ;
					  SUM(noiltax2) AS noiltax2, ;
					  SUM(noiltax3) AS noiltax3, ;
					  SUM(noiltax4) AS noiltax4, ;
					  SUM(ngastax1) AS ngastax1, ;
					  SUM(ngastax2) AS ngastax2, ;
					  SUM(ngastax3) AS ngastax3, ;
					  SUM(ngastax4) AS ngastax4, ;
					  SUM(suspense.nothtax1 + suspense.nothtax2 + suspense.nothtax3 + suspense.nothtax4 + suspense.nTaxWith + suspense.nBackWith) AS nOthTax, ;
					  SUM(suspense.nNetCheck) AS nNetCheck, ;
					  SUM(suspense.nGather) AS nGather, ;
					  SUM(suspense.nCompress) AS nCompress, ;
					  suspense.hyear, ;
					  suspense.hperiod, ;
					  suspense.cProgCode, ;
					  wells.cWellName, ;
					  0.00 AS nCheckAmt ;
				  FROM suspense ;
				  JOIN wells ;
					  ON suspense.cWellID = wells.cWellID ;
				  JOIN investor ;
					  ON suspense.cownerid = investor.cownerid ;
				  LEFT OUTER JOIN wellhist ;
					  ON suspense.cWellID = wellhist.cWellID AND ;
					  suspense.lManual = .F.  AND ;
					  suspense.hyear + suspense.hperiod = wellhist.hyear + wellhist.hperiod AND ;
					  suspense.cRunYear_in = wellhist.crunyear AND ;
					  suspense.nrunno_in = wellhist.nrunno AND ;
					  suspense.crectype = wellhist.crectype ;
				  WHERE &lcWhere2 ;
					  AND suspense.lManual = .F. ;
					  AND suspense.cownerid IN (SELECT  cid ;
													FROM SELECTED) ;
					  AND IIF(THISFORM.lPostedOwners, investor.lIntegGL = .F., .T.) ;
					  AND IIF(tlJIBHist, INLIST(suspense.crectype, 'J', 'P', 'R'), INLIST(suspense.crectype, 'P', 'R')) ;
					  AND IIF(tcGroup = '**', .T., suspense.cGroup = tcGroup) ;
				  INTO CURSOR suspchk1 READWRITE ;
				  ORDER BY cyear, CMONTH, suspense.cownerid, suspense.cProgCode, suspense.cTypeInv, suspense.cWellID, suspense.cTypeInt, suspense.cDirect, suspense.hyear, suspense.hperiod ;
				  GROUP BY cyear, CMONTH, suspense.cownerid, suspense.cProgCode, suspense.cTypeInv, suspense.cWellID, suspense.cTypeInt, suspense.cDirect, suspense.hyear, suspense.hperiod
		
		      SET TALK OFF
		      IF _TALLY > 0
		         SELECT disbchk1
		         APPEND FROM DBF('suspchk1')
		      ENDIF
		      SET TALK ON
			  SELECT  suspense.cownerid, ;
					  investor.cOwnName, ;
					  suspense.cWellID, ;
					  suspense.crectype, ;
					  IIF(tnType = 1, suspense.hperiod, CAST(THIS.GetFiscalPeriod(suspense.hDate) AS C(2))) AS CMONTH, ;
					  IIF(tnType = 1, suspense.hyear,   CAST(THIS.GetFiscalYear(suspense.hDate) AS C(4))) AS cyear, ;
					  SUM(suspense.nIncome) AS nIncome, ;
					  IIF(tlIncDirect, SUM(nOilRev), IIF(suspense.cDirect # 'O', IIF(suspense.cDirect # 'B', SUM(suspense.nOilRev), 000000.00), 000000.00)) AS nOilRev, ;
					  IIF(tlIncDirect, SUM(nGasRev), IIF(suspense.cDirect # 'G', IIF(suspense.cDirect # 'B', SUM(suspense.nGasRev + suspense.nFlatRate), 000000.00), 000000.00)) AS nGasRev, ;
					  SUM(suspense.nTrpRev + suspense.nMiscRev1 + suspense.nMiscRev2 + suspense.nOthRev + suspense.nFlatRate) AS nOthRev, ;
					  0.00 AS nTotBBL, ;
					  0.00 AS nTotMcf, ;
					  0.00 AS nTotProd, ;
					  suspense.nrevoil, ;
					  suspense.nrevgas, ;
					  suspense.cTypeInv, ;
					  suspense.cTypeInt, ;
					  suspense.cDirect, ;
					  suspense.hDate, ;
					  SUM(suspense.nExpense + ;
						  suspense.nTotale1 + ;
						  suspense.nTotale2 + ;
						  suspense.nTotale3 + ;
						  suspense.nTotale4 + ;
						  suspense.nTotale5 + ;
						  suspense.nTotaleA + ;
						  suspense.nTotaleB + ;
						  suspense.nPlugExp) AS nExpense, ;
					  SUM(suspense.nPlugExp) AS nPlugExp, ;
					  SUM(suspense.noiltax1 + suspense.noiltax2 + suspense.noiltax3 + suspense.noiltax4) AS nOilTax, ;
					  SUM(suspense.ngastax1 + suspense.ngastax2 + suspense.ngastax3 + suspense.ngastax4) AS nGasTax, ;
					  SUM(noiltax1) AS noiltax1, ;
					  SUM(noiltax2) AS noiltax2, ;
					  SUM(noiltax3) AS noiltax3, ;
					  SUM(noiltax4) AS noiltax4, ;
					  SUM(ngastax1) AS ngastax1, ;
					  SUM(ngastax2) AS ngastax2, ;
					  SUM(ngastax3) AS ngastax3, ;
					  SUM(ngastax4) AS ngastax4, ;
					  SUM(suspense.nothtax1 + suspense.nothtax2 + suspense.nothtax3 + suspense.nothtax4 + suspense.nTaxWith + suspense.nBackWith) AS nOthTax, ;
					  SUM(suspense.nNetCheck) AS nNetCheck, ;
					  SUM(suspense.nGather) AS nGather, ;
					  SUM(suspense.nCompress) AS nCompress, ;
					  suspense.hyear, ;
					  suspense.hperiod, ;
					  suspense.cProgCode, ;
					  wells.cWellName, ;
					  0.00 AS nCheckAmt ;
				  FROM suspense ;
				  JOIN wells ;
					  ON suspense.cWellID = wells.cWellID ;
				  JOIN investor ;
					  ON suspense.cownerid = investor.cownerid ;
				  WHERE &lcWhere2 ;
					  AND (suspense.lManual = .T. ;
						AND suspense.cRunYear_in + PADL(TRANSFORM(suspense.nrunno_in), 3, '0') NOT IN (SELECT  crunyear + PADL(TRANSFORM(nrunno), 3, '0') ;
																										   FROM sysctl ;
																										   WHERE EMPTY(cversion) ;
																											   AND lDisbMan = .T.)) ;
					  AND suspense.cownerid IN (SELECT  cid ;
													FROM SELECTED) ;
					  AND IIF(THISFORM.lPostedOwners, investor.lIntegGL = .F., .T.) ;
					  AND IIF(tlJIBHist, INLIST(suspense.crectype, 'J', 'P', 'R'), INLIST(suspense.crectype, 'P', 'R')) ;
					  AND IIF(tcGroup = '**', .T., suspense.cGroup = tcGroup) ;
				  INTO CURSOR suspchk2 READWRITE ;
				  ORDER BY cyear, CMONTH, suspense.cownerid, suspense.cProgCode, suspense.cTypeInv, suspense.cWellID, suspense.cTypeInt, suspense.cDirect, suspense.hyear, suspense.hperiod ;
				  GROUP BY cyear, CMONTH, suspense.cownerid, suspense.cProgCode, suspense.cTypeInv, suspense.cWellID, suspense.cTypeInt, suspense.cDirect, suspense.hyear, suspense.hperiod
		      SET TALK OFF
		      IF _TALLY > 0
		*  If it's a converted record, the percentages are all 100%, which throws off the units/owner calculation, so try
		*  and match back to a good record in disbchk1, and get their good interests for oil/gas off of that.
		         SELECT suspchk2
		         SCAN FOR nrevoil = 100 AND nrevgas = 100
		            SELECT suspchk1
		            LOCATE FOR suspchk1.cownerid == suspchk2.cownerid ;
		               AND suspchk1.cWellID = suspchk2.cWellID ;
		               AND suspchk1.cTypeInv = suspchk2.cTypeInv ;
		               AND suspchk1.cyear = suspchk2.cyear ;
		               AND suspchk1.CMONTH = suspchk2.CMONTH
		            IF FOUND()
		               m.nrevgas = suspchk1.nrevgas
		               m.nrevoil = suspchk1.nrevoil
		               m.nTotBBL = suspchk2.nTotBBL * (m.nrevoil / 100)
		               m.nTotMcf = suspchk2.nTotMcf * (m.nrevgas / 100)
		               SELECT suspchk2
		               REPLACE nTotBBL WITH m.nTotBBL, nTotMcf WITH m.nTotMcf
		            ENDIF
		         ENDSCAN
		         SELECT disbchk1
		         APPEND FROM DBF('suspchk2')
		      ENDIF
		
		      IF THISFORM.lPostedOwners
		         SET TALK ON
				 SELECT  suspense.cownerid, ;
						 investor.cOwnName, ;
						 suspense.cWellID, ;
						 suspense.crectype, ;
						 IIF(tnType = 1, suspense.hperiod, CAST(THIS.GetFiscalPeriod(suspense.hDate) AS C(2))) AS CMONTH, ;
						 IIF(tnType = 1, suspense.hyear,   CAST(THIS.GetFiscalYear(suspense.hDate) AS C(4))) AS cyear, ;
						 SUM(suspense.nIncome) AS nIncome, ;
						 IIF(tlIncDirect, SUM(nOilRev), IIF(suspense.cDirect # 'O', IIF(suspense.cDirect # 'B', SUM(suspense.nOilRev), 000000.00), 000000.00)) AS nOilRev, ;
						 IIF(tlIncDirect, SUM(nGasRev), IIF(suspense.cDirect # 'G', IIF(suspense.cDirect # 'B', SUM(suspense.nGasRev + suspense.nFlatRate), 000000.00), 000000.00)) AS nGasRev, ;
						 SUM(suspense.nTrpRev + suspense.nMiscRev1 + suspense.nMiscRev2 + suspense.nOthRev + suspense.nFlatRate) AS nOthRev, ;
						 IIF(tlIncDirect, SUM(wellhist.nTotBBL * (suspense.nrevoil / 100)), IIF(suspense.cDirect # 'O', IIF(suspense.cDirect # 'B', SUM(wellhist.nTotBBL * (suspense.nrevoil / 100)), 00000.00), 00000.00)) AS nTotBBL, ;
						 IIF(tlIncDirect, SUM(wellhist.nTotMcf * (suspense.nrevgas / 100)), IIF(suspense.cDirect # 'G', IIF(suspense.cDirect # 'B', SUM(wellhist.nTotMcf * (suspense.nrevgas / 100)), 00000.00), 00000.00)) AS nTotMcf, ;
						 SUM(wellhist.nTotProd * (suspense.nrevoth / 100)) AS nTotProd, ;
						 suspense.nrevoil, ;
						 suspense.nrevgas, ;
						 suspense.cTypeInv, ;
						 suspense.cTypeInt, ;
						 suspense.cDirect, ;
						 suspense.hDate, ;
						 SUM(suspense.nExpense + ;
							 suspense.nTotale1 + ;
							 suspense.nTotale2 + ;
							 suspense.nTotale3 + ;
							 suspense.nTotale4 + ;
							 suspense.nTotale5 + ;
							 suspense.nTotaleA + ;
							 suspense.nTotaleB + ;
							 suspense.nPlugExp) AS nExpense, ;
						 SUM(suspense.nPlugExp) AS nPlugExp, ;
						 SUM(suspense.noiltax1 + suspense.noiltax2 + suspense.noiltax3 + suspense.noiltax4) AS nOilTax, ;
						 SUM(suspense.ngastax1 + suspense.ngastax2 + suspense.ngastax3 + suspense.ngastax4) AS nGasTax, ;
						 SUM(noiltax1) AS noiltax1, ;
						 SUM(noiltax2) AS noiltax2, ;
						 SUM(noiltax3) AS noiltax3, ;
						 SUM(noiltax4) AS noiltax4, ;
						 SUM(ngastax1) AS ngastax1, ;
						 SUM(ngastax2) AS ngastax2, ;
						 SUM(ngastax3) AS ngastax3, ;
						 SUM(ngastax4) AS ngastax4, ;
						 SUM(suspense.nothtax1 + suspense.nothtax2 + suspense.nothtax3 + suspense.nothtax4 + suspense.nTaxWith + suspense.nBackWith) AS nOthTax, ;
						 SUM(suspense.nNetCheck) AS nNetCheck, ;
						 SUM(suspense.nGather) AS nGather, ;
						 SUM(suspense.nCompress) AS nCompress, ;
						 suspense.hyear, ;
						 suspense.hperiod, ;
						 suspense.cProgCode, ;
						 wells.cWellName, ;
						 0.00 AS nCheckAmt ;
					 FROM suspense ;
					 JOIN wells ;
						 ON suspense.cWellID = wells.cWellID ;
					 JOIN investor ;
						 ON suspense.cownerid = investor.cownerid ;
					 JOIN wellhist ;
						 ON suspense.cWellID = wellhist.cWellID AND ;
						 suspense.lManual = .F.  AND ;
						 suspense.hyear + suspense.hperiod = wellhist.hyear + wellhist.hperiod AND ;
						 suspense.cRunYear_in = wellhist.crunyear AND ;
						 suspense.nrunno_in = wellhist.nrunno AND ;
						 suspense.crectype = wellhist.crectype ;
					 WHERE &lcWhereP2 ;
						 AND suspense.lManual = .F. ;
						 AND suspense.cownerid IN (SELECT  cid ;
													   FROM SELECTED) ;
						 AND investor.lIntegGL = .T. ;
						 AND IIF(tlJIBHist, INLIST(suspense.crectype, 'J', 'P', 'R'), INLIST(suspense.crectype, 'P', 'R')) ;
						 AND IIF(tcGroup = '**', .T., suspense.cGroup = tcGroup) ;
					 INTO CURSOR suspchkP1 READWRITE ;
					 ORDER BY cyear, CMONTH, suspense.cownerid, suspense.cProgCode, suspense.cTypeInv, suspense.cWellID, suspense.cTypeInt, suspense.cDirect, suspense.hyear, suspense.hperiod ;
					 GROUP BY cyear, CMONTH, suspense.cownerid, suspense.cProgCode, suspense.cTypeInv, suspense.cWellID, suspense.cTypeInt, suspense.cDirect, suspense.hyear, suspense.hperiod
		         SET TALK OFF
		         IF _TALLY > 0
		            SELECT disbchk1
		            APPEND FROM DBF('suspchkP1')
		         ENDIF
		         SET TALK ON
				 SELECT  suspense.cownerid, ;
						 investor.cOwnName, ;
						 suspense.cWellID, ;
						 suspense.crectype, ;
						 IIF(tnType = 1, suspense.hperiod, CAST(THIS.GetFiscalPeriod(suspense.hDate) AS C(2))) AS CMONTH, ;
						 IIF(tnType = 1, suspense.hyear,   CAST(THIS.GetFiscalYear(suspense.hDate) AS C(4))) AS cyear, ;
						 SUM(suspense.nIncome) AS nIncome, ;
						 IIF(tlIncDirect, SUM(nOilRev), IIF(suspense.cDirect # 'O', IIF(suspense.cDirect # 'B', SUM(suspense.nOilRev), 000000.00), 000000.00)) AS nOilRev, ;
						 IIF(tlIncDirect, SUM(nGasRev), IIF(suspense.cDirect # 'G', IIF(suspense.cDirect # 'B', SUM(suspense.nGasRev + suspense.nFlatRate), 000000.00), 000000.00)) AS nGasRev, ;
						 SUM(suspense.nTrpRev + suspense.nMiscRev1 + suspense.nMiscRev2 + suspense.nOthRev + suspense.nFlatRate) AS nOthRev, ;
						 0.00 AS nTotBBL, ;
						 0.00 AS nTotMcf, ;
						 0.00 AS nTotProd, ;
						 suspense.nrevoil, ;
						 suspense.nrevgas, ;
						 suspense.cTypeInv, ;
						 suspense.cTypeInt, ;
						 suspense.cDirect, ;
						 suspense.hDate, ;
						 SUM(suspense.nExpense + ;
							 suspense.nTotale1 + ;
							 suspense.nTotale2 + ;
							 suspense.nTotale3 + ;
							 suspense.nTotale4 + ;
							 suspense.nTotale5 + ;
							 suspense.nTotaleA + ;
							 suspense.nTotaleB + ;
							 suspense.nPlugExp) AS nExpense, ;
						 SUM(suspense.nPlugExp) AS nPlugExp, ;
						 SUM(suspense.noiltax1 + suspense.noiltax2 + suspense.noiltax3 + suspense.noiltax4) AS nOilTax, ;
						 SUM(suspense.ngastax1 + suspense.ngastax2 + suspense.ngastax3 + suspense.ngastax4) AS nGasTax, ;
						 SUM(noiltax1) AS noiltax1, ;
						 SUM(noiltax2) AS noiltax2, ;
						 SUM(noiltax3) AS noiltax3, ;
						 SUM(noiltax4) AS noiltax4, ;
						 SUM(ngastax1) AS ngastax1, ;
						 SUM(ngastax2) AS ngastax2, ;
						 SUM(ngastax3) AS ngastax3, ;
						 SUM(ngastax4) AS ngastax4, ;
						 SUM(suspense.nothtax1 + suspense.nothtax2 + suspense.nothtax3 + suspense.nothtax4 + suspense.nTaxWith + suspense.nBackWith) AS nOthTax, ;
						 SUM(suspense.nNetCheck) AS nNetCheck, ;
						 SUM(suspense.nGather) AS nGather, ;
						 SUM(suspense.nCompress) AS nCompress, ;
						 suspense.hyear, ;
						 suspense.hperiod, ;
						 suspense.cProgCode, ;
						 wells.cWellName, ;
						 0.00 AS nCheckAmt ;
					 FROM suspense ;
					 JOIN wells ;
						 ON suspense.cWellID = wells.cWellID ;
					 JOIN investor ;
						 ON suspense.cownerid = investor.cownerid ;
					 WHERE &lcWhereP2 ;
						 AND (suspense.lManual = .T. ;
						   AND suspense.cRunYear_in + PADL(TRANSFORM(suspense.nrunno_in), 3, '0') NOT IN (SELECT  crunyear + PADL(TRANSFORM(nrunno), 3, '0') ;
																											  FROM sysctl ;
																											  WHERE EMPTY(cversion) ;
																												  AND lDisbMan = .T.)) ;
						 AND suspense.cownerid IN (SELECT  cid ;
													   FROM SELECTED) ;
						 AND investor.lIntegGL = .T. ;
						 AND IIF(tlJIBHist, INLIST(suspense.crectype, 'J', 'P', 'R'), INLIST(suspense.crectype, 'P', 'R')) ;
						 AND IIF(tcGroup = '**', .T., suspense.cGroup = tcGroup) ;
					 INTO CURSOR suspchkP2 READWRITE ;
					 ORDER BY cyear, CMONTH, suspense.cownerid, suspense.cProgCode, suspense.cTypeInv, suspense.cWellID, suspense.cTypeInt, suspense.cDirect, suspense.hyear, suspense.hperiod ;
					 GROUP BY cyear, CMONTH, suspense.cownerid, suspense.cProgCode, suspense.cTypeInv, suspense.cWellID, suspense.cTypeInt, suspense.cDirect, suspense.hyear, suspense.hperiod
		         SET TALK OFF
		         IF _TALLY > 0
		*  If it's a converted record, the percentages are all 100%, which throws off the units/owner calculation, so try
		*  and match back to a good record in disbchk1, and get their good interests for oil/gas off of that.
		            SELECT suspchkP2
		            SCAN FOR nrevoil = 100 AND nrevgas = 100
		               SELECT suspchkP1
		               LOCATE FOR suspchkP1.cownerid == suspchkP2.cownerid ;
		                  AND suspchkP1.cWellID = suspchkP2.cWellID ;
		                  AND suspchkP1.cTypeInv = suspchkP2.cTypeInv ;
		                  AND suspchkP1.cyear = suspchkP2.cyear ;
		                  AND suspchkP1.CMONTH = suspchkP2.CMONTH
		               IF FOUND()
		                  m.nrevgas = suspchkP1.nrevgas
		                  m.nrevoil = suspchkP1.nrevoil
		                  m.nTotBBL = suspchkP2.nTotBBL * (m.nrevoil / 100)
		                  m.nTotMcf = suspchkP2.nTotMcf * (m.nrevgas / 100)
		                  SELECT suspchkP2
		                  REPLACE nTotBBL WITH m.nTotBBL, nTotMcf WITH m.nTotMcf
		               ENDIF
		            ENDSCAN
		            SELECT disbchk1
		            APPEND FROM DBF('suspchkP2')
		         ENDIF
		      ENDIF
		   ENDIF
		
		
		   IF tlIncPmts
		      IF THISFORM.chkincSusp.VALUE
				 SELECT  suspense.cownerid, ;
						 investor.cOwnName, ;
						 suspense.cWellID, ;
						 IIF(tnType = 1, suspense.hperiod, CAST(THIS.GetFiscalPeriod(suspense.hDate) AS C(2))) AS CMONTH, ;
						 IIF(tnType = 1, suspense.hyear,   CAST(THIS.GetFiscalYear(suspense.hDate) AS C(4))) AS cyear, ;
						 SUM(suspense.nIncome) AS nIncome, ;
						 IIF(tlIncDirect, SUM(nOilRev), IIF(suspense.cDirect # 'O', IIF(suspense.cDirect # 'B', SUM(suspense.nOilRev), 000000.00), 000000.00)) AS nOilRev, ;
						 IIF(tlIncDirect, SUM(nGasRev), IIF(suspense.cDirect # 'G', IIF(suspense.cDirect # 'B', SUM(suspense.nGasRev + suspense.nFlatRate), 000000.00), 000000.00)) AS nGasRev, ;
						 SUM(suspense.nTrpRev + suspense.nMiscRev1 + suspense.nMiscRev2 + suspense.nOthRev + suspense.nFlatRate) AS nOthRev, ;
						 0.00 AS nTotBBL, ;
						 0.00 AS nTotMcf, ;
						 0.00 AS nTotProd, ;
						 suspense.nrevoil, ;
						 suspense.nrevgas, ;
						 suspense.cTypeInv, ;
						 suspense.cTypeInt, ;
						 suspense.cDirect, ;
						 suspense.hDate, ;
						 suspense.crectype, ;
						 SUM(suspense.nExpense + ;
							 suspense.nTotale1 + ;
							 suspense.nTotale2 + ;
							 suspense.nTotale3 + ;
							 suspense.nTotale4 + ;
							 suspense.nTotale5 + ;
							 suspense.nTotaleA + ;
							 suspense.nTotaleB + ;
							 suspense.nPlugExp) AS nExpense, ;
						 SUM(suspense.nPlugExp) AS nPlugExp, ;
						 SUM(suspense.noiltax1 + suspense.noiltax2 + suspense.noiltax3 + suspense.noiltax4) AS nOilTax, ;
						 SUM(suspense.ngastax1 + suspense.ngastax2 + suspense.ngastax3 + suspense.ngastax4) AS nGasTax, ;
						 SUM(noiltax1) AS noiltax1, ;
						 SUM(noiltax2) AS noiltax2, ;
						 SUM(noiltax3) AS noiltax3, ;
						 SUM(noiltax4) AS noiltax4, ;
						 SUM(ngastax1) AS ngastax1, ;
						 SUM(ngastax2) AS ngastax2, ;
						 SUM(ngastax3) AS ngastax3, ;
						 SUM(ngastax4) AS ngastax4, ;
						 SUM(suspense.nothtax1 + suspense.nothtax2 + suspense.nothtax3 + suspense.nothtax4 + suspense.nTaxWith + suspense.nBackWith) AS nOthTax, ;
						 SUM(suspense.nNetCheck) AS nNetCheck, ;
						 SUM(suspense.nGather) AS nGather, ;
						 SUM(suspense.nCompress) AS nCompress, ;
						 suspense.hyear, ;
						 suspense.hperiod, ;
						 suspense.cProgCode, ;
						 wells.cWellName, ;
						 0.00 AS nCheckAmt ;
					 FROM suspense ;
					 JOIN wells ;
						 ON suspense.cWellID = wells.cWellID ;
					 JOIN investor ;
						 ON suspense.cownerid = investor.cownerid ;
					 WHERE &lcWhereP2 ;
						 AND suspense.lManual = .T. ;
						 AND suspense.cownerid IN (SELECT  cid ;
													   FROM SELECTED) ;
						 AND investor.lIntegGL = .F. ;
						 AND IIF(tcGroup = '**', .T., suspense.cGroup = tcGroup) ;
						 AND suspense.crectype = 'P' ;
					 INTO CURSOR susppmts  ;
					 ORDER BY cyear, CMONTH, suspense.cownerid, suspense.cProgCode, suspense.cTypeInv, suspense.cWellID, suspense.cTypeInt, suspense.cDirect, suspense.hyear, suspense.hperiod ;
					 GROUP BY cyear, CMONTH, suspense.cownerid, suspense.cProgCode, suspense.cTypeInv, suspense.cWellID, suspense.cTypeInt, suspense.cDirect, suspense.hyear, suspense.hperiod
		
		         SELECT disbchk1
		         APPEND FROM DBF('susppmts')
		      ENDIF
		
			  SELECT  disbhist.cownerid, ;
					  investor.cOwnName, ;
					  disbhist.cWellID, ;
					  IIF(tnType = 1, disbhist.hperiod, CAST(THIS.GetFiscalPeriod(disbhist.hDate) AS C(2))) AS CMONTH, ;
					  IIF(tnType = 1, disbhist.hyear,   CAST(THIS.GetFiscalYear(disbhist.hDate) AS C(4))) AS cyear, ;
					  SUM(disbhist.nIncome) AS nIncome, ;
					  IIF(tlIncDirect, SUM(nOilRev), IIF(disbhist.cDirect # 'O', IIF(disbhist.cDirect # 'B', SUM(disbhist.nOilRev), 000000.00), 000000.00)) AS nOilRev, ;
					  IIF(tlIncDirect, SUM(nGasRev), IIF(disbhist.cDirect # 'G', IIF(disbhist.cDirect # 'B', SUM(disbhist.nGasRev + disbhist.nFlatRate), 000000.00), 000000.00)) AS nGasRev, ;
					  SUM(disbhist.nTrpRev + disbhist.nMiscRev1 + disbhist.nMiscRev2 + disbhist.nOthRev + disbhist.nFlatRate) AS nOthRev, ;
					  0.00 AS nTotBBL, ;
					  0.00 AS nTotMcf, ;
					  0.00 AS nTotProd, ;
					  ownpcts.nrevoil, ;
					  ownpcts.nrevgas, ;
					  disbhist.cTypeInv, ;
					  disbhist.cTypeInt, ;
					  disbhist.cDirect, ;
					  disbhist.hDate, ;
					  disbhist.crectype, ;
					  SUM(disbhist.nExpense + ;
						  disbhist.nTotale1 + ;
						  disbhist.nTotale2 + ;
						  disbhist.nTotale3 + ;
						  disbhist.nTotale4 + ;
						  disbhist.nTotale5 + ;
						  disbhist.nTotaleA + ;
						  disbhist.nTotaleB + ;
						  disbhist.nPlugExp) AS nExpense, ;
					  SUM(disbhist.nPlugExp) AS nPlugExp, ;
					  SUM(disbhist.noiltax1 + disbhist.noiltax2 + disbhist.noiltax3 + disbhist.noiltax4) AS nOilTax, ;
					  SUM(disbhist.ngastax1 + disbhist.ngastax2 + disbhist.ngastax3 + disbhist.ngastax4) AS nGasTax, ;
					  SUM(noiltax1) AS noiltax1, ;
					  SUM(noiltax2) AS noiltax2, ;
					  SUM(noiltax3) AS noiltax3, ;
					  SUM(noiltax4) AS noiltax4, ;
					  SUM(ngastax1) AS ngastax1, ;
					  SUM(ngastax2) AS ngastax2, ;
					  SUM(ngastax3) AS ngastax3, ;
					  SUM(ngastax4) AS ngastax4, ;
					  SUM(disbhist.nothtax1 + disbhist.nothtax2 + disbhist.nothtax3 + disbhist.nothtax4 + disbhist.nTaxWith + disbhist.nBackWith) AS nOthTax, ;
					  SUM(disbhist.nNetCheck) AS nNetCheck, ;
					  SUM(disbhist.nGather) AS nGather, ;
					  SUM(disbhist.nCompress) AS nCompress, ;
					  disbhist.hyear, ;
					  disbhist.hperiod, ;
					  disbhist.cProgCode, ;
					  wells.cWellName, ;
					  0.00 AS nCheckAmt ;
				  FROM disbhist ;
				  LEFT OUTER JOIN ownpcts ;
					  ON disbhist.ciddisb == ownpcts.ciddisb ;
				  JOIN wells ;
					  ON disbhist.cWellID = wells.cWellID ;
				  JOIN investor ;
					  ON disbhist.cownerid = investor.cownerid ;
				  WHERE &lcWhereP1 ;
					  AND disbhist.lManual = .T. ;
					  AND disbhist.cownerid IN (SELECT  cid ;
													FROM SELECTED) ;
					  AND investor.lIntegGL = .F. ;
					  AND IIF(tcGroup = '**', .T., disbhist.cGroup = tcGroup) ;
					  AND disbhist.crectype = 'P' ;
				  INTO CURSOR disbpmts  ;
				  ORDER BY cyear, CMONTH, disbhist.cownerid, disbhist.cProgCode, disbhist.cTypeInv, disbhist.cWellID, disbhist.cTypeInt, disbhist.cDirect, disbhist.hyear, disbhist.hperiod ;
				  GROUP BY cyear, CMONTH, disbhist.cownerid, disbhist.cProgCode, disbhist.cTypeInv, disbhist.cWellID, disbhist.cTypeInt, disbhist.cDirect, disbhist.hyear, disbhist.hperiod
		
		      SELECT disbchk1
		      APPEND FROM DBF('disbpmts')
		   ENDIF
		
		   SET TALK ON
		   SELECT  cownerid, ;
				   cOwnName, ;
				   cWellID, ;
				   crectype, ;
				   cyear,;
				   CMONTH, ;
				   SUM(nIncome) AS nIncome, ;
				   SUM(nTotBBL) AS nTotBBL, ;
				   SUM(nTotMcf) AS nTotMcf, ;
				   SUM(nTotProd) AS nTotProd, ;
				   SUM(nOilRev) AS nOilRev, ;
				   SUM(nGasRev) AS nGasRev, ;
				   hDate, ;
				   SUM(nOthRev) AS nOthRev, ;
				   cTypeInv, ;
				   cTypeInt, ;
				   cDirect, ;
				   SUM(nExpense) AS nExpense, ;
				   SUM(nPlugExp) AS nPlugExp, ;
				   SUM(nOilTax + nGasTax + nOthTax) AS nSevTaxes, ;
				   SUM(nNetCheck) AS nNetCheck, ;
				   SUM(nGather) AS nGather, ;
				   SUM(noiltax1) AS noiltax1, ;
				   SUM(noiltax2) AS noiltax2, ;
				   SUM(noiltax3) AS noiltax3, ;
				   SUM(noiltax4) AS noiltax4, ;
				   SUM(ngastax1) AS ngastax1, ;
				   SUM(ngastax2) AS ngastax2, ;
				   SUM(ngastax3) AS ngastax3, ;
				   SUM(ngastax4) AS ngastax4, ;
				   SUM(nCompress) AS nCompress, ;
				   IIF(tlByMonth, hyear, '') AS hyear, ;
				   IIF(tlByMonth, hperiod, '') AS hperiod, ;
				   cProgCode, ;
				   cWellName, ;
				   nCheckAmt ;
			   FROM disbchk1 ;
			   WHERE IIF(tlIncPmts, .T., crectype # 'P') ;
			   INTO CURSOR disbchk READWRITE ;
			   ORDER BY cyear, CMONTH, cownerid, cProgCode, cTypeInv, cWellID, hyear, hperiod ;
			   GROUP BY cyear, CMONTH, cownerid, cProgCode, cTypeInv, cWellID, hyear, hperiod
		
		   IF tlByProgram
		      INDEX ON cProgCode + cyear + CMONTH + cownerid TAG progs
		   ENDIF
		
		   SET TALK OFF
		CATCH TO loError
		   llReturn = .F.
		   DO errorlog WITH 'BuildDataMonth', loError.LINENO, 'Yearly Disb Summary', loError.ERRORNO, loError.MESSAGE
		   MESSAGEBOX('Unable to process the report at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		        'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		RETURN llReturn
		
		
	ENDPROC

	PROCEDURE builddatasummary
		*:Global nTotBBL, nTotMcf, nrevgas, nrevoil, tcGroup, tcOwner1, tcOwner2, tcPeriod1, tcPeriod2
		*:Global tcYear1, tcYear2, tdDate1, tdDate2, tlActual, tlByMonth, tlByProgram, tlIncDirect
		*:Global tlJIBHist, tlNoPrior, tlOwnPage, tnType
		LOCAL lcWhere1, lcWhere2
		LOCAL llReturn, loError
		
		llReturn = .T.
		
		TRY
		   tcOwner1    = THISFORM.swrptlook1.txtBegID.VALUE
		   tcOwner2    = THISFORM.swrptlook1.txtEndID.VALUE
		   tcYear1     = THISFORM.swYear1.VALUE
		   tcYear2     = THISFORM.swYear2.VALUE
		   tcPeriod1   = THISFORM.swPeriod1.VALUE
		   tcPeriod2   = THISFORM.swperiod2.VALUE
		   tlOwnPage   = THISFORM.chkOwnPage.VALUE
		   tlNoPrior   = .F.
		   tcGroup     = LEFT(THISFORM.swgroup1.VALUE, 2)
		   tdDate1     = THISFORM.txtbegdate.VALUE
		   tdDate2     = THISFORM.txtenddate.VALUE
		   tnType      = THISFORM.opgRange.VALUE
		   tlByMonth   = THISFORM.chkByMonth.VALUE
		   tlByProgram = THISFORM.chkByProgram.VALUE
		   tlIncDirect = THISFORM.chkincdirect.VALUE
		   tlJIBHist   = THISFORM.chkjibhistory.VALUE
		   tlActual    = THISFORM.chklActual.VALUE
		   tlIncPmts   = THISFORM.chkincPayments.VALUE
		   llSelected  = THISFORM.chkselected.VALUE
		
		   IF NOT llSelected
		      SELECT cownerid AS cid FROM investor ;
		         INTO CURSOR SELECTED ;
		         WHERE BETWEEN(cownerid,tcOwner1,tcOwner2) ;
		         ORDER BY cid
		   ENDIF
		   
		   lcYear = thisform.cboArchived.Value
		   IF NOT EMPTY(lcYear)
		      llArchived = .t.
		      lcJoin = "IIF(EMPTY(disbhist.cRunYear_i), disbhist.crunyear = wellhist.crunyear " + ;
		               "AND disbhist.nrunno = wellhist.nrunno, disbhist.cRunYear_i = wellhist.crunyear " + ;
		               "AND disbhist.nrunno_in = wellhist.nrunno) AND " + ;
		               "disbhist.crectype = wellhist.crectype "
		      lcWhereIn = "disbhist.cRunYear_i + PADL(TRANSFORM(disbhist.nrunno_in), 3, '0') NOT IN (SELECT  crunyear + PADL(TRANSFORM(nrunno), 3, '0')"
		   ELSE
		      llArchived = .f.
		      lcJoin = "IIF(EMPTY(disbhist.cRunYear_in), disbhist.crunyear = wellhist.crunyear " + ;
		               "AND disbhist.nrunno = wellhist.nrunno, disbhist.cRunYear_in = wellhist.crunyear " + ;
		               "AND disbhist.nrunno_in = wellhist.nrunno) AND " + ;
		               "disbhist.crectype = wellhist.crectype "
		      lcWhereIn = "disbhist.cRunYear_in + PADL(TRANSFORM(disbhist.nrunno_in), 3, '0') NOT IN (SELECT  crunyear + PADL(TRANSFORM(nrunno), 3, '0')"
		   ENDIF 
		
		   DO CASE
		      CASE tnType = 1
		         THISFORM.ctitle2 = 'By Production Period Range: ' + tcYear1 + '/' + tcPeriod1 + ' thru ' + tcYear2 + '/' + tcPeriod2
		         lcWhere1         = 'between(disbhist.hyear+disbhist.hperiod,tcYear1+tcPeriod1,tcYear2+tcPeriod2)'
		         lcWhere1a        = 'between(disbhist.hyear+disbhist.hperiod,tcYear1+tcPeriod1,tcYear2+tcPeriod2)'
		         lcWhere2         = 'between(suspense.hyear+suspense.hperiod,tcYear1+tcPeriod1,tcYear2+tcPeriod2)'
		         lcWhereP1        = 'between(disbhist.hyear+disbhist.hperiod,tcYear1+tcPeriod1,tcYear2+tcPeriod2)'
		         lcWhereP2        = 'between(suspense.hyear+suspense.hperiod,tcYear1+tcPeriod1,tcYear2+tcPeriod2)'
		         lcWherePmtsD     = 'between(disbhist.hyear+disbhist.hperiod,tcYear1+tcPeriod1,tcYear2+tcPeriod2)'
		         lcWherePmtsS     = 'between(suspense.hyear+suspense.hperiod,tcYear1+tcPeriod1,tcYear2+tcPeriod2)'
		      CASE tnType = 2
		         THISFORM.ctitle2 = 'By Accounting Year: ' + tcYear1
		         lcWhere1         = "(disbhist.cRunYear + PADL(TRANSFORM(disbhist.nrunno), 3, '0')+disbhist.crectype+disbhist.cgroup IN " + ;
		            "(SELECT  crunyear + PADL(TRANSFORM(nrunno), 3, '0')+ctypeclose+cgroup FROM sysctl WHERE YEAR(dacctdate) = VAL(tcYear1)))"
		         lcWhere1a        = "(disbhist.cRunYear + PADL(TRANSFORM(disbhist.nrunno), 3, '0')+disbhist.cgroup IN " + ;
		            "(SELECT  crunyear + PADL(TRANSFORM(nrunno), 3, '0')+cgroup FROM sysctl WHERE YEAR(dacctdate) = VAL(tcYear1) and ctypeclose='R'))"
		         lcWhere2         = "cRunYear_in+PADL(TRANSFORM(nrunno_in),3,'0')+suspense.crectype+suspense.cgroup IN " + ;
		            "(SELECT crunyear+PADL(TRANSFORM(nrunno),3,'0')+ctypeclose+cgroup FROM sysctl WHERE YEAR(dacctdate)=VAL(tcYear1) and lDisbMan) "
		         lcWhereP1        = "year(disbhist.hdate) = VAL(tcYear1)"
		         lcWhereP2        = "year(suspense.hdate) = VAL(tcYear1)"
		         lcWherePmtsD     = "year(disbhist.hdate) = VAL(tcYear1)"
		         lcWherePmtsS     = "year(suspense.hdate) = VAL(tcYear1)"
		      CASE tnType = 3
		         THISFORM.ctitle2 = 'By Date Range: ' + DTOC(tdDate1) + '-' + DTOC(tdDate2)
		         lcWhere1         = "((disbhist.cRunYear + PADL(TRANSFORM(disbhist.nrunno), 3, '0')+disbhist.crectype+disbhist.cgroup IN " + ;
		            "(SELECT  crunyear + PADL(TRANSFORM(nrunno), 3, '0')+ctypeclose+cgroup FROM sysctl WHERE BETWEEN(dacctdate,tdDate1,tdDate2)))  " + ;
		            "OR IIF(disbhist.lManual,BETWEEN(disbhist.hdate,tdDate1,tdDate2),disbhist.cgroup='##'))"
		         lcWhere1a        = "((disbhist.cRunYear + PADL(TRANSFORM(disbhist.nrunno), 3, '0')+disbhist.cgroup IN " + ;
		            "(SELECT  crunyear + PADL(TRANSFORM(nrunno), 3, '0')+cgroup FROM sysctl WHERE BETWEEN(dacctdate,tdDate1,tdDate2) and ctypeclose='R'))  " + ;
		            "OR IIF(disbhist.lManual,BETWEEN(disbhist.hdate,tdDate1,tdDate2),disbhist.cgroup='##'))"
		         lcWhere2         = "cRunYear_in+PADL(TRANSFORM(nrunno_in),3,'0')+suspense.crectype+suspense.cgroup IN " + ;
		            "(SELECT crunyear+PADL(TRANSFORM(nrunno),3,'0')+ctypeclose+cgroup FROM sysctl WHERE BETWEEN(dacctdate,tdDate1,tdDate2) and lDisbMan) "
		         lcWhereP1        = "between(disbhist.hdate,tdDate1,tdDate2)"
		         lcWhereP2        = "between(suspense.hdate,tdDate1,tdDate2)"
		   ENDCASE
		
		   * Group by time period
		   SET TALK ON
		   SELECT  disbhist.cownerid, ;
		      investor.cOwnName, ;
		      disbhist.cWellID, ;
		      SUM(disbhist.nIncome) AS nIncome, ;
		      IIF(tlIncDirect, SUM(nOilRev), IIF(disbhist.cDirect <> 'O', ;
		      IIF(disbhist.cDirect <> 'B', SUM(disbhist.nOilRev), 000000.00), 000000.00)) AS nOilRev, ;
		      IIF(tlIncDirect, SUM(nGasRev), IIF(disbhist.cDirect <> 'G', ;
		      IIF(disbhist.cDirect <> 'B', SUM(disbhist.nGasRev), 000000.00), 000000.00)) AS nGasRev, ;
		      SUM(disbhist.nTrpRev + disbhist.nMiscRev1 + disbhist.nMiscRev2 + disbhist.nOthRev + disbhist.nFlatRate) AS nOthRev, ;
		      IIF(tlIncDirect, SUM(wellhist.nTotBBL * (ownpcts.nrevoil / 100)), ;
		      IIF(disbhist.cDirect <> 'O', IIF(disbhist.cDirect <> 'B', SUM(wellhist.nTotBBL * (ownpcts.nrevoil / 100)), 00000.00), 00000.00)) AS nTotBBL, ;
		      IIF(tlIncDirect, SUM(wellhist.nTotMcf * (ownpcts.nrevgas / 100)), ;
		      IIF(disbhist.cDirect <> 'G', IIF(disbhist.cDirect <> 'B', SUM(wellhist.nTotMcf * (ownpcts.nrevgas / 100)), 00000.00), 00000.00)) AS nTotMcf, ;
		      SUM(wellhist.nTotProd * (ownpcts.nrevoth / 100)) AS nTotProd, ;
		      ownpcts.nrevoil, ;
		      ownpcts.nrevgas, ;
		      disbhist.cTypeInv, ;
		      disbhist.cTypeInt, ;
		      disbhist.cDirect, ;
		      disbhist.hDate, ;
		      disbhist.crectype, ;
		      SUM(disbhist.nExpense + ;
		      disbhist.nTotale1 + ;
		      disbhist.nTotale2 + ;
		      disbhist.nTotale3 + ;
		      disbhist.nTotale4 + ;
		      disbhist.nTotale5 + ;
		      disbhist.nTotaleA + ;
		      disbhist.nTotaleB + ;
		      disbhist.nPlugExp) AS nExpense, ;
		      SUM(disbhist.nPlugExp) AS nPlugExp, ;
		      SUM(disbhist.noiltax1 + disbhist.noiltax2 + disbhist.noiltax3 + disbhist.noiltax4) AS nOilTax, ;
		      SUM(disbhist.ngastax1 + disbhist.ngastax2 + disbhist.ngastax3 + disbhist.ngastax4) AS nGasTax, ;
		      SUM(noiltax1) AS noiltax1, ;
		      SUM(noiltax2) AS noiltax2, ;
		      SUM(noiltax3) AS noiltax3, ;
		      SUM(noiltax4) AS noiltax4, ;
		      SUM(ngastax1) AS ngastax1, ;
		      SUM(ngastax2) AS ngastax2, ;
		      SUM(ngastax3) AS ngastax3, ;
		      SUM(ngastax4) AS ngastax4, ;
		      SUM(disbhist.nothtax1 + disbhist.nothtax2 + disbhist.nothtax3 + disbhist.nothtax4 + disbhist.nTaxWith + disbhist.nBackWith) AS nOthTax, ;
		      SUM(disbhist.nNetCheck) AS nNetCheck, ;
		      SUM(disbhist.nGather)  AS nGather, ;
		      SUM(disbhist.nCompress) AS nCompress, ;
		      disbhist.hyear, ;
		      disbhist.hperiod, ;
		      disbhist.cProgCode, ;
		      wells.cWellName, ;
		      0.00  AS nCheckAmt ;
		      FROM disbhist ;
		      LEFT OUTER JOIN ownpcts ;
		      ON disbhist.ciddisb == ownpcts.ciddisb ;
		      JOIN wells ;
		      ON disbhist.cWellID = wells.cWellID ;
		      JOIN investor ;
		      ON disbhist.cownerid = investor.cownerid ;
		      LEFT OUTER JOIN wellhist ;
		      ON disbhist.cWellID = wellhist.cWellID AND ;
		      disbhist.lManual = .F. AND ;
		      disbhist.hyear + disbhist.hperiod = wellhist.hyear + wellhist.hperiod AND ;
		      &lcJoin ;
		      WHERE &lcWhere1 ;
		      AND disbhist.lManual = .F. ;
		      AND disbhist.cownerid IN (SELECT cid FROM SELECTED );
		      AND IIF(THISFORM.lPostedOwners, investor.lIntegGL = .F., .T.) ;
		      AND IIF(tlJIBHist, INLIST(disbhist.crectype, 'J', 'P', 'R'), INLIST(disbhist.crectype, 'P', 'R')) ;
		      AND IIF(tcGroup = '**', .T., disbhist.cGroup = tcGroup) ;
		      INTO CURSOR disbchk1 READWRITE ;
		      ORDER BY disbhist.hyear, disbhist.hperiod, disbhist.cownerid, disbhist.cProgCode, disbhist.cTypeInv, disbhist.cWellID, disbhist.cTypeInt, disbhist.cDirect  ;
		      GROUP BY disbhist.hyear, disbhist.hperiod, disbhist.cownerid, disbhist.cProgCode, disbhist.cTypeInv, disbhist.cWellID, disbhist.cTypeInt, disbhist.cDirect
		
		   SELECT  disbhist.cownerid, ;
		      investor.cOwnName, ;
		      disbhist.cWellID, ;
		      SUM(disbhist.nIncome) AS nIncome, ;
		      IIF(tlIncDirect, SUM(nOilRev), IIF(disbhist.cDirect <> 'O', IIF(disbhist.cDirect <> 'B', SUM(disbhist.nOilRev), 000000.00), 000000.00)) AS nOilRev, ;
		      IIF(tlIncDirect, SUM(nGasRev), IIF(disbhist.cDirect <> 'G', IIF(disbhist.cDirect <> 'B', SUM(disbhist.nGasRev), 000000.00), 000000.00)) AS nGasRev, ;
		      SUM(disbhist.nTrpRev + disbhist.nMiscRev1 + disbhist.nMiscRev2 + disbhist.nOthRev + disbhist.nFlatRate) AS nOthRev, ;
		      0.00 AS nTotBBL, ;
		      0.00 AS nTotMcf, ;
		      0.00 AS nTotProd, ;
		      ownpcts.nrevoil, ;
		      ownpcts.nrevgas, ;
		      disbhist.cTypeInv, ;
		      disbhist.cTypeInt, ;
		      disbhist.cDirect, ;
		      disbhist.hDate, ;
		      disbhist.crectype, ;
		      SUM(disbhist.nExpense + ;
		      disbhist.nTotale1 + ;
		      disbhist.nTotale2 + ;
		      disbhist.nTotale3 + ;
		      disbhist.nTotale4 + ;
		      disbhist.nTotale5 + ;
		      disbhist.nTotaleA + ;
		      disbhist.nTotaleB + ;
		      disbhist.nPlugExp) AS nExpense, ;
		      SUM(disbhist.nPlugExp) AS nPlugExp, ;
		      SUM(disbhist.noiltax1 + disbhist.noiltax2 + disbhist.noiltax3 + disbhist.noiltax4) AS nOilTax, ;
		      SUM(disbhist.ngastax1 + disbhist.ngastax2 + disbhist.ngastax3 + disbhist.ngastax4) AS nGasTax, ;
		      SUM(noiltax1) AS noiltax1, ;
		      SUM(noiltax2) AS noiltax2, ;
		      SUM(noiltax3) AS noiltax3, ;
		      SUM(noiltax4) AS noiltax4, ;
		      SUM(ngastax1) AS ngastax1, ;
		      SUM(ngastax2) AS ngastax2, ;
		      SUM(ngastax3) AS ngastax3, ;
		      SUM(ngastax4) AS ngastax4, ;
		      SUM(disbhist.nothtax1 + disbhist.nothtax2 + disbhist.nothtax3 + disbhist.nothtax4 + disbhist.nTaxWith + disbhist.nBackWith) AS nOthTax, ;
		      SUM(disbhist.nNetCheck) AS nNetCheck, ;
		      SUM(disbhist.nGather)  AS nGather, ;
		      SUM(disbhist.nCompress) AS nCompress, ;
		      disbhist.hyear, ;
		      disbhist.hperiod, ;
		      disbhist.cProgCode, ;
		      wells.cWellName, ;
		      0.00  AS nCheckAmt ;
		      FROM disbhist ;
		      LEFT OUTER JOIN ownpcts ;
		      ON disbhist.ciddisb == ownpcts.ciddisb ;
		      JOIN wells ;
		      ON disbhist.cWellID = wells.cWellID ;
		      JOIN investor ;
		      ON disbhist.cownerid = investor.cownerid ;
		      WHERE &lcWhere1a ;
		      AND (disbhist.lManual = .T. ;
		      AND disbhist.crectype # 'P' ;
		      AND &lcWhereIn ;
		      FROM sysctl ;
		      WHERE EMPTY(cversion) ;
		      AND lDisbMan = .T.)) ;
		      AND disbhist.cownerid IN (SELECT cid FROM SELECTED );
		      AND IIF(THISFORM.lPostedOwners, investor.lIntegGL = .F., .T.) ;
		      AND IIF(tlJIBHist, INLIST(disbhist.crectype, 'J', 'P', 'R'), INLIST(disbhist.crectype, 'P', 'R')) ;
		      AND IIF(tcGroup = '**', .T., disbhist.cGroup = tcGroup) ;
		      INTO CURSOR disbchk2 READWRITE ;
		      ORDER BY disbhist.hyear, disbhist.hperiod, disbhist.cownerid, disbhist.cProgCode, disbhist.cTypeInv, disbhist.cWellID, disbhist.cTypeInt, disbhist.cDirect  ;
		      GROUP BY disbhist.hyear, disbhist.hperiod, disbhist.cownerid, disbhist.cProgCode, disbhist.cTypeInv, disbhist.cWellID, disbhist.cTypeInt, disbhist.cDirect
		
		   IF RECCOUNT('disbchk2') > 0
		      *  If it's a converted record, the percentages are all 100%, which throws off the units/owner calculation, so try
		      *  and match back to a good record in disbchk1, and get their good interests for oil/gas off of that.
		      SELECT disbchk2
		      SCAN FOR nrevoil = 100 AND nrevgas = 100
		         SELECT disbchk1
		         LOCATE FOR disbchk1.cownerid == disbchk2.cownerid AND disbchk1.cWellID = disbchk2.cWellID AND disbchk1.cTypeInv = disbchk2.cTypeInv
		         IF FOUND()
		            m.nrevgas = disbchk1.nrevgas
		            m.nrevoil = disbchk1.nrevoil
		            m.nTotBBL = disbchk2.nTotBBL * (m.nrevoil / 100)
		            m.nTotMcf = disbchk2.nTotMcf * (m.nrevgas / 100)
		            SELECT disbchk2
		            REPLACE nTotBBL WITH m.nTotBBL, nTotMcf WITH m.nTotMcf
		         ENDIF
		      ENDSCAN
		      SELECT disbchk1
		      APPEND FROM DBF('disbchk2')
		   ENDIF
		
		   IF THISFORM.lPostedOwners
		      SELECT  disbhist.cownerid, ;
		         investor.cOwnName, ;
		         disbhist.cWellID, ;
		         SUM(disbhist.nIncome) AS nIncome, ;
		         IIF(tlIncDirect, SUM(nOilRev), IIF(disbhist.cDirect <> 'O', IIF(disbhist.cDirect <> 'B', SUM(disbhist.nOilRev), 000000.00), 000000.00)) AS nOilRev, ;
		         IIF(tlIncDirect, SUM(nGasRev), IIF(disbhist.cDirect <> 'G', IIF(disbhist.cDirect <> 'B', SUM(disbhist.nGasRev), 000000.00), 000000.00)) AS nGasRev, ;
		         SUM(disbhist.nTrpRev + disbhist.nMiscRev1 + disbhist.nMiscRev2 + disbhist.nOthRev + disbhist.nFlatRate) AS nOthRev, ;
		         IIF(tlIncDirect, SUM(wellhist.nTotBBL * (ownpcts.nrevoil / 100)), IIF(disbhist.cDirect <> 'O', IIF(disbhist.cDirect <> 'B', SUM(wellhist.nTotBBL * (ownpcts.nrevoil / 100)), 00000.00), 00000.00)) AS nTotBBL, ;
		         IIF(tlIncDirect, SUM(wellhist.nTotMcf * (ownpcts.nrevgas / 100)), IIF(disbhist.cDirect <> 'G', IIF(disbhist.cDirect <> 'B', SUM(wellhist.nTotMcf * (ownpcts.nrevgas / 100)), 00000.00), 00000.00)) AS nTotMcf, ;
		         SUM(wellhist.nTotProd * (ownpcts.nrevoth / 100)) AS nTotProd, ;
		         ownpcts.nrevoil, ;
		         ownpcts.nrevgas, ;
		         disbhist.cTypeInv, ;
		         disbhist.cTypeInt, ;
		         disbhist.cDirect, ;
		         disbhist.hDate, ;
		         disbhist.crectype, ;
		         SUM(disbhist.nExpense + ;
		         disbhist.nTotale1 + ;
		         disbhist.nTotale2 + ;
		         disbhist.nTotale3 + ;
		         disbhist.nTotale4 + ;
		         disbhist.nTotale5 + ;
		         disbhist.nTotaleA + ;
		         disbhist.nTotaleB + ;
		         disbhist.nPlugExp) AS nExpense, ;
		         SUM(disbhist.nPlugExp) AS nPlugExp, ;
		         SUM(disbhist.noiltax1 + disbhist.noiltax2 + disbhist.noiltax3 + disbhist.noiltax4) AS nOilTax, ;
		         SUM(disbhist.ngastax1 + disbhist.ngastax2 + disbhist.ngastax3 + disbhist.ngastax4) AS nGasTax, ;
		         SUM(noiltax1) AS noiltax1, ;
		         SUM(noiltax2) AS noiltax2, ;
		         SUM(noiltax3) AS noiltax3, ;
		         SUM(noiltax4) AS noiltax4, ;
		         SUM(ngastax1) AS ngastax1, ;
		         SUM(ngastax2) AS ngastax2, ;
		         SUM(ngastax3) AS ngastax3, ;
		         SUM(ngastax4) AS ngastax4, ;
		         SUM(disbhist.nothtax1 + disbhist.nothtax2 + disbhist.nothtax3 + disbhist.nothtax4 + disbhist.nTaxWith + disbhist.nBackWith) AS nOthTax, ;
		         SUM(disbhist.nNetCheck) AS nNetCheck, ;
		         SUM(disbhist.nGather)  AS nGather, ;
		         SUM(disbhist.nCompress) AS nCompress, ;
		         disbhist.hyear, ;
		         disbhist.hperiod, ;
		         disbhist.cProgCode, ;
		         wells.cWellName, ;
		         0.00  AS nCheckAmt ;
		         FROM disbhist ;
		         LEFT OUTER JOIN ownpcts ;
		         ON disbhist.ciddisb == ownpcts.ciddisb ;
		         JOIN wells ;
		         ON disbhist.cWellID = wells.cWellID ;
		         JOIN investor ;
		         ON disbhist.cownerid = investor.cownerid ;
		         LEFT OUTER JOIN wellhist ;
		         ON disbhist.cWellID = wellhist.cWellID AND ;
		         disbhist.lManual = .F. AND ;
		         disbhist.hyear + disbhist.hperiod = wellhist.hyear + wellhist.hperiod AND ;
		         &lcJoin ;
		         WHERE &lcWhereP1 ;
		         AND disbhist.lManual = .F. ;
		         AND disbhist.cownerid IN (SELECT cid FROM SELECTED );
		         AND investor.lIntegGL = .T. ;
		         AND IIF(tlJIBHist, INLIST(disbhist.crectype, 'J', 'P', 'R'), INLIST(disbhist.crectype, 'P', 'R')) ;
		         AND IIF(tcGroup = '**', .T., disbhist.cGroup = tcGroup) ;
		         INTO CURSOR disbchkP1 READWRITE ;
		         ORDER BY disbhist.hyear, disbhist.hperiod, disbhist.cownerid, disbhist.cProgCode, disbhist.cTypeInv, disbhist.cWellID, disbhist.cTypeInt, disbhist.cDirect  ;
		         GROUP BY disbhist.hyear, disbhist.hperiod, disbhist.cownerid, disbhist.cProgCode, disbhist.cTypeInv, disbhist.cWellID, disbhist.cTypeInt, disbhist.cDirect
		
		      SELECT  disbhist.cownerid, ;
		         investor.cOwnName, ;
		         disbhist.cWellID, ;
		         SUM(disbhist.nIncome) AS nIncome, ;
		         IIF(tlIncDirect, SUM(nOilRev), IIF(disbhist.cDirect <> 'O', IIF(disbhist.cDirect <> 'B', SUM(disbhist.nOilRev), 000000.00), 000000.00)) AS nOilRev, ;
		         IIF(tlIncDirect, SUM(nGasRev), IIF(disbhist.cDirect <> 'G', IIF(disbhist.cDirect <> 'B', SUM(disbhist.nGasRev), 000000.00), 000000.00)) AS nGasRev, ;
		         SUM(disbhist.nTrpRev + disbhist.nMiscRev1 + disbhist.nMiscRev2 + disbhist.nOthRev + disbhist.nFlatRate) AS nOthRev, ;
		         0.00 AS nTotBBL, ;
		         0.00 AS nTotMcf, ;
		         0.00 AS nTotProd, ;
		         ownpcts.nrevoil, ;
		         ownpcts.nrevgas, ;
		         disbhist.cTypeInv, ;
		         disbhist.cTypeInt, ;
		         disbhist.cDirect, ;
		         disbhist.hDate, ;
		         disbhist.crectype, ;
		         SUM(disbhist.nExpense + ;
		         disbhist.nTotale1 + ;
		         disbhist.nTotale2 + ;
		         disbhist.nTotale3 + ;
		         disbhist.nTotale4 + ;
		         disbhist.nTotale5 + ;
		         disbhist.nTotaleA + ;
		         disbhist.nTotaleB + ;
		         disbhist.nPlugExp) AS nExpense, ;
		         SUM(disbhist.nPlugExp) AS nPlugExp, ;
		         SUM(disbhist.noiltax1 + disbhist.noiltax2 + disbhist.noiltax3 + disbhist.noiltax4) AS nOilTax, ;
		         SUM(disbhist.ngastax1 + disbhist.ngastax2 + disbhist.ngastax3 + disbhist.ngastax4) AS nGasTax, ;
		         SUM(noiltax1) AS noiltax1, ;
		         SUM(noiltax2) AS noiltax2, ;
		         SUM(noiltax3) AS noiltax3, ;
		         SUM(noiltax4) AS noiltax4, ;
		         SUM(ngastax1) AS ngastax1, ;
		         SUM(ngastax2) AS ngastax2, ;
		         SUM(ngastax3) AS ngastax3, ;
		         SUM(ngastax4) AS ngastax4, ;
		         SUM(disbhist.nothtax1 + disbhist.nothtax2 + disbhist.nothtax3 + disbhist.nothtax4 + disbhist.nTaxWith + disbhist.nBackWith) AS nOthTax, ;
		         SUM(disbhist.nNetCheck) AS nNetCheck, ;
		         SUM(disbhist.nGather)  AS nGather, ;
		         SUM(disbhist.nCompress) AS nCompress, ;
		         disbhist.hyear, ;
		         disbhist.hperiod, ;
		         disbhist.cProgCode, ;
		         wells.cWellName, ;
		         0.00  AS nCheckAmt ;
		         FROM disbhist ;
		         LEFT OUTER JOIN ownpcts ;
		         ON disbhist.ciddisb == ownpcts.ciddisb ;
		         JOIN wells ;
		         ON disbhist.cWellID = wells.cWellID ;
		         JOIN investor ;
		         ON disbhist.cownerid = investor.cownerid ;
		         WHERE &lcWhereP1 ;
		         AND (disbhist.lManual = .T. ;
		         AND &lcWhereIn ;
		         FROM sysctl ;
		         WHERE EMPTY(cversion) ;
		         AND lDisbMan = .T.)) ;
		         AND disbhist.cownerid IN (SELECT cid FROM SELECTED );
		         AND investor.lIntegGL = .T. ;
		         AND IIF(tlJIBHist, INLIST(disbhist.crectype, 'J', 'P', 'R'), INLIST(disbhist.crectype, 'P', 'R')) ;
		         AND IIF(tcGroup = '**', .T., disbhist.cGroup = tcGroup) ;
		         INTO CURSOR disbchkP2 READWRITE ;
		         ORDER BY disbhist.hyear, disbhist.hperiod, disbhist.cownerid, disbhist.cProgCode, disbhist.cTypeInv, disbhist.cWellID, disbhist.cTypeInt, disbhist.cDirect  ;
		         GROUP BY disbhist.hyear, disbhist.hperiod, disbhist.cownerid, disbhist.cProgCode, disbhist.cTypeInv, disbhist.cWellID, disbhist.cTypeInt, disbhist.cDirect
		
		      IF RECCOUNT('disbchkP2') > 0
		         *  If it's a converted record, the percentages are all 100%, which throws off the units/owner calculation, so try
		         *  and match back to a good record in disbchk1, and get their good interests for oil/gas off of that.
		         SELECT disbchkP2
		         SCAN FOR nrevoil = 100 AND nrevgas = 100
		            SELECT disbchkP1
		            LOCATE FOR disbchk1.cownerid == disbchk2.cownerid AND disbchk1.cWellID = disbchk2.cWellID AND disbchk1.cTypeInv = disbchk2.cTypeInv
		            IF FOUND()
		               m.nrevgas = disbchk1.nrevgas
		               m.nrevoil = disbchk1.nrevoil
		               m.nTotBBL = disbchk2.nTotBBL * (m.nrevoil / 100)
		               m.nTotMcf = disbchk2.nTotMcf * (m.nrevgas / 100)
		               SELECT disbchkP2
		               REPLACE nTotBBL WITH m.nTotBBL, nTotMcf WITH m.nTotMcf
		            ENDIF
		         ENDSCAN
		         SELECT disbchkP1
		         APPEND FROM DBF('disbchkP2')
		      ENDIF
		
		      SELECT disbchk1
		      APPEND FROM DBF('disbchkp1')
		
		   ENDIF
		   SET TALK OFF
		
		
		   IF THISFORM.chkincSusp.VALUE
		      SET TALK ON
		      SELECT  suspense.cownerid, ;
		         investor.cOwnName, ;
		         suspense.cWellID, ;
		         SUM(suspense.nIncome) AS nIncome, ;
		         IIF(tlIncDirect, SUM(nOilRev), IIF(suspense.cDirect <> 'O', IIF(suspense.cDirect <> 'B', SUM(suspense.nOilRev), 000000.00), 000000.00)) AS nOilRev, ;
		         IIF(tlIncDirect, SUM(nGasRev), IIF(suspense.cDirect <> 'G', IIF(suspense.cDirect <> 'B', SUM(suspense.nGasRev+suspense.nFlatRate), 000000.00), 000000.00)) AS nGasRev, ;
		         SUM(suspense.nTrpRev + suspense.nMiscRev1 + suspense.nMiscRev2 + suspense.nOthRev + suspense.nFlatRate) AS nOthRev, ;
		         IIF(tlIncDirect, SUM(wellhist.nTotBBL * (suspense.nrevoil / 100)), IIF(suspense.cDirect <> 'O', IIF(suspense.cDirect <> 'B', SUM(wellhist.nTotBBL * (suspense.nrevoil / 100)), 00000.00), 00000.00)) AS nTotBBL, ;
		         IIF(tlIncDirect, SUM(wellhist.nTotMcf * (suspense.nrevgas / 100)), IIF(suspense.cDirect <> 'G', IIF(suspense.cDirect <> 'B', SUM(wellhist.nTotMcf * (suspense.nrevgas / 100)), 00000.00), 00000.00)) AS nTotMcf, ;
		         SUM(wellhist.nTotProd * (suspense.nrevoth / 100)) AS nTotProd, ;
		         suspense.nrevoil, ;
		         suspense.nrevgas, ;
		         suspense.cTypeInv, ;
		         suspense.cTypeInt, ;
		         suspense.cDirect, ;
		         suspense.hDate, ;
		         suspense.crectype, ;
		         SUM(suspense.nExpense + ;
		         suspense.nTotale1 + ;
		         suspense.nTotale2 + ;
		         suspense.nTotale3 + ;
		         suspense.nTotale4 + ;
		         suspense.nTotale5 + ;
		         suspense.nTotaleA + ;
		         suspense.nTotaleB + ;
		         suspense.nPlugExp) AS nExpense, ;
		         SUM(suspense.nPlugExp) AS nPlugExp, ;
		         SUM(suspense.noiltax1 + suspense.noiltax2 + suspense.noiltax3 + suspense.noiltax4) AS nOilTax, ;
		         SUM(suspense.ngastax1 + suspense.ngastax2 + suspense.ngastax3 + suspense.ngastax4) AS nGasTax, ;
		         SUM(noiltax1) AS noiltax1, ;
		         SUM(noiltax2) AS noiltax2, ;
		         SUM(noiltax3) AS noiltax3, ;
		         SUM(noiltax4) AS noiltax4, ;
		         SUM(ngastax1) AS ngastax1, ;
		         SUM(ngastax2) AS ngastax2, ;
		         SUM(ngastax3) AS ngastax3, ;
		         SUM(ngastax4) AS ngastax4, ;
		         SUM(suspense.nothtax1 + suspense.nothtax2 + suspense.nothtax3 + suspense.nothtax4 + suspense.nTaxWith + suspense.nBackWith) AS nOthTax, ;
		         SUM(suspense.nNetCheck) AS nNetCheck, ;
		         SUM(suspense.nGather)  AS nGather, ;
		         SUM(suspense.nCompress) AS nCompress, ;
		         suspense.hyear, ;
		         suspense.hperiod, ;
		         suspense.cProgCode, ;
		         wells.cWellName, ;
		         0.00  AS nCheckAmt ;
		         FROM suspense ;
		         JOIN wells ;
		         ON suspense.cWellID = wells.cWellID ;
		         JOIN investor ;
		         ON suspense.cownerid = investor.cownerid ;
		         JOIN wellhist ;
		         ON suspense.cWellID = wellhist.cWellID AND ;
		         suspense.lManual = .F.  AND ;
		         suspense.hyear + suspense.hperiod = wellhist.hyear + wellhist.hperiod AND ;
		         suspense.cRunYear_in = wellhist.crunyear AND ;
		         suspense.nrunno_in = wellhist.nrunno AND ;
		         suspense.crectype = wellhist.crectype ;
		         WHERE &lcWhere2 ;
		         AND suspense.lManual = .F. ;
		         AND suspense.cownerid IN (SELECT cid FROM SELECTED );
		         AND IIF(THISFORM.lPostedOwners, investor.lIntegGL = .F., .T.) ;
		         AND suspense.crectype <> 'P' ;
		         AND IIF(tlJIBHist, .T., wellhist.crectype = 'R') ;
		         AND IIF(tcGroup = '**', .T., suspense.cGroup = tcGroup) ;
		         INTO CURSOR suspchk1 READWRITE ;
		         ORDER BY suspense.hyear, suspense.hperiod, suspense.cownerid, suspense.cProgCode, suspense.cTypeInv, suspense.cWellID, suspense.cTypeInt, suspense.cDirect ;
		         GROUP BY suspense.hyear, suspense.hperiod, suspense.cownerid, suspense.cProgCode, suspense.cTypeInv, suspense.cWellID, suspense.cTypeInt, suspense.cDirect
		
		      SET TALK OFF
		      IF _TALLY > 0
		         SELECT disbchk1
		         APPEND FROM DBF('suspchk1')
		      ENDIF
		
		      SET TALK ON
		      SELECT  suspense.cownerid, ;
		         investor.cOwnName, ;
		         suspense.cWellID, ;
		         SUM(suspense.nIncome) AS nIncome, ;
		         IIF(tlIncDirect, SUM(nOilRev), IIF(suspense.cDirect <> 'O', IIF(suspense.cDirect <> 'B', SUM(suspense.nOilRev), 000000.00), 000000.00)) AS nOilRev, ;
		         IIF(tlIncDirect, SUM(nGasRev), IIF(suspense.cDirect <> 'G', IIF(suspense.cDirect <> 'B', SUM(suspense.nGasRev+suspense.nFlatRate), 000000.00), 000000.00)) AS nGasRev, ;
		         SUM(suspense.nTrpRev + suspense.nMiscRev1 + suspense.nMiscRev2 + suspense.nOthRev + suspense.nFlatRate) AS nOthRev, ;
		         0.00 AS nTotBBL, ;
		         0.00 AS nTotMcf, ;
		         0.00 AS nTotProd, ;
		         suspense.nrevoil, ;
		         suspense.nrevgas, ;
		         suspense.cTypeInv, ;
		         suspense.cTypeInt, ;
		         suspense.cDirect, ;
		         suspense.hDate, ;
		         suspense.crectype, ;
		         SUM(suspense.nExpense + ;
		         suspense.nTotale1 + ;
		         suspense.nTotale2 + ;
		         suspense.nTotale3 + ;
		         suspense.nTotale4 + ;
		         suspense.nTotale5 + ;
		         suspense.nTotaleA + ;
		         suspense.nTotaleB + ;
		         suspense.nPlugExp) AS nExpense, ;
		         SUM(suspense.nPlugExp) AS nPlugExp, ;
		         SUM(suspense.noiltax1 + suspense.noiltax2 + suspense.noiltax3 + suspense.noiltax4) AS nOilTax, ;
		         SUM(suspense.ngastax1 + suspense.ngastax2 + suspense.ngastax3 + suspense.ngastax4) AS nGasTax, ;
		         SUM(noiltax1) AS noiltax1, ;
		         SUM(noiltax2) AS noiltax2, ;
		         SUM(noiltax3) AS noiltax3, ;
		         SUM(noiltax4) AS noiltax4, ;
		         SUM(ngastax1) AS ngastax1, ;
		         SUM(ngastax2) AS ngastax2, ;
		         SUM(ngastax3) AS ngastax3, ;
		         SUM(ngastax4) AS ngastax4, ;
		         SUM(suspense.nothtax1 + suspense.nothtax2 + suspense.nothtax3 + suspense.nothtax4 + suspense.nTaxWith + suspense.nBackWith) AS nOthTax, ;
		         SUM(suspense.nNetCheck) AS nNetCheck, ;
		         SUM(suspense.nGather)  AS nGather, ;
		         SUM(suspense.nCompress) AS nCompress, ;
		         suspense.hyear, ;
		         suspense.hperiod, ;
		         suspense.cProgCode, ;
		         wells.cWellName, ;
		         0.00  AS nCheckAmt ;
		         FROM suspense ;
		         JOIN wells ;
		         ON suspense.cWellID = wells.cWellID ;
		         JOIN investor ;
		         ON suspense.cownerid = investor.cownerid ;
		         WHERE &lcWhere2 ;
		         AND (suspense.lManual = .T. ;
		         AND suspense.cRunYear_in + PADL(TRANSFORM(suspense.nrunno_in), 3, '0') NOT IN (SELECT  crunyear + PADL(TRANSFORM(nrunno), 3, '0') ;
		         FROM sysctl ;
		         WHERE EMPTY(cversion) ;
		         AND lDisbMan = .T.)) ;
		         AND suspense.cownerid IN (SELECT cid FROM SELECTED );
		         AND investor.lIntegGL = .T. ;
		         AND IIF(tlJIBHist, .T., suspense.crectype = 'R') ;
		         AND IIF(tcGroup = '**', suspense.crectype <> 'P', suspense.cGroup = tcGroup) ;
		         INTO CURSOR suspchk2 READWRITE ;
		         ORDER BY suspense.hyear, suspense.hperiod, suspense.cownerid, suspense.cProgCode, suspense.cTypeInv, suspense.cWellID, suspense.cTypeInt, suspense.cDirect ;
		         GROUP BY suspense.hyear, suspense.hperiod, suspense.cownerid, suspense.cProgCode, suspense.cTypeInv, suspense.cWellID, suspense.cTypeInt, suspense.cDirect
		
		      SET TALK OFF
		      IF _TALLY > 0
		         *  If it's a converted record, the percentages are all 100%, which throws off the units/owner calculation, so try
		         *  and match back to a good record in disbchk1, and get their good interests for oil/gas off of that.
		         SELECT suspchk2
		         SCAN FOR nrevoil = 100 AND nrevgas = 100
		            SELECT suspchkP1
		            LOCATE FOR suspchkP1.cownerid == suspchkP2.cownerid ;
		               AND suspchkP1.cWellID = suspchkP2.cWellID ;
		               AND suspchkP1.cTypeInv = suspchkP2.cTypeInv
		            IF FOUND()
		               m.nrevgas = suspchkP1.nrevgas
		               m.nrevoil = suspchkP1.nrevoil
		               m.nTotBBL = suspchkP2.nTotBBL * (m.nrevoil / 100)
		               m.nTotMcf = suspchkP2.nTotMcf * (m.nrevgas / 100)
		               SELECT suspchkP2
		               REPLACE nTotBBL WITH m.nTotBBL, nTotMcf WITH m.nTotMcf
		            ENDIF
		         ENDSCAN
		         SELECT disbchk1
		         APPEND FROM DBF('suspchk2')
		      ENDIF
		
		      IF THISFORM.lPostedOwners
		         SELECT  suspense.cownerid, ;
		            investor.cOwnName, ;
		            suspense.cWellID, ;
		            SUM(suspense.nIncome) AS nIncome, ;
		            IIF(tlIncDirect, SUM(nOilRev), IIF(suspense.cDirect <> 'O', IIF(suspense.cDirect <> 'B', SUM(suspense.nOilRev), 000000.00), 000000.00)) AS nOilRev, ;
		            IIF(tlIncDirect, SUM(nGasRev), IIF(suspense.cDirect <> 'G', IIF(suspense.cDirect <> 'B', SUM(suspense.nGasRev+suspense.nFlatRate), 000000.00), 000000.00)) AS nGasRev, ;
		            SUM(suspense.nTrpRev + suspense.nMiscRev1 + suspense.nMiscRev2 + suspense.nOthRev + suspense.nFlatRate) AS nOthRev, ;
		            IIF(tlIncDirect, SUM(wellhist.nTotBBL * (suspense.nrevoil / 100)), IIF(suspense.cDirect <> 'O', IIF(suspense.cDirect <> 'B', SUM(wellhist.nTotBBL * (suspense.nrevoil / 100)), 00000.00), 00000.00)) AS nTotBBL, ;
		            IIF(tlIncDirect, SUM(wellhist.nTotMcf * (suspense.nrevgas / 100)), IIF(suspense.cDirect <> 'G', IIF(suspense.cDirect <> 'B', SUM(wellhist.nTotMcf * (suspense.nrevgas / 100)), 00000.00), 00000.00)) AS nTotMcf, ;
		            SUM(wellhist.nTotProd * (suspense.nrevoth / 100)) AS nTotProd, ;
		            suspense.nrevoil, ;
		            suspense.nrevgas, ;
		            suspense.cTypeInv, ;
		            suspense.cTypeInt, ;
		            suspense.cDirect, ;
		            suspense.hDate, ;
		            suspense.crectype, ;
		            SUM(suspense.nExpense + ;
		            suspense.nTotale1 + ;
		            suspense.nTotale2 + ;
		            suspense.nTotale3 + ;
		            suspense.nTotale4 + ;
		            suspense.nTotale5 + ;
		            suspense.nTotaleA + ;
		            suspense.nTotaleB + ;
		            suspense.nPlugExp) AS nExpense, ;
		            SUM(suspense.nPlugExp) AS nPlugExp, ;
		            SUM(suspense.noiltax1 + suspense.noiltax2 + suspense.noiltax3 + suspense.noiltax4) AS nOilTax, ;
		            SUM(suspense.ngastax1 + suspense.ngastax2 + suspense.ngastax3 + suspense.ngastax4) AS nGasTax, ;
		            SUM(noiltax1) AS noiltax1, ;
		            SUM(noiltax2) AS noiltax2, ;
		            SUM(noiltax3) AS noiltax3, ;
		            SUM(noiltax4) AS noiltax4, ;
		            SUM(ngastax1) AS ngastax1, ;
		            SUM(ngastax2) AS ngastax2, ;
		            SUM(ngastax3) AS ngastax3, ;
		            SUM(ngastax4) AS ngastax4, ;
		            SUM(suspense.nothtax1 + suspense.nothtax2 + suspense.nothtax3 + suspense.nothtax4 + suspense.nTaxWith + suspense.nBackWith) AS nOthTax, ;
		            SUM(suspense.nNetCheck) AS nNetCheck, ;
		            SUM(suspense.nGather)  AS nGather, ;
		            SUM(suspense.nCompress) AS nCompress, ;
		            suspense.hyear, ;
		            suspense.hperiod, ;
		            suspense.cProgCode, ;
		            wells.cWellName, ;
		            0.00  AS nCheckAmt ;
		            FROM suspense ;
		            JOIN wells ;
		            ON suspense.cWellID = wells.cWellID ;
		            JOIN investor ;
		            ON suspense.cownerid = investor.cownerid ;
		            JOIN wellhist ;
		            ON suspense.cWellID = wellhist.cWellID AND ;
		            suspense.lManual = .F.  AND ;
		            suspense.hyear + suspense.hperiod = wellhist.hyear + wellhist.hperiod AND ;
		            suspense.cRunYear_in = wellhist.crunyear AND ;
		            suspense.nrunno_in = wellhist.nrunno AND ;
		            suspense.crectype = wellhist.crectype ;
		            WHERE &lcWhere2 ;
		            AND suspense.lManual = .F. ;
		            AND suspense.cownerid IN (SELECT cid FROM SELECTED );
		            AND investor.lIntegGL = .T. ;
		            AND suspense.crectype <> 'P' ;
		            AND IIF(tlJIBHist, .T., wellhist.crectype = 'R') ;
		            AND IIF(tcGroup = '**', .T., suspense.cGroup = tcGroup) ;
		            INTO CURSOR suspchkP1 READWRITE ;
		            ORDER BY suspense.hyear, suspense.hperiod, suspense.cownerid, suspense.cProgCode, suspense.cTypeInv, suspense.cWellID, suspense.cTypeInt, suspense.cDirect ;
		            GROUP BY suspense.hyear, suspense.hperiod, suspense.cownerid, suspense.cProgCode, suspense.cTypeInv, suspense.cWellID, suspense.cTypeInt, suspense.cDirect
		
		         SET TALK OFF
		         IF _TALLY > 0
		            SELECT disbchk1
		            APPEND FROM DBF('suspchkP1')
		         ENDIF
		
		         SET TALK ON
		         SELECT  suspense.cownerid, ;
		            investor.cOwnName, ;
		            suspense.cWellID, ;
		            SUM(suspense.nIncome) AS nIncome, ;
		            IIF(tlIncDirect, SUM(nOilRev), IIF(suspense.cDirect <> 'O', IIF(suspense.cDirect <> 'B', SUM(suspense.nOilRev), 000000.00), 000000.00)) AS nOilRev, ;
		            IIF(tlIncDirect, SUM(nGasRev), IIF(suspense.cDirect <> 'G', IIF(suspense.cDirect <> 'B', SUM(suspense.nGasRev+suspense.nFlatRate), 000000.00), 000000.00)) AS nGasRev, ;
		            SUM(suspense.nTrpRev + suspense.nMiscRev1 + suspense.nMiscRev2 + suspense.nOthRev + suspense.nFlatRate) AS nOthRev, ;
		            0.00 AS nTotBBL, ;
		            0.00 AS nTotMcf, ;
		            0.00 AS nTotProd, ;
		            suspense.nrevoil, ;
		            suspense.nrevgas, ;
		            suspense.cTypeInv, ;
		            suspense.cTypeInt, ;
		            suspense.cDirect, ;
		            suspense.hDate, ;
		            suspense.crectype, ;
		            SUM(suspense.nExpense + ;
		            suspense.nTotale1 + ;
		            suspense.nTotale2 + ;
		            suspense.nTotale3 + ;
		            suspense.nTotale4 + ;
		            suspense.nTotale5 + ;
		            suspense.nTotaleA + ;
		            suspense.nTotaleB + ;
		            suspense.nPlugExp) AS nExpense, ;
		            SUM(suspense.nPlugExp) AS nPlugExp, ;
		            SUM(suspense.noiltax1 + suspense.noiltax2 + suspense.noiltax3 + suspense.noiltax4) AS nOilTax, ;
		            SUM(suspense.ngastax1 + suspense.ngastax2 + suspense.ngastax3 + suspense.ngastax4) AS nGasTax, ;
		            SUM(noiltax1) AS noiltax1, ;
		            SUM(noiltax2) AS noiltax2, ;
		            SUM(noiltax3) AS noiltax3, ;
		            SUM(noiltax4) AS noiltax4, ;
		            SUM(ngastax1) AS ngastax1, ;
		            SUM(ngastax2) AS ngastax2, ;
		            SUM(ngastax3) AS ngastax3, ;
		            SUM(ngastax4) AS ngastax4, ;
		            SUM(suspense.nothtax1 + suspense.nothtax2 + suspense.nothtax3 + suspense.nothtax4 + suspense.nTaxWith + suspense.nBackWith) AS nOthTax, ;
		            SUM(suspense.nNetCheck) AS nNetCheck, ;
		            SUM(suspense.nGather)  AS nGather, ;
		            SUM(suspense.nCompress) AS nCompress, ;
		            suspense.hyear, ;
		            suspense.hperiod, ;
		            suspense.cProgCode, ;
		            wells.cWellName, ;
		            0.00  AS nCheckAmt ;
		            FROM suspense ;
		            JOIN wells ;
		            ON suspense.cWellID = wells.cWellID ;
		            JOIN investor ;
		            ON suspense.cownerid = investor.cownerid ;
		            WHERE &lcWhere2 ;
		            AND (suspense.lManual = .T. ;
		            AND suspense.cRunYear_in + PADL(TRANSFORM(suspense.nrunno_in), 3, '0') NOT IN (SELECT  crunyear + PADL(TRANSFORM(nrunno), 3, '0') ;
		            FROM sysctl ;
		            WHERE EMPTY(cversion) ;
		            AND lDisbMan = .T.)) ;
		            AND suspense.cownerid IN (SELECT cid FROM SELECTED );
		            AND investor.lIntegGL = .T. ;
		            AND IIF(tlJIBHist, .T., suspense.crectype = 'R') ;
		            AND IIF(tcGroup = '**', suspense.crectype <> 'P', suspense.cGroup = tcGroup) ;
		            INTO CURSOR suspchkP2 READWRITE ;
		            ORDER BY suspense.hyear, suspense.hperiod, suspense.cownerid, suspense.cProgCode, suspense.cTypeInv, suspense.cWellID, suspense.cTypeInt, suspense.cDirect ;
		            GROUP BY suspense.hyear, suspense.hperiod, suspense.cownerid, suspense.cProgCode, suspense.cTypeInv, suspense.cWellID, suspense.cTypeInt, suspense.cDirect
		
		         SET TALK OFF
		         IF _TALLY > 0
		            *  If it's a converted record, the percentages are all 100%, which throws off the units/owner calculation, so try
		            *  and match back to a good record in disbchk1, and get their good interests for oil/gas off of that.
		            SELECT suspchkP2
		            SCAN FOR nrevoil = 100 AND nrevgas = 100
		               SELECT dispchk1
		               LOCATE FOR suspchk1.cownerid == suspchk2.cownerid AND suspchk1.cWellID = suspchk2.cWellID AND suspchk1.cTypeInv = suspchk2.cTypeInv
		               IF FOUND()
		                  m.nrevgas = suspchk1.nrevgas
		                  m.nrevoil = suspchk1.nrevoil
		                  m.nTotBBL = suspchk2.nTotBBL * (m.nrevoil / 100)
		                  m.nTotMcf = suspchk2.nTotMcf * (m.nrevgas / 100)
		                  SELECT suspchkP2
		                  REPLACE nTotBBL WITH m.nTotBBL, nTotMcf WITH m.nTotMcf
		               ENDIF
		            ENDSCAN
		            SELECT disbchk1
		            APPEND FROM DBF('suspchkP2')
		         ENDIF
		      ENDIF
		
		   ENDIF
		
		   IF tlIncPmts
		      IF THISFORM.chkincSusp.VALUE
		         SELECT  suspense.cownerid, ;
		            investor.cOwnName, ;
		            suspense.cWellID, ;
		            SUM(suspense.nIncome) AS nIncome, ;
		            IIF(tlIncDirect, SUM(nOilRev), IIF(suspense.cDirect <> 'O', IIF(suspense.cDirect <> 'B', SUM(suspense.nOilRev), 000000.00), 000000.00)) AS nOilRev, ;
		            IIF(tlIncDirect, SUM(nGasRev), IIF(suspense.cDirect <> 'G', IIF(suspense.cDirect <> 'B', SUM(suspense.nGasRev+suspense.nFlatRate), 000000.00), 000000.00)) AS nGasRev, ;
		            SUM(suspense.nTrpRev + suspense.nMiscRev1 + suspense.nMiscRev2 + suspense.nOthRev + suspense.nFlatRate) AS nOthRev, ;
		            0.00 AS nTotBBL, ;
		            0.00 AS nTotMcf, ;
		            0.00 AS nTotProd, ;
		            suspense.nrevoil, ;
		            suspense.nrevgas, ;
		            suspense.cTypeInv, ;
		            suspense.cTypeInt, ;
		            suspense.cDirect, ;
		            suspense.hDate, ;
		            suspense.crectype, ;
		            SUM(suspense.nExpense + ;
		            suspense.nTotale1 + ;
		            suspense.nTotale2 + ;
		            suspense.nTotale3 + ;
		            suspense.nTotale4 + ;
		            suspense.nTotale5 + ;
		            suspense.nTotaleA + ;
		            suspense.nTotaleB + ;
		            suspense.nPlugExp) AS nExpense, ;
		            SUM(suspense.nPlugExp) AS nPlugExp, ;
		            SUM(suspense.noiltax1 + suspense.noiltax2 + suspense.noiltax3 + suspense.noiltax4) AS nOilTax, ;
		            SUM(suspense.ngastax1 + suspense.ngastax2 + suspense.ngastax3 + suspense.ngastax4) AS nGasTax, ;
		            SUM(noiltax1) AS noiltax1, ;
		            SUM(noiltax2) AS noiltax2, ;
		            SUM(noiltax3) AS noiltax3, ;
		            SUM(noiltax4) AS noiltax4, ;
		            SUM(ngastax1) AS ngastax1, ;
		            SUM(ngastax2) AS ngastax2, ;
		            SUM(ngastax3) AS ngastax3, ;
		            SUM(ngastax4) AS ngastax4, ;
		            SUM(suspense.nothtax1 + suspense.nothtax2 + suspense.nothtax3 + suspense.nothtax4 + suspense.nTaxWith + suspense.nBackWith) AS nOthTax, ;
		            SUM(suspense.nNetCheck) AS nNetCheck, ;
		            SUM(suspense.nGather)  AS nGather, ;
		            SUM(suspense.nCompress) AS nCompress, ;
		            suspense.hyear, ;
		            suspense.hperiod, ;
		            suspense.cProgCode, ;
		            wells.cWellName, ;
		            0.00  AS nCheckAmt ;
		            FROM suspense ;
		            JOIN wells ;
		            ON suspense.cWellID = wells.cWellID ;
		            JOIN investor ;
		            ON suspense.cownerid = investor.cownerid ;
		            WHERE &lcWhereP2 ;
		            AND suspense.lManual = .T. ;
		            AND suspense.cownerid IN (SELECT cid FROM SELECTED );
		            AND investor.lIntegGL = .F. ;
		            AND IIF(tcGroup = '**', .T., suspense.cGroup = tcGroup) ;
		            AND suspense.crectype = 'P' ;
		            INTO CURSOR susppmts  ;
		            ORDER BY suspense.hyear, suspense.hperiod, suspense.cownerid, suspense.cProgCode, suspense.cTypeInv, suspense.cWellID, suspense.cTypeInt, suspense.cDirect ;
		            GROUP BY suspense.hyear, suspense.hperiod, suspense.cownerid, suspense.cProgCode, suspense.cTypeInv, suspense.cWellID, suspense.cTypeInt, suspense.cDirect
		
		         SELECT disbchk1
		         APPEND FROM DBF('susppmts')
		      ENDIF
		
		      SELECT  disbhist.cownerid, ;
		         investor.cOwnName, ;
		         disbhist.cWellID, ;
		         SUM(disbhist.nIncome) AS nIncome, ;
		         IIF(tlIncDirect, SUM(nOilRev), IIF(disbhist.cDirect <> 'O', IIF(disbhist.cDirect <> 'B', SUM(disbhist.nOilRev), 000000.00), 000000.00)) AS nOilRev, ;
		         IIF(tlIncDirect, SUM(nGasRev), IIF(disbhist.cDirect <> 'G', IIF(disbhist.cDirect <> 'B', SUM(disbhist.nGasRev), 000000.00), 000000.00)) AS nGasRev, ;
		         SUM(disbhist.nTrpRev + disbhist.nMiscRev1 + disbhist.nMiscRev2 + disbhist.nOthRev + disbhist.nFlatRate) AS nOthRev, ;
		         0.00 AS nTotBBL, ;
		         0.00 AS nTotMcf, ;
		         0.00 AS nTotProd, ;
		         ownpcts.nrevoil, ;
		         ownpcts.nrevgas, ;
		         disbhist.cTypeInv, ;
		         disbhist.cTypeInt, ;
		         disbhist.cDirect, ;
		         disbhist.hDate, ;
		         disbhist.crectype, ;
		         SUM(disbhist.nExpense + ;
		         disbhist.nTotale1 + ;
		         disbhist.nTotale2 + ;
		         disbhist.nTotale3 + ;
		         disbhist.nTotale4 + ;
		         disbhist.nTotale5 + ;
		         disbhist.nTotaleA + ;
		         disbhist.nTotaleB + ;
		         disbhist.nPlugExp) AS nExpense, ;
		         SUM(disbhist.nPlugExp) AS nPlugExp, ;
		         SUM(disbhist.noiltax1 + disbhist.noiltax2 + disbhist.noiltax3 + disbhist.noiltax4) AS nOilTax, ;
		         SUM(disbhist.ngastax1 + disbhist.ngastax2 + disbhist.ngastax3 + disbhist.ngastax4) AS nGasTax, ;
		         SUM(noiltax1) AS noiltax1, ;
		         SUM(noiltax2) AS noiltax2, ;
		         SUM(noiltax3) AS noiltax3, ;
		         SUM(noiltax4) AS noiltax4, ;
		         SUM(ngastax1) AS ngastax1, ;
		         SUM(ngastax2) AS ngastax2, ;
		         SUM(ngastax3) AS ngastax3, ;
		         SUM(ngastax4) AS ngastax4, ;
		         SUM(disbhist.nothtax1 + disbhist.nothtax2 + disbhist.nothtax3 + disbhist.nothtax4 + disbhist.nTaxWith + disbhist.nBackWith) AS nOthTax, ;
		         SUM(disbhist.nNetCheck) AS nNetCheck, ;
		         SUM(disbhist.nGather)  AS nGather, ;
		         SUM(disbhist.nCompress) AS nCompress, ;
		         disbhist.hyear, ;
		         disbhist.hperiod, ;
		         disbhist.cProgCode, ;
		         wells.cWellName, ;
		         0.00  AS nCheckAmt ;
		         FROM disbhist ;
		         LEFT OUTER JOIN ownpcts ;
		         ON disbhist.ciddisb == ownpcts.ciddisb ;
		         JOIN wells ;
		         ON disbhist.cWellID = wells.cWellID ;
		         JOIN investor ;
		         ON disbhist.cownerid = investor.cownerid ;
		         WHERE &lcWhereP1 ;
		         AND disbhist.lManual = .T. ;
		         AND disbhist.cownerid IN (SELECT cid FROM SELECTED );
		         AND investor.lIntegGL = .F. ;
		         AND IIF(tcGroup = '**', .T., disbhist.cGroup = tcGroup) ;
		         AND disbhist.crectype='P' ;
		         INTO CURSOR disbpmts  ;
		         ORDER BY disbhist.hyear, disbhist.hperiod, disbhist.cownerid, disbhist.cProgCode, disbhist.cTypeInv, disbhist.cWellID, disbhist.cTypeInt, disbhist.cDirect ;
		         GROUP BY disbhist.hyear, disbhist.hperiod, disbhist.cownerid, disbhist.cProgCode, disbhist.cTypeInv, disbhist.cWellID, disbhist.cTypeInt, disbhist.cDirect
		
		      SELECT disbchk1
		      APPEND FROM DBF('disbpmts')
		   ENDIF
		
		
		
		   SET TALK ON
		   SELECT  cownerid, ;
		      cOwnName, ;
		      cWellID, ;
		      SUM(nIncome) AS nIncome, ;
		      SUM(nTotBBL) AS nTotBBL, ;
		      SUM(nTotMcf) AS nTotMcf, ;
		      SUM(nTotProd) AS nTotProd, ;
		      SUM(nOilRev) AS nOilRev, ;
		      SUM(nGasRev) AS nGasRev, ;
		      hDate, ;
		      SUM(nOthRev) AS nOthRev, ;
		      cTypeInv, ;
		      cTypeInt, ;
		      cDirect, ;
		      SUM(nExpense) AS nExpense, ;
		      SUM(nPlugExp) AS nPlugExp, ;
		      SUM(nOilTax + nGasTax + nOthTax) AS nSevTaxes, ;
		      SUM(nNetCheck) AS nNetCheck, ;
		      SUM(nGather) AS nGather, ;
		      SUM(noiltax1) AS noiltax1, ;
		      SUM(noiltax2) AS noiltax2, ;
		      SUM(noiltax3) AS noiltax3, ;
		      SUM(noiltax4) AS noiltax4, ;
		      SUM(ngastax1) AS ngastax1, ;
		      SUM(ngastax2) AS ngastax2, ;
		      SUM(ngastax3) AS ngastax3, ;
		      SUM(ngastax4) AS ngastax4, ;
		      SUM(nCompress) AS nCompress, ;
		      IIF(tlByMonth, hyear, '') AS hyear, ;
		      IIF(tlByMonth, hperiod, '') AS hperiod, ;
		      cProgCode, ;
		      cWellName, ;
		      nCheckAmt ;
		      FROM disbchk1 ;
		      WHERE IIF(tlIncPmts,.T.,crectype # 'P') ;
		      INTO CURSOR disbchk ;
		      ORDER BY cownerid, cProgCode, cTypeInv, cWellID;
		      GROUP BY cownerid, cProgCode, cTypeInv, cWellID
		
		
		   IF tlByProgram
		      INDEX ON cProgCode + cownerid TAG progs
		   ENDIF
		
		   SET TALK OFF
		CATCH TO loError
		   llReturn = .F.
		   DO errorlog WITH 'BuildDataSummary', loError.LINENO, 'Yearly Disb Summary', loError.ERRORNO, loError.MESSAGE
		   MESSAGEBOX('Unable to process the report at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		      'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		RETURN llReturn
		
	ENDPROC

	PROCEDURE checkarchived
		
		* Check to see if any ownhistYYYY files exist. 
		* If they do, put the years in the cboArchive dropdown and
		* make the dropdown visible.
		
		TRY 
		
		  lnFiles = ADIR(laFiles,m.goapp.cdatafilepath+'ownhist*.dbf')
		  thisform.cboArchived.AddListItem('    ',1,1)
		  
		  FOR x = 1 TO lnFiles
		     lcYear = RIGHT(ALLTRIM(JUSTSTEM(laFiles[x,1])),4)
		     thisform.cboArchived.AddListItem(lcYear,x+1,1)
		  ENDFOR 
		
		  IF lnFiles > 0
		     thisform.lblarchived.Visible = .t.
		     thisform.cboArchived.Visible = .t.
		  ELSE
		     thisform.lblarchived.Visible = .f.
		     thisform.cboArchived.Visible = .f.
		  ENDIF 
		CATCH TO loError
		
		   MESSAGEBOX('Error: ' + loerror.message + CHR(13) + ;
		              'Line:  ' + TRANSFORM(loerror.lineno),16,thisform.Caption)
		
		ENDTRY 
		
	ENDPROC

	PROCEDURE earnedmonthly
		LOCAL tcOwner1, tcOwner2, tcYear1, tcYear2, tcPeriod1, tcPeriod2, tlSummary, tlNoPrior
		LOCAL llReturn, loError
		
		llReturn = .T.
		
		TRY
		   tcOwner1	   = THISFORM.swrptlook1.txtBegID.VALUE
		   tcOwner2	   = THISFORM.swrptlook1.txtEndID.VALUE
		   tcYear1	   = THISFORM.swYear1.VALUE
		   tcYear2	   = THISFORM.swYear2.VALUE
		   tcPeriod1   = THISFORM.swPeriod1.VALUE
		   tcPeriod2   = THISFORM.swperiod2.VALUE
		   tlOwnPage   = THISFORM.chkOwnPage.VALUE
		   tlNoPrior   = .F.
		   tcGroup	   = LEFT(THISFORM.swgroup1.VALUE, 2)
		   tdDate1	   = THISFORM.txtbegdate.VALUE
		   tdDate2	   = THISFORM.txtenddate.VALUE
		   tnType	   = THISFORM.opgRange.VALUE
		   tlByMonth   = THISFORM.chkByMonth.VALUE
		   tlByProgram = THISFORM.chkByProgram.VALUE
		   tlIncDirect = THISFORM.chkincdirect.VALUE
		   tlJIBHist   = THISFORM.chkjibhistory.VALUE
		   tlActual	   = THISFORM.chklActual.VALUE
		   tlIncPmts   = THISFORM.chkincPayments.VALUE
		   llSelected  = THISFORM.chkselected.VALUE
		
		   IF NOT llSelected
		      SELECT cownerid AS cid FROM investor ;
		         INTO CURSOR SELECTED ;
		         WHERE BETWEEN(cownerid, tcOwner1, tcOwner2) ;
		         ORDER BY cid
		   ENDIF
		   
		   lcYear = thisform.cboArchived.Value
		   IF NOT EMPTY(lcYear)
		      llArchived = .t.
		      lcWhereIn = "disbhist.cRunYear_i + PADL(TRANSFORM(disbhist.nrunno_in), 3, '0') NOT IN (SELECT  crunyear + PADL(TRANSFORM(nrunno), 3, '0')"
		      lcJoin    = "IIF(EMPTY(disbhist.cRunYear_i), disbhist.crunyear = wellhist.crunyear " + ;
		                  "AND disbhist.nrunno = wellhist.nrunno, disbhist.cRunYear_i = wellhist.crunyear " + ;
		                  "AND disbhist.nrunno_in = wellhist.nrunno)"
		      lcJoinSys = "disbhist.cRunYear_i = sysctl.crunyear"
		      lcRun_In  = "disbhist.cRunYear_i"
		   ELSE
		      llArchived = .f.
		      lcWhereIn = "disbhist.cRunYear_in + PADL(TRANSFORM(disbhist.nrunno_in), 3, '0') NOT IN (SELECT  crunyear + PADL(TRANSFORM(nrunno), 3, '0')"
		      lcJoin    = "IIF(EMPTY(disbhist.cRunYear_in), disbhist.crunyear = wellhist.crunyear " + ;
		                  "AND disbhist.nrunno = wellhist.nrunno, disbhist.cRunYear_in = wellhist.crunyear " + ;
		                  "AND disbhist.nrunno_in = wellhist.nrunno)"
		      lcJoinSys = "disbhist.cRunYear_in = sysctl.crunyear"             
		      lcRun_In  = "disbhist.cRunYear_in"
		   ENDIF 
		
		
		   IF tnType = 2
		      tdDate1 = CTOD('01/01/' + TRANSFORM(tcYear1))
		      tdDate2 = CTOD('12/31/' + TRANSFORM(tcYear1))
		   ENDIF
		   SWSELECT('wells')
		   SET ORDER TO cWellID
		   GO TOP
		   tcWellID1 = cWellID
		   GO BOTT
		   tcWellID2 = cWellID
		
		   * Get the entries that didn't go into suspense during the time period
		   SET TALK ON
		   SELECT  disbhist.cownerid, ;
		      investor.cOwnName, ;
		      disbhist.cWellID, ;
		      THIS.getfiscalyear(sysctl.dacctdate) AS cyear, ;
		      THIS.getfiscalperiod(sysctl.dacctdate) AS CMONTH, ;
		      SUM(disbhist.nIncome) AS nIncome, ;
		      IIF(tlIncDirect, SUM(nOilRev), IIF(disbhist.cDirect <> 'O', IIF(disbhist.cDirect <> 'B', SUM(disbhist.nOilRev), 000000.00), 000000.00)) AS nOilRev, ;
		      IIF(tlIncDirect, SUM(nGasRev), IIF(disbhist.cDirect <> 'G', IIF(disbhist.cDirect <> 'B', SUM(disbhist.nGasRev + disbhist.nFlatRate), 000000.00), 000000.00)) AS nGasRev, ;
		      SUM(disbhist.nTrpRev + disbhist.nMiscRev1 + disbhist.nMiscRev2 + disbhist.nOthRev + disbhist.nFlatRate) AS nOthRev, ;
		      IIF(tlIncDirect, SUM(wellhist.nTotBBL * (ownpcts.nrevoil / 100)), IIF(disbhist.cDirect <> 'O', IIF(disbhist.cDirect <> 'B', SUM(wellhist.nTotBBL * (ownpcts.nrevoil / 100)), 00000.00), 00000.00)) AS nTotBBL, ;
		      IIF(tlIncDirect, SUM(wellhist.nTotMcf * (ownpcts.nrevgas / 100)), IIF(disbhist.cDirect <> 'G', IIF(disbhist.cDirect <> 'B', SUM(wellhist.nTotMcf * (ownpcts.nrevgas / 100)), 00000.00), 00000.00)) AS nTotMcf, ;
		      SUM(wellhist.nTotProd * (ownpcts.nrevoth / 100)) AS nTotProd, ;
		      ownpcts.nrevoil,  ;
		      ownpcts.nrevgas,  ;
		      disbhist.cTypeInv, ;
		      disbhist.cTypeInt, ;
		      disbhist.cDirect, ;
		      disbhist.hDate, ;
		      SUM(disbhist.nExpense + ;
		        disbhist.nTotale1 + ;
		        disbhist.nTotale2 + ;
		        disbhist.nTotale3 + ;
		        disbhist.nTotale4 + ;
		        disbhist.nTotale5 + ;
		        disbhist.nTotaleA + ;
		        disbhist.nTotaleB + ;
		        disbhist.nPlugExp) AS nExpense, ;
		      SUM(disbhist.nPlugExp) AS nPlugExp, ;
		      SUM(disbhist.noiltax1 + disbhist.noiltax2 + disbhist.noiltax3 + disbhist.noiltax4) AS nOilTax, ;
		      SUM(disbhist.ngastax1 + disbhist.ngastax2 + disbhist.ngastax3 + disbhist.ngastax4) AS nGasTax, ;
		      SUM(noiltax1) AS noiltax1, ;
		      SUM(noiltax2) AS noiltax2, ;
		      SUM(noiltax3) AS noiltax3, ;
		      SUM(noiltax4) AS noiltax4, ;
		      SUM(ngastax1) AS ngastax1, ;
		      SUM(ngastax2) AS ngastax2, ;
		      SUM(ngastax3) AS ngastax3, ;
		      SUM(ngastax4) AS ngastax4, ;
		      SUM(disbhist.nothtax1 + disbhist.nothtax2 + disbhist.nothtax3 + disbhist.nothtax4 + disbhist.nTaxWith + disbhist.nBackWith) AS nOthTax, ;
		      SUM(disbhist.nNetCheck) AS nNetCheck, ;
		      SUM(disbhist.nGather)  AS nGather, ;
		      SUM(disbhist.nCompress) AS nCompress, ;
		      disbhist.hyear,    ;
		      disbhist.hperiod, ;
		      disbhist.cProgCode, ;
		      wells.cWellName, ;
		      0.00  AS nCheckAmt ;
		      FROM disbhist ;
		      JOIN ownpcts ;
		      ON disbhist.ciddisb == ownpcts.ciddisb ;
		      JOIN wells ;
		      ON disbhist.cWellID = wells.cWellID ;
		      JOIN investor ;
		      ON disbhist.cownerid = investor.cownerid ;
		      JOIN sysctl ;
		      ON disbhist.crunyear = sysctl.crunyear ;
		      AND disbhist.nrunno = sysctl.nrunno ;
		      AND disbhist.crectype = sysctl.ctypeclose ;
		      LEFT OUTER JOIN wellhist ;
		         ON disbhist.cWellID = wellhist.cWellID AND ;
		            disbhist.lManual = .F. AND ;
		            disbhist.hyear + disbhist.hperiod = wellhist.hyear + wellhist.hperiod AND ;
		            &lcJoin AND ;
		            disbhist.crectype = wellhist.crectype ;
		      WHERE EMPTY(csusptype) ;
		        AND (disbhist.crunyear + PADL(TRANSFORM(disbhist.nrunno), 3, '0') + disbhist.crectype + disbhist.cgroup ;
		               IN (SELECT  crunyear + PADL(TRANSFORM(nrunno), 3, '0') + ctypeclose + cgroup ;
		                 	FROM sysctl ;
		                 	WHERE BETWEEN(dacctdate, tdDate1, tdDate2) ;
		         	AND lDisbMan) ;
		           OR ((disbhist.lManual AND disbhist.nrunno # 9999);
		         	AND BETWEEN(disbhist.hDate, tdDate1, tdDate2))) ;
		         AND disbhist.cownerid IN (SELECT cid FROM SELECTED );
		         AND IIF(tlJIBHist, INLIST(disbhist.crectype, 'J', 'R'), INLIST(disbhist.crectype, 'R')) ;
		         AND IIF(tcGroup = '**', .T., disbhist.cgroup = tcGroup) ;
		      INTO CURSOR disbchk1 READWRITE  ;
		      ORDER BY cyear, CMONTH, disbhist.cownerid, disbhist.cTypeInv, disbhist.cWellID, disbhist.cTypeInt, disbhist.cDirect, disbhist.cProgCode ;
		      GROUP BY cyear, CMONTH, disbhist.cownerid, disbhist.cTypeInv, disbhist.cWellID, disbhist.cTypeInt, disbhist.cDirect, disbhist.cProgCode
		
		   * Get the entries that did go into suspense that were created during the time period
		   SELECT  disbhist.cownerid, ;
		      investor.cOwnName, ;
		      disbhist.cWellID, ;
		      THIS.GetFiscalyear(sysctl.dacctdate) AS cyear, ;
		      THIS.GetFiscalperiod(sysctl.dacctdate) AS CMONTH, ;
		      SUM(disbhist.nIncome) AS nIncome, ;
		      IIF(tlIncDirect, SUM(nOilRev), IIF(disbhist.cDirect <> 'O', IIF(disbhist.cDirect <> 'B', SUM(disbhist.nOilRev), 000000.00), 000000.00)) AS nOilRev, ;
		      IIF(tlIncDirect, SUM(nGasRev), IIF(disbhist.cDirect <> 'G', IIF(disbhist.cDirect <> 'B', SUM(disbhist.nGasRev + disbhist.nFlatRate), 000000.00), 000000.00)) AS nGasRev, ;
		      SUM(disbhist.nTrpRev + disbhist.nMiscRev1 + disbhist.nMiscRev2 + disbhist.nOthRev + disbhist.nFlatRate) AS nOthRev, ;
		      IIF(tlIncDirect, SUM(wellhist.nTotBBL * (ownpcts.nrevoil / 100)), IIF(disbhist.cDirect <> 'O', IIF(disbhist.cDirect <> 'B', SUM(wellhist.nTotBBL * (ownpcts.nrevoil / 100)), 00000.00), 00000.00)) AS nTotBBL, ;
		      IIF(tlIncDirect, SUM(wellhist.nTotMcf * (ownpcts.nrevgas / 100)), IIF(disbhist.cDirect <> 'G', IIF(disbhist.cDirect <> 'B', SUM(wellhist.nTotMcf * (ownpcts.nrevgas / 100)), 00000.00), 00000.00)) AS nTotMcf, ;
		      SUM(wellhist.nTotProd * (ownpcts.nrevoth / 100)) AS nTotProd, ;
		      ownpcts.nrevoil,  ;
		      ownpcts.nrevgas,  ;
		      disbhist.cTypeInv, ;
		      disbhist.cTypeInt, ;
		      disbhist.cDirect, ;
		      disbhist.hDate, ;
		      SUM(disbhist.nExpense + ;
		        disbhist.nTotale1 + ;
		        disbhist.nTotale2 + ;
		        disbhist.nTotale3 + ;
		        disbhist.nTotale4 + ;
		        disbhist.nTotale5 + ;
		        disbhist.nTotaleA + ;
		        disbhist.nTotaleB + ;
		        disbhist.nPlugExp) AS nExpense, ;
		      SUM(disbhist.nPlugExp) AS nPlugExp, ;
		      SUM(disbhist.noiltax1 + disbhist.noiltax2 + disbhist.noiltax3 + disbhist.noiltax4) AS nOilTax, ;
		      SUM(disbhist.ngastax1 + disbhist.ngastax2 + disbhist.ngastax3 + disbhist.ngastax4) AS nGasTax, ;
		      SUM(noiltax1) AS noiltax1, ;
		      SUM(noiltax2) AS noiltax2, ;
		      SUM(noiltax3) AS noiltax3, ;
		      SUM(noiltax4) AS noiltax4, ;
		      SUM(ngastax1) AS ngastax1, ;
		      SUM(ngastax2) AS ngastax2, ;
		      SUM(ngastax3) AS ngastax3, ;
		      SUM(ngastax4) AS ngastax4, ;
		      SUM(disbhist.nothtax1 + disbhist.nothtax2 + disbhist.nothtax3 + disbhist.nothtax4 + disbhist.nTaxWith + disbhist.nBackWith) AS nOthTax, ;
		      SUM(disbhist.nNetCheck) AS nNetCheck, ;
		      SUM(disbhist.nGather)  AS nGather, ;
		      SUM(disbhist.nCompress) AS nCompress, ;
		      disbhist.hyear,    ;
		      disbhist.hperiod, ;
		      disbhist.cProgCode, ;
		      wells.cWellName, ;
		      0.00  AS nCheckAmt ;
		      FROM disbhist ;
		      JOIN ownpcts ;
		      ON disbhist.ciddisb == ownpcts.ciddisb ;
		      JOIN wells ;
		      ON disbhist.cWellID = wells.cWellID ;
		      JOIN investor ;
		      ON disbhist.cownerid = investor.cownerid ;
		      JOIN sysctl ;
		      ON &lcJoinSys ;
		      AND disbhist.nrunno_in = sysctl.nrunno ;
		      AND disbhist.crectype = sysctl.ctypeclose ;
		      LEFT OUTER JOIN wellhist ;
		      ON disbhist.cWellID = wellhist.cWellID AND ;
		      disbhist.lManual = .F. AND ;
		      disbhist.hyear + disbhist.hperiod = wellhist.hyear + wellhist.hperiod AND ;
		      &lcJoin AND ;
		      disbhist.crectype = wellhist.crectype ;
		      WHERE NOT EMPTY(csusptype) ;
		      AND (&lcRun_In + PADL(TRANSFORM(disbhist.nrunno_in), 3, '0') + disbhist.crectype + disbhist.cgroup ;
		        IN (SELECT  crunyear + PADL(TRANSFORM(nrunno), 3, '0') + ctypeclose + cgroup ;
		      	FROM sysctl ;
		      	WHERE BETWEEN(dacctdate, tdDate1, tdDate2) ;
		      	AND lDisbMan) ;
		        OR ((disbhist.lManual AND disbhist.nrunno # 9999);
		      	AND BETWEEN(disbhist.hDate, tdDate1, tdDate2))) ;
		      AND disbhist.cownerid IN (SELECT cid FROM SELECTED );
		      AND IIF(tlJIBHist, INLIST(disbhist.crectype, 'J', 'R'), INLIST(disbhist.crectype, 'R')) ;
		      AND IIF(tcGroup = '**', .T., disbhist.cgroup = tcGroup) ;
		      INTO CURSOR disbchk2 READWRITE  ;
		      ORDER BY cyear, CMONTH, disbhist.cownerid, disbhist.cTypeInv, disbhist.cWellID, disbhist.cTypeInt, disbhist.cDirect, disbhist.cProgCode ;
		      GROUP BY cyear, CMONTH, disbhist.cownerid, disbhist.cTypeInv, disbhist.cWellID, disbhist.cTypeInt, disbhist.cDirect, disbhist.cProgCode
		
		   SELECT  disbhist.cownerid, ;
		      investor.cOwnName, ;
		      disbhist.cWellID, ;
		      STR(YEAR(hDate)) AS cyear, ;
		      PADL(ALLTRIM(STR(MONTH(hDate))), 2, '0') AS CMONTH, ;
		      SUM(disbhist.nIncome) AS nIncome, ;
		      IIF(tlIncDirect, SUM(nOilRev), IIF(disbhist.cDirect <> 'O', IIF(disbhist.cDirect <> 'B', SUM(disbhist.nOilRev), 000000.00), 000000.00)) AS nOilRev, ;
		      IIF(tlIncDirect, SUM(nGasRev), IIF(disbhist.cDirect <> 'G', IIF(disbhist.cDirect <> 'B', SUM(disbhist.nGasRev + disbhist.nFlatRate), 000000.00), 000000.00)) AS nGasRev, ;
		      SUM(disbhist.nTrpRev + disbhist.nMiscRev1 + disbhist.nMiscRev2 + disbhist.nOthRev + disbhist.nFlatRate) AS nOthRev, ;
		      00000.00 AS nTotBBL, ;
		      00000.00 AS nTotMcf, ;
		      00000.00 AS nTotProd, ;
		      ownpcts.nrevoil,  ;
		      ownpcts.nrevgas,  ;
		      disbhist.cTypeInv, ;
		      disbhist.cTypeInt, ;
		      disbhist.cDirect, ;
		      disbhist.hDate, ;
		      SUM(disbhist.nExpense + ;
		        disbhist.nTotale1 + ;
		        disbhist.nTotale2 + ;
		        disbhist.nTotale3 + ;
		        disbhist.nTotale4 + ;
		        disbhist.nTotale5 + ;
		        disbhist.nTotaleA + ;
		        disbhist.nTotaleB + ;
		        disbhist.nPlugExp) AS nExpense, ;
		      SUM(disbhist.nPlugExp) AS nPlugExp, ;
		      SUM(disbhist.noiltax1 + disbhist.noiltax2 + disbhist.noiltax3 + disbhist.noiltax4) AS nOilTax, ;
		      SUM(disbhist.ngastax1 + disbhist.ngastax2 + disbhist.ngastax3 + disbhist.ngastax4) AS nGasTax, ;
		      SUM(noiltax1) AS noiltax1, ;
		      SUM(noiltax2) AS noiltax2, ;
		      SUM(noiltax3) AS noiltax3, ;
		      SUM(noiltax4) AS noiltax4, ;
		      SUM(ngastax1) AS ngastax1, ;
		      SUM(ngastax2) AS ngastax2, ;
		      SUM(ngastax3) AS ngastax3, ;
		      SUM(ngastax4) AS ngastax4, ;
		      SUM(disbhist.nothtax1 + disbhist.nothtax2 + disbhist.nothtax3 + disbhist.nothtax4 + disbhist.nTaxWith + disbhist.nBackWith) AS nOthTax, ;
		      SUM(disbhist.nNetCheck) AS nNetCheck, ;
		      SUM(disbhist.nGather)  AS nGather, ;
		      SUM(disbhist.nCompress) AS nCompress, ;
		      disbhist.hyear,    ;
		      disbhist.hperiod, ;
		      disbhist.cProgCode, ;
		      wells.cWellName, ;
		      0.00  AS nCheckAmt ;
		      FROM disbhist ;
		      JOIN ownpcts ;
		      ON disbhist.ciddisb == ownpcts.ciddisb ;
		      JOIN wells ;
		      ON disbhist.cWellID = wells.cWellID ;
		      JOIN investor ;
		      ON disbhist.cownerid = investor.cownerid ;
		      WHERE disbhist.lManual AND disbhist.nrunno # 9999 ;
		      AND BETWEEN(disbhist.hDate, tdDate1, tdDate2) ;
		      AND disbhist.cownerid IN (SELECT cid FROM SELECTED );
		      AND IIF(tlJIBHist, INLIST(disbhist.crectype, 'J', 'R'), INLIST(disbhist.crectype, 'R')) ;
		      AND IIF(tcGroup = '**', .T., disbhist.cgroup = tcGroup) ;
		      INTO CURSOR disbchk3 READWRITE  ;
		      ORDER BY cyear, CMONTH, disbhist.cownerid, disbhist.cTypeInv, disbhist.cWellID, disbhist.cTypeInt, disbhist.cDirect, disbhist.cProgCode ;
		      GROUP BY cyear, CMONTH, disbhist.cownerid, disbhist.cTypeInv, disbhist.cWellID, disbhist.cTypeInt, disbhist.cDirect, disbhist.cProgCode
		
		   SET TALK OFF
		
		   SELECT disbchk1
		   APPEND FROM DBF('disbchk2')
		   APPEND FROM DBF('disbchk3')
		
		   * Get the entries that did go into suspense and are still in suspense
		   SELECT  suspense.cownerid, ;
		      investor.cOwnName, ;
		      suspense.cWellID, ;
		      THIS.GetFiscalyear(sysctl.dacctdate) AS cyear, ;
		      THIS.GetFiscalperiod(sysctl.dacctdate) AS CMONTH, ;
		      SUM(suspense.nIncome) AS nIncome, ;
		      IIF(tlIncDirect, SUM(nOilRev), IIF(suspense.cDirect <> 'O', IIF(suspense.cDirect <> 'B', SUM(suspense.nOilRev), 000000.00), 000000.00)) AS nOilRev, ;
		      IIF(tlIncDirect, SUM(nGasRev), IIF(suspense.cDirect <> 'G', IIF(suspense.cDirect <> 'B', SUM(suspense.nGasRev + suspense.nFlatRate), 000000.00), 000000.00)) AS nGasRev, ;
		      SUM(suspense.nTrpRev + suspense.nMiscRev1 + suspense.nMiscRev2 + suspense.nOthRev + suspense.nFlatRate) AS nOthRev, ;
		      IIF(tlIncDirect, SUM(wellhist.nTotBBL * (suspense.nrevoil / 100)), IIF(suspense.cDirect <> 'O', IIF(suspense.cDirect <> 'B', SUM(wellhist.nTotBBL * (suspense.nrevoil / 100)), 00000.00), 00000.00)) AS nTotBBL, ;
		      IIF(tlIncDirect, SUM(wellhist.nTotMcf * (suspense.nrevgas / 100)), IIF(suspense.cDirect <> 'G', IIF(suspense.cDirect <> 'B', SUM(wellhist.nTotMcf * (suspense.nrevgas / 100)), 00000.00), 00000.00)) AS nTotMcf, ;
		      SUM(wellhist.nTotProd * (suspense.nrevoth / 100)) AS nTotProd, ;
		      ownpcts.nrevoil,  ;
		      ownpcts.nrevgas,  ;
		      suspense.cTypeInv, ;
		      suspense.cTypeInt, ;
		      suspense.cDirect, ;
		      suspense.hDate, ;
		      SUM(suspense.nExpense + ;
		        suspense.nTotale1 + ;
		        suspense.nTotale2 + ;
		        suspense.nTotale3 + ;
		        suspense.nTotale4 + ;
		        suspense.nTotale5 + ;
		        suspense.nTotaleA + ;
		        suspense.nTotaleB + ;
		        suspense.nPlugExp) AS nExpense, ;
		      SUM(suspense.nPlugExp) AS nPlugExp, ;
		      SUM(suspense.noiltax1 + suspense.noiltax2 + suspense.noiltax3 + suspense.noiltax4) AS nOilTax, ;
		      SUM(suspense.ngastax1 + suspense.ngastax2 + suspense.ngastax3 + suspense.ngastax4) AS nGasTax, ;
		      SUM(noiltax1) AS noiltax1, ;
		      SUM(noiltax2) AS noiltax2, ;
		      SUM(noiltax3) AS noiltax3, ;
		      SUM(noiltax4) AS noiltax4, ;
		      SUM(ngastax1) AS ngastax1, ;
		      SUM(ngastax2) AS ngastax2, ;
		      SUM(ngastax3) AS ngastax3, ;
		      SUM(ngastax4) AS ngastax4, ;
		      SUM(suspense.nothtax1 + suspense.nothtax2 + suspense.nothtax3 + suspense.nothtax4 + suspense.nTaxWith + suspense.nBackWith) AS nOthTax, ;
		      SUM(suspense.nNetCheck) AS nNetCheck, ;
		      SUM(suspense.nGather)  AS nGather, ;
		      SUM(suspense.nCompress) AS nCompress, ;
		      suspense.hyear,    ;
		      suspense.hperiod, ;
		      suspense.cProgCode, ;
		      wells.cWellName, ;
		      0.00  AS nCheckAmt ;
		      FROM suspense ;
		      JOIN wells ;
		      ON suspense.cWellID = wells.cWellID ;
		      JOIN investor ;
		      ON suspense.cownerid = investor.cownerid ;
		      JOIN sysctl ;
		      ON suspense.cRunYear_in = sysctl.crunyear ;
		      AND suspense.nrunno_in = sysctl.nrunno ;
		      AND suspense.crectype = sysctl.ctypeclose ;
		      LEFT OUTER JOIN wellhist ;
		           ON suspense.cWellID = wellhist.cWellID AND ;
		              suspense.lManual = .F. AND ;
		              suspense.hyear + suspense.hperiod = wellhist.hyear + wellhist.hperiod AND ;
		              IIF(EMPTY(suspense.cRunYear_in), suspense.crunyear = wellhist.crunyear ;
		              AND suspense.nrunno = wellhist.nrunno, suspense.cRunYear_in = wellhist.crunyear ;
		              AND suspense.nrunno_in = wellhist.nrunno) AND ;
		                  suspense.crectype = wellhist.crectype ;
		      WHERE NOT EMPTY(csusptype) ;
		         AND (suspense.cRunYear_in + PADL(TRANSFORM(suspense.nrunno_in), 3, '0') + suspense.crectype + suspense.cgroup ;
		              IN (SELECT  crunyear + PADL(TRANSFORM(nrunno), 3, '0') + ctypeclose + cgroup ;
		      	           FROM sysctl ;
		                   WHERE BETWEEN(dacctdate, tdDate1, tdDate2) ;
		      	             AND lDisbMan) ;
		         AND suspense.lManual = .F. ;
		         AND suspense.crectype = 'R';
		         AND BETWEEN(suspense.hDate, tdDate1, tdDate2)) ;
		         AND suspense.cownerid IN (SELECT cid FROM SELECTED );
		         AND IIF(tlJIBHist, INLIST(suspense.crectype, 'J', 'R'), INLIST(suspense.crectype, 'R')) ;
		         AND IIF(tcGroup = '**', .T., suspense.cgroup = tcGroup) ;
		      INTO CURSOR disbchk2 READWRITE  ;
		      ORDER BY cyear, CMONTH, suspense.cownerid, suspense.cTypeInv, suspense.cWellID, suspense.cTypeInt, suspense.cDirect, suspense.cProgCode ;
		      GROUP BY cyear, CMONTH, suspense.cownerid, suspense.cTypeInv, suspense.cWellID, suspense.cTypeInt, suspense.cDirect, suspense.cProgCode
		
		   SELECT  suspense.cownerid, ;
		      investor.cOwnName, ;
		      suspense.cWellID, ;
		      STR(YEAR(hDate)) AS cyear, ;
		      PADL(ALLTRIM(STR(MONTH(hDate))), 2, '0') AS CMONTH, ;
		      SUM(suspense.nIncome) AS nIncome, ;
		      IIF(tlIncDirect, SUM(nOilRev), IIF(suspense.cDirect <> 'O', IIF(suspense.cDirect <> 'B', SUM(suspense.nOilRev), 000000.00), 000000.00)) AS nOilRev, ;
		      IIF(tlIncDirect, SUM(nGasRev), IIF(suspense.cDirect <> 'G', IIF(suspense.cDirect <> 'B', SUM(suspense.nGasRev + suspense.nFlatRate), 000000.00), 000000.00)) AS nGasRev, ;
		      SUM(suspense.nTrpRev + suspense.nMiscRev1 + suspense.nMiscRev2 + suspense.nOthRev + suspense.nFlatRate) AS nOthRev, ;
		      00000.00 AS nTotBBL, ;
		      00000.00 AS nTotMcf, ;
		      00000.00 AS nTotProd, ;
		      ownpcts.nrevoil,  ;
		      ownpcts.nrevgas,  ;
		      suspense.cTypeInv, ;
		      suspense.cTypeInt, ;
		      suspense.cDirect, ;
		      suspense.hDate, ;
		      SUM(suspense.nExpense + ;
		        suspense.nTotale1 + ;
		        suspense.nTotale2 + ;
		        suspense.nTotale3 + ;
		        suspense.nTotale4 + ;
		        suspense.nTotale5 + ;
		        suspense.nTotaleA + ;
		        suspense.nTotaleB + ;
		        suspense.nPlugExp) AS nExpense, ;
		      SUM(suspense.nPlugExp) AS nPlugExp, ;
		      SUM(suspense.noiltax1 + suspense.noiltax2 + suspense.noiltax3 + suspense.noiltax4) AS nOilTax, ;
		      SUM(suspense.ngastax1 + suspense.ngastax2 + suspense.ngastax3 + suspense.ngastax4) AS nGasTax, ;
		      SUM(noiltax1) AS noiltax1, ;
		      SUM(noiltax2) AS noiltax2, ;
		      SUM(noiltax3) AS noiltax3, ;
		      SUM(noiltax4) AS noiltax4, ;
		      SUM(ngastax1) AS ngastax1, ;
		      SUM(ngastax2) AS ngastax2, ;
		      SUM(ngastax3) AS ngastax3, ;
		      SUM(ngastax4) AS ngastax4, ;
		      SUM(suspense.nothtax1 + suspense.nothtax2 + suspense.nothtax3 + suspense.nothtax4 + suspense.nTaxWith + suspense.nBackWith) AS nOthTax, ;
		      SUM(suspense.nNetCheck) AS nNetCheck, ;
		      SUM(suspense.nGather)  AS nGather, ;
		      SUM(suspense.nCompress) AS nCompress, ;
		      suspense.hyear,    ;
		      suspense.hperiod, ;
		      suspense.cProgCode, ;
		      wells.cWellName, ;
		      0.00  AS nCheckAmt ;
		      FROM suspense ;
		           JOIN wells ;
		             ON suspense.cWellID = wells.cWellID ;
		           JOIN investor ;
		             ON suspense.cownerid = investor.cownerid ;
		      WHERE suspense.lManual ;
		         AND BETWEEN(suspense.hDate, tdDate1, tdDate2) ;
		         AND suspense.cownerid IN (SELECT cid FROM SELECTED );
		         AND IIF(tlJIBHist, INLIST(suspense.crectype, 'J', 'R'), INLIST(suspense.crectype, 'R')) ;
		         AND IIF(tcGroup = '**', .T., suspense.cgroup = tcGroup) ;
		      INTO CURSOR disbchk3 READWRITE  ;
		      ORDER BY cyear, CMONTH, suspense.cownerid, suspense.cTypeInv, suspense.cWellID, suspense.cTypeInt, suspense.cDirect, suspense.cProgCode ;
		      GROUP BY cyear, CMONTH, suspense.cownerid, suspense.cTypeInv, suspense.cWellID, suspense.cTypeInt, suspense.cDirect, suspense.cProgCode
		   SET TALK OFF
		
		   SELECT disbchk1
		   APPEND FROM DBF('disbchk2')
		   APPEND FROM DBF('disbchk3')
		
		*!*	   IF tlIncPmts
		*!*	      IF THISFORM.chkincSusp.VALUE
		*!*	         SELECT  suspense.cownerid, ;
		*!*	            investor.cOwnName, ;
		*!*	            suspense.cWellID, ;
		*!*	            IIF(tnType = 1, suspense.hperiod, THIS.GetFiscalperiod(suspense.hDate)) AS CMONTH, ;
		*!*	            IIF(tnType = 1, suspense.hyear, THIS.GetFiscalyear(suspense.hDate))     AS cyear, ;
		*!*	            SUM(suspense.nIncome) AS nIncome, ;
		*!*	            IIF(tlIncDirect, SUM(nOilRev), IIF(suspense.cDirect <> 'O', IIF(suspense.cDirect <> 'B', SUM(suspense.nOilRev), 000000.00), 000000.00)) AS nOilRev, ;
		*!*	            IIF(tlIncDirect, SUM(nGasRev), IIF(suspense.cDirect <> 'G', IIF(suspense.cDirect <> 'B', SUM(suspense.nGasRev + suspense.nFlatRate), 000000.00), 000000.00)) AS nGasRev, ;
		*!*	            SUM(suspense.nTrpRev + suspense.nMiscRev1 + suspense.nMiscRev2 + suspense.nOthRev + suspense.nFlatRate) AS nOthRev, ;
		*!*	            0.00 AS nTotBBL, ;
		*!*	            0.00 AS nTotMcf, ;
		*!*	            0.00 AS nTotProd, ;
		*!*	            suspense.nrevoil, ;
		*!*	            suspense.nrevgas, ;
		*!*	            suspense.cTypeInv, ;
		*!*	            suspense.cTypeInt, ;
		*!*	            suspense.cDirect, ;
		*!*	            suspense.hDate, ;
		*!*	            suspense.crectype, ;
		*!*	            SUM(suspense.nExpense + ;
		*!*	              suspense.nTotale1 + ;
		*!*	              suspense.nTotale2 + ;
		*!*	              suspense.nTotale3 + ;
		*!*	              suspense.nTotale4 + ;
		*!*	              suspense.nTotale5 + ;
		*!*	              suspense.nTotaleA + ;
		*!*	              suspense.nTotaleB + ;
		*!*	              suspense.nPlugExp) AS nExpense, ;
		*!*	            SUM(suspense.nPlugExp) AS nPlugExp, ;
		*!*	            SUM(suspense.noiltax1 + suspense.noiltax2 + suspense.noiltax3 + suspense.noiltax4) AS nOilTax, ;
		*!*	            SUM(suspense.ngastax1 + suspense.ngastax2 + suspense.ngastax3 + suspense.ngastax4) AS nGasTax, ;
		*!*	            SUM(noiltax1) AS noiltax1, ;
		*!*	            SUM(noiltax2) AS noiltax2, ;
		*!*	            SUM(noiltax3) AS noiltax3, ;
		*!*	            SUM(noiltax4) AS noiltax4, ;
		*!*	            SUM(ngastax1) AS ngastax1, ;
		*!*	            SUM(ngastax2) AS ngastax2, ;
		*!*	            SUM(ngastax3) AS ngastax3, ;
		*!*	            SUM(ngastax4) AS ngastax4, ;
		*!*	            SUM(suspense.nothtax1 + suspense.nothtax2 + suspense.nothtax3 + suspense.nothtax4 + suspense.nTaxWith + suspense.nBackWith) AS nOthTax, ;
		*!*	            SUM(suspense.nNetCheck) AS nNetCheck, ;
		*!*	            SUM(suspense.nGather)  AS nGather, ;
		*!*	            SUM(suspense.nCompress) AS nCompress, ;
		*!*	            suspense.hyear, ;
		*!*	            suspense.hperiod, ;
		*!*	            suspense.cProgCode, ;
		*!*	            wells.cWellName, ;
		*!*	            0.00  AS nCheckAmt ;
		*!*	            FROM suspense ;
		*!*	            JOIN wells ;
		*!*	            ON suspense.cWellID = wells.cWellID ;
		*!*	            JOIN investor ;
		*!*	            ON suspense.cownerid = investor.cownerid ;
		*!*	            WHERE BETWEEN(suspense.hDate, tdDate1, tdDate2) ;
		*!*	            AND suspense.lManual = .T. ;
		*!*	            AND suspense.cownerid IN (SELECT cid FROM SELECTED );
		*!*	            AND investor.lIntegGL = .F. ;
		*!*	            AND IIF(tcGroup = '**', .T., suspense.cgroup = tcGroup) ;
		*!*	            AND suspense.crectype = 'P' ;
		*!*	            INTO CURSOR susppmts  ;
		*!*	            ORDER BY cyear, CMONTH, suspense.cownerid, suspense.cTypeInv, suspense.cWellID, suspense.cTypeInt, suspense.cDirect, suspense.cProgCode ;
		*!*	            GROUP BY cyear, CMONTH, suspense.cownerid, suspense.cTypeInv, suspense.cWellID, suspense.cTypeInt, suspense.cDirect, suspense.cProgCode
		
		*!*	         SELECT disbchk1
		*!*	         APPEND FROM DBF('susppmts')
		*!*	      ENDIF
		
		*!*	      SELECT  disbhist.cownerid, ;
		*!*	         investor.cOwnName, ;
		*!*	         disbhist.cWellID, ;
		*!*	         IIF(tnType = 1, disbhist.hperiod, THIS.GetFiscalperiod(disbhist.hDate)) AS CMONTH, ;
		*!*	         IIF(tnType = 1, disbhist.hyear, THIS.GetFiscalyear(disbhist.hDate))     AS cyear, ;
		*!*	         SUM(disbhist.nIncome) AS nIncome, ;
		*!*	         IIF(tlIncDirect, SUM(nOilRev), IIF(disbhist.cDirect <> 'O', IIF(disbhist.cDirect <> 'B', SUM(disbhist.nOilRev), 000000.00), 000000.00)) AS nOilRev, ;
		*!*	         IIF(tlIncDirect, SUM(nGasRev), IIF(disbhist.cDirect <> 'G', IIF(disbhist.cDirect <> 'B', SUM(disbhist.nGasRev + disbhist.nFlatRate), 000000.00), 000000.00)) AS nGasRev, ;
		*!*	         SUM(disbhist.nTrpRev + disbhist.nMiscRev1 + disbhist.nMiscRev2 + disbhist.nOthRev + disbhist.nFlatRate) AS nOthRev, ;
		*!*	         0.00 AS nTotBBL, ;
		*!*	         0.00 AS nTotMcf, ;
		*!*	         0.00 AS nTotProd, ;
		*!*	         ownpcts.nrevoil, ;
		*!*	         ownpcts.nrevgas, ;
		*!*	         disbhist.cTypeInv, ;
		*!*	         disbhist.cTypeInt, ;
		*!*	         disbhist.cDirect, ;
		*!*	         disbhist.hDate, ;
		*!*	         disbhist.crectype, ;
		*!*	         SUM(disbhist.nExpense + ;
		*!*	           disbhist.nTotale1 + ;
		*!*	           disbhist.nTotale2 + ;
		*!*	           disbhist.nTotale3 + ;
		*!*	           disbhist.nTotale4 + ;
		*!*	           disbhist.nTotale5 + ;
		*!*	           disbhist.nTotaleA + ;
		*!*	           disbhist.nTotaleB + ;
		*!*	           disbhist.nPlugExp) AS nExpense, ;
		*!*	         SUM(disbhist.nPlugExp) AS nPlugExp, ;
		*!*	         SUM(disbhist.noiltax1 + disbhist.noiltax2 + disbhist.noiltax3 + disbhist.noiltax4) AS nOilTax, ;
		*!*	         SUM(disbhist.ngastax1 + disbhist.ngastax2 + disbhist.ngastax3 + disbhist.ngastax4) AS nGasTax, ;
		*!*	         SUM(noiltax1) AS noiltax1, ;
		*!*	         SUM(noiltax2) AS noiltax2, ;
		*!*	         SUM(noiltax3) AS noiltax3, ;
		*!*	         SUM(noiltax4) AS noiltax4, ;
		*!*	         SUM(ngastax1) AS ngastax1, ;
		*!*	         SUM(ngastax2) AS ngastax2, ;
		*!*	         SUM(ngastax3) AS ngastax3, ;
		*!*	         SUM(ngastax4) AS ngastax4, ;
		*!*	         SUM(disbhist.nothtax1 + disbhist.nothtax2 + disbhist.nothtax3 + disbhist.nothtax4 + disbhist.nTaxWith + disbhist.nBackWith) AS nOthTax, ;
		*!*	         SUM(disbhist.nNetCheck) AS nNetCheck, ;
		*!*	         SUM(disbhist.nGather)  AS nGather, ;
		*!*	         SUM(disbhist.nCompress) AS nCompress, ;
		*!*	         disbhist.hyear, ;
		*!*	         disbhist.hperiod, ;
		*!*	         disbhist.cProgCode, ;
		*!*	         wells.cWellName, ;
		*!*	         0.00  AS nCheckAmt ;
		*!*	         FROM disbhist ;
		*!*	         LEFT OUTER JOIN ownpcts ;
		*!*	         ON disbhist.ciddisb == ownpcts.ciddisb ;
		*!*	         JOIN wells ;
		*!*	         ON disbhist.cWellID = wells.cWellID ;
		*!*	         JOIN investor ;
		*!*	         ON disbhist.cownerid = investor.cownerid ;
		*!*	         WHERE BETWEEN(disbhist.hDate, tdDate1, tdDate2) ;
		*!*	         AND disbhist.lManual = .T. ;
		*!*	         AND disbhist.cownerid IN (SELECT cid FROM SELECTED );
		*!*	         AND investor.lIntegGL = .F. ;
		*!*	         AND IIF(tcGroup = '**', .T., disbhist.cgroup = tcGroup) ;
		*!*	         AND disbhist.crectype = 'P' ;
		*!*	         INTO CURSOR disbpmts  ;
		*!*	         ORDER BY cyear, CMONTH, disbhist.cownerid, disbhist.cTypeInv, disbhist.cWellID, disbhist.cTypeInt, disbhist.cDirect, disbhist.cProgCode ;
		*!*	         GROUP BY cyear, CMONTH, disbhist.cownerid, disbhist.cTypeInv, disbhist.cWellID, disbhist.cTypeInt, disbhist.cDirect, disbhist.cProgCode
		
		*!*	      SELECT disbchk1
		*!*	      APPEND FROM DBF('disbpmts')
		*!*	   ENDIF
		
		   SET TALK ON
		   SELECT  cownerid, ;
		      cOwnName, ;
		      cWellID, ;
		      cyear, CMONTH, ;
		      SUM(nIncome) AS nIncome, ;
		      SUM(nTotBBL) AS nTotBBL, ;
		      SUM(nTotMcf) AS nTotMcf, ;
		      SUM(nTotProd) AS nTotProd, ;
		      SUM(nOilRev) AS nOilRev, ;
		      SUM(nGasRev) AS nGasRev, ;
		      hDate, ;
		      SUM(nOthRev) AS nOthRev, ;
		      cTypeInv, ;
		      cTypeInt, ;
		      cDirect, ;
		      SUM(nExpense) AS nExpense, ;
		      SUM(nPlugExp) AS nPlugExp, ;
		      SUM(nOilTax + nGasTax + nOthTax) AS nSevTaxes, ;
		      SUM(nNetCheck) AS nNetCheck, ;
		      SUM(nGather) AS nGather, ;
		      SUM(noiltax1) AS noiltax1, ;
		      SUM(noiltax2) AS noiltax2, ;
		      SUM(noiltax3) AS noiltax3, ;
		      SUM(noiltax4) AS noiltax4, ;
		      SUM(ngastax1) AS ngastax1, ;
		      SUM(ngastax2) AS ngastax2, ;
		      SUM(ngastax3) AS ngastax3, ;
		      SUM(ngastax4) AS ngastax4, ;
		      SUM(nCompress) AS nCompress, ;
		      IIF(tlByMonth, hyear, '') AS hyear, ;
		      IIF(tlByMonth, hperiod, '') AS hperiod, ;
		      cProgCode, ;
		      cWellName, ;
		      nCheckAmt ;
		      FROM disbchk1 ;
		      INTO CURSOR disbchk ;
		      ORDER BY cyear, CMONTH, cownerid, cTypeInv, cWellID ;
		      GROUP BY cyear, CMONTH, cownerid, cTypeInv, cWellID
		
		   SET TALK OFF
		CATCH TO loError
		   llReturn = .F.
		   DO errorlog WITH 'EarnedMonthly', loError.LINENO, 'Yearly Disb Summary', loError.ERRORNO, loError.MESSAGE
		   MESSAGEBOX('Unable to process the report at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		        'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		RETURN llReturn
		
		
		
		
		
		
		
		
		
		
		
		
		
	ENDPROC

	PROCEDURE earnedsummary
		LOCAL tcOwner1, tcOwner2, tcYear1, tcYear2, tcPeriod1, tcPeriod2, tlSummary, tlNoPrior
		LOCAL llReturn, loError
		*:Global tcGroup, tcWellID1, tcWellID2, tdDate1, tdDate2, tlActual, tlByMonth, tlByProgram
		*:Global tlIncDirect, tlJIBHist, tlOwnPage, tnType
		
		llReturn = .T.
		
		TRY
		   tcOwner1	   = THISFORM.swrptlook1.txtBegID.VALUE
		   tcOwner2	   = THISFORM.swrptlook1.txtEndID.VALUE
		   tcYear1	   = THISFORM.swYear1.VALUE
		   tcYear2	   = THISFORM.swYear2.VALUE
		   tcPeriod1   = THISFORM.swPeriod1.VALUE
		   tcPeriod2   = THISFORM.swperiod2.VALUE
		   tlOwnPage   = THISFORM.chkOwnPage.VALUE
		   tlNoPrior   = .F.
		   tcGroup	   = LEFT(THISFORM.swgroup1.VALUE, 2)
		   tdDate1	   = THISFORM.txtbegdate.VALUE
		   tdDate2	   = THISFORM.txtenddate.VALUE
		   tnType	   = THISFORM.opgRange.VALUE
		   tlByMonth   = THISFORM.chkByMonth.VALUE
		   tlByProgram = THISFORM.chkByProgram.VALUE
		   tlIncDirect = THISFORM.chkincdirect.VALUE
		   tlJIBHist   = THISFORM.chkjibhistory.VALUE
		   tlActual	   = THISFORM.chklActual.VALUE
		   tlIncPmts   = THISFORM.chkincPayments.VALUE
		   llSelected  = THISFORM.chkselected.VALUE
		
		   IF NOT llSelected
		      SELECT cownerid AS cid FROM investor ;
		         INTO CURSOR SELECTED ;
		         WHERE BETWEEN(cownerid, tcOwner1, tcOwner2) ;
		         ORDER BY cid
		   ENDIF
		   
		   lcYear = thisform.cboArchived.Value
		   IF NOT EMPTY(lcYear)
		      llArchived = .t.
		      lcRun_In = "disbhist.cRunYear_i"
		   ELSE
		      llArchived = .f.
		      lcRun_In = "disbhist.cRunYear_in"
		   ENDIF 
		
		   IF tnType = 2
		      tdDate1 = CTOD('01/01/' + TRANSFORM(tcYear1))
		      tdDate2 = CTOD('12/31/' + TRANSFORM(tcYear1))
		   ENDIF
		   SWSELECT('wells')
		   SET ORDER TO cWellID
		   GO TOP
		   tcWellID1 = cWellID
		   GO BOTT
		   tcWellID2 = cWellID
		
		   * Get the entries that didn't go into suspense during the time period
		   SET TALK ON
		   SELECT  disbhist.cownerid, ;
		      investor.cOwnName, ;
		      disbhist.cWellID, ;
		      SUM(disbhist.nIncome) AS nIncome, ;
		      IIF(tlIncDirect, SUM(nOilRev), IIF(disbhist.cDirect <> 'O', IIF(disbhist.cDirect <> 'B', SUM(disbhist.nOilRev), 000000.00), 000000.00)) AS nOilRev, ;
		      IIF(tlIncDirect, SUM(nGasRev), IIF(disbhist.cDirect <> 'G', IIF(disbhist.cDirect <> 'B', SUM(disbhist.nGasRev + disbhist.nFlatRate), 000000.00), 000000.00)) AS nGasRev, ;
		      SUM(disbhist.nTrpRev + disbhist.nMiscRev1 + disbhist.nMiscRev2 + disbhist.nOthRev + disbhist.nFlatRate) AS nOthRev, ;
		      IIF(tlIncDirect, SUM(wellhist.nTotBBL * (ownpcts.nrevoil / 100)), IIF(disbhist.cDirect <> 'O', IIF(disbhist.cDirect <> 'B', SUM(wellhist.nTotBBL * (ownpcts.nrevoil / 100)), 00000.00), 00000.00)) AS nTotBBL, ;
		      IIF(tlIncDirect, SUM(wellhist.nTotMcf * (ownpcts.nrevgas / 100)), IIF(disbhist.cDirect <> 'G', IIF(disbhist.cDirect <> 'B', SUM(wellhist.nTotMcf * (ownpcts.nrevgas / 100)), 00000.00), 00000.00)) AS nTotMcf, ;
		      SUM(wellhist.nTotProd * (ownpcts.nrevoth / 100)) AS nTotProd, ;
		      ownpcts.nrevoil,  ;
		      ownpcts.nrevgas,  ;
		      disbhist.cTypeInv, ;
		      disbhist.cTypeInt, ;
		      disbhist.cDirect, ;
		      disbhist.hDate, ;
		      SUM(disbhist.nExpense + ;
		        disbhist.nTotale1 + ;
		        disbhist.nTotale2 + ;
		        disbhist.nTotale3 + ;
		        disbhist.nTotale4 + ;
		        disbhist.nTotale5 + ;
		        disbhist.nTotaleA + ;
		        disbhist.nTotaleB + ;
		        disbhist.nPlugExp) AS nExpense, ;
		      SUM(disbhist.nPlugExp) AS nPlugExp, ;
		      SUM(disbhist.noiltax1 + disbhist.noiltax2 + disbhist.noiltax3 + disbhist.noiltax4) AS nOilTax, ;
		      SUM(disbhist.ngastax1 + disbhist.ngastax2 + disbhist.ngastax3 + disbhist.ngastax4) AS nGasTax, ;
		      SUM(noiltax1) AS noiltax1, ;
		      SUM(noiltax2) AS noiltax2, ;
		      SUM(noiltax3) AS noiltax3, ;
		      SUM(noiltax4) AS noiltax4, ;
		      SUM(ngastax1) AS ngastax1, ;
		      SUM(ngastax2) AS ngastax2, ;
		      SUM(ngastax3) AS ngastax3, ;
		      SUM(ngastax4) AS ngastax4, ;
		      SUM(disbhist.nothtax1 + disbhist.nothtax2 + disbhist.nothtax3 + disbhist.nothtax4 + disbhist.nTaxWith + disbhist.nBackWith) AS nOthTax, ;
		      SUM(disbhist.nNetCheck) AS nNetCheck, ;
		      SUM(disbhist.nGather)  AS nGather, ;
		      SUM(disbhist.nCompress) AS nCompress, ;
		      disbhist.hyear,    ;
		      disbhist.hperiod, ;
		      disbhist.cProgCode, ;
		      wells.cWellName, ;
		      0.00  AS nCheckAmt ;
		      FROM disbhist ;
		      JOIN ownpcts ;
		      ON disbhist.ciddisb == ownpcts.ciddisb ;
		      JOIN wells ;
		      ON disbhist.cWellID = wells.cWellID ;
		      JOIN investor ;
		      ON disbhist.cownerid = investor.cownerid ;
		      LEFT OUTER JOIN wellhist ;
		      ON disbhist.cWellID = wellhist.cWellID AND ;
		      disbhist.lManual = .F. AND ;
		      disbhist.hyear + disbhist.hperiod = wellhist.hyear + wellhist.hperiod AND ;
		      IIF(EMPTY(&lcRun_In), disbhist.crunyear = wellhist.crunyear ;
		        AND disbhist.nrunno = wellhist.nrunno, &lcRun_In = wellhist.crunyear ;
		        AND disbhist.nrunno_in = wellhist.nrunno) AND ;
		      disbhist.cRecType = wellhist.cRecType ;
		      WHERE EMPTY(csusptype) ;
		      AND (disbhist.crunyear + PADL(TRANSFORM(disbhist.nrunno), 3, '0') + disbhist.cRecType + disbhist.cgroup ;
		        IN (SELECT  crunyear + PADL(TRANSFORM(nrunno), 3, '0') + ctypeclose + cgroup ;
		      	FROM sysctl ;
		      	WHERE BETWEEN(dacctdate, tdDate1, tdDate2) ;
		      	AND lDisbMan) ;
		        OR ((disbhist.lManual AND disbhist.nrunno # 9999);
		      	AND BETWEEN(disbhist.hDate, tdDate1, tdDate2))) ;
		      AND disbhist.cownerid IN (SELECT cid FROM SELECTED );
		      AND IIF(tlJIBHist, INLIST(disbhist.cRecType, 'J', 'R'), INLIST(disbhist.cRecType, 'R')) ;
		      AND IIF(tcGroup = '**', .T., disbhist.cgroup = tcGroup) ;
		      INTO CURSOR disbchk1 READWRITE  ;
		      ORDER BY disbhist.cownerid, disbhist.cTypeInv, disbhist.cWellID, disbhist.cTypeInt, disbhist.cDirect, disbhist.cProgCode ;
		      GROUP BY disbhist.cownerid, disbhist.cTypeInv, disbhist.cWellID, disbhist.cTypeInt, disbhist.cDirect, disbhist.cProgCode
		
		   * Get the entries that did go into suspense that were created during the time period
		   SELECT  disbhist.cownerid, ;
		      investor.cOwnName, ;
		      disbhist.cWellID, ;
		      SUM(disbhist.nIncome) AS nIncome, ;
		      IIF(tlIncDirect, SUM(nOilRev), IIF(disbhist.cDirect <> 'O', IIF(disbhist.cDirect <> 'B', SUM(disbhist.nOilRev), 000000.00), 000000.00)) AS nOilRev, ;
		      IIF(tlIncDirect, SUM(nGasRev), IIF(disbhist.cDirect <> 'G', IIF(disbhist.cDirect <> 'B', SUM(disbhist.nGasRev + disbhist.nFlatRate), 000000.00), 000000.00)) AS nGasRev, ;
		      SUM(disbhist.nTrpRev + disbhist.nMiscRev1 + disbhist.nMiscRev2 + disbhist.nOthRev + disbhist.nFlatRate) AS nOthRev, ;
		      IIF(tlIncDirect, SUM(wellhist.nTotBBL * (ownpcts.nrevoil / 100)), IIF(disbhist.cDirect <> 'O', IIF(disbhist.cDirect <> 'B', SUM(wellhist.nTotBBL * (ownpcts.nrevoil / 100)), 00000.00), 00000.00)) AS nTotBBL, ;
		      IIF(tlIncDirect, SUM(wellhist.nTotMcf * (ownpcts.nrevgas / 100)), IIF(disbhist.cDirect <> 'G', IIF(disbhist.cDirect <> 'B', SUM(wellhist.nTotMcf * (ownpcts.nrevgas / 100)), 00000.00), 00000.00)) AS nTotMcf, ;
		      SUM(wellhist.nTotProd * (ownpcts.nrevoth / 100)) AS nTotProd, ;
		      ownpcts.nrevoil,  ;
		      ownpcts.nrevgas,  ;
		      disbhist.cTypeInv, ;
		      disbhist.cTypeInt, ;
		      disbhist.cDirect, ;
		      disbhist.hDate, ;
		      SUM(disbhist.nExpense + ;
		        disbhist.nTotale1 + ;
		        disbhist.nTotale2 + ;
		        disbhist.nTotale3 + ;
		        disbhist.nTotale4 + ;
		        disbhist.nTotale5 + ;
		        disbhist.nTotaleA + ;
		        disbhist.nTotaleB + ;
		        disbhist.nPlugExp) AS nExpense, ;
		      SUM(disbhist.nPlugExp) AS nPlugExp, ;
		      SUM(disbhist.noiltax1 + disbhist.noiltax2 + disbhist.noiltax3 + disbhist.noiltax4) AS nOilTax, ;
		      SUM(disbhist.ngastax1 + disbhist.ngastax2 + disbhist.ngastax3 + disbhist.ngastax4) AS nGasTax, ;
		      SUM(noiltax1) AS noiltax1, ;
		      SUM(noiltax2) AS noiltax2, ;
		      SUM(noiltax3) AS noiltax3, ;
		      SUM(noiltax4) AS noiltax4, ;
		      SUM(ngastax1) AS ngastax1, ;
		      SUM(ngastax2) AS ngastax2, ;
		      SUM(ngastax3) AS ngastax3, ;
		      SUM(ngastax4) AS ngastax4, ;
		      SUM(disbhist.nothtax1 + disbhist.nothtax2 + disbhist.nothtax3 + disbhist.nothtax4 + disbhist.nTaxWith + disbhist.nBackWith) AS nOthTax, ;
		      SUM(disbhist.nNetCheck) AS nNetCheck, ;
		      SUM(disbhist.nGather)  AS nGather, ;
		      SUM(disbhist.nCompress) AS nCompress, ;
		      disbhist.hyear,    ;
		      disbhist.hperiod, ;
		      disbhist.cProgCode, ;
		      wells.cWellName, ;
		      0.00  AS nCheckAmt ;
		      FROM disbhist ;
		          JOIN ownpcts ;
		               ON disbhist.ciddisb == ownpcts.ciddisb ;
		          JOIN wells ;
		               ON disbhist.cWellID = wells.cWellID ;
		          JOIN investor ;
		               ON disbhist.cownerid = investor.cownerid ;
		          LEFT OUTER JOIN wellhist ;
		               ON disbhist.cWellID = wellhist.cWellID AND ;
		                  disbhist.lManual = .F. AND ;
		                  disbhist.hyear + disbhist.hperiod = wellhist.hyear + wellhist.hperiod AND ;
		                  IIF(EMPTY(&lcRun_In), disbhist.crunyear = wellhist.crunyear ;
		      	            AND disbhist.nrunno = wellhist.nrunno, &lcRun_In = wellhist.crunyear ;
		                    AND disbhist.nrunno_in = wellhist.nrunno) AND ;
		                  disbhist.cRecType = wellhist.cRecType ;
		      WHERE NOT EMPTY(csusptype) ;
		            AND (&lcRun_In + PADL(TRANSFORM(disbhist.nrunno_in), 3, '0') + disbhist.cRecType + disbhist.cgroup ;
		                   IN (SELECT  crunyear + PADL(TRANSFORM(nrunno), 3, '0') + ctypeclose + cgroup ;
		      	FROM sysctl ;
		      	WHERE BETWEEN(dacctdate, tdDate1, tdDate2) ;
		             	AND lDisbMan) ;
		               OR ((disbhist.lManual AND disbhist.nrunno # 9999);
		             	AND BETWEEN(disbhist.hDate, tdDate1, tdDate2))) ;
		             AND disbhist.cownerid IN (SELECT cid FROM SELECTED );
		             AND IIF(tlJIBHist, INLIST(disbhist.cRecType, 'J', 'R'), INLIST(disbhist.cRecType, 'R')) ;
		             AND IIF(tcGroup = '**', .T., disbhist.cgroup = tcGroup) ;
		      INTO CURSOR disbchk2 READWRITE  ;
		      ORDER BY disbhist.cownerid, disbhist.cTypeInv, disbhist.cWellID, disbhist.cTypeInt, disbhist.cDirect, disbhist.cProgCode ;
		      GROUP BY disbhist.cownerid, disbhist.cTypeInv, disbhist.cWellID, disbhist.cTypeInt, disbhist.cDirect, disbhist.cProgCode
		
		   SET TALK OFF
		
		   SELECT disbchk1
		   APPEND FROM DBF('disbchk2')
		
		   * Get the entries that did go into suspense and are still in suspense
		   SELECT  suspense.cownerid, ;
		      investor.cOwnName, ;
		      suspense.cWellID, ;
		      SUM(suspense.nIncome) AS nIncome, ;
		      IIF(tlIncDirect, SUM(nOilRev), IIF(suspense.cDirect <> 'O', IIF(suspense.cDirect <> 'B', SUM(suspense.nOilRev), 000000.00), 000000.00)) AS nOilRev, ;
		      IIF(tlIncDirect, SUM(nGasRev), IIF(suspense.cDirect <> 'G', IIF(suspense.cDirect <> 'B', SUM(suspense.nGasRev + suspense.nFlatRate), 000000.00), 000000.00)) AS nGasRev, ;
		      SUM(suspense.nTrpRev + suspense.nMiscRev1 + suspense.nMiscRev2 + suspense.nOthRev + suspense.nFlatRate) AS nOthRev, ;
		      IIF(tlIncDirect, SUM(wellhist.nTotBBL * (suspense.nrevoil / 100)), IIF(suspense.cDirect <> 'O', IIF(suspense.cDirect <> 'B', SUM(wellhist.nTotBBL * (suspense.nrevoil / 100)), 00000.00), 00000.00)) AS nTotBBL, ;
		      IIF(tlIncDirect, SUM(wellhist.nTotMcf * (suspense.nrevgas / 100)), IIF(suspense.cDirect <> 'G', IIF(suspense.cDirect <> 'B', SUM(wellhist.nTotMcf * (suspense.nrevgas / 100)), 00000.00), 00000.00)) AS nTotMcf, ;
		      SUM(wellhist.nTotProd * (suspense.nrevoth / 100)) AS nTotProd, ;
		      ownpcts.nrevoil,  ;
		      ownpcts.nrevgas,  ;
		      suspense.cTypeInv, ;
		      suspense.cTypeInt, ;
		      suspense.cDirect, ;
		      suspense.hDate, ;
		      SUM(suspense.nExpense + ;
		        suspense.nTotale1 + ;
		        suspense.nTotale2 + ;
		        suspense.nTotale3 + ;
		        suspense.nTotale4 + ;
		        suspense.nTotale5 + ;
		        suspense.nTotaleA + ;
		        suspense.nTotaleB + ;
		        suspense.nPlugExp) AS nExpense, ;
		      SUM(suspense.nPlugExp) AS nPlugExp, ;
		      SUM(suspense.noiltax1 + suspense.noiltax2 + suspense.noiltax3 + suspense.noiltax4) AS nOilTax, ;
		      SUM(suspense.ngastax1 + suspense.ngastax2 + suspense.ngastax3 + suspense.ngastax4) AS nGasTax, ;
		      SUM(noiltax1) AS noiltax1, ;
		      SUM(noiltax2) AS noiltax2, ;
		      SUM(noiltax3) AS noiltax3, ;
		      SUM(noiltax4) AS noiltax4, ;
		      SUM(ngastax1) AS ngastax1, ;
		      SUM(ngastax2) AS ngastax2, ;
		      SUM(ngastax3) AS ngastax3, ;
		      SUM(ngastax4) AS ngastax4, ;
		      SUM(suspense.nothtax1 + suspense.nothtax2 + suspense.nothtax3 + suspense.nothtax4 + suspense.nTaxWith + suspense.nBackWith) AS nOthTax, ;
		      SUM(suspense.nNetCheck) AS nNetCheck, ;
		      SUM(suspense.nGather)  AS nGather, ;
		      SUM(suspense.nCompress) AS nCompress, ;
		      suspense.hyear,    ;
		      suspense.hperiod, ;
		      suspense.cProgCode, ;
		      wells.cWellName, ;
		      0.00  AS nCheckAmt ;
		      FROM suspense ;
		      JOIN wells ;
		      ON suspense.cWellID = wells.cWellID ;
		      JOIN investor ;
		      ON suspense.cownerid = investor.cownerid ;
		      LEFT OUTER JOIN wellhist ;
		      ON suspense.cWellID = wellhist.cWellID AND ;
		      suspense.lManual = .F. AND ;
		      suspense.hyear + suspense.hperiod = wellhist.hyear + wellhist.hperiod AND ;
		      IIF(EMPTY(suspense.cRunYear_in), disbhist.crunyear = wellhist.crunyear ;
		        AND suspense.nrunno = wellhist.nrunno, suspense.cRunYear_in = wellhist.crunyear ;
		        AND suspense.nrunno_in = wellhist.nrunno) AND ;
		      suspense.cRecType = wellhist.cRecType ;
		      WHERE NOT EMPTY(csusptype) ;
		      AND (suspense.cRunYear_in + PADL(TRANSFORM(suspense.nrunno_in), 3, '0') + suspense.cRecType + suspense.cgroup ;
		        IN (SELECT  crunyear + PADL(TRANSFORM(nrunno), 3, '0') + ctypeclose + cgroup ;
		      	FROM sysctl ;
		      	WHERE BETWEEN(dacctdate, tdDate1, tdDate2) ;
		      	AND lDisbMan) ;
		        AND suspense.lManual = .F. ;
		        AND BETWEEN(suspense.hDate, tdDate1, tdDate2)) ;
		      AND suspense.cownerid IN (SELECT cid FROM SELECTED );
		      AND IIF(tlJIBHist, INLIST(suspense.cRecType, 'J', 'R'), INLIST(suspense.cRecType, 'R')) ;
		      AND IIF(tcGroup = '**', .T., suspense.cgroup = tcGroup) ;
		      INTO CURSOR disbchk2 READWRITE  ;
		      ORDER BY suspense.cownerid, suspense.cTypeInv, suspense.cWellID, suspense.cTypeInt, suspense.cDirect, suspense.cProgCode ;
		      GROUP BY suspense.cownerid, suspense.cTypeInv, suspense.cWellID, suspense.cTypeInt, suspense.cDirect, suspense.cProgCode
		
		   SELECT  suspense.cownerid, ;
		      investor.cOwnName, ;
		      suspense.cWellID, ;
		      SUM(suspense.nIncome) AS nIncome, ;
		      IIF(tlIncDirect, SUM(nOilRev), IIF(suspense.cDirect <> 'O', IIF(suspense.cDirect <> 'B', SUM(suspense.nOilRev), 000000.00), 000000.00)) AS nOilRev, ;
		      IIF(tlIncDirect, SUM(nGasRev), IIF(suspense.cDirect <> 'G', IIF(suspense.cDirect <> 'B', SUM(suspense.nGasRev + suspense.nFlatRate), 000000.00), 000000.00)) AS nGasRev, ;
		      SUM(suspense.nTrpRev + suspense.nMiscRev1 + suspense.nMiscRev2 + suspense.nOthRev + suspense.nFlatRate) AS nOthRev, ;
		      00000.00 AS nTotBBL, ;
		      00000.00 AS nTotMcf, ;
		      00000.00 AS nTotProd, ;
		      ownpcts.nrevoil,  ;
		      ownpcts.nrevgas,  ;
		      suspense.cTypeInv, ;
		      suspense.cTypeInt, ;
		      suspense.cDirect, ;
		      suspense.hDate, ;
		      SUM(suspense.nExpense + ;
		        suspense.nTotale1 + ;
		        suspense.nTotale2 + ;
		        suspense.nTotale3 + ;
		        suspense.nTotale4 + ;
		        suspense.nTotale5 + ;
		        suspense.nTotaleA + ;
		        suspense.nTotaleB + ;
		        suspense.nPlugExp) AS nExpense, ;
		      SUM(suspense.nPlugExp) AS nPlugExp, ;
		      SUM(suspense.noiltax1 + suspense.noiltax2 + suspense.noiltax3 + suspense.noiltax4) AS nOilTax, ;
		      SUM(suspense.ngastax1 + suspense.ngastax2 + suspense.ngastax3 + suspense.ngastax4) AS nGasTax, ;
		      SUM(noiltax1) AS noiltax1, ;
		      SUM(noiltax2) AS noiltax2, ;
		      SUM(noiltax3) AS noiltax3, ;
		      SUM(noiltax4) AS noiltax4, ;
		      SUM(ngastax1) AS ngastax1, ;
		      SUM(ngastax2) AS ngastax2, ;
		      SUM(ngastax3) AS ngastax3, ;
		      SUM(ngastax4) AS ngastax4, ;
		      SUM(suspense.nothtax1 + suspense.nothtax2 + suspense.nothtax3 + suspense.nothtax4 + suspense.nTaxWith + suspense.nBackWith) AS nOthTax, ;
		      SUM(suspense.nNetCheck) AS nNetCheck, ;
		      SUM(suspense.nGather)  AS nGather, ;
		      SUM(suspense.nCompress) AS nCompress, ;
		      suspense.hyear,    ;
		      suspense.hperiod, ;
		      suspense.cProgCode, ;
		      wells.cWellName, ;
		      0.00  AS nCheckAmt ;
		      FROM suspense ;
		          JOIN wells ;
		               ON suspense.cWellID = wells.cWellID ;
		          JOIN investor ;
		               ON suspense.cownerid = investor.cownerid ;
		          LEFT OUTER JOIN wellhist ;
		               ON suspense.cWellID = wellhist.cWellID AND ;
		                  suspense.hyear + suspense.hperiod = wellhist.hyear + wellhist.hperiod AND ;
		                  IIF(EMPTY(suspense.cRunYear_in), disbhist.crunyear = wellhist.crunyear ;
		                    AND suspense.nrunno = wellhist.nrunno, suspense.cRunYear_in = wellhist.crunyear ;
		                    AND suspense.nrunno_in = wellhist.nrunno) AND ;
		                      suspense.cRecType = wellhist.cRecType ;
		      WHERE BETWEEN(suspense.hDate, tdDate1, tdDate2) ;
		         AND suspense.lManual = .t.  ;
		         AND suspense.cownerid IN (SELECT cid FROM SELECTED );
		         AND IIF(tlJIBHist, INLIST(suspense.cRecType, 'J', 'R'), INLIST(suspense.cRecType, 'R')) ;
		         AND IIF(tcGroup = '**', .T., suspense.cgroup = tcGroup) ;
		      INTO CURSOR disbchk3 READWRITE  ;
		      ORDER BY suspense.cownerid, suspense.cTypeInv, suspense.cWellID, suspense.cTypeInt, suspense.cDirect, suspense.cProgCode ;
		      GROUP BY suspense.cownerid, suspense.cTypeInv, suspense.cWellID, suspense.cTypeInt, suspense.cDirect, suspense.cProgCode
		
		   SET TALK OFF
		
		   SELECT disbchk1
		   APPEND FROM DBF('disbchk2')
		   APPEND FROM DBF('disbchk3')
		
		*!*	   IF tlIncPmts
		*!*	      IF THISFORM.chkincSusp.VALUE
		*!*	         SELECT  suspense.cownerid, ;
		*!*	            investor.cOwnName, ;
		*!*	            suspense.cWellID, ;
		*!*	            SUM(suspense.nIncome) AS nIncome, ;
		*!*	            IIF(tlIncDirect, SUM(nOilRev), IIF(suspense.cDirect <> 'O', IIF(suspense.cDirect <> 'B', SUM(suspense.nOilRev), 000000.00), 000000.00)) AS nOilRev, ;
		*!*	            IIF(tlIncDirect, SUM(nGasRev), IIF(suspense.cDirect <> 'G', IIF(suspense.cDirect <> 'B', SUM(suspense.nGasRev + suspense.nFlatRate), 000000.00), 000000.00)) AS nGasRev, ;
		*!*	            SUM(suspense.nTrpRev + suspense.nMiscRev1 + suspense.nMiscRev2 + suspense.nOthRev + suspense.nFlatRate) AS nOthRev, ;
		*!*	            0.00 AS nTotBBL, ;
		*!*	            0.00 AS nTotMcf, ;
		*!*	            0.00 AS nTotProd, ;
		*!*	            suspense.nrevoil, ;
		*!*	            suspense.nrevgas, ;
		*!*	            suspense.cTypeInv, ;
		*!*	            suspense.cTypeInt, ;
		*!*	            suspense.cDirect, ;
		*!*	            suspense.hDate, ;
		*!*	            suspense.cRecType, ;
		*!*	            SUM(suspense.nExpense + ;
		*!*	              suspense.nTotale1 + ;
		*!*	              suspense.nTotale2 + ;
		*!*	              suspense.nTotale3 + ;
		*!*	              suspense.nTotale4 + ;
		*!*	              suspense.nTotale5 + ;
		*!*	              suspense.nTotaleA + ;
		*!*	              suspense.nTotaleB + ;
		*!*	              suspense.nPlugExp) AS nExpense, ;
		*!*	            SUM(suspense.nPlugExp) AS nPlugExp, ;
		*!*	            SUM(suspense.noiltax1 + suspense.noiltax2 + suspense.noiltax3 + suspense.noiltax4) AS nOilTax, ;
		*!*	            SUM(suspense.ngastax1 + suspense.ngastax2 + suspense.ngastax3 + suspense.ngastax4) AS nGasTax, ;
		*!*	            SUM(noiltax1) AS noiltax1, ;
		*!*	            SUM(noiltax2) AS noiltax2, ;
		*!*	            SUM(noiltax3) AS noiltax3, ;
		*!*	            SUM(noiltax4) AS noiltax4, ;
		*!*	            SUM(ngastax1) AS ngastax1, ;
		*!*	            SUM(ngastax2) AS ngastax2, ;
		*!*	            SUM(ngastax3) AS ngastax3, ;
		*!*	            SUM(ngastax4) AS ngastax4, ;
		*!*	            SUM(suspense.nothtax1 + suspense.nothtax2 + suspense.nothtax3 + suspense.nothtax4 + suspense.nTaxWith + suspense.nBackWith) AS nOthTax, ;
		*!*	            SUM(suspense.nNetCheck) AS nNetCheck, ;
		*!*	            SUM(suspense.nGather)  AS nGather, ;
		*!*	            SUM(suspense.nCompress) AS nCompress, ;
		*!*	            suspense.hyear, ;
		*!*	            suspense.hperiod, ;
		*!*	            suspense.cProgCode, ;
		*!*	            wells.cWellName, ;
		*!*	            0.00  AS nCheckAmt ;
		*!*	            FROM suspense ;
		*!*	            JOIN wells ;
		*!*	            ON suspense.cWellID = wells.cWellID ;
		*!*	            JOIN investor ;
		*!*	            ON suspense.cownerid = investor.cownerid ;
		*!*	            WHERE BETWEEN(suspense.hDate, tdDate1, tdDate1) ;
		*!*	            AND suspense.lManual = .T. ;
		*!*	            AND suspense.cownerid IN (SELECT cid FROM SELECTED );
		*!*	            AND investor.lIntegGL = .F. ;
		*!*	            AND IIF(tcGroup = '**', .T., suspense.cgroup = tcGroup) ;
		*!*	            AND suspense.cRecType = 'P' ;
		*!*	            INTO CURSOR susppmts  ;
		*!*	            ORDER BY suspense.hyear, suspense.hperiod, suspense.cownerid, suspense.cTypeInv, suspense.cWellID, suspense.cTypeInt, suspense.cDirect, suspense.cProgCode ;
		*!*	            GROUP BY suspense.hyear, suspense.hperiod, suspense.cownerid, suspense.cTypeInv, suspense.cWellID, suspense.cTypeInt, suspense.cDirect, suspense.cProgCode
		
		*!*	         SELECT disbchk1
		*!*	         APPEND FROM DBF('susppmts')
		*!*	      ENDIF
		
		*!*	      SELECT  disbhist.cownerid, ;
		*!*	         investor.cOwnName, ;
		*!*	         disbhist.cWellID, ;
		*!*	         SUM(disbhist.nIncome) AS nIncome, ;
		*!*	         IIF(tlIncDirect, SUM(nOilRev), IIF(disbhist.cDirect <> 'O', IIF(disbhist.cDirect <> 'B', SUM(disbhist.nOilRev), 000000.00), 000000.00)) AS nOilRev, ;
		*!*	         IIF(tlIncDirect, SUM(nGasRev), IIF(disbhist.cDirect <> 'G', IIF(disbhist.cDirect <> 'B', SUM(disbhist.nGasRev + disbhist.nFlatRate), 000000.00), 000000.00)) AS nGasRev, ;
		*!*	         SUM(disbhist.nTrpRev + disbhist.nMiscRev1 + disbhist.nMiscRev2 + disbhist.nOthRev + disbhist.nFlatRate) AS nOthRev, ;
		*!*	         0.00 AS nTotBBL, ;
		*!*	         0.00 AS nTotMcf, ;
		*!*	         0.00 AS nTotProd, ;
		*!*	         ownpcts.nrevoil, ;
		*!*	         ownpcts.nrevgas, ;
		*!*	         disbhist.cTypeInv, ;
		*!*	         disbhist.cTypeInt, ;
		*!*	         disbhist.cDirect, ;
		*!*	         disbhist.hDate, ;
		*!*	         disbhist.cRecType, ;
		*!*	         SUM(disbhist.nExpense + ;
		*!*	           disbhist.nTotale1 + ;
		*!*	           disbhist.nTotale2 + ;
		*!*	           disbhist.nTotale3 + ;
		*!*	           disbhist.nTotale4 + ;
		*!*	           disbhist.nTotale5 + ;
		*!*	           disbhist.nTotaleA + ;
		*!*	           disbhist.nTotaleB + ;
		*!*	           disbhist.nPlugExp) AS nExpense, ;
		*!*	         SUM(disbhist.nPlugExp) AS nPlugExp, ;
		*!*	         SUM(disbhist.noiltax1 + disbhist.noiltax2 + disbhist.noiltax3 + disbhist.noiltax4) AS nOilTax, ;
		*!*	         SUM(disbhist.ngastax1 + disbhist.ngastax2 + disbhist.ngastax3 + disbhist.ngastax4) AS nGasTax, ;
		*!*	         SUM(noiltax1) AS noiltax1, ;
		*!*	         SUM(noiltax2) AS noiltax2, ;
		*!*	         SUM(noiltax3) AS noiltax3, ;
		*!*	         SUM(noiltax4) AS noiltax4, ;
		*!*	         SUM(ngastax1) AS ngastax1, ;
		*!*	         SUM(ngastax2) AS ngastax2, ;
		*!*	         SUM(ngastax3) AS ngastax3, ;
		*!*	         SUM(ngastax4) AS ngastax4, ;
		*!*	         SUM(disbhist.nothtax1 + disbhist.nothtax2 + disbhist.nothtax3 + disbhist.nothtax4 + disbhist.nTaxWith + disbhist.nBackWith) AS nOthTax, ;
		*!*	         SUM(disbhist.nNetCheck) AS nNetCheck, ;
		*!*	         SUM(disbhist.nGather)  AS nGather, ;
		*!*	         SUM(disbhist.nCompress) AS nCompress, ;
		*!*	         disbhist.hyear, ;
		*!*	         disbhist.hperiod, ;
		*!*	         disbhist.cProgCode, ;
		*!*	         wells.cWellName, ;
		*!*	         0.00  AS nCheckAmt ;
		*!*	         FROM disbhist ;
		*!*	         LEFT OUTER JOIN ownpcts ;
		*!*	         ON disbhist.ciddisb == ownpcts.ciddisb ;
		*!*	         JOIN wells ;
		*!*	         ON disbhist.cWellID = wells.cWellID ;
		*!*	         JOIN investor ;
		*!*	         ON disbhist.cownerid = investor.cownerid ;
		*!*	         WHERE BETWEEN(disbhist.hDate, tdDate1, tdDate2) ;
		*!*	         AND disbhist.lManual = .T. ;
		*!*	         AND disbhist.cownerid IN (SELECT cid FROM SELECTED );
		*!*	         AND investor.lIntegGL = .F. ;
		*!*	         AND IIF(tcGroup = '**', .T., disbhist.cgroup = tcGroup) ;
		*!*	         AND disbhist.cRecType = 'P' ;
		*!*	         INTO CURSOR disbpmts  ;
		*!*	         ORDER BY disbhist.hyear, disbhist.hperiod, disbhist.cownerid, disbhist.cTypeInv, disbhist.cWellID, disbhist.cTypeInt, disbhist.cDirect, disbhist.cProgCode ;
		*!*	         GROUP BY disbhist.hyear, disbhist.hperiod, disbhist.cownerid, disbhist.cTypeInv, disbhist.cWellID, disbhist.cTypeInt, disbhist.cDirect, disbhist.cProgCode
		
		*!*	      SELECT disbchk1
		*!*	      APPEND FROM DBF('disbpmts')
		*!*	   ENDIF
		   SET TALK ON
		   SELECT  cownerid, ;
		      cOwnName, ;
		      cWellID, ;
		      SUM(nIncome) AS nIncome, ;
		      SUM(nTotBBL) AS nTotBBL, ;
		      SUM(nTotMcf) AS nTotMcf, ;
		      SUM(nTotProd) AS nTotProd, ;
		      SUM(nOilRev) AS nOilRev, ;
		      SUM(nGasRev) AS nGasRev, ;
		      hDate, ;
		      SUM(nOthRev) AS nOthRev, ;
		      cTypeInv, ;
		      cTypeInt, ;
		      cDirect, ;
		      SUM(nExpense) AS nExpense, ;
		      SUM(nPlugExp) AS nPlugExp, ;
		      SUM(nOilTax + nGasTax + nOthTax) AS nSevTaxes, ;
		      SUM(nNetCheck) AS nNetCheck, ;
		      SUM(nGather) AS nGather, ;
		      SUM(noiltax1) AS noiltax1, ;
		      SUM(noiltax2) AS noiltax2, ;
		      SUM(noiltax3) AS noiltax3, ;
		      SUM(noiltax4) AS noiltax4, ;
		      SUM(ngastax1) AS ngastax1, ;
		      SUM(ngastax2) AS ngastax2, ;
		      SUM(ngastax3) AS ngastax3, ;
		      SUM(ngastax4) AS ngastax4, ;
		      SUM(nCompress) AS nCompress, ;
		      IIF(tlByMonth, hyear, '') AS hyear, ;
		      IIF(tlByMonth, hperiod, '') AS hperiod, ;
		      cProgCode, ;
		      cWellName, ;
		      nCheckAmt ;
		      FROM disbchk1 ;
		      INTO CURSOR disbchk ;
		      ORDER BY cownerid, cTypeInv, cWellID ;
		      GROUP BY cownerid, cTypeInv, cWellID
		
		   SET TALK OFF
		CATCH TO loError
		   llReturn = .F.
		   DO errorlog WITH 'EarnedSummary', loError.LINENO, 'Yearly Disb Summary', loError.ERRORNO, loError.MESSAGE
		   MESSAGEBOX('Unable to process the report at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		        'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		RETURN llReturn
		
		
		
		
		
		
		
		
		
		
		
		
		
	ENDPROC

	PROCEDURE getfiscalperiod
		LPARAMETERS tdDate
		LOCAL lcMonth
		
		lcMonth = PADL(TRANSFORM(MONTH(tdDate)),2,'0')
		
		RETURN lcMonth
	ENDPROC

	PROCEDURE getfiscalyear
		LPARAMETERS tdDate
		LOCAL lcYear
		
		lcYear = TRANSFORM(YEAR(tdDate))
		IF LEN(lcYear) < 4
		   lcYear = '20' + lcYear 
		ENDIF 
		   
		RETURN lcYear
	ENDPROC

	PROCEDURE Init
		IF DODEFAULT()
		   SELECT investor
		   SET ORDER TO cOwnerID
		   GO TOP
		
		   THISFORM.swrptlook1.txtBegName.VALUE = cSortField
		   THISFORM.swrptlook1.txtBegID.VALUE = cOwnerID
		   GO BOTTOM
		
		   THISFORM.swrptlook1.txtEndName.VALUE = cSortField
		   THISFORM.swrptlook1.txtEndID.VALUE = cOwnerID
		
		   THISFORM.txtbegdate.ENABLED = .F.
		   THISFORM.txtenddate.ENABLED = .F.
		
		   THISFORM.chkByMonth.VALUE = .F.
		   THISFORM.chkOwnPage.VALUE = .F.
		   THISFORM.chkByProgram.VALUE = .F.
		   THISFORM.chkincdirect.VALUE = .F.
		   
		   thisform.CheckArchived()
		ENDIF
		
	ENDPROC

	PROCEDURE loadmonth
		LOCAL lnX, lnMonth, lcYear
		LOCAL lnMonth1
		LOCAL loError, llReturn
		
		llReturn = .T.
		
		TRY
		   tcYear = THISFORM.swYear1.VALUE
		   tnType      = THISFORM.opgRange.VALUE
		
		   DIME THISFORM.laMonth[12]
		   DIME THISFORM.laMonthEnd[12]
		
		*
		*  Load the titles for the Months
		*
		   THISFORM.laMonth[1] = 'January'
		*
		*  Check for leap year
		*
		   IF MOD(VAL(tcYear), 4) = 0
		      THISFORM.laMonth[2] = 'February '
		   ELSE
		      THISFORM.laMonth[2] = 'February '
		   ENDIF
		
		   THISFORM.laMonth[3]  = 'March '
		   THISFORM.laMonth[4]  = 'April '
		   THISFORM.laMonth[5]  = 'May '
		   THISFORM.laMonth[6]  = 'June '
		   THISFORM.laMonth[7]  = 'July '
		   THISFORM.laMonth[8]  = 'August '
		   THISFORM.laMonth[9]  = 'September '
		   THISFORM.laMonth[10] = 'October '
		   THISFORM.laMonth[11] = 'November '
		   THISFORM.laMonth[12] = 'December '
		
		*
		*  Get the beginning month of the fiscal year
		*
		* Changed 1/8/23 by pws - Always use calendar year for owner reports.
		IF NOT tnType = 1
		*!*	   IF m.goapp.lAMVersion
		*!*	      swselect('glopt')
		*!*	      GO TOP
		*!*	      lnMonth  = VAL(glopt.cfybegin)
		*!*	      lnMonth1 = lnMonth
		*!*	      lcYear   = tcYear
		*!*	   ELSE
		      lnMonth1 = 1
		      lnMonth  = 1
		      lcYear   = STR(YEAR(DATE()), 4)
		*!*	   ENDIF
		
		   IF THISFORM.opgRange.VALUE = 1  &&  Production year, so we don't care about when the fiscal year starts
		      lnMonth1 = 1
		      lnMonth  = 1
		   ENDIF
		
		   IF lnMonth < 1
		      lnMonth = 1
		   ENDIF
		   IF lnMonth1 < 1
		      lnMonth1 = 1
		   ENDIF
		ELSE
		   lnMonth1 = 1
		   lcYear = tcYear
		   lnMonth  = 1
		ENDIF 
		
		
		*
		*  Load up the monthend array
		*
		   FOR lnX = 1 TO 12
		      THISFORM.laMonthEnd[lnX] = THISFORM.laMonth[lnMonth1]
		      IF lnMonth1 = 12
		         lnMonth1 = 1
		         lcYear   = STR(VAL(lcYear) + 1, 4)
		      ELSE
		         lnMonth1 = lnMonth1 + 1
		      ENDIF
		   ENDFOR
		
		CATCH TO loError
		   llReturn = .F.
		   DO errorlog WITH 'LoadMonth', loError.LineNo, 'Yearly Disb Summary', loError.ERRORNO, loError.MESSAGE
		   MESSAGEBOX('Unable to process the report at this time. Check the System Log found under Other Reports for more information.' + CHR(10)+CHR(10) + ;
		              'Contact SherWare Support for help at support@sherware.com',16,'Problem Encountered')
		ENDTRY
		
		RETURN llReturn 
		
		
		
	ENDPROC

	PROCEDURE report
		LPARAMETERS cbutton
		
		LOCAL lcAlias
		
		lcAlias = ALIAS()
		
		SWSELECT('options')
		GO TOP
		glGrpName = lGrpName
		
		IF glGrpName
		   m.cGrpName = SUBSTR(thisform.swgroup1.value,5)
		ELSE
		   m.cGrpName = ' '
		ENDIF
		
		SELECT (lcAlias)
		
		DODEFAULT(cButton)      
		   
	ENDPROC

	PROCEDURE cboArchived.Valid
		IF DODEFAULT()
		   lcYear = this.Value
		   IF NOT EMPTY(lcYear)
		      thisform.swyear1.set('value',lcYear)
		      thisform.swyear2.set('value',lcYear)
		      thisform.opgRange.Value = 2
		   ENDIF
		ENDIF 
	ENDPROC

	PROCEDURE chklActual.Click
		IF this.Value
		   thisform.chkincSusp.Value = .f.
		   thisform.chkincsusp.Enabled = .f.
		   thisform.chkincpayments.Value = .f.
		   thisform.chkincpayments.Enabled = .f.
		ELSE
		   thisform.chkincsusp.Enabled = .t.  
		   thisform.chkincpayments.Enabled = .t.
		ENDIF 
	ENDPROC

	PROCEDURE chkSelected.Click
		IF this.Value
		   DO FORM commonsource\selected-ids WITH 'OWNER' LINKED 
		   lnCount = RECCOUNT('selected')
		   thisform.lblselected.Caption = TRANSFORM(lnCount) + ' Owners Selected'
		   thisform.lblselected.Visible = .T.
		   thisform.lblbegID.Visible = .F.
		   thisform.lblendID.Visible = .F.
		   thisform.swrptlook1.Visible = .F.
		ELSE
		   thisform.lblselected.Visible = .F.
		   thisform.lblbegID.Visible = .T.
		   thisform.lblendID.Visible = .T.
		   thisform.swrptlook1.Visible = .T.
		ENDIF 
	ENDPROC

	PROCEDURE opgRange.AccDate.Click
		thisform.swyear1.enabled   = .f.
		thisform.swyear2.enabled   = .f.
		thisform.swperiod1.enabled   = .f.
		thisform.swperiod2.enabled   = .f.
		thisform.txtbegdate.enabled   = .t.
		thisform.txtenddate.enabled   = .t.
		thisform.chklActual.value = .f.
		thisform.chklActual.Visible = .t.
		
	ENDPROC

	PROCEDURE opgRange.AccYear.Click
		thisform.swyear1.enabled   = .t.
		thisform.swyear2.enabled   = .f.
		thisform.swperiod1.enabled   = .f.
		thisform.swperiod2.enabled   = .f.
		thisform.txtbegdate.enabled   = .f.
		thisform.txtenddate.enabled   = .f.
		thisform.chklActual.value = .f.
		thisform.chklActual.Visible = .t.
		
	ENDPROC

	PROCEDURE opgRange.Init
		this.value = 1
		
		thisform.txtbegdate.enabled = .f.
		thisform.txtenddate.enabled = .f.
	ENDPROC

	PROCEDURE opgRange.ProdYear.Click
		thisform.swyear1.enabled   = .t.
		thisform.swyear2.enabled   = .t.
		thisform.swperiod1.enabled   = .t.
		thisform.swperiod2.enabled   = .t.
		thisform.txtbegdate.enabled   = .f.
		thisform.txtenddate.enabled   = .f.
		thisform.chklActual.value = .f.
		thisform.chklActual.Visible = .f.
		thisform.chkIncSusp.value = .t.
		thisform.chkincSusp.Enabled = .t.
	ENDPROC

	PROCEDURE Swrptlook1.Swlookupbutton1.Click
		LOCAL lcList
		PRIV llOK
		
		llOK = .F.
		lcList = 'cownerid,csortfield'
		
		DO FORM ..\custom\picklist WITH 'Investor', lcList, thisform.swrptlook1.txtbegid.value, 2
		
		IF llOK
		   thisform.swrptlook1.txtBegId.value = cOwnerID
		   thisform.swrptlook1.txtBegName.value = cSortField
		   thisform.swrptlook1.txtBegId.refresh()
		   thisform.swrptlook1.txtBegName.refresh()
		ENDIF   
		
		thisform.setnextcontrol(thisform.swrptlook1.txtBegID)   
		
	ENDPROC

	PROCEDURE Swrptlook1.Swlookupbutton1.When
		RETURN MDOWN()
	ENDPROC

	PROCEDURE Swrptlook1.Swlookupbutton2.Click
		LOCAL lcList
		PRIV llOK
		
		llOK = .F.
		lcList = 'cownerid,csortfield'
		
		DO FORM ..\custom\picklist WITH 'Investor', lcList, thisform.swrptlook1.txtendid.value, 2
		
		IF llOK
		   thisform.swrptlook1.txtEndId.value = cOwnerID
		   thisform.swrptlook1.txtEndName.value = cSortField
		   thisform.swrptlook1.txtEndId.refresh()
		   thisform.swrptlook1.txtEndName.refresh()
		ENDIF   
		
		thisform.setnextcontrol(thisform.swrptlook1.txtEndID)   
		
	ENDPROC

	PROCEDURE Swrptlook1.Swlookupbutton2.When
		RETURN MDOWN()
	ENDPROC

ENDDEFINE
