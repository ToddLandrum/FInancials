*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="dmrrevclose.scx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="2" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Cursor1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor6" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor8" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor9" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor10" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor11" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor12" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor13" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor14" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor4" UniqueID="" Timestamp="" />

	AutoOpenTables = .F.
	DataSource = .NULL.
	Height = 691
	Left = 40
	Name = "Dataenvironment"
	Top = 235
	Width = 740

	ADD OBJECT 'Cursor1' AS cursor WITH ;
		Alias = "checks", ;
		CursorSource = "checks", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor1", ;
		Top = 20, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor10' AS cursor WITH ;
		Alias = "wells", ;
		CursorSource = "wells", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor10", ;
		Top = 380, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor11' AS cursor WITH ;
		Alias = "invhdr", ;
		CursorSource = "invhdr", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 150, ;
		Name = "Cursor11", ;
		Top = 380, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor12' AS cursor WITH ;
		Alias = "invdet", ;
		CursorSource = "invdet", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 290, ;
		Name = "Cursor12", ;
		Top = 380, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor13' AS cursor WITH ;
		Alias = "glopt", ;
		CursorSource = "glopt", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 419, ;
		Name = "Cursor13", ;
		Top = 17, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor14' AS cursor WITH ;
		Alias = "suspense", ;
		BufferModeOverride = 5, ;
		CursorSource = "suspense", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 459, ;
		Name = "Cursor14", ;
		Top = 151, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor2' AS cursor WITH ;
		Alias = "disbhist", ;
		CursorSource = "disbhist", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 150, ;
		Name = "Cursor2", ;
		Top = 20, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor3' AS cursor WITH ;
		Alias = "expense", ;
		CursorSource = "expense", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 290, ;
		Name = "Cursor3", ;
		Top = 20, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor4' AS cursor WITH ;
		Alias = "wellinv", ;
		CursorSource = "wellinv", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 459, ;
		Name = "Cursor4", ;
		Top = 272, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor5' AS cursor WITH ;
		Alias = "income", ;
		CursorSource = "income", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 150, ;
		Name = "Cursor5", ;
		Top = 140, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor6' AS cursor WITH ;
		Alias = "groups", ;
		CursorSource = "groups", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 290, ;
		Name = "Cursor6", ;
		Top = 140, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor8' AS cursor WITH ;
		Alias = "sysctl", ;
		CursorSource = "sysctl", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 150, ;
		Name = "Cursor8", ;
		Top = 260, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor9' AS cursor WITH ;
		Alias = "wellhist", ;
		CursorSource = "wellhist", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 290, ;
		Name = "Cursor9", ;
		Top = 260, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

ENDDEFINE

DEFINE CLASS formdmrrevclose AS frmrptcriteria OF "..\source\appforms.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="chklExceptions" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Runcombo1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkByWell" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkSummaryOnly" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: checkregister
		*m: reopen		&& Re-Opens the closed revenue period.
		*p: lbywell
		*p: ldirectdeposit
		*p: lexceptions
		*p: odist
	*</DefinedPropArrayMethod>

	Caption = "Revenue Run Closing Summary"
	DataSession = 2
	DoCreate = .T.
	Height = 242
	HelpContextID = 662
	ldirectdeposit = .F.
	Name = "FormDMrrevclose"
	Visible = .T.
	Width = 375
	Swrptcriteriabuttons1.cmdclose.Name = "cmdclose"
	Swrptcriteriabuttons1.cmdPreview.Name = "cmdPreview"
	Swrptcriteriabuttons1.cmdPrint.Name = "cmdPrint"
	Swrptcriteriabuttons1.Left = 70
	Swrptcriteriabuttons1.Name = "Swrptcriteriabuttons1"
	Swrptcriteriabuttons1.TabIndex = 5
	Swrptcriteriabuttons1.Top = 173

	ADD OBJECT 'chkByWell' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Print Report By Well", ;
		Left = 84, ;
		Name = "chkByWell", ;
		TabIndex = 3, ;
		Top = 108, ;
		Value = .F.
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chklExceptions' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Only Show Exceptions", ;
		Left = 84, ;
		Name = "chklExceptions", ;
		TabIndex = 4, ;
		Top = 132, ;
		Value = .F., ;
		Visible = .F.
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkSummaryOnly' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Generate Closing Summary Page Only", ;
		Left = 84, ;
		Name = "chkSummaryOnly", ;
		TabIndex = 2, ;
		Top = 84, ;
		Value = .F., ;
		Visible = .T.
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'Lbllabelcustom1' AS lbllabelcustom WITH ;
		Caption = "Run No", ;
		Left = 42, ;
		Name = "Lbllabelcustom1", ;
		TabIndex = 6, ;
		Top = 48
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Runcombo1' AS runcombo WITH ;
		cshowwhat = R, ;
		Height = 20, ;
		Left = 83, ;
		lshownew = .F., ;
		Name = "Runcombo1", ;
		TabIndex = 1, ;
		Top = 44, ;
		Width = 265
		*< END OBJECT: ClassLib="..\custom\swcontrol.vcx" BaseClass="combobox" />
	
	PROCEDURE builddata
		LPARAMETERS tcButton
		LOCAL lcGroup, lcWellID1, lcWellID2, oDist
		PRIVATE m.cGrpName
		m.cGrpName = ''
		
		llReturn = .T.
		
		TRY
		
		   lnStart = SECONDS()
		   swlogging('Revenue Closing Summary', .T., lnStart)
		*
		*  Get the parameters
		*
		   lcYear	  = THISFORM.runcombo1.LISTITEM[thisform.runcombo1.listitemid, 2]
		   lnRunNo	  = INT(VAL(THISFORM.runcombo1.LISTITEM[thisform.runcombo1.listitemid, 3]))
		   lcDMBatch  = THISFORM.runcombo1.LISTITEM[thisform.runcombo1.listitemid, 5]
		   lcGroup	  = THISFORM.runcombo1.LISTITEM[thisform.runcombo1.listitemid, 4]
		   ldPostDate = CTOD(THISFORM.runcombo1.LISTITEM[thisform.runcombo1.listitemid, 8])
		
		   THIS.lbywell		= THIS.chkbyWell.VALUE
		   THIS.lExceptions	= THIS.chklExceptions.VALUE
		
		*
		*  Get the well id range
		*
		   SWSELECT('wells')
		   SET ORDER TO cwellid
		   GO TOP
		   lcWellID1 = cwellid
		   GO BOTT
		   lcWellID2 = cwellid
		
		*  Clean up blank owner types
		   WAIT WINDOW NOWAIT 'Cleaning up suspense file...'
		   SWSELECT('suspense', .T.)
		   SCAN FOR EMPTY(ctypeinv)
		      SCATTER MEMVAR
		      SWSELECT('wellinv')
		      LOCATE FOR cwellid == m.cwellid AND cOwnerID == m.cOwnerID AND cProgCode = m.cProgCode AND lFlat = m.lFlat
		      IF FOUND()
		         REPLACE suspense.ctypeinv WITH wellinv.ctypeinv
		      ENDIF
		   ENDSCAN
		   TABLEUPDATE(.T., .T., 'Suspense')
		   WAIT CLEAR
		
		*
		*  Call distproc to create the (invtmp) and (wellwork) cursors
		*
		
		   oDist = CREATEOBJECT('distproc', lcWellID1, lcWellID2, ;
		        '01', ;
		        lcYear, ;
		        lcGroup, 'W', ldPostDate, .F., lnRunNo)
		   oDist.dpostdate = ldPostDate
		   oDist.cdmbatch  = lcDMBatch
		
		   IF NOT THISFORM.lDirectDeposit  &&  Regular report
		      SWSELECT('sysctl')
		      LOCATE FOR nrunno = lnRunNo AND cdmbatch = lcDMBatch
		      IF FOUND()
		         oDist.dexpdate	= dexpdate
		         oDist.drevdate	= drevdate
		         oDist.lrelqtr	= lrelqtr
		         IF EMPTY(cVersion)
		            THISFORM.oMessage.Warning('This run was closed in a previous version of the software, so no closing summary can be printed for it.')
		            llReturn = .T.
		            EXIT
		         ENDIF
		      ENDIF
		      IF NOT USED('tsuspense')
		         USE suspense AGAIN IN 0 ALIAS tsuspense
		      ENDIF
		      IF NOT THIS.lbywell
		* Call the closing summary method of distproc - pws 2/9/2008
		         oDist.print_closing_summary(.T., tcButton, THISFORM.chksummaryOnly.VALUE, THIS.lbywell, THIS.lExceptions)
		      ELSE
		         oDist.print_closing_summary(.T., tcButton, .F., THIS.lbywell, THIS.lExceptions)
		      ENDIF
		      RELEASE oDist
		      oDist = .NULL.
		   ELSE
		      IF NOT THIS.CheckRegister()
		         llReturn = .F.
		      ENDIF
		   ENDIF
		
		   swlogging('Revenue Closing Summary', .F., lnStart, SECONDS())
		CATCH TO loError
		   llReturn = .F.
		   DO errorlog WITH 'Builddata', loError.LINENO, 'Revenue Closing Summary', loError.ERRORNO, loError.MESSAGE, '', loError
		   MESSAGEBOX('Unable to process the report at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		        'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		RETURN llReturn
		
		
		
		
	ENDPROC

	PROCEDURE checkregister
		LOCAL tcAccount, llDisbMgr, lcDMBatch, lcrunYear, lnRunNo, lcGroup
		
		SELE options
		tcAccount = cDisbAcct
		
		SET DELETED ON
		
		m.cProducer  = m.goApp.cCompanyName
		m.cProcessor = ''
		lcSelect     = ''
		lcSortOrder  = ''
		lcDMBatch    = THISFORM.RunCombo1.LISTITEM[thisform.runcombo1.listitemid,5]
		lcrunYear    = THISFORM.RunCombo1.LISTITEM[thisform.runcombo1.listitemid,2]
		lnRunNo      = THISFORM.RunCombo1.LISTITEM[thisform.runcombo1.listitemid,3]
		lcGroup      = THISFORM.RunCombo1.LISTITEM[thisform.runcombo1.listitemid,4]
		lcTitle1     = 'Checks Created for Run No: ' + lcrunYear+'/'+ALLT(lnRunNo) + ' Group: ' + lcGroup
		lcTitle2     = 'Account ' + ALLTRIM(tcAccount)
		
		IF m.goApp.lAMVersion  &&  Print a register of direct-deposit entries, if epplicable - BH 12/15/06
		   SELECT cidtype, cid, cpayee, dcheckdate, cyear, cperiod, namount, 'D' as cRptGroup ;
		      FROM checks ;
		      WHERE cEntryType = 'C' ;
		      AND cAcctNo = tcAccount ;
		      AND cBatch  = lcDMBatch ;
		      AND ALLT(ccheckno) == 'DIRDEP'  ;
		      INTO CURSOR tempchk ;
		      ORDER BY cidtype, cid
		ELSE
		   SELECT cidtype, cid, cpayee, dcheckdate, cyear, cperiod, namount, 'D' as cRptGroup ;
		      FROM checks ;
		      WHERE cEntryType = 'C' ;
		      AND cBatch  = lcDMBatch ;
		      AND ALLT(ccheckno) == 'DIRDEP'  ;
		      INTO CURSOR tempchk ;
		      ORDER BY cidtype, cid
		ENDIF
		
		IF _TALLY > 0
		   lcTitle2     = ALLTRIM(lcTitle2) +' - Direct Deposit Entries - Run No: ' + lcrunYear+'/'+PADL(ALLT(lnRunNo),3,'0') + ' Group: ' + lcGroup
		
		   SELECT tempchk
		   REPORT FORM csprechk.frx PREVIEW
		   IF THIS.omessage.CONFIRM('Should the report be sent to the printer?')
		      REPORT FORM csprechk.frx TO PRINTER PROMPT NOCONSOLE NOEJECT
		   ENDIF
		ELSE
		   RETURN .f.
		ENDIF
		
	ENDPROC

	PROCEDURE Init
		PARAMETERS tlDirectDeposit
		LOCAL lcYear, lcPeriod, lcGroup
		
		this.lDirectDeposit = tlDirectDeposit
		
		if this.lDirectDeposit
		   this.caption = 'Direct Deposit Entries Report'
		   thisform.chkByWell.visible = .f.
		   thisform.HelpContextID = 664
		ENDIF
		  
		DODEFAULT()       
		*
		*  Get the last closed revenue period from sysctl
		*
		
		SWSELECT('sysctl')
		LOCATE FOR cTypeClose = 'R'
		IF NOT FOUND()
		   thisform.omessage.warning('There are no closed revenue runs to report on.')
		ENDIF   
		
		IF m.goapp.lAMVersion
		   swselect('glmaster')
		ENDIF 
		
	ENDPROC

	PROCEDURE reopen		&& Re-Opens the closed revenue period.
	ENDPROC

	PROCEDURE report
		LPARAMETERS cbutton
		
		* Do nothing
	ENDPROC

	PROCEDURE chkByWell.Click
		IF this.Value
		   thisform.chklExceptions.Visible = .t.
		   thisform.chklExceptions.Value = .t.
		ELSE
		   thisform.chklExceptions.Visible = .f.
		   thisform.chklExceptions.Value = .f.
		ENDIF    
	ENDPROC

	PROCEDURE Runcombo1.Init
		IF DODEFAULT()
		   this.listitemid = 1
		ENDIF   
	ENDPROC

	PROCEDURE Swrptcriteriabuttons1.cmdPreview.Click
		IF NOT thisform.builddata('S')
		   thisform.oMessage.Display('%msgRangeNotFound', 'No Records Found')   
		ENDIF   
		
	ENDPROC

	PROCEDURE Swrptcriteriabuttons1.cmdPrint.Click
		IF NOT thisform.builddata('P')
		   thisform.oMessage.Display('%msgRangeNotFound', 'No Records Found')   
		ENDIF   
		
	ENDPROC

ENDDEFINE
