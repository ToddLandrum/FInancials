*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="dmrsusprpt.scx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="2" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Cursor1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor7" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor8" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor9" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor10" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor11" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor12" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor13" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor14" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor15" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor16" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Relation2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Relation3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor6" UniqueID="" Timestamp="" />

	AutoOpenTables = .F.
	DataSource = .NULL.
	Height = 619
	Left = 47
	Name = "Dataenvironment"
	Top = 7
	Width = 627

	ADD OBJECT 'Cursor1' AS cursor WITH ;
		Alias = "groups", ;
		CursorSource = "groups", ;
		Database = g:\dmie\rodman petroleum\appdata.dbc, ;
		Height = 90, ;
		Left = 11, ;
		Name = "Cursor1", ;
		Top = 7, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor10' AS cursor WITH ;
		Alias = "sevtax", ;
		CursorSource = "sevtax", ;
		Database = g:\dmie\rodman petroleum\appdata.dbc, ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor10", ;
		Top = 380, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor11' AS cursor WITH ;
		Alias = "susaudit", ;
		CursorSource = "susaudit", ;
		Database = g:\dmie\rodman petroleum\appdata.dbc, ;
		Height = 90, ;
		Left = 150, ;
		Name = "Cursor11", ;
		Top = 380, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor12' AS cursor WITH ;
		Alias = "sysctl", ;
		CursorSource = "sysctl", ;
		Database = g:\dmie\rodman petroleum\appdata.dbc, ;
		Height = 90, ;
		Left = 290, ;
		Name = "Cursor12", ;
		Top = 380, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor13' AS cursor WITH ;
		Alias = "vendor", ;
		CursorSource = "vendor", ;
		Database = g:\dmie\rodman petroleum\appdata.dbc, ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor13", ;
		Top = 500, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor14' AS cursor WITH ;
		Alias = "wellhist", ;
		CursorSource = "wellhist", ;
		Database = g:\dmie\rodman petroleum\appdata.dbc, ;
		Height = 90, ;
		Left = 150, ;
		Name = "Cursor14", ;
		Top = 500, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor15' AS cursor WITH ;
		Alias = "wellinv", ;
		CursorSource = "wellinv", ;
		Database = g:\dmie\rodman petroleum\appdata.dbc, ;
		Height = 90, ;
		Left = 290, ;
		Name = "Cursor15", ;
		Top = 500, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor16' AS cursor WITH ;
		Alias = "wells", ;
		CursorSource = "wells", ;
		Database = g:\dmie\rodman petroleum\appdata.dbc, ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor16", ;
		Top = 620, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor2' AS cursor WITH ;
		Alias = "investor", ;
		CursorSource = "investor", ;
		Database = g:\dmie\rodman petroleum\appdata.dbc, ;
		Height = 90, ;
		Left = 149, ;
		Name = "Cursor2", ;
		Top = 20, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor3' AS cursor WITH ;
		Alias = "disbhist", ;
		CursorSource = "disbhist", ;
		Database = g:\dmie\rodman petroleum\appdata.dbc, ;
		Height = 90, ;
		Left = 290, ;
		Name = "Cursor3", ;
		Top = 20, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor4' AS cursor WITH ;
		Alias = "expense", ;
		CursorSource = "expense", ;
		Database = g:\dmie\rodman petroleum\appdata.dbc, ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor4", ;
		Top = 140, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor5' AS cursor WITH ;
		Alias = "expcat", ;
		CursorSource = "expcat", ;
		Database = g:\dmie\rodman petroleum\appdata.dbc, ;
		Height = 90, ;
		Left = 150, ;
		Name = "Cursor5", ;
		Top = 140, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor6' AS cursor WITH ;
		Alias = "options", ;
		CursorSource = "options", ;
		Database = g:\dmie\rodman petroleum\appdata.dbc, ;
		Height = 90, ;
		Left = 429, ;
		Name = "Cursor6", ;
		Top = 379, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor7' AS cursor WITH ;
		Alias = "income", ;
		CursorSource = "income", ;
		Database = g:\dmie\rodman petroleum\appdata.dbc, ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor7", ;
		Top = 260, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor8' AS cursor WITH ;
		Alias = "programs", ;
		CursorSource = "programs", ;
		Database = g:\dmie\rodman petroleum\appdata.dbc, ;
		Height = 90, ;
		Left = 150, ;
		Name = "Cursor8", ;
		Top = 260, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor9' AS cursor WITH ;
		Alias = "revsrc", ;
		CursorSource = "revsrc", ;
		Database = g:\dmie\rodman petroleum\appdata.dbc, ;
		Height = 90, ;
		Left = 291, ;
		Name = "Cursor9", ;
		Top = 259, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Relation2' AS relation WITH ;
		ChildAlias = "wellinv", ;
		ChildOrder = "cwellid", ;
		Name = "Relation2", ;
		ParentAlias = "wells", ;
		RelationalExpr = "cwellid"
		*< END OBJECT: BaseClass="relation" />

	ADD OBJECT 'Relation3' AS relation WITH ;
		ChildAlias = "wells", ;
		ChildOrder = "cgroup", ;
		Name = "Relation3", ;
		ParentAlias = "groups", ;
		RelationalExpr = "cgroup"
		*< END OBJECT: BaseClass="relation" />

ENDDEFINE

DEFINE CLASS formdmrsusprpt AS frmrptcriteria OF "..\source\appforms.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="chkSummary" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Swrptlook1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkByProgram" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkByWell" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Runcombo1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkZeroBalance" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="LblEndID" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkallgroups" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="LblBegID" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboRptType" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom3" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: buildstmt
		*m: getprevmins		&& Get previous minimums
		*p: cgroup
		*p: cowner1
		*p: cowner2
		*p: cperiod
		*p: crpttype
		*p: cwell1
		*p: cwell2
		*p: cyear
		*p: odist		&& DistProc object
	*</DefinedPropArrayMethod>

	Caption = "Old Owner Suspense Reports"
	DataSession = 2
	DoCreate = .T.
	Height = 467
	HelpContextID = 165
	Name = "Formdmrsusprpt"
	Width = 434
	Swrptcriteriabuttons1.chkSendFile.Alignment = 0
	Swrptcriteriabuttons1.chkSendFile.Name = "chkSendFile"
	Swrptcriteriabuttons1.cmdclose.Name = "cmdclose"
	Swrptcriteriabuttons1.cmdPreview.Name = "cmdPreview"
	Swrptcriteriabuttons1.cmdPrint.Name = "cmdPrint"
	Swrptcriteriabuttons1.Left = 99
	Swrptcriteriabuttons1.Name = "Swrptcriteriabuttons1"
	Swrptcriteriabuttons1.TabIndex = 12
	Swrptcriteriabuttons1.Top = 376
	Swrptcriteriabuttons1.ZOrderSet = 0

	ADD OBJECT 'cboRptType' AS cbocomboboxcustom WITH ;
		BoundColumn = 2, ;
		Height = 20, ;
		Left = 120, ;
		Name = "cboRptType", ;
		TabIndex = 1, ;
		Top = 76, ;
		Width = 288
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="combobox" />

	ADD OBJECT 'chkallgroups' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Include All Groups", ;
		Left = 144, ;
		Name = "chkallgroups", ;
		TabIndex = 4, ;
		Top = 160, ;
		Value = .F.
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkByProgram' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Total by Program", ;
		Left = 178, ;
		Name = "chkByProgram", ;
		TabIndex = 10, ;
		Top = 340
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkByWell' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Total by Well", ;
		Left = 290, ;
		Name = "chkByWell", ;
		TabIndex = 11, ;
		Top = 340
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkSummary' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Show Totals Only", ;
		Height = 16, ;
		Left = 65, ;
		Name = "chkSummary", ;
		TabIndex = 9, ;
		Top = 340, ;
		Width = 104, ;
		ZOrderSet = 2
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkZeroBalance' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Remove Zero Balance Entries", ;
		Left = 140, ;
		Name = "chkZeroBalance", ;
		TabIndex = 8, ;
		Top = 304, ;
		Value = .T.
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'LblBegID' AS lbllabelcustom WITH ;
		Caption = "First Owner:", ;
		Height = 16, ;
		Left = 37, ;
		Name = "LblBegID", ;
		TabIndex = 6, ;
		Top = 189, ;
		Width = 63, ;
		ZOrderSet = 10
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'LblEndID' AS lbllabelcustom WITH ;
		Caption = "Last Owner:", ;
		Height = 16, ;
		Left = 37, ;
		Name = "LblEndID", ;
		TabIndex = 7, ;
		Top = 240, ;
		Width = 63, ;
		ZOrderSet = 9
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom1' AS lbllabelcustom WITH ;
		Caption = "As Of Run No", ;
		Left = 37, ;
		Name = "Lbllabelcustom1", ;
		TabIndex = 3, ;
		Top = 126
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom2' AS lbllabelcustom WITH ;
		Caption = "Report Type:", ;
		Left = 24, ;
		Name = "Lbllabelcustom2", ;
		TabIndex = 13, ;
		Top = 76
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom3' AS lbllabelcustom WITH ;
		Alignment = 0, ;
		Caption = "This will report on the suspense created before conversion to the new version. The information on this report will not change.", ;
		FontSize = 10, ;
		ForeColor = 255,0,0, ;
		Height = 34, ;
		Left = 35, ;
		Name = "Lbllabelcustom3", ;
		Top = 16, ;
		Width = 361, ;
		WordWrap = .T.
		*< END OBJECT: ClassLib="..\..\ampro\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Runcombo1' AS runcombo WITH ;
		cshowwhat = R, ;
		Height = 20, ;
		Left = 118, ;
		lshownew = .F., ;
		Name = "Runcombo1", ;
		TabIndex = 2, ;
		Top = 124, ;
		Width = 290
		*< END OBJECT: ClassLib="..\custom\swcontrol.vcx" BaseClass="combobox" />

	ADD OBJECT 'Swrptlook1' AS swrptlook WITH ;
		Left = 118, ;
		Name = "Swrptlook1", ;
		TabIndex = 5, ;
		Top = 186, ;
		ZOrderSet = 3, ;
		Swlookupbutton1.Name = "Swlookupbutton1", ;
		Swlookupbutton2.Name = "Swlookupbutton2", ;
		txtBegID.clistexpression = investor.cownerid, ;
		txtBegID.clistworkarea = investor, ;
		txtBegID.Name = "txtBegID", ;
		TxtBegName.Name = "TxtBegName", ;
		txtEndID.clistexpression = investor.cownerid, ;
		txtEndID.clistworkarea = investor, ;
		txtEndID.Name = "txtEndID", ;
		TxtEndName.Name = "TxtEndName"
		*< END OBJECT: ClassLib="..\custom\swcontrol.vcx" BaseClass="container" />
	
	PROCEDURE builddata
		LOCAL tcID1, tcID2, tcYear, tcPeriod, tcGroup
		
		tcID1       = THISFORM.swrptlook1.txtBegID.VALUE
		tcID2       = THISFORM.swrptlook1.txtEndID.VALUE
		tcYear      = THISFORM.runcombo1.listitem[thisform.runcombo1.listitemid,2]
		tnRunNo     = INT(VAL(THISFORM.runcombo1.listitem[thisform.runcombo1.listitemid,3]))
		tcGroup     = THISFORM.runcombo1.listitem[thisform.runcombo1.listitemid,4]
		tcDMBatch   = THISFORM.runcombo1.listitem[thisform.runcombo1.listitemid,5]
		tcType      = THISFORM.cRptType
		tlByProgram = THISFORM.chkByProgram.VALUE
		tlByWell    = THISFORM.chkByWell.VALUE
		tlZeroBal   = THISFORM.chkZeroBalance.VALUE
		tlSummary   = THISFORM.chkSummary.VALUE
		IF THISFORM.chkAllGroups.value = .T.
		   tcGroup = '**'
		ENDIF   
		
		THISFORM.cSelectCriteria = 'Owners: ' + ALLTRIM(tcID1) + ' - ' + ALLTRIM(tcID2)
		THISFORM.cSortOrder      = 'Owner ID'
		THISFORM.cTitle2         = 'As Of Run No: ' + ALLT(STR(tnRunNo))+'/'+tcYear + ' Group: ' + tcGroup
		
		IF tlSummary
		   THISFORM.cReportName = 'dmrsusp3'
		   CREATE CURSOR auditrecs ;
		      (cownerid    C(10), ;
		      cProgCode   C(10), ;
		      cAction     C(1), ;
		      lProgFlag   L, ;
		      cTypeInv    C(1), ;
		      cSuspType   C(1), ;
		      csuspdesc   C(25), ;
		      cownname    C(40), ;
		      nBal        N(12,2), ;
		      nAmount     N(12,2))
		
		   INDEX ON cownerid+cProgCode TAG ownerprog
		   INDEX ON cownerid TAG owner
		
		   DO CASE
		         *
		         *  Owner Current Deficits
		         *
		      CASE tcType = 'OPD'
		         SELECT cownerid, cAction, cProgCode, .F. AS lProgFlag, SUM(nAmount) AS nAmount, cSuspType, cTypeInv ;
		            FROM susaudit ;
		            WHERE cAction = 'I' ;
		            AND cSuspType = 'D'   ;
		            AND BETWEEN(cownerid,tcID1,tcID2) ;
		            AND IIF(tcGroup<>'**',cGroup=tcGroup,.T.) ;
		            AND cRunYear+STR(nRunNo) = tcYear+STR(tnRunNo) ;
		            INTO CURSOR tempin ;
		            ORDER BY cSuspType, cownerid  ;
		            GROUP BY cSuspType, cownerid
		         SELECT auditrecs
		         APPEND FROM DBF('tempin')
		         SELECT tempin
		         USE
		         SELECT cownerid , cAction, cProgCode, .F. AS lProgFlag, SUM(nAmount*-1) AS nAmount, cSuspType, cTypeInv ;
		            FROM susaudit ;
		            WHERE cAction = 'O' ;
		            AND cSuspType = 'D'   ;
		            AND IIF(tcGroup<>'**',cGroup=tcGroup,.T.) ;
		            AND BETWEEN(cownerid,tcID1,tcID2) ;
		            AND cRunYear+STR(nRunNo) <= tcYear+STR(tnRunNo) ;
		            INTO CURSOR tempout ;
		            ORDER BY cSuspType, cownerid   ;
		            GROUP BY cSuspType, cownerid
		         SELECT tempout
		         *
		         *  Add the ins and outs together to get current suspense
		         *
		         SCAN
		            m.cownerid  = cownerid
		            m.cSuspType = cSuspType
		            m.nAmount   = nAmount
		            SELECT auditrecs
		            SET ORDER TO owner
		            SEEK m.cownerid
		            IF FOUND()
		               m.nAmount = m.nAmount + nAmount
		               REPLACE nAmount WITH m.nAmount
		            ELSE
		               INSERT INTO auditrecs FROM MEMVAR
		            ENDIF
		         ENDSCAN
		         SELECT tempout
		         USE
		         *
		         *  Fill in Owner cOwnName from Owner table
		         *
		         SELECT auditrecs
		         SET ORDER TO 0
		         SCAN
		            m.cownerid  = cownerid
		            SELECT investor
		            SET ORDER TO cownerid
		            SEEK m.cownerid
		            IF FOUND()
		               m.cownname = cownname
		               SELECT auditrecs
		               REPLACE cownname WITH m.cownname
		            ELSE
		               SELECT programs
		               SET ORDER TO cProgCode
		               SEEK m.cownerid
		               IF FOUND()
		                  m.cownname = prog_cOwnName
		                  SELECT auditrecs
		                  REPLACE cownname WITH m.cownname, ;
		                     lProgFlag WITH .T.
		               ENDIF
		            ENDIF
		            SELECT auditrecs
		         ENDSCAN
		         SELECT auditrecs
		         thisform.ctitle1 = 'Owner Deficits For Selected Period'
		         *
		         *  Owner Total Deficits
		         *
		      CASE tcType = 'OCD'
		         SELECT cownerid , cAction, cProgCode, .F. AS lProgFlag, SUM(nAmount) AS nAmount, cSuspType ;
		            FROM susaudit ;
		            WHERE cAction = 'I' ;
		            AND BETWEEN(cownerid,tcID1,tcID2) ;
		            AND IIF(tcGroup<>'**',cGroup=tcGroup,.T.) ;
		            AND cRunYear+STR(nRunNo) <= tcYear+STR(tnRunNo) ;
		            AND NOT INLIST(cSuspType,'B','T') ;
		            INTO CURSOR tempin ;
		            ORDER BY cownerid  ;
		            GROUP BY cownerid
		         SELECT auditrecs
		         APPEND FROM DBF('tempin')
		         SELECT tempin
		         USE
		         SELECT cownerid , cAction, cProgCode, .F. AS lProgFlag, SUM(nAmount*-1) AS nAmount, cSuspType ;
		            FROM susaudit ;
		            WHERE cAction = 'O' ;
		            AND BETWEEN(cownerid,tcID1,tcID2) ;
		            AND IIF(tcGroup<>'**',cGroup=tcGroup,.T.) ;
		            AND cRunYear+STR(nRunNo) <= tcYear+STR(tnRunNo) ;
		            AND NOT INLIST(cSuspType,'B','T') ;
		            INTO CURSOR tempout ;
		            ORDER BY cownerid   ;
		            GROUP BY cownerid
		         SELECT tempout
		         *
		         *  Add the ins and outs together to get current suspense
		         *
		         SCAN
		            SCATTER MEMVAR
		            SELECT auditrecs
		            SET ORDER TO owner
		            SEEK m.cownerid
		            IF FOUND()
		               m.nAmount = nAmount + m.nAmount
		               REPLACE nAmount WITH m.nAmount
		            ELSE
		               INSERT INTO auditrecs FROM MEMVAR
		            ENDIF
		            SELECT tempout
		         ENDSCAN
		         SELECT tempout
		         USE
		         *
		         *  Fill in Owner cOwnName from Owner table
		         *
		         SELECT auditrecs
		         SET ORDER TO 0
		         SCAN
		            m.cownerid  = cownerid
		            IF nAmount >= 0
		               DELETE NEXT 1
		               LOOP
		            ENDIF
		            SELECT investor
		            SET ORDER TO cownerid
		            SEEK m.cownerid
		            IF FOUND()
		               m.cownname = cownname
		               SELECT auditrecs
		               REPLACE cownname WITH m.cownname
		            ELSE
		               SELECT programs
		               SET ORDER TO cProgCode
		               SEEK m.cownerid
		               IF FOUND()
		                  m.cownname = prog_cOwnName
		                  SELECT auditrecs
		                  REPLACE cownname WITH m.cownname, ;
		                     lProgFlag WITH .T.
		               ENDIF
		            ENDIF
		            SELECT auditrecs
		         ENDSCAN
		         SELECT auditrecs
		         thisform.ctitle1 = 'Owner Cumulative Deficits'
		         *
		         *  Owner Current Minimums
		         *
		      CASE tcType = 'OPM'
		         SELECT cownerid , cAction, cProgCode, .F. AS lProgFlag, SUM(nAmount) AS nAmount, cSuspType ;
		            FROM susaudit ;
		            WHERE cAction = 'I' ;
		            AND cSuspType = 'M'   ;
		            AND IIF(tcGroup<>'**',cGroup=tcGroup,.T.) ;
		            AND BETWEEN(cownerid,tcID1,tcID2) ;
		            AND cRunYear+STR(nRunNo) = tcYear+STR(tnRunNo) ;
		            INTO CURSOR tempin ;
		            ORDER BY cownerid  ;
		            GROUP BY cownerid
		         SELECT auditrecs
		         APPEND FROM DBF('tempin')
		         SELECT tempin
		         USE
		         SELECT cownerid , cAction, cProgCode, .F. AS lProgFlag, SUM(nAmount) AS nAmount, cSuspType ;
		            FROM susaudit ;
		            WHERE cAction = 'O' ;
		            AND nAmount > 0   ;
		            AND BETWEEN(cownerid,tcID1,tcID2) ;
		            AND cRunYear+STR(nRunNo) <= tcYear+STR(tnRunNo) ;
		            INTO CURSOR tempout ;
		            ORDER BY cownerid   ;
		            GROUP BY cownerid
		         SELECT tempout
		         *
		         *  Add the ins and outs together to get current suspense
		         *
		         SCAN
		            SCATTER MEMVAR
		            SELECT auditrecs
		            SET ORDER TO owner
		            IF SEEK(m.cownerid)
		               m.nAmount = nAmount - m.nAmount
		               REPLACE nAmount WITH m.nAmount
		            ELSE
		               m.nAmount = m.nAmount * -1
		               INSERT INTO auditrecs FROM MEMVAR
		            ENDIF
		            SELECT tempout
		         ENDSCAN
		         SELECT tempout
		         USE
		         *
		         *  Fill in Owner cOwnName from Owner table
		         *
		         SELECT auditrecs
		         SET ORDER TO 0
		         SCAN
		            m.cownerid  = cownerid
		            SELECT investor
		            SET ORDER TO cownerid
		            SEEK m.cownerid
		            IF FOUND()
		               m.cownname = cownname
		               SELECT auditrecs
		               REPLACE cownname WITH m.cownname
		            ELSE
		               SELECT programs
		               SET ORDER TO cProgCode
		               SEEK m.cownerid
		               IF FOUND()
		                  m.cownname = prog_cOwnName
		                  SELECT auditrecs
		                  REPLACE cownname WITH m.cownname, ;
		                     lProgFlag WITH .T.
		               ENDIF
		            ENDIF
		            SELECT auditrecs
		         ENDSCAN
		         SELECT auditrecs
		         thisform.ctitle1 = 'Owner Revenue Suspense For Selected Period'
		         *
		         *  Owner Total Minimums
		         *
		      CASE tcType = 'OCM'
		         SELECT cownerid , cAction, cProgCode, .F. AS lProgFlag, SUM(nAmount) AS nAmount, cSuspType ;
		            FROM susaudit ;
		            WHERE cAction = 'I' ;
		            AND BETWEEN(cownerid,tcID1,tcID2) ;
		            AND IIF(tcGroup<>'**',cGroup=tcGroup,.T.) ;
		            AND cRunYear+STR(nRunNo) <= tcYear+STR(tnRunNo) ;
		            AND NOT INLIST(cSuspType,'B','T') ;
		            INTO CURSOR tempin ;
		            ORDER BY cownerid  ;
		            GROUP BY cownerid
		         SELECT auditrecs
		         APPEND FROM DBF('tempin')
		         SELECT tempin
		         USE
		         SELECT cownerid , cAction, cProgCode, .F. AS lProgFlag, SUM(nAmount*-1) AS nAmount, cSuspType ;
		            FROM susaudit ;
		            WHERE cAction = 'O' ;
		            AND BETWEEN(cownerid,tcID1,tcID2) ;
		            AND IIF(tcGroup<>'**',cGroup=tcGroup,.T.) ;
		            AND cRunYear+STR(nRunNo) <= tcYear+STR(tnRunNo) ;
		            AND NOT INLIST(cSuspType,'B','T') ;
		            INTO CURSOR tempout ;
		            ORDER BY cownerid   ;
		            GROUP BY cownerid
		         SELECT tempout
		         *
		         *  Add the ins and outs together to get current suspense
		         *
		         SCAN
		            m.cownerid  = cownerid
		            m.cSuspType = cSuspType
		            m.nAmount   = nAmount
		            SELECT auditrecs
		            SET ORDER TO owner
		            SEEK m.cownerid
		            IF FOUND()
		               m.nAmount = m.nAmount + nAmount
		               REPLACE nAmount WITH m.nAmount
		            ELSE
		               INSERT INTO auditrecs FROM MEMVAR
		            ENDIF
		            SELECT tempout
		         ENDSCAN
		         SELECT tempout
		         USE
		         *
		         *  Fill in Owner cOwnName from Owner table
		         *
		         SELECT auditrecs
		         SET ORDER TO 0
		         SCAN
		            IF nAmount <= 0
		               DELETE NEXT 1
		               LOOP
		            ENDIF
		            m.cownerid  = cownerid
		            REPLACE cSuspType WITH 'N'
		            SELECT investor
		            SET ORDER TO cownerid
		            SEEK m.cownerid
		            IF FOUND()
		               m.cownname = cownname
		               SELECT auditrecs
		               REPLACE cownname WITH m.cownname
		            ELSE
		               SELECT programs
		               SET ORDER TO cProgCode
		               SEEK m.cownerid
		               IF FOUND()
		                  m.cownname = prog_cOwnName
		                  SELECT auditrecs
		                  REPLACE cownname WITH m.cownname, ;
		                     lProgFlag WITH .T.
		               ENDIF
		            ENDIF
		            SELECT auditrecs
		         ENDSCAN
		         SELECT auditrecs
		         thisform.ctitle1 = 'Owner Cumulative Revenue Suspense'
		         
		         *
		         *  Owner Net Suspense
		         *
		      CASE tcType = 'ONET'
		         SELECT cownerid , cAction, cProgCode, .F. AS lProgFlag, SUM(nAmount) AS nAmount, cSuspType ;
		            FROM susaudit ;
		            WHERE cAction = 'I' ;
		            AND BETWEEN(cownerid,tcID1,tcID2) ;
		            AND IIF(tcGroup<>'**',cGroup=tcGroup,.T.) ;
		            AND cRunYear+STR(nRunNo) <= tcYear+STR(tnRunNo) ;
		            INTO CURSOR tempin ;
		            ORDER BY cownerid  ;
		            GROUP BY cownerid
		         SELECT auditrecs
		         APPEND FROM DBF('tempin')
		         SELECT tempin
		         USE
		         SELECT cownerid , cAction, cProgCode, .F. AS lProgFlag, SUM(nAmount*-1) AS nAmount, cSuspType ;
		            FROM susaudit ;
		            WHERE cAction = 'O' ;
		            AND BETWEEN(cownerid,tcID1,tcID2) ;
		            AND IIF(tcGroup<>'**',cGroup=tcGroup,.T.) ;
		            AND cRunYear+STR(nRunNo) <= tcYear+STR(tnRunNo) ;
		            INTO CURSOR tempout ;
		            ORDER BY cownerid   ;
		            GROUP BY cownerid
		         SELECT tempout
		         *
		         *  Add the ins and outs together to get current suspense
		         *
		         SCAN
		            m.cownerid  = cownerid
		            m.cSuspType = cSuspType
		            m.nAmount   = nAmount
		            SELECT auditrecs
		            SET ORDER TO owner
		            SEEK m.cownerid
		            IF FOUND()
		               m.nAmount = m.nAmount + nAmount
		               REPLACE nAmount WITH m.nAmount
		            ELSE
		               INSERT INTO auditrecs FROM MEMVAR
		            ENDIF
		            SELECT tempout
		         ENDSCAN
		         SELECT tempout
		         USE
		         *
		         *  Fill in Owner cOwnName from Owner table
		         *
		         SELECT auditrecs
		         SET ORDER TO 0
		         SCAN
		            REPLACE cSuspType WITH 'N'
		            m.cownerid  = cownerid
		            SELECT investor
		            SET ORDER TO cownerid
		            SEEK m.cownerid
		            IF FOUND()
		               m.cownname = cownname
		               SELECT auditrecs
		               REPLACE cownname WITH m.cownname
		            ELSE
		               SELECT programs
		               SET ORDER TO cProgCode
		               SEEK m.cownerid
		               IF FOUND()
		                  m.cownname = prog_cOwnName
		                  SELECT auditrecs
		                  REPLACE cownname WITH m.cownname, ;
		                     lProgFlag WITH .T.
		               ENDIF
		            ENDIF
		            SELECT auditrecs
		         ENDSCAN
		         thisform.cTitle1 = 'Owner Suspense - Cumulative Deficits and Minimums'
		         *
		         *  Owners On Hold
		         *
		      CASE tcType = 'OHLD'
		         SELECT susaudit.cownerid, investor.cownname, cAction, ;
		            cProgCode, .F. AS lProgFlag, SUM(nAmount) AS nAmount, cSuspType ;
		            FROM susaudit, investor ;
		            WHERE cAction = 'I' ;
		            AND BETWEEN(susaudit.cownerid,tcID1,tcID2) ;
		            AND IIF(tcGroup<>'**',cGroup=tcGroup,.T.) ;
		            AND cRunYear+STR(nRunNo) <= tcYear+STR(tnRunNo) ;
		            AND susaudit.cownerid = investor.cownerid ;
		            AND (investor.lhold = .T. or susaudit.csusptype='I') ;
		            INTO CURSOR tempin ;
		            ORDER BY susaudit.cownerid  ;
		            GROUP BY susaudit.cownerid
		         SELECT auditrecs
		         APPEND FROM DBF('tempin')
		         SELECT tempin
		         USE
		         SELECT susaudit.cownerid , investor.cownname, cAction, ;
		            cProgCode, .F. AS lProgFlag, SUM(nAmount*-1) AS nAmount, cSuspType ;
		            FROM susaudit, investor ;
		            WHERE cAction = 'O' ;
		            AND BETWEEN(susaudit.cownerid,tcID1,tcID2) ;
		            AND IIF(tcGroup<>'**',cGroup=tcGroup,.T.) ;
		            AND cRunYear+STR(nRunNo) <= tcYear+STR(tnRunNo) ;
		            AND susaudit.cownerid = investor.cownerid ;
		            AND (investor.lhold = .T. or susaudit.csusptype='I') ;
		            INTO CURSOR tempout ;
		            ORDER BY susaudit.cownerid   ;
		            GROUP BY susaudit.cownerid
		         SELECT tempout
		         *
		         *  Add the ins and outs together to get current suspense
		         *
		         SCAN
		            m.cownerid  = cownerid
		            m.cSuspType = cSuspType
		            m.nAmount   = nAmount
		            SELECT auditrecs
		            SET ORDER TO owner
		            SEEK m.cownerid
		            IF FOUND()
		               m.nAmount = m.nAmount + nAmount
		               REPLACE nAmount WITH m.nAmount
		            ELSE
		               INSERT INTO auditrecs FROM MEMVAR
		            ENDIF
		            SELECT tempout
		         ENDSCAN
		         SELECT tempout
		         USE
		         thisform.cTitle1 = 'Owners On Hold'   
		   ENDCASE
		ELSE
		   IF NOT tlByProgram
		      THISFORM.cReportName = 'dmrsusp1'
		   ENDIF
		   IF tlByProgram
		      THISFORM.cReportName = 'dmrsusp2'
		   ENDIF
		   IF tlByWell
		      THISFORM.cReportName = 'dmrsusp4'
		   ENDIF
		   CREATE CURSOR auditrecs ;
		      (cYear      C(4), ;
		      dSuspDate  D,    ;
		      cTime      C(8), ;
		      cAction    C(1), ;
		      cGroup     C(2), ;
		      nAmount    N(12,2), ;
		      nBal       N(12,2), ;
		      nIncome    N(12,2), ;
		      nExpenses  N(12,2), ;
		      nTaxes     N(12,2), ;
		      cSuspType  C(1), ;
		      cTypeInv   C(1), ;
		      csuspdesc  C(25), ;
		      cownerid   C(10), ;
		      cwellid    C(10), ;
		      cwellname  C(30), ;
		      cProgCode  C(10), ;
		      cprogname  C(30), ;
		      lProgFlag  L, ;
		      cPeriod    C(3), ;
		      cownname   C(40))
		   INDEX ON cownerid+cwellid+DTOS(dSuspDate)+cTime TAG ownerwell
		   INDEX ON cownerid+cwellid+DTOS(dSuspDate)+cTime DESC TAG ownerwelld
		   INDEX ON cownerid+cProgCode+DTOS(dSuspDate)+cTime TAG ownerprog
		   INDEX ON cownerid+cProgCode+DTOS(dSuspDate)+cTime DESC TAG ownerprogd
		   INDEX ON cownerid+DTOS(dSuspDate)+cTime TAG owner
		   INDEX ON cownerid+DTOS(dSuspDate)+cTime DESC TAG ownerd
		
		   CREATE CURSOR auditrecs1 ;
		      (cYear      C(4), ;
		      dSuspDate  D,    ;
		      cTime      C(8), ;
		      cAction    C(1), ;
		      cGroup     C(2), ;
		      nAmount    N(12,2), ;
		      nIncome    N(12,2), ;
		      nExpenses  N(12,2), ;
		      nTaxes     N(12,2), ;
		      cSuspType  C(1), ;
		      cTypeInv   C(1), ;
		      csuspdesc  C(25), ;
		      cownerid   C(10), ;
		      cwellid    C(10), ;
		      cwellname  C(30), ;
		      cProgCode  C(10), ;
		      cprogname  C(30), ;
		      lProgFlag  L, ;
		      cPeriod    C(3), ;
		      cownname   C(40))
		   INDEX ON cownerid+cwellid+DTOS(dSuspDate)+cTime TAG ownerwell
		   INDEX ON cownerid+cProgCode+DTOS(dSuspDate)+cTime TAG ownerprog
		   INDEX ON cownerid+DTOS(dSuspDate)+cTime TAG owner
		
		   jcount     = 0
		
		   DO CASE
		      CASE tcType = 'OPD'
		         SELECT cRunYear AS cYear, dSuspDate, cTime, IIF(cProgCode='NONE',' ',cProgCode) AS cProgCode, .F. AS lProgFlag, ;
		            cAction, nAmount, cTypeInv, cSuspType, ;
		            nIncome, nExpenses, nTaxes, ;
		            susaudit.cownerid, susaudit.cwellid AS cwellid, ;
		            PADL(ALLT(STR(nRunNo)),3,'0') AS cPeriod, cGroup, ;
		            investor.cownname AS cownname ;
		            FROM susaudit, investor ;
		            WHERE BETWEEN(susaudit.cownerid,tcID1,tcID2) ;
		            AND cSuspType = 'D' ;
		            AND IIF(tcGroup<>'**',cGroup=tcGroup,.T.) ;
		            AND cRunYear+STR(nRunNo) = tcYear+STR(tnRunNo) ;
		            AND susaudit.cownerid = investor.cownerid ;
		            ORDER BY susaudit.cownerid, susaudit.cProgCode, susaudit.dSuspDate, susaudit.cTime ;
		            INTO CURSOR temp
		         SELECT auditrecs
		         APPEND FROM DBF('temp')
		         GO TOP
		         SCAN
		            m.cownerid = cownerid
		            SELECT investor
		            SET ORDER TO cownerid
		            SEEK m.cownerid
		            IF FOUND()
		               m.cownname = cownname
		               SELECT auditrecs
		               REPLACE cownname WITH m.cownname
		            ELSE
		               SELECT programs
		               SET ORDER TO cProgCode
		               SEEK m.cownerid
		               IF FOUND()
		                  m.cownname = cprogname
		                  SELECT auditrecs
		                  REPLACE cownname WITH m.cownname, ;
		                     lProgFlag WITH .T.
		               ENDIF
		            ENDIF
		            SELECT auditrecs
		            m.cProgCode = cProgCode
		            IF NOT EMPTY(m.cProgCode)
		               SELECT programs
		               SET ORDER TO cProgCode
		               SEEK m.cProgCode
		               IF FOUND()
		                  m.cprogname = cprogname
		               ELSE
		                  m.cprogname = ' '
		               ENDIF
		               SELECT auditrecs
		               REPLACE cprogname WITH m.cprogname
		            ENDIF
		         ENDSCAN
		         SELECT auditrecs
		         thisform.ctitle1 = 'Owner Deficits For Selected Period'
		         
		      CASE tcType = 'OCD'
		         SELECT cRunYear AS cYear, dSuspDate, cTime, IIF(cProgCode='NONE',' ',cProgCode) AS cProgCode, .F. AS lProgFlag, ;
		            cAction AS cAction, nAmount AS nAmount, cSuspType, ;
		            nIncome, nExpenses, nTaxes, ;
		            susaudit.cownerid AS cownerid, susaudit.cwellid AS cwellid, ;
		            PADL(ALLT(STR(nRunNo)),3,'0') AS cPeriod, cTypeInv, cGroup, ;
		            investor.cownname AS cownname ;
		            FROM susaudit, investor ;
		            WHERE BETWEEN(susaudit.cownerid,tcID1,tcID2) ;
		            AND cRunYear+STR(nRunNo) <= tcYear+STR(tnRunNo) ;
		            AND IIF(tcGroup<>'**',cGroup=tcGroup,.T.) ;
		            AND susaudit.cownerid = investor.cownerid ;
		            AND NOT INLIST(cSuspType,'B','T') ;
		            ORDER BY susaudit.cownerid, susaudit.cProgCode, susaudit.dSuspDate, susaudit.cTime ;
		            INTO CURSOR temp
		         SELECT auditrecs
		         APPEND FROM DBF('temp')
		         GO TOP
		         SCAN
		            m.cwellid = cwellid
		            SELECT wells
		            SET ORDER TO cwellid
		            SEEK m.cwellid
		            IF FOUND()
		               m.cwellname = cwellname
		               SELECT auditrecs
		               REPLACE cwellname WITH m.cwellname
		            ENDIF
		            SELECT auditrecs
		            m.cProgCode = cProgCode
		            IF NOT EMPTY(m.cProgCode)
		               SELECT programs
		               SET ORDER TO cProgCode
		               SEEK m.cProgCode
		               IF FOUND()
		                  m.cprogname = cprogname
		               ELSE
		                  m.cprogname = ' '
		               ENDIF
		               SELECT auditrecs
		               REPLACE cprogname WITH m.cprogname
		            ENDIF
		         ENDSCAN
		
		         SELECT cownerid, cAction, cProgCode, .F. AS lProgFlag, SUM(nAmount) AS nAmount, cSuspType, cTypeInv, cGroup, ;
		            SUM(nIncome) AS nIncome, SUM(nExpenses) AS nExpenses, SUM(nTaxes) AS nTaxes ;
		            FROM susaudit ;
		            WHERE cAction = 'I' ;
		            AND BETWEEN(cownerid,tcID1,tcID2) ;
		            AND cRunYear+STR(nRunNo) <= tcYear+STR(tnRunNo) ;
		            AND IIF(tcGroup<>'**',cGroup=tcGroup,.T.) ;
		            AND NOT INLIST(cSuspType,'B','T') ;
		            INTO CURSOR tempin ;
		            ORDER BY cownerid  ;
		            GROUP BY cownerid
		         SELECT auditrecs1
		         APPEND FROM DBF('tempin')
		         SELECT tempin
		         USE
		         SELECT cownerid, cAction, cProgCode, .F. AS lProgFlag, SUM(nAmount*-1) AS nAmount, cSuspType, cTypeInv, cGroup, ;
		            SUM(nIncome*-1) AS nIncome, SUM(nExpenses*-1) AS nExpenses, SUM(nTaxes*-1) AS nTaxes ;
		            FROM susaudit ;
		            WHERE cAction = 'O' ;
		            AND BETWEEN(cownerid,tcID1,tcID2) ;
		            AND IIF(tcGroup<>'**',cGroup=tcGroup,.T.) ;
		            AND cRunYear+STR(nRunNo) <= tcYear+STR(tnRunNo) ;
		            AND NOT INLIST(cSuspType,'B','T') ;
		            INTO CURSOR tempout ;
		            ORDER BY cownerid   ;
		            GROUP BY cownerid
		
		         SELECT tempout
		         *
		         *  Add the ins and outs together to get current suspense
		         *
		         SCAN
		            SCATTER MEMVAR
		            SELECT auditrecs1
		            SEEK m.cownerid
		            IF FOUND()
		               m.nAmount = nAmount + m.nAmount
		               REPLACE nAmount WITH m.nAmount
		            ELSE
		               INSERT INTO auditrecs1 FROM MEMVAR
		            ENDIF
		            SELECT tempout
		         ENDSCAN
		         SELECT tempout
		         USE
		         SELECT auditrecs1
		         DELETE FOR nAmount >= 0
		
		         SELECT auditrecs
		         SCAN
		            m.cownerid = cownerid
		            SELECT auditrecs1
		            LOCATE FOR cownerid = m.cownerid
		            IF NOT FOUND()
		               SELECT auditrecs
		               DELETE NEXT 1
		            ENDIF
		         ENDSCAN
		         SELECT auditrecs
		         thisform.ctitle1 = 'Owner Cumulative Deficits'
		          
		      CASE tcType = 'OPM'
		         SELECT cRunYear AS cYear, dSuspDate, cTime, IIF(cProgCode='NONE',' ',cProgCode) AS cProgCode, .F. AS lProgFlag, ;
		            cAction AS cAction, nAmount AS nAmount, cTypeInv, cSuspType, ;
		            nIncome, nExpenses, nTaxes, ;
		            susaudit.cownerid AS cownerid, susaudit.cwellid AS cwellid, ;
		            PADL(ALLT(STR(nRunNo)),3,'0') AS cPeriod, cGroup, ;
		            investor.cownname AS cownname ;
		            FROM susaudit, investor ;
		            WHERE BETWEEN(susaudit.cownerid,tcID1,tcID2) ;
		            AND cSuspType = 'M' ;
		            AND IIF(tcGroup<>'**',cGroup=tcGroup,.T.) ;
		            AND cRunYear+STR(nRunNo) = tcYear+STR(tnRunNo) ;
		            AND susaudit.cownerid = investor.cownerid ;
		            ORDER BY susaudit.cownerid, susaudit.cProgCode, susaudit.dSuspDate, susaudit.cTime ;
		            INTO CURSOR temp
		         SELECT auditrecs
		         APPEND FROM DBF('temp')
		         GO TOP
		         SCAN
		            m.cwellid = cwellid
		            SELECT wells
		            SET ORDER TO cwellid
		            SEEK m.cwellid
		            IF FOUND()
		               m.cwellname = cwellname
		               SELECT auditrecs
		               REPLACE cwellname WITH m.cwellname
		            ENDIF
		            SELECT auditrecs
		            m.cProgCode = cProgCode
		            IF NOT EMPTY(m.cProgCode)
		               SELECT programs
		               SET ORDER TO cProgCode
		               SEEK m.cProgCode
		               IF FOUND()
		                  m.cprogname = cprogname
		               ELSE
		                  m.cprogname = ' '
		               ENDIF
		               SELECT auditrecs
		               REPLACE cprogname WITH m.cprogname
		            ENDIF
		         ENDSCAN
		         SELECT auditrecs
		         thisform.ctitle1 = 'Owner Revenue Suspense For Selected Period'
		         
		      CASE tcType = 'OCM'
		         SELECT cRunYear AS cYear, dSuspDate, cTime, IIF(cProgCode='NONE',' ',cProgCode) AS cProgCode, .F. AS lProgFlag, ;
		            cAction AS cAction, nAmount AS nAmount, cTypeInv, cSuspType, ;
		            nIncome, nExpenses, nTaxes, ;
		            susaudit.cownerid AS cownerid, susaudit.cwellid AS cwellid, ;
		            PADL(ALLT(STR(nRunNo)),3,'0') AS cPeriod, cGroup, ;
		            investor.cownname AS cownname ;
		            FROM susaudit, investor ;
		            WHERE BETWEEN(susaudit.cownerid,tcID1,tcID2) ;
		            AND cRunYear+STR(nRunNo) <= tcYear+STR(tnRunNo) ;
		            AND IIF(tcGroup<>'**',cGroup=tcGroup,.T.) ;
		            AND susaudit.cownerid = investor.cownerid ;
		            AND NOT INLIST(cSuspType,'B','T') ;
		            ORDER BY susaudit.cownerid, susaudit.cProgCode, susaudit.dSuspDate, susaudit.cTime ;
		            INTO CURSOR temp
		         SELECT auditrecs
		         APPEND FROM DBF('temp')
		         GO TOP
		         SCAN
		            m.cwellid = cwellid
		            SELECT wells
		            SET ORDER TO cwellid
		            SEEK m.cwellid
		            IF FOUND()
		               m.cwellname = cwellname
		               SELECT auditrecs
		               REPLACE cwellname WITH m.cwellname
		            ENDIF
		            SELECT auditrecs
		            m.cProgCode = cProgCode
		            IF NOT EMPTY(m.cProgCode)
		               SELECT programs
		               SET ORDER TO cProgCode
		               SEEK m.cProgCode
		               IF FOUND()
		                  m.cprogname = cprogname
		               ELSE
		                  m.cprogname = ' '
		               ENDIF
		               SELECT auditrecs
		               REPLACE cprogname WITH m.cprogname
		            ENDIF
		         ENDSCAN
		
		         SELECT cownerid, cAction, cProgCode, .F. AS lProgFlag, SUM(nAmount) AS nAmount, cTypeInv, cSuspType ;
		            FROM susaudit ;
		            WHERE cAction = 'I' ;
		            AND BETWEEN(cownerid,tcID1,tcID2) ;
		            AND cRunYear+STR(nRunNo) <= tcYear+STR(tnRunNo) ;
		            AND IIF(tcGroup<>'**',cGroup=tcGroup,.T.) ;
		            AND NOT INLIST(cSuspType,'B','T') ;
		            INTO CURSOR tempin ;
		            ORDER BY cownerid  ;
		            GROUP BY cownerid
		         SELECT auditrecs1
		         APPEND FROM DBF('tempin')
		         SELECT tempin
		         USE
		         SELECT cownerid, cAction, cProgCode, .F. AS lProgFlag, SUM(nAmount*-1) AS nAmount, cTypeInv, cSuspType ;
		            FROM susaudit ;
		            WHERE cAction = 'O' ;
		            AND BETWEEN(cownerid,tcID1,tcID2) ;
		            AND cRunYear+STR(nRunNo) <= tcYear+STR(tnRunNo) ;
		            AND IIF(tcGroup<>'**',cGroup=tcGroup,.T.) ;
		            AND NOT INLIST(cSuspType,'B','T') ;
		            INTO CURSOR tempout ;
		            ORDER BY cownerid   ;
		            GROUP BY cownerid
		
		         SELECT tempout
		         *
		         *  Add the ins and outs together to get current suspense
		         *
		         SCAN
		            SCATTER MEMVAR
		            SELECT auditrecs1
		            SEEK m.cownerid
		            IF FOUND()
		               m.nAmount = nAmount + m.nAmount
		               REPLACE nAmount WITH m.nAmount
		            ELSE
		               INSERT INTO auditrecs1 FROM MEMVAR
		            ENDIF
		            SELECT tempout
		         ENDSCAN
		         SELECT tempout
		         USE
		         SELECT auditrecs1
		         DELETE FOR nAmount <= 0
		
		         SELECT auditrecs
		         SCAN
		            m.cownerid = cownerid
		            SELECT auditrecs1
		            LOCATE FOR cownerid = m.cownerid
		            IF NOT FOUND()
		               SELECT auditrecs
		               DELETE NEXT 1
		            ENDIF
		         ENDSCAN
		         SELECT auditrecs
		         thisform.ctitle1 = 'Owner Cumulative Revenue Suspense'
		         
		      CASE tcType = 'ONET'
		         SELECT cRunYear AS cYear, dSuspDate, cTime, IIF(cProgCode='NONE',' ',cProgCode) AS cProgCode, .F. AS lProgFlag, ;
		            cAction AS cAction, nAmount AS nAmount, cTypeInv, cSuspType, cGroup, ;
		            nIncome, nExpenses, nTaxes, ;
		            susaudit.cownerid AS cownerid, susaudit.cwellid AS cwellid, ;
		            PADL(ALLT(STR(nRunNo)),3,'0') AS cPeriod, ;
		            investor.cownname AS cownname ;
		            FROM susaudit, investor ;
		            WHERE BETWEEN(susaudit.cownerid,tcID1,tcID2) ;
		            AND susaudit.cownerid = investor.cownerid ;
		            AND IIF(tcGroup<>'**',cGroup=tcGroup,.T.) ;
		            AND cRunYear+STR(nRunNo) <= tcYear+STR(tnRunNo) ;
		            ORDER BY susaudit.cownerid, susaudit.cProgCode, susaudit.dSuspDate, susaudit.cTime ;
		            INTO CURSOR temp
		         SELECT auditrecs
		         APPEND FROM DBF('temp')
		         GO TOP
		         SCAN
		            m.cwellid = cwellid
		            SELECT wells
		            SET ORDER TO cwellid
		            SEEK m.cwellid
		            IF FOUND()
		               m.cwellname = cwellname
		               SELECT auditrecs
		               REPLACE cwellname WITH m.cwellname
		            ENDIF
		            SELECT auditrecs
		            m.cProgCode = cProgCode
		            IF NOT EMPTY(m.cProgCode)
		               SELECT programs
		               SET ORDER TO cProgCode
		               SEEK m.cProgCode
		               IF FOUND()
		                  m.cprogname = cprogname
		               ELSE
		                  m.cprogname = ' '
		               ENDIF
		               SELECT auditrecs
		               REPLACE cprogname WITH m.cprogname
		            ENDIF
		         ENDSCAN
		         SELECT auditrecs
		         thisform.cTitle1 = 'Owner Suspense - Cumulative Deficits and Minimums'
		
		      CASE tcType = 'OHLD'
		         SELECT cRunYear AS cYear, dSuspDate, cTime, IIF(cProgCode='NONE',' ',cProgCode) AS cProgCode, .F. AS lProgFlag, ;
		            cAction AS cAction, nAmount AS nAmount, cTypeInv, cSuspType, cGroup, ;
		            nIncome, nExpenses, nTaxes, ;
		            susaudit.cownerid AS cownerid, susaudit.cwellid AS cwellid, ;
		            PADL(ALLT(STR(nRunNo)),3,'0') AS cPeriod, ;
		            investor.cownname AS cownname ;
		            FROM susaudit, investor ;
		            WHERE BETWEEN(susaudit.cownerid,tcID1,tcID2) ;
		            AND susaudit.cownerid = investor.cownerid ;
		            AND (investor.lhold = .T. or susaudit.csusptype='I') ;
		            AND IIF(tcGroup<>'**',cGroup=tcGroup,.T.) ;
		            AND cRunYear+STR(nRunNo) <= tcYear+STR(tnRunNo) ;
		            ORDER BY susaudit.cownerid, susaudit.cProgCode, susaudit.dSuspDate, susaudit.cTime ;
		            INTO CURSOR temp
		         SELECT auditrecs
		         APPEND FROM DBF('temp')
		         GO TOP
		         SCAN
		            m.cwellid = cwellid
		            SELECT wells
		            SET ORDER TO cwellid
		            SEEK m.cwellid
		            IF FOUND()
		               m.cwellname = cwellname
		               SELECT auditrecs
		               REPLACE cwellname WITH m.cwellname
		            ENDIF
		            SELECT auditrecs
		            m.cProgCode = cProgCode
		            IF NOT EMPTY(m.cProgCode)
		               SELECT programs
		               SET ORDER TO cProgCode
		               SEEK m.cProgCode
		               IF FOUND()
		                  m.cprogname = cprogname
		               ELSE
		                  m.cprogname = ' '
		               ENDIF
		               SELECT auditrecs
		               REPLACE cprogname WITH m.cprogname
		            ENDIF
		         ENDSCAN
		         SELECT auditrecs
		         thisform.cTitle1 = 'Owners On Hold'   
		   ENDCASE
		ENDIF
		
		SELECT auditrecs
		DELETE FOR nAmount = 0
		COUNT FOR NOT DELETED() TO lnCount
		
		lcWell  = ''
		lcProg  = ''
		lcOwner = ''
		lnBal   = 0
		
		sele auditrecs
		do case
		   case tlbywell
		      set order to ownerwell
		   case tlbyprogram
		      set order to ownerprog
		   otherwise
		      set order to owner
		endcase         
		   
		SELECT auditrecs
		SCAN
		   SCATTER MEMVAR
		   IF lcOwner <> m.cownerid
		      lnBal = 0
		      lcOwner = m.cownerid
		   ENDIF
		   IF tlByWell
		      IF lcWell <> m.cwellid
		         lnBal = 0
		         lcWell = m.cwellid
		      ENDIF
		   ENDIF
		   DO CASE
		      CASE m.cAction = 'I'
		         lnBal = lnBal + m.nAmount
		      CASE m.cAction = 'O'
		         lnBal = lnBal + (m.nAmount *-1)
		   ENDCASE
		   REPL nBal WITH lnBal
		
		   DO CASE
		      CASE cSuspType = 'I'
		         m.csuspdesc = 'Investor On Hold'
		      CASE cSuspType = 'B'
		         m.csuspdesc = 'Backup Withholding'
		      CASE cSuspType = 'A'
		         m.csuspdesc = 'Annual Pays'
		      CASE cSuspType = 'Q'
		         m.csuspdesc = 'Quarterly Pays'
		      CASE cSuspType = 'S'
		         m.csuspdesc = 'Semi-Annual Pays'
		      CASE cSuspType = 'T'
		         m.csuspdesc = 'Tax Withholding'
		      OTHERWISE
		         m.csuspdesc = ' '
		   ENDCASE
		   REPLACE csuspdesc WITH m.csuspdesc
		ENDSCAN
		
		IF tlZeroBal AND NOT tlSummary
		   SELE auditrecs
		   DO CASE
		      CASE tlByProgram
		         SET ORDER TO ownerprogd
		         SELE cownerid, cProgCode FROM auditrecs INTO CURSOR temp ORDER BY cownerid, cProgCode GROUP BY cownerid, cProgCode
		         SELE temp
		         SCAN
		            SCATTER MEMVAR
		            WAIT WIND NOWAIT 'Removing zero balances for owner: ' + m.cOwnerid
		            SELE auditrecs
		            LOCATE FOR cownerid = m.cownerid AND cProgCode = m.cProgCode AND nBal = 0
		            IF FOUND()
		               DELE REST FOR cownerid = m.cownerid AND cProgCode = m.cProgCode
		            ENDIF
		         ENDSCAN
		         WAIT CLEAR
		         SELE auditrecs
		         SET ORDER TO ownerprog
		      CASE tlByWell
		         SET ORDER TO ownerwelld
		         SELE cownerid, cwellid FROM auditrecs INTO CURSOR temp ORDER BY cownerid, cwellid GROUP BY cownerid, cwellid
		         SELE temp
		         SCAN
		            SCATTER MEMVAR
		            WAIT WIND NOWAIT 'Removing zero balances for owner: ' + m.cOwnerid
		            SELE auditrecs
		            LOCATE FOR cownerid = m.cownerid AND cWellID = m.cWellID AND nBal = 0
		            IF FOUND()
		               DELE REST FOR cownerid = m.cownerid AND cWellID = m.cWellID
		            ENDIF
		         ENDSCAN
		         WAIT CLEAR
		         SELE auditrecs
		         SET ORDER TO ownerwell
		      OTHERWISE
		         SET ORDER TO ownerd
		         SELE cownerid FROM auditrecs INTO CURSOR temp ORDER BY cownerid GROUP BY cownerid
		         SELE temp
		         SCAN
		            SCATTER MEMVAR
		            WAIT WIND NOWAIT 'Removing zero balances for owner: ' + m.cOwnerid
		            SELE auditrecs
		            LOCATE FOR cownerid = m.cownerid AND nBal = 0
		            IF FOUND()
		               DELE REST FOR cownerid = m.cownerid
		            ENDIF
		         ENDSCAN
		         WAIT CLEAR
		         SELE auditrecs
		         SET ORDER TO owner
		   ENDCASE
		ENDIF
		
		sele investor
		set order to cownerid
		set exact on
		SELE auditrecs
		scan
		   m.cownerid = cownerid
		   sele investor
		   if seek(m.cownerid)
		      m.cownname = cownname
		      sele auditrecs
		      repl cownname with m.cownname
		   endif
		endscan
		      
		IF tlByProgram
		   SET ORDER TO ownerprog
		ELSE
		   IF tlByWell
		      SET ORDER TO ownerwell
		   ELSE
		      SET ORDER TO owner
		   ENDIF
		ENDIF
		
		SELECT auditrecs
		COUNT FOR NOT DELETED() TO lnCount
		
		IF lnCount > 0
		   RETURN .T.
		ELSE
		   RETURN .F.
		ENDIF
		
		
		
	ENDPROC

	PROCEDURE buildstmt
	ENDPROC

	PROCEDURE getprevmins		&& Get previous minimums
	ENDPROC

	PROCEDURE Init
		
		SET DELETED ON
		
		thisform.crptType = 'ONET'
		
		SELECT investor
		SET ORDER TO cownerid
		GO TOP
		
		THISFORM.swrptlook1.txtbegname.VALUE = cownname
		THISFORM.swrptlook1.txtbegid.VALUE = cownerid
		GO BOTTOM
		
		THISFORM.swrptlook1.txtendname.VALUE = cownname
		THISFORM.swrptlook1.txtendid.VALUE = cownerid
		
		THISFORM.chkSummary.VALUE = .F.
		THISFORM.chkByProgram.VALUE = .F.
		THISFORM.chkByWell.VALUE = .F.
		
		DODEFAULT()
		
	ENDPROC

	PROCEDURE cboRptType.Init
		
		
		this.addlistitem('Cumulative Deficits and Minimums',1,1)
		this.addlistitem('ONET',1,2)
		this.addlistitem('Cumulative Deficits',2,1)
		this.addlistitem('OCD',2,2)
		this.addlistitem('Deficits For Selected Period',3,1)
		this.addlistitem('OPD',3,2)
		this.addlistitem('Cumulative Revenue Suspense',4,1)
		this.addlistitem('OCM',4,2)
		this.addlistitem('Revenue Suspense For Selected Period',5,1)
		this.addlistitem('OPM',5,2)
		this.addlistitem('Owners On Hold',6,1)
		this.addlistitem('OHLD',6,2)
		this.listitemid = 1
		dodefault()
	ENDPROC

	PROCEDURE cboRptType.Valid
		
		tcrpttype = this.value
		do case
		   CASE tcrpttype = 'OCD'
		      thisform.cTitle1 = 'Owner Cumulative Deficits'
		   CASE tcrpttype = 'OPD'
		      thisform.cTitle1 = 'Owner Deficits For Selected Period'
		   CASE tcrpttype = 'OCM'
		      thisform.cTitle1 = 'Owner Cumulative Revenue Suspense'
		   CASE tcrpttype = 'OPM'
		      thisform.cTitle1 = 'Owner Revenue Suspense For Selected Period'
		   CASE tcrpttype = 'ONET'
		      thisform.cTitle1 = 'Owner Suspense - Cumulative Deficits and Minimums'
		   CASE tcrpttype = 'OHLD'
		      thisform.cTitle1 = 'Owners On Hold'   
		ENDCASE
		
		thisform.crptType = tcrpttype
		
		dodefault()
	ENDPROC

	PROCEDURE chkByProgram.Click
		IF this.value
		   thisform.chkbywell.value = .f.
		endif   
	ENDPROC

	PROCEDURE chkByWell.Click
		IF this.value
		   thisform.chkbyProgram.value = .f.
		ENDIF   
	ENDPROC

	PROCEDURE chkSummary.Click
		IF this.value
		   thisform.chkbyprogram.enabled = .f.
		   thisform.chkbywell.enabled = .f.
		   thisform.chkzerobalance.enabled = .f.
		   thisform.chkbyprogram.value = .f.
		   thisform.chkbywell.value = .f.
		   thisform.chkzerobalance.value = .f.
		ELSE
		   thisform.chkbyprogram.enabled = .t.
		   thisform.chkbywell.enabled = .t.
		   thisform.chkzerobalance.enabled = .t.
		ENDIF   
		   
	ENDPROC

	PROCEDURE Runcombo1.Init
		IF DODEFAULT()
		   this.listitemid = 1
		ENDIF   
	ENDPROC

	PROCEDURE Swrptlook1.Swlookupbutton1.Click
		LOCAL lcList
		PRIV llOK
		
		llOK = .F.
		lcList = 'cownerid,csortfield'
		
		DO FORM ..\custom\picklist WITH 'Investor', lcList, thisform.swrptlook1.txtbegid.value, 2
		
		IF llOK
		   thisform.swrptlook1.txtBegId.value = cOwnerID
		   thisform.swrptlook1.txtBegName.value = cOwnname
		   thisform.swrptlook1.txtBegId.refresh()
		   thisform.swrptlook1.txtBegName.refresh()
		ENDIF   
		
		thisform.setnextcontrol(thisform.swrptlook1.txtBegId)
		
	ENDPROC

	PROCEDURE Swrptlook1.Swlookupbutton2.Click
		LOCAL lcList
		PRIV llOK
		
		llOK = .F.
		lcList = 'cownerid,csortfield'
		
		DO FORM ..\custom\picklist WITH 'Investor', lcList, thisform.swrptlook1.txtendid.value, 2
		
		IF llOK
		   thisform.swrptlook1.txtEndId.value = cOwnerID
		   thisform.swrptlook1.txtEndName.value = cOwnname
		   thisform.swrptlook1.txtEndId.refresh()
		   thisform.swrptlook1.txtEndName.refresh()
		ENDIF   
		
		thisform.setnextcontrol(thisform.swrptlook1.txtEndId)
		
	ENDPROC

ENDDEFINE
