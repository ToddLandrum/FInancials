*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="dmrodisb.scx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="2" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Cursor1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor6" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor7" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor8" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor9" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor10" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor11" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor12" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor13" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor15" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor16" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor17" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor14" UniqueID="" Timestamp="" />

	AutoOpenTables = .F.
	DataSource = .NULL.
	Height = 524
	Left = 40
	Name = "Dataenvironment"
	Top = 235
	Width = 573

	ADD OBJECT 'Cursor1' AS cursor WITH ;
		Alias = "investor", ;
		CursorSource = "investor", ;
		Database = ..\newdbc\appdata.dbc, ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor1", ;
		Top = 20, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor10' AS cursor WITH ;
		Alias = "revsrc", ;
		CursorSource = "revsrc", ;
		Database = ..\newdbc\appdata.dbc, ;
		Height = 90, ;
		Left = 150, ;
		Name = "Cursor10", ;
		Top = 260, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor11' AS cursor WITH ;
		Alias = "sevtax", ;
		CursorSource = "sevtax", ;
		Database = ..\newdbc\appdata.dbc, ;
		Height = 90, ;
		Left = 290, ;
		Name = "Cursor11", ;
		Top = 260, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor12' AS cursor WITH ;
		Alias = "wellhist", ;
		CursorSource = "wellhist", ;
		Database = ..\newdbc\appdata.dbc, ;
		Height = 90, ;
		Left = 430, ;
		Name = "Cursor12", ;
		Top = 260, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor13' AS cursor WITH ;
		Alias = "wellinv", ;
		CursorSource = "wellinv", ;
		Database = ..\newdbc\appdata.dbc, ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor13", ;
		Top = 380, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor14' AS cursor WITH ;
		Alias = "suspense", ;
		CursorSource = "suspense", ;
		Database = ..\newdbc\appdata.dbc, ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor14", ;
		Top = 500, ;
		Width = 91
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor15' AS cursor WITH ;
		Alias = "vendor", ;
		CursorSource = "vendor", ;
		Database = ..\newdbc\appdata.dbc, ;
		Height = 90, ;
		Left = 290, ;
		Name = "Cursor15", ;
		Top = 380, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor16' AS cursor WITH ;
		Alias = "sysctl", ;
		CursorSource = "sysctl", ;
		Database = ..\newdbc\appdata.dbc, ;
		Height = 90, ;
		Left = 430, ;
		Name = "Cursor16", ;
		Top = 380, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor17' AS cursor WITH ;
		Alias = "options", ;
		CursorSource = "options", ;
		Database = ..\newdbc\appdata.dbc, ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor17", ;
		Top = 500, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor2' AS cursor WITH ;
		Alias = "groups", ;
		CursorSource = "groups", ;
		Database = ..\newdbc\appdata.dbc, ;
		Height = 90, ;
		Left = 132, ;
		Name = "Cursor2", ;
		Top = 21, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor3' AS cursor WITH ;
		Alias = "wells", ;
		CursorSource = "wells", ;
		Database = ..\newdbc\appdata.dbc, ;
		Height = 90, ;
		Left = 290, ;
		Name = "Cursor3", ;
		Top = 20, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor4' AS cursor WITH ;
		Alias = "glopt", ;
		CursorSource = "glopt", ;
		Database = ..\newdbc\appdata.dbc, ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor4", ;
		Top = 140, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor5' AS cursor WITH ;
		Alias = "disbhist", ;
		CursorSource = "disbhist", ;
		Database = ..\newdbc\appdata.dbc, ;
		Height = 90, ;
		Left = 399, ;
		Name = "Cursor5", ;
		Top = 14, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor6' AS cursor WITH ;
		Alias = "expense", ;
		CursorSource = "expense", ;
		Database = ..\newdbc\appdata.dbc, ;
		Height = 90, ;
		Left = 150, ;
		Name = "Cursor6", ;
		Top = 140, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor7' AS cursor WITH ;
		Alias = "expcat", ;
		CursorSource = "expcat", ;
		Database = ..\newdbc\appdata.dbc, ;
		Height = 90, ;
		Left = 290, ;
		Name = "Cursor7", ;
		Top = 140, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor8' AS cursor WITH ;
		Alias = "susaudit", ;
		CursorSource = "susaudit", ;
		Database = ..\newdbc\appdata.dbc, ;
		Height = 90, ;
		Left = 430, ;
		Name = "Cursor8", ;
		Top = 140, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor9' AS cursor WITH ;
		Alias = "revcat", ;
		CursorSource = "revcat", ;
		Database = ..\newdbc\appdata.dbc, ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor9", ;
		Top = 260, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

ENDDEFINE

DEFINE CLASS formdmrodisb AS frmrptcriteria OF "..\source\appforms.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="chkOwnPage" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkPrograms" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Swgroup1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkIncDirect" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Swrptlook1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="LblGroup" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="LblEndID" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="LblBegID" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Runcombo1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkChecksOnly" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblAcctDate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkSummarize" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkNoSuspense" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtAcctDate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkPostingOnly" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkSelected" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblSelected" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkDOIDecks" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*p: lcloserun
		*p: loldversion
	*</DefinedPropArrayMethod>

	Caption = "Owner Disbursement Summary"
	DataSession = 2
	DoCreate = .T.
	Height = 519
	HelpContextID = 219
	loldversion = .F.
	Name = "FormDmrodisb"
	Visible = .T.
	Width = 597
	Swrptcriteriabuttons1.chkExport.Alignment = 0
	Swrptcriteriabuttons1.chkExport.Name = "chkExport"
	Swrptcriteriabuttons1.cmdclose.Name = "cmdclose"
	Swrptcriteriabuttons1.cmdPreview.Name = "cmdPreview"
	Swrptcriteriabuttons1.cmdPrint.Name = "cmdPrint"
	Swrptcriteriabuttons1.Left = 167
	Swrptcriteriabuttons1.Name = "Swrptcriteriabuttons1"
	Swrptcriteriabuttons1.TabIndex = 16
	Swrptcriteriabuttons1.Top = 433
	Swrptcriteriabuttons1.ZOrderSet = 0

	ADD OBJECT 'chkChecksOnly' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Show Only Owners Who Received Checks", ;
		Left = 84, ;
		lenabled = .F., ;
		Name = "chkChecksOnly", ;
		TabIndex = 8, ;
		Top = 296, ;
		Value = .F.
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkDOIDecks' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Show DOI Deck", ;
		Left = 336, ;
		Name = "chkDOIDecks", ;
		TabIndex = 15, ;
		Top = 368, ;
		Value = .F.
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkIncDirect' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Include Direct Paid Oil and Gas", ;
		Left = 84, ;
		Name = "chkIncDirect", ;
		TabIndex = 12, ;
		Top = 368, ;
		Value = .F.
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkNoSuspense' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Don't Show Suspense Activity", ;
		Left = 336, ;
		Name = "chkNoSuspense", ;
		TabIndex = 14, ;
		Top = 320, ;
		Value = .F.
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkOwnPage' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Start a New Page for Each Owner", ;
		Left = 84, ;
		Name = "chkOwnPage", ;
		TabIndex = 9, ;
		Top = 320, ;
		Value = .F.
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkPostingOnly' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Include Only Posting Owners", ;
		Left = 336, ;
		Name = "chkPostingOnly", ;
		TabIndex = 15, ;
		Top = 343, ;
		Value = .F.
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkPrograms' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Report by Program", ;
		Left = 84, ;
		Name = "chkPrograms", ;
		TabIndex = 10, ;
		Top = 343, ;
		Value = .F.
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkSelected' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Choose Selected Owners", ;
		Left = 222, ;
		Name = "chkSelected", ;
		TabIndex = 6, ;
		Top = 134, ;
		Value = .F.
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkSummarize' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Subtotal by Production Period", ;
		Left = 336, ;
		Name = "chkSummarize", ;
		TabIndex = 13, ;
		Top = 296, ;
		Value = .T.
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'lblAcctDate' AS lbllabelcustom WITH ;
		Caption = "Accounting Date:", ;
		Left = 84, ;
		Name = "lblAcctDate", ;
		TabIndex = 18, ;
		Top = 93, ;
		Visible = .T.
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'LblBegID' AS lbllabelcustom WITH ;
		AutoSize = .T., ;
		Caption = "First Owner:", ;
		FontSize = 8, ;
		Height = 16, ;
		Left = 84, ;
		Name = "LblBegID", ;
		TabIndex = 3, ;
		Top = 169, ;
		Width = 63, ;
		ZOrderSet = 9
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'LblEndID' AS lbllabelcustom WITH ;
		AutoSize = .T., ;
		Caption = "Last Owner:", ;
		FontSize = 8, ;
		Height = 16, ;
		Left = 84, ;
		Name = "LblEndID", ;
		TabIndex = 4, ;
		Top = 220, ;
		Width = 63, ;
		ZOrderSet = 8
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'LblGroup' AS lbllabelcustom WITH ;
		AutoSize = .T., ;
		Caption = "Group:", ;
		Height = 16, ;
		Left = 84, ;
		Name = "LblGroup", ;
		TabIndex = 11, ;
		Top = 57, ;
		Visible = .T., ;
		Width = 35, ;
		ZOrderSet = 7
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom1' AS lbllabelcustom WITH ;
		Caption = "Run No", ;
		Left = 84, ;
		Name = "Lbllabelcustom1", ;
		TabIndex = 17, ;
		Top = 26
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblSelected' AS lbllabelcustom WITH ;
		Caption = "All Owners Selected", ;
		ForeColor = 0,0,255, ;
		Left = 242, ;
		Name = "lblSelected", ;
		TabIndex = 19, ;
		Top = 195, ;
		Visible = .F.
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Runcombo1' AS runcombo WITH ;
		cshowwhat = R, ;
		Height = 20, ;
		Left = 136, ;
		Name = "Runcombo1", ;
		TabIndex = 1, ;
		Top = 24, ;
		Width = 360
		*< END OBJECT: ClassLib="..\custom\swcontrol.vcx" BaseClass="combobox" />

	ADD OBJECT 'Swgroup1' AS swgroup WITH ;
		Height = 20, ;
		Left = 171, ;
		lexcludeall = .T., ;
		Name = "Swgroup1", ;
		TabIndex = 2, ;
		Top = 55, ;
		Visible = .T., ;
		Width = 325, ;
		ZOrderSet = 4
		*< END OBJECT: ClassLib="..\custom\swcontrol.vcx" BaseClass="combobox" />

	ADD OBJECT 'Swrptlook1' AS swrptlook WITH ;
		Height = 93, ;
		Left = 172, ;
		Name = "Swrptlook1", ;
		TabIndex = 7, ;
		Top = 166, ;
		Width = 324, ;
		ZOrderSet = 6, ;
		Swlookupbutton1.Name = "Swlookupbutton1", ;
		Swlookupbutton2.Name = "Swlookupbutton2", ;
		TxtBegID.clistexpression = investor.cOwnerid, ;
		TxtBegID.clistworkarea = investor, ;
		TxtBegID.InputMask = "", ;
		TxtBegID.MaxLength = 10, ;
		TxtBegID.Name = "TxtBegID", ;
		TxtBegName.Height = 20, ;
		TxtBegName.Left = 0, ;
		TxtBegName.Name = "TxtBegName", ;
		TxtBegName.Top = 22, ;
		TxtBegName.Width = 312, ;
		TxtEndID.clistexpression = investor.cOwnerid, ;
		TxtEndID.clistworkarea = investor, ;
		TxtEndID.InputMask = "", ;
		TxtEndID.MaxLength = 10, ;
		TxtEndID.Name = "TxtEndID", ;
		TxtEndName.Height = 20, ;
		TxtEndName.Left = 0, ;
		TxtEndName.Name = "TxtEndName", ;
		TxtEndName.Top = 73, ;
		TxtEndName.Width = 312
		*< END OBJECT: ClassLib="..\custom\swcontrol.vcx" BaseClass="container" />

	ADD OBJECT 'txtAcctDate' AS dpk WITH ;
		ControlSource = "", ;
		Height = 20, ;
		Left = 172, ;
		Name = "txtAcctDate", ;
		TabIndex = 5, ;
		Top = 91, ;
		Visible = .T., ;
		Width = 75
		*< END OBJECT: ClassLib="..\custom\swdate.vcx" BaseClass="textbox" />
	
	PROCEDURE builddata
		LOCAL tcOwner1, tcOwner2, tcYear, tcPeriod, tlSummary, llSummarize, lcVersion
		LOCAL llPostingOnly, llNoSuspense, tlOwnPage, tlIncDirect, tlPrograms
		LOCAL tcDMBatch
		LOCAL oDist AS 'olddistproc'
		LOCAL lOrderGroup, lPriorSusp, llReturn, lnCount, lnMax, loError
		PRIVATE plIncludeDeck
		*:Global cgroupname, cprogcode, cprogname, cwellname, glNetSusp, ngrossbbl, ngrossmcf, nnetcheck
		*:Global npricebbl, npricemcf, nsevtaxes, tcGroup, tcWellID1, tcWellID2, tdAcctDate, tnRunNo
		
		llReturn = .F.
		
		TRY
		   tcOwner1 = THISFORM.swrptlook1.txtBegID.VALUE
		   tcOwner2 = THISFORM.swrptlook1.txtEndID.VALUE
		   tcYear   = THISFORM.runcombo1.LISTITEM[thisform.runcombo1.listitemid, 2]
		   tnRunNo  = INT(VAL(THISFORM.runcombo1.LISTITEM[thisform.runcombo1.listitemid, 3]))
		
		   IF tnRunNo  = 0
		      tcGroup    = LEFT(THISFORM.swgroup1.VALUE, 2)
		      tdAcctDate = THISFORM.txtacctdate.VALUE
		      tcYear     = STR(YEAR(tdAcctDate), 4)
		      tnNewRunNo = getrunno(tcYear, .T., 'R')
		   ELSE
		      tcGroup    = THISFORM.runcombo1.LISTITEM[thisform.runcombo1.listitemid, 4]
		      tdAcctDate = CTOD(THISFORM.runcombo1.LISTITEM[thisform.runcombo1.listitemid, 7])
		   ENDIF
		
		   lcVersion     = ' '
		   tcDMBatch     = THISFORM.runcombo1.LISTITEM[thisform.runcombo1.listitemid, 5]
		   lcDate        = THISFORM.runcombo1.LISTITEM[thisform.runcombo1.listitemid, 7]
		   tlOwnPage     = THISFORM.chkOwnPage.VALUE
		   tlPrograms    = THISFORM.chkPrograms.VALUE
		   tlIncDirect   = THISFORM.chkIncDirect.VALUE
		   llSummarize   = THISFORM.chkSummarize.VALUE
		   llNoSuspense  = THISFORM.chkNoSuspense.VALUE
		   llPostingOnly = THISFORM.chkpostingOnly.VALUE
		   llChecksOnly  = thisform.chkChecksOnly.Value 
		   llSelected    = thisform.chkselected.Value 
		   plIncludeDeck = thisform.chkdoiDecks.value
		
		   IF llPostingOnly
		      swselect('investor')
		      SET ORDER TO cownerid
		      GO TOP
		      tcOwner1 = cownerid
		      GO BOTT
		      tcOwner2 = cownerid
		   ENDIF
		   
		   IF NOT llSelected
		      SELECT cownerid as cid FROM investor ;
		        INTO CURSOR selected ;
		        WHERE BETWEEN(cownerid,tcOwner1,tcOwner2) ;
		        ORDER BY cid
		   ENDIF 
		
		   THISFORM.cTitle1 = 'Owner Disbursement Summary'
		   IF tnRunNo = 0
		      THISFORM.cTitle2 = 'New Run - Group: ' + tcGroup
		      lcVersion        = '**'
		   ELSE
		      THISFORM.cTitle2 = 'For Run: ' + PADL(ALLT(STR(tnRunNo)), 3, '0') + '/' + tcYear + ' Group: ' + tcGroup + ' ' + lcDate
		* Check to see what version the run was closed under
		      swselect('sysctl')
		      LOCATE FOR nrunno == tnRunNo AND cRunYear == tcYear AND ctypeclose = 'R'
		      IF FOUND()
		         lcVersion = cVersion
		      ENDIF
		   ENDIF
		
		   IF tlIncDirect
		      THISFORM.cSelectCriteria = 'Inc: Direct  Owners: ' + ALLTRIM(tcOwner1) + ' - ' + ALLTRIM(tcOwner2)
		   ELSE
		      THISFORM.cSelectCriteria = 'Owners: ' + ALLTRIM(tcOwner1) + ' - ' + ALLTRIM(tcOwner2)
		   ENDIF
		   THISFORM.cSortOrder = 'Owner ID'
		
		   swselect('wells')
		   SET ORDER TO cwellid
		   GO TOP
		   tcWellID1 = cwellid
		   GO BOTT
		   tcWellID2 = cwellid
		
		   SELE groups
		   LOCATE FOR cgroup = tcGroup
		   IF FOUND()
		      m.cgroupname = cdesc
		   ELSE
		      m.cgroupname = 'All Groups'
		   ENDIF
		
		   IF plIncludeDeck
		      lOrderGroup = 'invtmp.cOwnerID, invtmp.cwellid, invtmp.ctypeinv, invtmp.hyear, invtmp.hperiod, invtmp.cdeck, invtmp.csusptype, invtmp.ciddisb, invtmp.cprogcode'
		   ELSE
		      lOrderGroup = 'invtmp.cOwnerID, invtmp.cwellid, invtmp.cdeck, invtmp.ctypeinv, invtmp.hyear, invtmp.hperiod, invtmp.csusptype, invtmp.ciddisb, invtmp.cprogcode'
		   ENDIF       
		
		*
		*  Call distproc to create the (invtmp) and (wellwork) cursors
		*
		* If the version is empty we assume it was
		* closed under the old version before we
		* started storing the version #. If so,
		* use the old ownerstmt class.
		
		   IF EMPTY(lcVersion) AND tnRunNo <> 0
		      oDist = CREATEOBJECT('olddistproc', tcOwner1, tcOwner2, ;
		           '01', ;
		           tcYear, ;
		           tcGroup, 'O', tdAcctDate, .F., tnRunNo)
		      THISFORM.lOldversion = .T.
		   ELSE
		      oDist = CREATEOBJECT('distproc', tcOwner1, tcOwner2, ;
		           '01', ;
		           tcYear, ;
		           tcGroup, 'O', tdAcctDate, .F., tnRunNo)
		   ENDIF
		
		   IF oDist.MAIN(.F., .T.)
		      WAIT WIND NOWAIT 'Building Report File....'
		
		      DO CASE
		         CASE NOT tlOwnPage AND NOT tlPrograms
		            THISFORM.creportname = 'dmrodisb1'
		         CASE NOT tlOwnPage AND tlPrograms
		            THISFORM.creportname = 'dmrodisb2'
		         CASE tlOwnPage AND NOT tlPrograms
		            THISFORM.creportname = 'dmrodisb5'
		         CASE tlOwnPage AND tlPrograms
		            THISFORM.creportname = 'dmrodisb6'
		      ENDCASE
		      
		      IF tnRunNo = 0
		            IF USED('tsuspense')
		                SELECT tsuspense
		                SCAN
		                    SCATTER MEMVAR
		                    INSERT INTO invtmp FROM MEMVAR
		                ENDSCAN
		            ENDIF
		        ENDIF
		
		
			  SELECT  cownerid,;
					  SUM(ROUND(nnetcheck, 2)) AS ntotalck  ;
				  FROM invtmp ;
				  INTO CURSOR invtotal READWRITE  ;
				  GROUP BY cownerid ;
				  ORDER BY cownerid
		
		      swselect('groups')
		      SET ORDER TO cgroup
		      IF SEEK(tcGroup)
		         glNetSusp = lNetDef
		      ELSE
		         glNetSusp = .T.
		      ENDIF
		
		      SET SAFETY OFF
		
		      DO CASE 
		         CASE llChecksOnly = .T. AND NOT llPostingOnly
		            SELE cID AS cownerid, .T. AS junk FROM checks WHERE cBatch = tcDMBatch INTO CURSOR tempchks NOFILTER ORDER BY cID
		      
		         CASE llPostingOnly
		            SELECT cownerid FROM investor WHERE lIntegGL INTO CURSOR tempchks NOFILTER ORDER BY cownerid
		         
		         OTHERWISE
		            SELE cownerid, .T. AS junk FROM investor INTO CURSOR tempchks NOFILTER where cownerid in (select cid from selected) ORDER BY cownerid
		             
		      ENDCASE 
		
		      CREATE CURSOR disbstmts ;
		         (cRptGroup       C(1), ;
		           cownerid         C(10), ;
		           cOwnname         C(40), ;
		           cwellid          C(10), ;
		           cDeck            C(10), ;
		           nincome          N(12, 2), ;
		           noilrev          N(12, 2), ;
		           ngasrev          N(12, 2), ;
		           nothrev          N(12, 2), ;
		           ngrossbbl        N(12, 2), ;
		           ngrossmcf        N(12, 2), ;
		           ntotbbl          N(12, 2) NULL, ;
		           ntotmcf          N(12, 2) NULL, ;
		           ntotprod         N(12, 2) NULL, ;
		           ctypeinv         C(1), ;
		           ctypeint         C(1), ;
		           cdirect          C(1), ;
		           nexpense         N(12, 2), ;
		           nsevtaxes        N(12, 2), ;
		           ncompress        N(12, 2), ;
		           ngather          N(12, 2), ;
		           nnetcheck        N(12, 2), ;
		           npricebbl        N(12, 4), ;
		           npricemcf        N(12, 4), ;
		           nworkint         N(11, 7), ;
		           nintclass1       N(11, 7), ;
		           nintclass2       N(11, 7), ;
		           nintclass3       N(11, 7), ;
		           nintclass4       N(11, 7), ;
		           nintclass5       N(11, 7), ;
		           nrevoil          N(11, 7), ;
		           nrevgas          N(11, 7), ;
		           nacpint          N(11, 7), ;
		           nbcpint          N(11, 7), ;
		           nrevoth          N(11, 7), ;
		           nOiltax1         N(9, 2), ;
		           nOiltax2         N(9, 2), ;
		           nOiltax3         N(9, 2), ;
		           nOiltax4         N(9, 2), ;
		           nGastax1         N(9, 2), ;
		           nGastax2         N(9, 2), ;
		           nGastax3         N(9, 2), ;
		           nGastax4         N(9, 2), ;
		           nMisc            N(12, 2), ;
		           nOper            N(12, 2), ;
		           nTrans           N(12, 2), ;
		           hyear            C(4), ;
		           hperiod          C(2), ;
		           cprogcode        C(10), ;
		           cprogname        C(40), ;
		           cwellname        C(30) NULL, ;
		           lPriorSusp       L, ;
		           cSuspType        C(1), ;
		           nrunno           I, ;
		           crunyear         C(4), ;
		           nrunno_in        I, ;
		           cRunYear_In      C(4), ;
		           ncheck_amt       N(12, 2))
		
		      IF THISFORM.lOldversion AND USED('invsusp')
		         SELECT invsusp
		         SCAN
		            SCATTER MEMVAR
		            IF NOT llNoSuspense
		               IF m.cprogcode <> ' ' AND m.cprogcode <> 'NONE'
		                  IF m.lProgNet = .T.
		                     SELECT invtmp
		                     SET ORDER TO invtype
		                     IF NOT SEEK(m.cownerid + m.cwellid + m.ctypeinv + m.ctypeint + m.cprogcode)
		                        INSERT INTO invtmp FROM MEMVAR
		                     ELSE
		                        REPLACE nnetcheck WITH nnetcheck + m.nnetcheck, ;
		                           nincome   WITH nincome   + m.nincome, ;
		                           nexpense  WITH nexpense  + m.nexpense, ;
		                           nsevtaxes WITH nsevtaxes + m.nsevtaxes
		                     ENDIF
		                  ENDIF
		               ELSE
		                  SELECT invtmp
		                  SET ORDER TO invtype
		                  IF NOT SEEK(m.cownerid + m.cwellid + m.ctypeinv + m.ctypeint + m.cprogcode)
		                     INSERT INTO invtmp FROM MEMVAR
		                  ELSE
		                     REPLACE nnetcheck WITH nnetcheck + m.nnetcheck, ;
		                        nincome   WITH nincome   + m.nincome, ;
		                        nexpense  WITH nexpense  + m.nexpense, ;
		                        nsevtaxes WITH nsevtaxes + m.nsevtaxes
		                  ENDIF
		               ENDIF
		            ENDIF
		            SELECT invsusp
		         ENDSCAN
		      ENDIF
		
		* Check to see if prior suspense is in invtmp and it includes payments that zero it out
		* If any are found, remove them because we don't want to report on them here.
			  SELECT  *,;
					  .F. AS junk ;
				  FROM invtmp ;
				  WHERE cownerid in (SELECT cid FROM selected) ;
					  AND crectype <> 'P' ;
					  AND NOT EMPTY(cRunYear_In);
					  AND (cRunYear + PADL(TRANSFORM(nrunno), 3, '0') <> cRunYear_In + PADL(TRANSFORM(nrunno_IN), 3, '0')) ;
				  INTO CURSOR tempinvtmp READWRITE
		
			  SELECT  *,;
					  .F. AS junk ;
				  FROM IIF(tnRunNo = 0, 'invtmp', 'disbhist') ;
				  WHERE cownerid in (SELECT cid FROM selected) ;
					  AND cRunYear + PADL(TRANSFORM(nrunno), 3, '0') = tcYear + PADL(TRANSFORM(tnRunNo), 3, '0') ;
					  AND crectype = 'P' ;
				  INTO CURSOR tmptmp
		      SELECT tempinvtmp
		      APPEND FROM DBF('tmptmp')
		      USE IN tmptmp
		
		      SELECT cownerid, SUM(nnetcheck) AS nnetcheck FROM tempinvtmp WHERE nrunno_IN <> 0 INTO CURSOR temp ORDER BY cownerid GROUP BY cownerid
		      SCAN FOR temp.nnetcheck = 0
		* Delete the entries from invtmp if they have been zeroed out by a payment
		         SELECT invtmp
		         DELETE FOR cownerid == temp.cownerid AND nrunno_IN <> 0 AND cRunYear_In + PADL(TRANSFORM(nrunno_IN), 3, '0') < tcYear + PADL(TRANSFORM(tnRunNo), 3, '0')
		      ENDSCAN
		
		*
		* Remove any entries that went into suspense this run unless
		* we're including suspense.
		*
		      IF llNoSuspense
		         SELECT invtmp
		         DELETE FOR nrunno = nrunno_IN AND cRunYear = cRunYear_In
		      ENDIF
		
		*  This is hokey, but it works.  Wellwork comes back with J records, and trying to filter it out in the select
		*  statement doesn't work, since it's part of a union.  We don't want them in wellwork and the easy fix is
		*  to just delete them before it even gets to the select statement.  - BH 06/29/12
		      SELECT wellwork
		      SCAN FOR crectype = 'J'
		         DELETE NEXT 1
		      ENDSCAN
		
		      SET TALK ON
		      IF tlIncDirect
				 SELECT  invtmp.cownerid, ;
						 'A' AS cRptGroup, ;
						 investor.cSortField AS cOwnname, ;
						 invtmp.cwellid, ;
						 SUM(invtmp.nincome) AS nincome, ;
						 SUM(noilrev) AS noilrev, ;
						 SUM(ngasrev) AS ngasrev, ;
						 MAX(invtmp.nrevoil) as nrevoil, ;
						 MAX(invtmp.nrevgas) as nrevgas, ;
						 MAX(invtmp.nrevoth) as nrevoth, ;
						 SUM(invtmp.ntrprev + invtmp.nmiscrev1 + invtmp.nmiscrev2 + invtmp.nothrev) AS nothrev, ;
						 invtmp.ctypeinv, ;
						 invtmp.ctypeint, ;
						 invtmp.cdirect, ;
						 invtmp.cSuspType, ;
						 invtmp.cdeck, ;
		             invtmp.nrunno, ;
		             invtmp.crunyear, ;
						 invtmp.nrunno_in, ;
						 invtmp.crunyear_in, ;
						 000000000.00 AS ntotbbl, ;
		             000000000.00 AS ntotmcf, ;
		             000000000.00 AS ntotprod, ;
						 SUM(invtmp.nexpense + ;
							 invtmp.ntotale1 + ;
							 invtmp.ntotale2 + ;
							 invtmp.ntotale3 + ;
							 invtmp.ntotale4 + ;
							 invtmp.ntotale5 + ;
							 invtmp.ntotaleA + ;
							 invtmp.ntotaleB + ;
							 invtmp.nmktgexp + ;
		                invtmp.nplugexp) AS nexpense,  ;
						 invtmp.nworkint, ;
						 invtmp.nintclass1, ;
						 invtmp.nintclass2, ;
						 invtmp.nintclass3, ;
						 invtmp.nintclass4, ;
						 invtmp.nintclass5, ;
						 invtmp.nbcpint, ;
						 invtmp.nacpint, ;
						 SUM(invtmp.nsevtaxes) AS nsevtaxes, ;
						 SUM(invtmp.ngather) AS ngather, ;
						 SUM(invtmp.ncompress) AS ncompress, ;
						 SUM(invtmp.nnetcheck) AS nnetcheck, ;
						 invtmp.hyear,    ;
						 invtmp.hperiod, ;
						 invtmp.cprogcode, ;
						 SUM(invtmp.nOiltax1) AS nOiltax1, ;
						 SUM(invtmp.nOiltax2) AS nOiltax2, ;
						 SUM(invtmp.nOiltax3) AS nOiltax3, ;
						 SUM(invtmp.nOiltax4) AS nOiltax4, ;
						 SUM(invtmp.nGastax1) AS nGastax1, ;
						 SUM(invtmp.nGastax2) AS nGastax2, ;
						 SUM(invtmp.nGastax3) AS nGastax3, ;
						 SUM(invtmp.nGastax4) AS nGastax4, ;
						 wells.cwellname, ;
						 0.00  AS ncheck_amt ;
					 FROM invtmp ;
					 LEFT JOIN wells ;
						 ON invtmp.cwellid = wells.cwellid ;
					 JOIN investor ;
						 ON invtmp.cownerid = investor.cownerid ;
					 WHERE invtmp.cownerid IN (SELECT  cownerid ;
													 FROM tempchks) ;
						 AND IIF(llNoSuspense, EMPTY(invtmp.cSuspType), .T.) ;
					 INTO CURSOR disbchk ;
					 ORDER BY &lOrderGroup ;
					 GROUP BY &lOrderGroup
		      ELSE
				 SELECT  invtmp.cownerid, ;
						 investor.cSortField AS cOwnname, ;
						 'A' AS cRptGroup, ;
						 invtmp.cwellid, ;
						 SUM(invtmp.nincome) AS nincome, ;
						 IIF(INLIST(invtmp.cdirect, 'O', 'B'), 000000.00, SUM(invtmp.noilrev)) AS noilrev, ;
						 IIF(INLIST(invtmp.cdirect, 'G', 'B'), 000000.00, SUM(invtmp.ngasrev+invtmp.nflatrate)) AS ngasrev, ;
						 SUM(invtmp.ntrprev + invtmp.nmiscrev1 + invtmp.nmiscrev2 + invtmp.nothrev) AS nothrev, ;
						 000000000.00 AS ntotbbl, ;
						 000000000.00 AS ntotmcf, ;
						 000000000.00 AS ntotprod, ;
						 invtmp.ctypeinv, ;
						 invtmp.ctypeint, ;
						 invtmp.cdirect, ;
						 invtmp.cSuspType, ;
						 invtmp.cdeck, ;
		             invtmp.nrunno, ;
		             invtmp.crunyear, ;
						 invtmp.nrunno_in, ;
						 invtmp.crunyear_in, ;
						 MAX(invtmp.nrevoil) as nrevoil, ;
						 MAX(invtmp.nrevgas) as nrevgas, ;
						 MAX(invtmp.nrevoth) as nrevoth, ;
						 SUM(invtmp.nexpense + ;
							 invtmp.ntotale1 + ;
							 invtmp.ntotale2 + ;
							 invtmp.ntotale3 + ;
							 invtmp.ntotale4 + ;
							 invtmp.ntotale5 + ;
							 invtmp.ntotaleA + ;
							 invtmp.ntotaleB + ;
							 invtmp.nmktgexp + ;
		                invtmp.nplugexp) AS nexpense,  ;
						 invtmp.nworkint, ;
						 invtmp.nintclass1, ;
						 invtmp.nintclass2, ;
						 invtmp.nintclass3, ;
						 invtmp.nintclass4, ;
						 invtmp.nintclass5, ;
						 invtmp.nbcpint, ;
						 invtmp.nacpint, ;
						 SUM(invtmp.nOiltax1) AS nOiltax1, ;
						 SUM(invtmp.nOiltax2) AS nOiltax2, ;
						 SUM(invtmp.nOiltax3) AS nOiltax3, ;
						 SUM(invtmp.nOiltax4) AS nOiltax4, ;
						 SUM(invtmp.nGastax1) AS nGastax1, ;
						 SUM(invtmp.nGastax2) AS nGastax2, ;
						 SUM(invtmp.nGastax3) AS nGastax3, ;
						 SUM(invtmp.nGastax4) AS nGastax4, ;
						 SUM(invtmp.nsevtaxes) AS nsevtaxes, ;
						 SUM(invtmp.ngather)   AS ngather, ;
						 SUM(invtmp.ncompress) AS ncompress, ;
						 SUM(invtmp.nnetcheck) AS nnetcheck, ;
						 invtmp.hyear,    ;
						 invtmp.hperiod, ;
						 invtmp.cprogcode, ;
						 wells.cwellname, ;
						 0.00  AS ncheck_amt ;
					 FROM invtmp ;
					 LEFT JOIN wells ;
						 ON invtmp.cwellid = wells.cwellid ;
					 JOIN investor ;
						 ON invtmp.cownerid = investor.cownerid ;
					 WHERE invtmp.cownerid IN (SELECT  cownerid ;
													 FROM tempchks) ;
						 AND IIF(llNoSuspense, EMPTY(invtmp.cSuspType) OR (invtmp.nrunno = invtmp.nrunno_IN AND invtmp.cRunYear = invtmp.cRunYear_In), .T.) ;
					 INTO CURSOR disbchk ;
					 ORDER BY &lOrderGroup ;
					 GROUP BY &lOrderGroup
		      ENDIF
		      SET TALK OFF
		      SELECT disbstmts
		      APPEND FROM DBF('disbchk')
		      
		      IF USED('tempchks')
		         USE IN tempchks
		      ENDIF
		
		      IF llPostingOnly
		         SELECT cownerid FROM investor WHERE lIntegGL INTO CURSOR postingowners READWRITE
		         INDEX ON cownerid TAG cownerid
		      ENDIF
		
		      lnMax   = RECC()
		      lnCount = 1
		      SELECT disbstmts
		      SET ORDER TO 0
		      SCAN
		         SCATTER MEMVAR
		         lnCount = lnCount + 1
		
		         IF tnRunno = 0
		            swselect('wellwork')
		         ELSE
		            swselect('wellhist')
		         ENDIF   
		         IF NOT EMPTY(m.cRunYear_in)
		            m.nRunno = m.nRunNo_in
		            m.cRunYear = m.cRunYear_In
		         ENDIF    
		         LOCATE FOR cwellid = m.cwellid ;
		                AND hyear + hperiod = m.hyear + m.hperiod ;
		                AND cdeck == m.cdeck ;
		                AND nrunno = m.nrunno AND crunyear = m.crunyear
		         IF FOUND()
		            m.ngrossbbl = ntotbbl
		            m.ngrossmcf = ntotmcf
		            m.ntotbbl = (ntotbbl * m.nrevoil/100)
		            m.ntotmcf = (ntotmcf * m.nrevgas/100)
		            m.ntotprod = (ntotprod * m.nrevoth/100)
		            IF ntotbbl <> 0
		               m.npricebbl = ngrossoil / ntotbbl
		            ELSE
		               m.npricebbl = 0
		            ENDIF
		            IF ntotmcf <> 0
		               m.npricemcf = ngrossgas / ntotmcf
		            ELSE
		               m.npricemcf = 0
		            ENDIF
		            SELE disbstmts
		            REPL ngrossbbl WITH m.ngrossbbl, ;
		               ngrossmcf WITH m.ngrossmcf, ;
		               npricebbl WITH m.npricebbl, ;
		               npricemcf WITH m.npricemcf, ;
		               ntotbbl   WITH m.ntotbbl, ;
		               ntotmcf   WITH m.ntotmcf, ;
		               ntotprod  WITH m.ntotprod
		         ENDIF
		         
		         IF m.cwellid = 'ALL'
		            m.cwellname = 'Prior Period Balance'
		         ENDIF
		
		         swselect('programs')
		         SET ORDER TO cprogcode
		         SEEK m.cprogcode
		         IF FOUND()
		            m.cprogname = cprogname
		         ELSE
		            m.cprogcode = 'None'
		            m.cprogname = 'Non Program Wells'
		         ENDIF
		
		         SELECT disbstmts
		         REPL cwellname WITH m.cwellname, ;
		            cprogname WITH m.cprogname
		
		         IF tlIncDirect
		            DO CASE
		               CASE m.cdirect = 'O'
		                  m.nnetcheck = m.nnetcheck + m.noilrev
		               CASE m.cdirect = 'G'
		                  m.nnetcheck = m.nnetcheck + m.ngasrev
		               CASE m.cdirect = 'B'
		                  m.nnetcheck = m.nnetcheck + m.noilrev + m.ngasrev
		            ENDCASE
		            SELECT disbstmts
		            REPL nnetcheck WITH m.nnetcheck
		         ELSE
		            swselect('wells')
		            SET ORDER TO cwellid
		            IF SEEK(m.cwellid)
		               SCATTER FIELDS LIKE lSev* MEMVAR
		            ELSE
		               LOOP
		            ENDIF
		            DO CASE
		               CASE m.cdirect = 'O'
		                  IF m.lSev1O
		                     m.nsevtaxes = m.nsevtaxes - m.nOiltax1
		                  ENDIF
		                  IF m.lSev2O
		                     m.nsevtaxes = m.nsevtaxes - m.nOiltax2
		                  ENDIF
		                  IF m.lSev3O
		                     m.nsevtaxes = m.nsevtaxes - m.nOiltax3
		                  ENDIF
		                  IF m.lSev4O
		                     m.nsevtaxes = m.nsevtaxes - m.nOiltax4
		                  ENDIF
		               CASE m.cdirect = 'G'
		                  IF m.lSev1G
		                     m.nsevtaxes = m.nsevtaxes - m.nGastax1
		                  ENDIF
		                  IF m.lSev2G
		                     m.nsevtaxes = m.nsevtaxes - m.nGastax2
		                  ENDIF
		                  IF m.lSev3G
		                     m.nsevtaxes = m.nsevtaxes - m.nGastax3
		                  ENDIF
		                  IF m.lSev4G
		                     m.nsevtaxes = m.nsevtaxes - m.nGastax4
		                  ENDIF
		               CASE m.cdirect = 'B'
		                  IF m.lSev1O
		                     m.nsevtaxes = m.nsevtaxes - m.nOiltax1
		                  ENDIF
		                  IF m.lSev2O
		                     m.nsevtaxes = m.nsevtaxes - m.nOiltax2
		                  ENDIF
		                  IF m.lSev3O
		                     m.nsevtaxes = m.nsevtaxes - m.nOiltax3
		                  ENDIF
		                  IF m.lSev4O
		                     m.nsevtaxes = m.nsevtaxes - m.nOiltax4
		                  ENDIF
		                  IF m.lSev1G
		                     m.nsevtaxes = m.nsevtaxes - m.nGastax1
		                  ENDIF
		                  IF m.lSev2G
		                     m.nsevtaxes = m.nsevtaxes - m.nGastax2
		                  ENDIF
		                  IF m.lSev3G
		                     m.nsevtaxes = m.nsevtaxes - m.nGastax3
		                  ENDIF
		                  IF m.lSev4G
		                     m.nsevtaxes = m.nsevtaxes - m.nGastax4
		                  ENDIF
		            ENDCASE
		            SELECT disbstmts
		            REPL nsevtaxes WITH m.nsevtaxes
		         ENDIF
		
		         IF INLIST(m.ctypeinv, 'X', 'M')
		            m.cwellname = 'Prior Bal: ' + m.cwellname
		            SELECT disbstmts
		            REPL cwellname WITH m.cwellname, ;
		               ctypeinv  WITH 'Z', ;
		               noilrev   WITH 0, ;
		               ngasrev   WITH 0, ;
		               nothrev   WITH 0, ;
		               nexpense  WITH 0
		         ELSE
		            IF NOT glNetSusp AND m.ctypeinv = 'X'
		               m.cwellname = 'Prior Period Deficit'
		               SELECT disbstmts
		               REPL cwellname WITH m.cwellname, ;
		                  ctypeinv  WITH 'Z', ;
		                  noilrev   WITH 0, ;
		                  ngasrev   WITH 0, ;
		                  nothrev   WITH 0, ;
		                  nexpense  WITH 0
		            ENDIF
		         ENDIF
		
		         IF NOT EMPTY(m.cSuspType)
		            m.lPriorSusp = .T.
		         ELSE
		            m.lPriorSusp = .F.
		         ENDIF
		         SELECT disbstmts
		         REPLACE cprogname WITH m.cprogname, ;
		            cprogcode WITH m.cprogcode, ;
		            lPriorSusp WITH m.lPriorSusp
		
		      ENDSCAN
		      
		      IF NOT llSummarize
		         IF plIncludeDeck
		            lOrderGroup = 'cOwnerID, cwellid, cDeck, ctypeinv, ctypeint, cprogcode'
		         ELSE
		            lOrderGroup = 'cOwnerID, cwellid, ctypeinv, ctypeint, cprogcode'
		         ENDIF     
		      ELSE
		         IF plIncludeDeck
		            lOrderGroup = 'cOwnerID, cwellid, cDeck, ctypeinv, hyear, hperiod, csusptype, cprogcode'
		         ELSE
		            lOrderGroup = 'cOwnerID, cwellid, ctypeinv, hyear, hperiod, csusptype, cprogcode'
		         ENDIF        
		      ENDIF
		
		      SELECT  cownerid, ;
						 'A' AS cRptGroup, ;
						 cOwnname, ;
						 cwellid, ;
						 cdeck, ;
						 SUM(nincome) AS nincome, ;
						 SUM(noilrev) AS noilrev, ;
						 SUM(ngasrev) AS ngasrev, ;
						 SUM(nothrev) AS nothrev, ;
						 SUM(ngrossbbl) as ngrossbbl, ;
						 SUM(ngrossmcf) as ngrossmcf, ;
						 SUM(ntotbbl) AS ntotbbl, ;
		                 SUM(ntotmcf) AS ntotmcf, ;
		                 SUM(ntotprod) AS ntotprod, ;
						 ctypeinv, ;
						 ctypeint, ;
						 cdirect, ;
						 SUM(nexpense) AS nexpense,  ;
						 SUM(nsevtaxes) AS nsevtaxes, ;
						 SUM(ncompress) AS ncompress, ;
						 SUM(ngather) AS ngather, ;
		    			 SUM(nnetcheck) AS nnetcheck, ;
		                 AVG(npricebbl) as npricebbl, ;
		                 AVG(npricemcf) as npricemcf, ;				 				 
						 nworkint, ;
						 nintclass1, ;
						 nintclass2, ;
						 nintclass3, ;
						 nintclass4, ;
						 nintclass5, ;
						 nrevoil, ;
						 nrevgas, ;
						 nbcpint, ;
						 nacpint, ;
						 nrevoth, ;
						 SUM(nOiltax1) AS nOiltax1, ;
						 SUM(nOiltax2) AS nOiltax2, ;
						 SUM(nOiltax3) AS nOiltax3, ;
						 SUM(nOiltax4) AS nOiltax4, ;
						 SUM(nGastax1) AS nGastax1, ;
						 SUM(nGastax2) AS nGastax2, ;
						 SUM(nGastax3) AS nGastax3, ;
						 SUM(nGastax4) AS nGastax4, ;
		                 SUM(nmisc) as nmisc, ;
		                 SUM(noper) as noper, ;
		                 SUM(ntrans) as ntrans, ;
						 hyear,    ;
						 hperiod, ;
						 cprogcode, ;
						 SPACE(30) as cprogname, ;
						 cwellname, ;
						 lpriorsusp, ;                 
						 cSuspType, ;
		                 nrunno, ;
		                 crunyear, ;
						 nrunno_in, ;
						 crunyear_in, ;
						 SUM(ncheck_amt)  AS ncheck_amt ;
					 FROM disbstmts ;
					 INTO CURSOR disbchks readwrite ;
					 ORDER BY &lOrderGroup ;
					 GROUP BY &lOrderGroup
		
		      IF USED('disbchks')
		      SELECT disbchks
		      IF THISFORM.chkPrograms.VALUE = .T.
		         IF plIncludeDeck
		            INDEX ON cownerid + cRptGroup + cprogcode + cwellid + cDeck + hyear+hperiod+cSuspType TAG cownerid
		         ELSE
		            INDEX ON cownerid + cRptGroup + cprogcode + cwellid + hyear+hperiod+cSuspType TAG cownerid
		         ENDIF       
		         SET ORDER TO cownerid
		      ELSE
		         IF plIncludeDeck
		            INDEX ON cownerid + cRptGroup + cwellid + cDeck + ctypeinv + hyear+hperiod+cSuspType TAG ownerkey
		         ELSE
		            INDEX ON cownerid + cRptGroup + cwellid + ctypeinv + hyear+hperiod+cSuspType TAG ownerkey
		         ENDIF       
		         SET ORDER TO ownerkey
		      ENDIF
		
		      SELECT disbchks
		      SCAN
		         IF nincome = 0 AND ;
		               nexpense = 0 AND ;
		               nnetcheck = 0
		            DELETE NEXT 1
		         ENDIF
		      ENDSCAN
		
		
		      WAIT CLEAR
		      
		* Remove any suspense from this run if we're only looking for checks this run
		      IF llChecksOnly
		         SELE disbchks
		         DELETE FOR NOT EMPTY(csusptype) AND nrunno_in = tnRunNo AND crunyear_in = tcYear
		      ENDIF    
		            
		*  If not summarizing by period, blank out year and period
		      IF NOT llSummarize
		         SCAN
		            REPL hyear WITH '', hperiod WITH ''
		         ENDSCAN
		      ENDIF
		      IF RECC() > 0
		         llReturn = .T.
		      ELSE
		         llReturn = .F.
		      ENDIF
		      ELSE
		         llreturn = .f.
		      ENDIF 
		   ELSE
		      llRETURN =.F.
		   ENDIF
		
		CATCH TO loError
		   llReturn = .F.
		   DO errorlog WITH 'BuildData', loError.LINENO, 'Owner Disb Summary', loError.ERRORNO, loError.MESSAGE
		   MESSAGEBOX('Unable to process the report at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		        'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		RETURN llReturn
	ENDPROC

	PROCEDURE Init
		
		DODEFAULT()
		 
		swselect('investor')
		SET ORDER TO cownerid
		GO TOP
		
		THISFORM.swrptlook1.txtBegName.VALUE = cSortField
		THISFORM.swrptlook1.txtBegID.VALUE = cownerid
		GO BOTTOM
		
		THISFORM.swrptlook1.txtEndName.VALUE = cSortField
		THISFORM.swrptlook1.txtEndID.VALUE = cownerid
		
		THISFORM.chkPrograms.VALUE = .F.
		THISFORM.chkOwnPage.VALUE  = .F.
		THISFORM.chkIncDirect.VALUE  = .F.
		
		*  Don't show for DM-only
		thisform.chkPostingOnly.visible = (m.goapp.lamversion OR m.goapp.lqbversion)
		
	ENDPROC

	PROCEDURE report
		LPARA cButton
		PRIVATE plIncludeDeck
		
		plIncludeDeck = thisform.chkdoiDecks.Value
		
		DODEFAULT(cbutton)
	ENDPROC

	PROCEDURE chkChecksOnly.Click
		IF this.Value 
		   thisform.chkselected.value = .f.
		   thisform.lblselected.visible = .f.
		   thisform.lblBegID.Visible = .t.
		   thisform.lblEndID.Visible = .t.
		   thisform.swrptlook1.Visible = .t.
		ENDIF 
	ENDPROC

	PROCEDURE chkDOIDecks.Click
		IF this.Value 
		   thisform.chkselected.value = .f.
		   thisform.lblselected.visible = .f.
		   thisform.lblBegID.Visible = .t.
		   thisform.lblEndID.Visible = .t.
		   thisform.swrptlook1.Visible = .t.
		ENDIF 
	ENDPROC

	PROCEDURE chkPostingOnly.Click
		IF this.Value 
		   thisform.chkselected.value = .f.
		   thisform.lblselected.visible = .f.
		   thisform.lblBegID.Visible = .t.
		   thisform.lblEndID.Visible = .t.
		   thisform.swrptlook1.Visible = .t.
		ENDIF 
	ENDPROC

	PROCEDURE chkSelected.Click
		IF this.Value
		   DO FORM commonsource\selected-ids WITH 'OWNER' LINKED 
		   lnCount = RECCOUNT('selected')
		   thisform.lblselected.Caption = TRANSFORM(lnCount) + ' Owners Selected'
		   thisform.lblselected.Visible = .T.
		   thisform.lblbegID.Visible = .F.
		   thisform.lblendID.Visible = .F.
		   thisform.swrptlook1.Visible = .F.
		ELSE
		   thisform.lblselected.Visible = .F.
		   thisform.lblbegID.Visible = .T.
		   thisform.lblendID.Visible = .T.
		   thisform.swrptlook1.Visible = .T.
		ENDIF 
	ENDPROC

	PROCEDURE Runcombo1.Init
		IF DODEFAULT()
		   this.listitemid = 1
		ENDIF   
	ENDPROC

	PROCEDURE Runcombo1.Valid
		IF 'New' $ this.value
		   thisform.chkChecksOnly.value = .F.
		   thisform.chkChecksOnly.enabled = .f.
		   thisform.lblgroup.visible = .t.
		   thisform.swgroup1.visible = .t.
		   thisform.lblacctdate.visible = .t.
		   thisform.txtacctdate.visible = .t.
		ELSE   
		   thisform.chkChecksOnly.enabled = .t.
		   thisform.lblgroup.visible = .f.
		   thisform.swgroup1.visible = .f.
		   thisform.lblacctdate.visible = .f.
		   thisform.txtacctdate.visible = .f.
		ENDIF
		DODEFAULT()
		      
	ENDPROC

	PROCEDURE Swrptlook1.Swlookupbutton1.Click
		LOCAL lcList
		PRIV llOK
		
		llOK = .F.
		lcList = 'cownerid,csortfield'
		
		DO FORM ..\custom\picklist WITH 'Investor', lcList, thisform.swrptlook1.txtbegid.value, 2
		
		IF llOK
		   thisform.swrptlook1.txtBegId.value = cOwnerID
		   thisform.swrptlook1.txtBegName.value = cSortField
		   thisform.swrptlook1.txtBegId.refresh()
		   thisform.swrptlook1.txtBegName.refresh()
		ENDIF   
		
		thisform.setnextcontrol(thisform.swrptlook1.txtBegId)
		
	ENDPROC

	PROCEDURE Swrptlook1.Swlookupbutton1.When
		RETURN MDOWN()
	ENDPROC

	PROCEDURE Swrptlook1.Swlookupbutton2.Click
		LOCAL lcList
		PRIV llOK
		
		llOK = .F.
		lcList = 'cownerid,csortfield'
		
		DO FORM ..\custom\picklist WITH 'Investor', lcList, thisform.swrptlook1.txtendid.value, 2
		
		IF llOK
		   thisform.swrptlook1.txtEndId.value = cOwnerId
		   thisform.swrptlook1.txtEndName.value = cSortField
		   thisform.swrptlook1.txtEndId.refresh()
		   thisform.swrptlook1.txtEndName.refresh()
		ENDIF   
		
		thisform.setnextcontrol(thisform.swrptlook1.txtEndId)
		
	ENDPROC

	PROCEDURE Swrptlook1.Swlookupbutton2.When
		RETURN MDOWN()
	ENDPROC

ENDDEFINE
