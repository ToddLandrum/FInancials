*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="dmmeterall.scx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="2" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Cursor1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor6" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor7" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor8" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor9" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor10" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor11" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor12" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor13" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor15" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor16" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Relation1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor17" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor18" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor19" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor22" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor14" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor20" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor21" UniqueID="" Timestamp="" />

	AutoOpenTables = .F.
	DataSource = .NULL.
	Height = 756
	Left = 9
	Name = "Dataenvironment"
	Top = 44
	Width = 981

	ADD OBJECT 'Cursor1' AS cursor WITH ;
		Alias = "meterall", ;
		BufferModeOverride = 3, ;
		CursorSource = "meterall", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 16, ;
		Name = "Cursor1", ;
		Order = "meterkey", ;
		Top = 14, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor10' AS cursor WITH ;
		Alias = "investor", ;
		CursorSource = "investor", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor10", ;
		Order = "cownerid", ;
		Top = 380, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor11' AS cursor WITH ;
		Alias = "meters", ;
		CursorSource = "meters", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 141, ;
		Name = "Cursor11", ;
		Order = "meterid", ;
		Top = 384, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor12' AS cursor WITH ;
		Alias = "options", ;
		CursorSource = "options", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 468, ;
		Left = 816, ;
		Name = "Cursor12", ;
		Top = 93, ;
		Width = 116
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor13' AS cursor WITH ;
		Alias = "welldays", ;
		CursorSource = "welldays", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor13", ;
		Top = 500, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor14' AS cursor WITH ;
		Alias = "meterall1", ;
		CursorSource = "meterall", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 710, ;
		Name = "Cursor14", ;
		Top = 260, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor15' AS cursor WITH ;
		Alias = "wells", ;
		CursorSource = "wells", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 290, ;
		Name = "Cursor15", ;
		Order = "cwellid", ;
		Top = 500, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor16' AS cursor WITH ;
		Alias = "revsrc", ;
		CursorSource = "revsrc", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 91, ;
		Left = 447, ;
		Name = "Cursor16", ;
		Order = "crevkey", ;
		Top = 27, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor17' AS cursor WITH ;
		Alias = "sysctl", ;
		CursorSource = "sysctl", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 435, ;
		Name = "Cursor17", ;
		Top = 193, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor18' AS cursor WITH ;
		Alias = "metersub1", ;
		CursorSource = "metersub", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 448, ;
		Name = "Cursor18", ;
		Top = 380, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor19' AS cursor WITH ;
		Alias = "incsusp1", ;
		CursorSource = "incsusp", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 570, ;
		Name = "Cursor19", ;
		Top = 260, ;
		Width = 97
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor2' AS cursor WITH ;
		Alias = "metersub", ;
		BufferModeOverride = 5, ;
		CursorSource = "metersub", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 150, ;
		Name = "Cursor2", ;
		Top = 20, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor20' AS cursor WITH ;
		Alias = "depositd", ;
		BufferModeOverride = 5, ;
		CursorSource = "depositd", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 437, ;
		Name = "Cursor20", ;
		Top = 524, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor21' AS cursor WITH ;
		Alias = "deposits", ;
		BufferModeOverride = 5, ;
		CursorSource = "deposits", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 567, ;
		Name = "Cursor21", ;
		Top = 509, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor22' AS cursor WITH ;
		Alias = "income1", ;
		CursorSource = "income", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 661, ;
		Name = "Cursor22", ;
		Top = 30, ;
		Width = 97
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor3' AS cursor WITH ;
		Alias = "checks", ;
		BufferModeOverride = 5, ;
		CursorSource = "checks", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 307, ;
		Name = "Cursor3", ;
		Top = 17, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor4' AS cursor WITH ;
		Alias = "coa", ;
		CursorSource = "coa", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 124, ;
		Name = "Cursor4", ;
		Top = 135, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor5' AS cursor WITH ;
		Alias = "coabal", ;
		BufferModeOverride = 5, ;
		CursorSource = "coabal", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 235, ;
		Name = "Cursor5", ;
		Top = 47, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor6' AS cursor WITH ;
		Alias = "glmaster", ;
		BufferModeOverride = 5, ;
		CursorSource = "glmaster", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 287, ;
		Name = "Cursor6", ;
		Order = "glbatch", ;
		Top = 142, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor7' AS cursor WITH ;
		Alias = "glopt", ;
		CursorSource = "glopt", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor7", ;
		Top = 260, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor8' AS cursor WITH ;
		Alias = "income", ;
		BufferModeOverride = 5, ;
		CursorSource = "income", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 138, ;
		Name = "Cursor8", ;
		Top = 264, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor9' AS cursor WITH ;
		Alias = "incsusp", ;
		BufferModeOverride = 5, ;
		CursorSource = "incsusp", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 290, ;
		Name = "Cursor9", ;
		Top = 260, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Relation1' AS relation WITH ;
		ChildAlias = "metersub", ;
		ChildOrder = "cbatch", ;
		Name = "Relation1", ;
		ParentAlias = "meterall", ;
		RelationalExpr = "cbatch"
		*< END OBJECT: BaseClass="relation" />

ENDDEFINE

DEFINE CLASS formdmmetall AS frmdatamanagerformcustom OF "..\custom\cforms.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="cmdLookMeter" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcMeterID" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Swperiod" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Swyear" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcMeterName" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdLookPurch" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcRevname" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtnPrice" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboAcct" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtnMaster" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtnVariance" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtnSubs" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom6" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column1.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column1.txtcWellID" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column2.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column2.txtcWellName" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column3.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column3.txtnSubMeter" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column4.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column4.txtnAllocated" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column5.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column5.txtnTotalInc" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column6.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column6.Txttextboxcustom1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom7" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtTaxAmount" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtnTotal" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblCashAcct" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcBegRange" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcEndRange" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom8" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtnDaysOn" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom9" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom10" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtnNetAmount" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcRevKey" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdEven" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbltextcustom1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcRefID" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbltextcustom2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdDocument" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cmdcommandbuttoncustom1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkRoundMCF" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboSource" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtdIncDate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom11" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom12" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom13" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblCleared" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: allocate		&& Allocates the income to the wells
		*m: buildmeter		&& Builds the metersub table for the master meter chosen.
		*m: calcalloc		&& Calculates the allocation.
		*m: calcdayson		&& Calculates dayson from the beginning and ending period ranges.
		*m: calctotal		&& Calculates the total income.
		*m: calcvariance
		*m: oglmaint_access
		*m: report
		*m: viewdocument
		*p: cbatch
		*p: cidmets
		*p: lcalcprice
		*p: lsendtoallocate
		*p: ndecimals
		*p: oglmaint
		*p: oldmeterid
	*</DefinedPropArrayMethod>

	BufferMode = 2
	Caption = "Gas Meter Reconciliation"
	clistexpression = meterall.cbatch
	cnavworkarea = meterall
	cworkarea = meterall
	DoCreate = .T.
	Height = 510
	HelpContextID = 97
	lnonewask = .F.
	lsendtoallocate = .F.
	Name = "FormDmmetall"
	ndecimals = 2
	oglmaint = .NULL.
	oldmeterid = ""
	Visible = .T.
	Width = 699
	_memberdata = <VFPData>
		<memberdata name="lnodataentry" type="property" display="lNoDataEntry"/>
		<memberdata name="lsendtoallocate" type="property" display="lSendToAllocate"/>
		<memberdata name="calcvariance" type="method" display="CalcVariance"/>
		<memberdata name="viewdocument" display="ViewDocument"/>
		<memberdata name="oglmaint" display="oGLMaint"/>
		<memberdata name="oglmaint_access" display="oGLMaint_Access"/>
		</VFPData>
	CMDATAMANAGER.Name = "CMDATAMANAGER"
	CMDATAMANAGER.TabIndex = 1
	CMDATAMANAGER.ZOrderSet = 0
	cmlookupmanager.Name = "cmlookupmanager"
	Mwresize1.lblHighLight.Name = "lblHighLight"
	Mwresize1.lblShading.Name = "lblShading"
	Mwresize1.Name = "Mwresize1"

	ADD OBJECT 'cboAcct' AS cbocomboboxcustom WITH ;
		BoundColumn = 2, ;
		ColumnCount = 1, ;
		ControlSource = "meterall.cacctno", ;
		FontName = "Courier New", ;
		Height = 20, ;
		Left = 69, ;
		lrequired = .T., ;
		Name = "cboAcct", ;
		TabIndex = 2, ;
		Top = 13, ;
		Visible = .F., ;
		Width = 348, ;
		ZOrderSet = 12
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="combobox" />

	ADD OBJECT 'cboSource' AS cbocomboboxcustom WITH ;
		ControlSource = "meterall.ctax", ;
		Height = 20, ;
		Left = 258, ;
		Name = "cboSource", ;
		SelectOnEntry = .T., ;
		TabIndex = 28, ;
		Top = 150, ;
		Width = 76, ;
		ZOrderSet = 41
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="combobox" />

	ADD OBJECT 'chkRoundMCF' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Round MCF to nearest whole number", ;
		Left = 12, ;
		Name = "chkRoundMCF", ;
		TabIndex = 27, ;
		TabStop = .F., ;
		Top = 152, ;
		Value = .F., ;
		ZOrderSet = 39
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'Cmdcommandbuttoncustom1' AS cmdcommandbuttoncustom WITH ;
		Caption = "Print Reconciliation", ;
		Height = 30, ;
		Left = 552, ;
		Name = "Cmdcommandbuttoncustom1", ;
		TabIndex = 39, ;
		Top = 468, ;
		Width = 107, ;
		ZOrderSet = 38
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdDocument' AS cmdcommandbuttoncustom WITH ;
		Caption = "Add \<Document", ;
		Height = 30, ;
		Left = 433, ;
		Name = "cmdDocument", ;
		TabIndex = 17, ;
		TabStop = .F., ;
		Top = 468, ;
		Width = 107, ;
		ZOrderSet = 27
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdEven' AS cmdcommandbuttoncustom WITH ;
		Caption = "Allocate \<Evenly", ;
		Height = 24, ;
		Left = 582, ;
		Name = "cmdEven", ;
		TabIndex = 23, ;
		TabStop = .F., ;
		Top = 11, ;
		Width = 108, ;
		WordWrap = .T., ;
		ZOrderSet = 33
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdLookMeter' AS cmdcommandbuttoncustom WITH ;
		Caption = "Meter ID", ;
		FontSize = 8, ;
		Height = 20, ;
		Left = 12, ;
		Name = "cmdLookMeter", ;
		TabIndex = 5, ;
		TabStop = .F., ;
		Top = 48, ;
		Width = 63, ;
		ZOrderSet = 2
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdLookPurch' AS cmdcommandbuttoncustom WITH ;
		Caption = "Purchaser", ;
		FontSize = 8, ;
		Height = 20, ;
		Left = 176, ;
		Name = "cmdLookPurch", ;
		TabIndex = 16, ;
		TabStop = .F., ;
		Top = 84, ;
		Width = 62, ;
		ZOrderSet = 8
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'Grdgridcustom1' AS grdgridcustom WITH ;
		ColumnCount = 6, ;
		cworkarea = metersub, ;
		Height = 272, ;
		lcolumnmemory = .F., ;
		Left = 11, ;
		LinkMaster = "", ;
		Name = "Grdgridcustom1", ;
		Panel = 1, ;
		RecordSource = "metersub", ;
		RelationalExpr = "", ;
		TabIndex = 34, ;
		Top = 184, ;
		Width = 673, ;
		ZOrderSet = 17, ;
		Column1.ControlSource = "metersub.cwellid", ;
		Column1.FontSize = 8, ;
		Column1.Name = "Column1", ;
		Column1.Width = 78, ;
		Column2.ControlSource = "metersub.cwellname", ;
		Column2.FontSize = 8, ;
		Column2.Name = "Column2", ;
		Column2.ReadOnly = .T., ;
		Column2.Width = 202, ;
		Column3.BackColor = 255,255,128, ;
		Column3.ControlSource = "metersub.nsubmeter", ;
		Column3.FontSize = 8, ;
		Column3.Name = "Column3", ;
		Column3.Width = 100, ;
		Column4.ControlSource = "metersub.nallocation", ;
		Column4.FontSize = 8, ;
		Column4.Name = "Column4", ;
		Column4.Width = 83, ;
		Column5.ColumnOrder = 5, ;
		Column5.ControlSource = "metersub.ntotalsub", ;
		Column5.FontSize = 8, ;
		Column5.Name = "Column5", ;
		Column5.Width = 98, ;
		Column6.ColumnOrder = 6, ;
		Column6.ControlSource = "metersub.ntaxamt", ;
		Column6.FontSize = 8, ;
		Column6.Name = "Column6"
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="grid" />

	ADD OBJECT 'Grdgridcustom1.Column1.Header1' AS header WITH ;
		Caption = " Well ID", ;
		FontSize = 8, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'Grdgridcustom1.Column1.txtcWellID' AS txttextboxcustom WITH ;
		ControlSource = "metersub.cwellid", ;
		FontName = "Arial", ;
		FontSize = 8, ;
		Left = 37, ;
		Name = "txtcWellID", ;
		Top = 23
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'Grdgridcustom1.Column2.Header1' AS header WITH ;
		Caption = " Well Name", ;
		FontSize = 8, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'Grdgridcustom1.Column2.txtcWellName' AS txttextboxcustom WITH ;
		ControlSource = "metersub.cwellname", ;
		FontName = "Arial", ;
		Left = 33, ;
		Name = "txtcWellName", ;
		ReadOnly = .T., ;
		Top = 23
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'Grdgridcustom1.Column3.Header1' AS header WITH ;
		Alignment = 2, ;
		BackColor = 255,255,128, ;
		Caption = "Meter MCF", ;
		FontSize = 8, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'Grdgridcustom1.Column3.txtnSubMeter' AS txttextboxcustom WITH ;
		BackColor = 255,255,128, ;
		ControlSource = "metersub.nsubmeter", ;
		FontName = "Arial", ;
		Format = "999999.99", ;
		InputMask = "999999.99", ;
		Left = 53, ;
		Name = "txtnSubMeter", ;
		Top = 23
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'Grdgridcustom1.Column4.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "Allocated MCF", ;
		FontSize = 8, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'Grdgridcustom1.Column4.txtnAllocated' AS txttextboxcustom WITH ;
		ControlSource = "metersub.nallocation", ;
		FontName = "Arial", ;
		Left = 37, ;
		Name = "txtnAllocated", ;
		Top = 35
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'Grdgridcustom1.Column5.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "Allocated $", ;
		FontSize = 8, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'Grdgridcustom1.Column5.txtnTotalInc' AS txttextboxcustom WITH ;
		FontName = "Arial", ;
		FontSize = 8, ;
		Left = 49, ;
		Name = "txtnTotalInc", ;
		Top = 23
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'Grdgridcustom1.Column6.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "Taxes", ;
		FontSize = 8, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'Grdgridcustom1.Column6.Txttextboxcustom1' AS txttextboxcustom WITH ;
		FontSize = 8, ;
		Height = 12, ;
		Left = 34, ;
		Name = "Txttextboxcustom1", ;
		Top = 23
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'lblCashAcct' AS lblfieldlabelcustom WITH ;
		AutoSize = .T., ;
		Caption = "Cash Acct:", ;
		Height = 16, ;
		Left = 12, ;
		Name = "lblCashAcct", ;
		TabIndex = 4, ;
		Top = 15, ;
		Visible = .F., ;
		Width = 56, ;
		ZOrderSet = 21
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblCleared' AS lbllabelcustom WITH ;
		AutoSize = .T., ;
		Caption = " ", ;
		FontBold = .T., ;
		FontSize = 24, ;
		ForeColor = 255,0,0, ;
		Height = 40, ;
		Left = 274, ;
		Name = "lblCleared", ;
		Top = 312, ;
		Width = 11
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom1' AS lbllabelcustom WITH ;
		Caption = "Total", ;
		Left = 516, ;
		Name = "Lbllabelcustom1", ;
		TabIndex = 31, ;
		Top = 118, ;
		ZOrderSet = 19
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom10' AS lbllabelcustom WITH ;
		Caption = "Acct Date", ;
		Left = 424, ;
		Name = "Lbllabelcustom10", ;
		TabIndex = 33, ;
		Top = 15, ;
		ZOrderSet = 30
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom11' AS lbllabelcustom WITH ;
		Caption = "Gas Tax", ;
		Left = 215, ;
		Name = "Lbllabelcustom11", ;
		TabIndex = 40, ;
		Top = 152
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom12' AS lbllabelcustom WITH ;
		Caption = "Total Tax", ;
		Left = 343, ;
		Name = "Lbllabelcustom12", ;
		TabIndex = 41, ;
		Top = 152
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom13' AS lbllabelcustom WITH ;
		Caption = "Net", ;
		Left = 530, ;
		Name = "Lbllabelcustom13", ;
		Top = 153
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom2' AS lbllabelcustom WITH ;
		Caption = "Prod Period/Year:", ;
		Height = 16, ;
		Left = 14, ;
		Name = "Lbllabelcustom2", ;
		TabIndex = 21, ;
		Top = 86, ;
		Width = 87, ;
		ZOrderSet = 5
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom3' AS lbllabelcustom WITH ;
		Caption = "Price per MCF", ;
		Height = 16, ;
		Left = 254, ;
		Name = "Lbllabelcustom3", ;
		TabIndex = 32, ;
		Top = 118, ;
		Width = 69, ;
		ZOrderSet = 10
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom4' AS lbllabelcustom WITH ;
		Caption = "Range", ;
		Left = 414, ;
		Name = "Lbllabelcustom4", ;
		TabIndex = 11, ;
		Top = 50, ;
		ZOrderSet = 26
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom5' AS lbllabelcustom WITH ;
		Caption = "Master MCF", ;
		Height = 16, ;
		Left = 26, ;
		Name = "Lbllabelcustom5", ;
		TabIndex = 30, ;
		Top = 118, ;
		Width = 59, ;
		ZOrderSet = 12
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom6' AS lbllabelcustom WITH ;
		Caption = "Subs Total:", ;
		Height = 16, ;
		Left = 250, ;
		Name = "Lbllabelcustom6", ;
		TabIndex = 38, ;
		Top = 479, ;
		Width = 56, ;
		ZOrderSet = 16
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom7' AS lbllabelcustom WITH ;
		Caption = "Variance:", ;
		Height = 16, ;
		Left = 94, ;
		Name = "Lbllabelcustom7", ;
		TabIndex = 37, ;
		Top = 478, ;
		Width = 49, ;
		ZOrderSet = 18
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom8' AS lbllabelcustom WITH ;
		Caption = "-", ;
		Left = 506, ;
		Name = "Lbllabelcustom8", ;
		TabIndex = 13, ;
		Top = 50, ;
		ZOrderSet = 27
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom9' AS lbllabelcustom WITH ;
		Caption = "Days On", ;
		Left = 573, ;
		Name = "Lbllabelcustom9", ;
		TabIndex = 12, ;
		Top = 50, ;
		ZOrderSet = 29
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbltextcustom1' AS lbltextcustom WITH ;
		Caption = "/", ;
		FontSize = 10, ;
		Left = 124, ;
		Name = "Lbltextcustom1", ;
		TabIndex = 20, ;
		Top = 85, ;
		ZOrderSet = 34
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbltextcustom2' AS lbltextcustom WITH ;
		Caption = "Ref ID", ;
		Left = 527, ;
		Name = "Lbltextcustom2", ;
		TabIndex = 22, ;
		Top = 86, ;
		ZOrderSet = 36
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Swperiod' AS swperiod WITH ;
		ControlSource = "meterall.cperiod", ;
		ldefvalue = .T., ;
		Left = 99, ;
		lnoinit = .T., ;
		lrequired = .F., ;
		MaxLength = 2, ;
		Name = "Swperiod", ;
		TabIndex = 14, ;
		Top = 84, ;
		ZOrderSet = 4
		*< END OBJECT: ClassLib="..\custom\swcontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'Swyear' AS swyear WITH ;
		ControlSource = "meterall.cyear", ;
		ldefvalue = .T., ;
		Left = 130, ;
		lnoinit = .T., ;
		lrequired = .F., ;
		MaxLength = 4, ;
		Name = "Swyear", ;
		TabIndex = 15, ;
		Top = 84, ;
		ZOrderSet = 6
		*< END OBJECT: ClassLib="..\custom\swcontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcBegRange' AS txttextboxcustom WITH ;
		ControlSource = "meterall.cbegrange", ;
		Height = 20, ;
		InputMask = "99/99", ;
		Left = 456, ;
		Name = "txtcBegRange", ;
		TabIndex = 8, ;
		Top = 48, ;
		Width = 48, ;
		ZOrderSet = 24
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcEndRange' AS txttextboxcustom WITH ;
		ControlSource = "meterall.cendrange", ;
		Height = 20, ;
		InputMask = "99/99", ;
		Left = 512, ;
		Name = "txtcEndRange", ;
		TabIndex = 9, ;
		Top = 48, ;
		Width = 48, ;
		ZOrderSet = 25
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcMeterID' AS txtquickfill WITH ;
		clistexpression = meters.cmeterid, ;
		clistworkarea = meters, ;
		ControlSource = "meterall.cmeterid", ;
		Format = "!", ;
		Height = 20, ;
		Left = 84, ;
		lrequired = .T., ;
		MaxLength = 10, ;
		Name = "txtcMeterID", ;
		TabIndex = 6, ;
		Top = 48, ;
		Width = 88, ;
		ZOrderSet = 3
		*< END OBJECT: ClassLib="..\custom\cgadget.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcMeterName' AS txttextboxcustom WITH ;
		BackColor = 212,208,200, ;
		Height = 20, ;
		Left = 176, ;
		Name = "txtcMeterName", ;
		TabIndex = 7, ;
		Top = 48, ;
		Width = 220, ;
		ZOrderSet = 7
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcRefID' AS txttextboxcustom WITH ;
		ControlSource = "meterall.crefid", ;
		Height = 20, ;
		Left = 560, ;
		MaxLength = 15, ;
		Name = "txtcRefID", ;
		TabIndex = 19, ;
		Top = 84, ;
		Width = 101, ;
		ZOrderSet = 35
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcRevKey' AS txtquickfill WITH ;
		clistexpression = crevkey, ;
		clistworkarea = revsrc, ;
		ControlSource = "meterall.crevkey", ;
		Format = "!", ;
		Height = 20, ;
		Left = 239, ;
		lrequired = .T., ;
		MaxLength = 10, ;
		Name = "txtcRevKey", ;
		TabIndex = 17, ;
		Top = 84, ;
		Width = 95, ;
		ZOrderSet = 32
		*< END OBJECT: ClassLib="..\custom\cgadget.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcRevname' AS txttextboxcustom WITH ;
		BackColor = 212,208,200, ;
		Height = 20, ;
		Left = 335, ;
		Name = "txtcRevname", ;
		TabIndex = 18, ;
		Top = 84, ;
		Width = 157, ;
		ZOrderSet = 9
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtdIncDate' AS dpk WITH ;
		ControlSource = "meterall.dincdate", ;
		Height = 20, ;
		lcheckdate = .T., ;
		Left = 475, ;
		lmorethan90 = .T., ;
		Name = "txtdIncDate", ;
		TabIndex = 3, ;
		Top = 13, ;
		Visible = .T., ;
		Width = 75
		*< END OBJECT: ClassLib="..\custom\swdate.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtnDaysOn' AS txttextboxcustom WITH ;
		ControlSource = "meterall.ndayson", ;
		Height = 20, ;
		InputMask = "999", ;
		Left = 624, ;
		MaxLength = 3, ;
		Name = "txtnDaysOn", ;
		TabIndex = 10, ;
		Top = 48, ;
		Width = 37, ;
		ZOrderSet = 28
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtnMaster' AS txttextboxcustom WITH ;
		ControlSource = "meterall.nmaster", ;
		Height = 20, ;
		InputMask = "999999999999.99", ;
		Left = 86, ;
		lrequired = .T., ;
		Name = "txtnMaster", ;
		TabIndex = 24, ;
		Top = 116, ;
		Width = 130, ;
		ZOrderSet = 13
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtnNetAmount' AS txttextboxcustom WITH ;
		ControlSource = "", ;
		Height = 20, ;
		InputMask = "999,999,999.99", ;
		Left = 555, ;
		Name = "txtnNetAmount", ;
		TabIndex = 26, ;
		Top = 150, ;
		Width = 106, ;
		ZOrderSet = 20
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtnPrice' AS txttextboxcustom WITH ;
		Comment = "", ;
		ControlSource = "meterall.ngasprice", ;
		Height = 20, ;
		InputMask = "9999.999999", ;
		Left = 324, ;
		lrequired = .T., ;
		Name = "txtnPrice", ;
		TabIndex = 25, ;
		Top = 116, ;
		Width = 120, ;
		ZOrderSet = 11
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtnSubs' AS txttextboxcustom WITH ;
		ControlSource = "meterall.nsubstotal", ;
		Height = 20, ;
		Left = 307, ;
		Name = "txtnSubs", ;
		TabIndex = 36, ;
		Top = 477, ;
		Width = 96, ;
		ZOrderSet = 15
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtnTotal' AS txttextboxcustom WITH ;
		ControlSource = "meterall.ntotalinc", ;
		Height = 20, ;
		InputMask = "999,999,999.99", ;
		Left = 547, ;
		Name = "txtnTotal", ;
		TabIndex = 26, ;
		Top = 116, ;
		Width = 114, ;
		ZOrderSet = 20
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtnVariance' AS txttextboxcustom WITH ;
		ControlSource = "meterall.nvariance", ;
		Height = 20, ;
		Left = 146, ;
		Name = "txtnVariance", ;
		TabIndex = 35, ;
		Top = 476, ;
		Width = 96, ;
		ZOrderSet = 14
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtTaxAmount' AS txttextboxcustom WITH ;
		ControlSource = "meterall.ntotaltax", ;
		Height = 20, ;
		InputMask = "999,999,999.99", ;
		Left = 388, ;
		Name = "txtTaxAmount", ;
		TabIndex = 29, ;
		Top = 150, ;
		Width = 114, ;
		ZOrderSet = 20
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />
	
	PROCEDURE Activate
		IF DODEFAULT()
		   thisform.cbatch = meterall.cbatch
		ENDIF   
	ENDPROC

	PROCEDURE allocate		&& Allocates the income to the wells
		LOCAL llUnalloc, lcBatch, ldIncDate, lcRevKey, lnDaysOn, lcBegRange, lcEndRange, lnPrice, llSendToAllocate, lcWellStat
		LOCAL lcYear, lcPeriod, lcGroup, lcRefid
		
		
		lcWellStat = 'A'
		
		*
		*  Allocates the calculated MCF and $ to the income or incsusp table
		*
		lcBatch    = meterall.cBatch
		lcRevKey   = meterall.cRevKey
		ldIncDate  = meterall.dIncDate
		lcBegRange = meterall.cBegRange
		lcEndRange = meterall.cEndRange
		lnDaysOn   = meterall.nDaysOn
		lnPrice    = meterall.nGasPrice
		lcYear     = meterall.cYear
		lcPeriod   = meterall.cPeriod
		lcRefid    = meterall.cRefID
		
		IF (NOT EMPTY(THIS.swperiod.VALUE) AND EMPTY(THIS.swyear.VALUE)) OR (EMPTY(THIS.swperiod.VALUE) AND NOT EMPTY(THIS.swyear.VALUE))
		   THISFORM.oMessage.warning('Either the year and period must be both empty, or they must be both filled in.')
		   RETURN .F.
		ENDIF
		
		*
		*  Check to see if this revenue has already been closed
		*
		SELE income
		LOCATE FOR cBatch = lcBatch AND nRunNo <> 0
		IF FOUND()
		   THISFORM.oMessage.warning('These revenue entries have been allocated and closed. ' + ;
		      'No changes are possible.')
		   RETURN .F.
		ENDIF
		
		*
		*  Remove the entries from previous allocations
		*
		SELECT incsusp
		SCAN FOR cBatch == lcBatch
		   DELETE NEXT 1
		ENDSCAN
		
		SELECT income
		SCAN FOR cBatch == lcBatch
		   DELETE NEXT 1
		ENDSCAN
		
		*
		*  Scan through the sub-meters and allocate the mcf and revenue
		*
		SELECT metersub
		SCAN FOR cBatch == lcBatch
		   SCATTER MEMVAR
		   m.lAllocated = .F.
		   m.dRevDate   = ldIncDate
		   m.dPostDate  = ldIncDate
		   m.cRevKey    = lcRevKey
		   m.nUnits     = m.nAllocation
		   m.nPrice     = lnPrice
		   m.nTotalInc  = m.nTotalSub
		   m.cSource    = 'MCF'
		   m.nDaysOn    = lnDaysOn
		   m.cBegRange  = lcBegRange
		   m.cEndRange  = lcEndRange
		   m.cYear      = lcYear
		   m.cPeriod    = lcPeriod
		   m.cBatch     = lcBatch
		   m.cRefID     = lcRefid
		   m.lCSTran    = .T.
		   m.cOwnerID   = ''
		   m.lClosed    = .F.
		   
		   *  Don't add zero amount lines.  Well Rev by Well doesn't allow it, so we don't allow it here, either.
		   IF m.nTotalInc = 0
		      LOOP
		   ENDIF 
		
		   SWSELECT('wells')
		   LOCATE FOR cWellID = m.cWellID
		   IF FOUND()
		      lcWellStat = wells.cWellStat
		   ELSE  &&  Should never get here, but we'll set it to .f. just for kicks.  Harmless good times, like farting in an elevator as you leave....
		      lcWellStat = .F.
		   ENDIF
		
		   * Set the default for the lSendToAllocate property
		   THISFORM.lSendToAllocate = m.goApp.lSendToAllocate
		
		   IF NOT THISFORM.lSendToAllocate
		      * Check to see if the well has any owners. If not, send to allocation file
		      SWSELECT('wellinv')
		      SELECT * FROM wellinv WHERE cWellID == m.cWellID INTO CURSOR tempdoi
		      IF _TALLY = 0
		         THISFORM.lSendToAllocate = .T.
		      ENDIF
		   ENDIF
		
		   IF EMPTY(m.cYear) OR EMPTY(m.cPeriod) OR INLIST(lcWellStat,'I','S','P')
		      THISFORM.lSendToAllocate = .T.
		   ENDIF
		
		   IF NOT THISFORM.lSendToAllocate
		      * Insert into the income table
		      m.cidinco = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Income')
		      SET DELETED OFF
		      SELECT income1
		      SET ORDER TO cidinco
		      DO WHILE SEEK(m.cidinco)
		         m.cidinco = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Income')
		      ENDDO
		      SET DELETED ON
		      m.cYear      = lcYear
		      m.cPeriod    = lcPeriod
		      m.dAcctDate  = ldIncDate
		      INSERT INTO income FROM MEMVAR
		
		      IF metersub.ntaxamt <> 0
		         m.cidinco = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Income')
		         m.cSource   = metersub.ctax
		         m.nTotalInc = metersub.ntaxamt
		         m.nUnits    = 0
		         INSERT INTO income FROM MEMVAR
		      ENDIF
		
		   ELSE
		      *  The year and period were left blank so we send the revenue to the allocation table
		      m.cidincs = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Income')
		      SET DELETED OFF
		      SELECT incsusp1
		      SET ORDER TO cidincs
		      DO WHILE SEEK(m.cidincs)
		         m.cidincs = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Income')
		      ENDDO
		      SET DELETED ON
		      INSERT INTO incsusp FROM MEMVAR
		
		      IF metersub.ntaxamt <> 0
		         m.cidincs = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Income')
		         m.cSource   = metersub.ctax
		         m.nTotalInc = metersub.ntaxamt
		         m.nUnits    = 0
		         INSERT INTO incsusp FROM MEMVAR
		      ENDIF
		
		   ENDIF
		ENDSCAN
		
		SELECT meterall
		
		IF EMPTY(lcYear) AND EMPTY(lcPeriod)  &&  If not allocated, warn them
		   THISFORM.oMessage.DISPLAY('Since a year and period were not entered, this revenue has been sent to the allocation file.')
		ENDIF
		THISFORM.setnextcontrol(THISFORM.cboAcct)
		
		RETURN .T.
		
	ENDPROC

	PROCEDURE buildmeter		&& Builds the metersub table for the master meter chosen.
		LOCAL lnCount, llFoundInactive
		
		*
		*  Check to see if we already have sub records for the given meter
		*
		llFoundInactive = .f.
		
		SELECT meterall
		m.cbatch = cbatch
		
		IF EMPTY(meterall.cMeterID)
		   RETURN
		ENDIF
		
		SELECT metersub
		DELE FOR cbatch == m.cbatch
		
		SELECT cwellid, cwellname, cwellstat ;
		   FROM wells ;
		   WHERE cMeterId  = meterall.cmeterid ;
		      OR cMeterID2 = meterall.cmeterid ;
		      OR cMeterID3 = meterall.cmeterid ;
		      OR cMeterID4 = meterall.cmeterid ;
		      OR cMeterID5 = meterall.cmeterid ;
		   INTO CURSOR Tempwell ;
		   ORDER BY cWellID
		
		IF _tally > 0
		   SELECT tempwell
		   SCAN
		      SCATTER MEMVAR
		      IF m.cWellStat = 'V'  &&  Don't include investment wells, since there's no way to tell the owner type or how to post - BH 04/22/08
		         LOOP
		      endif
		      thisform.cmdatamanager.new('Metersub')
		      thisform.cmdatamanager.replace('Metersub','CWellID', m.cWellID)
		      thisform.cmdatamanager.replace('Metersub','CWellName', m.cWellName)
		      thisform.cmdatamanager.replace('Metersub','cMeterid', meterall.cmeterid)
		      IF INLIST(cwellstat,'I','S','P')
		         llFoundInactive = .t.
		      ENDIF 
		   ENDSCAN
		ENDIF 
		
		IF llFoundInactive &&  Found inactive wells, so warn them that the entries will be sent to the allocation file
		   thisform.oMessage.warning('One or more wells attached to this meter are inactive.  Their entries will be sent to the Allocation File.')
		ENDIF
		
		SELECT metersub
		GO TOP
		*thisform.Refresh()
		
		thisform.grdgridcustom1.Refresh()
		thisform.grdgridcustom1.column3.BackColor = RGB(255,255,128)     
		SELECT meterall
		   
	ENDPROC

	PROCEDURE calcalloc		&& Calculates the allocation.
		LOCAL lcBatch, lcSaveRec, lcidmets, lnAllocation, lnDecimals, lnDiff, lnDiffMax, lnEachDiff
		LOCAL lnLastDiff, lnMasterInc, lnMasterMCF, lnMasterTax, lnPrice, lnRecNo, lnSubCnt, lnSubCount
		LOCAL lnSubInc, lnSubMCF, lnSubTax, lnSubs, lnSubsTot, lnTaxAlloc, lnTaxPct, lnTotSub, lnTotal
		LOCAL lnTotalInc, lnTotalMCF, lnVariance
		*
		*  Calculates the allocation to each well
		*
		llReturn = .T.
		
		TRY
		    lnDecimals = THISFORM.ndecimals
		
		    lcBatch = THISFORM.cbatch
		
		    *  Don't use the price they entered for the calculations.  If they overtyped the total, it's meaningless
		    lnPrice = swROUND(meterall.nTotalInc / meterall.nMaster, 4)
		
		    STORE 0 TO lnVariance, lnSubsTot, lnAllocation, lnTotalInc
		
		    * Total the well meters
		    swselect('metersub')
		    GO BOTT
		    lcidmets  = metersub.cidmets
		    lcSaveRec = lcidmets
		
		    THISFORM.CalcVariance()
		
		    SCAN FOR cbatch == lcBatch
		        lnSubsTot = lnSubsTot + metersub.nSubMeter
		    ENDSCAN
		
		    *  Don't try to divide by zero
		    IF lnSubsTot = 0
		        LOCATE FOR cidmets == lcidmets
		        llReturn = .F.
		        EXIT 
		    ENDIF
		
		    * Calculate the variance
		    lnVariance = meterall.nMaster / lnSubsTot
		
		    lnMasterInc = meterall.nTotalInc
		    lnMasterMCF = meterall.nMaster
		    lnMasterTax = meterall.ntotaltax * -1
		    STORE 0 TO lnTotalMCF, lnSubMCF, lnSubInc, lnSubTax, lnTaxAlloc, lnTaxPct
		    IF lnMasterMCF # 0
		        swselect('metersub')
		        SCAN FOR cbatch == lcBatch
		            lnAllocation = swROUND(nSubMeter * lnVariance, lnDecimals)
		            IF nSubMeter # 0
		                lnTaxPct     = lnAllocation / lnMasterMCF
		            ELSE
		                lnTaxPct = 0
		            ENDIF
		            lnTotalInc = swROUND(lnAllocation * lnPrice, 2)
		            lnSubInc   = lnSubInc + lnTotalInc
		            lnSubMCF   = lnSubMCF + lnAllocation
		            *!*     IF lnMasterTax <> 0
		            lnTaxAlloc = swROUND(lnMasterTax * lnTaxPct, 2)
		            lnSubTax   = lnSubTax - lnTaxAlloc
		            IF metersub.ntaxamt # lnTaxAlloc
		                IF lnTaxAlloc > 999999999.99
		                    lnTaxAlloc = 999999999.99
		                ENDIF
		                THISFORM.cmdatamanager.REPLACE('metersub', 'ntaxamt', lnTaxAlloc)
		                THISFORM.cmdatamanager.REPLACE('metersub', 'ctax', meterall.ctax)
		            ENDIF
		            *!*     ENDIF
		            IF metersub.nAllocation # lnAllocation
		                IF lnAllocation > 999999999.99
		                    lnAllocation = 999999999.99
		                ENDIF
		                THISFORM.cmdatamanager.REPLACE('metersub', 'nallocation', lnAllocation)
		            ENDIF
		            IF metersub.nTotalSub # lnTotalInc
		                IF lnTotalInc > 999999999.99
		                    lnTotalInc = 999999999.99
		                ENDIF
		                THISFORM.cmdatamanager.REPLACE('metersub', 'ntotalsub', lnTotalInc)
		            ENDIF
		        ENDSCAN
		
		        * If the sub totals don't match the total dollars
		        * adjust as many entries as we can
		        IF lnMasterInc # lnSubInc
		            lnDiff = lnMasterInc - lnSubInc
		            swselect('metersub')
		            GO TOP
		            COUNT FOR cbatch == lcBatch AND nAllocation # 0 TO lnSubs
		            DO CASE
		                CASE ABS(lnDiff / lnSubs) >= .01  && Greater than a penny per sub
		                    lnEachDiff = ROUND(lnDiff / lnSubs, 2)
		                    lnSubCnt   = lnSubs
		                CASE (lnSubs / 100) >= ABS(lnDiff) && Less than a penny per sub
		                    lnSubCnt   = INT(ABS(lnDiff) * 100) && Figure out how many subs we can adjust
		                    lnEachDiff = swROUND(lnDiff / lnSubCnt, 2)
		                OTHERWISE  && Only adjust 1 sub
		                    lnSubCnt   = 1
		                    lnEachDiff = swROUND(lnDiff, 2)
		            ENDCASE
		            lnSubCount = 1
		            IF ABS(lnEachDiff) >= .01
		                SCAN FOR cbatch == lcBatch AND nAllocation # 0 AND lnSubCount <= lnSubCnt
		                    lnSubCount = lnSubCount + 1
		                    THISFORM.cmdatamanager.REPLACE('metersub', 'ntotalsub', nTotalSub + lnEachDiff)
		                ENDSCAN
		            ENDIF
		            lnLastDiff = lnDiff - (lnEachDiff * lnSubCnt)  && What's the difference now?
		            IF lnLastDiff # 0  && If it's not zero, allocate it to the 1st sub
		                SELECT metersub
		                LOCATE FOR cbatch == lcBatch AND nAllocation # 0
		                IF FOUND()
		                    THISFORM.cmdatamanager.REPLACE('metersub', 'ntotalsub', nTotalSub + lnLastDiff)
		                ENDIF
		            ENDIF
		        ENDIF
		
		        * Calculate the rounding
		        IF lnMasterMCF # lnSubMCF
		            lnDiff = lnMasterMCF - lnSubMCF
		            swselect('metersub')
		            GO TOP
		            COUNT FOR cbatch == lcBatch AND nAllocation # 0 TO lnSubs
		            IF (lnSubs / 100) >= ABS(lnDiff)
		                lnSubCnt   = INT(ABS(lnDiff) * 100)
		                lnEachDiff = swROUND(lnDiff / lnSubCnt, lnDecimals)
		            ELSE
		                lnSubCnt   = 1
		                lnEachDiff = swROUND(lnDiff, lnDecimals)
		            ENDIF
		            lnSubCount = 1
		            IF lnDecimals = 0
		                lnDiffMax = 1
		            ELSE
		                lnDiffMax = .01
		            ENDIF
		            IF ABS(lnEachDiff) >= lnDiffMax
		                SCAN FOR cbatch == lcBatch AND nAllocation # 0 AND lnSubCount <= lnSubCnt
		                    lnSubCount = lnSubCount + 1
		                    THISFORM.cmdatamanager.REPLACE('metersub', 'nallocation', nAllocation + lnEachDiff)
		                ENDSCAN
		            ENDIF
		        ENDIF
		
		        IF lnMasterTax # lnSubTax
		            lnDiff = lnMasterTax + lnSubTax
		            swselect('metersub')
		            GO TOP
		            COUNT FOR cbatch == lcBatch AND nAllocation # 0 TO lnSubs
		            IF (lnSubs / 100) >= ABS(lnDiff)
		                lnSubCnt   = INT(ABS(lnDiff) * 100)
		                lnEachDiff = swROUND(lnDiff / lnSubCnt, 2)
		            ELSE
		                lnSubCnt   = 1
		                lnEachDiff = swROUND(lnDiff, 2)
		            ENDIF
		            lnSubCount = 1
		            IF ABS(lnEachDiff) >= .01
		                SCAN FOR cbatch == lcBatch AND nAllocation # 0 AND lnSubCount <= lnSubCnt
		                    lnSubCount = lnSubCount + 1
		                    THISFORM.cmdatamanager.REPLACE('metersub', 'ntaxamt', ntaxamt + lnEachDiff)
		                ENDSCAN
		            ENDIF
		        ENDIF
		
		        swselect('metersub')
		        LOCATE FOR cidmets == lcidmets
		
		        THISFORM.cmdatamanager.setrecordposition('Metersub')
		        THISFORM.lChanged = .T.
		        THISFORM.grdgridcustom1.REFRESH()
		    ELSE
		        MESSAGEBOX('An amount must be entered for the master MCF before entering data for each well.', 16, 'Missing Master MCF')
		        THISFORM.setnextcontrol(THISFORM.txtnMaster)
		    ENDIF
		CATCH TO loError
		ENDTRY
		
		
		
		
		
		
		
		
		
		
		
		
		
		
	ENDPROC

	PROCEDURE calcdayson		&& Calculates dayson from the beginning and ending period ranges.
		LOCAL lcBegRange, lcEndRange, lcYear, lcYear1, ldDate1, ldDate2, lnDays
		
		lcYear = STR(YEAR(DATE()),4)
		
		SELECT options
		GO TOP
		glCalcDays = lCalcDays
		
		lcBegRange = THISFORM.txtcBegRange.VALUE
		lcEndRange = THISFORM.txtcEndRange.VALUE
		
		*
		*  If both oil & gas periods are displayed, use the gas period to
		*  calculate the dayson.  Otherwise use the oil period.
		*
		IF glCalcDays
		   IF LEFT(lcBegRange,2) > LEFT(lcEndRange,2)
		      lcYear1 = STR(VAL(lcYear)+1,4)
		   ELSE
		      lcYear1 = lcYear
		   ENDIF
		   ldDate1 = CTOD(lcBegRange+'/'+lcYear)
		   ldDate2 = CTOD(lcEndRange+'/'+lcYear1)
		   lnDays  = ldDate2 - ldDate1
		   thisform.txtnDaysOn.setvalue(lnDays)
		   thisform.txtnDaysOn.refresh()
		ENDIF
		
		SELECT meterall
	ENDPROC

	PROCEDURE calctotal		&& Calculates the total income.
		
		IF meterall.ntotalinc <> ROUND(meterall.nmaster * meterall.ngasprice,2)
		   lnTotal = ROUND(meterall.nMaster*meterall.ngasprice,2)
		   IF lnTotal > 999999999.99
		      lnTotal = 999999999.99
		   ENDIF 
		   thisform.cmdatamanager.replace('Meterall','Ntotalinc',lnTotal)
		   thisform.txtnTotal.Refresh()
		ENDIF   
		
	ENDPROC

	PROCEDURE calcvariance
		LOCAL lnVariance, lnSubsTot
		
		lcBatch = thisform.cbatch
		
		STORE 0 TO lnVariance, lnSubsTot
		
		* Total the well meters
		SELECT metersub
		GO bott
		lcidmets  = metersub.cidmets
		lcSaveRec = lcidmets
		
		SCAN FOR cBatch == lcBatch
		   lnSubsTot = lnSubsTot + metersub.nSubMeter
		ENDSCAN
		
		*  Don't try to divide by zero
		IF lnSubsTot = 0
		   LOCATE FOR cidmets == lcidmets
		   RETURN
		ENDIF
		
		* Save the substotal
		IF meterall.nsubstotal <> lnSubsTot
		   thisform.cmdatamanager.replace('Meterall','Nsubstotal',lnSubsTot)
		   thisform.txtnsubs.Refresh()
		ENDIF   
		   
		* Calculate the variance
		lnVariance = meterall.nMaster/lnSubsTot
		IF lnVariance > 9999.99
		   lnVariance = 9999.99
		ENDIF 
		IF meterall.nvariance <> lnVariance
		   thisform.txtnVariance.set('value',lnVariance)
		ENDIF   
	ENDPROC

	PROCEDURE Init
		   IF TYPE('m.goApp') = 'O'
		      IF NOT m.goApp.lAMVersion
		         thisform.lblCashAcct.Visible = .F.
		         thisform.cboAcct.Visible = .F.
		         thisform.chkRoundMCF.value = .f.
		         thisform.grdGridCustom1.Column3.txtnSubMeter.InputMask = '999999.99'
		         thisform.grdGridCustom1.Column3.txtnSubMeter.Format = '999999.99'
		         thisform.grdGridCustom1.Column3.InputMask = '999999.99'
		         thisform.grdGridCustom1.Column3.Format = '999999.99'
		         thisform.nDecimals = 2
		      ELSE
		         thisform.lblCashAcct.Visible = .T.
		         thisform.cboAcct.Visible     = .T.   
		      ENDIF
		   ENDIF
		   
		   IF m.goApp.lDocuments
		      thisform.AddObject('oFileDialog','sffiledialog')
		      swSELECT('documents')
		      m.cfk      = 'GM'+meterall.cbatch
		      LOCATE FOR cfk == m.cfk
		      IF FOUND()
		         thisform.cmdDocument.Caption = 'View Document'
		      ELSE
		         thisform.cmdDocument.Caption = 'Add Document'
		      ENDIF 
		      thisform.cmdDocument.visible = .t.
		      
		   ELSE
		      thisform.cmdDocument.visible = .f.
		   ENDIF 
		
		
		DODEFAULT()
	ENDPROC

	PROCEDURE list
		LPARAMETERS cworkarea
		LOCAL lcList, lnRecNo, lnColumns
		PRIV llOK
		
		llOK = .F.
		
		IF USED('lookuptmp')
		   USE IN lookuptmp
		ENDIF
		IF USED('lookuptmp1')
		   USE IN lookuptmp1
		ENDIF
		
		lcList = 'cBatch\Batch,dincdate\Date,cmeterid\Meter ID,crevname\Purchaser,cyear\Year,cperiod\Prd,crefid\Ref,nmaster\Total MCF,ntotalinc\Total'   
		lnColumns = 9
		
		SELECT meterall.cBatch, ;
		   meterall.dincdate, ;
		   meterall.cMeterID, ;
		   revsrc.crevname, ;
		   meterall.cYear, ;
		   meterall.cPeriod,;
		   meterall.crefid, ;
		   meterall.nMaster, ;
		   meterall.ntotalinc ;
		   FROM meterall,revsrc ;
		   INTO CURSOR lookuptmp1  ;
		   WHERE revsrc.crevkey == meterall.crevkey 
		
		USE DBF('lookuptmp1') AGAIN IN 0 ALIAS lookuptmp EXCL
		
		SELECT lookuptmp
		INDEX ON cBatch TAG cBatch
		INDEX ON cMeterID+cYear+cPeriod TAG cMeterID
		INDEX ON cYear+cPeriod+cMeterID TAG cYear
		INDEX ON nMaster TAG nMaster
		INDEX on crevname TAG crevname
		INDEX on crefid TAG crefid 
		INDEX on dincdate TAG dincdate
		INDEX on ntotalinc TAG ntotalinc
		
		DO FORM ..\CUSTOM\picklist WITH 'lookuptmp', lcList, meterall.cBatch, lnColumns,.T.,.T.
		
		IF llOK
		   SELECT meterall
		   LOCATE FOR cBatch = lookuptmp.cBatch
		   THISFORM.cmdatamanager.setrecordposition('Meterall')
		ENDIF
		
		THISFORM.REFRESH()
		
	ENDPROC

	PROCEDURE oglmaint_access
		IF VARTYPE(this.oGLMaint) # 'O'
		   IF NOT 'swgl' $ LOWER(SET('classlib'))
		      SET CLASSLIB TO custom\swgl.vcx additive
		   ENDIF    
		   this.oGLMaint = CREATEOBJECT('glmaint')
		ENDIF    
		return This.oGLMaint
		
	ENDPROC

	PROCEDURE report
		DO meterprint WITH meterall.cbatch, 'S', thisform.DataSessionId 
	ENDPROC

	PROCEDURE save
		LPARAMETERS cworkarealist
		
		thisform.txtcmeterid.setfocus()
		
		DODEFAULT(cworkarealist)
	ENDPROC

	PROCEDURE viewdocument
		LPARAMETERS tcBatch
		
		LOCAL lnReturn, llReturn, lcOutputFile
		LOCAL liKey, lcPath
		
		
		swselect('documents')
		SET ORDER TO cFK
		IF SEEK(tcBatch)
		   lcOutputFile = cPath
		
		   llReturn = .T.
		
		   IF NOT FILE(lcOutputFile)
		      llReturn = .F.
		   ENDIF
		
		   viewdocument(lcOutputFile)
		
		ENDIF
	ENDPROC

	PROCEDURE cboAcct.Init
		*
		*  Builds the data displayed in the combo list box
		*
		
		SELECT  cAcctNo + ' - ' +cAcctDesc, cAcctNo, cAcctDesc FROM coa INTO ARRAY laAcct WHERE lBankacct = .T. ORDER BY cAcctNo
		
		IF _TALLY > 0
		   FOR lnX = 1 TO ALEN(laAcct,1)
		      THIS.ADDLISTITEM(laAcct[lnX,1],lnX,1)
		      THIS.ADDLISTITEM(laAcct[lnX,2],lnX,2)
		   ENDFOR
		ENDIF
		
		DODEFAULT()
		
	ENDPROC

	PROCEDURE cboSource.Init
		this.AddListItem('     ',1)
		THIS.ADDLISTITEM('GTAX1',2)
		THIS.ADDLISTITEM('GTAX2',3)
		THIS.ADDLISTITEM('GTAX3',4)
		THIS.ADDLISTITEM('GTAX4',5)
		
		DODEFAULT()
	ENDPROC

	PROCEDURE chkRoundMCF.Valid
		if this.value = .f.
		   thisform.grdGridCustom1.Column3.txtnSubMeter.InputMask = '999999.99'
		   thisform.grdGridCustom1.Column3.txtnSubMeter.Format = '999999.99'
		   thisform.grdGridCustom1.Column3.InputMask = '999999.99'
		   thisform.grdGridCustom1.Column3.Format = '999999.99'
		   thisform.nDecimals = 2
		else   
		   thisform.grdGridCustom1.Column3.txtnSubMeter.InputMask = '99999999'
		   thisform.grdGridCustom1.Column3.txtnSubMeter.Format = '99999999'
		   thisform.grdGridCustom1.Column3.InputMask = '99999999'
		   thisform.grdGridCustom1.Column3.Format = '99999999'
		   thisform.nDecimals = 0
		endif   
		   
	ENDPROC

	PROCEDURE CMDATAMANAGER.afternav
		LPARAMETERS cworkarea
		
		IF m.cWorkArea = 'Meterall'
		
		   SELECT coa
		   SET ORDER TO acctno
		  
		   SELECT meters
		   SET ORDER TO MeterId
		   IF SEEK(meterall.cmeterid)
		      thisform.txtcMeterName.value = cMeterDesc
		      thisform.txtcMeterName.Refresh()
		   ELSE   
		      thisform.txtcMeterName.value = ''
		      thisform.txtcMeterName.Refresh()
		   ENDIF   
		   
		   SELECT revsrc
		   SET ORDER TO crevkey
		   IF SEEK(meterall.crevkey)
		      thisform.txtcRevName.value = crevname
		      thisform.txtcRevName.refresh()
		   ELSE
		      thisform.txtcRevName.value = ''
		      thisform.txtcRevName.refresh()   
		   ENDIF   
		
		   SELECT meterall   
		   thisform.cbatch = meterall.cbatch
		   
		   SELECT checks
		   LOCATE FOR cidchec = meterall.cidchec
		   IF FOUND() AND lCleared
		      thisform.lblCleared.caption = 'Deposit Cleared'
		   ELSE
		      thisform.lblCleared.caption = ''
		   ENDIF 
		   thisform.lblcleared.refresh()
		   
		   IF m.goApp.lDocuments
		      swSELECT('documents')
		      m.cfk      = 'GM'+meterall.cbatch
		      LOCATE FOR cfk == m.cfk
		      IF FOUND()
		         thisform.cmdDocument.Caption = 'View Document'
		      ELSE
		         thisform.cmdDocument.Caption = 'Add Document'
		      ENDIF 
		   ENDIF    
		   thisform.txtnNetAmount.Value = meterall.ntotalinc - meterall.ntotaltax
		   thisform.txtnNetAmount.Refresh()
		ENDIF   
	ENDPROC

	PROCEDURE CMDATAMANAGER.afternew
		LPARAMETERS cworkarea
		LOCAL lcBatch
		
		IF m.cworkarea = 'Meterall'
		   lcBatch = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Batch')
		
		   SET DELETED OFF
		   SELECT meterall1
		   SET ORDER TO cBatch
		   DO WHILE SEEK(lcBatch)
		      lcBatch = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Batch')
		   ENDDO
		   SET DELETED ON
		
		   SELECT meterall
		   REPL cBatch WITH lcBatch
		   THISFORM.cBatch = lcBatch
		   IF NOT m.goApp.lAMVersion
		      THISFORM.setnextcontrol(THISFORM.txtdIncDate)
		   ELSE
		      THISFORM.setnextcontrol(THISFORM.cboAcct)
		      THISFORM.cboAcct.LISTITEMID = 1
		   ENDIF
		   THISFORM.txtcmetername.VALUE = ''
		   THISFORM.txtcrevname.VALUE = ''
		   THISFORM.cboAcct.SET('value',options.cDisbAcct)
		   THISFORM.swPeriod.SET('value',PADL(ALLTRIM(STR(MONTH(DATE()))),2,'0'))
		   THISFORM.swYear.SET('value',ALLTRIM(STR(YEAR(DATE()))))
		   thisform.txtdIncDate.set('value',DATE())
		   thisform.cboSource.set('value','GTAX1')
		ENDIF
		
		IF m.cworkarea = 'Metersub'
		   lcidmets = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Meter Sub')
		
		   SELECT metersub1
		   SET DELETED OFF
		   SET ORDER TO cidmets
		   DO WHILE SEEK(lcidmets)
		      lcidmets = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Meter Sub')
		   ENDDO
		   SET DELETED ON
		
		   SELECT metersub
		   REPL cidmets WITH lcidmets
		ENDIF
		
	ENDPROC

	PROCEDURE CMDATAMANAGER.beforedelete
		LPARAMETERS cworkarea
		
		IF m.cworkarea = 'Meterall'
		   lcBatch = meterall.cbatch
		
		   *  Make sure the period or year isn't closed
		   IF m.goapp.lAMVersion
		      IF NOT THISFORM.oGLMaint.CheckPeriod(meterall.dIncDate,.T.)
		         THISFORM.oMessage.warning('Unable to delete this reconciliation. Either the fiscal year or period for this date has been closed.')
		         RETURN .F.
		      ENDIF
		   ENDIF
		
		   * Check for income being processed
		   swselect('income',.T.)
		   SELECT income
		   SCAN FOR cbatch == lcBatch
		      IF nrunno <> 0
		         lcRun = PADL(TRANSFORM(nrunno),3,'0') + '/'+crunyear
		         THISFORM.oMessage.warning('This meter reconciliation cannot be deleted. It has been processed in run closing: ' + lcRun)
		         RETURN .F.
		      ENDIF
		   ENDSCAN
		   THISFORM.oGLMaint.delbatch(lcBatch,'DM')
		   SELE glmaster
		   =TABLEUPDATE(.T.)
		   SELE checks
		   DELE FOR cbatch == lcBatch
		   =TABLEUPDATE(.T.)
		   SELECT income
		   IF NOT EMPTY(lcBatch)
		      SCAN FOR cbatch = lcBatch
		         DELE NEXT 1
		      ENDSCAN
		      =TABLEUPDATE(.t.)
		   ENDIF
		   SELECT incsusp
		   IF NOT EMPTY(lcBatch)
		      SCAN FOR cbatch = lcBatch
		         DELE NEXT 1
		      ENDSCAN
		      =TABLEUPDATE(.t.)
		   ENDIF
		   SELECT meterall
		ENDIF
		
		DODEFAULT(m.cworkarea)
		
	ENDPROC

	PROCEDURE CMDATAMANAGER.beforeupdate
		LPARAMETERS cworkarealist
		LOCAL lcBatch, lcGroup, lcWellID, lcYear, lcPeriod, ldIncDate, lcRevName
		LOCAL lcRevClear, lcidchec, oDist
		
		lcBatch   = meterall.cBatch
		lcYear    = meterall.cYear
		lcPeriod  = meterall.cPeriod
		ldIncDate = meterall.dIncDate
		lcRevKey  = meterall.cRevKey
		lcidchec  = meterall.cidchec
		lcWellID = ''
		lcGroup  = ''
		
		* Create the business object for the wellinv table
		oWellInv = CREATEOBJECT('swbizobj_wellinv')
		
		*  Make sure the period or year isn't closed
		IF m.goapp.lAMVersion
		   IF NOT THISFORM.oGLMaint.CheckPeriod(meterall.dIncDate,.T.)
		      THISFORM.oMessage.warning('Unable to save this reconciliation. Either the fiscal year or period for this date has been closed.')
		      RETURN .F.
		   ENDIF
		ENDIF
		
		SELECT checks
		SET ORDER TO cidchec
		IF SEEK(lcidchec)
		   IF lCleared
		      IF MESSAGEBOX('This deposit has already been cleared in a bank reconciliation. Do you want to continue with this update? ' + ;
		            'If you continue, the deposit will not be marked as cleared any longer.',52,'Deposit Cleared') = 7
		         RETURN .F.
		      ENDIF
		   ENDIF
		ENDIF
		
		IF TYPE('m.goApp') = 'O'
		   IF m.goapp.lAMVersion = .T.
		      IF EMPTY(THISFORM.txtdIncDate.VALUE)
		         THISFORM.oMessage.warning('Please enter a value for the income date')
		         THISFORM.setnextcontrol(THISFORM.txtdIncDate)
		         RETURN .F.
		      ENDIF
		   ELSE
		      IF EMPTY(lcYear) OR EMPTY(lcPeriod)
		         THISFORM.oMessage.warning('Please enter a value for the production year and period.')
		         THISFORM.setnextcontrol(THISFORM.swperiod)
		         RETURN .F.
		      ENDIF
		   ENDIF
		ENDIF
		
		SELECT wells
		GO TOP
		
		SELECT glopt
		lcRevClear = cRevClear
		llDMNoPost = lDMNoPost
		llDMNoRev  = lDMNoRev
		
		SELECT options
		lcDeptNo = cDeptNo
		
		SELECT revsrc
		SET ORDER TO cRevKey
		IF SEEK(lcRevKey)
		   lcRevName = cRevName
		ELSE
		   lcRevName = 'Unknown'
		ENDIF
		
		THISFORM.calcalloc()
		
		SELE meterall
		*=tableupdate(.t.,.t.)
		SELE metersub
		*=tableupdate(.T.,.T.)
		*  Remove any previous batch entries
		THISFORM.oGLMaint.delbatch(lcBatch,'DM')
		
		THISFORM.oGLMaint.dGLDate    = ldIncDate
		THISFORM.oGLMaint.dCheckDate = ldIncDate
		THISFORM.oGLMaint.dPostDate  = ldIncDate
		THISFORM.oGLMaint.cSource    = 'DM'
		THISFORM.oGLMaint.nAmount    = meterall.nTotalInc - meterall.nTotalTax
		THISFORM.oGLMaint.cAcctNo    = meterall.cAcctNo
		THISFORM.oGLMaint.cDesc      = lcRevName
		THISFORM.oGLMaint.cID        = lcRevKey
		THISFORM.oGLMaint.cUnitNo    = ''
		THISFORM.oGLMaint.cDeptNo    = lcDeptNo
		THISFORM.oGLMaint.cCatCode   = ''
		THISFORM.oGLMaint.cBatch     = lcBatch
		THISFORM.oGLMaint.cCheckNo   = meterall.crefid
		THISFORM.oGLMaint.cEntryType = 'D'
		THISFORM.oGLMaint.cidType    = 'D'
		THISFORM.oGLMaint.cPayee     = lcRevName
		THISFORM.oGLMaint.lPrinted   = .T.
		
		*  Remove any previous checks from the register
		THISFORM.oGLMaint.delcheck(lcidchec)
		
		IF m.goapp.lAMVersion AND NOT llDMNoPost AND NOT llDMNoRev
		
		   *  Add the detail entries to glmaster
		   THISFORM.oGLMaint.cAcctNo  = lcRevClear
		   lnAmount = 0
		   SELECT metersub
		   SCAN FOR cBatch == lcBatch
		   
		      IF EMPTY(m.cDeck) AND NOT EMPTY(m.cProdYear) AND NOT EMPTY(m.cProdPeriod) AND NOT m.goApp.lSendToAllocate
		         m.cDeck = oWellInv.DOIDeckNameLookup(m.cProdYear,m.cProdPeriod,m.cWellID)
		      ENDIF    
		         
		      THISFORM.oGLMaint.cUnitNo = metersub.cwellid
		      lnGas = swNetRevenue(metersub.cwellid, metersub.ntotalsub, 'G', .F., .T., .F., '', .F., .f., .F., m.cDeck)
		      
		      m.ntaxamt = ROUND(lnTax, 2)
		      THISFORM.oGLMaint.nAmount = lnGas * -1
		      THISFORM.oGLMaint.updatebatch()
		      IF metersub.ntaxamt <> 0
		         lnTax     = swNetRevenue(metersub.cwellid, metersub.ntaxamt, 'G', .F., .T., .F., '', .F., .f., .F., m.cDeck)
		         THISFORM.oGLMaint.nAmount = lnTax * -1
		         THISFORM.oGLMaint.updatebatch()
		      ELSE
		         lnGasTax = 0
		      ENDIF
		      lnAmount = lnAmount + lnGas + lnGasTax
		   ENDSCAN
		
		   *  Add the cash entry to glmaster
		   THISFORM.oGLMaint.nAmount = lnAmount
		   THISFORM.oGLMaint.cAcctNo    = meterall.cAcctNo
		   THISFORM.oGLMaint.cDesc      = lcRevName
		   THISFORM.oGLMaint.cID        = lcRevKey
		   THISFORM.oGLMaint.cUnitNo    = ''
		
		   THISFORM.oGLMaint.updatebatch()
		
		   llReturn = THISFORM.oGLMaint.chkbalance()
		
		   *  Add the check to the register
		   THISFORM.oGLMaint.addcheck()
		
		   *  Get the check key
		   lcidchec = THISFORM.oGLMaint.GETKEY()
		   THISFORM.oGLMaint.cidchec = lcidchec
		
		   *  Replace the check key in meterall
		   SELECT meterall
		   IF cidchec <> lcidchec
		      REPL cidchec WITH lcidchec
		   ENDIF
		
		ELSE
		   llReturn = .T.
		ENDIF
		
		IF llReturn
		   IF NOT THISFORM.allocate()
		      THISFORM.setnextcontrol(THISFORM.cboAcct)
		      RETURN .F.
		   ENDIF
		   THISFORM.setchanged(.F.)
		   SELE meterall
		   THISFORM.cmdatamanager.setrecordposition('meterall')
		   THISFORM.cmdatamanager.setrecordposition('metersub')
		   THISFORM.grdgridcustom1.REFRESH()
		   RETURN .T.
		ELSE
		   RETURN .F.
		ENDIF
		
		
		
		
	ENDPROC

	PROCEDURE Cmdcommandbuttoncustom1.Click
		thisform.report()
	ENDPROC

	PROCEDURE cmdDocument.Click
		LOCAL lnx, llReturn, llNewDoc
		
		llNewDoc = .T.
		
		swSELECT('documents')
		m.cfk      = 'GM'+meterall.cbatch
		LOCATE FOR cfk == m.cfk
		IF FOUND()
		   IF MESSAGEBOX('There is a document attached to this reconciliation. Do you want to view the document? ' + ;
		                 'Choosing No will allow you to attach a new document.', 36, 'Attached Document') = 6
		      THISFORM.viewdocument(m.cfk)
		      llNewDoc = .F.
		   ELSE
		      llNewDoc = .T.
		   ENDIF
		ENDIF
		IF llNewDoc
		    THISFORM.oFileDialog.FileName = ''
		   llReturn = THISFORM.oFileDialog.openfile()
		   IF NOT THISFORM.oFileDialog.lcancelled
		      m.cDesc    = THISFORM.omessage.gettext('Enter a description for this file.','Get File Description')
		      m.cpath    = THISFORM.ofilEDIALOG.aFiles[1]
		      IF EMPTY(m.cDesc) OR ISNULL(m.cDesc)
		         m.cDesc = ALLTRIM(m.cpath)
		      ENDIF
		
		      m.cDocLink = 'GM'
		      swSELECT('documents')
		      LOCATE FOR cfk == m.cfk
		      IF NOT FOUND()
		         INSERT INTO documents FROM MEMVAR
		      ELSE
		         REPLACE cpath WITH m.cpath, ;
		                 cdesc WITH m.cdesc
		      ENDIF
		      THISFORM.setchanged(.T., 'Documents')
		      this.Caption = 'View \<Document'
		      m.gostatemanager.refreshall('Form')
		   ENDIF
		ENDIF
		
	ENDPROC

	PROCEDURE cmdEven.Click
		LOCAL lnMaster, lnTotalInc, lnPrice, lcBatch, lnCount
		
		SELECT meterall
		lnMaster = meterall.nmaster
		lnTotalInc = meterall.ntotalinc
		lcBatch    = meterall.cbatch
		
		lnPrice = ROUND(lnTotalInc/lnMaster,6)
		
		SELECT metersub
		COUNT FOR cbatch = lcBatch TO lnCount
		
		lnAlloc = ROUND(lnMaster/lnCount,2)
		lnDollars = ROUND(lnTotalInc/lnCount,2)
		
		lnTotal = lnTotalInc - ROUND(lnDollars * lnCount,2)
		lnSubs  = lnMaster   - ROUND(lnAlloc * lnCount,2)
		
		SELECT metersub
		SCAN
		   REPL nallocation WITH lnAlloc, ;
		      nSubMeter   WITH lnAlloc, ;
		      nTotalSub   WITH lnDollars
		ENDSCAN
		
		IF lnSubs <> 0
		   SELECT metersub
		   SCAN
		      REPL nallocation WITH nallocation + lnSubs, ;
		         nSubMeter   WITH nSubMeter + lnSubs
		      EXIT
		   ENDSCAN
		ENDIF
		
		IF lnTotal <> 0
		   SELECT metersub
		   SCAN
		      REPL nTotalSub WITH nTotalSub + lnTotal
		      EXIT
		   ENDSCAN
		ENDIF
		
		GO TOP
		
		SELECT meterall
		
		THISFORM.CalcVariance()
		thisform.calcalloc()
		
		THISFORM.grdgridcustom1.REFRESH()
		
	ENDPROC

	PROCEDURE cmdLookMeter.Click
		LOCAL lcList
		PRIV llOK
		
		llOK = .F.
		lcList = 'cmeterid/meterid,cmeterdesc/meterdesc'
		
		DO FORM ..\custom\picklist WITH 'Meters', lcList, thisform.txtcmeterid.value, 2
		
		IF llOK
		   thisform.cmdatamanager.replace('Meterall','Cmeterid',Meters.cmeterid)
		   thisform.txtcmeterid.refresh()
		   thisform.txtcMeterName.value = Meters.cMeterDesc
		   thisform.txtcMeterName.refresh()
		   thisform.buildmeter()
		   thisform.setnextcontrol(thisform.txtcmeterid)
		   SELECT meterall
		ENDIF      
	ENDPROC

	PROCEDURE cmdLookMeter.When
		RETURN thisform.cmdatamanager.isnew('Meterall')  &&  Don't allow the meter to be changed if it's not a new record
	ENDPROC

	PROCEDURE cmdLookPurch.Click
		LOCAL lcList
		PRIV llOK
		
		llOK = .F.
		lcList = 'crevkey,crevname'
		
		DO FORM ..\custom\picklist WITH 'Revsrc', lcList, thisform.txtcrevkey.value, 2
		
		IF llOK
		   thisform.cmdatamanager.replace('Meterall','Crevkey',Revsrc.crevkey)
		   thisform.txtcRevName.value = revsrc.cRevName
		   thisform.txtcRevName.refresh()
		   thisform.txtcRevKey.refresh()
		ENDIF   
		
		SELECT meterall
		thisform.setnextcontrol(thisform.txtcRevKey)
	ENDPROC

	PROCEDURE cmdLookPurch.When
		RETURN MDOWN()	
		
	ENDPROC

	PROCEDURE Grdgridcustom1.AfterRowColChange
		LPARAMETERS ncol
		
		if ncol <> 3
		   this.column3.txtnsubmeter.setfocus()
		   dodefault(ncol)
		else
		   return   
		endif
		
	ENDPROC

	PROCEDURE Grdgridcustom1.Column1.txtcWellID.When
		RETURN .F.
	ENDPROC

	PROCEDURE Grdgridcustom1.Column2.txtcWellName.When
		RETURN .F.
	ENDPROC

	PROCEDURE Grdgridcustom1.Column3.txtnSubMeter.GotFocus
		IF thisform.txtnmaster.Value = 0
		   MESSAGEBOX('The master MCF total must be entered before entering well chart totals.',16,'Missing Master MCF')
		   thisform.setnextcontrol(thisform.txtnmaster)
		   thisform.txtnmaster.SetFocus()
		   RETURN .f.
		ELSE
		   DODEFAULT()
		ENDIF 
	ENDPROC

	PROCEDURE Grdgridcustom1.Column3.txtnSubMeter.KeyPress
		LPARAMETERS nkeycode,nshiftaltctrl
		
		DO case
		   case nkeycode = 13 OR nkeycode = 9
		      keyboard '{dnarrow}'
		   CASE nkeycode = 15    
		      keyboard '{uparrow}'
		   otherwise
		      dodefault (nkeycode,nshiftaltctrl)
		endcase
	ENDPROC

	PROCEDURE Grdgridcustom1.Column3.txtnSubMeter.Valid
		LOCAL llChanged
		
		if this.value <> metersub.nsubmeter
		   llChanged = .t.
		ELSE
		   llChanged = .f.
		ENDIF
		
		DODEFAULT()
		
		IF llChanged
		   IF meterall.nMaster <> 0
		      thisform.calcalloc()
		   ELSE
		      RETURN 
		   ENDIF 
		ENDIF 
		
		
	ENDPROC

	PROCEDURE Grdgridcustom1.Column4.txtnAllocated.When
		RETURN .F.
	ENDPROC

	PROCEDURE Grdgridcustom1.Column5.txtnTotalInc.When
		RETURN .F.
	ENDPROC

	PROCEDURE Grdgridcustom1.Column6.Txttextboxcustom1.When
		RETURN .f.
	ENDPROC

	PROCEDURE Swperiod.Valid
		IF NOT EMPTY(THIS.VALUE)
		   IF LEN(ALLTRIM(THIS.VALUE)) < 2
		      THIS.VALUE = PADL(ALLTRIM(THIS.VALUE),2,'0')
		   ENDIF
		   IF NOT BETWEEN(THIS.VALUE,'01','12')
		      WAIT WIND NOWAIT 'The period must be between 01 and 12., Please re-enter...'
		      RETURN 0
		   ENDIF
		   IF EMPTY(THISFORM.swYear.VALUE)  &&  Only plug in current year if the year is empty
		      THISFORM.swYear.SET('value',ALLTRIM(STR(YEAR(DATE()))))
		   ENDIF
		ENDIF
		
		REPLACE meterall.cperiod WITH THIS.VALUE
		
	ENDPROC

	PROCEDURE Swyear.Valid
		IF NOT EMPTY(THIS.VALUE)
		   IF LEN(ALLTRIM(this.Value)) = 2
		      this.Value = '20' + this.Value
		   ENDIF 
		   IF NOT BETWEEN(THIS.VALUE,'1900','2099')
		      WAIT WIND NOWAIT 'The year entered is not a valid year. Please re-enter...'
		      RETURN 0
		   ENDIF
		
		   IF LEN(ALLTRIM(THIS.VALUE)) < 4
		      WAIT WIND NOWAIT 'The year entered is not a valid year. Please re-enter...'
		      RETURN 0
		   ENDIF
		ELSE
		   IF NOT EMPTY(THISFORM.swperiod.VALUE)
		      THIS.SET('value',ALLTRIM(STR(YEAR(DATE()))))
		   ENDIF
		ENDIF
		
		REPLACE meterall.cyear WITH THIS.VALUE
		
	ENDPROC

	PROCEDURE txtcEndRange.LostFocus
		thisform.calcdayson()
		DODEFAULT()
	ENDPROC

	PROCEDURE txtcMeterID.GotFocus
		ON KEY LABEL F2 _screen.activeform.cmdLookMeter.Click()
		thisform.oldmeterid = this.Value  &&  Store the value when the control is selected, so we know if it changes
		
		DODEFAULT()
	ENDPROC

	PROCEDURE txtcMeterID.InteractiveChange
		IF DODEFAULT()
		   SELECT meters
		   LOCATE FOR cmeterid == this.Value
		   IF FOUND()
		         thisform.txtcMeterName.set('value',meters.cMeterDesc)
		   ELSE
		      thisform.txtcMeterName.set('value','')
		   ENDIF
		ENDIF          
	ENDPROC

	PROCEDURE txtcMeterID.Valid
		WAIT WIND NOWAIT 'Building Well List...Please Wait'
		IF meterall.cMeterID <> this.value
		   THISFORM.cmdatamanager.REPLACE('Meterall','Cmeterid',THIS.VALUE)
		ENDIF 
		THISFORM.txtcMeterName.VALUE = meters.cMeterDesc
		THISFORM.txtcMeterName.REFRESH()
		IF thisform.oldmeterid <> this.value  &&  Only repeat the buildmeter processing if the meter ID is different than when it was selected (meaning the user changed it)
		   THISFORM.buildmeter()
		ENDIF 
		
		WAIT CLEAR
		*!*	   ELSE
		*!*	      wait wind nowait 'Refreshing Well List....Please Wait'
		*!*	      lcmeterid = this.value
		*!*	      thisform.cmdatamanager.revertall()
		*!*	      thisform.cmdatamanager.replace('Meterall','Cmeterid',lcmeterid)
		*!*	      thisform.txtcMeterName.value = meters.cMeterDesc
		*!*	      thisform.txtcMeterName.refresh()
		*!*	      thisform.buildmeter()
		*!*	      wait clear
		SELECT meterall
		
	ENDPROC

	PROCEDURE txtcMeterID.When
		RETURN thisform.cmdatamanager.isnew('Meterall')  &&  Don't allow the meter to be changed if it's not a new record
	ENDPROC

	PROCEDURE txtcMeterName.When
		RETURN .F.
	ENDPROC

	PROCEDURE txtcRevKey.GotFocus
		ON KEY LABEL F2 _screen.activeform.cmdLookPurch.Click()
		DODEFAULT()
	ENDPROC

	PROCEDURE txtcRevKey.InteractiveChange
		IF DODEFAULT()
		   swselect('revsrc')
		   LOCATE FOR crevkey == this.Value
		   IF FOUND()
		      thisform.txtcRevName.set('value',revsrc.cRevName)
		   ELSE
		      thisform.txtcRevName.set('value','')
		   ENDIF 
		ENDIF    
	ENDPROC

	PROCEDURE txtcRevKey.LostFocus
		ON KEY LABEL F2 *
		SELECT revsrc
		SET ORDER TO crevkey
		IF SEEK(this.value)
		   thisform.txtcrevname.value = revsrc.crevname
		   thisform.txtcrevname.refresh()
		   if thisform.txtnPrice.value = 0 and revsrc.nDefPrice <> 0  &&  Fill in default price from purchaser file
		      thisform.txtnPrice.set('value',revsrc.nDefPrice)
		   endif
		ELSE   
		   thisform.txtcrevname.value = 'Not Found'
		   thisform.txtcrevname.refresh()
		ENDIF
		SELECT meterall
		DODEFAULT()   
	ENDPROC

	PROCEDURE txtcRevname.When
		RETURN .F.
	ENDPROC

	PROCEDURE txtnDaysOn.Valid
		IF DODEFAULT()
		   m.nDaysOn = this.Value
		   IF VARTYPE(m.nDaysOn) # 'N'
		      m.nDaysOn = INT(VAL(m.nDaysOn))
		   ENDIF
		   IF NOT BETWEEN(m.nDaysOn,0,365)
		      MESSAGEBOX('The Days On value must be between 0 and 365. Please correct.',64,'Invalid Days On')
		      RETURN 0
		   ENDIF
		ENDIF 
	ENDPROC

	PROCEDURE txtnMaster.Valid
		DODEFAULT()
		thisform.calctotal()
		thisform.calcalloc()
		
	ENDPROC

	PROCEDURE txtnNetAmount.LostFocus
		SELECT metersub
		GO TOP
		DODEFAULT()
	ENDPROC

	PROCEDURE txtnNetAmount.When
		RETURN .f.
	ENDPROC

	PROCEDURE txtnPrice.Valid
		DODEFAULT()
		thisform.calctotal()
		thisform.calcalloc()
		
	ENDPROC

	PROCEDURE txtnSubs.When
		RETURN .F.
	ENDPROC

	PROCEDURE txtnTotal.LostFocus
		SELECT metersub
		GO TOP
		thisform.txtnNetAmount.Value = this.Value - thisform.txtTaxAmount.value
		thisform.txtnNetAmount.Refresh()
		DODEFAULT()
	ENDPROC

	PROCEDURE txtnTotal.Valid
		DODEFAULT()
		IF EMPTY(meterall.ngasprice)
		   IF meterall.nmaster > 0 AND meterall.ntotalinc > 0
		      IF THISFORM.omessage.CONFIRM('Should the price be calculated?')
		         THISFORM.cmdatamanager.REPLACE('Meterall','Ngasprice',ROUND(meterall.ntotalinc/meterall.nmaster,6))
		         THISFORM.txtnprice.REFRESH()
		      ENDIF
		   ENDIF
		ENDIF
		
		thisform.calcalloc()
		
	ENDPROC

	PROCEDURE txtnVariance.When
		RETURN .F.
	ENDPROC

	PROCEDURE txtTaxAmount.LostFocus
		SELECT metersub
		GO TOP
		thisform.txtnNetAmount.Value = thisform.txtntotal.Value - this.value
		thisform.txtnnetAmount.Refresh()
		DODEFAULT()
	ENDPROC

	PROCEDURE txtTaxAmount.Valid
		
		IF this.Value < 0
		   IF NOT thisform.omessage.confirm("Taxes don't have to be entered as a negative. You are entering this as a tax credit. Is that what you want to do?")
		      this.Value = ABS(this.Value)
		   ENDIF 
		ENDIF    
		
		DODEFAULT()
		
		IF EMPTY(meterall.ngasprice)
		   IF meterall.nmaster > 0 AND meterall.ntotalinc > 0
		      IF THISFORM.omessage.CONFIRM('Should the price be calculated?')
		         THISFORM.cmdatamanager.REPLACE('Meterall','Ngasprice',ROUND(meterall.ntotalinc/meterall.nmaster,6))
		         THISFORM.txtnprice.REFRESH()
		      ENDIF
		   ENDIF
		ENDIF
		
		thisform.calcalloc()
		
	ENDPROC

ENDDEFINE
