*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="apvendstm.scx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="2" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Cursor1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor6" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor7" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor8" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor9" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor11" UniqueID="" Timestamp="" />

	AutoOpenTables = .F.
	DataSource = .NULL.
	Height = 627
	Left = 2
	Name = "Dataenvironment"
	Top = 211
	Width = 610

	ADD OBJECT 'Cursor1' AS cursor WITH ;
		Alias = "coa", ;
		CursorSource = "coa", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor1", ;
		Top = 20, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor11' AS cursor WITH ;
		Alias = "csdisdet", ;
		CursorSource = "csdisdet", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 441, ;
		Name = "Cursor11", ;
		Top = 20, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor2' AS cursor WITH ;
		Alias = "checks", ;
		CursorSource = "checks", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 150, ;
		Name = "Cursor2", ;
		Top = 20, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor3' AS cursor WITH ;
		Alias = "csdishdr", ;
		CursorSource = "csdishdr", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 290, ;
		Name = "Cursor3", ;
		Top = 20, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor4' AS cursor WITH ;
		Alias = "appmtdet", ;
		CursorSource = "appmtdet", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor4", ;
		Top = 140, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor5' AS cursor WITH ;
		Alias = "Apvendchk", ;
		CursorSource = "Apvendchk", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 150, ;
		Name = "Cursor5", ;
		NoDataOnLoad = .T., ;
		Top = 140, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor6' AS cursor WITH ;
		Alias = "appurchh", ;
		CursorSource = "appurchh", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 290, ;
		Name = "Cursor6", ;
		Top = 140, ;
		Width = 97
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor7' AS cursor WITH ;
		Alias = "expense", ;
		CursorSource = "expense", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor7", ;
		Top = 260, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor8' AS cursor WITH ;
		Alias = "wells", ;
		CursorSource = "wells", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 150, ;
		Name = "Cursor8", ;
		Top = 260, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor9' AS cursor WITH ;
		Alias = "appurchd", ;
		CursorSource = "appurchd", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 286, ;
		Name = "Cursor9", ;
		Top = 257, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

ENDDEFINE

DEFINE CLASS formapvendstm AS frmrptcriteria OF "..\source\appforms.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="lblCheckAcct" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboCashAcct" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcCheckNo" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtccidchec" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Swlookupbutton1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblDate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblPayee" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblAmount" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcCheckNo2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Swlookupbutton2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtccidchec2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblDate2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblPayee2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblAmount2" UniqueID="" Timestamp="" />

	Caption = "Vendor Check Statements"
	DataSession = 2
	DoCreate = .T.
	Height = 253
	HelpContextID = 231
	Name = "FormApvendstm"
	Visible = .T.
	Width = 438
	Swrptcriteriabuttons1.chkExport.Alignment = 0
	Swrptcriteriabuttons1.chkExport.Name = "chkExport"
	Swrptcriteriabuttons1.cmdclose.Name = "cmdclose"
	Swrptcriteriabuttons1.cmdPreview.Name = "cmdPreview"
	Swrptcriteriabuttons1.cmdPrint.Name = "cmdPrint"
	Swrptcriteriabuttons1.Left = 85
	Swrptcriteriabuttons1.Name = "Swrptcriteriabuttons1"
	Swrptcriteriabuttons1.TabIndex = 12
	Swrptcriteriabuttons1.Top = 167

	ADD OBJECT 'cboCashAcct' AS cbocomboboxcustom WITH ;
		BoundColumn = 2, ;
		ControlSource = "", ;
		Height = 20, ;
		Left = 140, ;
		Margin = 2, ;
		Name = "cboCashAcct", ;
		TabIndex = 1, ;
		Top = 24, ;
		Width = 246
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="combobox" />

	ADD OBJECT 'lblAmount' AS lbllabelcustom WITH ;
		Alignment = 1, ;
		AutoSize = .F., ;
		Caption = " ", ;
		Left = 314, ;
		Name = "lblAmount", ;
		TabIndex = 10, ;
		Top = 108
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblAmount2' AS lbllabelcustom WITH ;
		Alignment = 1, ;
		AutoSize = .F., ;
		Caption = " ", ;
		Left = 314, ;
		Name = "lblAmount2", ;
		TabIndex = 10, ;
		Top = 135
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblCheckAcct' AS lbllabelcustom WITH ;
		Caption = "Checking Account:", ;
		Height = 16, ;
		Left = 33, ;
		Name = "lblCheckAcct", ;
		TabIndex = 2, ;
		Top = 26, ;
		Width = 93
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblDate' AS lbllabelcustom WITH ;
		Caption = " ", ;
		Left = 36, ;
		Name = "lblDate", ;
		TabIndex = 8, ;
		Top = 108
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblDate2' AS lbllabelcustom WITH ;
		Caption = " ", ;
		Left = 36, ;
		Name = "lblDate2", ;
		TabIndex = 8, ;
		Top = 135
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom1' AS lbllabelcustom WITH ;
		Caption = "-", ;
		FontSize = 12, ;
		Left = 259, ;
		Name = "Lbllabelcustom1", ;
		Top = 72
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom2' AS lbllabelcustom WITH ;
		Caption = "Check Number Range:", ;
		Left = 17, ;
		Name = "Lbllabelcustom2", ;
		TabIndex = 7, ;
		Top = 74
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblPayee' AS lbllabelcustom WITH ;
		Caption = "", ;
		Left = 132, ;
		Name = "lblPayee", ;
		TabIndex = 9, ;
		Top = 108, ;
		Width = 2
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblPayee2' AS lbllabelcustom WITH ;
		Caption = "", ;
		Left = 132, ;
		Name = "lblPayee2", ;
		TabIndex = 9, ;
		Top = 135, ;
		Width = 2
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Swlookupbutton1' AS swlookupbutton WITH ;
		Left = 225, ;
		Name = "Swlookupbutton1", ;
		TabIndex = 4, ;
		TabStop = .F., ;
		Top = 72
		*< END OBJECT: ClassLib="..\custom\swcontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'Swlookupbutton2' AS swlookupbutton WITH ;
		Left = 362, ;
		Name = "Swlookupbutton2", ;
		TabIndex = 6, ;
		TabStop = .F., ;
		Top = 72
		*< END OBJECT: ClassLib="..\custom\swcontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'txtcCheckNo' AS txttextboxcustom WITH ;
		Height = 20, ;
		InputMask = "XXXXXXXXXX", ;
		Left = 140, ;
		Margin = 1, ;
		MaxLength = 10, ;
		Name = "txtcCheckNo", ;
		TabIndex = 3, ;
		Top = 72, ;
		Width = 79
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcCheckNo2' AS txttextboxcustom WITH ;
		Height = 20, ;
		InputMask = "XXXXXXXXXX", ;
		Left = 277, ;
		Margin = 1, ;
		MaxLength = 10, ;
		Name = "txtcCheckNo2", ;
		TabIndex = 5, ;
		Top = 72, ;
		Width = 79
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtccidchec' AS txttextboxcustom WITH ;
		Left = 331, ;
		Name = "txtccidchec", ;
		TabIndex = 11, ;
		TabStop = .F., ;
		Top = 175, ;
		Visible = .F.
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtccidchec2' AS txttextboxcustom WITH ;
		Left = 331, ;
		Name = "txtccidchec2", ;
		TabIndex = 13, ;
		TabStop = .F., ;
		Top = 199, ;
		Visible = .F.
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />
	
	PROCEDURE builddata
		LOCAL cidchec, lcCheckNo1, lcCheckNo2
		
		m.cidcheck  = THISFORM.txtccidchec.VALUE
		m.cidcheck2 = THISFORM.txtccidchec2.VALUE
		lcCheckNo1  = PADL(ALLTRIM(THISFORM.txtcCheckNo.VALUE),10,' ')
		lcCheckNo2  = PADL(ALLTRIM(THISFORM.txtcCheckNo2.VALUE),10,' ')
		
		IF EMPTY(m.cidcheck)
		   RETURN .F.
		ENDIF
		
		CREATE CURSOR stub ;
		   (cvendorid      C(10), ;
		   cInvNum        C(20), ;
		   dInvDate       D, ;
		   cVendName      C(40), ;
		   cRefID         C(30), ;
		   cacctno        C(6),  ;
		   cdesc          C(60), ;
		   amount         N(9,2), ;
		   cidchec        C(8),  ;
		   ccheckno       C(10))
		INDEX ON cidchec+cvendorid+cInvNum TAG ID
		
		THISFORM.cTitle1 = 'Vendor Check Statement'
		THISFORM.cTitle2 = ''
		THISFORM.cSortOrder = ''
		
		swselect('vendor')
		SET ORDER TO cvendorid
		
		SELECT checks
		SCAN FOR IIF(m.cidcheck = m.cidcheck2,BETWEEN(cidchec,m.cidcheck,m.cidcheck2),BETWEEN(ccheckno,lcCheckNo1,lcCheckNo2))  &&  Same check chosen, so just match on cidchec; otherwise, scan for the range of check numbers
		
		   SCATTER MEMVAR
		   m.cVendorID = m.cID
		   m.cVendName = m.cPayee
		   m.cwellname = ''
		   m.cdesc     = ''
		   SELECT vendor
		   IF SEEK(m.cID)
		      llStubDetail = lStubDetail
		   ELSE
		      LOOP
		   ENDIF
		   DO CASE
		      CASE m.cSource = 'AP'
		         IF NOT llStubDetail  &&  Regular Stub, no detail
		            SELECT appmtdet
		            SET ORDER TO cInvNum
		            SCAN FOR cidchec = m.cidchec
		               m.ndisctot = ndisctot
		               m.namtpaid = namtpaid
		               m.cInvNum  = cInvNum
		               m.cBatch   = cBillToken
		               m.ninvtot  = 0
		               m.dInvDate = {}
		               m.crefid = ' '
		               m.cNotes = ''
		               SELECT appurchh
		               SET ORDER TO cBatch
		               IF SEEK(m.cBatch)
		                  m.ninvtot = ninvtot
		                  m.dInvDate = dInvDate
		                  m.crefid = creference
		                  IF EMPTY(m.crefid)  &&  If no ref for the bill header, check to see if there's just a single bill detail that we can use
		                     SELECT appurchd
		                     COUNT FOR cBatch = appurchh.cBatch TO lnDetail
		                     IF lnDetail = 1  &&  Just a single detail line, so use the description from it
		                        SELECT appurchd
		                        LOCATE FOR cBatch = appurchh.cBatch
		                        m.crefid = appurchd.cItemDesc
		                     ENDIF
		                  ENDIF
		               ENDIF
		               m.cdesc = 'Payment on Invoice: ' + cInvNum
		               m.amount = namtpaid
		               INSERT INTO stub FROM MEMVAR
		            ENDSCAN
		         ELSE  &&  Build the stub from the bill detail lines
		            SELECT appmtdet
		            SET ORDER TO cInvNum
		            SCAN FOR cidchec = m.cidchec
		               m.cBatch = cBillToken
		               SELECT appurchh
		               SET ORDER TO cBatch
		               IF SEEK(m.cBatch)
		                  m.cInvNum = appurchh.cInvNum
		                  m.dInvDate = appurchh.dInvDate
		                  SELECT appurchd  &&  Scan the detail lines for this batch
		                  SCAN FOR cBatch = m.cBatch
		                     m.cdesc = cItemDesc
		                     m.amount = nExtension
		                     m.cWellID = cUnitNo
		                     m.ninvtot = nExtension
		                     SELECT wells  &&  Get well name from wells file
		                     SET ORDER TO cWellID
		                     IF SEEK(m.cWellID)
		                        m.cwellname = cwellname
		                     ELSE
		                        m.cwellname = ''
		                     ENDIF
		                     SELECT appurchd
		                     m.cCatCode = cCatCode
		                     SWSELECT('expcat')  &&  Get expense category name from expcat
		                     SET ORDER TO cCatCode
		                     IF SEEK(m.cCatCode)
		                        m.cCateg = cCateg
		                     ELSE
		                        m.cCateg = ''
		                     ENDIF
		                     SELECT appurchd
		                     m.cacctno = cacctno
		                     SELECT coa  &&  Get account description from coa
		                     SET ORDER TO acctno
		                     IF SEEK(m.cacctno)
		                        m.cAcctDesc = cAcctDesc
		                     ELSE
		                        m.cAcctDesc = ''
		                     ENDIF
		                     INSERT INTO stub FROM MEMVAR
		                  ENDSCAN
		               ENDIF
		            ENDSCAN
		
		         ENDIF
		      CASE m.cSource = 'CD' OR m.cSource = 'CS'
		         IF NOT llStubDetail  &&  Not printing CD detail on the check stub
		            SELECT csdishdr
		            SET ORDER TO cInvNum
		            SCAN FOR cidchec = m.cidchec
		               m.ninvtot    = nCashAmt
		               m.namtpaid   = nCashAmt
		               m.dInvDate   = dDate
		               m.crefid = ' '
		               SELECT csdisdet
		               COUNT FOR cBatch = csdishdr.cBatch TO lnDetail  &&  If only a single detail line for this CD, use the description as the reference here
		               IF lnDetail = 1
		                  SELECT csdisdet
		                  LOCATE FOR cBatch = csdishdr.cBatch
		                  m.crefid = cdesc
		               ENDIF
		               SELECT csdishdr
		               m.cInvNum    = cInvNum
		               m.cdesc = 'Payment on Invoice: ' + cInvNum
		               m.amount = nCashAmt
		               m.cacctno = cCashAcct
		               IF csdishdr.lChkMemo
		                  m.cNotes = csdishdr.mDisbMemo
		               ELSE
		                  m.cNotes = ' '
		               ENDIF
		               INSERT INTO stub FROM MEMVAR
		            ENDSCAN
		         ELSE  &&  Build the stub from the cash disbursement detail lines
		            SELECT csdishdr
		            SCAN FOR cidchec = m.cidchec
		               m.cBatch = cBatch
		               m.cInvNum = cInvNum
		               SELECT csdisdet
		               SCAN FOR cBatch = m.cBatch
		                  m.cdesc = cdesc
		                  m.amount = namount
		                  m.cWellID = cUnitNo
		                  SELECT wells  &&  Get well name from wells file
		                  SET ORDER TO cWellID
		                  IF SEEK(m.cWellID)
		                     m.cwellname = cwellname
		                  ELSE
		                     m.cwellname = ''
		                  ENDIF
		                  SELECT csdisdet
		                  m.cCatCode = cCatCode
		                  SWSELECT('expcat')  &&  Get expense category name from expcat
		                  SET ORDER TO cCatCode
		                  IF SEEK(m.cCatCode)
		                     m.cCateg = cCateg
		                  ELSE
		                     m.cCateg = ''
		                  ENDIF
		                  SELECT csdisdet
		                  m.cacctno = cacctno
		                  SELECT coa  &&  Get account description from coa
		                  SET ORDER TO acctno
		                  IF SEEK(m.cacctno)
		                     m.cAcctDesc = cAcctDesc
		                  ELSE
		                     m.cAcctDesc = ''
		                  ENDIF
		                  INSERT INTO stub FROM MEMVAR
		               ENDSCAN
		            ENDSCAN
		
		         ENDIF
		
		      CASE m.cSource = 'DM'
		         IF USED('tempexp1')
		            USE IN tempexp1
		         ENDIF
		
		         SELECT cWellID, cExpClass, cownerid, cRefID, dExpDate, SUM(namount) AS amount ;
		            FROM expense WHERE cpaidbyck = m.cidchec  ;
		            INTO CURSOR temp ;
		            ORDER BY cWellID,cExpClass,cRefID ;
		            GROUP BY cWellID,cExpClass,cRefID
		
		         USE DBF('temp') AGAIN IN 0 ALIAS tempexp1  &&  Net down the amount being paid to eliminate Dummy Owners
		         SELECT tempexp1
		         SCAN
		            IF EMPTY(cownerid)  &&  Don't net down one-man items
		               m.amount = swNetExp(tempexp1.amount,tempexp1.cWellID,.T.,tempexp1.cExpClass,'B')
		               REPLACE tempexp1.amount WITH m.amount
		            ENDIF
		         ENDSCAN
		
		         SELECT cRefID, dExpDate, SUM(amount) AS amount ;
		            FROM tempexp1  ;
		            INTO CURSOR tempexp ;
		            ORDER BY cRefID ;
		            GROUP BY cRefID
		
		         SELECT tempexp
		         SCAN
		            m.ndisctot = 0
		            m.namtpaid = amount
		            m.cInvNum  = cRefID
		            m.cBatch   = ''
		            m.ninvtot  = amount
		            m.dInvDate = dExpDate
		            m.crefid = cMemo
		            m.cdesc = 'Payment on Invoice: ' + cInvNum
		            m.amount = amount
		            m.cNotes = ''            
		            INSERT INTO stub FROM MEMVAR
		         ENDSCAN
		   ENDCASE
		ENDSCAN
		
		SELECT stub
		IF RECC() > 0
		   RETURN .T.
		ELSE
		   RETURN .F.
		ENDIF
		
	ENDPROC

	PROCEDURE Init
		thisform.cReportName = 'apvendstm.frx'
		
		IF NOT m.goApp.lAMVersion
		   thisform.lblCheckAcct.visible = .f.
		   thisform.cbocashacct.visible = .f.
		ENDIF
		   
		RETURN (DODEFAULT())
	ENDPROC

	PROCEDURE cboCashAcct.Init
		LOCAL lnX, laBankAcct[1,1], lnCount
		
		SELECT cAcctno, cAcctDesc FROM coa WHERE lBankAcct = .T. INTO ARRAY laBankAcct ORDER BY cAcctNo
		
		lnCount = _tally
		
		IF lnCount > 0
		   FOR lnX = 1 TO ALEN(laBankAcct,1)
		       this.addlistitem(laBankAcct[lnX,1]+' - '+TRIM(laBankAcct[lnX,2]),lnX,1)
		       this.addlistitem(laBankAcct[lnX,1],lnX,2)
		   ENDFOR
		ENDIF       
		
		this.ListIndex = 1
		DODEFAULT()
	ENDPROC

	PROCEDURE cboCashAcct.Valid
		thisform.txtcCheckNo.value = ''
		thisform.txtccidchec.value = ''
		
		thisform.refresh()
	ENDPROC

	PROCEDURE Swlookupbutton1.Click
		LOCAL lcidchec, lcList, lcCheckNo
		PRIV llOK
		SET SAFETY OFF
		
		IF USED('checktmp')
		   USE IN checktmp
		ENDIF
		IF USED('checktmp1')
		   USE IN checktmp1
		ENDIF
		
		lcCheckNo = PADL(ALLT(THISFORM.txtcCheckNo.VALUE),10,' ')
		lcAcctNo  = LEFT(THISFORM.cboCashAcct.VALUE,6)
		llOK = .T.
		
		CREATE CURSOR checktmp ;
		 (ccheckno     c(10), ;
		  dcheckdate   d, ;
		  cid          c(10), ;
		  cvendname    c(40), ;
		  namount      n(15,2), ;
		  cidchec      c(8))
		INDEX ON ccheckno+cid TAG ccheckno
		INDEX ON cid+ccheckno TAG cid
		INDEX ON cVendName+ccheckno TAG cVendName
		INDEX ON namount TAG namount
		INDEX ON dcheckdate TAG dcheckdate
		  
		SELECT ALLTRIM(ccheckno) AS ccheckno, dcheckdate, cid, cVendName,namount, cidchec FROM checks, vendor  ;
		   WHERE lPrinted = .T. and vendor.cVendorid = checks.cid  ;
		   AND cidtype = 'V'  ;
		   AND IIF(m.goapp.lAMVersion,cAcctNo = lcAcctNo,.t.)  ;
		   INTO CURSOR checktmp1  ;
		
		SELECT checktmp
		APPEND FROM DBF('checktmp1')
		
		lcList = 'ccheckno\Check No,dCheckDate\Check Date,cid\Vendor ID,cVendName\Vendor Name,nAmount\Amount'
		
		DO FORM ..\CUSTOM\picklist WITH 'checktmp', lcList, lcCheckNo, 5, .T., .T.
		
		IF llOK
		
		   *DO FORM apvendstmp WITH LEFT(THISFORM.cboCashAcct.VALUE,6) TO lcidchec
		
		   lcidchec = checktmp.cidchec
		   SELECT checks
		   SET ORDER TO cidchec
		   IF SEEK(lcidchec)
		      THISFORM.txtccidchec.VALUE  = lcidchec
		      THISFORM.txtcCheckNo.VALUE = checktmp.ccheckno
		      thisform.lbldate.caption = dtoc(checktmp.dcheckdate)
		      thisform.lblpayee.caption = LEFT(allt(checktmp.cvendname),30)
		      thisform.lblamount.caption = allt(str(checktmp.namount,12,2))
		      THISFORM.txtcCheckNo.REFRESH()
		   ENDIF
		ENDIF
		
		thisform.setnextcontrol(thisform.txtcCheckNo)
		
	ENDPROC

	PROCEDURE Swlookupbutton2.Click
		LOCAL lcidchec, lcList, lcCheckNo
		PRIV llOK
		SET SAFETY OFF
		
		IF USED('checktmp')
		   USE IN checktmp
		ENDIF
		IF USED('checktmp1')
		   USE IN checktmp1
		ENDIF
		
		lcCheckNo = PADL(ALLTRIM(THISFORM.txtcCheckNo2.VALUE),10,' ')
		lcAcctNo  = LEFT(THISFORM.cboCashAcct.VALUE,6)
		llOK = .T.
		
		SELECT ccheckno AS ccheckno, dcheckdate, cid, cVendName,namount, cidchec FROM checks, vendor  ;
		   WHERE lprinted = .T. and vendor.cVendorid = checks.cid  ;
		   AND cidtype = 'V'  ;
		   AND IIF(m.goapp.lAMVersion,cAcctNo = lcAcctNo,.t.)  ;
		   INTO CURSOR checktmp readwrite ;
		
		SELECT checktmp
		INDEX ON ccheckno+cid TAG ccheckno
		INDEX ON cid+ccheckno TAG cid
		INDEX ON cVendName+ccheckno TAG cVendName
		INDEX ON namount TAG namount
		INDEX ON dcheckdate TAG dcheckdate
		
		lcList = 'ccheckno\Check No,dCheckDate\Check Date,cid\Vendor ID,cVendName\Vendor Name,nAmount\Amount'
		
		DO FORM ..\CUSTOM\picklist WITH 'checktmp', lcList, lcCheckNo, 5, .T., .T.
		
		IF llOK
		
		   *DO FORM apvendstmp WITH LEFT(THISFORM.cboCashAcct.VALUE,6) TO lcidchec
		
		   lcidchec = checktmp.cidchec
		   SELECT checks
		   SET ORDER TO cidchec
		   IF SEEK(lcidchec)
		      THISFORM.txtccidchec2.VALUE  = lcidchec
		      THISFORM.txtcCheckNo2.VALUE = checktmp.ccheckno
		      thisform.lbldate2.caption = dtoc(checktmp.dcheckdate)
		      thisform.lblpayee2.caption = LEFT(allt(checktmp.cvendname),30)
		      thisform.lblamount2.caption = allt(str(checktmp.namount,12,2))
		      THISFORM.txtcCheckNo2.REFRESH()
		   ENDIF
		ENDIF
		
		thisform.setnextcontrol(thisform.txtcCheckNo2)
		
	ENDPROC

	PROCEDURE txtcCheckNo.GotFocus
		ON KEY LABEL F2 _screen.activeform.swlookupbutton1.Click()
	ENDPROC

	PROCEDURE txtcCheckNo.LostFocus
		ON KEY LABEL F2 *
	ENDPROC

	PROCEDURE txtcCheckNo.Valid
		*
		*  Validate the entered check number to see if it exists
		*  in the chosen cash account
		*
		LOCAL lcAcctNo, lcCheckNo
		
		*
		*  IF there's a mousedown action, don't validate
		*  The lookup button is probably being clicked.
		*
		IF MDOWN()
			*   RETURN .T.
		ENDIF
		
		lcAcctNo  = LEFT(THISFORM.cboCashAcct.VALUE,6)
		IF ISDIGIT(LEFT(ALLTRIM(thisform.txtcCheckNo.Value),1))
		   lcCheckNo = PADL(ALLTRIM(THISFORM.txtcCheckNo.VALUE),10,' ')
		ELSE
		   lcCheckNo = thisform.txtcCheckNo.Value 
		ENDIF    
		THIS.VALUE = lcCheckNo
		THIS.REFRESH()
		
		IF NOT EMPTY(lcCheckNo)
			SELECT checks
			LOCATE FOR cidchec == thisform.txtccidchec.value AND IIF(m.goapp.lAMVersion,cacctno = lcAcctNo,.T.)
			IF NOT FOUND()
				WAIT WIND NOWAIT 'This check no was not found in this cash account.'
				THISFORM.lbldate.CAPTION = ' '
				THISFORM.lblpayee.CAPTION = ' '
				THISFORM.lblamount.CAPTION = ' '
				THISFORM.txtccidchec.VALUE = ' '
				RETURN 0
			ELSE
				THISFORM.txtccidchec.VALUE = cidchec
				THISFORM.lbldate.CAPTION = DTOC(checks.dcheckdate)
				THISFORM.lblpayee.CAPTION = LEFT(ALLT(checks.cpayee),30)
				THISFORM.lblamount.CAPTION = TRANSFORM(checks.namount,'999,999,999.99')
				IF EMPTY(THISFORM.txtccheckno2.VALUE)  &&  if the second check # box is empty, fill it in with the same as the first one
					THISFORM.txtccheckno2.VALUE = THIS.VALUE
					THISFORM.txtccidchec2.VALUE = cidchec
					THISFORM.lbldate2.CAPTION = DTOC(checks.dcheckdate)
					THISFORM.lblpayee2.CAPTION = LEFT(ALLT(checks.cpayee),30)
					THISFORM.lblamount2.CAPTION = TRANSFORM(checks.namount,'999,999,999.99')
				ENDIF
			ENDIF
		ELSE
			THISFORM.lbldate.CAPTION = ' '
			THISFORM.lblpayee.CAPTION = ' '
			THISFORM.lblamount.CAPTION = ' '
			THISFORM.txtccidchec.VALUE = ' '
		ENDIF
		
	ENDPROC

	PROCEDURE txtcCheckNo2.GotFocus
		ON KEY LABEL F2 _screen.activeform.swlookupbutton2.Click()
	ENDPROC

	PROCEDURE txtcCheckNo2.LostFocus
		ON KEY LABEL F2 *
	ENDPROC

	PROCEDURE txtcCheckNo2.Valid
		*
		*  Validate the entered check number to see if it exists
		*  in the chosen cash account
		*
		LOCAL lcAcctNo, lcCheckNo
		
		*
		*  IF there's a mousedown action, don't validate
		*  The lookup button is probably being clicked.
		*
		IF MDOWN()
			*  RETURN .T.
		ENDIF
		
		lcAcctNo  = LEFT(THISFORM.cboCashAcct.VALUE,6)
		IF ISDIGIT(LEFT(ALLTRIM(this.Value),1))
		   lcCheckNo = PADL(ALLTRIM(THISFORM.txtcCheckNo2.VALUE),10,' ')
		ELSE
		   lcCheckNo = this.Value
		ENDIF    
		THIS.VALUE = lcCheckNo
		THIS.REFRESH()
		
		IF NOT EMPTY(lcCheckNo)
			SELECT checks
			LOCATE FOR cidchec == thisform.txtccidchec2.value AND IIF(m.goapp.lAMVersion,cacctno = lcAcctNo,.T.)
			IF NOT FOUND()
				WAIT WIND NOWAIT 'This check no was not found in this cash account.'
				THISFORM.lbldate2.CAPTION = ' '
				THISFORM.lblpayee2.CAPTION = ' '
				THISFORM.lblamount2.CAPTION = ' '
				THISFORM.txtccidchec.VALUE = ' '
				RETURN 0
			ELSE
				THISFORM.txtccidchec2.VALUE = cidchec
				THISFORM.lbldate2.CAPTION = DTOC(checks.dcheckdate)
				THISFORM.lblpayee2.CAPTION = LEFT(ALLT(checks.cpayee),30)
				THISFORM.lblamount2.CAPTION = TRANSFORM(checks.namount,'999,999,999.99')
			ENDIF
		ELSE
			THISFORM.lbldate2.CAPTION = ' '
			THISFORM.lblpayee2.CAPTION = ' '
			THISFORM.lblamount2.CAPTION = ' '
			THISFORM.txtccidchec.VALUE = ' '
		ENDIF
		
	ENDPROC

ENDDEFINE
