*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="dmrostub.scx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="2" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Cursor1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor6" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor7" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor8" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor9" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor10" UniqueID="" Timestamp="" />

	AutoOpenTables = .F.
	DataSource = .NULL.
	Height = 200
	Left = 4
	Name = "Dataenvironment"
	Top = 433
	Width = 911

	ADD OBJECT 'Cursor1' AS cursor WITH ;
		Alias = "groups", ;
		CursorSource = "groups", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor1", ;
		Top = 20, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor10' AS cursor WITH ;
		Alias = "expcat", ;
		CursorSource = "expcat", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 430, ;
		Name = "Cursor10", ;
		Top = 140, ;
		Width = 91
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor2' AS cursor WITH ;
		Alias = "wells", ;
		CursorSource = "wells", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 118, ;
		Name = "Cursor2", ;
		Top = 23, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor3' AS cursor WITH ;
		Alias = "options", ;
		CursorSource = "options", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 225, ;
		Name = "Cursor3", ;
		Top = 23, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor4' AS cursor WITH ;
		Alias = "investor", ;
		CursorSource = "investor", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 331, ;
		Name = "Cursor4", ;
		Top = 22, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor5' AS cursor WITH ;
		Alias = "checks", ;
		CursorSource = "checks", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 435, ;
		Name = "Cursor5", ;
		Top = 22, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor6' AS cursor WITH ;
		Alias = "income", ;
		CursorSource = "income", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 538, ;
		Name = "Cursor6", ;
		Top = 22, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor7' AS cursor WITH ;
		Alias = "wellhist", ;
		CursorSource = "wellhist", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 640, ;
		Name = "Cursor7", ;
		Top = 22, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor8' AS cursor WITH ;
		Alias = "susaudit", ;
		CursorSource = "susaudit", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 742, ;
		Name = "Cursor8", ;
		Top = 22, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor9' AS cursor WITH ;
		Alias = "sysctl", ;
		CursorSource = "sysctl", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 290, ;
		Name = "Cursor9", ;
		Top = 140, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

ENDDEFINE

DEFINE CLASS formdmrostub AS frmrptcriteria OF "..\source\appforms.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="chkSummary" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkEnhanced" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkEmail" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Swrptlook1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Runcombo1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblEndID" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkSelected" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblSelected" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblBegID" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: createpdf		&& Creates a PDF of the stub
		*p: loldversion
	*</DefinedPropArrayMethod>

	calias = 
	Caption = "Owner Stub Statement"
	DataSession = 2
	DoCreate = .T.
	Height = 506
	HelpContextID = 218
	loldversion = .F.
	Name = "FormDmrostub"
	Width = 502
	Swrptcriteriabuttons1.chkExport.Alignment = 0
	Swrptcriteriabuttons1.chkExport.Name = "chkExport"
	Swrptcriteriabuttons1.cmdclose.Name = "cmdclose"
	Swrptcriteriabuttons1.cmdPreview.Name = "cmdPreview"
	Swrptcriteriabuttons1.cmdPrint.Name = "cmdPrint"
	Swrptcriteriabuttons1.Left = 118
	Swrptcriteriabuttons1.Name = "Swrptcriteriabuttons1"
	Swrptcriteriabuttons1.TabIndex = 9
	Swrptcriteriabuttons1.Top = 378
	Swrptcriteriabuttons1.ZOrderSet = 1

	ADD OBJECT 'chkEmail' AS chkcheckboxcustom WITH ;
		Alignment = 4, ;
		Caption = "Email Statements to Owners", ;
		Height = 16, ;
		Left = 155, ;
		Name = "chkEmail", ;
		TabIndex = 8, ;
		Top = 326, ;
		Value = .F., ;
		Visible = .T., ;
		Width = 154, ;
		WordWrap = .T., ;
		ZOrderSet = 3
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkEnhanced' AS chkcheckboxcustom WITH ;
		Alignment = 4, ;
		Caption = "Print Enhanced Stub", ;
		Height = 16, ;
		Left = 155, ;
		Name = "chkEnhanced", ;
		TabIndex = 7, ;
		Top = 290, ;
		Value = .F., ;
		Visible = .T., ;
		Width = 115, ;
		WordWrap = .T., ;
		ZOrderSet = 3
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkSelected' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Choose Selected Owners", ;
		Left = 155, ;
		Name = "chkSelected", ;
		TabIndex = 7, ;
		Top = 90, ;
		Value = .F.
		*< END OBJECT: ClassLib="..\..\wellprofits\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkSummary' AS chkcheckboxcustom WITH ;
		Alignment = 4, ;
		Caption = "Only Print For Owners Marked To Get Summary Statements", ;
		Height = 30, ;
		Left = 155, ;
		Name = "chkSummary", ;
		TabIndex = 6, ;
		Top = 242, ;
		Value = .F., ;
		Width = 180, ;
		WordWrap = .T., ;
		ZOrderSet = 3
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'lblBegID' AS lbllabelcustom WITH ;
		BackStyle = 0, ;
		Caption = "First Owner:", ;
		Height = 16, ;
		Left = 79, ;
		Name = "lblBegID", ;
		TabIndex = 3, ;
		Top = 118, ;
		Width = 63, ;
		ZOrderSet = 10
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblEndID' AS lbllabelcustom WITH ;
		BackStyle = 0, ;
		Caption = "Last Owner:", ;
		Height = 16, ;
		Left = 79, ;
		Name = "lblEndID", ;
		TabIndex = 4, ;
		Top = 169, ;
		Width = 63, ;
		ZOrderSet = 8
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom1' AS lbllabelcustom WITH ;
		Caption = "Run No", ;
		Left = 85, ;
		Name = "Lbllabelcustom1", ;
		TabIndex = 5, ;
		Top = 47
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblSelected' AS lbllabelcustom WITH ;
		Caption = "All Owners Selected", ;
		ForeColor = 0,0,255, ;
		Left = 173, ;
		Name = "lblSelected", ;
		TabIndex = 32, ;
		Top = 148, ;
		Visible = .F.
		*< END OBJECT: ClassLib="..\..\wellprofits\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Runcombo1' AS runcombo WITH ;
		cshowwhat = R, ;
		Height = 20, ;
		Left = 134, ;
		lshownew = .F., ;
		Name = "Runcombo1", ;
		TabIndex = 1, ;
		Top = 45, ;
		Width = 264
		*< END OBJECT: ClassLib="..\custom\swcontrol.vcx" BaseClass="combobox" />

	ADD OBJECT 'Swrptlook1' AS swrptlook WITH ;
		Left = 155, ;
		Name = "Swrptlook1", ;
		TabIndex = 2, ;
		Top = 117, ;
		ZOrderSet = 3, ;
		Swlookupbutton1.Name = "Swlookupbutton1", ;
		Swlookupbutton2.Name = "Swlookupbutton2", ;
		txtBegID.clistexpression = investor.cownerid, ;
		txtBegID.clistworkarea = investor, ;
		txtBegID.Name = "txtBegID", ;
		TxtBegName.Name = "TxtBegName", ;
		txtEndID.clistexpression = investor.cownerid, ;
		txtEndID.clistworkarea = investor, ;
		txtEndID.Name = "txtEndID", ;
		TxtEndName.Name = "TxtEndName"
		*< END OBJECT: ClassLib="..\custom\swcontrol.vcx" BaseClass="container" />
	
	PROCEDURE builddata
		LOCAL tcYear, tcPeriod, tcGroup, tcOwner1, tcOwner1Name, tcOwner2, tcOwner2Name, oOwner, oDist, lcVersion
		PRIV lnCount, lnMaxLines, lcidChec, lnMax, lnProcess, llDistProc
		
		TRY
		   tcYear       = THISFORM.runcombo1.LISTITEM[thisform.runcombo1.listitemid, 2]
		   tnRunNo      = INT(VAL(THISFORM.runcombo1.LISTITEM[thisform.runcombo1.listitemid, 3]))
		   tcGroup      = THISFORM.runcombo1.LISTITEM[thisform.runcombo1.listitemid, 4]
		   tcDMBatch    = THISFORM.runcombo1.LISTITEM[thisform.runcombo1.listitemid, 5]
		   tcOwner1     = THISFORM.swrptlook1.txtBegID.VALUE
		   tcOwner1Name = ALLTRIM(THISFORM.swrptlook1.txtBegName.VALUE)
		   tcOwner2     = THISFORM.swrptlook1.txtEndID.VALUE
		   tcOwner2Name = ALLTRIM(THISFORM.swrptlook1.txtEndName.VALUE)
		   lcVersion    = ' '
		   llSelected = THISFORM.chkselected.VALUE
		
		   IF NOT llSelected
		      SELECT cownerid AS cid FROM investor ;
		         INTO CURSOR SELECTED ;
		         WHERE BETWEEN(cownerid,tcOwner1,tcOwner2) ;
		         ORDER BY cid
		   ENDIF 
		
		   * Check to see what version the run was closed under
		   swselect('sysctl')
		   LOCATE FOR nrunno == tnRunNo AND cRunYear == tcYear
		   IF FOUND()
		      lcVersion = cVersion
		   ENDIF
		
		   CREATE CURSOR stub ;
		      (cid             C(10), ;
		      cidtype         C(1), ;
		      cpayee          C(60), ;
		      cprogcode       C(10), ;
		      ccheckno        C(10), ;
		      cidchec        C(8), ;
		      cwellid         C(10), ;
		      cwellname       C(30), ;
		      nincome         N(9, 2), ;
		      nbbl           N(12, 2), ;
		      cIncType       C(1), ;
		      nmcf           N(12, 2), ;
		      noth           N(12, 2), ;
		      nbblprice      N(12, 6), ;
		      nmcfprice      N(12, 6), ;
		      noilrev        N(12, 2), ;
		      ngasrev        N(12, 2), ;
		      nothrev        N(12, 2), ;
		      cIntType       C(1), ;
		      cDesc          C(60), ;
		      cinvnum        C(15), ;
		      dinvdate       D, ;
		      nworkint        N(11, 7), ;
		      dcheckdate     D, ;
		      ninvtot        N(12, 2), ;
		      namtpaid       N(12, 2), ;
		      ndisctot       N(12, 2), ;
		      namount         N(12, 2), ;
		      dproddate      D, ;
		      nexpense        N(9, 2), ;
		      ntaxes          N(9, 2), ;
		      nnetcheck       N(9, 2), ;
		      creference     C(20), ;
		      nOTHER          N(9, 2), ;
		      cprodprd       C(5), ;
		      nunits          N(12, 2), ;
		      nprice          N(12, 2), ;
		      ntotalinc       N(12, 2), ;
		      ntax1           N(12, 2), ;
		      ntax2           N(12, 2), ;
		      ntax3           N(12, 2), ;
		      ntax4           N(12, 2), ;
		      nexpcl0        N(12, 2), ;
		      nexpcl1        N(12, 2), ;
		      nexpcl2        N(12, 2), ;
		      nexpcl3        N(12, 2), ;
		      nexpcl4        N(12, 2), ;
		      nexpcl5        N(12, 2), ;
		      nrevtax1        N(11, 7), ;
		      nrevtax2        N(11, 7), ;
		      nrevtax3        N(11, 7), ;
		      nrevtax4        N(11, 7), ;
		      ngastax1        N(11, 7), ;
		      ngastax2        N(11, 7), ;
		      ngastax3        N(11, 7), ;
		      ngastax4        N(11, 7), ;
		      ntaxwith		 N(11, 7), ;	
		      nnetval        N(12, 2), ;
		      ninterest      N(11, 7), ;
		      nowngross      N(12, 2), ;
		      cGROUP          C(2))
		   INDEX ON cid + cGROUP + cprogcode TAG cid
		   INDEX ON cidchec TAG cidchec
		
		   *
		   *  Setup Global Options
		   *
		   swselect('options')
		   GO TOP
		   glAcctDesc = lacctdesc
		   glStmComp  = lstmcomp
		   glStminv   = lstminv
		   glDirInv   = ldirinv
		   glZeroStmt = lzerostmt
		   glDefStmt  = ldefstmt
		   glMinStmt  = lminstmt
		   gnMinCheck = nmincheck
		   gcCheckNo  = ccheckno
		   glExpDate  = lExpDate
		   glSkipPerf = lSkipPerf
		   gnStubLine = nStubLine
		   llTwoLines = lTwoLines
		
		   llDistProc = .F.
		
		   IF FILE('nostubexp.dat')
		      llNoExpense = .T.
		   ELSE
		      llNoExpense = .F.
		   ENDIF
		
		   swselect('groups')
		   SET ORDER TO cGROUP
		   IF SEEK(tcGroup)
		      glNetSusp = lNetDef
		   ELSE
		      glNetSusp = .T.
		   ENDIF
		
		   SELE cid AS cownerid FROM checks WHERE cBatch = tcDMBatch INTO CURSOR tempchks ORDER BY cid
		
		   * If the version is empty we assume it was
		   * closed under the old version before we
		   * started storing the version #. If so,
		   * use the old ownerstmt class.
		   IF EMPTY(lcVersion) AND tnRunNo <> 0
		      oDist = CREATEOBJECT('olddistproc', tcOwner1, tcOwner2, ;
		         '01', ;
		         tcYear, ;
		         tcGroup, 'O', DATE(), .F., tnRunNo)
		      THISFORM.lOldversion = .T.
		   ELSE
		      oDist = CREATEOBJECT('distproc', tcOwner1, tcOwner2, ;
		         '01', ;
		         tcYear, ;
		         tcGroup, 'O', DATE(), .F., tnRunNo)
		   ENDIF
		
		   *
		   *  Call distproc to create the (invtmp) and (wellwork) cursors
		   *
		   oDist.MAIN()
		
		   SET PROCEDURE TO custom\swowner.prg additive
		   oOwner = CREATEOBJECT('swowner')
		   oOwner.OwnerStub(.T., tcYear, tnRunNo, tcOwner1, tcOwner2, THISFORM.chkSummary.VALUE, llSelected)
		   RELEASE oOwner
		   RELEASE oDist
		
		   IF THISFORM.chkenhanced.VALUE AND FILE(m.goapp.cRptsFolder + 'dmrostubtx.frx')
		      THISFORM.cReportName = m.goapp.cRptsFolder + 'dmrostubtx.frx'
		   ELSE
		      THISFORM.cReportName = m.goapp.cRptsFolder + 'dmrostub.frx'
		   ENDIF
		   
		   *
		   *  Set filter for stub report
		   *
		   SELECT stub
		   COUNT FOR BETWEEN(cid, tcOwner1, tcOwner2) TO lnCount
		   IF lnCount > 0
		      llReturn = .T.
		   ELSE
		      llReturn = .F.
		   ENDIF
		   
		   llReturn = DecimalInts('stub')
		
		CATCH TO loError
		   llReturn = .F.
		   DO errorlog WITH 'BuildData', loError.LINENO, 'Owner Stub Rpt', loError.ERRORNO, loError.MESSAGE, '', loError
		   MESSAGEBOX('Unable to process the report at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		      'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		RETURN llReturn
		
		
	ENDPROC

	PROCEDURE createpdf		&& Creates a PDF of the stub
		LPARAMETERS lcOutputFile
		PRIV lcTitle1, lcTitle2, lcSortOrder, lcSelect
		LOCAL lcQuery, lcPath, lcOutputFile, lcOutputType, llResult, oXFRX, llSilent
		LOCAL lcSelect, lcSortOrder, lcTitle1, lcTitle2, llRETURN, llShowFile, loError
		*:Global cGrpName, cProcessor, cProducer, glGrpName, pState, pZip, paddr1, paddr2, paddr3, pcity
		*:Global pcontact, pphone, ptax
		lcTitle1     = THISFORM.cTitle1
		lcTitle2     = THISFORM.cTitle2
		lcSortOrder  = THISFORM.cSortOrder
		lcSelect     = ''
		llShowFile   = .F.
		lcOutputType = UPPER(JUSTEXT(lcOutputFile))
		llResult     = .T.
		llSilent     = .T.
		
		TRY
		   IF NOT EMPTY(lcOutputFile)
		
		* Check on the existence of the application object
		* if it doesn't exist, we're running in development
		* mode and need to initialize the company address info.
		      IF TYPE('m.goApp') = 'O'
		         m.cProducer = m.goApp.ccompanyname
		         m.paddr1    = m.goApp.cAddress1
		         m.paddr2    = m.goApp.cAddress2
		         m.paddr3    = m.goApp.cAddress3
		         m.pcontact  = m.goApp.cContact
		         m.pphone    = m.goApp.cPhoneNo
		      ELSE
		         m.cProducer = 'SherWare, Inc.'
		         m.paddr1    = 'PO Box 223'
		         m.paddr2    = 'Wooster, OH  44691'
		         m.paddr3    = ''
		         m.ptax      = '99-9999999'
		         m.pcontact  = 'Phil Sherwood'
		         m.pphone    = '3302623115'
		         m.pcity     = 'Wooster'
		         m.pState    = 'OH'
		         m.pZip      = '44691'
		      ENDIF
		
		      IF TYPE('m.goApp') = 'O'
		         m.cProducer = m.goApp.ccompanyname
		         IF m.goApp.lDemo
		            m.cProducer = 'Demo Version of Software'
		            m.cGrpName  = m.cProducer
		         ENDIF
		      ELSE
		         m.cProducer = 'Development Company, Inc.'
		      ENDIF
		
		      IF TYPE('m.cProcessor') <> 'C'
		         m.cProcessor = ''
		      ENDIF
		
		      glGrpName = .F.
		
		      oXFRX = CREATEOBJECT('swXFRX')
		
		      IF oXFRX.SetupXFRX()
		
		* Select the passed cursor before running the report
		         TRY
		            SELECT (THISFORM.cAlias)
		         CATCH
		         ENDTRY
		
		
		         oXFRX.cOutputFile = lcOutputFile
		         oXFRX.cOutputType = lcOutputType
		         oXFRX.cTitle1     = THIS.cTitle1
		         oXFRX.cTitle2     = THIS.cTitle2
		         oXFRX.cReportName = THIS.cReportName
		
		         llResult = oXFRX.CallXFRX(llSilent)
		
		         RELEASE oXFRX
		         oXFRX = NULL
		      ELSE
		         llResult = .F.
		      ENDIF
		   ELSE
		      llResult = .F.
		   ENDIF
		CATCH TO loError
		   llRETURN = .F.
		   DO errorlog WITH 'CreatePDF', loError.LINENO, 'Owner Stub Rpt', loError.ERRORNO, loError.MESSAGE, '', loError
		   MESSAGEBOX('Unable to process the report at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		        'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		
		ENDTRY
		
		RETURN (llResult)
		
		
		 
	ENDPROC

	PROCEDURE Init
		DODEFAULT()
		
		SELECT investor
		SET ORDER TO cownerid
		GO TOP
		
		THISFORM.swrptlook1.txtBegName.VALUE = cSortField
		THISFORM.swrptlook1.txtBegID.VALUE = cownerid
		GO BOTTOM
		
		THISFORM.swrptlook1.txtEndName.VALUE = cSortField
		THISFORM.swrptlook1.txtEndID.VALUE = cownerid
		
		
	ENDPROC

	PROCEDURE report
		LPARAMETERS cbutton
		LOCAL lcAlias, oPDF, lcTemp, lcYear, lnRunNo, oProgress, lnTally
		LOCAL lcAcctDate, lcBadEmail, lcEmail, lcFile, lcOutputFile, lcSelect, lcSortOrder, lcTitle1
		LOCAL lcTitle2, llReturn, llStmComp, loerror
		LOCAL cGrpName, cProcessor, cProducer, glAcctDesc, glChgPrice, glExpSum, glHideComp, glRefID
		LOCAL glShowRoy, gnCompress, gnGather, gnMinCheck, oSendMail, tcYear, tnRunNo
		PRIVATE pcID, glgrpname, glstminv, gldirinv
		
		TRY
		
		    * Set the temp location for the PDF files
		    lcTemp = ADDBS(ALLTRIM(m.goapp.cCommonFolder)) + 'TEMP\'
		    IF NOT DIRECTORY(lcTemp)
		        MD (lcTemp)
		    ENDIF
		
		    lcAlias = ALIAS()
		
		    tcYear  = THISFORM.runcombo1.LISTITEM[thisform.runcombo1.listitemid, 2]
		    tnRunNo = INT(VAL(THISFORM.runcombo1.LISTITEM[thisform.runcombo1.listitemid, 3]))
		    
		    * Check to see if we have the most current stub formats
		   llGetFormats  = .F.
		   llFoundFormat = .F.
		   lnFiles       = ADIR(laRpts, m.goapp.crptsfolder + 'stub-201803.txt')
		   IF lnFiles = 0
		      llGetFormats = .T.
		   ELSE
		      llFoundFormat = .T.
		   ENDIF
		
		   IF llGetFormats OR NOT llFoundFormat
		      WAIT WINDOW NOWAIT 'Copying in new report formats...'
		      llFormatError = .F.
		      TRY
		         GetStubStmts()
		         lcString = 'Owner stub statements downloaded ' + DTOC(DATE())
		         STRTOFILE(lcString,m.goapp.cRptsFolder + 'stub-201803.txt')
		      CATCH
		         llFormatError = .T.
		      ENDTRY
		   ENDIF
		
		    SELECT options
		    GO TOP
		    glgrpname  = lGrpName
		    glstminv   = lStmInv
		    gnMinCheck = nMinCheck
		    glHideComp = lHideComp
		    glShowRoy  = lShowRoy
		    glAcctDesc = lAcctDesc
		    glRefID    = lRefID
		    glExpSum   = lExpSum
		    glChgPrice = lChgPrice
		    gnGather   = nGather
		    gnCompress = nCompress
		    gldirinv   = lDirInv
		    llStmComp  = lstmcomp
		
		    SELECT options
		    GO TOP
		    glgrpname = lGrpName
		    IF glgrpname
		        SELECT groups
		        SET ORDER TO cGroup
		        IF NOT 'NEW RUN' $ UPPER(THISFORM.runcombo1.VALUE)
		            IF SEEK(THISFORM.runcombo1.LISTITEM(THISFORM.runcombo1.LISTITEMID, 4))
		                m.cGrpName = cDesc
		            ELSE
		                m.cGrpName = ''
		            ENDIF
		        ELSE
		            IF SEEK(LEFT(THISFORM.swgroup1.VALUE, 2))
		                m.cGrpName = cDesc
		            ELSE
		                IF LEFT(THISFORM.swgroup1.VALUE, 2) = '**'
		                    m.cGrpName = 'All Companies'
		                ELSE
		                    m.cGrpName = ''
		                ENDIF
		            ENDIF
		        ENDIF
		    ELSE
		        m.cGrpName = ''
		    ENDIF
		
		    SELECT (lcAlias)
		
		    LOCAL lnResult, lcAlias
		    PRIV lcTitle1, lcTitle2, lcSortOrder, lcSelect, glgrpname, m.cGrpName
		
		    *
		    *  Check to see if the requirements for calling this method are met.
		    *
		    ASSERT TYPE('this.cReportName') = 'C' MESSAGE 'You must set the cReportName property to use this class'
		    ASSERT INLIST(m.cbutton, 'F', 'P', 'S')  MESSAGE 'The parm to the report method must be either "F" or "P"'
		
		    IF TYPE('this.ctitle1') # 'C'
		        THIS.ctitle1 = ''
		    ENDIF
		    IF TYPE('this.ctitle2') # 'C'
		        THIS.ctitle2 = ''
		    ENDIF
		
		    lcAlias = ALIAS()
		
		    *
		    *  Make the cProducer variable a default value for development purposes
		    *
		    IF TYPE('m.goApp') = 'O'
		        m.cProducer  = m.goapp.cCompanyName
		        m.cProcessor = m.goapp.cAgentName
		    ELSE
		        m.cProducer  = 'Development Company, Inc.'
		        m.cProcessor = ''
		    ENDIF
		
		    IF TYPE('m.cProcessor') # 'C'
		        m.cProcessor = ''
		    ENDIF
		
		    lcTitle1    = THISFORM.ctitle1
		    lcTitle2    = THISFORM.ctitle2
		    lcSortOrder = THISFORM.cSortOrder
		    lcSelect    = THISFORM.cSelectCriteria
		
		    *
		    *  Set defaults for titles and criteria if not in correct format
		    *
		    IF TYPE('lcTitle1') # 'C'
		        lcTitle1 = ''
		    ENDIF
		    IF TYPE('lcTitle2') # 'C'
		        lcTitle2 = ''
		    ENDIF
		    IF TYPE('lcSortOrder') # 'C'
		        lcSortOrder = ''
		    ENDIF
		    IF TYPE('lcSelect') # 'C'
		        lcSelect = ''
		    ENDIF
		
		    SELECT (lcAlias)
		
		    lcYear     = THISFORM.runcombo1.LISTITEM[thisform.runcombo1.listitemid, 2]
		    lnRunNo    = INT(VAL(THISFORM.runcombo1.LISTITEM[thisform.runcombo1.listitemid, 3]))
		    lcAcctDate = THISFORM.runcombo1.LISTITEM[thisform.runcombo1.listitemid, 7]
		
		    IF NOT FILE(THISFORM.cReportName)
		        MESSAGEBOX('The report format: ' + ALLTRIM(THISFORM.cReportName) + ' was not found. Cannot continue...', 16, 'Missing Report Format')
		        llReturn = .F.
		        EXIT
		    ENDIF
		
		    *
		    *  Process the report format removing tag and tag1 fields
		    *
		    TRY
		        USE (THIS.cReportName) IN 0 ALIAS rptfmt
		        SELECT rptfmt
		        LOCATE FOR objtype = 1
		        IF FOUND()
		            REPLACE TAG WITH '', tag2 WITH ''
		        ENDIF
		        USE
		    CATCH
		    ENDTRY
		
		    SELECT (lcAlias)
		
		    *
		    *  Send the report to the proper location based upon the button pressed.
		    *
		    DO CASE
		        CASE m.cbutton = 'P'
		            SET REPORTBEHAVIOR 80
		            REPORT FORM (THIS.cReportName) TO PRINTER PROMPT NOCONSOLE NOEJECT
		        CASE m.cbutton = 'S'
		            IF 'Export' $ THISFORM.swrptcriteriabuttons1.cmdPreview.CAPTION
		                DO FORM exportcsv WITH THISFORM.CAPTION, THISFORM.cReportName, lcAlias, lcTitle1, lcTitle2, lcSortOrder, lcSelect
		            ELSE
		                IF THISFORM.chkEmail.VALUE
		                    SET REPORTBEHAVIOR 80
		                    lcBadEmail      = ''
		                    THISFORM.calias = 'stub'
		                    SELE cid, investor.cemail, investor.cownname ;
		                        FROM stub ;
		                        JOIN investor ON stub.cid = investor.cownerid ;
		                        WHERE NOT EMPTY(investor.cemail) ;
		                        INTO CURSOR temp ;
		                        ORDER BY cid GROUP BY cid
		                    IF _TALLY > 0
		                        oProgress = THISFORM.omessage.progressbarex('Emailing Stub Statements...')
		                        oProgress.SetProgressRange(0, _TALLY)
		                        IF NOT THISFORM.omessage.CONFIRM('Are you sure you want to email the stub statements to ' + TRANSFORM(_TALLY) + ' owners?')
		                            llReturn = .F.
		                            EXIT
		                        ENDIF
		                        lnTally = 1
		                        SELECT temp
		                        SCAN
		                            pcID    = cid
		                            lcEmail = ALLTRIM(cemail)
		                            SELECT stub
		                            SET FILT TO cid = pcID
		                            IF NOT '@' $ lcEmail
		                                lcBadEmail = lcBadEmail + temp.cid + ' - ' + temp.cownname + CHR(10)
		                                LOOP
		                            ENDIF
		                            oProgress.setprogressmessage('Owner: ' + temp.cownname)
		                            oProgress.updateprogress(lnTally)
		                            lnTally      = lnTally + 1
		                            lcFile       = 'STUB' + '_' + ALLTRIM(temp.cid) + '_' + lcYear + '_' + PADL(lnRunNo, 3, '0') + ".pdf"
		                            lcFile       = STRTRAN(lcFile, ' ', '_')
		                            lcOutputFile = lcTemp + lcFile
		                            SELECT stub
		                            TRY
		                                llReturn = THIS.CreatePDF(lcOutputFile)
		                            CATCH TO loerror
		                                MESSAGEBOX('There was an error trying to create a PDF file to email. Error info: ' + CHR(10) + ;
		                                      loerror.MESSAGE, 16, 'PDF Printer Error')
		                                SELECT temp
		                                GO BOTT
		                            ENDTRY
		                            IF llReturn
		                                oSendMail = swEmailReport(lcEmail, lcAcctDate + ' Owner Stub Statement', lcOutputFile)
		                                llReturn  = oSendMail.lResult
		                                RELEASE oSendMail
		                            ENDIF
		                        ENDSCAN
		                        oProgress.closeprogress()
		                        IF NOT EMPTY(lcBadEmail)
		                            lcBadEmail = 'The following owners had bad or missing email addresses and no email was sent:' + CHR(10) + CHR(10) + lcBadEmail
		                            MESSAGEBOX(lcBadEmail, 48, 'Bad Email Addresses')
		                        ELSE
		                            IF llReturn
		                                MESSAGEBOX('The owner stub statements were emailed successfully.', 64, 'Email Stub Statements')
		                            ENDIF
		                        ENDIF
		                    ELSE
		                        MESSAGEBOX('There were no owners with valid email addresses found.  Fill in the email address for the ' + ;
		                              'owners in the Owner Information screen and try again', 16, 'Email Statements')
		                    ENDIF
		                    SET REPORTBEHAVIOR 90
		                ELSE
		                    m.goapp.oReport.calias             = lcAlias
		                    m.goapp.oReport.DATASESSIONID      = THISFORM.DATASESSIONID
		                    m.goapp.oReport.ctitle1            = 'Owner Stub Statement'
		                    m.goapp.oReport.ctitle2            = ''
		                    m.goapp.oReport.cProcessor         = ''
		                    m.goapp.oReport.cSortOrder         = ''
		                    m.goapp.oReport.cSelectionCriteria = ''
		                    m.goapp.oReport.cReportName        = THISFORM.cReportName
		                    m.goapp.oReport.CSVFilename        = 'Owner Stub Statement.csv'
		                    m.goapp.oReport.cFriendlyName      = 'Owner Stub Statement'
		                    llReturn                           = m.goapp.oReport.SendReport('S', .F., .F.)
		                ENDIF
		            ENDIF
		    ENDCASE
		
		CATCH TO loerror
		    llReturn = .F.
		    DO errorlog WITH 'Report', loerror.LINENO, 'Owner Stub Rpt', loerror.ERRORNO, loerror.MESSAGE, '', loerror
		    MESSAGEBOX('Unable to process the report at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		          'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		
		
		
	ENDPROC

	PROCEDURE chkEmail.Click
		IF this.Value = .T.
		   IF NOT swIsEmailSetup()
		      MESSAGEBOX('The email preferences are not setup. Reports cannot be emailed at this time.',16,'Email Preferences Missing')
		      this.Value = .f.
		   ELSE    
		      thisform.swrptcriteriabuttons1.cmdPreview.Caption = 'E\<mail'
		   ENDIF    
		ELSE
		   thisform.swrptcriteriabuttons1.cmdPreview.Caption = 'Pre\<view'
		ENDIF 
	ENDPROC

	PROCEDURE chkSelected.Click
		IF this.Value
		   DO FORM commonsource\selected-ids WITH 'OWNER' LINKED 
		   lnCount = RECCOUNT('selected')
		   thisform.lblselected.Caption = TRANSFORM(lnCount) + ' Owners Selected'
		   thisform.lblselected.Visible = .T.
		   thisform.lblbegID.Visible = .F.
		   thisform.lblendID.Visible = .F.
		   thisform.swrptlook1.Visible = .F.
		ELSE
		   thisform.lblselected.Visible = .F.
		   thisform.lblbegID.Visible = .T.
		   thisform.lblendID.Visible = .T.
		   thisform.swrptlook1.Visible = .T.
		ENDIF 
	ENDPROC

	PROCEDURE Runcombo1.Init
		IF DODEFAULT()
		   this.listitemid = 1
		ENDIF   
	ENDPROC

	PROCEDURE Swrptlook1.Swlookupbutton1.Click
		LOCAL lcList
		PRIV llOK
		
		llOK = .F.
		lcList = 'cownerid,csortfield'
		
		DO FORM ..\custom\picklist WITH 'Investor', lcList, thisform.swrptlook1.txtbegid.value, 2
		
		IF llOK
		   thisform.swrptlook1.txtBegId.value = cOwnerID
		   thisform.swrptlook1.txtBegName.value = cSortField
		   thisform.swrptlook1.txtBegId.refresh()
		   thisform.swrptlook1.txtBegName.refresh()
		ENDIF   
		
		thisform.setnextcontrol(thisform.swrptlook1.txtBegId)
		
	ENDPROC

	PROCEDURE Swrptlook1.Swlookupbutton2.Click
		LOCAL lcList
		PRIV llOK
		
		llOK = .F.
		lcList = 'cownerid,csortfield'
		
		DO FORM ..\custom\picklist WITH 'Investor', lcList, thisform.swrptlook1.txtendid.value, 2
		
		IF llOK
		   thisform.swrptlook1.txtEndId.value = cOwnerID
		   thisform.swrptlook1.txtEndName.value = cSortField
		   thisform.swrptlook1.txtEndId.refresh()
		   thisform.swrptlook1.txtEndName.refresh()
		ENDIF   
		
		thisform.setnextcontrol(thisform.swrptlook1.txtEndId)
		
	ENDPROC

ENDDEFINE
