*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="dmrownstmt.scx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
#INCLUDE "..\common\codemine.h"

DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="2" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Cursor1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor7" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor8" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor9" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor10" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor11" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor12" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor13" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor14" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor15" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor16" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor6" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor19" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor20" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor21" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor17" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor18" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor22" UniqueID="" Timestamp="" />

	AutoOpenTables = .F.
	DataSource = .NULL.
	Height = 761
	Left = -1
	Name = "Dataenvironment"
	Top = -2
	Width = 1016

	ADD OBJECT 'Cursor1' AS cursor WITH ;
		Alias = "groups", ;
		CursorSource = "groups", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 11, ;
		Name = "Cursor1", ;
		Top = 7, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor10' AS cursor WITH ;
		Alias = "sevtax", ;
		CursorSource = "sevtax", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor10", ;
		Top = 380, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor11' AS cursor WITH ;
		Alias = "susaudit", ;
		CursorSource = "susaudit", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 150, ;
		Name = "Cursor11", ;
		Top = 380, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor12' AS cursor WITH ;
		Alias = "sysctl", ;
		CursorSource = "sysctl", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 290, ;
		Name = "Cursor12", ;
		Top = 380, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor13' AS cursor WITH ;
		Alias = "vendor", ;
		CursorSource = "vendor", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor13", ;
		Top = 500, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor14' AS cursor WITH ;
		Alias = "wellhist", ;
		CursorSource = "wellhist", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 150, ;
		Name = "Cursor14", ;
		Top = 500, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor15' AS cursor WITH ;
		Alias = "wellinv", ;
		CursorSource = "wellinv", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 290, ;
		Name = "Cursor15", ;
		Top = 500, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor16' AS cursor WITH ;
		Alias = "wells", ;
		CursorSource = "wells", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Filter = "lcompressor = .f.", ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor16", ;
		Top = 620, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor17' AS cursor WITH ;
		Alias = "taxcodes", ;
		CursorSource = "taxcodes", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 424, ;
		Name = "Cursor17", ;
		Top = 128, ;
		Width = 91
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor18' AS cursor WITH ;
		Alias = "glopt", ;
		CursorSource = "glopt", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 428, ;
		Name = "Cursor18", ;
		Top = 505, ;
		Width = 91
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor19' AS cursor WITH ;
		Alias = "appurchd", ;
		CursorSource = "appurchd", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 290, ;
		Name = "Cursor19", ;
		Top = 138, ;
		Width = 91
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor2' AS cursor WITH ;
		Alias = "investor", ;
		CursorSource = "investor", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 149, ;
		Name = "Cursor2", ;
		Top = 20, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor20' AS cursor WITH ;
		Alias = "roundtmp", ;
		CursorSource = "roundtmp", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 427, ;
		Name = "Cursor20", ;
		Top = 253, ;
		Width = 91
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor21' AS cursor WITH ;
		Alias = "revcat", ;
		CursorSource = "revcat", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 150, ;
		Name = "Cursor21", ;
		Top = 622, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor22' AS cursor WITH ;
		Alias = "ownpcts", ;
		CursorSource = "ownpcts", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 414, ;
		Name = "Cursor22", ;
		Top = 9, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor3' AS cursor WITH ;
		Alias = "disbhist", ;
		CursorSource = "disbhist", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 290, ;
		Name = "Cursor3", ;
		Top = 21, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor4' AS cursor WITH ;
		Alias = "expense", ;
		CursorSource = "expense", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor4", ;
		Top = 140, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor5' AS cursor WITH ;
		Alias = "expcat", ;
		CursorSource = "expcat", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 150, ;
		Name = "Cursor5", ;
		Top = 140, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor6' AS cursor WITH ;
		Alias = "options", ;
		BufferModeOverride = 3, ;
		CursorSource = "options", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 429, ;
		Name = "Cursor6", ;
		Top = 379, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor7' AS cursor WITH ;
		Alias = "income", ;
		CursorSource = "income", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor7", ;
		Top = 260, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor8' AS cursor WITH ;
		Alias = "programs", ;
		CursorSource = "programs", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 150, ;
		Name = "Cursor8", ;
		Top = 260, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor9' AS cursor WITH ;
		Alias = "revsrc", ;
		CursorSource = "revsrc", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 291, ;
		Name = "Cursor9", ;
		Top = 259, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

ENDDEFINE

DEFINE CLASS formdmrostmt AS frmrptcriteria OF "..\source\appforms.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Shape1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="shpRectangle" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkSortExpense" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Swrptlook1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="ChkPrintMin" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkYTDITD" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkEmail" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkDetail" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="ChkPrintDef" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkZipCode" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkChecksOnly" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Swgroup1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkFlatRate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="LblEndID" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="LblBegID" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="LblGroup" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkPrintJob" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkCompressed" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkSummarize" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkSubtotal" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Runcombo1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblAcctDate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboOwnerType" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtAcctDate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkIncSummary" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkNoSuspDet" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkDirDeposit" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkSelected" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblSelected" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: backtaxwith		&& Process backup and tax withholding
		*m: buildstmt
		*m: calccompress		&& Process Compression/Gathering Charges
		*m: calcexpense		&& Does expense calculations
		*m: calcincome		&& Does income calculations
		*m: calctaxes		&& Does tax calculations
		*m: createpdf		&& Create the PDF file for the report
		*m: deficits_own		&& Process deficits when netting all wells together for an owner.
		*m: deficits_well		&& Process well deficits when not netting wells together.
		*m: emailstmt
		*m: flatowner		&& Processes revenue for flat owners.
		*m: getformats
		*m: getprevmins		&& Get previous minimums
		*m: getrange		&& Gets the oil and gas period ranges.
		*m: intonhold		&& Process released interest on holds.
		*m: netbalance		&& Print net balance this period.
		*m: netwelltotalnosplit		&& Prints the well net total line if production periods are not split into their own sections.
		*m: netwelltotalsplit		&& Processes the net well total
		*m: ownerstmt
		*m: prevmins		&& Brings in Previous Minimums
		*m: pulltype		&& Remove owner types not being reported.
		*m: rounding		&& Reports rounding
		*m: stmtnotes		&& Brings in any statement notes.
		*p: cdmbatch		&& DM Batch Code
		*p: cgroup
		*p: cowner1
		*p: cowner2
		*p: cownerid		&& Current Owner we're working with
		*p: cperiod
		*p: cprogcode
		*p: creportnamep
		*p: crunyear
		*p: ctypeint
		*p: ctypeinv
		*p: cwell1
		*p: cwell2
		*p: cwellid
		*p: cyear
		*p: dacctdate
		*p: gastax1
		*p: gastax2
		*p: gastax3
		*p: gastax4
		*p: lallminsreleased
		*p: lbelowminimum
		*p: lcanceled
		*p: lclosed
		*p: lcloserun
		*p: lemailonly		&& Only send statements to owners marked to have email statements.
		*p: lexemptroyalty
		*p: lnetwells		&& .T. = net wells together in this group
		*p: loldversion
		*p: lowneronhold
		*p: lownertaxexempt		&& Owner is tax exempt
		*p: lroyaltyowner		&& Owner is a royalty owner
		*p: lsplitperiods
		*p: nbackupwith		&& Backup Withholding
		*p: nbalance
		*p: ncompress
		*p: ngasamount
		*p: ngasrevenue
		*p: ngastax1
		*p: ngastax2
		*p: ngastax3
		*p: ngastax4
		*p: ngather
		*p: noilamount
		*p: noilrevenue
		*p: noiltax1
		*p: noiltax2
		*p: noiltax3
		*p: noiltax4
		*p: notheramount
		*p: nothtax1
		*p: nothtax2
		*p: nothtax3
		*p: nothtax4
		*p: nownertotal
		*p: nrunno
		*p: ntaxwith		&& Tax Withholding
		*p: ntotalbbl
		*p: ntotalmcf
		*p: ntotalother
		*p: ntotinc		&& Total Income Variable
		*p: ntotnet
		*p: nwellnet
		*p: nwelltot
		*p: nworkint
		*p: odist		&& DistProc object
		*p: oiltax1
		*p: oiltax2
		*p: oiltax3
		*p: oiltax4
		*p: oinvtmp		&& Invtmp object
		*p: ooptions
		*p: othtax1
		*p: othtax2
		*p: othtax3
		*p: othtax4
		*p: owellwork		&& Wellwork object
		*p: ownergroup
		*p: oxfrx
	*</DefinedPropArrayMethod>

	Caption = "Owner Distribution Statements"
	cowner2 = 
	cownerid = 		&& Current Owner we're working with
	cperiod = 
	creportname = 
	creportnamep = .F.
	cselectcriteria = 
	csortorder = 
	ctitle2 = 
	ctypeint = 
	ctypeinv = 
	cwell1 = 
	cwell2 = 
	cwellid = 
	cyear = 
	dacctdate = {}
	DataSession = 2
	DoCreate = .T.
	Height = 587
	HelpContextID = 217
	loldversion = .F.
	Name = "FormDmrostmt"
	oxfrx = .NULL.
	Width = 476
	_memberdata = <VFPData>
		<memberdata name="lquiet" display="lQuiet"/>
		<memberdata name="emailstmt" display="EmailStmt"/>
		</VFPData>
	Swrptcriteriabuttons1.chkExport.Alignment = 0
	Swrptcriteriabuttons1.chkExport.Name = "chkExport"
	Swrptcriteriabuttons1.cmdclose.Name = "cmdclose"
	Swrptcriteriabuttons1.cmdPreview.Name = "cmdPreview"
	Swrptcriteriabuttons1.cmdPrint.Name = "cmdPrint"
	Swrptcriteriabuttons1.Left = 108
	Swrptcriteriabuttons1.Name = "Swrptcriteriabuttons1"
	Swrptcriteriabuttons1.TabIndex = 29
	Swrptcriteriabuttons1.Top = 502
	Swrptcriteriabuttons1.ZOrderSet = 2

	ADD OBJECT 'cboOwnerType' AS cbocomboboxcustom WITH ;
		Height = 20, ;
		Left = 162, ;
		Name = "cboOwnerType", ;
		TabIndex = 11, ;
		Top = 235, ;
		Width = 216, ;
		ZOrderSet = 20
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="combobox" />

	ADD OBJECT 'chkChecksOnly' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Include Owners With Checks", ;
		Height = 16, ;
		Left = 22, ;
		lenabled = .T., ;
		Name = "chkChecksOnly", ;
		TabIndex = 13, ;
		Top = 280, ;
		Value = .T., ;
		Width = 158, ;
		ZOrderSet = 9
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkCompressed' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Print Compressed Statements", ;
		Height = 16, ;
		Left = 24, ;
		Name = "chkCompressed", ;
		TabIndex = 25, ;
		Top = 446, ;
		Value = .F., ;
		Width = 160, ;
		ZOrderSet = 8
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkDetail' AS chkcheckboxcustom WITH ;
		Alignment = 4, ;
		Caption = "Only Owners Marked for Detail Stmts", ;
		Height = 16, ;
		Left = 22, ;
		Name = "chkDetail", ;
		TabIndex = 17, ;
		Top = 324, ;
		Value = .F., ;
		Width = 197, ;
		WordWrap = .T., ;
		ZOrderSet = 6
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkDirDeposit' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Include Direct Deposit Owners", ;
		ControlSource = "", ;
		Height = 16, ;
		Left = 239, ;
		Name = "chkDirDeposit", ;
		TabIndex = 18, ;
		Top = 324, ;
		Value = .F., ;
		Width = 165, ;
		ZOrderSet = 24
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkEmail' AS chkcheckboxcustom WITH ;
		Alignment = 4, ;
		Caption = "Email Statements to Owners", ;
		Height = 16, ;
		Left = 24, ;
		Name = "chkEmail", ;
		TabIndex = 23, ;
		Top = 423, ;
		Value = .F., ;
		Visible = .F., ;
		Width = 154, ;
		WordWrap = .T., ;
		ZOrderSet = 5
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkFlatRate' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Include Flat Rate Royalty Owners", ;
		Height = 16, ;
		Left = 239, ;
		Name = "chkFlatRate", ;
		TabIndex = 14, ;
		Top = 280, ;
		Value = .T., ;
		Width = 179, ;
		ZOrderSet = 11
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkIncSummary' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Include Summary Totals", ;
		ControlSource = "", ;
		Height = 16, ;
		Left = 239, ;
		Name = "chkIncSummary", ;
		TabIndex = 19, ;
		Top = 346, ;
		Value = .F., ;
		Width = 132, ;
		ZOrderSet = 24
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkNoSuspDet' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Don't show suspense ", ;
		ControlSource = "", ;
		Height = 16, ;
		Left = 22, ;
		Name = "chkNoSuspDet", ;
		TabIndex = 20, ;
		Top = 346, ;
		Value = .F., ;
		Width = 127, ;
		ZOrderSet = 24
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'ChkPrintDef' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Include Owners in Deficit", ;
		ControlSource = "", ;
		Height = 16, ;
		Left = 239, ;
		Name = "ChkPrintDef", ;
		TabIndex = 16, ;
		Top = 302, ;
		Value = .F., ;
		Width = 139, ;
		ZOrderSet = 7
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkPrintJob' AS chkcheckboxcustom WITH ;
		Alignment = 4, ;
		Caption = "Prepare for Duplex Printing", ;
		Height = 16, ;
		Left = 24, ;
		Name = "chkPrintJob", ;
		TabIndex = 21, ;
		Top = 400, ;
		Value = .F., ;
		Width = 147, ;
		WordWrap = .T., ;
		ZOrderSet = 13
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'ChkPrintMin' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Include Owners in Legal Suspense", ;
		ControlSource = "", ;
		Height = 16, ;
		Left = 22, ;
		Name = "ChkPrintMin", ;
		TabIndex = 15, ;
		Top = 302, ;
		Value = .F., ;
		Width = 187, ;
		ZOrderSet = 3
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkSelected' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Choose Selected Owners", ;
		Left = 165, ;
		Name = "chkSelected", ;
		TabIndex = 7, ;
		Top = 107, ;
		Value = .F.
		*< END OBJECT: ClassLib="..\..\wellprofits\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkSortExpense' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Sort Expenses by Exp Code", ;
		ControlSource = "", ;
		Height = 16, ;
		Left = 239, ;
		Name = "chkSortExpense", ;
		TabIndex = 28, ;
		Top = 469, ;
		Value = .F., ;
		Width = 153, ;
		ZOrderSet = 3
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkSubtotal' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Sub-Total Expenses by Tax Section", ;
		Height = 16, ;
		Left = 239, ;
		Name = "chkSubtotal", ;
		TabIndex = 22, ;
		Top = 400, ;
		Value = .F., ;
		Width = 190, ;
		ZOrderSet = 16
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkSummarize' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Summarize Programs", ;
		ControlSource = "", ;
		Height = 16, ;
		Left = 24, ;
		Name = "chkSummarize", ;
		TabIndex = 27, ;
		Top = 469, ;
		Value = .F., ;
		Width = 120, ;
		ZOrderSet = 3
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkYTDITD' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Print YTD/ITD Totals on Statement", ;
		ControlSource = "", ;
		Height = 16, ;
		Left = 239, ;
		Name = "chkYTDITD", ;
		TabIndex = 26, ;
		Top = 446, ;
		Value = .F., ;
		Width = 179, ;
		ZOrderSet = 3
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkZipCode' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Print by Zip Code", ;
		Height = 16, ;
		Left = 239, ;
		Name = "chkZipCode", ;
		TabIndex = 24, ;
		Top = 423, ;
		Value = .F., ;
		Width = 100, ;
		ZOrderSet = 8
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'Label1' AS label WITH ;
		AutoSize = .T., ;
		Caption = "What To Include", ;
		ForeColor = 0,0,255, ;
		Height = 17, ;
		Left = 17, ;
		Name = "Label1", ;
		TabIndex = 30, ;
		Top = 259, ;
		Width = 90, ;
		ZOrderSet = 23
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Label2' AS label WITH ;
		AutoSize = .T., ;
		Caption = "Other Options", ;
		ForeColor = 0,0,255, ;
		Height = 17, ;
		Left = 17, ;
		Name = "Label2", ;
		TabIndex = 31, ;
		Top = 380, ;
		Width = 78
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'lblAcctDate' AS lbllabelcustom WITH ;
		Caption = "Accounting Date:", ;
		Left = 74, ;
		Name = "lblAcctDate", ;
		TabIndex = 6, ;
		Top = 79, ;
		Visible = .T., ;
		ZOrderSet = 19
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'LblBegID' AS lbllabelcustom WITH ;
		Caption = "First Owner:", ;
		Height = 16, ;
		Left = 74, ;
		Name = "LblBegID", ;
		TabIndex = 9, ;
		Top = 138, ;
		Width = 63, ;
		ZOrderSet = 15
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'LblEndID' AS lbllabelcustom WITH ;
		Caption = "Last Owner:", ;
		Height = 16, ;
		Left = 74, ;
		Name = "LblEndID", ;
		TabIndex = 10, ;
		Top = 189, ;
		Width = 63, ;
		ZOrderSet = 14
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'LblGroup' AS lbllabelcustom WITH ;
		AutoSize = .T., ;
		Caption = "Group:", ;
		Height = 16, ;
		Left = 74, ;
		Name = "LblGroup", ;
		TabIndex = 4, ;
		Top = 46, ;
		Visible = .T., ;
		Width = 35, ;
		ZOrderSet = 12
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom1' AS lbllabelcustom WITH ;
		Caption = "Run No", ;
		Left = 74, ;
		Name = "Lbllabelcustom1", ;
		TabIndex = 2, ;
		Top = 11, ;
		ZOrderSet = 18
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom2' AS lbllabelcustom WITH ;
		Caption = "Owner Types", ;
		Left = 74, ;
		Name = "Lbllabelcustom2", ;
		TabIndex = 12, ;
		Top = 237, ;
		ZOrderSet = 21
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblSelected' AS lbllabelcustom WITH ;
		Caption = "All Owners Selected", ;
		ForeColor = 0,0,255, ;
		Left = 185, ;
		Name = "lblSelected", ;
		TabIndex = 32, ;
		Top = 168, ;
		Visible = .F.
		*< END OBJECT: ClassLib="..\..\wellprofits\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Runcombo1' AS runcombo WITH ;
		cshowwhat = R, ;
		Height = 20, ;
		Left = 121, ;
		Name = "Runcombo1", ;
		TabIndex = 1, ;
		Top = 9, ;
		Width = 257, ;
		ZOrderSet = 17
		*< END OBJECT: ClassLib="..\custom\swcontrol.vcx" BaseClass="combobox" />

	ADD OBJECT 'Shape1' AS shape WITH ;
		Height = 104, ;
		Left = 12, ;
		Name = "Shape1", ;
		Top = 388, ;
		Width = 445, ;
		ZOrderSet = 0
		*< END OBJECT: BaseClass="shape" />

	ADD OBJECT 'shpRectangle' AS shape WITH ;
		Height = 112, ;
		Left = 12, ;
		Name = "shpRectangle", ;
		Top = 266, ;
		Width = 445, ;
		ZOrderSet = 1
		*< END OBJECT: BaseClass="shape" />

	ADD OBJECT 'Swgroup1' AS swgroup WITH ;
		Left = 162, ;
		lexcludeall = .T., ;
		Name = "Swgroup1", ;
		TabIndex = 3, ;
		Top = 44, ;
		Visible = .T., ;
		ZOrderSet = 10
		*< END OBJECT: ClassLib="..\custom\swcontrol.vcx" BaseClass="combobox" />

	ADD OBJECT 'Swrptlook1' AS swrptlook WITH ;
		Left = 162, ;
		Name = "Swrptlook1", ;
		TabIndex = 8, ;
		Top = 135, ;
		ZOrderSet = 4, ;
		Swlookupbutton1.Name = "Swlookupbutton1", ;
		Swlookupbutton2.Name = "Swlookupbutton2", ;
		txtBegID.clistexpression = investor.cownerid, ;
		txtBegID.clistworkarea = investor, ;
		txtBegID.Name = "txtBegID", ;
		TxtBegName.Name = "TxtBegName", ;
		txtEndID.clistexpression = investor.cownerid, ;
		txtEndID.clistworkarea = investor, ;
		txtEndID.Name = "txtEndID", ;
		TxtEndName.Name = "TxtEndName"
		*< END OBJECT: ClassLib="..\custom\swcontrol.vcx" BaseClass="container" />

	ADD OBJECT 'txtAcctDate' AS dpk WITH ;
		ControlSource = "", ;
		Height = 20, ;
		Left = 162, ;
		Name = "txtAcctDate", ;
		TabIndex = 5, ;
		Top = 78, ;
		Visible = .T., ;
		Width = 75, ;
		ZOrderSet = 22
		*< END OBJECT: ClassLib="..\custom\swdate.vcx" BaseClass="textbox" />
	
	PROCEDURE backtaxwith		&& Process backup and tax withholding
	ENDPROC

	PROCEDURE builddata
		RETURN (THIS.ownerstmt())
		
	ENDPROC

	PROCEDURE buildstmt
	ENDPROC

	PROCEDURE calccompress		&& Process Compression/Gathering Charges
	ENDPROC

	PROCEDURE calcexpense		&& Does expense calculations
	ENDPROC

	PROCEDURE calcincome		&& Does income calculations
	ENDPROC

	PROCEDURE calctaxes		&& Does tax calculations
	ENDPROC

	PROCEDURE createpdf		&& Create the PDF file for the report
		LPARAMETERS lcOutputFile
		PRIV lcTitle1, lcTitle2, lcSortOrder, lcSelect
		LOCAL lcQuery, lcPath, lcOutputFile, lcOutputType, llResult, oXFRX, llSilent
		LOCAL lcSelect, lcSortOrder, lcTitle1, lcTitle2, llShowFile, loError
		*:Global cGrpName, cProcessor, cProducer, glGrpName, pState, pZip, paddr1, paddr2, paddr3, pcity
		*:Global pcontact, pphone, ptax
		
		TRY
		   lcTitle1     = THISFORM.cTitle1
		   lcTitle2     = THISFORM.cTitle2
		   lcSortOrder  = THISFORM.cSortOrder
		   lcSelect     = ''
		   llShowFile   = .F.
		   lcOutputType = UPPER(JUSTEXT(lcOutputFile))
		   llResult     = .T.
		   llSilent     = .T.
		
		   IF NOT EMPTY(lcOutputFile)
		
		* Check on the existence of the application object
		* if it doesn't exist, we're running in development
		* mode and need to initialize the company address info.
		      IF TYPE('m.goApp') = 'O'
		         m.cProducer = m.goApp.ccompanyname
		         m.paddr1    = m.goApp.cAddress1
		         m.paddr2    = m.goApp.cAddress2
		         m.paddr3    = m.goApp.cAddress3
		         m.pcontact  = m.goApp.cContact
		         m.pphone    = m.goApp.cPhoneNo
		      ELSE
		         m.cProducer = 'SherWare, Inc.'
		         m.paddr1    = 'PO Box 223'
		         m.paddr2    = 'Wooster, OH  44691'
		         m.paddr3    = ''
		         m.ptax      = '99-9999999'
		         m.pcontact  = 'Phil Sherwood'
		         m.pphone    = '3302623115'
		         m.pcity     = 'Wooster'
		         m.pState    = 'OH'
		         m.pZip      = '44691'
		      ENDIF
		
		      IF TYPE('m.goApp') = 'O'
		         m.cProducer = m.goApp.ccompanyname
		         IF m.goApp.lDemo
		            m.cProducer = 'Demo Version of Software'
		            m.cGrpName  = m.cProducer
		         ENDIF
		      ELSE
		         m.cProducer = 'Development Company, Inc.'
		      ENDIF
		
		      IF TYPE('m.cProcessor') <> 'C'
		         m.cProcessor = ''
		      ENDIF
		
		      glGrpName = .F.
		
		      oXFRX = THISFORM.oXFRX
		
		      IF oXFRX.SetupXFRX()
		
		* Select the passed cursor before running the report
		         TRY
		            SELECT statemnt
		         CATCH
		         ENDTRY
		
		
		         oXFRX.cOutputFile = lcOutputFile
		         oXFRX.cOutputType = lcOutputType
		         oXFRX.cTitle1     = THIS.cTitle1
		         oXFRX.cTitle2     = THIS.cTitle2
		         oXFRX.cReportName = THIS.cReportName
		
		         llResult = oXFRX.CallXFRX(llSilent)
		
		      ELSE
		         llResult = .F.
		      ENDIF
		   ELSE
		      llResult = .F.
		   ENDIF
		
		CATCH TO loError
		   llResult = .F.
		   DO errorlog WITH 'CreatePDF', loError.LINENO, 'Owner Statement', loError.ERRORNO, loError.MESSAGE
		   MESSAGEBOX('Unable to process the report at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		        'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		*   THISFORM.lQuiet = .T.
		ENDTRY
		
		RETURN (llResult)
		
		
		 
	ENDPROC

	PROCEDURE deficits_own		&& Process deficits when netting all wells together for an owner.
	ENDPROC

	PROCEDURE deficits_well		&& Process well deficits when not netting wells together.
	ENDPROC

	PROCEDURE Destroy
		thisform.oXFRX = .NULL.
		DODEFAULT()
		
	ENDPROC

	PROCEDURE emailstmt
	ENDPROC

	PROCEDURE flatowner		&& Processes revenue for flat owners.
	ENDPROC

	PROCEDURE getformats
	ENDPROC

	PROCEDURE getprevmins		&& Get previous minimums
	ENDPROC

	PROCEDURE getrange		&& Gets the oil and gas period ranges.
	ENDPROC

	PROCEDURE Init
		SET SAFETY OFF
		
		DODEFAULT()
		LOCAL llFound
		
		SET CENTURY OFF
		SET MULTILOCKS ON
		
		SELECT investor
		SET ORDER TO cOwnerID
		GO TOP
		
		THISFORM.swrptlook1.txtBegName.VALUE = cSortField
		THISFORM.swrptlook1.txtBegID.VALUE   = cOwnerID
		GO BOTTOM
		THISFORM.swrptlook1.txtEndName.VALUE = cSortField
		THISFORM.swrptlook1.txtEndID.VALUE   = cOwnerID
		
		swselect('options')
		IF options.lstmcomp
		   THISFORM.chkcompressed.VALUE = .T.
		ENDIF
		
		
		IF FILE('nosplit.cfg')
		   THIS.lsplitperiods = .F.
		ELSE
		   THIS.lsplitperiods = .T.
		ENDIF
		
		IF FILE('datafiles\sumprogs.txt')
		   THISFORM.chkSummarize.VALUE = .T.
		ENDIF
		
		IF FILE('datafiles\PrintMin.cfg')
		   THISFORM.chkPrintMin.VALUE = .T.
		ENDIF
		IF FILE('datafiles\PrintDef.cfg')
		   THISFORM.chkprintDef.VALUE = .T.
		ENDIF
		IF FILE('datafiles\totals.itd')
		   THISFORM.chkyTDITD.VALUE = .T.
		ENDIF
		IF FILE('datafiles\expsort.txt')
		   THISFORM.chksortExpense.Value = .T.
		ENDIF
		
		IF m.goapp.lDirDMDep = .T.
		   THISFORM.chkdirDeposit.VISIBLE = .T.
		   IF FILE('datafiles\PrintDD.cfg')
		      THISFORM.chkdirDeposit.VALUE = .T.
		   ENDIF
		ELSE
		   THISFORM.chkdirDeposit.VISIBLE = .F.
		ENDIF
		
		THISFORM.oXFRX = CREATEOBJECT('swXFRX')
		
		SET ESCAPE ON 
	ENDPROC

	PROCEDURE intonhold		&& Process released interest on holds.
	ENDPROC

	PROCEDURE netbalance		&& Print net balance this period.
	ENDPROC

	PROCEDURE netwelltotalnosplit		&& Prints the well net total line if production periods are not split into their own sections.
	ENDPROC

	PROCEDURE netwelltotalsplit		&& Processes the net well total
	ENDPROC

	PROCEDURE ownerstmt
		LOCAL tcOwner1, tcOwner2, tcYear, tcPeriod, tcWellID1, tcWellID2, ownstmt, lcVersion
		LOCAL llReturn, loError
		LOCAL tcDMBatch, tcGroup, tcOwnerType, tdAcctDate, tlDetail, tlFlatRate, tlIncludeChecks
		LOCAL tlNoProd, tlNoSuspDet, tlPrintDef, tlPrintMin, tlZipCode, tnRunNo
		
		PUBLIC llUser_Canceled
		
		TRY
		
		   llUser_Canceled = .F.
		   tcOwner1        = thisform.swrptlook1.txtbegID.Value
		   tcOwner2        = thisform.swrptlook1.txtendID.Value 
		   tcYear          = THISFORM.runcombo1.LISTITEM[thisform.runcombo1.listitemid, 2]
		   tnRunNo         = INT(VAL(THISFORM.runcombo1.LISTITEM[thisform.runcombo1.listitemid, 3]))
		   tcGroup         = THISFORM.runcombo1.LISTITEM[thisform.runcombo1.listitemid, 4]
		   tdAcctDate      = CTOD(THISFORM.runcombo1.LISTITEM[thisform.runcombo1.listitemid, 7])
		   tcDMBatch       = THISFORM.runcombo1.LISTITEM[thisform.runcombo1.listitemid, 5]
		   tlFlatRate      = THISFORM.chkFlatRate.VALUE
		   tlIncludeChecks = THISFORM.chkchecksonly.VALUE
		   tlZipCode       = THISFORM.chkZipCode.VALUE
		   tlDetail        = THISFORM.chkdetail.VALUE
		   tlNoSuspDet     = THISFORM.chknoSuspDet.VALUE
		   tlIncSummary    = THISFORM.chkIncSummary.Value 
		   THISFORM.cgroup = tcGroup
		   lcVersion       = ' '
		   tlSelected      = thisform.chkSelected.value
		
		   IF tnRunNo = 0
		      tdAcctDate = THISFORM.txtAcctDate.VALUE
		      tcGroup    = LEFT(THISFORM.swgroup1.VALUE, 2)
		      tcYear     = ALLT(STR(YEAR(tdAcctDate)))
		   ELSE
		* Check to see what version the run was closed under
		      swselect('sysctl')
		      LOCATE FOR nrunno == tnRunNo AND cRunYear == tcYear AND ctypeclose = 'R'
		      IF FOUND()
		         lcVersion = cVersion
		      ENDIF
		   ENDIF
		
		   swselect('options')
		   GO TOP
		   SCATTER NAME THIS.oOptions
		
		   tlNoProd    = .F.
		   tlPrintMin  = THISFORM.chkprintmin.VALUE
		   tlPrintDef  = THISFORM.chkprintdef.VALUE
		   tcOwnerType = THISFORM.cboownertype.VALUE
		
		* If the version is empty we assume it was
		* closed under the old version before we
		* started storing the version #. If so,
		* use the old ownerstmt class.
		   IF EMPTY(lcVersion)  AND tnRunNo <> 0
		      SET classlib TO custom\swoldstuff.vcx additive
		      ownstmt              = CREATEOBJECT('oldswownerstmt')
		      THISFORM.lOldversion = .T.
		   ELSE
		      SET PROCEDURE TO custom\swowner.prg ADDITIVE 
		      ownstmt                = CREATEOBJECT('swownerstmt')
		      THISFORM.lOldversion   = .F.
		      ownstmt.lIncludeChecks = tlIncludeChecks
		      ownstmt.lEmailOnly     = THISFORM.lEmailOnly
		      ownstmt.lDirDeposit    = THISFORM.chkdirDeposit.VALUE
		      ownstmt.lNoSuspDet     = tlNoSuspDet
		   ENDIF
		
		* Fill in properties needed by the statement process
		   ownstmt.cOwner1    = tcOwner1
		   ownstmt.cOwner2    = tcOwner2
		   ownstmt.cgroup     = tcGroup
		   ownstmt.dAcctDate  = tdAcctDate
		   ownstmt.cDMBatch   = tcDMBatch
		   ownstmt.cRunYear   = tcYear
		   ownstmt.nrunno     = tnRunNo
		   ownstmt.cOwnerType = tcOwnerType
		   ownstmt.lFlatRate  = tlFlatRate
		   ownstmt.lNoProd    = tlNoProd
		   ownstmt.lPrintMin  = tlPrintMin
		   ownstmt.lPrintDef  = tlPrintDef
		   ownstmt.lZipOrder  = tlZipCode
		   ownstmt.lDetail    = tlDetail
		   IF NOT thisform.lOldversion
		      ownstmt.lIncSummary = tlIncSummary
		   ENDIF    
		
		   IF ownstmt.MAIN(tlSelected)
		*
		*  Send data through report
		*
		      SELECT statemnt
		      SET ORDER TO invprog
		      IF RECC() = 0
		         llReturn = .F.
		      ELSE
		         llReturn = .T.
		      ENDIF
		   ELSE
		      llReturn = .F.
		   ENDIF
		
		CATCH TO loError
		   llReturn = .F.
		   DO errorlog WITH 'Ownerstmt', loError.LINENO, 'Owner Statements', loError.ERRORNO, loError.MESSAGE
		   MESSAGEBOX('Unable to process the report at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		        'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		* Reset global cancel flag
		m.goApp.lCanceled = .F.
		
		* If the statements were canceled, don't give the no records found message
		IF NOT llReturn
		   IF NOT EMPTY(lcVersion)
		      IF VARTYPE(ownstmt) = 'O'
		      IF ownstmt.lCanceled
		*         THISFORM.lQuiet = .T.
		      ELSE
		*         THISFORM.lQuiet = .F.
		      ENDIF
		      ENDIF 
		   ENDIF
		ELSE
		*   THISFORM.lQuiet = .F.
		ENDIF
		
		RETURN llReturn
		
		
		
		
	ENDPROC

	PROCEDURE prevmins		&& Brings in Previous Minimums
	ENDPROC

	PROCEDURE pulltype		&& Remove owner types not being reported.
	ENDPROC

	PROCEDURE report
		LPARAMETERS cbutton
		LOCAL lcAlias, oPDF, lcTemp, lcYear, lnRunNo, oProgress, lcErrorMsg, llDuplex, llFoundFormat
		LOCAL lcAcctDate, lcBadEmail, lcEmail, lcFile, lcOutputFile, lcSelect, lcSortOrder, lcTitle1
		LOCAL lcTitle2, llPageCnt, llPrintError, llReturn, llStmComp, lnTally, loError, llGetFormats
		*:Global cGrpName, cProcessor, cProducer, glAcctDesc, glChgPrice, glExpSum, glHideComp, glRefID
		*:Global glShowRoy, gnCompress, gnGather, gnMinCheck, oSendMail, tcYear, tnRunNo
		
		PRIVATE pcOwnerID
		
		TRY
		   IF VARTYPE(glgrpname) # 'U'
		      RELEASE glgrpname
		   ENDIF
		   IF VARTYPE(glstminv) # 'U'
		      RELEASE glstminv
		   ENDIF
		   IF VARTYPE(gldirinv) # 'U'
		      RELEASE gldirinv
		   ENDIF
		   
		   tdAcctDate      = CTOD(THISFORM.runcombo1.LISTITEM[thisform.runcombo1.listitemid, 7])
		
		   PUBLIC glgrpname, glstminv, gldirinv
		
		   llDuplex  = THISFORM.chkprintjob.VALUE
		   llSummary = THISFORM.chkIncSummary.VALUE
		
		   IF THISFORM.chkemail.VALUE
		      IF MESSAGEBOX('Do you want to send statements only to owners marked as "Email Statements Only" in their Owner Information?', 36, 'Email Statements') = 6
		         THISFORM.lEmailOnly = .T.
		      ELSE
		         THISFORM.lEmailOnly = .F.
		      ENDIF
		   ENDIF
		
		   IF NOT FILE('datafiles\nonewformats.txt')
		      * Check to see if we have the most current statement formats
		      GetOwnerStatements()
		      llCustomStmt = .F.
		   ELSE
		      IF NOT FILE(m.goApp.cRptsFolder+'dmrostmt_cust.frx')
		         COPY FILE (m.goApp.cRptsFolder+'dmrostmt1a.frx') TO (m.goApp.cRptsFolder+'dmrostmt_cust.frx')
		         COPY FILE (m.goApp.cRptsFolder+'dmrostmt1a.frt') TO (m.goApp.cRptsFolder+'dmrostmt_cust.frt')
		      ENDIF
		      llCustomStmt = .T.
		   ENDIF
		
		   * Turn off duplex print job if we're just doing a preview
		   IF m.cbutton = 'S' AND ;
		         THISFORM.swrptcriteriabuttons1.cmdPreview.CAPTION # 'Export'
		      llDuplex = .F.
		   ENDIF
		
		   STORE ' ' TO lcErrorMsg
		
		   * Set the temp location for the PDF files
		   lcTemp = ADDBS(FULLPATH(ALLTRIM(m.goApp.cCommonFolder))) + 'TEMP\'
		   IF NOT DIRECTORY(lcTemp)
		      TRY
		         MD (lcTemp)
		      CATCH
		      ENDTRY
		   ENDIF
		
		   lcAlias = ALIAS()
		
		   ON KEY LABEL esc
		
		   IF THIS.lcanceled
		      *        RETURN
		   ENDIF
		
		   tcYear  = THISFORM.runcombo1.LISTITEM[thisform.runcombo1.listitemid, 2]
		   tnRunNo = INT(VAL(THISFORM.runcombo1.LISTITEM[thisform.runcombo1.listitemid, 3]))
		
		   SELECT options
		   GO TOP
		   glgrpname  = lGrpName
		   glstminv   = lStmInv
		   gnMinCheck = nMinCheck
		   glHideComp = lHideComp
		   glShowRoy  = lShowRoy
		   glAcctDesc = lAcctDesc
		   glRefID    = lRefID
		   glExpSum   = lExpSum
		   glChgPrice = lChgPrice
		   gnGather   = nGather
		   gnCompress = nCompress
		   gldirinv   = lDirInv
		   llStmComp  = THISFORM.chkcompressed.VALUE
		   llExpSub   = THISFORM.chksortExpense.VALUE
		   llTaxSub   = THISFORM.chksubtotal.VALUE
		
		   *  Get the suspense processing flag from group definition
		   SELECT groups
		   SET ORDER TO cGroup
		   IF SEEK(THISFORM.cGroup)
		      THIS.lNetWells = lNetDef
		   ELSE
		      THIS.lNetWells = .T.
		   ENDIF
		
		   SELECT statemnt
		   COUNT FOR lWellPage TO llPageCnt
		
		   IF THISFORM.lOldversion
		      IF NOT llStmComp
		         THISFORM.cReportName  = m.goApp.cRptsFolder + 'dmrownstmt1.frx'
		         THISFORM.cReportNameP = m.goApp.cRptsFolder + 'dmrownstmt1.frx'
		      ELSE
		         THISFORM.cReportName  = m.goApp.cRptsFolder + 'dmrownstmt3.frx'
		         THISFORM.cReportNameP = m.goApp.cRptsFolder + 'dmrownstmt3.frx'
		      ENDIF
		   ELSE
		      DO CASE
		         CASE llStmComp AND llDuplex AND NOT llTaxSub AND NOT llExpSub
		            THISFORM.cReportName  = m.goApp.cRptsFolder + IIF(llSummary, 'dmrostmt2ads.frx', 'dmrostmt2ad.frx')
		
		         CASE llStmComp AND llDuplex AND llExpSub AND NOT llTaxSub
		            THISFORM.cReportName  = m.goApp.cRptsFolder + IIF(llSummary, 'dmrostmt2aeds.frx', 'dmrostmt2aed.frx')
		
		         CASE llStmComp AND llDuplex AND llExpSub AND llTaxSub
		            THISFORM.cReportName  = m.goApp.cRptsFolder + IIF(llSummary, 'dmrostmt2beds.frx', 'dmrostmt2bed.frx')
		
		         CASE llStmComp AND llDuplex AND NOT llExpSub AND llTaxSub
		            THISFORM.cReportName  = m.goApp.cRptsFolder + IIF(llSummary, 'dmrostmt2bds.frx', 'dmrostmt2bd.frx')
		
		         CASE llStmComp AND NOT llDuplex AND NOT llTaxSub AND NOT llExpSub
		            THISFORM.cReportName  = m.goApp.cRptsFolder + IIF(llSummary, 'dmrostmt2as.frx', 'dmrostmt2a.frx')
		
		         CASE llStmComp AND NOT llDuplex AND llExpSub AND NOT llTaxSub
		            THISFORM.cReportName  = m.goApp.cRptsFolder + IIF(llSummary, 'dmrostmt2aes.frx', 'dmrostmt2ae.frx')
		
		         CASE llStmComp AND NOT llDuplex AND llExpSub AND llTaxSub
		            THISFORM.cReportName  = m.goApp.cRptsFolder + IIF(llSummary, 'dmrostmt2bes.frx', 'dmrostmt2be.frx')
		
		         CASE llStmComp AND NOT llDuplex AND NOT llExpSub AND llTaxSub
		            THISFORM.cReportName  = m.goApp.cRptsFolder + IIF(llSummary, 'dmrostmt2bs.frx', 'dmrostmt2b.frx')
		
		         CASE llDuplex AND NOT llTaxSub AND NOT llExpSub
		            THISFORM.cReportName  = m.goApp.cRptsFolder + IIF(llSummary, 'dmrostmt1ads.frx', 'dmrostmt1ad.frx')
		
		         CASE llDuplex AND llExpSub AND NOT llTaxSub
		            THISFORM.cReportName  = m.goApp.cRptsFolder + IIF(llSummary, 'dmrostmt1aeds.frx', 'dmrostmt1aed.frx')
		
		         CASE llDuplex AND llExpSub AND llTaxSub
		            THISFORM.cReportName  = m.goApp.cRptsFolder + IIF(llSummary, 'dmrostmt1beds.frx', 'dmrostmt1bed.frx')
		
		         CASE llDuplex AND NOT llExpSub AND llTaxSub
		            THISFORM.cReportName  = m.goApp.cRptsFolder + IIF(llSummary, 'dmrostmt1bds.frx', 'dmrostmt1bd.frx')
		
		         CASE NOT llDuplex AND NOT llTaxSub AND NOT llExpSub
		            THISFORM.cReportName  = m.goApp.cRptsFolder + IIF(llSummary, 'dmrostmt1as.frx', 'dmrostmt1a.frx')
		
		         CASE NOT llDuplex AND llExpSub AND NOT llTaxSub
		            THISFORM.cReportName  = m.goApp.cRptsFolder + IIF(llSummary, 'dmrostmt1aes.frx', 'dmrostmt1ae.frx')
		
		         CASE NOT llDuplex AND llExpSub AND llTaxSub
		            THISFORM.cReportName  = m.goApp.cRptsFolder + IIF(llSummary, 'dmrostmt1bes.frx', 'dmrostmt1be.frx')
		
		         CASE NOT llDuplex AND NOT llExpSub AND llTaxSub
		            THISFORM.cReportName  = m.goApp.cRptsFolder + IIF(llSummary, 'dmrostmt1bs.frx', 'dmrostmt1b.frx')
		
		         OTHERWISE
		            THISFORM.cReportName  = m.goApp.cRptsFolder + IIF(llSummary, 'dmrostmt1as.frx', 'dmrostmt1a.frx')
		      ENDCASE
		   ENDIF
		
		   TRY
		      lcTemp = ADDBS(SYS(2023))
		      lcReport = SYS(3)+'.frx'
		      USE (THIS.cReportName) IN 0 ALIAS oldrpt
		      SELECT oldrpt
		      COPY TO (lcTemp+lcReport)
		      USE IN oldrpt
		      USE (lcTemp+lcReport) IN 0 ALIAS rpt
		      SELECT rpt
		      SCAN FOR '"Owner ID: " + cownerid' $ EXPR
		         REPLACE COMMENT WITH "#UR OUTLINE=statemnt.cownerid"
		         USE IN rpt
		         THISFORM.cReportName = lcTemp+lcReport
		      ENDSCAN
		   CATCH
		   ENDTRY
		
		   THISFORM.cReportNameP = THISFORM.cReportName
		
		
		   IF NOT FILE(THISFORM.cReportName)
		      MESSAGEBOX('The report format for this report is missing from the \Rpts folder.' + CHR(10) + ;
		         'Looking for file: ' + ALLTRIM(THISFORM.cReportName), 16, 'Missing Report Format')
		
		   ELSE
		
		      SWSELECT('options')
		      GO TOP
		      glgrpname = lGrpName
		      IF glgrpname
		         SWSELECT('groups')
		         SET ORDER TO cGroup
		         IF NOT 'NEW RUN' $ UPPER(THISFORM.runcombo1.VALUE)
		            IF SEEK(THISFORM.runcombo1.LISTITEM(THISFORM.runcombo1.LISTITEMID, 4))
		               m.cGrpName = cDesc
		            ELSE
		               m.cGrpName = ''
		            ENDIF
		         ELSE
		            IF SEEK(LEFT(THISFORM.swgroup1.VALUE, 2))
		               m.cGrpName = cDesc
		            ELSE
		               IF LEFT(THISFORM.swgroup1.VALUE, 2) = '**'
		                  m.cGrpName = 'All Companies'
		               ELSE
		                  m.cGrpName = ''
		               ENDIF
		            ENDIF
		         ENDIF
		      ELSE
		         m.cGrpName = ''
		      ENDIF
		
		      SELECT (lcAlias)
		
		      LOCAL lnResult, lcAlias
		      PRIV lcTitle1, lcTitle2, lcSortOrder, lcSelect, glgrpname, m.cGrpName
		
		      glgrpname = THIS.oOptions.lGrpName
		
		      *
		      *  Check to see if the requirements for calling this method are met.
		      *
		      ASSERT TYPE('this.cReportName') = 'C' MESSAGE 'You must set the cReportName property to use this class'
		      ASSERT INLIST(m.cbutton, 'F', 'P', 'S')  MESSAGE 'The parm to the report method must be either "F" or "P"'
		
		      IF TYPE('this.ctitle1') # 'C'
		         THIS.ctitle1 = ''
		      ENDIF
		      IF TYPE('this.ctitle2') # 'C'
		         THIS.ctitle2 = ''
		      ENDIF
		
		      lcAlias = ALIAS()
		
		      *
		      *  Make the cProducer variable a default value for development purposes
		      *
		      IF TYPE('m.goApp') = 'O'
		         m.cProducer  = m.goApp.cCompanyName
		         m.cProcessor = m.goApp.cAgentName
		      ELSE
		         m.cProducer  = 'Development Company, Inc.'
		         m.cProcessor = ''
		      ENDIF
		
		      IF TYPE('m.cProcessor') # 'C'
		         m.cProcessor = ''
		      ENDIF
		
		      lcTitle1    = THISFORM.ctitle1
		      lcTitle2    = THISFORM.ctitle2
		      lcSortOrder = THISFORM.cSortOrder
		      lcSelect    = THISFORM.cSelectCriteria
		
		      *
		      *  Set defaults for titles and criteria if not in correct format
		      *
		      IF TYPE('lcTitle1') # 'C'
		         lcTitle1 = ''
		      ENDIF
		      IF TYPE('lcTitle2') # 'C'
		         lcTitle2 = ''
		      ENDIF
		      IF TYPE('lcSortOrder') # 'C'
		         lcSortOrder = ''
		      ENDIF
		      IF TYPE('lcSelect') # 'C'
		         lcSelect = ''
		      ENDIF
		
		      SELECT (lcAlias)
		
		      lcYear     = THISFORM.runcombo1.LISTITEM[thisform.runcombo1.listitemid, 2]
		      lnRunNo    = INT(VAL(THISFORM.runcombo1.LISTITEM[thisform.runcombo1.listitemid, 3]))
		      lcAcctDate = THISFORM.runcombo1.LISTITEM[thisform.runcombo1.listitemid, 7]
		
		      *  Process the report format removing tag and tag1 fields
		      TRY
		         USE (THIS.cReportName) IN 0 ALIAS rptfmt
		         SELECT rptfmt
		         LOCATE FOR objtype = 1
		         IF FOUND()
		            REPLACE TAG WITH '', tag2 WITH ''
		         ENDIF
		         USE
		      CATCH
		      ENDTRY
		
		      SELECT (lcAlias)
		
		      llPrintError = .F.
		      IF FILE('teststmt.txt')
		         SELECT statemnt
		         COPY TO dmrostmt1ad
		      ENDIF
		      *
		      *  Send the report to the proper location based upon the button pressed.
		      *
		      DO CASE
		         CASE m.cbutton = 'P'
		            SET REPORTBEHAVIOR 90
		            * Not doing it as separate print jobs
		            TRY
		               REPORT FORM (THIS.cReportName) TO PRINTER PROMPT NOCONSOLE NOEJECT
		            CATCH TO loError
		               llPrintError = .T.
		            ENDTRY
		
		            IF llPrintError
		               IF loError.ERRORNO = 1958
		                  MESSAGEBOX('There was an error loading the printer driver. Make sure you have a valid printer selected or setup as your default printer.', 16, 'Windows Printer Driver Error')
		               ELSE
		                  MESSAGEBOX('Error sending the report to the printer.' + CHR(10) + ;
		                     'Error: ' + loError.MESSAGE, 16, 'Report Print Problem')
		               ENDIF
		            ENDIF
		
		         CASE m.cbutton = 'S'
		            IF 'Export' $ THISFORM.swrptcriteriabuttons1.cmdPreview.CAPTION
		               DO FORM exportcsv WITH THISFORM.CAPTION, THISFORM.cReportName, lcAlias, lcTitle1, lcTitle2, lcSortOrder, lcSelect
		            ELSE
		               IF THISFORM.chkemail.VALUE
		                  oProgress = THIS.omessage.progressbarex('Emailing Owner Statements...')
		                  SET REPORTBEHAVIOR 80
		                  lcBadEmail = ''
		                  IF THISFORM.lEmailOnly
		                     SELE statemnt.cownerid, investor.cemail, investor.cownname ;
		                        FROM statemnt ;
		                        JOIN investor ON statemnt.cownerid = investor.cownerid ;
		                        WHERE NOT EMPTY(investor.cemail) ;
		                        AND at_pay_freq(investor.cownerid,tdAcctDate) ;
		                        AND investor.nStmtType = 3 ;
		                        INTO CURSOR temp ;
		                        ORDER BY statemnt.cownerid GROUP BY statemnt.cownerid
		                  ELSE
		                     SELE statemnt.cownerid, investor.cemail, investor.cownname ;
		                        FROM statemnt ;
		                        JOIN investor ON statemnt.cownerid = investor.cownerid ;
		                        WHERE NOT EMPTY(investor.cemail) ;
		                        AND at_pay_freq(investor.cownerid,tdAcctDate) ;
		                        INTO CURSOR temp ;
		                        ORDER BY statemnt.cownerid GROUP BY statemnt.cownerid
		                  ENDIF
		                  IF _TALLY > 0
		
		                     IF THISFORM.omessage.CONFIRM('Are you sure you want to email the distribution statements to ' + TRANSFORM(_TALLY) + ' owners?')
		
		                        lnMax = _TALLY
		                        oProgress.setprogressrange(0, lnMax)
		                        lnTally = 1
		
		                        IF THISFORM.omessage.CONFIRM('Do you want to add a personal message to the email(s)?', 'Email Statements')
		                           lcBody = THISFORM.omessage.gettext('Enter the text for the body of the email', 'Email Statements')
		                           IF ISNULL(lcBody)
		                              lcBody = .F.
		                           ENDIF
		                        ELSE
		                           lcBody = .F.
		                        ENDIF
		                        SELECT temp
		                        SCAN
		                           pcOwnerID = cownerid
		                           SELECT statemnt
		                           SET FILT TO cownerid = pcOwnerID
		                           lcEmail = ALLTRIM(temp.cemail)
		                           IF NOT '@' $ lcEmail OR EMPTY(lcEmail)
		                              lcBadEmail = lcBadEmail + temp.cownerid + ' - ' + temp.cownname + CHR(10)
		                              LOOP
		                           ENDIF
		                           oProgress.setprogressmessage('Owner: ' + temp.cownname)
		                           oProgress.updateprogress(lnTally)
		                           lnTally      = lnTally + 1
		                           lcFile       = 'OS' + '_' + ALLTRIM(STRTRAN(temp.cownerid, ',', '')) + '_' + lcYear + '_' + PADL(lnRunNo, 3, '0') + ".pdf"
		                           lcFile       = SWSTRTRAN(lcFile)
		                           lcOutputFile = ADDBS(ALLTRIM(m.goApp.cCommonFolder)) + 'TEMP\' + lcFile
		                           SELECT statemnt
		                           TRY
		                              llReturn = THIS.CreatePDF(lcOutputFile)
		                           CATCH TO loError
		                              MESSAGEBOX('There was an error trying to create a PDF file to email. Error info: ' + CHR(10) + ;
		                                 loError.MESSAGE, 16, 'PDF Printer Error')
		                              SELECT temp
		                              GO BOTT
		                           ENDTRY
		                           STORE .F. TO lcSender, lcMailServer, lcEmailUser, lcEmailPass, lnSMTPPort, llTLS
		                           IF llReturn
		                              llAsync = FILE('datafiles\asyncstmts.txt')
		                              oSendMail  = swEmailReport(lcEmail, ;
		                                 lcAcctDate + ' Owner Distribution Statement', ;
		                                 lcOutputFile, ;
		                                 IIF(lnMax = 1, .T., .F.), ;
		                                 lcBody, ;
		                                 lcSender, ;
		                                 lcMailServer, ;
		                                 lcEmailUser, ;
		                                 lcEmailPass, ;
		                                 lnSMTPPort, ;
		                                 llTLS, ;
		                                 llAsync)
		                              llReturn   = oSendMail.lResult
		                              lcErrorMsg = oSendMail.cErrorMsg
		                              RELEASE oSendMail
		                           ENDIF
		                        ENDSCAN
		                        oProgress.closeprogress()
		                        IF NOT EMPTY(lcBadEmail)
		                           lcBadEmail = 'The following owners had bad or missing email addresses and no email was sent:' + CHR(10) + CHR(10) + lcBadEmail
		                           MESSAGEBOX(lcBadEmail, 48, 'Bad Email Addresses')
		                        ELSE
		                           IF llReturn
		                              MESSAGEBOX('The owner statements were emailed successfully.', 64, 'Email Statements')
		                           ELSE
		                              MESSAGEBOX('There was a problem sending the reports via email. ' + CHR(10) + CHR(10) + ;
		                                 lcErrorMsg, 16, 'Problem Emailing Reports')
		                           ENDIF
		                        ENDIF
		                     ENDIF
		                  ELSE
		                     oProgress.closeprogress()
		                     MESSAGEBOX('There were no owners with valid email addresses. Statements cannot be emailed.', 16, 'Email Statements')
		                  ENDIF
		                  SET REPORTBEHAVIOR 90
		               ELSE
		                  llFile                 = THISFORM.swrptcriteriabuttons1.cmdPreview.CAPTION = 'File'
		                  lcAlias                = "statemnt"
		                  m.goApp.oReport.cAlias = lcAlias
		                  IF NOT USED('compmast')
		                     USE (m.goApp.cCommonFolder + 'compmast') IN 0
		                  ENDIF
		                  SELECT compmast
		                  LOCATE FOR cidcomp = m.goApp.cidcomp
		                  IF FOUND()
		                     m.cProcessor = cProcessor
		                  ELSE
		                     m.cProcessor = ""
		                  ENDIF
		
		                  m.goApp.oReport.cAlias             = lcAlias
		                  m.goApp.oReport.DATASESSIONID      = THISFORM.DATASESSIONID
		                  m.goApp.oReport.cReportName        = THISFORM.cReportName
		                  m.goApp.oReport.ctitle1            = THISFORM.ctitle1
		                  m.goApp.oReport.ctitle2            = THISFORM.ctitle2
		                  m.goApp.oReport.cProcessor         = m.cProcessor
		                  m.goApp.oReport.cSortOrder         = THISFORM.cSortOrder
		                  m.goApp.oReport.cSelectionCriteria = THISFORM.cSelectCriteria
		
		                  IF NOT EMPTY(THISFORM.cFriendlyName)
		                     m.goApp.oReport.cFriendlyName = THISFORM.cFriendlyName
		                  ELSE
		                     m.goApp.oReport.cFriendlyName = THISFORM.CAPTION
		                  ENDIF
		
		                  llReturn = m.goApp.oReport.SendReport(m.cbutton, .F., IIF(NOT EMPTY(m.cGrpName), m.cGrpName, .F.))
		               ENDIF
		            ENDIF
		      ENDCASE
		
		      THISFORM.lEmailOnly = .F.
		   ENDIF
		CATCH TO loError
		   llReturn = .F.
		   DO errorlog WITH 'Report', loError.LINENO, 'Owner Statement', loError.ERRORNO, loError.MESSAGE
		   MESSAGEBOX('Unable to process the report at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		      'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		   *   THISFORM.lQuiet = .T.
		ENDTRY
		
		
		
		
		
		
		
		
	ENDPROC

	PROCEDURE rounding		&& Reports rounding
	ENDPROC

	PROCEDURE stmtnotes		&& Brings in any statement notes.
	ENDPROC

	PROCEDURE Unload
		SET CENTURY ON
		on key label esc
		SET ESCAPE OFF 
		DODEFAULT()
	ENDPROC

	PROCEDURE cboOwnerType.Init
		IF DODEFAULT()
		   this.addlistitem('All Owner Types',1)
		   this.addlistitem('Royalty Owners',2)
		   this.addlistitem('Working Owners',3)
		   this.listitemid = 1
		ENDIF   
	ENDPROC

	PROCEDURE chkDetail.Click
		IF this.Value
		   thisform.chkemail.Value = .f.
		   thisform.lEmailOnly = .f.
		ENDIF 
	ENDPROC

	PROCEDURE chkDirDeposit.Click
		LOCAL lnHandle
		
		IF this.Value = .t.
		   IF NOT FILE('datafiles\PrintDD.cfg')
		      lnHandle = FCREATE('datafiles\PrintDD.cfg')
		      FCLOSE(lnHandle)
		   ENDIF
		ELSE
		   IF FILE('datafiles\PrintDD.cfg')
		      ERASE datafiles\PrintDD.cfg
		   ENDIF
		ENDIF 
		
		DODEFAULT()
	ENDPROC

	PROCEDURE chkEmail.Click
		IF this.Value = .T.
		   thisform.chkdetail.Value = .f.
		   IF NOT swIsEmailSetup()
		      MESSAGEBOX('The email preferences are not setup. Reports cannot be emailed at this time.',16,'Email Preferences Missing')
		      this.Value = .f.
		   ELSE 
		      thisform.swrptcriteriabuttons1.cmdPreview.Caption = 'E\<mail'
		   ENDIF    
		ELSE
		   thisform.swrptcriteriabuttons1.cmdPreview.Caption = 'Pre\<view'
		   thisform.lemailonly = .F.
		ENDIF 
	ENDPROC

	PROCEDURE chkIncSummary.Click
		LOCAL lnHandle
		
		IF this.Value = .t.
		   IF NOT FILE('datafiles\PrintDD.cfg')
		      lnHandle = FCREATE('datafiles\PrintDD.cfg')
		      FCLOSE(lnHandle)
		   ENDIF
		ELSE
		   IF FILE('datafiles\PrintDD.cfg')
		      ERASE datafiles\PrintDD.cfg
		   ENDIF
		ENDIF 
		
		DODEFAULT()
	ENDPROC

	PROCEDURE chkNoSuspDet.Click
		LOCAL lnHandle
		
		IF this.Value = .t.
		   IF NOT FILE('datafiles\PrintDD.cfg')
		      lnHandle = FCREATE('datafiles\PrintDD.cfg')
		      FCLOSE(lnHandle)
		   ENDIF
		ELSE
		   IF FILE('datafiles\PrintDD.cfg')
		      ERASE datafiles\PrintDD.cfg
		   ENDIF
		ENDIF 
		
		DODEFAULT()
	ENDPROC

	PROCEDURE ChkPrintDef.Click
		LOCAL lnHandle
		
		IF this.Value = .t.
		   IF NOT FILE('datafiles\PrintDef.cfg')
		      lnHandle = FCREATE('datafiles\PrintDef.cfg')
		      FCLOSE(lnHandle)
		   ENDIF
		ELSE
		   IF FILE('datafiles\PrintDef.cfg')
		      ERASE datafiles\PrintDef.cfg
		   ENDIF
		ENDIF 
		
		DODEFAULT()
	ENDPROC

	PROCEDURE ChkPrintMin.Click
		LOCAL lnHandle
		
		IF this.Value = .t.
		   IF NOT FILE('datafiles\PrintMin.cfg')
		      lnHandle = FCREATE('datafiles\PrintMin.cfg')
		      FCLOSE(lnHandle)
		   ENDIF
		ELSE
		   IF FILE('datafiles\PrintMin.cfg')
		      ERASE datafiles\PrintMin.cfg
		   ENDIF
		ENDIF 
		
		DODEFAULT()
	ENDPROC

	PROCEDURE chkSelected.Click
		IF this.Value
		   DO FORM commonsource\selected-ids WITH 'OWNER' LINKED 
		   lnCount = RECCOUNT('selected')
		   thisform.lblselected.Caption = TRANSFORM(lnCount) + ' Owners Selected'
		   thisform.lblselected.Visible = .T.
		   thisform.lblbegID.Visible = .F.
		   thisform.lblendID.Visible = .F.
		   thisform.swrptlook1.Visible = .F.
		ELSE
		   thisform.lblselected.Visible = .F.
		   thisform.lblbegID.Visible = .T.
		   thisform.lblendID.Visible = .T.
		   thisform.swrptlook1.Visible = .T.
		ENDIF 
	ENDPROC

	PROCEDURE chkSortExpense.Click
		LOCAL lnHandle
		
		IF this.Value = .t.
		   IF NOT FILE('datafiles\expsort.txt')
		      lnHandle = FCREATE('datafiles\expsort.txt')
		      FCLOSE(lnHandle)
		   ENDIF
		ELSE
		   IF FILE('datafiles\expsort.txt')
		      ERASE datafiles\expsort.txt
		   ENDIF
		ENDIF 
		
		DODEFAULT()
	ENDPROC

	PROCEDURE chkSummarize.Click
		LOCAL lnHandle
		
		IF this.Value = .t.
		   IF NOT FILE('datafiles\sumprogs.txt')
		      lnHandle = FCREATE('datafiles\sumprogs.txt')
		      FCLOSE(lnHandle)
		   ENDIF
		ELSE
		   IF FILE('datafiles\sumprogs.txt')
		      ERASE datafiles\sumprogs.txt
		   ENDIF
		ENDIF 
		
		DODEFAULT()
	ENDPROC

	PROCEDURE chkYTDITD.Click
		LOCAL lnHandle
		
		IF this.Value = .t.
		   IF NOT FILE('datafiles\Total.ITD')
		      lnHandle = FCREATE('datafiles\Totals.ITD')
		      FCLOSE(lnHandle)
		   ENDIF
		ELSE
		   IF FILE('datafiles\Totals.ITD')
		      ERASE datafiles\Totals.ITD
		   ENDIF
		ENDIF 
		
		DODEFAULT()
	ENDPROC

	PROCEDURE Runcombo1.Init
		IF DODEFAULT()
		   this.listitemid = 1
		ENDIF   
	ENDPROC

	PROCEDURE Runcombo1.Valid
		IF 'New' $ this.value
		   thisform.lblgroup.visible = .t.
		   thisform.swgroup1.visible = .t.
		   thisform.lblacctdate.visible = .t.
		   thisform.txtacctdate.visible = .t.
		   thisform.chkEmail.Value = .f.
		   thisform.chkEmail.Visible = .f.
		ELSE   
		   thisform.lblgroup.visible = .f.
		   thisform.swgroup1.visible = .f.
		   thisform.lblacctdate.visible = .f.
		   thisform.txtacctdate.visible = .f.
		   thisform.chkEmail.Visible = .t.
		ENDIF
		DODEFAULT()
		      
	ENDPROC

	PROCEDURE Swrptcriteriabuttons1.cmdPreview.Click
		IF THISFORM.chkPrintJob.VALUE = .T.  &&  If option about creating separate print jobs is marked, tell them it won't affect Previews - BH 10/04/06
		   THISFORM.oMessage.DISPLAY('This option will only affect statements printed using the Print Button instead of Preview, and will send the statements to the default printer.')
		ENDIF
		
		DODEFAULT()
		
	ENDPROC

	PROCEDURE Swrptlook1.Swlookupbutton1.Click
		LOCAL lcList
		PRIV llOK
		
		llOK = .F.
		lcList = 'cownerid,csortfield'
		
		DO FORM ..\custom\picklist WITH 'Investor', lcList, thisform.swrptlook1.txtbegid.value, 2
		
		IF llOK
		   thisform.swrptlook1.txtBegId.value = cOwnerID
		   thisform.swrptlook1.txtBegName.value = cSortField
		   thisform.swrptlook1.txtBegId.refresh()
		   thisform.swrptlook1.txtBegName.refresh()
		ENDIF   
		
		thisform.setnextcontrol(thisform.swrptlook1.txtBegId)
		
	ENDPROC

	PROCEDURE Swrptlook1.Swlookupbutton2.Click
		LOCAL lcList
		PRIV llOK
		
		llOK = .F.
		lcList = 'cownerid,csortfield'
		
		DO FORM ..\custom\picklist WITH 'Investor', lcList, thisform.swrptlook1.txtendid.value, 2
		
		IF llOK
		   thisform.swrptlook1.txtEndId.value = cOwnerID
		   thisform.swrptlook1.txtEndName.value = cSortField
		   thisform.swrptlook1.txtEndId.refresh()
		   thisform.swrptlook1.txtEndName.refresh()
		ENDIF   
		
		thisform.setnextcontrol(thisform.swrptlook1.txtEndId)
		
	ENDPROC

ENDDEFINE
