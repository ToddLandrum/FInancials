*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="afecopy.scx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="1" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Cursor1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor5" UniqueID="" Timestamp="" />

	AutoOpenTables = .F.
	DataSource = .NULL.
	Height = 727
	Left = 40
	Name = "Dataenvironment"
	Top = 235
	Width = 520

	ADD OBJECT 'Cursor1' AS cursor WITH ;
		Alias = "afehdr", ;
		CursorSource = "afehdr", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor1", ;
		Top = 19, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor2' AS cursor WITH ;
		Alias = "afedet", ;
		BufferModeOverride = 5, ;
		CursorSource = "afedet", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 150, ;
		Name = "Cursor2", ;
		Top = 20, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor3' AS cursor WITH ;
		Alias = "afedet1", ;
		CursorSource = "afedet", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 290, ;
		Name = "Cursor3", ;
		Top = 20, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor4' AS cursor WITH ;
		Alias = "afedet2", ;
		CursorSource = "afedet", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor4", ;
		Top = 140, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor5' AS cursor WITH ;
		Alias = "wells", ;
		CursorSource = "wells", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 150, ;
		Name = "Cursor5", ;
		Top = 140, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

ENDDEFINE

DEFINE CLASS formdmclearsusp AS frmformcustom OF "..\custom\cforms.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Lbllabelcustom1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboAFE1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblAFE" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblWell" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblWellName" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboAFE2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chklCat" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chklEst" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdCopy" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cmdcommandbuttoncustom1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="opgType" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblExistingAFE" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblNewAFE" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtNewAFENo" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcWellName" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdLookWell" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcWellID" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: process
	*</DefinedPropArrayMethod>

	Caption = "Copy AFE Setup"
	DoCreate = .T.
	Height = 393
	HelpContextID = 136
	lcloseonescape = .T.
	Name = "Formdmclearsusp"
	Width = 541

	ADD OBJECT 'cboAFE1' AS cbocomboboxcustom WITH ;
		BoundColumn = 2, ;
		Height = 20, ;
		Left = 133, ;
		Name = "cboAFE1", ;
		TabIndex = 1, ;
		Top = 49, ;
		Width = 302
		*< END OBJECT: ClassLib="..\..\custom\ccontrol.vcx" BaseClass="combobox" />

	ADD OBJECT 'cboAFE2' AS cbocomboboxcustom WITH ;
		BoundColumn = 2, ;
		Height = 20, ;
		Left = 133, ;
		Name = "cboAFE2", ;
		TabIndex = 14, ;
		Top = 184, ;
		Visible = .F., ;
		Width = 302
		*< END OBJECT: ClassLib="..\..\custom\ccontrol.vcx" BaseClass="combobox" />

	ADD OBJECT 'chklCat' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Copy AFE Categories Only", ;
		Left = 159, ;
		Name = "chklCat", ;
		TabIndex = 16, ;
		Top = 279, ;
		Value = .T.
		*< END OBJECT: ClassLib="..\..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chklEst' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Copy AFE Categories and Estimated Costs", ;
		Left = 159, ;
		Name = "chklEst", ;
		TabIndex = 17, ;
		Top = 305, ;
		Value = .F.
		*< END OBJECT: ClassLib="..\..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'Cmdcommandbuttoncustom1' AS cmdcommandbuttoncustom WITH ;
		Caption = "E\<xit", ;
		Height = 33, ;
		Left = 269, ;
		Name = "Cmdcommandbuttoncustom1", ;
		TabIndex = 19, ;
		Top = 343, ;
		Width = 76
		*< END OBJECT: ClassLib="..\..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdCopy' AS cmdcommandbuttoncustom WITH ;
		Caption = "Create", ;
		Height = 33, ;
		Left = 180, ;
		Name = "cmdCopy", ;
		TabIndex = 18, ;
		Top = 343, ;
		Width = 76
		*< END OBJECT: ClassLib="..\..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdLookWell' AS cmdcommandbuttoncustom WITH ;
		Caption = " Well ID", ;
		FontName = "Arial", ;
		Height = 20, ;
		Left = 59, ;
		Name = "cmdLookWell", ;
		TabIndex = 5, ;
		TabStop = .F., ;
		Top = 207, ;
		Width = 60
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'lblAFE' AS lbllabelcustom WITH ;
		Caption = "AFE No.", ;
		Left = 137, ;
		Name = "lblAFE", ;
		TabIndex = 11, ;
		Top = 167, ;
		Visible = .F.
		*< END OBJECT: ClassLib="..\..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblExistingAFE' AS lbllabelcustom WITH ;
		Caption = "Existing AFE:", ;
		Left = 54, ;
		Name = "lblExistingAFE", ;
		TabIndex = 20, ;
		Top = 185, ;
		Visible = .F.
		*< END OBJECT: ClassLib="..\..\ampro\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom1' AS lbllabelcustom WITH ;
		Caption = "Copy From:", ;
		Left = 62, ;
		Name = "Lbllabelcustom1", ;
		TabIndex = 10, ;
		Top = 51
		*< END OBJECT: ClassLib="..\..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom2' AS lbllabelcustom WITH ;
		Caption = "AFE No.", ;
		Left = 135, ;
		Name = "Lbllabelcustom2", ;
		TabIndex = 3, ;
		Top = 32
		*< END OBJECT: ClassLib="..\..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom3' AS lbllabelcustom WITH ;
		Caption = " Well ID", ;
		Left = 205, ;
		Name = "Lbllabelcustom3", ;
		TabIndex = 4, ;
		Top = 32
		*< END OBJECT: ClassLib="..\..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom4' AS lbllabelcustom WITH ;
		Caption = " Well Name", ;
		Left = 283, ;
		Name = "Lbllabelcustom4", ;
		TabIndex = 6, ;
		Top = 32
		*< END OBJECT: ClassLib="..\..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom5' AS lbllabelcustom WITH ;
		Caption = "Copy To:", ;
		Left = 74, ;
		Name = "Lbllabelcustom5", ;
		TabIndex = 15, ;
		Top = 118
		*< END OBJECT: ClassLib="..\..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblNewAFE' AS lbllabelcustom WITH ;
		Caption = "New AFE:", ;
		Left = 68, ;
		Name = "lblNewAFE", ;
		TabIndex = 21, ;
		Top = 185
		*< END OBJECT: ClassLib="..\..\ampro\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblWell' AS lbllabelcustom WITH ;
		Caption = " Well ID", ;
		Left = 207, ;
		Name = "lblWell", ;
		TabIndex = 12, ;
		Top = 167, ;
		Visible = .F.
		*< END OBJECT: ClassLib="..\..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblWellName' AS lbllabelcustom WITH ;
		Caption = " Well Name", ;
		Left = 285, ;
		Name = "lblWellName", ;
		TabIndex = 13, ;
		Top = 167, ;
		Visible = .F.
		*< END OBJECT: ClassLib="..\..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'opgType' AS opgoptiongroupcustom WITH ;
		ButtonCount = 2, ;
		Height = 36, ;
		Left = 132, ;
		Name = "opgType", ;
		TabIndex = 2, ;
		Top = 108, ;
		Value = 1, ;
		Width = 204, ;
		Option1.AutoSize = .T., ;
		Option1.Caption = "New AFE", ;
		Option1.FontSize = 8, ;
		Option1.Height = 16, ;
		Option1.Left = 5, ;
		Option1.Name = "Option1", ;
		Option1.Top = 8, ;
		Option1.Value = 1, ;
		Option1.Width = 64, ;
		Option2.AutoSize = .T., ;
		Option2.Caption = "Existing AFE", ;
		Option2.FontSize = 8, ;
		Option2.Height = 16, ;
		Option2.Left = 120, ;
		Option2.Name = "Option2", ;
		Option2.Top = 8, ;
		Option2.Width = 78
		*< END OBJECT: ClassLib="..\..\ampro\custom\ccontrol.vcx" BaseClass="optiongroup" />

	ADD OBJECT 'txtcWellID' AS txtquickfill WITH ;
		clistexpression = wells.cwellid, ;
		clistworkarea = wells, ;
		ControlSource = "", ;
		Format = "K!", ;
		Height = 20, ;
		Left = 133, ;
		MaxLength = 10, ;
		Name = "txtcWellID", ;
		TabIndex = 8, ;
		Top = 207, ;
		Width = 93
		*< END OBJECT: ClassLib="..\custom\cgadget.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcWellName' AS txttextboxcustom WITH ;
		Height = 20, ;
		Left = 238, ;
		Name = "txtcWellName", ;
		ReadOnly = .T., ;
		TabIndex = 9, ;
		TabStop = .F., ;
		Top = 207, ;
		Width = 240
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtNewAFENo' AS txttextboxcustom WITH ;
		Format = "K!", ;
		Height = 20, ;
		InputMask = "", ;
		Left = 133, ;
		MaxLength = 10, ;
		Name = "txtNewAFENo", ;
		TabIndex = 7, ;
		Top = 183, ;
		Width = 93
		*< END OBJECT: ClassLib="..\..\ampro\custom\ccontrol.vcx" BaseClass="textbox" />
	
	PROCEDURE process
		LOCAL lcAFE1, lcAFE2, llCat, llEst, lcAFEID1, lcAFEID2
		
		oMessage = findglobalobject('cmMessage')
		oRegistry = findglobalobject('cmRegistry')
		
		lcAFE1 = THISFORM.cboAFE1.VALUE
		lcAFE2 = THISFORM.cboAFE2.VALUE
		llCat  = THISFORM.chklCat.VALUE
		llEst  = THISFORM.chklEst.VALUE
		lcAFEID1 = THISFORM.cboAFE1.LISTITEM(THISFORM.cboAFE1.LISTITEMID,4)
		lcAFEID2 = THISFORM.cboAFE2.LISTITEM(THISFORM.cboAFE2.LISTITEMID,4)
		lcAFENo  = THISFORM.txtNewAFENo.VALUE
		lcWellID = THISFORM.txtcWellID.VALUE
		
		IF EMPTY(lcAFE1)
		   thisform.oMessage.Warning('You must select an AFE to be copied from.')
		   thisform.setnextcontrol(thisform.cboAFE1)
		   RETURN .f.
		ENDIF
		IF THISFORM.opgType.VALUE = 2 AND EMPTY(lcAFE2)
		   thisform.oMessage.Warning('You must select an AFE to be copied to.')
		   thisform.setnextcontrol(thisform.cboAFE2)
		   RETURN .f.
		ENDIF
		IF THISFORM.opgType.VALUE = 1 AND EMPTY(lcAFENo)
		   thisform.oMessage.Warning('You must specify the AFE No for the new AFE being created.')
		   thisform.setnextcontrol(thisform.txtNewAFENo)
		   RETURN .f.
		ENDIF 
		IF THISFORM.opgType.VALUE = 1 AND EMPTY(lcWellID)
		   thisform.oMessage.Warning('You must specify the well ID for the new AFE being created.')
		   thisform.setnextcontrol(thisform.txtcWellID)
		   RETURN .f.
		ENDIF    
		
		
		IF THISFORM.opgType.VALUE = 1
		   IF NOT oMessage.CONFIRM('Are you sure you want to create AFE: ' + ALLTRIM(lcAFENo) + ' and copy all categories ' + IIF(llEst,'and all estimated costs ','') + 'from AFE: ' + ALLT(lcAFEID1) + ' to AFE: ' + ALLT(lcAFENo) + '?')
		      RETURN
		   ENDIF
		
		   swselect('afehdr')
		   SCATTER MEMVAR BLANK
		   m.cafeno = lcAFENo
		   m.cWellID = lcWellID
		   m.cidafeh = oRegistry.incrementcounter('%Shared.Counters.AFEHdr')
		   lcAFE2    = m.cidafeh
		   INSERT INTO afehdr FROM MEMVAR
		   SELECT afehdr
		   TABLEUPDATE(.T.,.T.,'Afehdr')
		   thisform.txtnewAFENo.set('value','')
		ELSE
		   IF lcAFE1 = lcAFE2  &&  Don't let them try and copy to itself
		      oMessage.warning("You cannot copy an AFE to itself.  Please choose a different AFE as the 'Copy To' AFE.")
		      RETURN
		   ENDIF
		   IF NOT oMessage.CONFIRM('Are you sure you want to copy all categories ' + IIF(llEst,'and all estimated costs ','') + 'from AFE: ' + ALLT(lcAFEID1) + ' to AFE: ' + ALLT(lcAFEID2) + '?')
		      RETURN
		   ENDIF
		
		ENDIF
		
		
		SELECT afedet
		SCAN FOR cidafeh == lcAFE2  &&  Get rid of all the existing detail records for the "Copy To" AFE
		   DELETE NEXT 1
		ENDSCAN
		
		SELECT afedet1
		SCAN FOR cidafeh == lcAFE1  &&  Scan afedet for the first AFE, then just substitute the cidafeh field, and nestcost field, if necessary
		   SCATTER MEMVAR
		   m.cidafeh = lcAFE2
		
		   IF llCat  &&  Categories only, so blank out the memvar for nEstCost
		      m.nEstCost = 0
		   ENDIF
		
		   m.nActCost = 0  &&  Set these to zero, just in case they run an AFE report, and it doesn't re-calc for some reason
		   m.nVariance = 0
		
		   m.cidafed = oRegistry.incrementcounter('%Shared.Counters.AFEDET')  &&  Loop to ensure no duplicate primary keys
		   SET DELE OFF
		   SELECT afedet2
		   SET ORDER TO cidafed
		   DO WHILE INDEXSEEK(m.cidafed)
		      m.cidafed = oRegistry.incrementcounter('%Shared.Counters.AFEDET')
		   ENDDO
		   SET DELE ON
		
		   INSERT INTO afedet FROM MEMVAR
		
		ENDSCAN
		
		SELECT afedet
		=TABLEUPDATE(.T.)
		
		oMessage.DISPLAY('The AFE information has been copied successfully, and can be viewed on the AFE Maintenance screen or AFE reports.')
		
	ENDPROC

	PROCEDURE cboAFE1.Init
		DODEFAULT()
		
		SELE cAFENo, afehdr.cWellID, cidafeh, cwellname FROM afehdr, wells where afehdr.cWellID == wells.cwellid INTO cursor laAFE Order by cAFENo
		
		lnx = 1
		SELECT laAFE
		SCAN
		   this.addlistitem(cAFENo+'-' +cWellID + '-' + allt(cwellname),lnx,1)
		   this.addlistitem(cidafeh,lnx,2)
		   this.addlistitem(cwellid,lnx,3)
		   this.addlistitem(cafeno,lnx,4)
		   lnx = lnx + 1
		ENDSCAN 
	ENDPROC

	PROCEDURE cboAFE2.Init
		DODEFAULT()
		
		SELE cAFENo, afehdr.cWellID, cidafeh, cwellname FROM afehdr, wells where afehdr.cWellID == wells.cwellid INTO cursor laAFE Order by cAFENo
		
		lnx = 1
		SELECT laAFE
		SCAN
		   this.addlistitem(cAFENo+'-' +cWellID + '-' + allt(cwellname),lnx,1)
		   this.addlistitem(cidafeh,lnx,2)
		   this.addlistitem(cwellid,lnx,3)
		   this.addlistitem(cafeno,lnx,4)
		   lnx = lnx + 1
		ENDSCAN 
	ENDPROC

	PROCEDURE chklCat.Click
		IF THIS.VALUE
		   THISFORM.chklEst.SET('value',.F.)
		ELSE
		   THIS.SET('value',.T.)
		ENDIF
		
		DODEFAULT()
		
	ENDPROC

	PROCEDURE chklEst.Click
		IF THIS.VALUE
		   THISFORM.chklCat.SET('value',.F.)
		ELSE
		   THIS.SET('value',.T.)
		ENDIF
		
		DODEFAULT()
	ENDPROC

	PROCEDURE Cmdcommandbuttoncustom1.Click
		thisform.Release()
	ENDPROC

	PROCEDURE cmdCopy.Click
		thisform.Process()
	ENDPROC

	PROCEDURE cmdLookWell.Click
		LOCAL lcList
		PRIV llOK
		
		llOK = .f.
		
		lcList = 'cWellID,cWellName,cGroup,cWellStat'
		
		DO FORM ..\custom\picklist WITH 'Wells', lcList, thisform.txtcwellid.value, 4
		
		IF llOK
		   thisform.txtcwellID.Value = wells.cwellid 
		   THISFORM.txtcwellid.REFRESH()
		   THISFORM.txtcWellname.VALUE = wells.cWellName
		   THISFORM.txtcWellname.REFRESH()
		   THISFORM.txtcWellID.SETFOCUS()
		ENDIF   
	ENDPROC

	PROCEDURE opgType.Option1.Valid
		IF this.Value = 1
		   thisform.lblExistingAFE.Visible = .f.
		   thisform.lblaFE.Visible = .f.
		   thisform.lblwell.Visible = .f.
		   thisform.lblwellName.Visible = .f.
		   thisform.cboAFE2.Visible = .f.
		   
		   thisform.lblnewAFE.Visible = .t.
		   thisform.txtcWellID.Visible = .t.
		   thisform.txtcWellName.Visible = .t.
		   thisform.txtNewAFENo.Visible = .t.
		   thisform.cmdlookWell.Visible = .t.
		   
		   thisform.cmdcopy.Caption = 'Create'
		ELSE
		   thisform.lblExistingAFE.Visible = .t.
		   thisform.lblaFE.Visible = .t.
		   thisform.lblwell.Visible = .t.
		   thisform.lblwellName.Visible = .t.
		   thisform.cboAFE2.Visible = .t.
		   
		   thisform.lblnewAFE.Visible = .f.
		   thisform.txtcWellID.Visible = .f.
		   thisform.txtcWellName.Visible = .f.
		   thisform.txtNewAFENo.Visible = .f.
		   thisform.cmdlookWell.Visible = .f.
		   thisform.cmdcopy.Caption = 'Copy'
		ENDIF    
	ENDPROC

	PROCEDURE opgType.Option2.Valid
		IF this.Value = 1
		   thisform.lblExistingAFE.Visible = .t.
		   thisform.lblaFE.Visible = .t.
		   thisform.lblwell.Visible = .t.
		   thisform.lblwellName.Visible = .t.
		   thisform.cboAFE2.Visible = .t.
		   
		   thisform.lblnewAFE.Visible = .f.
		   thisform.txtcWellID.Visible = .f.
		   thisform.txtcWellName.Visible = .f.
		   thisform.txtNewAFENo.Visible = .f.
		   thisform.cmdlookWell.Visible = .f.
		   thisform.cmdcopy.Caption = 'Copy'
		ELSE
		   thisform.lblExistingAFE.Visible = .f.
		   thisform.lblaFE.Visible = .f.
		   thisform.lblwell.Visible = .f.
		   thisform.lblwellName.Visible = .f.
		   thisform.cboAFE2.Visible = .f.
		   
		   thisform.lblnewAFE.Visible = .t.
		   thisform.txtcWellID.Visible = .t.
		   thisform.txtcWellName.Visible = .t.
		   thisform.txtNewAFENo.Visible = .t.
		   thisform.cmdlookWell.Visible = .t.
		   thisform.cmdcopy.Caption = 'Create'
		ENDIF    
	ENDPROC

	PROCEDURE txtcWellID.GotFocus
		ON KEY LABEL F2 _screen.activeform.cmdLookWell.Click()
		DODEFAULT()
	ENDPROC

	PROCEDURE txtcWellID.InteractiveChange
		IF DODEFAULT()
		   SELECT wells
		   LOCATE FOR cwellid == this.Value
		   IF FOUND()
		      thisform.txtcWellName.set('value',wells.cWellName)
		   ELSE
		      thisform.txtcWellName.set('value','')
		   ENDIF 
		ENDIF    
	ENDPROC

	PROCEDURE txtcWellID.LostFocus
		ON KEY LABEL F2 *
		DODEFAULT()
	ENDPROC

	PROCEDURE txtcWellID.Valid
		SELECT wells
		SET ORDER TO cwellid
		IF SEEK(THIS.VALUE)
		   THISFORM.txtcWellName.SET('value',wells.cwellname)
		ELSE
		   THISFORM.txtcWellName.SET('value','')
		ENDIF
		
		DODEFAULT()
		
	ENDPROC

	PROCEDURE txtcWellName.When
		return .f.
	ENDPROC

	PROCEDURE txtNewAFENo.Valid
		LOCAL lcAFENo
		
		lcAFENo = THIS.VALUE
		
		swselect('afehdr')
		IF NOT EMPTY(lcAFENo)
		   LOCATE FOR cafeno == lcAFENo
		   IF FOUND()
		      MESSAGEBOX('There is already an AFE with this AFE Number. Either choose a new AFE No or change the processing to copy to an existing AFE.',16,'AFE Already Exists')
		      RETURN 0
		   ENDIF
		ENDIF
		
	ENDPROC

ENDDEFINE
