*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="dmmeterallqb.scx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="2" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Cursor1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor7" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor8" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor9" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor10" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor11" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor12" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor15" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor16" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Relation1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor17" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor18" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor19" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor22" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor6" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor13" UniqueID="" Timestamp="" />

	AutoOpenTables = .F.
	DataSource = .NULL.
	Height = 619
	Left = 9
	Name = "Dataenvironment"
	Top = 44
	Width = 981

	ADD OBJECT 'Cursor1' AS cursor WITH ;
		Alias = "meterall", ;
		BufferModeOverride = 3, ;
		CursorSource = "meterall", ;
		Database = ..\newdbc\appdata.dbc, ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor1", ;
		Top = 20, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor10' AS cursor WITH ;
		Alias = "investor", ;
		CursorSource = "investor", ;
		Database = ..\newdbc\appdata.dbc, ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor10", ;
		Order = "cownerid", ;
		Top = 380, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor11' AS cursor WITH ;
		Alias = "meters", ;
		CursorSource = "meters", ;
		Database = ..\newdbc\appdata.dbc, ;
		Height = 90, ;
		Left = 150, ;
		Name = "Cursor11", ;
		Order = "meterid", ;
		Top = 380, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor12' AS cursor WITH ;
		Alias = "options", ;
		CursorSource = "options", ;
		Database = ..\newdbc\appdata.dbc, ;
		Height = 90, ;
		Left = 290, ;
		Name = "Cursor12", ;
		Top = 380, ;
		Width = 151
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor13' AS cursor WITH ;
		Alias = "expense1", ;
		CursorSource = "expense", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 735, ;
		Name = "Cursor13", ;
		Top = 20, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor15' AS cursor WITH ;
		Alias = "wells", ;
		CursorSource = "wells", ;
		Database = ..\newdbc\appdata.dbc, ;
		Height = 90, ;
		Left = 290, ;
		Name = "Cursor15", ;
		Order = "cwellid", ;
		Top = 500, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor16' AS cursor WITH ;
		Alias = "revsrc", ;
		CursorSource = "revsrc", ;
		Database = ..\newdbc\appdata.dbc, ;
		Height = 91, ;
		Left = 447, ;
		Name = "Cursor16", ;
		Order = "crevkey", ;
		Top = 27, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor17' AS cursor WITH ;
		Alias = "sysctl", ;
		CursorSource = "sysctl", ;
		Database = ..\newdbc\appdata.dbc, ;
		Height = 90, ;
		Left = 435, ;
		Name = "Cursor17", ;
		Top = 193, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor18' AS cursor WITH ;
		Alias = "metersub1", ;
		CursorSource = "metersub", ;
		Database = ..\newdbc\appdata.dbc, ;
		Height = 90, ;
		Left = 831, ;
		Name = "Cursor18", ;
		Top = 276, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor19' AS cursor WITH ;
		Alias = "incsusp1", ;
		CursorSource = "incsusp", ;
		Database = ..\newdbc\appdata.dbc, ;
		Height = 90, ;
		Left = 570, ;
		Name = "Cursor19", ;
		Top = 260, ;
		Width = 97
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor2' AS cursor WITH ;
		Alias = "metersub", ;
		BufferModeOverride = 5, ;
		CursorSource = "metersub", ;
		Database = ..\newdbc\appdata.dbc, ;
		Height = 90, ;
		Left = 150, ;
		Name = "Cursor2", ;
		Top = 20, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor22' AS cursor WITH ;
		Alias = "income1", ;
		CursorSource = "income", ;
		Database = ..\newdbc\appdata.dbc, ;
		Height = 90, ;
		Left = 661, ;
		Name = "Cursor22", ;
		Top = 30, ;
		Width = 97
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor3' AS cursor WITH ;
		Alias = "checks", ;
		BufferModeOverride = 5, ;
		CursorSource = "checks", ;
		Database = ..\newdbc\appdata.dbc, ;
		Height = 90, ;
		Left = 290, ;
		Name = "Cursor3", ;
		Top = 20, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor4' AS cursor WITH ;
		Alias = "coa", ;
		CursorSource = "coa", ;
		Database = ..\newdbc\appdata.dbc, ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor4", ;
		Order = "acctno", ;
		Top = 141, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor5' AS cursor WITH ;
		Alias = "meterall1", ;
		CursorSource = "meterall", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 829, ;
		Name = "Cursor5", ;
		Top = 162, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor6' AS cursor WITH ;
		Alias = "expense", ;
		BufferModeOverride = 5, ;
		CursorSource = "expense", ;
		Database = ..\newdbc\appdata.dbc, ;
		Height = 90, ;
		Left = 573, ;
		Name = "Cursor6", ;
		Top = 425, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor7' AS cursor WITH ;
		Alias = "glopt", ;
		CursorSource = "glopt", ;
		Database = ..\newdbc\appdata.dbc, ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor7", ;
		Top = 260, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor8' AS cursor WITH ;
		Alias = "income", ;
		BufferModeOverride = 5, ;
		CursorSource = "income", ;
		Database = ..\newdbc\appdata.dbc, ;
		Height = 90, ;
		Left = 150, ;
		Name = "Cursor8", ;
		Top = 260, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor9' AS cursor WITH ;
		Alias = "incsusp", ;
		BufferModeOverride = 5, ;
		CursorSource = "incsusp", ;
		Database = ..\newdbc\appdata.dbc, ;
		Height = 90, ;
		Left = 290, ;
		Name = "Cursor9", ;
		Top = 260, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Relation1' AS relation WITH ;
		ChildAlias = "metersub", ;
		ChildOrder = "cbatch", ;
		Name = "Relation1", ;
		ParentAlias = "meterall", ;
		RelationalExpr = "cbatch"
		*< END OBJECT: BaseClass="relation" />

ENDDEFINE

DEFINE CLASS formdmmetall AS frmdatamanagerformcustom OF "..\custom\cforms.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="cmdLookMeter" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcMeterID" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Swperiod" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Swyear" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcMeterName" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdLookPurch" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcRevname" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtnPrice" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtnMaster" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtnVariance" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtnSubs" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom6" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column1.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column1.txtcWellID" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column2.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column2.txtcWellName" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column3.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column3.txtnSubMeter" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column4.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column4.txtnAllocated" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column5.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column5.txtnTotalInc" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column6.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column6.Txttextboxcustom1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom7" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtnNetAmount" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtnTotal" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtTaxAmount" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcBegRange" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcEndRange" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom8" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdDocument" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtnDaysOn" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom9" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom10" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcRevKey" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdEven" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbltextcustom1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboCashAcct" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcRefID" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom11" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbltextcustom2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkPostQB" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdPrintRecon" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkRoundMCF" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboSource" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtdIncDate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom12" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom13" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom14" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: allocate		&& Allocates the income to the wells
		*m: buildmeter		&& Builds the metersub table for the master meter chosen.
		*m: calcalloc		&& Calculates the allocation.
		*m: calcdayson		&& Calculates dayson from the beginning and ending period ranges.
		*m: calctotal		&& Calculates the total income.
		*m: calcvariance		&& Calculates the variance and totals for the bottom of the screen.
		*m: report
		*m: viewdocument
		*p: cbatch
		*p: cidmets
		*p: lcalcprice
		*p: lqbpost
		*p: ndecimals
	*</DefinedPropArrayMethod>

	BufferMode = 2
	Caption = "Gas Meter Reconciliation"
	clistexpression = meterall.cbatch
	cnavworkarea = meterall
	cworkarea = meterall
	DoCreate = .T.
	Height = 510
	HelpContextID = 97
	lconfirmdelete = .T.
	Name = "FormDmmetall"
	ndecimals = 2
	Visible = .T.
	Width = 699
	_memberdata = <VFPData>
		<memberdata name="lnodataentry" type="property" display="lNoDataEntry"/>
		<memberdata name="calcvariance" type="method" display="CalcVariance"/>
		<memberdata name="viewdocument" display="ViewDocument"/>
		</VFPData>
	CMDATAMANAGER.Name = "CMDATAMANAGER"
	CMDATAMANAGER.TabIndex = 1
	CMDATAMANAGER.ZOrderSet = 0
	cmlookupmanager.Name = "cmlookupmanager"
	Mwresize1.lblHighLight.Name = "lblHighLight"
	Mwresize1.lblShading.Name = "lblShading"
	Mwresize1.Left = 254
	Mwresize1.Name = "Mwresize1"
	Mwresize1.Top = 92

	ADD OBJECT 'cboCashAcct' AS qbaccount WITH ;
		ControlSource = "meterall.cacctno", ;
		Height = 20, ;
		lbankonly = .T., ;
		Left = 81, ;
		Name = "cboCashAcct", ;
		TabIndex = 2, ;
		Top = 13, ;
		Width = 253, ;
		ZOrderSet = 35
		*< END OBJECT: ClassLib="..\custom\swcontrol.vcx" BaseClass="combobox" />

	ADD OBJECT 'cboSource' AS cbocomboboxcustom WITH ;
		ControlSource = "meterall.ctax", ;
		Height = 20, ;
		Left = 268, ;
		Name = "cboSource", ;
		SelectOnEntry = .T., ;
		TabIndex = 28, ;
		Top = 159, ;
		Width = 80, ;
		ZOrderSet = 41
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="combobox" />

	ADD OBJECT 'chkPostQB' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Don't Post to QuickBooks", ;
		ControlSource = "meterall.lqbpost", ;
		Left = 360, ;
		Name = "chkPostQB", ;
		TabIndex = 3, ;
		Top = 14, ;
		Value = .F., ;
		ZOrderSet = 37
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkRoundMCF' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Round MCF to nearest whole number", ;
		Left = 12, ;
		Name = "chkRoundMCF", ;
		TabIndex = 27, ;
		TabStop = .F., ;
		Top = 161, ;
		Value = .F., ;
		ZOrderSet = 39
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'cmdDocument' AS cmdcommandbuttoncustom WITH ;
		Caption = "Add \<Document", ;
		Height = 30, ;
		Left = 447, ;
		Name = "cmdDocument", ;
		TabIndex = 17, ;
		TabStop = .F., ;
		Top = 467, ;
		Width = 107, ;
		ZOrderSet = 27
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdEven' AS cmdcommandbuttoncustom WITH ;
		Caption = "Allocate \<Evenly", ;
		Height = 36, ;
		Left = 13, ;
		Name = "cmdEven", ;
		TabIndex = 23, ;
		TabStop = .F., ;
		Top = 465, ;
		Width = 72, ;
		WordWrap = .T., ;
		ZOrderSet = 33
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdLookMeter' AS cmdcommandbuttoncustom WITH ;
		Caption = "Meter ID", ;
		FontSize = 8, ;
		Height = 20, ;
		Left = 8, ;
		Name = "cmdLookMeter", ;
		TabIndex = 6, ;
		Top = 54, ;
		Width = 63, ;
		ZOrderSet = 2
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdLookPurch' AS cmdcommandbuttoncustom WITH ;
		Caption = "Purchaser", ;
		FontSize = 8, ;
		Height = 20, ;
		Left = 176, ;
		Name = "cmdLookPurch", ;
		TabIndex = 16, ;
		Top = 91, ;
		Width = 62, ;
		ZOrderSet = 8
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdPrintRecon' AS cmdcommandbuttoncustom WITH ;
		Caption = "Print Reconciliation", ;
		Height = 30, ;
		Left = 564, ;
		Name = "cmdPrintRecon", ;
		TabIndex = 39, ;
		Top = 467, ;
		Width = 107, ;
		ZOrderSet = 38
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'Grdgridcustom1' AS grdgridcustom WITH ;
		ColumnCount = 6, ;
		cworkarea = metersub, ;
		Height = 260, ;
		lcolumnmemory = .F., ;
		Left = 11, ;
		LinkMaster = "", ;
		Name = "Grdgridcustom1", ;
		Panel = 1, ;
		RecordSource = "metersub", ;
		RelationalExpr = "", ;
		TabIndex = 34, ;
		Top = 191, ;
		Width = 673, ;
		ZOrderSet = 17, ;
		Column1.ControlSource = "metersub.cwellid", ;
		Column1.FontSize = 8, ;
		Column1.Name = "Column1", ;
		Column1.Width = 92, ;
		Column2.ControlSource = "metersub.cwellname", ;
		Column2.FontSize = 8, ;
		Column2.Name = "Column2", ;
		Column2.ReadOnly = .T., ;
		Column2.Width = 184, ;
		Column3.BackColor = 255,255,128, ;
		Column3.ControlSource = "metersub.nsubmeter", ;
		Column3.FontSize = 8, ;
		Column3.Name = "Column3", ;
		Column3.Width = 92, ;
		Column4.ControlSource = "metersub.nallocation", ;
		Column4.FontSize = 8, ;
		Column4.Name = "Column4", ;
		Column4.Width = 91, ;
		Column5.ColumnOrder = 5, ;
		Column5.ControlSource = "metersub.ntotalsub", ;
		Column5.FontSize = 8, ;
		Column5.Name = "Column5", ;
		Column5.Width = 98, ;
		Column6.ColumnOrder = 6, ;
		Column6.ControlSource = "metersub.ntaxamt", ;
		Column6.FontSize = 8, ;
		Column6.Name = "Column6"
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="grid" />

	ADD OBJECT 'Grdgridcustom1.Column1.Header1' AS header WITH ;
		Caption = " Well ID", ;
		FontSize = 8, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'Grdgridcustom1.Column1.txtcWellID' AS txttextboxcustom WITH ;
		ControlSource = "metersub.cwellid", ;
		FontName = "Arial", ;
		FontSize = 8, ;
		Left = 37, ;
		Name = "txtcWellID", ;
		Top = 23
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'Grdgridcustom1.Column2.Header1' AS header WITH ;
		Caption = " Well Name", ;
		FontSize = 8, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'Grdgridcustom1.Column2.txtcWellName' AS txttextboxcustom WITH ;
		ControlSource = "metersub.cwellname", ;
		FontName = "Arial", ;
		Left = 33, ;
		Name = "txtcWellName", ;
		ReadOnly = .T., ;
		Top = 23
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'Grdgridcustom1.Column3.Header1' AS header WITH ;
		Alignment = 2, ;
		BackColor = 255,255,128, ;
		Caption = "Meter MCF", ;
		FontSize = 8, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'Grdgridcustom1.Column3.txtnSubMeter' AS txttextboxcustom WITH ;
		BackColor = 255,255,128, ;
		ControlSource = "metersub.nsubmeter", ;
		FontName = "Arial", ;
		Format = "999999.99", ;
		InputMask = "999999.99", ;
		Left = 53, ;
		Name = "txtnSubMeter", ;
		Top = 23
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'Grdgridcustom1.Column4.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "Allocated MCF", ;
		FontSize = 8, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'Grdgridcustom1.Column4.txtnAllocated' AS txttextboxcustom WITH ;
		ControlSource = "metersub.nallocation", ;
		FontName = "Arial", ;
		Left = 37, ;
		Name = "txtnAllocated", ;
		Top = 35
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'Grdgridcustom1.Column5.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "Allocated $", ;
		FontSize = 8, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'Grdgridcustom1.Column5.txtnTotalInc' AS txttextboxcustom WITH ;
		FontName = "Arial", ;
		FontSize = 8, ;
		Left = 49, ;
		Name = "txtnTotalInc", ;
		Top = 23
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'Grdgridcustom1.Column6.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "Deducts", ;
		FontSize = 8, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'Grdgridcustom1.Column6.Txttextboxcustom1' AS txttextboxcustom WITH ;
		FontSize = 8, ;
		Height = 12, ;
		Left = 34, ;
		Name = "Txttextboxcustom1", ;
		Top = 23
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'Lbllabelcustom1' AS lbllabelcustom WITH ;
		Caption = "Total", ;
		Left = 534, ;
		Name = "Lbllabelcustom1", ;
		TabIndex = 31, ;
		Top = 130, ;
		ZOrderSet = 19
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom10' AS lbllabelcustom WITH ;
		Caption = "Acct Date", ;
		Left = 531, ;
		Name = "Lbllabelcustom10", ;
		TabIndex = 32, ;
		Top = 15, ;
		ZOrderSet = 27
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom11' AS lbllabelcustom WITH ;
		Caption = "Cash Acct", ;
		Left = 22, ;
		Name = "Lbllabelcustom11", ;
		TabIndex = 36, ;
		Top = 15, ;
		ZOrderSet = 36
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom12' AS lbllabelcustom WITH ;
		Caption = "Deduct", ;
		Left = 218, ;
		Name = "Lbllabelcustom12", ;
		TabIndex = 40, ;
		Top = 161
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom13' AS lbllabelcustom WITH ;
		Caption = "Amt", ;
		Left = 361, ;
		Name = "Lbllabelcustom13", ;
		TabIndex = 41, ;
		Top = 161
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom14' AS lbllabelcustom WITH ;
		Caption = "Net Total", ;
		Left = 511, ;
		Name = "Lbllabelcustom14", ;
		Top = 161
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom2' AS lbllabelcustom WITH ;
		Caption = "Prod Period/Year:", ;
		Height = 16, ;
		Left = 11, ;
		Name = "Lbllabelcustom2", ;
		TabIndex = 21, ;
		Top = 93, ;
		Width = 87, ;
		ZOrderSet = 5
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom3' AS lbllabelcustom WITH ;
		Caption = "Price per MCF", ;
		Height = 16, ;
		Left = 271, ;
		Name = "Lbllabelcustom3", ;
		TabIndex = 32, ;
		Top = 130, ;
		Width = 69, ;
		ZOrderSet = 10
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom4' AS lbllabelcustom WITH ;
		Caption = "Range", ;
		Left = 409, ;
		Name = "Lbllabelcustom4", ;
		TabIndex = 12, ;
		Top = 56, ;
		ZOrderSet = 23
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom5' AS lbllabelcustom WITH ;
		Caption = "Master MCF", ;
		Height = 16, ;
		Left = 26, ;
		Name = "Lbllabelcustom5", ;
		TabIndex = 30, ;
		Top = 130, ;
		Width = 59, ;
		ZOrderSet = 12
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom6' AS lbllabelcustom WITH ;
		Caption = "Subs Total:", ;
		Height = 16, ;
		Left = 236, ;
		Name = "Lbllabelcustom6", ;
		TabIndex = 38, ;
		Top = 476, ;
		Width = 56, ;
		ZOrderSet = 16
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom7' AS lbllabelcustom WITH ;
		Caption = "Variance:", ;
		Height = 16, ;
		Left = 93, ;
		Name = "Lbllabelcustom7", ;
		TabIndex = 37, ;
		Top = 475, ;
		Width = 49, ;
		ZOrderSet = 18
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom8' AS lbllabelcustom WITH ;
		Caption = "-", ;
		Left = 501, ;
		Name = "Lbllabelcustom8", ;
		TabIndex = 14, ;
		Top = 56, ;
		ZOrderSet = 24
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom9' AS lbllabelcustom WITH ;
		Caption = "Days On", ;
		Left = 588, ;
		Name = "Lbllabelcustom9", ;
		TabIndex = 13, ;
		Top = 56, ;
		ZOrderSet = 26
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbltextcustom1' AS lbltextcustom WITH ;
		Caption = "/", ;
		FontSize = 10, ;
		Left = 124, ;
		Name = "Lbltextcustom1", ;
		TabIndex = 20, ;
		Top = 92, ;
		ZOrderSet = 34
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbltextcustom2' AS lbltextcustom WITH ;
		Caption = "Ref ID", ;
		Left = 528, ;
		Name = "Lbltextcustom2", ;
		TabIndex = 22, ;
		Top = 94, ;
		ZOrderSet = 36
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Swperiod' AS swperiod WITH ;
		ControlSource = "meterall.cperiod", ;
		ldefvalue = .T., ;
		Left = 99, ;
		lnoinit = .T., ;
		lrequired = .F., ;
		Name = "Swperiod", ;
		TabIndex = 14, ;
		Top = 91, ;
		ZOrderSet = 4
		*< END OBJECT: ClassLib="..\custom\swcontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'Swyear' AS swyear WITH ;
		ControlSource = "meterall.cyear", ;
		ldefvalue = .T., ;
		Left = 130, ;
		lnoinit = .T., ;
		lrequired = .F., ;
		Name = "Swyear", ;
		TabIndex = 15, ;
		Top = 91, ;
		ZOrderSet = 6
		*< END OBJECT: ClassLib="..\custom\swcontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcBegRange' AS txttextboxcustom WITH ;
		ControlSource = "meterall.cbegrange", ;
		Height = 20, ;
		InputMask = "99/99", ;
		Left = 451, ;
		Name = "txtcBegRange", ;
		TabIndex = 9, ;
		Top = 54, ;
		Width = 48, ;
		ZOrderSet = 21
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcEndRange' AS txttextboxcustom WITH ;
		ControlSource = "meterall.cendrange", ;
		Height = 20, ;
		InputMask = "99/99", ;
		Left = 507, ;
		Name = "txtcEndRange", ;
		TabIndex = 10, ;
		Top = 54, ;
		Width = 48, ;
		ZOrderSet = 22
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcMeterID' AS txtquickfill WITH ;
		clistexpression = meters.cmeterid, ;
		clistworkarea = meters, ;
		ControlSource = "meterall.cmeterid", ;
		Format = "!", ;
		Height = 20, ;
		Left = 80, ;
		lrequired = .T., ;
		Name = "txtcMeterID", ;
		TabIndex = 7, ;
		Top = 54, ;
		Width = 88, ;
		ZOrderSet = 3
		*< END OBJECT: ClassLib="..\custom\cgadget.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcMeterName' AS txttextboxcustom WITH ;
		BackColor = 212,208,200, ;
		Height = 20, ;
		Left = 172, ;
		Name = "txtcMeterName", ;
		TabIndex = 8, ;
		Top = 54, ;
		Width = 212, ;
		ZOrderSet = 7
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcRefID' AS txttextboxcustom WITH ;
		ControlSource = "meterall.crefid", ;
		Height = 20, ;
		Left = 564, ;
		MaxLength = 15, ;
		Name = "txtcRefID", ;
		TabIndex = 19, ;
		Top = 91, ;
		Width = 115, ;
		ZOrderSet = 35
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcRevKey' AS txtquickfill WITH ;
		clistexpression = crevkey, ;
		clistworkarea = revsrc, ;
		ControlSource = "meterall.crevkey", ;
		Format = "!", ;
		Height = 20, ;
		Left = 239, ;
		lrequired = .T., ;
		MaxLength = 10, ;
		Name = "txtcRevKey", ;
		TabIndex = 17, ;
		Top = 91, ;
		Width = 95, ;
		ZOrderSet = 32
		*< END OBJECT: ClassLib="..\custom\cgadget.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcRevname' AS txttextboxcustom WITH ;
		BackColor = 212,208,200, ;
		Height = 20, ;
		Left = 335, ;
		Name = "txtcRevname", ;
		TabIndex = 18, ;
		Top = 91, ;
		Width = 181, ;
		ZOrderSet = 9
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtdIncDate' AS dpk WITH ;
		ControlSource = "meterall.dincdate", ;
		Height = 20, ;
		Left = 583, ;
		lmorethan90 = .T., ;
		lnocurrentdate = .F., ;
		lrequired = .T., ;
		Name = "txtdIncDate", ;
		TabIndex = 4, ;
		Top = 13, ;
		Visible = .T., ;
		Width = 67
		*< END OBJECT: ClassLib="..\custom\swdate.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtnDaysOn' AS txttextboxcustom WITH ;
		ControlSource = "meterall.ndayson", ;
		Height = 20, ;
		InputMask = "999", ;
		Left = 642, ;
		Name = "txtnDaysOn", ;
		TabIndex = 11, ;
		Top = 54, ;
		Width = 37, ;
		ZOrderSet = 25
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtnMaster' AS txttextboxcustom WITH ;
		ControlSource = "meterall.nmaster", ;
		Height = 20, ;
		InputMask = "99999999.99", ;
		Left = 86, ;
		lrequired = .T., ;
		Name = "txtnMaster", ;
		TabIndex = 24, ;
		Top = 128, ;
		Width = 142, ;
		ZOrderSet = 13
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtnNetAmount' AS txttextboxcustom WITH ;
		Alignment = 3, ;
		ControlSource = "", ;
		Height = 20, ;
		InputMask = "99,999,999.99", ;
		Left = 564, ;
		Name = "txtnNetAmount", ;
		TabIndex = 26, ;
		Top = 159, ;
		Value = 0, ;
		Width = 115, ;
		ZOrderSet = 20
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtnPrice' AS txttextboxcustom WITH ;
		Comment = "", ;
		ControlSource = "meterall.ngasprice", ;
		Height = 20, ;
		InputMask = "9999.999999", ;
		Left = 341, ;
		lrequired = .T., ;
		Name = "txtnPrice", ;
		TabIndex = 25, ;
		Top = 128, ;
		Width = 122, ;
		ZOrderSet = 11
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtnSubs' AS txttextboxcustom WITH ;
		ControlSource = "meterall.nsubstotal", ;
		Height = 20, ;
		Left = 293, ;
		Name = "txtnSubs", ;
		TabIndex = 36, ;
		Top = 474, ;
		Width = 96, ;
		ZOrderSet = 15
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtnTotal' AS txttextboxcustom WITH ;
		ControlSource = "meterall.ntotalinc", ;
		Height = 20, ;
		InputMask = "999,999,999.99", ;
		Left = 565, ;
		Name = "txtnTotal", ;
		TabIndex = 26, ;
		Top = 128, ;
		Width = 114, ;
		ZOrderSet = 20
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtnVariance' AS txttextboxcustom WITH ;
		ControlSource = "meterall.nvariance", ;
		Height = 20, ;
		Left = 144, ;
		Name = "txtnVariance", ;
		TabIndex = 35, ;
		Top = 474, ;
		Width = 77, ;
		ZOrderSet = 14
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtTaxAmount' AS txttextboxcustom WITH ;
		ControlSource = "meterall.ntotaltax", ;
		Height = 20, ;
		InputMask = "999,999,999.99", ;
		Left = 388, ;
		Name = "txtTaxAmount", ;
		TabIndex = 29, ;
		Top = 159, ;
		Width = 114, ;
		ZOrderSet = 20
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />
	
	PROCEDURE Activate
		IF DODEFAULT()
		   thisform.cbatch = meterall.cbatch
		   thisform.txtnNetAmount.Value = thisform.txtntotal.Value - thisform.txttaxAmount.value
		ENDIF   
	ENDPROC

	PROCEDURE allocate		&& Allocates the income to the wells
		LOCAL llUnalloc, lcBatch, ldIncDate, lcRevKey, lnDaysOn, lcBegRange, lcEndRange, lnPrice
		LOCAL lcYear, lcPeriod, lcGroup, lcRefid, llSendtoAllocate
		
		*
		*  Allocates the calculated MCF and $ to the income or incsusp table
		*
		lcBatch    = meterall.cBatch
		lcRevKey   = meterall.cRevKey
		ldIncDate  = meterall.dIncDate
		lcBegRange = meterall.cBegRange
		lcEndRange = meterall.cEndRange
		lnDaysOn   = meterall.nDaysOn
		lnPrice    = meterall.nGasPrice
		lcYear     = meterall.cYear
		lcPeriod   = meterall.cPeriod
		lcRefid    = meterall.cRefID
		
		swselect('options')
		GO TOP
		llSendtoAllocate = lSendToAllocate  &&  Setting for whether to send everything to the allocation file
		
		IF llSendtoAllocate OR (EMPTY(lcPeriod) AND EMPTY(lcYear))  &&  No year and period, so send it to the allocation file
		   llUnalloc = .T.
		   WAIT WINDOW NOWAIT 'Sending Income Entries to Allocation File...'
		ELSE
		   llUnalloc = .F.
		   WAIT WINDOW NOWAIT 'Allocating Income Entries...'
		ENDIF
		
		IF (NOT EMPTY(THIS.swperiod.VALUE) AND EMPTY(THIS.swyear.VALUE)) OR (EMPTY(THIS.swperiod.VALUE) AND NOT EMPTY(THIS.swyear.VALUE))
		   THISFORM.oMessage.warning('Either the year and period must be both empty, or they must be both filled in.')
		   RETURN .F.
		ENDIF
		
		*
		*  Check to see if this revenue has already been closed
		*
		SELE income
		LOCATE FOR cBatch = lcBatch AND nRunNo <> 0
		IF FOUND()
		   THISFORM.oMessage.warning('These revenue entries have been allocated and closed. ' + ;
		      'No changes are possible.')
		   RETURN .F.
		ENDIF
		
		*
		*  Remove the entries from previous allocations
		*
		swselect('incsusp')
		SCAN FOR cBatch == lcBatch
		   DELETE NEXT 1
		ENDSCAN
		
		swselect('income')
		SCAN FOR cBatch == lcBatch
		   DELETE NEXT 1
		ENDSCAN
		
		swselect('expense')
		SCAN FOR cBatch == lcBatch
		   DELE NEXT 1
		ENDSCAN
		*
		*  Scan through the sub-meters and allocate the mcf and revenue
		*
		swselect('metersub')
		SCAN FOR cBatch == lcBatch
		   SCATTER MEMVAR
		   m.lAllocated = .F.
		   m.dRevDate   = ldIncDate
		   m.dPostDate  = ldIncDate
		   m.cRevKey    = lcRevKey
		   m.nUnits     = m.nAllocation
		   m.nPrice     = lnPrice
		   m.nTotalInc  = m.nTotalSub
		   m.cSource    = 'MCF'
		   m.nDaysOn    = lnDaysOn
		   m.cBegRange  = lcBegRange
		   m.cEndRange  = lcEndRange
		   m.cYear      = lcYear
		   m.cPeriod    = lcPeriod
		   m.cBatch     = lcBatch
		   m.cRefID     = lcRefid
		   m.lCSTran    = .T.
		   m.cOwnerID   = ''
		   m.lClosed    = .F.
		
		   IF NOT llUnalloc
		      m.cBatch  = meterall.cBatch
		      * Insert into the income table
		      m.cidinco = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Income')
		      SET DELETED OFF
		      SELECT income1
		      SET ORDER TO cidinco
		      DO WHILE SEEK(m.cidinco)
		         m.cidinco = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Income')
		      ENDDO
		      SET DELETED ON
		      m.cYear      = lcYear
		      m.cPeriod    = lcPeriod
		      m.dAcctDate  = ldIncDate
		      m.nRunNo     = 0
		      m.cRunYear   = ''
		      * Don't save zero amount entries
		      IF m.nTotalInc <> 0
		         INSERT INTO income FROM MEMVAR
		      ENDIF
		
		      * Insert taxes into the income table
		      IF metersub.ntaxamt <> 0
		         IF metersub.ctax # 'MKTG'
		            m.cidinco = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Income')
		            SET DELETED OFF
		            SELECT income1
		            SET ORDER TO cidinco
		            DO WHILE SEEK(m.cidinco)
		               m.cidinco = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Income')
		            ENDDO
		            SET DELETED ON
		            m.cYear      = lcYear
		            m.cPeriod    = lcPeriod
		            m.dAcctDate  = ldIncDate
		            m.cSource    = metersub.ctax
		            m.nRunNo     = 0
		            m.cRunYear   = ''
		            m.nTotalInc  = metersub.ntaxamt
		            m.nUnits     = 0
		            m.nPrice     = 0
		            * Don't save zero amount entries
		            IF m.nTotalInc <> 0
		               INSERT INTO income FROM MEMVAR
		            ENDIF
		         ELSE
		            m.cidexpe = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Expense')
		            SET DELETED OFF
		            SELECT expense1
		            SET ORDER TO cidexpe
		            DO WHILE SEEK(m.cidexpe)
		               m.cidexpe = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Expense')
		            ENDDO
		            SET DELETED ON
		            swselect('expcat')
		            LOCATE FOR ccatcode = 'MKTG'
		            IF FOUND()
		               m.ccateg = ccateg
		               m.cexpclass = cexpclass
		            ELSE
		               m.ccatcode = 'MKTG'
		               m.ccateg   = 'Marketing'
		               m.cdescrip = 'Marketing'
		               m.cexpclass = '0'
		               m.cidexpc = 'MKTG'
		               TRY 
		                  INSERT INTO expcat FROM memvar
		               CATCH
		               ENDTRY 
		               m.ccateg = 'Marketing'
		               m.cexpclass = '0'
		            ENDIF 
		            m.cpayee   =  thisform.txtcRevname.Value 
		            m.cYear      = lcYear
		            m.cPeriod    = lcPeriod
		            m.dExpDate  = ldIncDate
		            m.ccatcode    = metersub.ctax
		            m.nRunNo     = 0
		            m.cRunYear   = ''
		            m.namount  = metersub.ntaxamt * -1
		            m.nUnits     = 0
		            m.nPrice     = 0
		            * Don't save zero amount entries
		            IF m.namount <> 0
		               INSERT INTO expense FROM MEMVAR
		            ENDIF
		         ENDIF
		      ENDIF
		   ELSE
		      *  The year and period were left blank so we send the revenue to the allocation table
		      m.cidincs = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Income')
		      SET DELETED OFF
		      SELECT incsusp1
		      SET ORDER TO cidincs
		      DO WHILE SEEK(m.cidincs)
		         m.cidincs = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Income')
		      ENDDO
		      SET DELETED ON
		      m.cYear      = lcYear
		      m.cPeriod    = lcPeriod
		      m.dAcctDate  = ldIncDate
		      m.nRunNo     = 0
		      m.cRunYear   = ''
		      * Don't save zero amount entries
		      IF m.nTotalInc <> 0
		         INSERT INTO incsusp FROM MEMVAR
		      ENDIF
		
		      * Insert taxes into the income table
		      IF metersub.ntaxamt <> 0
		         m.cidincs = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Income')
		         SET DELETED OFF
		         SELECT incsusp1
		         SET ORDER TO cidincs
		         DO WHILE SEEK(m.cidincs)
		            m.cidincs = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Income')
		         ENDDO
		         SET DELETED ON
		         m.cYear      = lcYear
		         m.cPeriod    = lcPeriod
		         m.dAcctDate  = ldIncDate
		         m.cSource    = metersub.ctax
		         m.nRunNo     = 0
		         m.cRunYear   = ''
		         m.nTotalInc  = metersub.ntaxamt
		         m.nUnits     = 0
		         m.nPrice     = 0
		         * Don't save zero amount entries
		         IF m.nTotalInc <> 0
		            INSERT INTO incsusp FROM MEMVAR
		         ENDIF
		      ENDIF
		   ENDIF
		ENDSCAN
		
		swselect('meterall')
		
		WAIT CLEAR
		
		IF llUnalloc AND NOT llSendtoAllocate  &&  If not allocated, warn them
		   THISFORM.oMessage.DISPLAY('Since a year and period were not entered, this revenue has been sent to the allocation file.')
		ENDIF
		THISFORM.setnextcontrol(THISFORM.cboCashAcct)
		
		RETURN .T.
		
	ENDPROC

	PROCEDURE buildmeter		&& Builds the metersub table for the master meter chosen.
		LOCAL lnCount
		
		*
		*  Check to see if we already have sub records for the given meter
		*
		swselect('meterall')
		m.cbatch = cbatch
		
		swselect('metersub')
		SUM(nSubMeter) FOR cbatch == m.cbatch TO lnSum
		
		IF lnSum > 0
		   RETURN
		ENDIF
		
		SELECT cwellid, cwellname ;
		   FROM wells ;
		   WHERE cMeterId = meterall.cmeterid ;
		      OR cMeterID2 = meterall.cMeterID ;
		      OR cMeterID3 = meterall.cMeterID ;
		   INTO CURSOR Tempwell ;
		   ORDER BY cWellID
		   
		IF _tally > 0
		   swselect('metersub')
		   DELE FOR cbatch == m.cbatch
		   SELECT tempwell
		   SCAN
		      SCATTER MEMVAR
		      thisform.cmdatamanager.new('Metersub')
		      thisform.cmdatamanager.replace('Metersub','CWellID', m.cWellID)
		      thisform.cmdatamanager.replace('Metersub','CWellName', m.cWellName)
		      thisform.cmdatamanager.replace('Metersub','cMeterid', meterall.cmeterid)
		   ENDSCAN
		   swselect('metersub')
		   GO TOP
		   thisform.refresh()
		   swselect('meterall')
		ENDIF      
		
		Thisform.grdgridcustom1.column3.BackColor = RGB(255,255,128)     
	ENDPROC

	PROCEDURE calcalloc		&& Calculates the allocation.
		LOCAL lnVariance, lnSubsTot, lcBatch, lnPrice, lnAllocation, lnTotalInc, lnRecNo
		LOCAL lnTotal, lnTotSub, lcSaveRec, lcidmets, lnTotalMCF, lnDecimals
		*
		*  Calculates the allocation to each well
		*
		
		lnDecimals = thisform.ndecimals
		
		lcBatch = thisform.cbatch
		
		*  Don't use the price they entered for the calculations.  If they overtyped the total, it's meaningless
		lnPrice = swROUND(meterall.nTotalInc/meterall.nMaster,4)
		
		STORE 0 TO lnVariance, lnSubsTot, lnAllocation, lnTotalInc
		
		* Total the well meters
		swselect('metersub')
		GO bott
		lcidmets  = metersub.cidmets
		lcSaveRec = lcidmets
		
		thisform.CalcVariance()
		
		swselect('metersub')
		SCAN FOR cBatch == lcBatch
		   lnSubsTot = lnSubsTot + metersub.nSubMeter
		ENDSCAN
		
		*  Don't try to divide by zero
		IF lnSubsTot = 0
		   swselect('metersub')
		   LOCATE FOR cidmets == lcidmets
		   RETURN
		ENDIF
		
		* Calculate the variance
		lnVariance = meterall.nMaster/lnSubsTot
		
		lnMasterInc = meterall.ntotalinc
		lnMasterMCF = meterall.nmaster
		lnMasterTax = meterall.ntotaltax * -1
		STORE 0 TO lnTotalMCF, lnSubMCF, lnSubInc, lnSubTax, lnTaxAlloc, lnTaxPct
		swselect('metersub')
		SCAN FOR cBatch == lcBatch
		  lnAllocation = swround(nSubMeter * lnVariance,lnDecimals)
		  IF nsubmeter <> 0
		     lnTaxPct     = lnallocation/lnMasterMCF
		  ELSE
		     lnTaxPct = 0
		  ENDIF   
		  lnTotalInc   = swround(lnAllocation * lnPrice,lnDecimals)
		  lnSubInc     = lnSubInc + lnTotalInc
		  lnSubMCF     = lnSubMCF + lnAllocation
		*!*	  IF lnMasterTax <> 0
		     lnTaxAlloc = swround(lnMasterTax*lnTaxPct,lnDecimals) 
		     lnSubTax   = lnSubTax - lnTaxAlloc
		     IF metersub.ntaxamt <> lnTaxAlloc
		        thisform.cmdatamanager.replace('metersub','ntaxamt',lntaxalloc)
		        thisform.cmdatamanager.replace('metersub','ctax',meterall.ctax)
		     ENDIF
		*!*	  ENDIF
		  IF metersub.nAllocation <> lnAllocation  
		     thisform.cmdatamanager.replace('metersub','nallocation',lnallocation)
		  ENDIF
		  IF metersub.nTotalSub <> lnTotalInc   
		     thisform.cmdatamanager.replace('metersub','ntotalsub',lntotalinc)
		  ENDIF   
		ENDSCAN
		
		* If the sub totals don't match the total dollars
		* adjust the 1st entry
		IF lnMasterInc <> lnSubInc
		   lnDiff = lnMasterInc - lnSubInc
		   swselect('metersub')
		   GO TOP 
		   LOCATE FOR cbatch == lcbatch AND nAllocation <> 0
		   IF FOUND()
		      thisform.cmdatamanager.replace('metersub','ntotalsub',ntotalsub+lndiff)
		   ENDIF   
		ENDIF   
		
		IF lnMasterMCF <> lnSubMCF
		   lnDiff = lnMasterMCF - lnSubMCF
		   swselect('metersub')
		   GO TOP 
		   LOCATE FOR cbatch == lcbatch AND nAllocation <> 0
		   IF FOUND()
		      thisform.cmdatamanager.replace('metersub','nallocation',nallocation+lndiff)
		   ENDIF   
		ENDIF   
		
		IF lnMasterTax <> lnSubTax
		   lnDiff = lnMasterTax + lnSubTax
		   swselect('metersub')
		   GO TOP 
		   LOCATE FOR cbatch == lcbatch AND nAllocation <> 0
		   IF FOUND()
		      thisform.cmdatamanager.replace('metersub','ntaxamt',ntaxamt+lndiff)
		   ENDIF   
		ENDIF   
		
		swselect('metersub')
		LOCATE FOR cidmets == lcidmets
		
		thisform.cmdatamanager.setrecordposition('Metersub')
		thisform.lChanged = .t.
		thisform.grdgridcustom1.Refresh()
		
		
		       
		  
		  
		  
		
		
		
		   
		
		
		
	ENDPROC

	PROCEDURE calcdayson		&& Calculates dayson from the beginning and ending period ranges.
		LOCAL lcBegRange, lcEndRange, lcYear, lcYear1, ldDate1, ldDate2, lnDays
		
		lcYear = STR(YEAR(DATE()),4)
		
		swselect('options')
		GO TOP
		glCalcDays = lCalcDays
		
		lcBegRange = THISFORM.txtcBegRange.VALUE
		lcEndRange = THISFORM.txtcEndRange.VALUE
		
		*
		*  If both oil & gas periods are displayed, use the gas period to
		*  calculate the dayson.  Otherwise use the oil period.
		*
		IF glCalcDays
		   IF LEFT(lcBegRange,2) > LEFT(lcEndRange,2)
		      lcYear1 = STR(VAL(lcYear)+1,4)
		   ELSE
		      lcYear1 = lcYear
		   ENDIF
		   ldDate1 = CTOD(lcBegRange+'/'+lcYear)
		   ldDate2 = CTOD(lcEndRange+'/'+lcYear1)
		   lnDays  = ldDate2 - ldDate1
		   thisform.txtnDaysOn.setvalue(lnDays)
		   thisform.txtnDaysOn.refresh()
		ENDIF
		
		swselect('meterall')
	ENDPROC

	PROCEDURE calctotal		&& Calculates the total income.
		
		IF meterall.ntotalinc <> ROUND(meterall.nmaster * meterall.ngasprice,2)
		   thisform.cmdatamanager.replace('Meterall','Ntotalinc',ROUND(meterall.nMaster*meterall.ngasprice,2))
		   thisform.txtnTotal.Refresh()
		ENDIF   
		
		thisform.txtnNetAmount.Value = thisform.txtntotal.Value - thisform.txttaxAmount.value
		
		thisform.txtnnetAmount.Refresh()
		
	ENDPROC

	PROCEDURE calcvariance		&& Calculates the variance and totals for the bottom of the screen.
		LOCAL lnVariance, lnSubsTot
		
		lcBatch = thisform.cbatch
		
		STORE 0 TO lnVariance, lnSubsTot
		
		* Total the well meters
		swselect('metersub')
		GO bott
		lcidmets  = metersub.cidmets
		lcSaveRec = lcidmets
		
		SCAN FOR cBatch == lcBatch
		   lnSubsTot = lnSubsTot + metersub.nSubMeter
		ENDSCAN
		
		*  Don't try to divide by zero
		IF lnSubsTot = 0
		   LOCATE FOR cidmets == lcidmets
		   RETURN
		ENDIF
		
		* Save the substotal
		IF meterall.nsubstotal <> lnSubsTot
		   thisform.cmdatamanager.replace('Meterall','Nsubstotal',lnSubsTot)
		   thisform.txtnsubs.Refresh()
		ENDIF   
		   
		* Calculate the variance
		lnVariance = meterall.nMaster/lnSubsTot
		IF meterall.nvariance <> lnVariance
		   thisform.txtnVariance.set('value',lnVariance)
		ENDIF   
	ENDPROC

	PROCEDURE Init
		IF DODEFAULT()
		   sele glopt
		   go top
		   this.lQBPost = NOT lDMNoPost
		   
		      IF m.goApp.lDocuments
		      thisform.AddObject('oFileDialog','sffiledialog')
		      swSELECT('documents')
		      m.cfk      = 'GM'+meterall.cbatch
		      LOCATE FOR cfk == m.cfk
		      IF FOUND()
		         thisform.cmdDocument.Caption = 'View Document'
		      ELSE
		         thisform.cmdDocument.Caption = 'Add Document'
		      ENDIF 
		      thisform.cmdDocument.visible = .t.
		      
		   ELSE
		      thisform.cmdDocument.visible = .f.
		   ENDIF 
		
		
		ENDIF         
	ENDPROC

	PROCEDURE list
		LPARAMETERS cworkarea
		LOCAL lcList, lnRecNo
		PRIV llOK
		
		llOK = .F.
		
		lcList = 'cmeterid\Meter ID,dincdate\Date,cyear\Year,cperiod\Period,nmaster\Master Reading'
		SELECT cbatch, cmeterid, dincdate, cyear, cperiod, nmaster FROM meterall ;
		   INTO CURSOR tempmeter readwrite;
		   ORDER BY cmeterid
		
		SELECT tempmeter
		INDEX on cmeterid TAG cmeterid
		INDEX on dincdate TAG dincdate
		INDEX on cyear TAG cyear
		INDEX on cperiod TAG cperiod
		INDEX on nmaster TAG nmaster
		   
		DO FORM custom\picklist WITH 'tempmeter', lcList, thisform.txtcmeterid.value, 5, .t., .t.,"Reconciliation Lookup"
		
		IF llOK
		   swselect('meterall')
		   SET ORDER to cbatch
		   SEEK(tempmeter.cbatch)
		   thisform.cmdatamanager.recordwasmoved('meterall')
		ENDIF   
		
		thisform.refresh()
		
	ENDPROC

	PROCEDURE Load
		IF DODEFAULT()
		   *  Get the cursor of QuickBooks Accounts
		   m.goApp.oQB.QBAccounts('',.F.,.T.,thisform.datasessionid)
		ENDIF   
	ENDPROC

	PROCEDURE report
		DO meterprint WITH meterall.cbatch, 'S', thisform.DataSessionId
		
	ENDPROC

	PROCEDURE save
		LPARAMETERS cworkarealist
		
		thisform.txtcmeterid.setfocus()
		
		DODEFAULT(cworkarealist)
	ENDPROC

	PROCEDURE viewdocument
		LPARAMETERS tcBatch
		
		LOCAL lnReturn, llReturn, lcOutputFile
		LOCAL liKey, lcPath
		
		
		swselect('documents')
		SET ORDER TO cFK
		IF SEEK(tcBatch)
		   lcOutputFile = cPath
		
		   llReturn = .T.
		
		   IF NOT FILE(lcOutputFile)
		      llReturn = .F.
		   ENDIF
		
		   viewdocument(lcOutputFile)
		
		ENDIF
	ENDPROC

	PROCEDURE cboSource.Init
		THIS.ADDLISTITEM('     ',1)
		THIS.ADDLISTITEM('GTAX1',2)
		THIS.ADDLISTITEM('GTAX2',3)
		THIS.ADDLISTITEM('GTAX3',4)
		THIS.ADDLISTITEM('GTAX4',5)
		THIS.AddListItem('MKTG', 6)
		DODEFAULT()
	ENDPROC

	PROCEDURE chkRoundMCF.Valid
		IF THIS.VALUE = .F.
		   THISFORM.grdGridCustom1.Column3.txtnSubMeter.INPUTMASK = '999999.99'
		   THISFORM.grdGridCustom1.Column3.txtnSubMeter.FORMAT = '999999.99'
		   THISFORM.grdGridCustom1.Column3.INPUTMASK = '999999.99'
		   THISFORM.grdGridCustom1.Column3.FORMAT = '999999.99'
		   THISFORM.nDecimals = 2
		ELSE
		   THISFORM.grdGridCustom1.Column3.txtnSubMeter.INPUTMASK = '99999999'
		   THISFORM.grdGridCustom1.Column3.txtnSubMeter.FORMAT = '99999999'
		   THISFORM.grdGridCustom1.Column3.INPUTMASK = '99999999'
		   THISFORM.grdGridCustom1.Column3.FORMAT = '99999999'
		   THISFORM.nDecimals = 0
		   lcbatch = meterall.cbatch
		   swselect('metersub')
		   SCAN FOR cbatch == lcbatch
		     REPLACE nsubmeter WITH swround(nsubmeter,0)
		   ENDSCAN 
		ENDIF
		
		thisform.calcalloc()
	ENDPROC

	PROCEDURE CMDATAMANAGER.afternav
		LPARAMETERS cworkarea
		
		IF m.cworkarea = 'Meterall'
		
		    swselect('meters')
		    SET ORDER TO MeterId
		    IF SEEK(meterall.cmeterid)
		        THISFORM.txtcMeterName.VALUE = cMeterDesc
		        THISFORM.txtcMeterName.REFRESH()
		    ELSE
		        THISFORM.txtcMeterName.VALUE = ''
		        THISFORM.txtcMeterName.REFRESH()
		    ENDIF
		
		    swselect('revsrc')
		    SET ORDER TO crevkey
		    IF SEEK(meterall.crevkey)
		        THISFORM.txtcRevName.VALUE = crevname
		        THISFORM.txtcRevName.REFRESH()
		    ELSE
		        THISFORM.txtcRevName.VALUE = ''
		        THISFORM.txtcRevName.REFRESH()
		    ENDIF
		
		    IF m.goApp.lDocuments
		        swselect('documents')
		        m.cfk      = 'GM' + meterall.cbatch
		        LOCATE FOR cfk == m.cfk
		        IF FOUND()
		            THISFORM.cmdDocument.CAPTION = 'View Document'
		        ELSE
		            THISFORM.cmdDocument.CAPTION = 'Add Document'
		        ENDIF
		    ENDIF
		
		    THISFORM.txtnNetAmount.VALUE = meterall.nTotalInc - meterall.nTotalTax
		    THISFORM.txtnNetAmount.REFRESH()
		
		    swselect('meterall')
		
		ENDIF
		
		
		
	ENDPROC

	PROCEDURE CMDATAMANAGER.afternew
		LPARAMETERS cworkarea
		LOCAL lcBatch, lcidmets
		
		IF m.cWorkArea = 'Meterall'
		   lcBatch = thisform.oRegistry.IncrementCounter('%Shared.Counters.Batch')
		   SET DELETED OFF 
		   SELECT meterall1
		   SET ORDER to cbatch
		   DO WHILE SEEK(lcBatch)
		      lcBatch = thisform.oRegistry.IncrementCounter('%Shared.Counters.Batch')
		   ENDDO
		   SET DELETED ON   
		   swselect('meterall')
		   REPL cBatch WITH lcBatch
		   thisform.cbatch = lcBatch
		   thisform.setnextcontrol(thisform.cbocashacct)
		   thisform.cboCashAcct.listitemid = 1
		   thisform.txtcmetername.value = ''
		   thisform.txtcrevname.value = ''
		   thisform.txtdIncDate.set('value',DATE())
		   thisform.cboSource.set('value','    ')
		   IF m.goapp.oQB.lQBActive
		      thisform.chkPostQB.set('value',.t.)
		   ELSE
		      thisform.chkPostQB.set('value',.f.)
		   ENDIF       
		ENDIF
		
		IF m.cWorkArea = 'Metersub'
		   lcidmets = thisform.oRegistry.IncrementCounter('%Shared.Counters.Meter Sub')   
		   SET DELETED OFF 
		   SELECT metersub1
		   SET ORDER to cidmets
		   DO WHILE SEEK(lcidmets)
		      lcidmets = thisform.oRegistry.IncrementCounter('%Shared.Counters.Meter Sub')
		   ENDDO
		   SET DELETED ON   
		   swselect('metersub')
		   REPL cidmets WITH lcidmets
		ENDIF   
	ENDPROC

	PROCEDURE CMDATAMANAGER.beforedelete
		LPARAMETERS cworkarea
		LOCAL lcBatch
		LOCAL llReturn, loDelResp, loError, loRcptDel, loRequest, loResponse
		
		llReturn = .T.
		TRY
		   IF m.cworkarea = 'Meterall'
		
		      SELE meterall
		      lcBatch = cBatch
		
		      *  Delete income entries from this meter allocation
		      IF NOT EMPTY(lcBatch)
		         swselect('income')
		         SCAN FOR cBatch == lcBatch
		            DELE NEXT 1
		         ENDSCAN
		         swselect('incsusp')
		         SCAN FOR cBatch == lcBatch
		            DELE NEXT 1
		         ENDSCAN
		         swselect('expense')
		         SCAN FOR cBatch == lcBatch
		            DELE NEXT 1
		         ENDSCAN
		      ENDIF
		
		      IF m.goapp.oQB.lQBActive
		         *  Remove any previous batch entries
		         IF NOT EMPTY(meterall.ctxnid)
		            * add a request to delete the receipt
		            llReturn = m.goapp.oQB.DeleteTxnID(meterall.ctxnid, 15)
		            IF NOT llReturn
		               EXIT
		            ENDIF
		         ENDIF
		      ELSE
		         IF NOT EMPTY(meterall.ctxnid)
		            MESSAGEBOX('The link to QuickBooks is not active. This meter reconciliation was originally posted to QuickBooks. ' + ;
		               'It cannot be deleted unless the link to QuickBooks is active.', 48, 'QuickBooks Link Problem')
		            llReturn = .F.
		            EXIT
		         ENDIF
		      ENDIF
		
		      IF llReturn
		         SELECT income
		         TABLEUPDATE(.T.)
		         SELECT incsusp
		         TABLEUPDATE(.T.)
		         SELECT expense
		         TABLEUPDATE(.T.)
		      ENDIF
		   ENDIF
		
		CATCH TO loError
		   llReturn = .F.
		   DO errorlog WITH 'BeforeDelete', loError.LINENO, 'DMMeterall', loError.ERRORNO, loError.MESSAGE, '', loError
		   MESSAGEBOX('Unable to process the gas reconciliation at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		      'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		RETURN llReturn
		
	ENDPROC

	PROCEDURE CMDATAMANAGER.beforeupdate
		LPARAMETERS cworkarealist
		LOCAL lcbatch, lcgroup, lcwellid, lcyear, lcperiod, ldincdate, lcrevname
		LOCAL lcrevclear, lcidchec, lnAmount
		LOCAL lcListID, lcMessage, lcreq, lcrevkey, lcxml, llNoQBPost, llResult, llReturn, loError
		LOCAL loaddresp, lodelresp, loentry, lonewcheck, lorcptadd, lorcptdel, lorequest, loresp, loresponse
		LOCAL ctxnid, cwellid, ntaxamt, ntotalsub
		LOCAL oWellInv
		
		lnAmount = 0
		llReturn = .T.
		
		TRY
		   lcbatch   = meterall.cbatch
		   lcyear    = meterall.cyear
		   lcperiod  = meterall.cperiod
		   ldincdate = meterall.dincdate
		   lcrevkey  = meterall.crevkey
		   lcidchec  = meterall.cidchec
		   lcwellid  = ''
		   lcgroup   = ''
		   STORE 0 TO lnGas, lnTax, lnAmount
		
		   SWSELECT('wells')
		   GO TOP
		   
		   oWellInv = CREATEOBJECT('swbizobj_wellinv')
		
		   SWSELECT('glopt')
		   lcrevclear = cQBrevclear
		   llNoQBPost = THISFORM.chkPostQB.VALUE
		
		   SWSELECT('revsrc')
		   SET ORDER TO crevkey
		   IF SEEK(lcrevkey)
		      lcrevname = crevname
		   ELSE
		      lcrevname = 'Unknown'
		   ENDIF
		
		   IF m.goapp.oQB.lqbactive
		
		      m.goApp.oQB.ClearErrorInfo()
		      
		      * get a message set request object (version 1.1 xml)
		      lorequest = m.goapp.oQB.oQBRequest
		
		      * set the on error attribute for the request
		      lorequest.ATTRIBUTES.onerror = 1
		      lorequest.clearrequests()
		
		      IF NOT llNoQBPost
		
		         * Check to make sure everthing QuickBooks related is in sync
		         SELE meterall
		         IF EMPTY(meterall.cacctno)
		            THISFORM.omessage.warning('You must specify a QuickBooks Bank account for this receipt.')
		            llReturn = .F.
		            EXIT
		         ENDIF
		         SWSELECT('metersub')
		         SCAN FOR cbatch == lcbatch AND nSubMeter <> 0  &&  Only post entries for wells with money allocated to them
		            m.cwellid = cwellid
		            SWSELECT('wells')
		            SET ORDER TO cwellid
		            IF SEEK(m.cwellid)
		               IF EMPTY(wells.clistid)
		                  IF THISFORM.omessage.CONFIRM('The well master file needs to be synchronized with QuickBooks. Synchronize now?')
		                     m.goapp.oQB.sync_wells()
		                  ELSE
		                     llReturn = .F.
		                     EXIT
		                  ENDIF
		               ENDIF
		            ENDIF
		         ENDSCAN
		         SWSELECT('revsrc')
		         LOCATE FOR crevkey = meterall.crevkey
		         IF FOUND()
		            IF EMPTY(revsrc.clistid)
		               IF THISFORM.omessage.CONFIRM('The purchaser file needs to be synchronized with QuickBooks. Synchronize now?')
		                  m.goapp.oQB.sync_purchaser()
		               ELSE
		                  llReturn = .F.
		                  EXIT
		               ENDIF
		            ENDIF
		         ENDIF
		
		         SWSELECT('income')
		         LOCATE FOR cbatch = lcbatch AND nRunNo <> 0
		         IF FOUND()
		            THISFORM.omessage.warning('These revenue entries have been allocated and closed. ' + ;
		               'No changes are possible.')
		            llReturn = .F.
		            EXIT
		         ENDIF
		
		         *  Remove any previous batch entries
		         IF NOT EMPTY(meterall.ctxnid)
		            llReturn = m.goapp.oQB.DeleteTxnID(meterall.ctxnid, 15)
		         ENDIF
		         
		         m.goApp.oQB.ClearErrorInfo()
		
		         * get a message set request object (version 1.1 xml)
		         lorequest = m.goapp.oQB.oQBRequest
		
		         * set the on error attribute for the request
		         lorequest.ATTRIBUTES.onerror = 1
		         lorequest.clearrequests()
		
		         IF llReturn AND THISFORM.allocate()
		            *  Setup the receipt add request
		            lorcptadd = lorequest.appendjournalentryaddrq()
		
		            lorcptadd.refnumber.setvalue(LEFT(meterall.crefid, 11))
		            lorcptadd.txndate.setvalue(meterall.dincdate)
		            *      lorcptadd.MEMO.setvalue('** DO NOT CHANGE OR DELETE THIS ENTRY IN QUICKBOOKS **')
		
		            SWSELECT('metersub')
		            SCAN FOR cbatch == lcbatch AND nSubMeter <> 0  &&  Only post entries for wells with money allocated to them
		               SCATTER MEMVAR
		
		               m.ntotalsub = ROUND(m.ntotalsub, 2)
		
		               IF m.ntotalsub < 0
		                  IF m.goapp.oQB.QBFCVersion > ' 4.0'
		                     loentry = lorcptadd.ORJournalLineList.APPEND.JournalDebitLine
		                  ELSE
		                     loentry = lorcptadd.journaldebitlinelist.APPEND
		                  ENDIF
		               ELSE
		                  IF m.goapp.oQB.QBFCVersion > ' 4.0'
		                     loentry = lorcptadd.ORJournalLineList.APPEND.JournalCreditLine
		                  ELSE
		                     loentry = lorcptadd.journalcreditlinelist.APPEND
		                  ENDIF
		               ENDIF
		
		               IF NOT EMPTY(metersub.cwellid)
		                  SWSELECT('wells')
		                  LOCATE FOR cwellid = metersub.cwellid
		                  IF FOUND()
		                     loentry.classref.listid.setvalue(wells.clistid)
		                  ENDIF
		               ENDIF
		
		               loentry.accountref.listid.setvalue(lcrevclear)
		               m.cDeck = oWellInv.DOIDeckNameLookup(meterall.cYear, meterall.cPeriod, metersub.cwellid)
		               lnGas = swNetRevenue(metersub.cwellid, metersub.ntotalsub, 'G', .F., .T., .F., '', .F., .f., .F., m.cDeck)
		               loentry.amount.setvalue(ABS(lnGas))
		
		               loentry.MEMO.setvalue(ALLT(STR(metersub.nallocation, 5, 2)) + ' MCF ' +  ;
		                  ' @ ' + ALLT(STR(meterall.ngasprice, 12, 6)) + ' Period: ' + ;
		                  meterall.cperiod + '/' + meterall.cyear)
		
		               lnTax     = swNetRevenue(metersub.cwellid, metersub.ntaxamt, 'G', .F., .T., .F., '', .F., .f., .F., m.cDeck)
		               m.ntaxamt = ROUND(lnTax, 2)
		
		               * If taxes were entered, post them
		               IF lnTax <> 0
		                  IF lnTax > 0
		                     IF m.goapp.oQB.QBFCVersion > ' 4.0'
		                        loentry = lorcptadd.ORJournalLineList.APPEND.JournalCreditLine
		                     ELSE
		                        loentry = lorcptadd.journalcreditlinelist.APPEND
		                     ENDIF
		                  ELSE
		                     IF m.goapp.oQB.QBFCVersion > ' 4.0'
		                        loentry = lorcptadd.ORJournalLineList.APPEND.JournalDebitLine
		                     ELSE
		                        loentry = lorcptadd.journaldebitlinelist.APPEND
		                     ENDIF
		                  ENDIF
		
		                  IF NOT EMPTY(metersub.cwellid)
		                     SELE wells
		                     LOCATE FOR cwellid = metersub.cwellid
		                     IF FOUND()
		                        loentry.classref.listid.setvalue(wells.clistid)
		                     ENDIF
		                  ENDIF
		
		                  loentry.accountref.listid.setvalue(lcrevclear)
		                  loentry.amount.setvalue(ABS(lnTax))
		
		                  loentry.MEMO.setvalue(ALLTRIM(THISFORM.cbosource.VALUE)+': ' +  ;
		                     ALLT(STR(m.ntaxamt, 12, 6)) + ' Period: ' + ;
		                     meterall.cperiod + '/' + meterall.cyear)
		               ENDIF
		               * Get the net total to post to cash
		               lnAmount = lnAmount + lnGas + lnTax
		            ENDSCAN
		
		            *  Add the deposit to the check register
		            IF lnAmount > 0
		               IF m.goapp.oQB.QBFCVersion > ' 4.0'
		                  loentry = lorcptadd.ORJournalLineList.APPEND.JournalDebitLine
		               ELSE
		                  loentry = lorcptadd.journaldebitlinelist.APPEND
		               ENDIF
		            ELSE
		               IF m.goapp.oQB.QBFCVersion > ' 4.0'
		                  loentry = lorcptadd.ORJournalLineList.APPEND.JournalCreditLine
		               ELSE
		                  loentry = lorcptadd.journalcreditlinelist.APPEND
		               ENDIF
		            ENDIF
		
		            loentry.accountref.listid.setvalue(meterall.cacctno)
		            *  Added round to eliminate invalid amount format error - BH 06/04/2010
		            loentry.amount.setvalue(ABS(ROUND(lnAmount, 2)))
		
		            SWSELECT('revsrc')
		            LOCATE FOR crevkey = meterall.crevkey
		            IF FOUND()
		               loentry.entityref.listid.setvalue(revsrc.clistid)
		            ELSE
		               WAIT WIND 'Purchaser: ' + meterall.crevkey + ' not found in purchaser file.'
		               llReturn = .F.
		               EXIT
		            ENDIF
		
		
		            loresponse = m.goapp.oQB.oqbsm.dorequests(lorequest)
		            loaddresp  = loresponse.responselist.getat(0)
		
		            IF loaddresp.statuscode = 0
		               WAIT WIND 'Receipt successfully added in QuickBooks' NOWAIT
		
		               lonewcheck = loaddresp.DETAIL
		               m.ctxnid   = lonewcheck.txnid.getvalue()
		               m.goapp.oQB.ClearErrorInfo()
		               SELE meterall
		               REPL ctxnid WITH m.ctxnid
		               = TABLEUPDATE(.T.)
		               SELECT metersub
		               = TABLEUPDATE(.T.)
		            ELSE
		               IF 'object' $ LOWER(loaddresp.statusmessage)
		                  lcListID = SUBSTR(loaddresp.statusmessage, AT('"', loaddresp.statusmessage) + 1, AT('"', loaddresp.statusmessage, 2) - (AT('"', loaddresp.statusmessage) + 1))
		                  llResult = m.goapp.oQB.QBListID(lcListID, THISFORM.DATASESSIONID)
		                  IF llResult
		                     SELECT QBListID
		                     IF QBListID.ctype = 'Account'
		                        lcMessage = 'The ' + ALLTRIM(QBListID.cdescription) + ' specified in the ' + ;
		                           'QB Posting Preferences was not found in QuickBooks. Please select a new account ' + ;
		                           'and try to save the meter reconciliation again.'
		                     ELSE
		                        lcMessage = 'The ' + ALLTRIM(QBListID.cdescription) + ' was not found in QuickBooks. ' + ;
		                           'Please synchronize the ' + ALLTRIM(QBListID.ctype) + ' file and try to save the meter reconciliation again.'
		                     ENDIF
		                     THISFORM.omessage.severe(lcMessage)
		                  ELSE
		                     THISFORM.omessage.severe(loaddresp.statusmessage)
		                  ENDIF
		               ELSE
		                  THISFORM.omessage.severe(loaddresp.statusmessage)
		               ENDIF
		               m.goapp.oQB.ClearErrorInfo()
		               llReturn = .F.
		            ENDIF
		         ELSE
		            llReturn = .F.
		         ENDIF
		         THISFORM.setchanged(.F.)
		         SELE meterall
		         THISFORM.grdgridcustom1.REFRESH()
		         llReturn = .T.
		      ELSE
		         MESSAGEBOX("This receipt is marked not to post to QuickBooks."  + CHR(10) + CHR(10) + ;
		            "Nothing will be posted to QuickBooks when this   "  + CHR(10) + ;
		            "receipt is saved."                                  + CHR(10) + CHR(10) + ;
		            "However, when the revenue run which processes this" + CHR(10) + ;
		            "revenue is closed and then posted to QuickBooks,"   + CHR(10) + ;
		            "the clearing entries will still be made for this"   + CHR(10) + ;
		            "receipt. This will cause more revenue to be cleared" + CHR(10) + ;
		            "than what was originally posted for the run."      + CHR(10) + ;
		            "You will need to make an adjustment in QuickBooks"  + CHR(10) + ;
		            "to the Revenue Clearing account to correct this." + CHR(10) + CHR(10) + ;
		            "Please see the 'Don't post to QuickBooks' topic"    + CHR(10) + ;
		            "in the Help file for more information.", 48, "QuickBooks No Post Notice")
		         THISFORM.allocate()
		
		      ENDIF
		   ELSE
		      IF NOT llNoQBPost AND NOT THISFORM.omessage.CONFIRM('There is no active connection to QuickBooks. Do you want to continue posting this revenue?' + ;
		            ' Entries to QuickBooks will have to be made manually if you continue.')
		         llReturn = .F.
		         EXIT
		      ENDIF
		      THISFORM.allocate()
		   ENDIF
		CATCH TO loError
		   llReturn = .F.
		   DO errorlog WITH 'BeforeUpdate', loError.LINENO, 'Gas Meter Alloc', loError.ERRORNO, loError.MESSAGE, '', loError
		   MESSAGEBOX('Unable to process the report at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		      'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		RETURN llReturn
		
		
		
		
		
		
	ENDPROC

	PROCEDURE cmdDocument.Click
		LOCAL lnx, llReturn, llNewDoc
		
		llNewDoc = .T.
		
		swSELECT('documents')
		m.cfk      = 'GM'+meterall.cbatch
		LOCATE FOR cfk == m.cfk
		IF FOUND()
		   IF MESSAGEBOX('There is a document attached to this reconciliation. Do you want to view the document? ' + ;
		                 'Choosing No will allow you to attach a new document.', 36, 'Attached Document') = 6
		      THISFORM.viewdocument(m.cfk)
		      llNewDoc = .F.
		   ELSE
		      llNewDoc = .T.
		   ENDIF
		ENDIF
		IF llNewDoc
		    THISFORM.oFileDialog.FileName = ''
		   llReturn = THISFORM.oFileDialog.openfile()
		   IF NOT THISFORM.oFileDialog.lcancelled
		      m.cDesc    = THISFORM.omessage.gettext('Enter a description for this file.','Get File Description')
		      m.cpath    = THISFORM.ofilEDIALOG.aFiles[1]
		      IF EMPTY(m.cDesc) OR ISNULL(m.cDesc)
		         m.cDesc = ALLTRIM(m.cpath)
		      ENDIF
		
		      m.cDocLink = 'GM'
		      swSELECT('documents')
		      LOCATE FOR cfk == m.cfk
		      IF NOT FOUND()
		         INSERT INTO documents FROM MEMVAR
		      ELSE
		         REPLACE cpath WITH m.cpath, ;
		                 cdesc WITH m.cdesc
		      ENDIF
		      THISFORM.setchanged(.T., 'Documents')
		      this.Caption = 'View \<Document'
		      m.gostatemanager.refreshall('Form')
		   ENDIF
		ENDIF
		
	ENDPROC

	PROCEDURE cmdEven.Click
		LOCAL lnMaster, lnTotalInc, lnPrice, lcBatch, lnCount, lnRecNo
		
		IF THISFORM.flushcontrolbuffer()
		   swselect('meterall')
		   lnMaster = meterall.nmaster
		   lnTotalInc = meterall.ntotalinc
		   lcBatch    = meterall.cbatch
		
		   lnPrice = ROUND(lnTotalInc/lnMaster,6)
		
		   swselect('metersub')
		   lnRecNo = RECNO()
		   COUNT FOR cbatch = lcBatch TO lnCount
		   GOTO lnRecNo
		
		   lnAlloc = ROUND(lnMaster/lnCount,2)
		   lnDollars = ROUND(lnTotalInc/lnCount,2)
		
		   lnTotal = lnTotalInc - ROUND(lnDollars * lnCount,2)
		   lnSubs  = lnMaster   - ROUND(lnAlloc * lnCount,2)
		
		   swselect('metersub')
		   SCAN
		      REPL nallocation WITH lnAlloc, ;
		         nSubMeter   WITH lnAlloc, ;
		         nTotalSub   WITH lnDollars
		   ENDSCAN
		
		   IF lnSubs <> 0
		      swselect('metersub')
		      SCAN
		         REPL nallocation WITH nallocation + lnSubs, ;
		            nSubMeter   WITH nSubMeter + lnSubs
		         EXIT
		      ENDSCAN
		   ENDIF
		
		   IF lnTotal <> 0
		      swselect('metersub')
		      SCAN
		         REPL nTotalSub WITH nTotalSub + lnTotal
		         EXIT
		      ENDSCAN
		   ENDIF
		
		   GO TOP
		
		   swselect('meterall')
		
		   THISFORM.CalcVariance()
		   
		   thisform.calcalloc()
		   
		   SELECT metersub
		   GO TOP 
		
		   THISFORM.grdgridcustom1.REFRESH()
		ENDIF
		
	ENDPROC

	PROCEDURE cmdLookMeter.Click
		LOCAL lcList
		PRIV llOK
		
		llOK = .F.
		lcList = 'cmeterid,cmeterdesc'
		
		DO FORM ..\custom\picklist WITH 'Meters', lcList, thisform.txtcmeterid.value, 2
		
		IF llOK
		   thisform.cmdatamanager.replace('Meterall','Cmeterid',Meters.cmeterid)
		   thisform.txtcmeterid.refresh()
		   thisform.txtcMeterName.value = Meters.cMeterDesc
		   thisform.txtcMeterName.refresh()
		   thisform.buildmeter()
		   thisform.setnextcontrol(thisform.txtcmeterid)
		   swselect('meterall')
		ENDIF      
	ENDPROC

	PROCEDURE cmdLookMeter.When
		RETURN MDOWN()
	ENDPROC

	PROCEDURE cmdLookPurch.Click
		LOCAL lcList
		PRIV llOK
		
		llOK = .F.
		lcList = 'crevkey,crevname'
		
		DO FORM ..\custom\picklist WITH 'Revsrc', lcList, thisform.txtcrevkey.value, 2
		
		IF llOK
		   thisform.cmdatamanager.replace('Meterall','Crevkey',Revsrc.crevkey)
		   thisform.txtcRevName.value = cRevName
		   thisform.txtcRevName.refresh()
		   thisform.txtcRevKey.refresh()
		ENDIF   
		
		swselect('meterall')
		thisform.setnextcontrol(thisform.txtcRevKey)
	ENDPROC

	PROCEDURE cmdLookPurch.When
		RETURN MDOWN()	
		
	ENDPROC

	PROCEDURE cmdPrintRecon.Click
		thisform.report()
	ENDPROC

	PROCEDURE Grdgridcustom1.AfterRowColChange
		LPARAMETERS ncol
		
		if ncol <> 3
		   this.column3.txtnsubmeter.setfocus()
		   dodefault(ncol)
		else
		   return   
		endif
		
	ENDPROC

	PROCEDURE Grdgridcustom1.Column1.txtcWellID.When
		RETURN .F.
	ENDPROC

	PROCEDURE Grdgridcustom1.Column2.txtcWellName.When
		RETURN .F.
	ENDPROC

	PROCEDURE Grdgridcustom1.Column3.txtnSubMeter.KeyPress
		LPARAMETERS nkeycode,nshiftaltctrl
		
		DO case
		   case nkeycode = 13 OR nkeycode = 9
		      keyboard '{dnarrow}'
		   CASE nkeycode = 15    
		      keyboard '{uparrow}'
		   otherwise
		      dodefault (nkeycode,nshiftaltctrl)
		endcase
	ENDPROC

	PROCEDURE Grdgridcustom1.Column3.txtnSubMeter.Valid
		LOCAL llChanged
		
		if this.value <> metersub.nsubmeter
		   llChanged = .t.
		ELSE
		   llChanged = .f.
		ENDIF
		
		DODEFAULT()
		
		IF llChanged
		   IF meterall.nMaster <> 0
		      thisform.calcalloc()
		   ELSE
		      thisform.oMessage.Warning('Before any allocation can be done, an amount must be entered for the Master MCF.')
		      thisform.setnextcontrol(thisform.txtnmaster)
		   ENDIF 
		endif
		
		
	ENDPROC

	PROCEDURE Grdgridcustom1.Column4.txtnAllocated.When
		RETURN .F.
	ENDPROC

	PROCEDURE Grdgridcustom1.Column5.txtnTotalInc.When
		RETURN .F.
	ENDPROC

	PROCEDURE Grdgridcustom1.Column6.Txttextboxcustom1.When
		RETURN .f.
	ENDPROC

	PROCEDURE Swperiod.Valid
		IF NOT EMPTY(THIS.VALUE)
		   IF LEN(ALLTRIM(THIS.VALUE)) < 2
		      THIS.VALUE = PADL(ALLTRIM(THIS.VALUE),2,'0')
		   ENDIF
		   IF NOT BETWEEN(THIS.VALUE,'01','12')
		      WAIT WIND NOWAIT 'The period must be between 01 and 12., Please re-enter...'
		      RETURN 0
		   ENDIF
		   IF EMPTY(THISFORM.swYear.VALUE)  &&  Only plug in current year if the year is empty
		      THISFORM.swYear.SET('value',ALLTRIM(STR(YEAR(DATE()))))
		   ENDIF
		ENDIF
		
		REPLACE meterall.cperiod WITH THIS.VALUE
		
	ENDPROC

	PROCEDURE Swyear.Valid
		IF NOT EMPTY(THIS.VALUE)
		   IF NOT BETWEEN(THIS.VALUE,'1900','2099')
		      WAIT WIND NOWAIT 'The year entered is not a valid year. Please re-enter...'
		      RETURN 0
		   ENDIF
		
		   IF LEN(ALLTRIM(THIS.VALUE)) < 4
		      WAIT WIND NOWAIT 'The year entered is not a valid year. Please re-enter...'
		      RETURN 0
		   ENDIF
		ELSE
		   IF NOT EMPTY(THISFORM.swperiod.VALUE)
		      THIS.SET('value',ALLTRIM(STR(YEAR(DATE()))))
		   ENDIF
		ENDIF
		
		REPLACE meterall.cyear WITH THIS.VALUE
		
	ENDPROC

	PROCEDURE txtcEndRange.LostFocus
		thisform.calcdayson()
		DODEFAULT()
	ENDPROC

	PROCEDURE txtcMeterID.fieldvalid
		IF EMPTY(this.value)
		   RETURN
		ENDIF
		 
		swselect('meters')
		SET ORDER TO MeterID
		IF NOT SEEK(this.value)
		   thisform.oMessage.Display('The Meter ID Entered is not defined in the Master Meter file')
		   RETURN 0
		ELSE
		   thisform.cmdatamanager.replace('Meterall','Cmeterid',this.value)
		   thisform.txtcMeterName.value = meters.cMeterDesc
		   thisform.txtcMeterName.refresh()
		   thisform.buildmeter()
		   swselect('meterall')
		ENDIF      
	ENDPROC

	PROCEDURE txtcMeterID.GotFocus
		ON KEY LABEL F2 _screen.activeform.cmdLookMeter.Click()
		DODEFAULT()
	ENDPROC

	PROCEDURE txtcMeterID.InteractiveChange
		IF DODEFAULT()
		   swselect('meters')
		   LOCATE FOR cmeterid == this.Value
		   IF FOUND()
		      thisform.txtcMeterName.set('value',meters.cMeterDesc)
		   ELSE
		      thisform.txtcMeterName.set('value','')
		   ENDIF 
		ENDIF    
	ENDPROC

	PROCEDURE txtcMeterName.When
		RETURN .F.
	ENDPROC

	PROCEDURE txtcRevKey.GotFocus
		ON KEY LABEL F2 _screen.activeform.cmdLookPurch.Click()
		DODEFAULT()
	ENDPROC

	PROCEDURE txtcRevKey.InteractiveChange
		IF DODEFAULT()
		   swselect('revsrc')
		   LOCATE FOR crevkey == this.Value
		   IF FOUND()
		      thisform.txtcRevName.set('value',revsrc.cRevName)
		   ELSE
		      thisform.txtcRevName.set('value','')
		   ENDIF 
		ENDIF    
	ENDPROC

	PROCEDURE txtcRevKey.LostFocus
		ON KEY LABEL F2 *
		swselect('revsrc')
		SET ORDER TO crevkey
		IF SEEK(this.value)
		   thisform.txtcrevname.value = revsrc.crevname
		   thisform.txtcrevname.refresh()
		   if thisform.txtnPrice.value = 0 and revsrc.nDefPrice <> 0  &&  Fill in default price from purchaser file
		      thisform.txtnPrice.set('value',revsrc.nDefPrice)
		   endif
		ELSE   
		   thisform.txtcrevname.value = 'Not Found'
		   thisform.txtcrevname.refresh()
		ENDIF
		swselect('meterall')
		DODEFAULT()   
	ENDPROC

	PROCEDURE txtcRevname.When
		RETURN .F.
	ENDPROC

	PROCEDURE txtnDaysOn.Valid
		IF DODEFAULT()
		   m.nDaysOn = this.Value
		   IF VARTYPE(m.nDaysOn) # 'N'
		      m.nDaysOn = INT(VAL(m.nDaysOn))
		   ENDIF
		   IF NOT BETWEEN(m.nDaysOn,0,365)
		      MESSAGEBOX('The Days On value must be between 0 and 365. Please correct.',64,'Invalid Days On')
		      RETURN 0
		   ENDIF
		ENDIF 
	ENDPROC

	PROCEDURE txtnMaster.Valid
		DODEFAULT()
		thisform.calctotal()
		thisform.calcalloc()
		
	ENDPROC

	PROCEDURE txtnNetAmount.LostFocus
		swselect('metersub')
		GO TOP
		DODEFAULT()
	ENDPROC

	PROCEDURE txtnNetAmount.When
		RETURN .f.
	ENDPROC

	PROCEDURE txtnPrice.Valid
		DODEFAULT()
		thisform.calctotal()
		thisform.calcalloc()
		
	ENDPROC

	PROCEDURE txtnSubs.When
		RETURN .F.
	ENDPROC

	PROCEDURE txtnTotal.LostFocus
		swselect('metersub')
		GO TOP
		thisform.txtnNetAmount.Value = this.Value - thisform.txtTaxAmount.value
		thisform.txtnNetAmount.Refresh()
		DODEFAULT()
	ENDPROC

	PROCEDURE txtnTotal.Valid
		DODEFAULT()
		IF EMPTY(meterall.ngasprice)
		   IF meterall.nmaster > 0 AND meterall.ntotalinc > 0
		      IF THISFORM.omessage.CONFIRM('Should the price be calculated?')
		         THISFORM.cmdatamanager.REPLACE('Meterall','Ngasprice',ROUND(meterall.ntotalinc/meterall.nmaster,6))
		         THISFORM.txtnprice.REFRESH()
		      ENDIF
		   ENDIF
		ENDIF
		
	ENDPROC

	PROCEDURE txtnVariance.When
		RETURN .F.
	ENDPROC

	PROCEDURE txtTaxAmount.LostFocus
		swselect('metersub')
		GO TOP
		IF this.Value < 0
		   IF NOT thisform.omessage.confirm('Taxes do not have to be entered as negative numbers unless a tax credit is being entered. Is this a tax credit?')
		      this.Value = ABS(this.Value)
		   ENDIF 
		ENDIF 
		
		thisform.txtnNetAmount.Value = thisform.txtntotal.Value - this.value
		thisform.txtnnetAmount.Refresh()
		thisform.calcalloc()
		DODEFAULT()
	ENDPROC

ENDDEFINE
