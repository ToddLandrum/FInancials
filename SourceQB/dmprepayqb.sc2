*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="dmprepayqb.scx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="2" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Cursor1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor6" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor7" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor9" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor10" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor11" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor13" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor5" UniqueID="" Timestamp="" />

	AutoOpenTables = .F.
	DataSource = .NULL.
	Height = 619
	InitialSelectedAlias = "prepayh"
	Left = 6
	Name = "Dataenvironment"
	Top = 211
	Width = 1219

	ADD OBJECT 'Cursor1' AS cursor WITH ;
		Alias = "investor", ;
		CursorSource = "investor", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor1", ;
		Top = 20, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor10' AS cursor WITH ;
		Alias = "glopt", ;
		CursorSource = "glopt", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 279, ;
		Name = "Cursor10", ;
		Top = 144, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor11' AS cursor WITH ;
		Alias = "prepayview", ;
		BufferModeOverride = 5, ;
		CursorSource = "prepayview", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 243, ;
		Left = 423, ;
		Name = "Cursor11", ;
		NoDataOnLoad = .T., ;
		Top = 285, ;
		Width = 124
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor13' AS cursor WITH ;
		Alias = "checks", ;
		BufferModeOverride = 5, ;
		CursorSource = "checks", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 576, ;
		Name = "Cursor13", ;
		Top = 269, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor3' AS cursor WITH ;
		Alias = "wellinv", ;
		CursorSource = "wellinv", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 290, ;
		Name = "Cursor3", ;
		Top = 20, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor5' AS cursor WITH ;
		Alias = "prepayh", ;
		BufferModeOverride = 5, ;
		CursorSource = "prepayh", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 512, ;
		Name = "Cursor5", ;
		Top = 48, ;
		Width = 124
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor6' AS cursor WITH ;
		Alias = "coa", ;
		CursorSource = "coa", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 710, ;
		Name = "Cursor6", ;
		Top = 20, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor7' AS cursor WITH ;
		Alias = "glmaster", ;
		BufferModeOverride = 5, ;
		CursorSource = "glmaster", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 850, ;
		Name = "Cursor7", ;
		Top = 20, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor9' AS cursor WITH ;
		Alias = "prepayh1", ;
		CursorSource = "prepayh", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor9", ;
		Top = 140, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

ENDDEFINE

DEFINE CLASS formdmprepayqb AS frmdatamanagerformcustom OF "..\custom\cforms.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Shpshapecustom1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdCustomer" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcCustName" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtCcustid" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Glmaint" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblDrecdate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtCreference" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblCreference" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtNpmtamt" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblNpmtamt" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblBalance" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtdRecDate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtdEffDate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblNextension" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboCashAcct" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Qbaccount2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdLookWell" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcWellID" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcWellName" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtnExtension" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lstDetail" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkNOQBPOST" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdRefund" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: adddetailline
		*m: applypmts		&& Automatically applies the payment amount to outstanding invoices.
		*m: calcapplied
		*m: calctot
		*m: checkbalance		&& Determines the balance of prepayment remaining to be used.
		*m: fillownername		&& Fills the owner name by looking up the owner id in the investor file.
		*m: prepayused
		*m: refundbalance		&& Creates a check in the QB register to refund the prepayment balance.
		*m: requeryrecordsource
		*m: setstate
		*p: cbatch
		*p: ccustsave		&& Saves the current customer ID for validation purposes.
		*p: coldacctno
		*p: cpmttype
		*p: ctype		&& Type of receivable
		*p: lnewbuild
		*p: lqberror
		*p: nbalance		&& Balance before the prepayment is updated.
		*p: ntotal		&& Prepayment amount to compare when saving
		*p: oldpmtamt
	*</DefinedPropArrayMethod>

	Caption = "Receive Owner Prepayments"
	cbatch = .F.
	cbunch = 
	clistexpression = prepayh.cbatch
	cnavworkarea = prepayh
	coldacctno = 
	ctype = ''		&& Type of receivable
	cworkarea = prepayh
	DoCreate = .T.
	Height = 420
	HelpContextID = 340
	lexpliciteditmode = .F.
	LockScreen = .F.
	lqberror = .F.
	lrememberposition = .F.
	lremembersize = .F.
	Name = "FormDMPrePayQB"
	nbalance = 0		&& Balance before the prepayment is updated.
	ntotal = 0		&& Prepayment amount to compare when saving
	oldpmtamt = 0
	Visible = .T.
	Width = 583
	_memberdata = <VFPData>
		<memberdata name="adddetailline" display="AddDetailLine"/>
		<memberdata name="checkbalance" display="CheckBalance"/>
		<memberdata name="prepayused" display="PrePayUsed"/>
		<memberdata name="nbalance" display="nBalance"/>
		<memberdata name="ntotal" display="nTotal"/>
		<memberdata name="refundbalance" display="RefundBalance"/>
		<memberdata name="lqberror" display="lQBError"/>
		</VFPData>
	cmdatamanager.Name = "cmdatamanager"
	cmdatamanager.TabIndex = 1
	cmdatamanager.ZOrderSet = 0
	cmlookupmanager.Name = "cmlookupmanager"
	Mwresize1.lblHighLight.Name = "lblHighLight"
	Mwresize1.lblShading.Name = "lblShading"
	Mwresize1.Left = 528
	Mwresize1.Name = "Mwresize1"
	Mwresize1.Top = 398

	ADD OBJECT 'cboCashAcct' AS qbaccount WITH ;
		ControlSource = "prepayh.cacctno", ;
		Height = 20, ;
		lbankonly = .T., ;
		Left = 20, ;
		Name = "cboCashAcct", ;
		TabIndex = 2, ;
		Top = 31, ;
		Width = 376
		*< END OBJECT: ClassLib="..\custom\swcontrol.vcx" BaseClass="combobox" />

	ADD OBJECT 'chkNOQBPOST' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Don't Post To QuickBooks", ;
		ControlSource = "prepayh.lNoQBPost", ;
		Left = 406, ;
		Name = "chkNOQBPOST", ;
		TabIndex = 50, ;
		Top = 8, ;
		Value = .F.
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'cmdCustomer' AS cmdcommandbuttoncustom WITH ;
		Caption = "Owner ID", ;
		Height = 20, ;
		Left = 19, ;
		Name = "cmdCustomer", ;
		TabIndex = 3, ;
		TabStop = .F., ;
		Top = 61, ;
		Width = 64, ;
		ZOrderSet = 3
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdLookWell' AS cmdcommandbuttoncustom WITH ;
		Caption = " Well", ;
		Height = 20, ;
		Left = 13, ;
		Name = "cmdLookWell", ;
		TabIndex = 10, ;
		TabStop = .F., ;
		Top = 157, ;
		Width = 78, ;
		ZOrderSet = 20
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdRefund' AS cmdcommandbuttoncustom WITH ;
		Caption = "Refund Balance", ;
		Height = 60, ;
		Left = 492, ;
		Name = "cmdRefund", ;
		Top = 60, ;
		Width = 75, ;
		WordWrap = .T.
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'Glmaint' AS glmaint WITH ;
		Height = 12, ;
		Left = 36, ;
		Name = "Glmaint", ;
		Top = 36, ;
		Width = 24
		*< END OBJECT: ClassLib="..\custom\swgl.vcx" BaseClass="custom" />

	ADD OBJECT 'lblBalance' AS lblfieldlabelcustom WITH ;
		Alignment = 0, ;
		AutoSize = .F., ;
		Caption = "Balance Remaining:", ;
		FontBold = .T., ;
		ForeColor = 255,0,0, ;
		Height = 16, ;
		Left = 85, ;
		Name = "lblBalance", ;
		TabIndex = 22, ;
		Top = 392, ;
		Width = 199, ;
		ZOrderSet = 13
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblCreference' AS lblfieldlabelcustom WITH ;
		Caption = "Check No.", ;
		Height = 16, ;
		Left = 170, ;
		Name = "lblCreference", ;
		TabIndex = 9, ;
		Top = 122, ;
		Width = 51, ;
		ZOrderSet = 11
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblDrecdate' AS lblfieldlabelcustom WITH ;
		Caption = "Payment Date", ;
		Height = 16, ;
		Left = 2, ;
		Name = "lblDrecdate", ;
		TabIndex = 8, ;
		Top = 122, ;
		Width = 68, ;
		ZOrderSet = 9
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom1' AS lbllabelcustom WITH ;
		Caption = "Effective Date", ;
		Left = 99, ;
		Name = "Lbllabelcustom1", ;
		TabIndex = 20, ;
		Top = 162
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom2' AS lbllabelcustom WITH ;
		Caption = "QB Account", ;
		Left = 196, ;
		Name = "Lbllabelcustom2", ;
		TabIndex = 21, ;
		Top = 162
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom3' AS lbllabelcustom WITH ;
		Caption = "Cash Account", ;
		Left = 24, ;
		Name = "Lbllabelcustom3", ;
		TabIndex = 22, ;
		Top = 12
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblNextension' AS lblfieldlabelcustom WITH ;
		AutoSize = .T., ;
		Caption = "Amount", ;
		Height = 16, ;
		Left = 480, ;
		Name = "lblNextension", ;
		TabIndex = 11, ;
		Top = 161, ;
		Width = 39, ;
		ZOrderSet = 16
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblNpmtamt' AS lblfieldlabelcustom WITH ;
		Caption = "Total Prepayment", ;
		Height = 16, ;
		Left = 321, ;
		Name = "lblNpmtamt", ;
		TabIndex = 19, ;
		Top = 392, ;
		Width = 85, ;
		ZOrderSet = 13
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lstDetail' AS lstlistboxcustom WITH ;
		ColumnCount = 5, ;
		ColumnWidths = "75,250,95,95", ;
		FontName = "Courier New", ;
		Height = 153, ;
		Left = 8, ;
		Name = "lstDetail", ;
		RowSource = "prepayview.cwellid,cwellname,deffdate,namount,crectype", ;
		RowSourceType = 6, ;
		TabIndex = 17, ;
		Top = 232, ;
		Width = 568, ;
		ZOrderSet = 24
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="listbox" />

	ADD OBJECT 'Qbaccount2' AS qbaccount WITH ;
		Height = 20, ;
		Left = 194, ;
		Name = "Qbaccount2", ;
		TabIndex = 14, ;
		Top = 180, ;
		Width = 234
		*< END OBJECT: ClassLib="..\custom\swcontrol.vcx" BaseClass="combobox" />

	ADD OBJECT 'Shpshapecustom1' AS shpshapecustom WITH ;
		BackColor = 255,255,128, ;
		BorderStyle = 1, ;
		Height = 79, ;
		Left = 8, ;
		Name = "Shpshapecustom1", ;
		Top = 149, ;
		Width = 568, ;
		ZOrderSet = 1
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="shape" />

	ADD OBJECT 'txtCcustid' AS txtquickfill WITH ;
		clistexpression = investor.cownerid, ;
		clistworkarea = investor, ;
		ControlSource = "prepayh.cownerid", ;
		Height = 20, ;
		InputMask = "XXXXXXXXXX", ;
		Left = 86, ;
		lrequired = .T., ;
		MaxLength = 10, ;
		Name = "txtCcustid", ;
		TabIndex = 4, ;
		Top = 61, ;
		Width = 89, ;
		ZOrderSet = 6
		*< END OBJECT: ClassLib="..\custom\cgadget.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcCustName' AS txttextboxcustom WITH ;
		ControlSource = "", ;
		Height = 20, ;
		Left = 86, ;
		Name = "txtcCustName", ;
		ReadOnly = .T., ;
		TabIndex = 5, ;
		Top = 86, ;
		Width = 370, ;
		ZOrderSet = 4
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtCreference' AS txttextboxcustom WITH ;
		ControlSource = "prepayh.cref", ;
		Height = 20, ;
		Left = 228, ;
		MaxLength = 10, ;
		Name = "txtCreference", ;
		TabIndex = 7, ;
		Top = 119, ;
		Width = 79, ;
		ZOrderSet = 10
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcWellID' AS txtquickfill WITH ;
		clistexpression = cwellid, ;
		clistworkarea = wells, ;
		Height = 20, ;
		InputMask = "XXXXXXXXXX", ;
		Left = 13, ;
		MaxLength = 10, ;
		Name = "txtcWellID", ;
		TabIndex = 12, ;
		Top = 179, ;
		Width = 79, ;
		ZOrderSet = 21
		*< END OBJECT: ClassLib="..\common\cmgadget.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcWellName' AS txttextboxcustom WITH ;
		BackColor = 212,208,200, ;
		Height = 20, ;
		Left = 13, ;
		Name = "txtcWellName", ;
		TabIndex = 16, ;
		Top = 202, ;
		Width = 415, ;
		ZOrderSet = 22
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtdEffDate' AS dpk WITH ;
		Alignment = 3, ;
		ControlSource = "", ;
		Format = "D", ;
		Height = 20, ;
		lcheckdate = .T., ;
		Left = 96, ;
		lmorethan90 = .T., ;
		Name = "txtdEffDate", ;
		TabIndex = 13, ;
		Top = 180, ;
		Value = {}, ;
		Width = 75, ;
		ZOrderSet = 15
		*< END OBJECT: ClassLib="..\custom\swdate.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtdRecDate' AS dpk WITH ;
		Alignment = 3, ;
		ControlSource = "prepayh.ddate", ;
		Format = "D", ;
		Height = 20, ;
		lcheckdate = .T., ;
		Left = 75, ;
		lmorethan90 = .T., ;
		Name = "txtdRecDate", ;
		TabIndex = 6, ;
		Top = 119, ;
		Value = {}, ;
		Width = 75, ;
		ZOrderSet = 15
		*< END OBJECT: ClassLib="..\custom\swdate.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtnExtension' AS txttextboxcustom WITH ;
		Alignment = 3, ;
		Height = 20, ;
		InputMask = "999,999,999.99", ;
		Left = 432, ;
		Name = "txtnExtension", ;
		TabIndex = 15, ;
		Top = 179, ;
		Value = 0.00, ;
		Width = 108, ;
		ZOrderSet = 23
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtNpmtamt' AS txttextboxcustom WITH ;
		Alignment = 3, ;
		ControlSource = "prepayh.ntotal", ;
		Height = 20, ;
		InputMask = "999,999,999.99", ;
		Left = 411, ;
		lrequired = .F., ;
		Name = "txtNpmtamt", ;
		TabIndex = 18, ;
		Top = 390, ;
		Value = 0, ;
		Width = 127, ;
		ZOrderSet = 12
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />
	
	PROCEDURE Activate
		*
		*  Look for the customer/owner/vendor name in
		*  the custownvend view
		*
		lnSelect = SELECT()
		
		SELECT (lnSelect)
		thisform.fillownername()
		
		RETURN (DODEFAULT())
	ENDPROC

	PROCEDURE adddetailline
		LOCAL llReturn, loError
		LOCAL lcBatch
		LOCAL cAcctNo, cBatch, cRecType, cWellName, cownerid, cwellid, deffdate, namount
		
		llReturn = .T.
		
		TRY
		   IF THISFORM.txtnextension.VALUE <> 0
		      lcBatch  = prepayh.cBatch
		      m.cBatch = lcBatch
		
		      m.cwellid = THISFORM.txtcwellID.VALUE
		      IF EMPTY(m.cwellid)
		         MESSAGEBOX('You must specify a Well with this prepayment. Please corrrect.', 16, 'Missing Well')
		         THISFORM.setnextcontrol(THISFORM.txtcwellID)
		         THISFORM.txtcwellID.SETFOCUS()
		         llReturn = .F.
		         EXIT
		      ENDIF
		
		      m.namount = THISFORM.txtnextension.VALUE
		      IF m.namount = 0
		         MESSAGEBOX('You must specify an amount for this prepayment. Please correct.', 16, 'Missing Amount')
		         THISFORM.setnextcontrol(THISFORM.txtnextension)
		         THISFORM.txtnextension.SETFOCUS()
		         llReturn = .F.
		         EXIT
		      ENDIF
		
		      m.cAcctNo = THISFORM.qbaccount2.VALUE
		      IF EMPTY(m.cAcctNo) AND NOT thisform.chknoQBPOST.value
		         MESSAGEBOX('You must specify a valid account number for the prepayment. Please correct.', 16, 'Missing Account')
		         THISFORM.setnextcontrol(THISFORM.qbaccount2)
		         THISFORM.qbaccount2.SETFOCUS()
		         llReturn = .F.
		         EXIT
		      ENDIF
		
		      m.cWellName = THISFORM.txtcWEllname.VALUE
		      m.cownerid  = THISFORM.txtccustid.VALUE
		      m.deffdate  = THISFORM.txtdEffDate.VALUE
		      IF EMPTY(m.deffdate)
		         MESSAGEBOX('You must specify a valid effective date for the prepayment. Please correct.', 16, 'Missing Effective Date')
		         THISFORM.setnextcontrol(THISFORM.txtdEffDate)
		         THISFORM.txtdEffDate.SETFOCUS()
		         llReturn = .F.
		         EXIT
		      ENDIF
		
		      IF m.nAmount > 0
		         m.cRecType  = 'P'
		         m.lManual   = .F.
		      ELSE
		         m.cRecType  = 'U'
		         m.lManual   = .T.
		      ENDIF    
		
		      INSERT INTO prepayview FROM MEMVAR
		      SELECT prepayview
		      thisform.lstDetail.Requery()
		      thisform.lstDetail.Refresh()
		      thisform.calctot()
		
		      THISFORM.txtcwellID.SET('value', '')
		      THISFORM.txtcWEllname.SET('value', '')
		      THISFORM.txtnextension.SET('value', 0.00)
		      THISFORM.txtcwellID.SETFOCUS()
		   ELSE
		      THISFORM.txtnextension.SETFOCUS()
		   ENDIF
		   thisform.setstate()
		CATCH TO loError
		   llReturn = .F.
		   DO errorlog WITH 'AddDetailLine', loError.LINENO, 'Prepayments', loError.ERRORNO, loError.MESSAGE, '', loError
		   MESSAGEBOX('Unable to process the prepayment detail line at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		        'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		RETURN llReturn
		
		
	ENDPROC

	PROCEDURE applypmts		&& Automatically applies the payment amount to outstanding invoices.
	ENDPROC

	PROCEDURE calcapplied
	ENDPROC

	PROCEDURE calctot
		LOCAL lnSelect, lcBatch, lnBalance
		LOCAL llReturn, lnRecno, loError
		
		llReturn = .T.
		
		TRY
		   lnBalance = 0
		   lcBatch   = prepayh.cBatch
		   lnSelect  = SELECT()
		   SELECT prepayview
		   SUM(nAmount) TO lnBalance FOR not (crectype='U' and not lManual) and NOT DELETED()
		   
		   IF prepayh.nTotal <> lnBalance
		      THISFORM.cmdatamanager.REPLACE('Prepayh', 'Ntotal', lnBalance)
		      THISFORM.txtnpmtamt.REFRESH()
		   ENDIF
		
		   SELECT (lnSelect)
		CATCH TO loError
		   llReturn = .F.
		   DO errorlog WITH 'CalcTot', loError.LINENO, 'PrePay', loError.ERRORNO, loError.MESSAGE, '', loError
		   MESSAGEBOX('Unable to process the prepay at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		        'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		RETURN llReturn
		
		
		
		
	ENDPROC

	PROCEDURE checkbalance		&& Determines the balance of prepayment remaining to be used.
		LOCAL lnBalance
		
		lnBalance = 0
		swselect('prepayview')
		SUM(namount) to lnBalance 
		RETURN lnBalance
		
		
	ENDPROC

	PROCEDURE confirmdelete
		LPARAMETERS cWorkarea, cParameter
		
		RETURN .t.
	ENDPROC

	PROCEDURE delete
		LPARAMETERS cWorkarea
		
		thisform.lconfirmdelete = .f.
		
		DODEFAULT()
	ENDPROC

	PROCEDURE fillownername		&& Fills the owner name by looking up the owner id in the investor file.
		swselect('investor')
		SET ORDER TO cownerid
		IF SEEK(prepayh.cownerid)
		    THISFORM.txtccustname.VALUE = investor.cOwnName
		ELSE
		    THISFORM.txtccustname.VALUE = 'Unknown Owner'
		ENDIF
		
	ENDPROC

	PROCEDURE Init
		IF DODEFAULT()
		   THISFORM.cOldAcctno = prepayh.cAcctNo
		
		   * THISFORM.REQUERY('Prepayview')
		
		ENDIF
		
		
	ENDPROC

	PROCEDURE list
		LPARAMETERS cworkarea
		
		LOCAL lcList
		PRIV llOK
		
		llOK = .T.
		
		IF THIS.flushcontrolbuffer() AND THIS.beforenav('prepayh')
		   SELECT prepayh.cOwnerID,  ;
		   investor.cOwnName,  ;
		   prepayh.cBatch,  ;
		   DTOS(prepayh.dDate) as dDate,  ;
		   prepayh.nTotal  ;
		   FROM prepayh,investor  ;
		   WHERE prepayh.cOwnerID = investor.cOwnerID  ;
		   INTO CURSOR prepaytemp READWRITE  ;
		   ORDER BY prepayh.cownerid
		
		   IF _TALLY > 0      
		      SET SAFETY OFF
		      SELECT prepaytemp
		      INDEX ON cOwnerID+dDate TAG cOwnerID
		      INDEX on dDate TAG dDate
		      INDEX on cOwnName+dDate TAG cOwnName
		      INDEX on nTotal TAG nTotal      
		
		      lcList = 'cOwnerID\Owner ID,cOwnName\Owner Name,dDate\Date,nTotal\Total'
		      DO FORM ..\CUSTOM\picklist WITH 'prepaytemp', lcList, prepayh.cownerid+DTOS(prepayh.ddate), 4, .T.,.T.
		
		      IF llOK
		         SELECT prepayh
		         SET ORDER TO cbatch
		         SEEK(prepaytemp.cbatch)
		         THISFORM.cmdatamanager.setrecordposition('prepayh')
		         THISFORM.REFRESH()
		      ENDIF
		   ENDIF
		ELSE
		   RETURN
		ENDIF
		
	ENDPROC

	PROCEDURE Load
		IF DODEFAULT()
		      *  Get the cursor of QuickBooks Accounts
		      m.goApp.oQB.QBAccounts('',.F.,.T.,THISFORM.DATASESSIONID)
		ENDIF
		
	ENDPROC

	PROCEDURE prepayused
		LPARAMETERS tcBatch
		LOCAL llReturn
		
		llReturn = .T.
		
		* Look to see if any of this prepayment has been used
		swselect('prepayview')
		LOCATE FOR cRecType = 'U' AND lManual = .f.
		IF FOUND()
		   MESSAGEBOX("Part of this prepayment has been used. It cannot be modified.", 16, 'Delete')
		   llReturn = .F.
		ENDIF
		
		RETURN llReturn
	ENDPROC

	PROCEDURE refundbalance		&& Creates a check in the QB register to refund the prepayment balance.
		LPARAMETERS lnTotal
		LOCAL llReturn, loError
		LOCAL lManual, lPrinted, lcListID, lcMessage, lcOwnerListID, lcxml, llResult, loaddresp, locheckadd
		LOCAL loexpenseline, lonewchk, loresponse
		LOCAL cDisbAcct, cId, cOffsetAcct, cPayee, cSource, cacctno, cbatch, ccheckno, centrytype
		LOCAL cidchec, cidtype, crectype, ctxnid, dCheckDate, mtxnids, nAmount, ntype
		
		llReturn    = .T.
		lcOwnerID   = prepayh.cownerid
		m.cDisbAcct = prepayh.cacctno
		
		TRY
		    IF lnTotal > 0  &&  Positive, so create a check, if needed
		
		        IF NOT thisform.omessage.confirm('This will refund ' + TRANSFORM(lnTotal,'$$$,$$$,$$$.99') + ' to owner ' + ALLTRIM(lcOwnerid) + CHR(10)+ ;
		           'Are you sure?')
		           llReturn = .f.
		           EXIT
		        ENDIF 
		        
		        DO FORM csgetdate WITH 'PP' TO ldRefundDate
		
		        IF EMPTY(ALLT(m.cDisbAcct))
		            m.cDisbAcct = glopt.cSuspense
		        ENDIF
		
		        SELECT prepayview
		        LOCATE FOR crectype = 'P'
		        m.cOffsetAcct = cacctno
		
		        IF EMPTY(ALLT(m.cOffsetAcct))
		            m.cOffsetAcct = glopt.cSuspense
		        ENDIF
		
		        swSELECT('investor')
		        LOCATE FOR cownerid = lcOwnerID  &&  Lookup QB List ID from owner file
		        lcOwnerListID = investor.cListID
		        lcOwnName     = investor.cownname
		
		        swSELECT('checks')
		        GO BOTT
		        SCATTER MEMVAR BLANK
		        m.cSource    = 'DM'
		        m.dCheckDate = ldRefundDate
		        m.cPayee     = lcOwnName
		        m.cacctno    = m.cDisbAcct
		        m.cId        = lcOwnerID
		        m.cbatch     = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Batch')
		        m.nAmount    = lnTotal
		        m.cidchec    = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Checks')
		        m.centrytype = 'C'
		        m.cidtype    = 'I'
		        m.ccheckno   = ''
		        m.lPrinted   = .T.
		        m.drecdate   = {}
		        m.cidsysctl  = m.cbatch
		
		        INSERT INTO checks FROM MEMVAR
		
		        IF m.goApp.oQB.lQBActive
		*  Setup the journal add request
		            m.goApp.oQB.oqbrequest.clearrequests()
		            locheckadd = m.goApp.oQB.oqbrequest.appendcheckaddrq()
		            locheckadd.txndate.setvalue(ldRefundDate)
		
		            locheckadd.payeeentityref.listid.setvalue(lcOwnerListID)
		            locheckadd.accountref.listid.setvalue(m.cDisbAcct)
		            locheckadd.istobeprinted.setvalue(1)
		
		            loexpenseline = locheckadd.expenselineaddlist.APPEND
		            loexpenseline.MEMO.setvalue('Owner Prepay Refund')
		            loexpenseline.amount.setvalue(ABS(ROUND(lnTotal, 2)))
		            loexpenseline.accountref.listid.setvalue(m.cOffsetAcct)
		
		            lcxml      = m.goApp.oQB.oqbrequest.toxmlstring()
		            loresponse = m.goApp.oQB.oqbsm.dorequests(m.goApp.oQB.oqbrequest)
		            loaddresp  = loresponse.responselist.getat(0)
		
		            IF loaddresp.statuscode <> 0
		                IF 'object' $ LOWER(loaddresp.statusmessage)
		                    lcListID = SUBSTR(loaddresp.statusmessage, AT('"', loaddresp.statusmessage) + 1, AT('"', loaddresp.statusmessage, 2) - (AT('"', loaddresp.statusmessage) + 1))
		                    llResult = m.goApp.oQB.QBListID(lcListID, THISFORM.DATASESSIONID)
		                    IF llResult
		                        SELECT QBListID
		                        IF QBListID.ctype = 'Account'
		                            lcMessage = 'The ' + ALLTRIM(QBListID.cdescription) + ' specified in the ' + ;
		                                'QB Posting Preferences was not found in QuickBooks. Please select a new account ' + ;
		                                'and try to clear the suspense again.'
		                        ELSE
		                            lcMessage = 'The ' + ALLTRIM(QBListID.cdescription) + ' was not found in QuickBooks. ' + ;
		                                'Please synchronize the ' + ALLTRIM(QBListID.ctype) + ' file and try to clear the suspense again.'
		                        ENDIF
		                        THISFORM.omessage.severe(lcMessage)
		                    ELSE
		                        THISFORM.omessage.severe(loaddresp.statusmessage)
		                    ENDIF
		                ELSE
		                    THISFORM.omessage.severe(loaddresp.statusmessage)
		                ENDIF
		                m.goApp.oQB.csysctlkey = m.cidsysctl
		                m.goApp.oQB.QBUnpostRev()
		                m.goApp.oQB.ClearErrorInfo()
		                THIS.lqberror = .T.
		                llReturn      = .F.
		                EXIT
		            ELSE
		                lonewchk = loaddresp.DETAIL
		                m.ctxnid = lonewchk.txnid.getvalue()
		                SELE checks
		                LOCATE FOR cidchec = m.cidchec
		                REPL ctxnid WITH m.ctxnid
		                swSELECT('qbpost', .T.)
		                LOCATE FOR cidsysctl = m.cidsysctl AND ntype = 13
		                IF NOT FOUND()
		                    m.ntype   = 13
		                    m.mtxnids = m.ctxnid
		                    INSERT INTO qbpost FROM MEMVAR
		                ELSE
		                    IF NOT EMPTY(ALLT(mtxnids))
		                        REPL mtxnids WITH ALLT(mtxnids) + CHR(13) + m.ctxnid
		                    ELSE
		                        REPL mtxnids WITH m.ctxnid
		                    ENDIF
		                ENDIF
		                m.goApp.oQB.oqbrequest.clearrequests()
		                m.goApp.oQB.oqbsm.ClearErrorRecovery()
		
		* Get the balance by well so we can zero them out
						SELECT  cwellid, cwellname, cownerid, cbatch, cacctno, SUM(nAmount) AS nAmount ;
							FROM prepayview ;
							INTO CURSOR tempRefund ;
							ORDER BY cwellid ;
							GROUP BY cwellid
		
		                SELECT tempRefund
		                SCAN
		                    SCATTER MEMVAR
		                    IF m.nAmount > 0
		                        m.lManual  = .T.
		                        m.crectype = 'U'
		                        m.dEffDate = ldRefundDate
		                        m.nAmount  = m.nAmount * -1
		                        INSERT INTO prepayview FROM MEMVAR
		                    ENDIF
		                ENDSCAN
		                SELECT prepayview
		                THISFORM.lstDetail.REQUERY()
		                THISFORM.lstDetail.REFRESH()
		                THISFORM.calctot()
		
		                SELECT prepayh
		                TABLEUPDATE(.T., .T.)
		                SELECT prepayview
		                TABLEUPDATE(.T., .T.)
		                SELECT checks
		                TABLEUPDATE(.T., .T.)
		                thisform.nBalance = THISFORM.CheckBalance()
		                THISFORM.lblBalance.CAPTION = 'Balance Remaining: ' + TRANSFORM(THISFORM.nBalance, '999,999,999.99')
		                THISFORM.setchanged(.F.)
		            ENDIF
		        ENDIF
		    ELSE
		        IF llCheck  &&  If the option to create a check was chosen, it can't be done, since the balance is negative
		            THISFORM.omessage.DISPLAY('No check was created, since the cleared balance was negative.')
		        ENDIF
		    ENDIF
		CATCH TO loError
		    llReturn = .F.
		    DO errorlog WITH 'RefundBalance', loError.LINENO, 'Prepayments', loError.ERRORNO, loError.MESSAGE, '', loError
		    MESSAGEBOX('Unable to process the Refund at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		          'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		RETURN llReturn
		
		
	ENDPROC

	PROCEDURE requery
		LPARAMETERS cWorkarea, uP1, uP2, uP3, uP4
		
		LOCAL lcBatch, llReturn, loError
		llReturn = .T.
		
		TRY
		   IF UPPER(m.cWorkarea) = 'PREPAYVIEW'
		      lcBatch = prepayh.cbatch
		      = REQUERY('prepayview')
		      THISFORM.lstDetail.REQUERY()
		      THISFORM.calctot()
		      THISFORM.lstDetail.REFRESH()
		   ENDIF
		
		CATCH TO loError
		   llReturn = .F.
		   DO errorlog WITH 'Requery', loError.LINENO, 'PrePay', loError.ERRORNO, loError.MESSAGE, '', loError
		   MESSAGEBOX('Unable to process the prepay at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		        'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		RETURN llReturn
		
	ENDPROC

	PROCEDURE requeryrecordsource
	ENDPROC

	PROCEDURE save
		LPARAMETERS cworkarealist
		
		LOCAL llReturn, loError
		llReturn = .T.
		
		TRY
		   THISFORM.txtccustid.SETFOCUS()
		   THISFORM.setnextcontrol(THISFORM.txtccustid)
		   THISFORM.activatenextcontrol()
		CATCH TO loError
		   llReturn = .F.
		   DO errorlog WITH 'Save', loError.LINENO, 'PrePay', loError.ERRORNO, loError.MESSAGE, '', loError
		   MESSAGEBOX('Unable to save the prepayment at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		        'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		IF llReturn
		   RETURN(DODEFAULT(cworkarealist))
		ENDIF
	ENDPROC

	PROCEDURE setstate
		this.lChanged = .T.
		m.goStateManager.RefreshAll('Form Edit')
	ENDPROC

	PROCEDURE cmdatamanager.afternav
		LPARAMETERS cWorkarea
		
		IF UPPER(m.cworkarea) == 'PREPAYH'   
		
		   * Fill in the owner name for this prepayment
		   thisform.fillOwnerName()
		   
		   lcBatch = prepayh.cBatch  
		   thisform.nTotal = prepayh.ntotal
		   thisform.requery('Prepayview')
		   thisform.nBalance = THISFORM.CheckBalance()
		   THISFORM.lblBalance.CAPTION = 'Balance Remaining: ' + TRANSFORM(THISFORM.nBalance, '999,999,999.99')
		   
		ENDIF 
		
		DODEFAULT(cWorkarea)
	ENDPROC

	PROCEDURE cmdatamanager.afternew
		LPARAMETERS cWorkarea
		
		IF m.cWorkarea = 'Prepayh'   
		   replace prepayh.ddate WITH DATE()
		   THISFORM.setnextcontrol(THISFORM.cbocashacct)
		   IF NOT EMPTY(THISFORM.coldacctno)
		      THISFORM.cbocashacct.SET('value',THISFORM.coldacctno)
		   ELSE
		      THISFORM.cbocashacct.LISTITEMID = 1
		   ENDIF
		   thisform.cbocashacct.Refresh()
		
		   lcBatch = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Batch')
		   SET DELETED OFF
		   SELECT prepayh1
		   SET ORDER TO cbatch
		   DO WHILE SEEK(lcBatch)
		      lcBatch = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Batch')
		   ENDDO
		   SET DELETED ON
		   SELECT prepayh
		   REPLACE cbatch  WITH lcBatch
		   
		   IF m.goapp.oQB.lQBActive = .f.
		      thisform.chkNOQBPOST.Value = .t.
		      SELECT prepayh
		      REPLACE lnoqbpost WITH .t.
		   ENDIF 
		   
		   THISFORM.ccustsave  = ''
		   thisform.lNewBuild = .t.
		   thisform.lstDetail.Requery()
		   thisform.Refresh()
		ENDIF
		
		DODEFAULT(cWorkarea)
		
	ENDPROC

	PROCEDURE cmdatamanager.afterupdate
		LPARAMETERS cWorkareaList, lCurrentRecordOnly
		
		THISFORM.lblBalance.CAPTION = 'Balance Remaining: ' + TRANSFORM(THISFORM.CheckBalance(), '999,999,999.99')
	ENDPROC

	PROCEDURE cmdatamanager.beforenav
		LPARAMETERS cWorkarea
		
		   IF thisform.cmdatamanager.ischanged('Prepayview')
		      IF MESSAGEBOX('There are unsaved changes to the current payment. Do you want to save the changes?',36,'Save changes?') = 6
		         thisform.save()
		      ELSE
		         thisform.cmdatamanager.revertall()
		      ENDIF
		   ENDIF 
		
	ENDPROC

	PROCEDURE cmdatamanager.beforeupdate
		LPARAMETERS cWorkareaList, lCurrentRecordOnly
		
		LOCAL lcBatch, lcAPAcct,  llReturn, lcSelect, lnRecNo, lcFilter, lcidchec
		LOCAL lcYear, lcRun, llDiffAmount, llCleared, llDiffAccount, lnBalance
		
		llReturn = .T.
		
		TRY
		* Check for required fields
		    IF EMPTY(prepayh.cacctno) AND NOT thisform.chkNOQBPOST.Value 
		        THISFORM.oMessage.Warning('A cash account must be specified.  Please choose the cash account.')
		        THISFORM.setnextcontrol(THISFORM.cbocashacct)
		        llReturn = .F.
		        EXIT
		    ENDIF
		    
		    lnBalance = thisform.CheckBalance() 
		
		   
		    llReturn = THISFORM.PrePayUsed(prepayh.cbatch)
		
		    IF NOT llReturn
		       thisform.cmdatamanager.revertall()
		       thisform.Refresh()
		       EXIT
		    ENDIF
		    
		    IF prepayh.ntotal = 0
		        THISFORM.oMessage.Warning('Please add some detail lines before saving.')
		        llReturn = .F.
		        EXIT
		    ENDIF
		
		    lcBatch  = prepayh.cbatch
		    lcChkKey = prepayh.cidchec
		
		*  Check to see if the fiscal period is closed
		    IF NOT THISFORM.glmaint.checkperiod(prepayh.dDate)
		        THISFORM.oMessage.Warning('Unable to save this prepayment. Either the fiscal year or period ' + ;
		              'represented by this date has been closed.')  &&  CheckPeriod returns a message, so a second one is redundant. - BH 12/19/2008
		        llReturn = .F.
		        EXIT
		    ENDIF
		
		    WAIT WINDOW NOWAIT 'Saving Changes, Please Wait.....'
		
		
		    IF NOT THISFORM.lChanged
		        llReturn = .F.
		        EXIT
		    ENDIF
		    
		    IF prepayh.ntotal < 0
		        THISFORM.oMessage.Warning('A negative balance prepayment cannot be saved.  Please correct.')
		        llReturn = .F.
		        EXIT
		    ENDIF
		
		    IF prepayh.ntotal = 0
		        THISFORM.oMessage.Warning('Please add some detail lines before saving.')
		        llReturn = .F.
		        EXIT
		    ENDIF
		
		
		* If the ref file exists, plug 'DM' into the reference for journal entries
		    IF FILE('dmref.cfg')
		        lcref = ' - DM'
		    ELSE
		        lcref = ''
		    ENDIF
		
		*
		*  Look to see if this prepayment has been deposited
		*
		
		    lcSelect = SELECT()
		    lcBatch  = prepayh.cbatch
		    lcidchec = prepayh.cidchec
		
		    WAIT WINDOW NOWAIT 'Saving Changes, Please Wait.....'
		
		* Get revenue clearing account
		    SELECT glopt
		    GO TOP
		    lcClearAcct = cQBRevClear
		    lcExpClear  = cQBExpClear
		
		    IF EMPTY(lcClearAcct)
		        lcAcct = 'Uncategorized Expenses'
		        SELECT accounts
		        LOCATE FOR lcAcct $ cAcctDesc
		        IF FOUND()
		            lcAcctListID = cListID
		        ELSE
		* IF the account is invalid, post to last account
		            GO BOTT
		            lcAcctListID = cListID
		        ENDIF
		    ELSE
		        lcAcctListID = lcClearAcct
		    ENDIF
		
		*
		*  Create the G/L journal entries for this invoice
		*
		    IF m.goapp.oQB.lqbactive AND NOT thisform.chkNOQBPOST.Value 
		        IF m.goapp.oQB.oqbsm.IsErrorRecoveryInfo()
		            loresp     = m.goapp.oQB.oqbsm.geterrorrecoverystatus()
		            lcxml      = loresp.toxmlstring()
		            loresponse = loresp.responselist.getat(0)
		            IF loresponse.statuscode = 0
		                lcreq  = m.goapp.oQB.oqbsm.getsavedmsgsetrequest()
		                m.goapp.oQB.oqbsm.ClearErrorRecovery()
		            ELSE
		                MESSAGEBOX(lcxml, 48, 'Error Recovery Info')
		            ENDIF
		        ENDIF
		
		* get a message set request object (version 1.1 xml)
		        loRequest = m.goapp.oQB.oQBRequest
		
		* set the on error attribute for the request
		        loRequest.ATTRIBUTES.OnError = 1
		        loRequest.clearrequests()
		
		        IF NOT EMPTY(prepayh.ctxnid)
		            llDelete = .T.
		            IF prepayh.lnoqbpost
		* Ask if the prepayment should be deleted from QB since it obviously was posted to QB earlier and
		* not they're telling it not to post.
		                IF NOT THISFORM.oMessage.CONFIRM('This prepayment has previously been saved to QuickBooks. Do you want to delete the original entry from QuickBooks?')
		                    llDelete = .F.
		                ENDIF
		            ENDIF
		            IF llDelete
		* add a request to delete the prepayment
		                loRcptDel = loRequest.AppendTxnDelRq()
		                IF m.goapp.oQB.qbfcversion > ' 4.0'
		                    loRcptDel.TxnDelType.SetValue(15)
		                ELSE
		                    loRcptDel.TxnDelType.SetValue(14)
		                ENDIF
		                loRcptDel.TxnID.SetValue(prepayh.ctxnid)
		
		                loresponse = m.goapp.oQB.oqbsm.DoRequests(loRequest)
		                loDelResp  = loresponse.responselist.getat(0)
		
		                IF loDelResp.statuscode = 0
		                    SELECT prepayh
		                    REPLACE ctxnid WITH ''
		                ELSE
		                    IF loDelResp.statuscode = 3160 AND 'deposit' $ LOWER(loDelResp.StatusMessage)
		                        THISFORM.oMessage.severe('This prepayment cannot be changed. It has been deposited in QuickBooks using Make Deposits.')
		                        m.goapp.oQB.oqbsm.ClearErrorRecovery()
		                        llReturn = .F.
		                        loRequest.clearrequests()
		                        loRequest.ATTRIBUTES.OnError = 1
		                    ENDIF
		                    IF 'not be locked' $ loDelResp.StatusMessage
		                        THISFORM.oMessage.Warning('This prepayment cannot be modified. QuickBooks currently has it locked.')
		                        m.goapp.oQB.oqbsm.ClearErrorRecovery()
		                        llReturn = .F.
		                        loRequest.clearrequests()
		                        loRequest.ATTRIBUTES.OnError = 1
		                    ENDIF
		                ENDIF
		                m.goapp.oQB.oqbsm.ClearErrorRecovery()
		            ENDIF
		        ENDIF
		
		        IF prepayh.lnoqbpost = .F. AND llReturn
		            loRequest.clearrequests()
		
		*  Setup the prepayment add request
		            loRcptAdd = loRequest.AppendJournalEntryAddRq()
		
		            loRcptAdd.RefNumber.SetValue(prepayh.cref)
		            loRcptAdd.TxnDate.SetValue(prepayh.dDate)
		
		            SELECT prepayview
		            SUM(nAmount) to lnTotal for crectype#'U' OR lManual
		*  Add the deposit to the check register
		            IF lnTotal > 0
		                IF m.goapp.oQB.qbfcversion > ' 4.0'
		                    loDebit = loRcptAdd.orjournallinelist.APPEND.JournalDebitLine
		                ELSE
		                    loDebit = loRcptAdd.JournalDebitLineList.APPEND
		                ENDIF
		
		                swselect('investor')
		                SET ORDER TO cownerid
		                IF SEEK(prepayh.cownerid)
		                    IF EMPTY(investor.cListID)
		                        THISFORM.oMessage.Warning('The prepayment cannot be saved.  The owner file needs to be synchronized with QuickBooks.')
		                        loRequest.clearrequests()
		                        llReturn = .F.
		                        loRequest.clearrequests()
		                        loRequest.ATTRIBUTES.OnError = 1
		                    ENDIF
		                    loDebit.EntityRef.ListID.SetValue(investor.cListID)
		                ELSE
		                    MESSAGEBOX('Owner: ' + prepayh.cownerid + ' not found in owner file.', 16, 'Owner Not Found')
		                    llReturn = .F.
		                    loRequest.clearrequests()
		                    loRequest.ATTRIBUTES.OnError = 1
		                ENDIF
		
		                IF llReturn
		                    loDebit.AccountRef.ListID.SetValue(prepayh.cacctno)
		                    loDebit.Amount.SetValue(ROUND(lnTotal, 2))
		                ENDIF
		            ENDIF
		
		*  Add detail lines to check
		            SELECT prepayview
		            SCAN FOR cbatch == lcBatch AND (crectype#'U' OR lManual)
		                SCATTER MEMVAR
		
		                IF m.nAmount > 0
		                    IF m.goapp.oQB.qbfcversion > ' 4.0'
		                        loEntry = loRcptAdd.orjournallinelist.APPEND.JournalCreditLine
		                    ELSE
		                        loEntry = loRcptAdd.JournalCreditLineList.APPEND
		                    ENDIF
		                ELSE
		                    IF m.goapp.oQB.qbfcversion > ' 4.0'
		                        loEntry = loRcptAdd.orjournallinelist.APPEND.JournalDebitLine
		                    ELSE
		                        loEntry = loRcptAdd.JournalDebitLineList.APPEND
		                    ENDIF
		                    m.nAmount = ABS(m.nAmount)
		                ENDIF
		
		                IF NOT EMPTY(m.cwellid)
		                    SELE wells
		                    SET ORDER TO cwellid
		                    IF SEEK(m.cwellid)
		                        IF EMPTY(ALLT(wells.cListID))
		                            THISFORM.oMessage.Warning('The prepayment cannot be saved.  The wells file needs to be synchronized with QuickBooks.')
		                            llReturn = .F.
		                            loRequest.clearrequests()
		                            loRequest.ATTRIBUTES.OnError = 1
		                        ENDIF
		
		                        IF llReturn
		                            loEntry.ClassRef.ListID.SetValue(wells.cListID)
		                        ENDIF
		                    ENDIF
		                ENDIF
		
		                loEntry.EntityRef.ListID.SetValue(investor.cListID)
		                m.cAcctListID = m.cacctno
		
		                IF llReturn
		                    loEntry.AccountRef.ListID.SetValue(m.cAcctListID)
		                    loEntry.Amount.SetValue(ROUND(ABS(m.nAmount), 2))
		
		                    loEntry.MEMO.SetValue(m.cwellname + lcref)
		                ENDIF
		            ENDSCAN
		
		            loresponse = m.goapp.oQB.oqbsm.DoRequests(loRequest)
		            loAddResp  = loresponse.responselist.getat(0)
		
		
		            IF loAddResp.statuscode = 0
		                WAIT WIND NOWAIT 'Prepayment successfully added in QuickBooks'
		
		                loNewCheck = loAddResp.DETAIL
		                m.ctxnid   = loNewCheck.TxnID.getvalue()
		                m.goapp.oQB.oqbsm.ClearErrorRecovery()
		
		                SELE prepayh
		                REPL ctxnid WITH m.ctxnid
		                = TABLEUPDATE(.T.)
		            ELSE
		                SELE prepayh
		                REPL ctxnid WITH ''
		                = TABLEUPDATE(.T.)
		                IF 'object' $ LOWER(loAddResp.StatusMessage)
		                    lcListID = SUBSTR(loAddResp.StatusMessage, AT('"', loAddResp.StatusMessage) + 1, AT('"', loAddResp.StatusMessage, 2) - (AT('"', loAddResp.StatusMessage) + 1))
		                    llResult = m.goapp.oQB.QBListID(lcListID, THISFORM.DATASESSIONID)
		                    IF llResult
		                        SELECT QBListID
		                        IF QBListID.cType = 'Account'
		                            lcMessage = 'The ' + ALLTRIM(QBListID.cdescription) + ' specified in the ' + ;
		                                'QB Posting Preferences was not found in QuickBooks. Please select a new account ' + ;
		                                'and try to save the prepayment again.'
		                        ELSE
		                            lcMessage = 'The ' + ALLTRIM(QBListID.cdescription) + ' was not found in QuickBooks. ' + ;
		                                'Please synchronize the ' + ALLTRIM(QBListID.cType) + ' file and try to save the prepayment again.'
		                        ENDIF
		                    ELSE
		                        lcMessage = loAddResp.StatusMessage
		                    ENDIF
		                    THISFORM.oMessage.severe(lcMessage)
		                ELSE
		                    THISFORM.oMessage.severe(loAddResp.StatusMessage)
		                ENDIF
		                m.goapp.oQB.oqbsm.ClearErrorRecovery()
		                llReturn = .F.
		            ENDIF
		        ENDIF
		    ELSE
		        IF NOT prepayh.lnoqbpost
		            THISFORM.oMessage.severe('There is no active connection to QuickBooks.  Prepayments cannot be changed at this time.')
		            llReturn = .F.
		        ELSE
		            MESSAGEBOX("This prepayment is marked not to post to QuickBooks."  + CHR(10) + CHR(10) + ;
		                  "Nothing new will be posted to QuickBooks when this   "  + CHR(10) + ;
		                  "prepayment is saved."                                  + CHR(10) + CHR(10) + ;
		                  "However, when the Revenue run which processes" + CHR(10) + ;
		                  "this revenue is closed and then posted to QuickBooks,"   + CHR(10) + ;
		                  "the clearing entries will still be made for this"   + CHR(10) + ;
		                  "prepayment. This may cause more revenue to be cleared" + CHR(10) + ;
		                  "than what was originally posted for that run."      + CHR(10) + ;
		                  "You may need to make an adjustment in QuickBooks"  + CHR(10) + ;
		                  "to the Revenue Clearing account to correct this." + CHR(10) + CHR(10) + ;
		                  "Please see the 'Don't post to QuickBooks' topic"    + CHR(10) + ;
		                  "in the Help file for more information.", 48, "QuickBooks No Post Notice")
		        ENDIF
		    ENDIF
		CATCH TO loError
		    DO errorlog WITH 'BeforeUpdate', loError.LINENO, 'Prepayment', loError.ERRORNO, loError.MESSAGE
		    MESSAGEBOX('Unable to save the prepayment at this time. Check the System Log found under Other Reports for more information.', 16, 'Problem Encountered')
		    llReturn = .F.
		ENDTRY
		THISFORM.lChanged = .F.
		
		IF llReturn
		    SELECT prepayh
		    TABLEUPDATE(.T., .T.)
		    SELECT prepayview
		    TABLEUPDATE(.T., .T.)
		    THISFORM.setchanged(.F.)
		ENDIF
		
		RETURN llReturn
		
		
		
		
		
		
		
	ENDPROC

	PROCEDURE cmdatamanager.delete
		LPARAMETERS cWorkarea
		
		LOCAL lcBatch, lcPmtBatch, lcAmount, lcChkKey
		LOCAL llReturn, lnSelect, loError
		
		llReturn = .F.
		
		TRY
		
		*  Make sure the period or year isn't closed
		   IF NOT THISFORM.glmaint.CheckPeriod(prepayh.ddate)
		      llReturn = .F.
		      EXIT
		   ENDIF
		
		   lcPmtBatch = prepayh.cbatch
		   lcChkKey   = prepayh.cidchec
		
		   llReturn = thisform.prepayused(lcPmtBatch)
		   IF NOT llReturn
		      EXIT
		   ENDIF 
		
		   swselect('checks')
		   LOCATE FOR cidchec == lcChkKey AND lCleared  &&  Make sure the deposit entry hasn't already been cleared before proceeding - BH 9/7/06
		   IF FOUND()
		      THISFORM.oMessage.Warning('The deposit created by this payment has been cleared.  It cannot be deleted.')
		      llReturn = .F.
		      EXIT
		   ENDIF
		
		   IF NOT THISFORM.oMessage.CONFIRM('Are you sure you want to delete this payment?')
		      llReturn = .F.
		      EXIT
		   ENDIF
		
		   lnSelect = SELECT()
		
		   DO CASE
		      CASE LOWER(m.cWorkarea) = 'prepayh'
		
		*
		*  Create the G/L journal entries for this invoice
		*
		         IF m.goapp.oQB.lqbactive
		            IF m.goapp.oQB.oqbsm.IsErrorRecoveryInfo()
		               loresp     = m.goapp.oQB.oqbsm.geterrorrecoverystatus()
		               lcxml      = loresp.toxmlstring()
		               loresponse = loresp.responselist.getat(0)
		               IF loresponse.statuscode = 0
		                  lcreq  = m.goapp.oQB.oqbsm.getsavedmsgsetrequest()
		                  m.goapp.oQB.oqbsm.ClearErrorRecovery()
		               ELSE
		                  MESSAGEBOX(lcxml, 48, 'Error Recovery Info')
		               ENDIF
		            ENDIF
		
		* get a message set request object (version 1.1 xml)
		            loRequest = m.goapp.oQB.oQBRequest
		
		* set the on error attribute for the request
		            loRequest.ATTRIBUTES.OnError = 1
		            loRequest.clearrequests()
		
		            IF NOT EMPTY(prepayh.ctxnid)
		               llDelete = .T.
		               IF prepayh.lnoqbpost
		* Ask if the prepayment should be deleted from QB since it obviously was posted to QB earlier and
		* not they're telling it not to post.
		                  IF NOT THISFORM.oMessage.CONFIRM('This prepayment has previously been saved to QuickBooks. ' + ;
		                          'Do you want to delete the original entry from QuickBooks?')
		                     llDelete = .F.
		                  ENDIF
		               ENDIF
		               IF llDelete
		* add a request to delete the prepayment
		                  llReturn = m.goApp.oQB.DeleteTxnID(prepayh.cTxnID, 15)
		                  IF llReturn
		                     SELECT prepayh
		                     REPLACE ctxnid WITH ''
		                  ELSE
		                     EXIT    
		                  ENDIF
		               ENDIF
		            ENDIF
		         ENDIF
		
		         swselect('checks')
		         LOCATE FOR cbatch = lcPmtBatch
		         IF FOUND('checks')
		            DELETE
		         ENDIF
		
		         swselect('prepayh')
		         DELETE NEXT 1
		         = TABLEUPDATE(.T., .T.)
		         SELECT prepayview
		         DELETE ALL
		         = TABLEUPDATE(.T., .T.)
		         swselect('checks')
		         = TABLEUPDATE(.T., .T.)
		
		         THISFORM.lstDetail.CLEAR()
		         THISFORM.lstDetail.REFRESH()
		         THISFORM.setchanged(.F.)
		         SET DELETED ON
		         thisform.next()
		         THISFORM.REQUERY('Prepayview')
		*         THISFORM.setstate()
		
		   ENDCASE
		   SELECT (lnSelect)
		CATCH TO loError
		   llReturn = .F.
		   DO errorlog WITH 'Delete', loError.LINENO, 'Prepayments', loError.ERRORNO, loError.MESSAGE, '', loError
		   MESSAGEBOX('Unable to delete the prepayment at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		        'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		RETURN llReturn
		
		
		
		
		
		
	ENDPROC

	PROCEDURE cmdCustomer.Click
		LOCAL lcList
		PRIV llOK
		
		llOK = .T.
		
		TRY
		    SET SAFETY OFF
		
		    swselect('investor')
		    swselect('wellinv')
		
			SELECT  cownerid, csortfield ;
				FROM investor ;
				INTO CURSOR prepayowner READWRITE ;
				WHERE cownerid IN (SELECT  cownerid ;
									   FROM wellinv ;
									   WHERE ljib) ;
				ORDER BY cownerid
		
		    IF _TALLY > 0
		        INDEX ON cownerid TAG cownerid
		        INDEX ON csortfield TAG csortfield
		
		        lcList = 'cOwnerID,cSortField'
		        DO FORM ..\CUSTOM\picklist WITH 'prepayowner', lcList, THISFORM.txtccustid.VALUE, 2, .T.
		
		        IF llOK
		            THISFORM.cmdatamanager.REPLACE('prepayh', 'cownerid', prepayowner.cownerid)
		            THISFORM.txtccustid.REFRESH()
		            THISFORM.txtcCustName.VALUE = prepayowner.csortfield
		            THISFORM.txtcCustName.REFRESH()
		        ENDIF
		
		    ELSE
		        MESSAGEBOX("Prepayments can only be entered for owners who have a JIB interest. " + ;
		              "These are owners marked with the JIB check box in the division of interests." + CHR(10) + CHR(10) + ;
		              "There were no owners found marked in the DOI with a JIB interest.", 48, 'No JIB Owners')
		    ENDIF
		
		CATCH TO loError
		    llReturn = .F.
		    DO errorlog WITH 'Owner Click', loError.LINENO, 'Prepayments', loError.ERRORNO, loError.MESSAGE, '', loError
		    MESSAGEBOX('Unable to bring up the owner list at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		          'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		THISFORM.setnextcontrol(THISFORM.txtccustid)
		
		
	ENDPROC

	PROCEDURE cmdLookWell.Click
		LOCAL lcList
		PRIV llOK
		
		llOK = .T.
		
		lcList = 'cwellid,cwellname'
		
		SELECT wellinv.cwellid, wells.cwellname ;
		  FROM wellinv, wells ;
		  WHERE wellinv.cownerid = thisform.txtccustid.Value ;
		   AND wellinv.ctypeinv = 'W' ;
		   AND wellinv.ljib = .t. ;
		   AND wellinv.cwellid == wells.cwellid ;
		  INTO CURSOR tempwell READWRITE ;
		  ORDER BY wellinv.cwellid GROUP BY wellinv.cwellid
		  
		  INDEX on cwellid TAG cwellid
		  INDEX on cwellname TAG cwellname
		  
		DO FORM ..\Custom\PickList WITH 'tempwell', lcList, this.parent.txtcwellid.value, 2, .t.
		
		IF llOK
		   this.parent.txtcwellid.value   = tempwell.cwellid
		   this.parent.txtcwellname.value = tempwell.cwellname
		   this.parent.txtcwellid.refresh()
		   this.parent.txtcWellName.refresh()
		ENDIF   
		
		thisform.setnextcontrol(This.Parent.txtcwellid)
		
		ON KEY LABEL F10 _screen.activeform.Save()
		ON KEY LABEL CTRL+A _screen.activeform.New()
		ON KEY LABEL CTRL+D _screen.activeform.Delete()
		ON KEY LABEL CTRL+L _screen.activeform.List()
		
	ENDPROC

	PROCEDURE cmdRefund.Click
		LOCAL lnBalance
		
		lnBalance = thisform.CheckBalance()
		IF lnBalance > 0
		   Thisform.RefundBalance(lnBalance)
		ELSE
		   MESSAGEBOX('There is not a balance to refund from this prepayment.',16,'No Balance')
		ENDIF 
	ENDPROC

	PROCEDURE lstDetail.DblClick
		LOCAL llReturn
		
		llReturn = .T.
		* llReturn = THISFORM.PrePayUsed(prepayh.cbatch)
		IF llReturn
		
		   THISFORM.txtcWellID.SET('value', prepayview.cWellID)
		   THISFORM.txtcwellName.SET('value', prepayview.cWellName)
		   THISFORM.qbaccount2.SET('value', prepayview.cAcctNo)
		   THISFORM.txtnExtension.SET('value', prepayview.nAmount)
		   THISFORM.txtdefFDATE.SET('value', prepayview.deffdate)
		
		   THISFORM.lchanged = .T.
		   SELECT prepayview
		   DELETE NEXT 1
		*!*	   TABLEUPDATE(.t.,.t.)
		   THIS.REFRESH()
		
		   THIS.REQUERY()
		
		   THISFORM.calctot()
		   THISFORM.txtcWellID.SETFOCUS()
		   THISFORM.setstate()
		ENDIF
		
		
		
		
	ENDPROC

	PROCEDURE Qbaccount2.Init
		IF DODEFAULT()
		   FOR x = 1 TO this.ListCount
		      IF 'receivable' $ LOWER(this.listitem[x,2])
		          this.Removelistitem(x)
		      ENDIF 
		      IF 'payable' $ LOWER(this.listitem[x,2])
		          this.Removelistitem(x)
		      ENDIF 
		   ENDFOR    
		ENDIF 
		
		
	ENDPROC

	PROCEDURE txtCcustid.GotFocus
		ON KEY LABEL F2 _screen.activeform.cmdCustomer.Click()
		
		DODEFAULT()
	ENDPROC

	PROCEDURE txtCcustid.InteractiveChange
		IF DODEFAULT()
		   SELECT investor
		   LOCATE FOR cOwnerID == THIS.VALUE
		   IF FOUND()
		      THISFORM.txtcCustName.SET('value',investor.cOwnName)
		   ELSE
		      THISFORM.txtcCustName.SET('value','')
		   ENDIF
		ENDIF
		
	ENDPROC

	PROCEDURE txtCcustid.LostFocus
		IF THISFORM.lNewBuild
		   IF THISFORM.cCustSave <> THIS.VALUE
		      THISFORM.cmdatamanager.REPLACE('prepayh','cOwnerID',this.value)
		      THISFORM.calctot()
		   ENDIF
		ENDIF
		
		ON KEY LABEL F2 *
		RETURN (DODEFAULT())
		
	ENDPROC

	PROCEDURE txtCcustid.Valid
		IF DODEFAULT()
		    IF NOT EMPTY(THIS.VALUE)
		        swselect('wellinv')
		        LOCATE FOR cownerid == THIS.VALUE AND lJIB
		        IF NOT FOUND() AND thisform.cmdatamanager.isnew('Prepayh')
		            MESSAGEBOX("This owner: " + ALLTRIM(THIS.VALUE) + " doesn't have any JIB interests in the division of interests" + CHR(10) + CHR(10) + ;
		                  "Prepayments can only be entered for owners with JIB interests.", 48, 'No JIB Interests')
		            THIS.SET('value', '')
		            THISFORM.txtccustName.SET('value', '')
		            RETURN 0
		        ENDIF
		    ENDIF
		ENDIF
	ENDPROC

	PROCEDURE txtCcustid.When
		thisform.cCustSave = this.value
		
		DODEFAULT()
	ENDPROC

	PROCEDURE txtcCustName.Init
		THISFORM.txtcCustid.VALID()
		
		DODEFAULT()
		
	ENDPROC

	PROCEDURE txtcCustName.When
		RETURN .F.
	ENDPROC

	PROCEDURE txtcWellID.GotFocus
		ON KEY LABEL F2 _SCREEN.ACTIVEFORM.cmdLookWell.CLICK()
		
		DODEFAULT()
		
	ENDPROC

	PROCEDURE txtcWellID.InteractiveChange
		IF DODEFAULT()
		   SELECT wells
		   LOCATE FOR cwellid == this.Value
		   IF FOUND()
		      thisform.txtcWellName.Value = wells.cwellname
		      thisform.txtcWellName.Refresh()
		   ELSE
		      thisform.txtcWellName.Value = ''
		      thisform.txtcWellName.Refresh()
		   ENDIF
		ENDIF       
		      
		   
	ENDPROC

	PROCEDURE txtcWellID.LostFocus
		ON KEY LABEL F2 *
		DODEFAULT()
		
		
		
		
	ENDPROC

	PROCEDURE txtcWellID.Valid
		IF DODEFAULT()
		    IF NOT EMPTY(THIS.VALUE) AND thisform.cmdatamanager.isnew('Prepayh')
		        swselect('wellinv')
		        LOCATE FOR cownerid == THISFORM.txtccustid.VALUE AND cwellid == THIS.VALUE AND ctypeinv = 'W' AND ljib
		        IF NOT FOUND()
		            MESSAGEBOX("This owner doesn't have a JIB ownership in this well. Try another well.",16,'No Interests Found')
		            thisform.txtcWellID.set('Value','')
		            RETURN 0
		        ENDIF
		    ENDIF
		    IF EMPTY(THIS.VALUE)
		        THIS.PARENT.txtcwellname.SET('value','')
		    ENDIF
		ENDIF
		
	ENDPROC

	PROCEDURE txtcWellName.When
		RETURN .F.
	ENDPROC

	PROCEDURE txtnExtension.LostFocus
		IF (LASTKEY() = 13 OR LASTKEY() = 9) AND NOT MDOWN()  &&  Tab or enter, but not a mouseclick
		   thisform.AddDetailLine()
		ENDIF
		
	ENDPROC

	PROCEDURE txtNpmtamt.When
		RETURN .f.
		
	ENDPROC

ENDDEFINE
