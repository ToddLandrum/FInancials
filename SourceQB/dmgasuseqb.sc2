*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="dmgasuseqb.scx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="2" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Cursor1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor6" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor7" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor8" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor9" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor10" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor11" UniqueID="" Timestamp="" />

	AutoOpenTables = .F.
	DataSource = .NULL.
	Height = 516
	InitialSelectedAlias = "gasuse"
	Left = 235
	Name = "Dataenvironment"
	Top = 79
	Width = 792

	ADD OBJECT 'Cursor1' AS cursor WITH ;
		Alias = "gasown", ;
		BufferModeOverride = 5, ;
		CursorSource = "gasown", ;
		Database = ..\datafiles\gcwwat45data\appdata.dbc, ;
		Height = 90, ;
		Left = 9, ;
		Name = "Cursor1", ;
		Top = 20, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor10' AS cursor WITH ;
		Alias = "coabal", ;
		CursorSource = "coabal", ;
		Database = ..\datafiles\gcwwat45data\appdata.dbc, ;
		Height = 90, ;
		Left = 570, ;
		Name = "Cursor10", ;
		Top = 140, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor11' AS cursor WITH ;
		Alias = "gasuse1", ;
		CursorSource = "gasuse", ;
		Database = ..\datafiles\gcwwat45data\appdata.dbc, ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor11", ;
		Top = 260, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor2' AS cursor WITH ;
		Alias = "investor", ;
		CursorSource = "investor", ;
		Database = ..\datafiles\gcwwat45data\appdata.dbc, ;
		Height = 90, ;
		Left = 150, ;
		Name = "Cursor2", ;
		Top = 20, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor3' AS cursor WITH ;
		Alias = "gasuse", ;
		CursorSource = "gasuse", ;
		Database = ..\datafiles\gcwwat45data\appdata.dbc, ;
		Height = 237, ;
		Left = 290, ;
		Name = "Cursor3", ;
		Top = 20, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor4' AS cursor WITH ;
		Alias = "gasopt", ;
		CursorSource = "gasopt", ;
		Database = ..\datafiles\gcwwat45data\appdata.dbc, ;
		Height = 90, ;
		Left = 430, ;
		Name = "Cursor4", ;
		Top = 20, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor5' AS cursor WITH ;
		Alias = "gasinv", ;
		CursorSource = "gasinv", ;
		Database = ..\datafiles\gcwwat45data\appdata.dbc, ;
		Height = 166, ;
		Left = 570, ;
		Name = "Cursor5", ;
		Top = 20, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor6' AS cursor WITH ;
		Alias = "aropt", ;
		CursorSource = "aropt", ;
		Database = ..\datafiles\gcwwat45data\appdata.dbc, ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor6", ;
		Top = 140, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor7' AS cursor WITH ;
		Alias = "terms", ;
		CursorSource = "terms", ;
		Database = ..\datafiles\gcwwat45data\appdata.dbc, ;
		Height = 90, ;
		Left = 150, ;
		Name = "Cursor7", ;
		Top = 140, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor8' AS cursor WITH ;
		Alias = "glmaster", ;
		CursorSource = "glmaster", ;
		Database = ..\datafiles\gcwwat45data\appdata.dbc, ;
		Height = 90, ;
		Left = 290, ;
		Name = "Cursor8", ;
		Top = 140, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor9' AS cursor WITH ;
		Alias = "glopt", ;
		CursorSource = "glopt", ;
		Database = ..\datafiles\gcwwat45data\appdata.dbc, ;
		Height = 90, ;
		Left = 430, ;
		Name = "Cursor9", ;
		Top = 140, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

ENDDEFINE

DEFINE CLASS formdmgasuse AS frmdatamanagerformcustom OF "..\custom\cforms.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Glmaint" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcDescription" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbltextcustom1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbltextcustom2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcOwnerID" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbltextcustom3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcCurrent" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbltextcustom4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtnMultiplier" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Linlinecustom1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbltextcustom5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtnUsed" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbltextcustom6" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcMeterNo" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbltextcustom7" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtnPrice" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbltextcustom8" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdLookOwner" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtnPriceAdj" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Linlinecustom2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Linlinecustom3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Linlinecustom4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbltextcustom9" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Linlinecustom5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Linlinecustom6" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtnDue" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbltextcustom10" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtnUsedPrior" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbltextcustom11" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbltextcustom12" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtnUsedCurrent" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Linlinecustom7" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Linlinecustom8" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtnUsedYTD" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbltextcustom13" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbltextcustom14" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtnYearlyAmt" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblDifference" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtnDifference" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbltextcustom15" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chklRollOver" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcLast" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbltextcustom16" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtNpressure" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblNpressure" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtCcharge" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtNcharge" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblNcharge" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdSave" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtdDate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtdInvDate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcOwnerName" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: calcmcf
		*m: qbdelinv
		*m: qbpost		&& Post Invoice to QuickBooks
		*p: ddate
		*p: dinvdate
		*p: ledit
		*p: lfromclose
		*p: lnewrecord
		*p: ncounterlen
		*a: laterms[1,0]
	*</DefinedPropArrayMethod>

	Caption = "House Gas Meter Entry"
	clistexpression = gasuse.ddate
	cnavworkarea = gasuse
	cworkarea = gasuse
	ddate = {}
	dinvdate = {}
	DoCreate = .T.
	Height = 540
	Icon = ..\
	ledit = .F.
	lexpliciteditmode = .F.
	lfromclose = .F.
	lnewrecord = .F.
	Name = "FormDMGasUse"
	Width = 413
	WindowState = 0
	cmdatamanager.Name = "cmdatamanager"
	cmdatamanager.TabIndex = 1
	cmlookupmanager.Name = "cmlookupmanager"
	Mwresize1.lblHighLight.Name = "lblHighLight"
	Mwresize1.lblShading.Name = "lblShading"
	Mwresize1.Name = "Mwresize1"

	ADD OBJECT 'chklRollOver' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Rollover", ;
		Left = 206, ;
		Name = "chklRollOver", ;
		TabIndex = 17, ;
		Top = 154, ;
		Value = .F., ;
		Visible = .F.
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'cmdLookOwner' AS cmdcommandbuttoncustom WITH ;
		Caption = "Owner ID", ;
		Height = 20, ;
		Left = 50, ;
		Name = "cmdLookOwner", ;
		TabIndex = 2, ;
		TabStop = .F., ;
		Top = 14, ;
		Width = 60, ;
		ZOrderSet = 20
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdSave' AS commandbutton WITH ;
		Caption = "\<Save", ;
		FontSize = 8, ;
		Height = 27, ;
		Left = 164, ;
		Name = "cmdSave", ;
		TabIndex = 44, ;
		Top = 501, ;
		Width = 84
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'Glmaint' AS glmaint WITH ;
		Height = 12, ;
		Left = 0, ;
		Name = "Glmaint", ;
		Top = 271, ;
		Width = 24
		*< END OBJECT: ClassLib="..\custom\swgl.vcx" BaseClass="custom" />

	ADD OBJECT 'lblDifference' AS lbltextcustom WITH ;
		Caption = "Excess This Month", ;
		Left = 209, ;
		Name = "lblDifference", ;
		TabIndex = 24, ;
		Top = 256, ;
		Visible = .F.
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblNcharge' AS lblfieldlabelcustom WITH ;
		Caption = "+ Extra Charge", ;
		Height = 16, ;
		Left = 36, ;
		Name = "lblNcharge", ;
		TabIndex = 34, ;
		Top = 366, ;
		Width = 74
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblNpressure' AS lblfieldlabelcustom WITH ;
		Alignment = 0, ;
		Caption = "Pressure (PSI)", ;
		Height = 16, ;
		Left = 38, ;
		Name = "lblNpressure", ;
		TabIndex = 21, ;
		Top = 213, ;
		Width = 72
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbltextcustom1' AS lbltextcustom WITH ;
		Caption = "Description", ;
		Left = 54, ;
		Name = "Lbltextcustom1", ;
		TabIndex = 14, ;
		Top = 120
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbltextcustom10' AS lbltextcustom WITH ;
		Caption = "Prior Usage", ;
		Left = 59, ;
		Name = "Lbltextcustom10", ;
		TabIndex = 37, ;
		Top = 441
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbltextcustom11' AS lbltextcustom WITH ;
		Caption = "+", ;
		FontSize = 10, ;
		Left = 139, ;
		Name = "Lbltextcustom11", ;
		TabIndex = 43, ;
		Top = 463
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbltextcustom12' AS lbltextcustom WITH ;
		Caption = "Current Usage", ;
		Left = 164, ;
		Name = "Lbltextcustom12", ;
		TabIndex = 38, ;
		Top = 441
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbltextcustom13' AS lbltextcustom WITH ;
		Caption = "YTD Usage", ;
		Left = 298, ;
		Name = "Lbltextcustom13", ;
		TabIndex = 39, ;
		Top = 441
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbltextcustom14' AS lbltextcustom WITH ;
		Caption = "Yearly Allowance", ;
		Left = 242, ;
		Name = "Lbltextcustom14", ;
		TabIndex = 12, ;
		Top = 95
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbltextcustom15' AS lbltextcustom WITH ;
		Caption = "Reading Date", ;
		Left = 44, ;
		Name = "Lbltextcustom15", ;
		TabIndex = 6, ;
		Top = 45
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbltextcustom16' AS lbltextcustom WITH ;
		Caption = "Invoice Date", ;
		Left = 49, ;
		Name = "Lbltextcustom16", ;
		TabIndex = 8, ;
		Top = 70
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbltextcustom2' AS lbltextcustom WITH ;
		Caption = "- Reading Last Month", ;
		Left = 6, ;
		Name = "Lbltextcustom2", ;
		TabIndex = 19, ;
		Top = 184
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbltextcustom3' AS lbltextcustom WITH ;
		Caption = "Reading This Month", ;
		Left = 14, ;
		Name = "Lbltextcustom3", ;
		TabIndex = 16, ;
		Top = 153
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbltextcustom4' AS lbltextcustom WITH ;
		Caption = "x Multiplier", ;
		Left = 58, ;
		Name = "Lbltextcustom4", ;
		TabIndex = 23, ;
		Top = 242
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbltextcustom5' AS lbltextcustom WITH ;
		Caption = "MCF Used", ;
		Left = 59, ;
		Name = "Lbltextcustom5", ;
		TabIndex = 27, ;
		Top = 278
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbltextcustom6' AS lbltextcustom WITH ;
		Caption = "Meter No.", ;
		Left = 62, ;
		Name = "Lbltextcustom6", ;
		TabIndex = 11, ;
		Top = 95
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbltextcustom7' AS lbltextcustom WITH ;
		Caption = "x Price", ;
		Left = 75, ;
		Name = "Lbltextcustom7", ;
		TabIndex = 29, ;
		Top = 307
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbltextcustom8' AS lbltextcustom WITH ;
		Caption = "+ Price Adjust", ;
		Left = 41, ;
		Name = "Lbltextcustom8", ;
		TabIndex = 31, ;
		Top = 336
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbltextcustom9' AS lbltextcustom WITH ;
		Caption = "Current Charges", ;
		Left = 28, ;
		Name = "Lbltextcustom9", ;
		TabIndex = 36, ;
		Top = 406
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Linlinecustom1' AS linlinecustom WITH ;
		Height = 0, ;
		Left = 116, ;
		Name = "Linlinecustom1", ;
		Top = 265, ;
		Width = 81
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="line" />

	ADD OBJECT 'Linlinecustom2' AS linlinecustom WITH ;
		Height = 0, ;
		Left = 49, ;
		Name = "Linlinecustom2", ;
		Top = 283, ;
		Width = 5
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="line" />

	ADD OBJECT 'Linlinecustom3' AS linlinecustom WITH ;
		Height = 0, ;
		Left = 49, ;
		Name = "Linlinecustom3", ;
		Top = 286, ;
		Width = 5
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="line" />

	ADD OBJECT 'Linlinecustom4' AS linlinecustom WITH ;
		Height = 0, ;
		Left = 116, ;
		Name = "Linlinecustom4", ;
		Top = 392, ;
		Width = 81
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="line" />

	ADD OBJECT 'Linlinecustom5' AS linlinecustom WITH ;
		Height = 0, ;
		Left = 20, ;
		Name = "Linlinecustom5", ;
		Top = 415, ;
		Width = 5
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="line" />

	ADD OBJECT 'Linlinecustom6' AS linlinecustom WITH ;
		Height = 0, ;
		Left = 20, ;
		Name = "Linlinecustom6", ;
		Top = 412, ;
		Width = 5
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="line" />

	ADD OBJECT 'Linlinecustom7' AS linlinecustom WITH ;
		Height = 0, ;
		Left = 261, ;
		Name = "Linlinecustom7", ;
		Top = 471, ;
		Width = 5
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="line" />

	ADD OBJECT 'Linlinecustom8' AS linlinecustom WITH ;
		Height = 0, ;
		Left = 261, ;
		Name = "Linlinecustom8", ;
		Top = 474, ;
		Width = 5
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="line" />

	ADD OBJECT 'txtCcharge' AS txttextboxcustom WITH ;
		ControlSource = "gasuse.ccharge", ;
		Height = 20, ;
		Left = 198, ;
		MaxLength = 30, ;
		Name = "txtCcharge", ;
		TabIndex = 33, ;
		Top = 364, ;
		Width = 209
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcCurrent' AS txttextboxcustom WITH ;
		Alignment = 1, ;
		ControlSource = "gasuse.ccurrent", ;
		Height = 20, ;
		InputMask = "9999999999", ;
		Left = 116, ;
		lrequired = .T., ;
		MaxLength = 10, ;
		Name = "txtcCurrent", ;
		ReadOnly = .F., ;
		TabIndex = 15, ;
		Top = 151, ;
		Width = 78
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcDescription' AS txttextboxcustom WITH ;
		ControlSource = "", ;
		Height = 20, ;
		lautoremember = .F., ;
		Left = 116, ;
		lrequired = .T., ;
		MaxLength = 25, ;
		Name = "txtcDescription", ;
		ReadOnly = .T., ;
		TabIndex = 13, ;
		Top = 118, ;
		Width = 274
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcLast' AS txttextboxcustom WITH ;
		Alignment = 1, ;
		ControlSource = "gasuse.clast", ;
		Height = 20, ;
		InputMask = "9999999999", ;
		Left = 116, ;
		lrequired = .T., ;
		MaxLength = 10, ;
		Name = "txtcLast", ;
		ReadOnly = .F., ;
		TabIndex = 18, ;
		Top = 182, ;
		Width = 78
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcMeterNo' AS txttextboxcustom WITH ;
		ControlSource = "gasuse.cmeterno", ;
		Height = 20, ;
		Left = 116, ;
		Name = "txtcMeterNo", ;
		ReadOnly = .T., ;
		TabIndex = 9, ;
		Top = 93, ;
		Width = 106
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcOwnerID' AS txtquickfill WITH ;
		clistexpression = gasown.cownerid, ;
		clistworkarea = gasown, ;
		ControlSource = "gasuse.cownerid", ;
		Height = 20, ;
		InputMask = "XXXXXXXXXX", ;
		lautoremember = .F., ;
		Left = 116, ;
		lrequired = .T., ;
		MaxLength = 10, ;
		Name = "txtcOwnerID", ;
		TabIndex = 3, ;
		Top = 14, ;
		Width = 79, ;
		ZOrderSet = 7
		*< END OBJECT: ClassLib="..\custom\cgadget.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcOwnerName' AS txttextboxcustom WITH ;
		BackColor = 212,208,200, ;
		Height = 20, ;
		lautoremember = .F., ;
		Left = 200, ;
		Name = "txtcOwnerName", ;
		TabIndex = 4, ;
		Top = 14, ;
		Width = 192, ;
		ZOrderSet = 89
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtdDate' AS dpk WITH ;
		ControlSource = "gasuse.ddate", ;
		Height = 20, ;
		Left = 116, ;
		lnocurrentdate = .F., ;
		lrequired = .T., ;
		Name = "txtdDate", ;
		TabIndex = 5, ;
		Top = 43, ;
		Visible = .T., ;
		Width = 67
		*< END OBJECT: ClassLib="..\custom\swdate.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtdInvDate' AS dpk WITH ;
		ControlSource = "gasuse.dinvdate", ;
		Height = 20, ;
		Left = 116, ;
		lnocurrentdate = .F., ;
		lrequired = .T., ;
		Name = "txtdInvDate", ;
		TabIndex = 7, ;
		Top = 67, ;
		Visible = .T., ;
		Width = 67
		*< END OBJECT: ClassLib="..\custom\swdate.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtNcharge' AS txttextboxcustom WITH ;
		ControlSource = "gasuse.ncharge", ;
		FontSize = 8, ;
		Height = 20, ;
		Left = 116, ;
		Name = "txtNcharge", ;
		TabIndex = 32, ;
		Top = 364, ;
		Width = 78
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtnDifference' AS txttextboxcustom WITH ;
		ControlSource = "gasuse.nbillable", ;
		FontBold = .T., ;
		ForeColor = 255,0,0, ;
		Height = 20, ;
		Left = 215, ;
		Name = "txtnDifference", ;
		ReadOnly = .T., ;
		TabIndex = 26, ;
		Top = 276, ;
		Visible = .F., ;
		Width = 80
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtnDue' AS txttextboxcustom WITH ;
		ControlSource = "gasuse.ndue", ;
		Height = 20, ;
		InputMask = "$$,$$$.99", ;
		Left = 116, ;
		Name = "txtnDue", ;
		ReadOnly = .T., ;
		TabIndex = 35, ;
		Top = 404, ;
		Width = 78
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtnMultiplier' AS txttextboxcustom WITH ;
		ControlSource = "gasuse.nmultiplier", ;
		Height = 20, ;
		Left = 116, ;
		Name = "txtnMultiplier", ;
		TabIndex = 22, ;
		Top = 240, ;
		Width = 78
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtNpressure' AS txttextboxcustom WITH ;
		ControlSource = "gasuse.npressure", ;
		FontSize = 8, ;
		Height = 20, ;
		InputMask = "99999.9999", ;
		Left = 116, ;
		Name = "txtNpressure", ;
		TabIndex = 20, ;
		Top = 211, ;
		Width = 76
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtnPrice' AS txttextboxcustom WITH ;
		ControlSource = "gasuse.nprice", ;
		Height = 20, ;
		Left = 116, ;
		Name = "txtnPrice", ;
		TabIndex = 28, ;
		Top = 305, ;
		Width = 78
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtnPriceAdj' AS txttextboxcustom WITH ;
		ControlSource = "gasuse.npriceadj", ;
		Height = 20, ;
		Left = 116, ;
		Name = "txtnPriceAdj", ;
		TabIndex = 30, ;
		Top = 334, ;
		Width = 78
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtnUsed' AS txttextboxcustom WITH ;
		ControlSource = "gasuse.nused", ;
		Height = 20, ;
		Left = 116, ;
		Name = "txtnUsed", ;
		ReadOnly = .T., ;
		TabIndex = 25, ;
		Top = 276, ;
		Width = 78
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtnUsedCurrent' AS txttextboxcustom WITH ;
		Alignment = 3, ;
		Left = 150, ;
		Name = "txtnUsedCurrent", ;
		ReadOnly = .T., ;
		TabIndex = 41, ;
		Top = 462, ;
		Value = 0
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtnUsedPrior' AS txttextboxcustom WITH ;
		Alignment = 3, ;
		Left = 37, ;
		Name = "txtnUsedPrior", ;
		ReadOnly = .T., ;
		TabIndex = 40, ;
		Top = 462, ;
		Value = 0
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtnUsedYTD' AS txttextboxcustom WITH ;
		Alignment = 3, ;
		Left = 276, ;
		Name = "txtnUsedYTD", ;
		ReadOnly = .T., ;
		TabIndex = 42, ;
		Top = 462, ;
		Value = 0
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtnYearlyAmt' AS txttextboxcustom WITH ;
		Height = 20, ;
		Left = 336, ;
		Name = "txtnYearlyAmt", ;
		ReadOnly = .T., ;
		TabIndex = 10, ;
		Top = 93, ;
		Width = 56
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />
	
	PROCEDURE calcmcf
		LOCAL lcCurrent, lcLast, lnMultiplier, lnUsed, lnPrice, lnPriceAdj, lnDue, lnMax, lcMonth, ldDate, lcYear, ldStartDate
		LOCAL loError, llReturn
		LOCAL lnExtra, lnMCFUsed
		
		llReturn = .T.
		
		TRY
		    lcCurrent    = THISFORM.txtccurrent.VALUE
		    lcLast       = THISFORM.txtclast.VALUE
		    lnMultiplier = THISFORM.txtnMultiplier.VALUE
		    lnPrice      = THISFORM.txtnPrice.VALUE
		    lnPriceAdj   = THISFORM.txtnPriceAdj.VALUE
		    lnExtra      = THISFORM.txtnCharge.VALUE
		    lnMax        = '1'
		    lcMonth      = gasopt.CMONTH  &&  First month of year, so we can calculate YTD usage
		    ldDate       = THISFORM.txtdDate.VALUE
		    lcYear       = ALLTRIM(STR(YEAR(ldDate)))
		
		
		    IF THISFORM.chklRollOver.VALUE
		        IF THISFORM.ncounterlen > 0 AND THISFORM.ncounterlen >= LEN(ALLT(lcCurrent))
		            lnMax = VAL(PADR(lnMax, THISFORM.ncounterlen + 1, '0'))
		        ELSE
		            lnMax = VAL(PADR(lnMax, LEN(ALLTRIM(lcLast)) + 1, '0'))
		        ENDIF
		        lnMCFUsed = ROUND(((lnMax - VAL(lcLast) + VAL(lcCurrent)) / 1000) * lnMultiplier, 2)
		    ELSE
		        lnMCFUsed = ROUND(((VAL(lcCurrent) - VAL(lcLast)) / 1000) * lnMultiplier, 2)
		    ENDIF
		
		    IF gasuse.nUsed <> lnMCFUsed
		        THISFORM.txtnUsed.SET('value', lnMCFUsed)
		    ENDIF
		
		    THISFORM.txtnUsedCurrent.SET('value', THISFORM.txtnUsed.VALUE)
		    THISFORM.txtnUsedYTD.SET('value', THISFORM.txtnUsedPrior.VALUE + THISFORM.txtnUsedCurrent.VALUE)
		
		    IF THISFORM.txtnUsedYTD.VALUE > THISFORM.txtnYearlyAmt.VALUE  &&  If they're over their limit
		        THISFORM.txtnDifference.VISIBLE = .T.
		        THISFORM.lblDifference.VISIBLE  = .T.
		        IF THISFORM.txtnUsedPrior.VALUE < THISFORM.txtnYearlyAmt.VALUE  &&  If this is the reading that puts them over the limit
		            IF (THISFORM.txtnUsedYTD.VALUE - THISFORM.txtnYearlyAmt.VALUE) <> THISFORM.txtnDifference.VALUE
		                THISFORM.txtnDifference.SET('value', THISFORM.txtnUsedYTD.VALUE - THISFORM.txtnYearlyAmt.VALUE)
		            ENDIF
		            lnDue = ROUND((THISFORM.txtnUsedYTD.VALUE - THISFORM.txtnYearlyAmt.VALUE) * (lnPrice), 2) + ROUND((THISFORM.txtnUsedYTD.VALUE - THISFORM.txtnYearlyAmt.VALUE) * (lnPriceAdj), 2)
		        ELSE  &&  They're already over the limit before this reading
		            IF THISFORM.txtnDifference.VALUE <> THISFORM.txtnUsed.VALUE
		                THISFORM.txtnDifference.SET('value', THISFORM.txtnUsed.VALUE)
		            ENDIF
		            lnDue = ROUND(THISFORM.txtnUsed.VALUE * (lnPrice), 2) + ROUND(THISFORM.txtnUsed.VALUE * (lnPriceAdj), 2)
		        ENDIF
		        lnDue = lnDue + lnExtra
		    ELSE
		        IF THISFORM.txtnDifference.VALUE <> 0
		            THISFORM.txtnDifference.SET('value', 0)
		        ENDIF
		        THISFORM.txtnDifference.VISIBLE = .F.
		        THISFORM.lblDifference.VISIBLE  = .F.
		        lnDue                           = lnExtra
		    ENDIF
		
		    IF gasuse.nDue <> lnDue AND THISFORM.txtndue.VALUE <> lnDue
		        THISFORM.txtndue.SET('value', lnDue)
		    ENDIF
		CATCH TO loError
		    llReturn = .F.
		    DO errorlog WITH 'CalcMCF', loError.LINENO, 'Gas Use', loError.ERRORNO, loError.MESSAGE, '', loError
		    MESSAGEBOX('Unable to process the house gas entry at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		          'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		RETURN llReturn
		
	ENDPROC

	PROCEDURE Init
		*  Get rid of invalid entries
		WAIT WINDOW NOWAIT 'Cleaning up house gas data. Please wait.'
		
		SELECT gasuse
		SCAN FOR EMPTY(dDate) OR EMPTY(cMeterNo)
		   SELECT gasinv
		   LOCATE FOR cidgasinv = gasuse.cInvToken
		   IF FOUND()
		      DELETE NEXT 1
		   ENDIF
		   SELECT gasuse
		   DELETE NEXT 1
		ENDSCAN
		
		SELECT cidgasinv FROM gasinv WHERE cidgasinv NOT IN(SELECT cInvToken FROM gasuse)  ;
		   AND UPPER(LEFT(cinvnum,2)) <> 'CR'  ;
		   INTO CURSOR gastemp
		
		IF _TALLY > 0
		   SELECT gastemp
		   SET DELETED OFF
		   SCAN
		      lcidgasinv = gastemp.cidgasinv
		      SELECT gasinv
		      LOCATE FOR cidgasinv = lcidgasinv
		      IF FOUND()
		         DELETE NEXT 1
		      ENDIF 
		   ENDSCAN
		   SET DELETED ON 
		ENDIF
		
		SELECT gasuse
		=TABLEUPDATE(.T.)
		SELECT gasinv
		=TABLEUPDATE(.T.)
		
		WAIT CLEAR 
		
		SET DELETED ON
		
		IF DODEFAULT()
		   * If we're in demo mode, tell the user that this is an optional module
		   IF m.goapp.ldemo
		      THISFORM.omessage.warning('The House Gas module is an optional module that can be purchased separately.' + ;
		         ' It is included in the demo for evaluation purposes.')
		   ENDIF
		ENDIF
		
		IF NOT gasopt.lShowPSI  &&  If the option to show PSI is not marked, make the PSI textbox and label invisible
		   THISFORM.txtnPressure.VISIBLE = .F.
		   THISFORM.lblnPressure.VISIBLE = .F.
		ENDIF
		
	ENDPROC

	PROCEDURE list
		LPARAMETERS cworkarea
		
		LOCAL lcList
		PRIV llOK
		
		llOK = .T.
		
		*  If the owner ID and meter are both blank, they haven't entered anything, so just revert
		*  the changes and then bring up the list without asking about saving.
		IF EMPTY(thisform.txtcownerID.Value) AND EMPTY(thisform.txtcmeterNo.Value)
		   thisform.cmdatamanager.revertall()
		   SELECT gasuse
		   GO BOTTOM 
		   thisform.Refresh()
		   thisform.cmdatamanager.revertall()
		ENDIF 
		
		IF THIS.flushcontrolbuffer() AND THIS.beforenav('gasuse')
		   SELECT gasuse.cownerid,  ;
		      ddate,  ;
		      cMeterNo,  ;
		      cSortField,  ;
		      cOwnName,  ;
		      cCurrent,  ;
		      nUsed  ;
		      FROM gasuse, investor  ;
		      WHERE gasuse.cownerid == investor.cownerid  ;
		      into cursor tempgas readwrite
		      
		   SELECT tempgas
		   INDEX on dDate tag dDate
		   INDEX on cOwnerID+STR(YEAR(dDate))+STR(MONTH(dDate))+STR(DAY(dDate)) TAG cOwnerID
		   INDEX on cSortfield+STR(YEAR(dDate))+STR(MONTH(dDate))+STR(DAY(dDate)) TAG cSortField
		   INDEX on cMeterNo+STR(YEAR(dDate))+STR(MONTH(dDate))+STR(DAY(dDate)) TAG cMeterNo
		   INDEX on cCurrent TAG cCurrent
		   INDEX on nUsed TAG nUsed
		
		   lcList = 'dDate\Reading Date,cOwnerID\Owner ID,cSortfield\Owner Name,cMeterNo\Meter No,cCurrent\Reading,nUsed\MCF Used'
		
		   DO FORM ..\CUSTOM\picklist WITH 'tempgas', lcList, gasuse.dDate, 6, .T.,.T.
		
		   IF llOK
		         SELECT gasuse
		         LOCATE FOR cMeterNo = tempgas.cMeterNo AND dDate = tempgas.dDate
		         IF FOUND()
		            THISFORM.cmdatamanager.setrecordposition('gasuse')
		            thisform.txtcOwnerName.Value = tempgas.cOwnName
		            thisform.txtddate.Valid(.T.)
		         endif
		         THISFORM.REFRESH()
		   ENDIF 
		ELSE
		   RETURN
		ENDIF
		
	ENDPROC

	PROCEDURE qbdelinv
		LPARA tctxnid
		
		IF m.goapp.lqbactive
		   WAIT WIND NOWAIT 'Deleting QuickBooks Invoices...'
		   llReturn = m.goApp.oQB.DeleteTxnID(tcTxnID, 13)
		ENDIF
	ENDPROC

	PROCEDURE qbpost		&& Post Invoice to QuickBooks
		LPARA tcidgasinv
		LOCAL lnJournal, llReturn, lcARAcct, lcItemList, lcBatch
		LOCAL lcOwnName, lcOwnListID, lcIDTerms, lnAmount, lcXML
		LOCAL loError, llReturn
		LOCAL lcListID, lcMessage, llResult, loaddresp, loinvoiceadd, loinvoiceline, loinvoicelist, lonewinv
		LOCAL loresponse
		LOCAL caddress1, caddress2, ccity, cidsysctl, ctxnid, czip, mtxnids, nUsed, ntype
		
		llReturn = .T.
		
		TRY
		
		    SELECT gasinv
		    LOCATE FOR cidgasinv = tcidgasinv
		    IF FOUND() AND nTotal = 0  &&  Only try and post something if there's an amount due
		        llReturn = .T.
		        EXIT
		    ENDIF
		
		    SELE gasopt
		    GO TOP
		    lcARAcct   = cQBaracct
		    lcItemList = citemlist
		    lcIDTerms  = cqbterms
		
		    IF EMPTY(lcARAcct)
		        THISFORM.omessage.warning('The House Gas Receivables account is not specified or invalid. Please go to House Gas Preferences to correct this.')
		        llReturn = .F.
		        EXIT
		    ENDIF
		
		    IF EMPTY(lcItemList)
		        THISFORM.omessage.warning('The House Gas QuickBooks Item is not specified or invalid. Please go to House Gas Preferences to correct this.')
		        llReturn = .F.
		        EXIT
		    ENDIF
		
		* Setup the fields for qbpost so we can unpost this allocation if part fails
		    m.cidsysctl = THISFORM.oregistry.incrementcounter('%Shared.Counters.Batch')
		
		    llReturn = .T.
		
		    IF m.goApp.oQB.QBFCVersion > ' 4.0'
		        lnJournal = 15
		    ELSE
		        lnJournal = 14
		    ENDIF
		
		    SELECT gasinv
		    SCAN FOR cidgasinv = tcidgasinv AND nTotal > 0
		        SCATTER MEMVAR
		
		        lnAmount = m.nTotal
		        lcBatch  = m.cidgasinv
		
		        SELECT investor
		        SET ORDER TO cownerid
		        IF SEEK(m.cownerid)
		*  Setup the invoice add request
		            m.goApp.oQB.oqbrequest.clearrequests()
		            loinvoiceadd = m.goApp.oQB.oqbrequest.appendinvoiceaddrq()
		
		            lcOwnName   = cownname
		            lcOwnListID = clistid
		            IF NOT EMPTY(cidterm)  &&  Only use this if the owner has it specified; otherwise, use default from gasopt
		                lcIDTerms   = m.cidterm
		            ENDIF
		
		            IF lchktosec
		                IF lcheckonly
		                    m.caddress1 = caddress1a
		                    m.caddress2 = caddress1b
		                    m.ccity     = ccity1
		                    m.czip      = czip1
		                ELSE
		                    m.caddress1 = caddress2a
		                    m.caddress2 = caddress2b
		                    m.ccity     = ccity2
		                    m.czip      = czip2
		                ENDIF
		            ELSE
		                m.caddress1 = caddress1a
		                m.caddress2 = caddress1b
		                m.ccity     = ccity1
		                m.czip      = czip1
		            ENDIF
		
		            loinvoiceadd.customerref.listid.setvalue(lcOwnListID)
		            loinvoiceadd.araccountref.listid.setvalue(lcARAcct)
		            loinvoiceadd.istobeprinted.setvalue('False')
		
		*  Get the terms listid
		            SELE terms
		            LOCATE FOR ALLTRIM(cidterm) == ALLTRIM(lcIDTerms)
		            IF FOUND()
		                loinvoiceadd.termsref.listid.setvalue(terms.clistid)
		            ENDIF
		
		            loinvoiceadd.txndate.setvalue(m.dinvdate)
		            loinvoiceadd.duedate.setvalue(m.dduedate)
		            loinvoiceadd.refnumber.setvalue(SUBSTR(m.cinvnum, 1, 11))
		            loinvoicelist = loinvoiceadd.orinvoicelineaddlist
		
		            loinvoiceline = loinvoicelist.APPEND
		
		            loinvoiceline.invoicelineadd.itemref.listid.setvalue(lcItemList)
		            loinvoiceline.invoicelineadd.DESC.setvalue('House Gas Usage')
		            IF m.nUsed = 0 AND m.nTotal <> 0
		                m.nUsed = 1
		            ENDIF
		            loinvoiceline.invoicelineadd.quantity.setvalue(m.nUsed)
		*!*	      loinvoiceline.invoicelineadd.orrate.rate.setvalue(m.nprice)  &&  Commented out b/c it errored out, even though this seems to be a valid structure - BH 09/18/07
		            loinvoiceline.invoicelineadd.amount.setvalue(m.nTotal)
		
		            lcXML      = m.goApp.oQB.oqbrequest.toxmlstring()
		            loresponse = m.goApp.oQB.oqbsm.dorequests(m.goApp.oQB.oqbrequest)
		            loaddresp  = loresponse.responselist.getat(0)
		
		            IF loaddresp.statuscode <> 0
		                IF NOT USED('qbxml')
		                    USE (m.goApp.cCommonFolder + 'qbxml') IN 0
		                ENDIF
		                INSERT INTO qbxml VALUES(m.cownerid, DATETIME(), lcXML)
		                IF 'object' $ LOWER(loaddresp.statusmessage)
		                    lcListID = SUBSTR(loaddresp.statusmessage, AT('"', loaddresp.statusmessage) + 1, AT('"', loaddresp.statusmessage, 2) - (AT('"', loaddresp.statusmessage) + 1))
		                    llResult = m.goApp.oQB.QBListID(lcListID, THISFORM.DATASESSIONID)
		                    IF llResult
		                        SELECT QBListID
		                        IF QBListID.ctype = 'Account'
		                            lcMessage = 'The ' + ALLTRIM(QBListID.cdescription) + ' specified in the ' + ;
		                                'QB Posting Preferences was not found in QuickBooks. Please select a new account ' + ;
		                                'and try to allocate the expenses again.'
		                        ELSE
		                            lcMessage = 'The ' + ALLTRIM(QBListID.cdescription) + ' was not found in QuickBooks. ' + ;
		                                'Please synchronize the ' + ALLTRIM(QBListID.ctype) + ' file and try to allocate the expenses again.'
		                        ENDIF
		                        THISFORM.omessage.severe(lcMessage)
		                    ELSE
		                        THISFORM.omessage.severe(loaddresp.statusmessage)
		                    ENDIF
		                ELSE
		                    THISFORM.omessage.severe(loaddresp.statusmessage)
		                ENDIF
		* Unpost what got posted so far
		                m.goApp.oQB.csysctlkey = m.cidsysctl
		                m.goApp.oQB.QBUnpostRev()
		                m.goApp.oQB.oqbsm.ClearErrorRecovery()
		                llReturn = .F.
		            ELSE
		                WAIT WIND NOWAIT 'House Gas Credit Sucessfully Posted To QuickBooks'
		                lonewinv = loaddresp.DETAIL
		                m.ctxnid = lonewinv.txnid.getvalue()
		                SELE gasinv
		                REPL ctxnid WITH m.ctxnid
		* Save the transaction in qbpost so it can be unposted
		* from quickbooks if any of the other invoices fail
		* to post.
		                SWSELECT('qbpost')
		                LOCATE FOR cidsysctl = m.cidsysctl AND ntype = 13
		                IF NOT FOUND()
		                    m.ntype   = lnJournal
		                    m.mtxnids = m.ctxnid
		                    INSERT INTO qbpost FROM MEMVAR
		                ELSE
		                    IF NOT EMPTY(ALLT(mtxnids))
		                        REPL mtxnids WITH ALLT(mtxnids) + CHR(13) + m.ctxnid
		                    ELSE
		                        REPL mtxnids WITH m.ctxnid
		                    ENDIF
		                ENDIF
		                m.goApp.oQB.oqbsm.ClearErrorRecovery()
		            ENDIF
		            m.goApp.oQB.oqbrequest.clearrequests()
		        ENDIF
		    ENDSCAN
		
		    SELECT gasinv
		    SCAN FOR cidgasinv = tcidgasinv AND nTotal < 0
		        SCATTER MEMVAR
		
		        lnAmount = m.nTotal
		        lcBatch  = m.cidgasinv
		
		        SELECT investor
		        SET ORDER TO cownerid
		        IF SEEK(m.cownerid)
		*  Setup the invoice add request
		            THIS.orequest.clearrequests()
		            loinvoiceadd = THIS.orequest.appendcreditmemoaddrq()
		
		            lcOwnName   = cownname
		            lcOwnListID = clistid
		            lcIDTerms   = m.cidterm
		            IF lchktosec
		                IF lcheckonly
		                    m.caddress1 = caddress1a
		                    m.caddress2 = caddress1b
		                    m.ccity     = ccity1
		                    m.czip      = czip1
		                ELSE
		                    m.caddress1 = caddress2a
		                    m.caddress2 = caddress2b
		                    m.ccity     = ccity2
		                    m.czip      = czip2
		                ENDIF
		            ELSE
		                m.caddress1 = caddress1a
		                m.caddress2 = caddress1b
		                m.ccity     = ccity1
		                m.czip      = czip1
		            ENDIF
		
		            loinvoiceadd.customerref.listid.setvalue(lcOwnListID)
		            loinvoiceadd.araccountref.listid.setvalue(lcARAcct)
		            loinvoiceadd.istobeprinted.setvalue('False')
		
		*  Get the terms listid
		            SELE terms
		            LOCATE FOR ALLTRIM(clistid) == ALLTRIM(lcIDTerms)
		            IF FOUND()
		                loinvoiceadd.termsref.listid.setvalue(terms.clistid)
		            ENDIF
		
		            loinvoiceadd.txndate.setvalue(m.dinvdate)
		            loinvoiceadd.duedate.setvalue(m.dduedate)
		            loinvoiceadd.refnumber.setvalue(m.cinvnum)
		            loinvoicelist = loinvoiceadd.orcreditmemolineaddlist
		
		            loinvoiceline = loinvoicelist.APPEND
		
		            loinvoiceline.invoicelineadd.itemref.listid.setvalue(lcItemList)
		            loinvoiceline.invoicelineadd.DESC.setvalue('House Gas Usage')
		            loinvoiceline.invoicelineadd.quantity.setvalue(ABS(m.ccurrent))
		*!*	      loinvoiceline.invoicelineadd.orrate.rate.setvalue(abs(m.nprice))  &&  Commented out b/c it errored out, even though this seems to be a valid structure - BH 09/18/07
		            loinvoiceline.invoicelineadd.amount.setvalue(ABS(m.nTotal))
		
		            lcXML      = THIS.orequest.toxmlstring()
		            loresponse = m.goApp.oQB.oqbsm.dorequests(THIS.orequest)
		            loaddresp  = loresponse.responselist.getat(0)
		
		            IF loaddresp.statuscode <> 0
		                IF NOT USED('qbxml')
		                    USE (m.goApp.cCommonFolder + 'qbxml') IN 0
		                ENDIF
		                INSERT INTO qbxml VALUES(m.ccustid, DATETIME(), lcXML)
		                IF 'object' $ LOWER(loaddresp.statusmessage)
		                    lcListID = SUBSTR(loaddresp.statusmessage, AT('"', loaddresp.statusmessage) + 1, AT('"', loaddresp.statusmessage, 2) - (AT('"', loaddresp.statusmessage) + 1))
		                    llResult = m.goApp.oQB.QBListID(lcListID, THISFORM.DATASESSIONID)
		                    IF llResult
		                        SELECT QBListID
		                        IF QBListID.ctype = 'Account'
		                            lcMessage = 'The ' + ALLTRIM(QBListID.cdescription) + ' specified in the ' + ;
		                                'QB Posting Preferences was not found in QuickBooks. Please select a new account ' + ;
		                                'and try to allocate the expenses again.'
		                        ELSE
		                            lcMessage = 'The ' + ALLTRIM(QBListID.cdescription) + ' was not found in QuickBooks. ' + ;
		                                'Please synchronize the ' + ALLTRIM(QBListID.ctype) + ' file and try to allocate the expenses again.'
		                        ENDIF
		                        THISFORM.omessage.severe(lcMessage)
		                    ELSE
		                        THISFORM.omessage.severe(loaddresp.statusmessage)
		                    ENDIF
		                ELSE
		                    THISFORM.omessage.severe(loaddresp.statusmessage)
		                ENDIF
		* Unpost what got posted so far
		                m.goApp.oQB.csysctlkey = m.cidsysctl
		                m.goApp.oQB.QBUnpostRev()
		                m.goApp.oQB.oqbsm.ClearErrorRecovery()
		                llReturn = .F.
		            ELSE
		                WAIT WIND NOWAIT 'House Gas Credit Sucessfully Posted To QuickBooks'
		                lonewinv = loaddresp.DETAIL
		                m.ctxnid = lonewinv.txnid.getvalue()
		                SELE gasinv
		                REPL ctxnid WITH m.ctxnid
		* Save the transaction in qbpost so it can be unposted
		* from quickbooks if any of the other invoices fail
		* to post.
		                SWSELECT('qbpost')
		                LOCATE FOR cidsysctl = m.cidsysctl AND ntype = 13
		                IF NOT FOUND()
		                    m.ntype   = lnJournal
		                    m.mtxnids = m.ctxnid
		                    INSERT INTO qbpost FROM MEMVAR
		                ELSE
		                    IF NOT EMPTY(ALLT(mtxnids))
		                        REPL mtxnids WITH ALLT(mtxnids) + CHR(13) + m.ctxnid
		                    ELSE
		                        REPL mtxnids WITH m.ctxnid
		                    ENDIF
		                ENDIF
		                m.goApp.oQB.oqbsm.ClearErrorRecovery()
		            ENDIF
		
		            THIS.orequest.clearrequests()
		        ENDIF
		    ENDSCAN
		
		    IF llReturn
		        SWSELECT('qbpost')
		        REPLACE lPosted WITH .T. FOR cidsysctl = m.cidsysctl
		    ENDIF
		CATCH TO loError
		    llReturn = .F.
		    DO errorlog WITH 'QBPost', loError.LINENO, 'Gas Use', loError.ERRORNO, loError.MESSAGE, '', loError
		    MESSAGEBOX('Unable to process the house gas entry at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		          'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		RETURN llReturn
	ENDPROC

	PROCEDURE chklRollOver.Click
		THISFORM.calcMCF()
		
	ENDPROC

	PROCEDURE cmdatamanager.afternav
		LPARAMETERS cworkarea
		
		DODEFAULT(cworkarea)
		
		SELECT investor
		SET ORDER TO cOwnerID
		IF SEEK(gasuse.cOwnerID)
		   THISFORM.txtcOwnerName.value = investor.cOwnName
		ELSE
		   THISFORM.txtcOwnerName.value = investor.cOwnName
		ENDIF
		
		SELECT gasown
		SET ORDER TO cOwnerID
		IF SEEK(gasuse.cOwnerID)
		   THISFORM.txtcDescription.value = gasown.cDescription
		ENDIF
		
		IF gasuse.nBillable <> 0
		   thisform.txtndifference.Visible = .t.
		   thisform.lblDifference.Visible = .t.
		ENDIF 
	ENDPROC

	PROCEDURE cmdatamanager.afternew
		LPARAMETERS cworkarea
		
		IF EMPTY(THISFORM.txtdDate.VALUE)  &&  Only reset the dates if it's the first time into the screen, otherwise, leave it how they had it
		   THISFORM.txtdDate.SET('value',DATE())
		   THISFORM.txtdInvDate.SET('value',DATE())
		ELSE
		   THISFORM.txtdDate.SET('value',THISFORM.dDate)
		   THISFORM.txtdInvDate.SET('value',THISFORM.dInvDate)
		ENDIF
		
		THISFORM.txtcDescription.SET('value','')
		THISFORM.txtnPrice.SET('value',gasopt.nPrice)
		THISFORM.txtnCharge.SET('value',gasopt.nCharge)
		THISFORM.txtcCharge.SET('value',gasopt.cCharge)
		THISFORM.txtnDifference.VISIBLE = .F.
		THISFORM.lblDifference.VISIBLE = .F.
		THISFORM.txtnYearlyAmt.SET('value',0)
		THISFORM.txtnUsedPrior.SET('value',0)
		THISFORM.txtnUsedCurrent.SET('value',0)
		THISFORM.txtnUsedYTD.SET('value',0)
		THISFORM.setnextcontrol(THISFORM.txtcOwnerID)
		STORE 0 TO THISFORM.txtccurrent.VALUE,THISFORM.txtclast.VALUE,THISFORM.txtnMultiplier.VALUE,  ;
		   THISFORM.txtnUsed.VALUE,THISFORM.txtnPrice.VALUE,THISFORM.txtnPriceAdj.VALUE
		THISFORM.nCounterLen = 0
		
		*  Set the flag that tells us that it's a new record or is being edited
		thisform.ledit = .t.
		thisform.lNewrecord = .t.
		
		
		DODEFAULT()
		
	ENDPROC

	PROCEDURE cmdatamanager.afterupdate
		LPARAMETERS cWorkareaList, lCurrentRecordOnly
		
		thisform.ledit = .f.
		thisform.lnewrecord = .f.
		
		DODEFAULT(cWorkareaList,lCurrentRecordOnly)
	ENDPROC

	PROCEDURE cmdatamanager.beforedelete
		LPARAMETERS cWorkarea
		
		*  Check to see if there were any readings entered after this
		SELECT gasuse1
		LOCATE FOR cMeterNo == gasuse.cMeterNo AND dDate > gasuse.dDate
		IF FOUND()
		   THISFORM.omessage.warning('A reading has been entered for this meter with a reading date later than the date on this reading, so this one cannot be deleted.')
		   RETURN .F.
		ENDIF
		
		*  Delete the gasinv record that goes along with it, if necessary
		SELECT gasinv
		LOCATE FOR cidgasinv = gasuse.cinvtoken
		IF FOUND()
		   SELECT gasown
		   LOCATE FOR cMeterNo = gasuse.cMeterNo
		   IF FOUND()
		      REPLACE gasown.cLast WITH gasuse.cLast
		      REPLACE gasown.nUsed WITH gasown.nUsed - gasuse.nUsed
		      =TABLEUPDATE()
		   ENDIF
		   SELECT gasinv
		   THISFORM.qbdelinv(gasinv.ctxnid)
		   SELECT gasinv
		   DELETE NEXT 1
		   =TABLEUPDATE()
		ENDIF
		SELECT gasuse
		DELETE NEXT 1
		=TABLEUPDATE()
		=TABLEUPDATE(.T.)
		
		DODEFAULT(cWorkarea)
		
	ENDPROC

	PROCEDURE cmdatamanager.beforeupdate
		LPARAMETERS cworkarealist
		LOCAL loError, llReturn
		LOCAL lPrinted, lnDiscIn, lnDiscPct, lnNetDueIn
		LOCAL cInvNum, cidgasinv, cidterm, dDiscDate, dDueDate, dInvDate, nBalance, nDiscTot, nPmts
		LOCAL nPrice, nTotal
		
		llReturn = .T.
		
		TRY
		**  Only care about the QB connection if we will be creating an invoice.  Otherwise, have at it.
		    IF NOT m.goapp.lQBActive AND gasuse.nDue > 0
		        THISFORM.omessage.warning('This house gas meter entry cannot be saved. The link to QuickBooks is not active.')
		        llReturn = .F.
		        EXIT
		    ENDIF
		
		    IF EMPTY(THISFORM.txtdDate.VALUE)
		        THISFORM.omessage.warning('You cannot save a reading with a blank date on it.')
		        THISFORM.setnextcontrol(THISFORM.txtdDate)
		        llReturn = .F.
		        EXIT
		    ENDIF
		    IF EMPTY(THISFORM.txtdInvDate.VALUE)
		        THISFORM.omessage.warning('You cannot save a reading with a blank invoice date on it.')
		        THISFORM.setnextcontrol(THISFORM.txtdInvDate)
		        llReturn = .F.
		        EXIT
		    ENDIF
		
		    THISFORM.dDate    = THISFORM.txtdDate.VALUE  &&  Store for later use
		    THISFORM.dInvdate = THISFORM.txtdInvDate.VALUE
		
		    IF gasuse.nDue > 0  &&  If they need to be invoiced for the overage
		        IF NOT THISFORM.omessage.CONFIRM('This will create an invoice for $' + ALLTRIM(STR(THISFORM.txtnDue.VALUE, 10, 2)) + ' for ' + ALLTRIM(THISFORM.txtcOwnerName.VALUE) +  ;
		                  '.  Would you like to continue?')
		            llReturn = .F.
		            EXIT
		        ENDIF
		        SELECT gasopt
		        IF EMPTY(cQBArAcct)  &&  If either required acct hasn't been defined, bail out
		            THISFORM.omessage.warning('The receivable account has not been defined on the house gas options screen.  Please correct before proceeding.')
		            llReturn = .F.
		            EXIT
		        ENDIF
		    ENDIF
		
		*  Delete any existing gasinv record and QB invoice first before re-saving to avoid duplication
		    SELECT gasinv
		    LOCATE FOR cidgasinv = gasuse.cinvtoken
		    IF FOUND()
		        SELECT gasown
		        LOCATE FOR cMeterNo = gasuse.cMeterNo
		        IF FOUND()
		            REPLACE gasown.cLast WITH gasuse.cLast
		            REPLACE gasown.nUsed WITH gasown.nUsed - gasuse.nUsed
		            = TABLEUPDATE()
		        ENDIF
		        SELECT gasinv
		        THISFORM.qbdelinv(gasinv.ctxnid)
		        SELECT gasinv
		        DELETE NEXT 1
		        = TABLEUPDATE()
		    ENDIF
		
		**  Create the invoice for the amount due
		    SELECT gasuse
		    SCATTER MEMVAR
		    m.cidgasinv = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Batch')
		    SELECT gasinv
		    SET ORDER TO cidgasinv
		    SET DELETED OFF
		    DO WHILE INDEXSEEK(m.cidgasinv)
		        m.cidgasinv = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Batch')
		    ENDDO
		    SET DELETED ON
		    SELECT gasuse
		    REPLACE gasuse.cinvtoken WITH m.cidgasinv
		    m.dInvdate = THISFORM.dInvdate
		    m.nBalance = m.nDue
		    m.nTotal   = m.nDue
		    m.lPrinted = .F.
		    m.nPrice   = gasopt.nPrice
		    m.nPmts    = 0
		    SELECT investor  &&  Check for any terms for this owner.  If none, use the default from gasopt, if specified.
		    LOCATE FOR cownerid == m.cownerid
		    IF FOUND()
		        IF NOT EMPTY(investor.cidterm)
		            m.cidterm = investor.cidterm
		        ELSE
		            m.cidterm = gasopt.cqbterms
		        ENDIF
		    ENDIF
		
		    IF NOT EMPTY(m.cidterm)  &&  If terms are specified, calculate the due and discount dates
		        SELECT terms
		        LOCATE FOR ALLTRIM(cidterm) == ALLTRIM(m.cidterm)
		        IF FOUND()
		            lnNetDueIn = nNetDueIn
		            lnDiscIn   = nDiscIn
		            lnDiscPct  = nDiscPct
		        ELSE
		*  Terms have not been selected for this invoice so assume
		*  COD.
		            STORE 0 TO lnNetDueIn, lnDiscIn, lnDiscPct
		        ENDIF
		*
		*  Calculate and set the values of the due date and
		*  discount date fields
		*
		        m.dDueDate  = m.dInvdate + lnNetDueIn
		        m.dDiscDate = m.dInvdate + lnDiscIn
		        m.nDiscTot  = m.nTotal * (lnDiscPct / 100)
		    ELSE
		        m.dDiscDate = m.dInvdate
		        m.dDueDate  = m.dInvdate
		        m.nDiscTot  = 0
		    ENDIF
		
		    IF m.nDue > 0  &&  Only generate invoice numbers if they owe money
		        m.cInvNum = ALLTRIM(STR(VAL(THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Invoice Number'))))
		        SELECT aropt
		        REPLACE aropt.cInvNum WITH STR(VAL(m.cInvNum) + 1)
		    ELSE
		        m.cInvNum = ''
		    ENDIF
		
		    INSERT INTO gasinv FROM MEMVAR
		
		*  Post the invoice to QuickBooks
		    IF THISFORM.qbpost(m.cidgasinv)  &&  Only post if the amount due is positive
		
		        SELECT gasown
		        LOCATE FOR cMeterNo = gasuse.cMeterNo
		        IF FOUND()
		            REPLACE cLast WITH gasuse.ccurrent, nUsed WITH THISFORM.txtnUsedYTD.VALUE
		        ENDIF
		
		        SELECT gasuse
		        = TABLEUPDATE(.T.)
		        SELECT gasinv
		        = TABLEUPDATE(.T.)
		        SELECT gasown
		        = TABLEUPDATE(.T.)
		    ELSE
		        llReturn = .F.
		        EXIT
		    ENDIF
		CATCH TO loError
		    llReturn = .F.
		    DO errorlog WITH 'BeforeUpdate', loError.LINENO, 'Gas Use', loError.ERRORNO, loError.MESSAGE, '', loError
		    MESSAGEBOX('Unable to process the house gas entry at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		          'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		RETURN llReturn
		
		DODEFAULT(cworkarealist)
		
	ENDPROC

	PROCEDURE cmdLookOwner.Click
		LOCAL lcList
		PRIV llOK
		
		IF USED('temp')
		   USE IN temp
		ENDIF
		
		SELECT gasown.cOwnerID,investor.cSortField,investor.cOwnName,gasown.cmeterno,gasown.cDescription,gasown.cGroup FROM gasown,investor  ;
		   WHERE gasown.cOwnerID = investor.cOwnerID INTO CURSOR temp1
		
		USE DBF('temp1') AGAIN IN 0 ALIAS temp
		SELECT temp
		INDEX ON cOwnerID+cMeterNo TAG cOwnerID
		INDEX ON cSortField+cMeterNo TAG cSortField
		INDEX ON cDescription+cOwnerID TAG cDescrip
		INDEX ON cmeterno TAG cmeterno
		
		llOK = .F.
		lcList = 'cownerid\Owner ID,csortfield\Owner Name,cmeterno\Meter ID,cdescription/cdescrip\Meter Description,cgroup\Group'
		
		DO FORM ..\CUSTOM\picklist WITH 'temp', lcList, THISFORM.txtcownerid.VALUE, 5, .T.,.t.
		
		IF llOK
		   thisform.txtcMeterNo.set('value',temp.cMeterNo)
		   thisform.txtcOwnerID.set('value',temp.cOwnerID)
		   THISFORM.txtcOwnerName.set('VALUE',temp.cOwnName)
		   THISFORM.lchanged = .T.
		   THISFORM.setnextcontrol(THISFORM.txtcownerid)
		   THISFORM.txtcownerid.VALID()
		ENDIF
		
	ENDPROC

	PROCEDURE cmdSave.Click
		thisform.save()
	ENDPROC

	PROCEDURE txtcCurrent.Valid
		IF THISFORM.nCounterLen > LEN(ALLTRIM(THIS.VALUE))  &&  If the user has specified a valid counter length, pad to that length
		   THIS.SET('value',PADR(ALLTRIM(THIS.VALUE),THISFORM.nCounterLen,'0'))
		ENDIF
		
		IF VAL(THIS.VALUE) < VAL(THISFORM.txtclast.VALUE)  &&  Possible rollover
		   THISFORM.chklRollover.VISIBLE = .T.
		ELSE
		   THISFORM.chklRollover.VISIBLE = .F.
		   THISFORM.chklRollover.value = .F.  &&  If the option disappears, the value should be set to .f., too
		ENDIF
		
		IF thisform.cmdatamanager.ischanged('gasuse')
		   thisform.lEdit = .t.
		ENDIF 
		
		DODEFAULT()
		
	ENDPROC

	PROCEDURE txtcDescription.When
		return .f.
	ENDPROC

	PROCEDURE txtcLast.Valid
		IF THISFORM.nCounterLen > LEN(ALLTRIM(THIS.VALUE))  &&  If the user has specified a valid counter length, pad to that length
		   IF this.value <> PADR(ALLTRIM(THIS.VALUE),THISFORM.nCounterLen,'0')
		      THIS.SET('value',PADR(ALLTRIM(THIS.VALUE),THISFORM.nCounterLen,'0'))
		   ENDIF 
		ENDIF
		
		IF VAL(THISFORM.txtcCurrent.VALUE) < VAL(THIS.VALUE)  &&  Possible rollover
		   THISFORM.chklRollover.VISIBLE = .T.
		ELSE
		   THISFORM.chklRollover.VISIBLE = .F.
		   THISFORM.chklRollover.value = .F.  &&  If the option disappears, the value should be set to .f., too
		ENDIF
		
		IF thisform.cmdatamanager.ischanged('gasuse')
		   thisform.lEdit = .t.
		ENDIF 
		
		DODEFAULT()
		
	ENDPROC

	PROCEDURE txtcMeterNo.When
		return .f.
	ENDPROC

	PROCEDURE txtcOwnerID.GotFocus
		ON KEY LABEL F2 _screen.activeform.cmdLookOwner.Click()
	ENDPROC

	PROCEDURE txtcOwnerID.InteractiveChange
		IF DODEFAULT()
		   SELECT investor
		   LOCATE FOR cownerid == this.Value
		   IF FOUND()
		      thisform.txtcownerName.Value = investor.cownname
		   ELSE
		      thisform.txtcownerName.Value = ''
		   ENDIF
		ENDIF          
	ENDPROC

	PROCEDURE txtcOwnerID.LostFocus
		ON KEY LABEL f2
		
	ENDPROC

	PROCEDURE txtcOwnerID.Valid
		LOCAL llFound, lcMonth, lcYear
		
		lcYear = ALLTRIM(STR(YEAR(DATE())))
		
		IF NOT EMPTY(gasopt.CMONTH)  &&  Determine what the first month to report on should be, based on the statement start month in gas options
		   IF gasopt.CMONTH <> '01'
		      lcMonth = PADL(ALLT(STR((VAL(gasopt.CMONTH)-1) + MONTH(DATE()))),2,'0')
		      IF lcMonth > '12'
		         lcMonth = PADL(ALLT(STR(VAL(lcMonth) - 12)),2,'0')
		         IF lcMonth < gasopt.CMONTH
		            lcYear = ALLTRIM(STR(VAL(lcYear)-1))
		         ENDIF
		      ENDIF
		   ELSE
		      lcMonth = '01'
		   ENDIF
		ELSE
		   lcMonth = '01'
		   SELECT gasopt
		   REPLACE gasopt.CMONTH WITH '01'  &&  If blank, fill it in with the default
		   =TABLEUPDATE()
		ENDIF
		
		
		SELECT investor
		SET ORDER TO cOwnerID
		IF SEEK(THISFORM.txtcOwnerID.VALUE)
		   THISFORM.txtcOwnerName.SET('value',investor.cOwnName)
		ELSE
		   THISFORM.txtcOwnerName.SET('value',investor.cOwnName)
		ENDIF
		
		IF THISFORM.cmdatamanager.ischanged('gasuse')
		   THISFORM.LEDIT = .T.
		ENDIF
		
		SELECT gasown
		SET ORDER TO cOwnerID
		IF SEEK(THIS.VALUE)
		   IF NOT EMPTY(THISFORM.txtcMeterNo.VALUE)  &&  Check for an existing meter number, so they can enter multiple meters for an owner
		      SELECT gasown
		      lnRecno = RECNO()
		      LOCATE FOR cOwnerID = THIS.VALUE AND cMeterNo = THISFORM.txtcMeterNo.VALUE
		      IF NOT FOUND()
		         GOTO lnRecno
		      ENDIF
		   ENDIF
		   THISFORM.txtcDescription.SET('value',gasown.cDescription)
		   THISFORM.nCounterLen = gasown.nCounterLen
		   THISFORM.txtnUsedCurrent.SET('value',THISFORM.txtnUsed.VALUE)
		   THISFORM.txtnYearlyAmt.SET('value',gasown.nYearlyAmt)
		   THISFORM.txtnUsedYTD.SET('value',THISFORM.txtnUsedPrior.VALUE+THISFORM.txtnUsedCurrent.VALUE)
		   IF gasuse.cMeterNo <> gasown.cMeterNo
		      THISFORM.txtcMeterNo.SET('value',gasown.cMeterNo)
		   ENDIF
		   IF gasuse.nMultiplier <> gasown.nMultiplier
		      THISFORM.txtnMultiplier.SET('value',gasown.nMultiplier)
		   ENDIF
		   IF gasuse.nPriceAdj <> gasown.nPriceAdj
		      THISFORM.txtnPriceAdj.SET('value',gasown.nPriceAdj)
		   ENDIF
		   IF gasuse.nPressure <> gasown.nPressure
		      THISFORM.txtnPressure.SET('value',gasown.nPressure)
		   ENDIF
		ELSE
		   IF NOT EMPTY(THIS.VALUE)
		      THISFORM.oMessage.Warning('This is not a valid house gas owner.  Please select an owner with house gas meter information defined.')
		      RETURN 0
		   ENDIF
		ENDIF
		
		IF thisform.lNewRecord
		   IF THISFORM.txtclast.VALUE <> gasown.clast
		      THISFORM.txtclast.SET('value',gasown.clast)
		   ENDIF
		ENDIF 
		
		IF THISFORM.LEDIT
		   IF NOT EMPTY(THISFORM.txtccurrent.VALUE)  &&  Only do the calcs if they have already filled in the current reading
		      THISFORM.calcmcf()
		   ENDIF
		ENDIF
		
		DODEFAULT()
		
	ENDPROC

	PROCEDURE txtcOwnerName.When
		RETURN .F.
	ENDPROC

	PROCEDURE txtdDate.Valid
		LPARAMETERS tlList
		LOCAL lcMonth, lcYear, ldDate, ldStartDate
		
		SELECT gasuse1  &&  Check to make sure there isn't already a reading for this month and year out there for this meter
		LOCATE FOR cMeterNo == gasuse.cMeterNo AND MONTH(gasuse1.dDate) = MONTH(THIS.VALUE) AND YEAR(gasuse1.dDate) = YEAR(THIS.VALUE)  ;
		   AND NOT DELETED() AND RECNO('gasuse1') <> RECNO('gasuse')
		IF FOUND() AND NOT tlList
		   THISFORM.oMessage.Warning('There has already been a meter reading entered for this meter for this month and year.  Please choose a different reading date for this entry.')
		   RETURN 0
		ENDIF
		
		lcMonth      = gasopt.CMONTH  &&  First month of year, so we can calculate YTD usage
		ldDate       = THISFORM.txtdDate.VALUE
		lcYear       = ALLTRIM(STR(YEAR(ldDate)))
		
		IF lcMonth = '01'  &&  Calendar year basis, so the starting date will just be the first day of the year the reading is for
		   ldStartDate = CTOD('01/01/' + lcYear)
		ELSE
		   IF ldDate < CTOD(lcMonth + '/01/' + lcYear)  &&  If the reading date is less than the first day of the first month, we need to wrap back to the last year to get our numbers
		      ldStartDate = GOMONTH(CTOD(lcMonth + '/01/' + lcYear),-12)  &&  A year earlier
		   ELSE
		      ldStartDate = CTOD(lcMonth + '/01/' + lcYear)
		   ENDIF
		ENDIF
		
		SELECT gasuse1
		SUM(nUsed) FOR BETWEEN(ddate,ldStartDate,ldDate) and cMeterNo == thisform.txtcmeterNo.value and Recno('gasuse1') <> RECNO('gasuse') TO lnUsed 
		THISFORM.txtnUsedPrior.SET('value',lnUsed)
		
		IF DODEFAULT()
		*++
		*>>If value has changed, call the FieldValid() event, and store value to datasource on success.
		*--
		
		IF thisform.cmdatamanager.ischanged('gasuse')
		   thisform.lEdit = .t.
		ENDIF 
		
		  IF THISFORM.cmBindingManager.ValidNeeded(THIS)
		    * Convert to proper capitalization if desired
		    IF THIS.lPropercase AND VARTYPE(THIS.Value) $ 'CM'
		      IF ISNULL(THISFORM.oString)
		        THIS.Value = PROPER(THIS.Value)
		      ELSE
		        THIS.Value = THISFORM.oString.ProperCase(THIS.Value)
		      ENDIF
		    ENDIF
		
		    * Call binding manager for the remaining common control valid() processing.
		    RETURN THISFORM.cmBindingManager.Valid(THIS)
		  ENDIF
		  RETURN .T.
		ENDIF 
	ENDPROC

	PROCEDURE txtdInvDate.Valid
		IF DODEFAULT()
		*++
		*>>If value has changed, call the FieldValid() event, and store value to datasource on success.
		*--
		IF thisform.cmdatamanager.ischanged('gasuse')
		   thisform.lEdit = .t.
		ENDIF 
		
		  IF THISFORM.cmBindingManager.ValidNeeded(THIS)
		    * Convert to proper capitalization if desired
		    IF THIS.lPropercase AND VARTYPE(THIS.Value) $ 'CM'
		      IF ISNULL(THISFORM.oString)
		        THIS.Value = PROPER(THIS.Value)
		      ELSE
		        THIS.Value = THISFORM.oString.ProperCase(THIS.Value)
		      ENDIF
		    ENDIF
		
		    * Call binding manager for the remaining common control valid() processing.
		    RETURN THISFORM.cmBindingManager.Valid(THIS)
		  ENDIF
		  RETURN .T.
		ENDIF 
	ENDPROC

	PROCEDURE txtNcharge.Valid
		THISFORM.calcmcf()
		
		IF thisform.cmdatamanager.ischanged('gasuse')
		   thisform.lEdit = .t.
		ENDIF 
		
		DODEFAULT()
		
	ENDPROC

	PROCEDURE txtnDifference.When
		return .f.
		
	ENDPROC

	PROCEDURE txtnDue.When
		return .f.
	ENDPROC

	PROCEDURE txtnMultiplier.Valid
		THISFORM.calcmcf()
		
		IF thisform.cmdatamanager.ischanged('gasuse')
		   thisform.lEdit = .t.
		ENDIF 
		
		DODEFAULT()
		
	ENDPROC

	PROCEDURE txtNpressure.Valid
		DODEFAULT()
		
		lnPressure = ((14.4+THIS.VALUE)/14.7)
		
		IF THISFORM.txtnMultiplier.VALUE <> lnPressure
		   THISFORM.txtnMultiplier.SET('value',lnPressure)
		ENDIF
		
		THISFORM.calcmcf()
		
		IF thisform.cmdatamanager.ischanged('gasuse')
		   thisform.lEdit = .t.
		ENDIF 
	ENDPROC

	PROCEDURE txtnPrice.Valid
		THISFORM.calcmcf()
		
		IF thisform.cmdatamanager.ischanged('gasuse')
		   thisform.lEdit = .t.
		ENDIF 
		
		DODEFAULT()
		
	ENDPROC

	PROCEDURE txtnPriceAdj.Valid
		THISFORM.calcmcf()
		
		IF thisform.cmdatamanager.ischanged('gasuse')
		   thisform.lEdit = .t.
		ENDIF 
		
		DODEFAULT()
		
	ENDPROC

	PROCEDURE txtnUsed.When
		return .f.
	ENDPROC

	PROCEDURE txtnUsedCurrent.When
		return .f.
	ENDPROC

	PROCEDURE txtnUsedPrior.When
		return .f.
		
	ENDPROC

	PROCEDURE txtnUsedYTD.When
		return .f.
	ENDPROC

	PROCEDURE txtnYearlyAmt.When
		return .f.
		
	ENDPROC

ENDDEFINE
