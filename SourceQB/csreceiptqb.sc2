*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="csreceiptqb.scx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
#INCLUDE "appdefs.h"

DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="2" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Cursor10" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor12" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor6" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor9" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor14" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor16" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor18" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor21" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor17" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor19" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor23" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor24" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor25" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor27" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor28" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor29" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor31" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor7" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor8" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Relation1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor11" UniqueID="" Timestamp="" />

	AutoOpenTables = .F.
	DataSource = .NULL.
	Height = 773
	InitialSelectedAlias = "csrcthdr"
	Left = 0
	Name = "Dataenvironment"
	Top = 0
	Width = 1108

	ADD OBJECT 'Cursor1' AS cursor WITH ;
		Alias = "csrctdet", ;
		BufferModeOverride = 5, ;
		CursorSource = "csrctdet", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 465, ;
		Name = "Cursor1", ;
		Top = 5, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor10' AS cursor WITH ;
		Alias = "glmaster", ;
		BufferModeOverride = 5, ;
		CursorSource = "glmaster", ;
		Database = ..\newdbc\appdata.dbc, ;
		Height = 90, ;
		Left = 422, ;
		Name = "Cursor10", ;
		Order = "glbatch", ;
		Top = 135, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor11' AS cursor WITH ;
		Alias = "doidecks", ;
		CursorSource = "doidecks", ;
		Database = ..\newdbc\appdata.dbc, ;
		Height = 90, ;
		Left = 104, ;
		Name = "Cursor11", ;
		Top = 603, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor12' AS cursor WITH ;
		Alias = "wells", ;
		BufferModeOverride = 3, ;
		CursorSource = "wells", ;
		Database = ..\newdbc\appdata.dbc, ;
		Height = 90, ;
		Left = 7, ;
		Name = "Cursor12", ;
		Order = "cwellid", ;
		Top = 152, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor14' AS cursor WITH ;
		Alias = "checks", ;
		BufferModeOverride = 5, ;
		CursorSource = "checks", ;
		Database = ..\newdbc\appdata.dbc, ;
		Height = 90, ;
		Left = 238, ;
		Name = "Cursor14", ;
		Top = 260, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor16' AS cursor WITH ;
		Alias = "revcat", ;
		CursorSource = "revcat", ;
		Database = ..\newdbc\appdata.dbc, ;
		Height = 90, ;
		Left = 366, ;
		Name = "Cursor16", ;
		Top = 269, ;
		Width = 101
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor17' AS cursor WITH ;
		Alias = "csrctdet1", ;
		CursorSource = "csrctdet", ;
		Database = ..\newdbc\appdata.dbc, ;
		Height = 90, ;
		Left = 347, ;
		Name = "Cursor17", ;
		Top = 390, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor18' AS cursor WITH ;
		Alias = "income1", ;
		BufferModeOverride = 5, ;
		CursorSource = "income", ;
		Database = ..\newdbc\appdata.dbc, ;
		Height = 90, ;
		Left = 604, ;
		Name = "Cursor18", ;
		Top = 392, ;
		Width = 97
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor19' AS cursor WITH ;
		Alias = "csrcthdr1", ;
		CursorSource = "csrcthdr", ;
		Database = ..\newdbc\appdata.dbc, ;
		Height = 90, ;
		Left = 464, ;
		Name = "Cursor19", ;
		Top = 394, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor2' AS cursor WITH ;
		Alias = "csrcthdr", ;
		BufferModeOverride = 5, ;
		CursorSource = "csrcthdr", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 317, ;
		Name = "Cursor2", ;
		Top = 0, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor21' AS cursor WITH ;
		Alias = "wellinv", ;
		CursorSource = "wellinv", ;
		Database = ..\newdbc\appdata.dbc, ;
		Height = 90, ;
		Left = 25, ;
		Name = "Cursor21", ;
		Top = 468, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor23' AS cursor WITH ;
		Alias = "incsusp1", ;
		BufferModeOverride = 5, ;
		CursorSource = "incsusp", ;
		Database = ..\newdbc\appdata.dbc, ;
		Height = 90, ;
		Left = 776, ;
		Name = "Cursor23", ;
		Top = 391, ;
		Width = 101
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor24' AS cursor WITH ;
		Alias = "trangroup", ;
		CursorSource = "trangroup", ;
		Database = ..\newdbc\appdata.dbc, ;
		Height = 90, ;
		Left = 783, ;
		Name = "Cursor24", ;
		Top = 139, ;
		Width = 101
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor25' AS cursor WITH ;
		Alias = "sysctl", ;
		CursorSource = "sysctl", ;
		Database = ..\newdbc\appdata.dbc, ;
		Height = 90, ;
		Left = 394, ;
		Name = "Cursor25", ;
		Top = 509, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor27' AS cursor WITH ;
		Alias = "expcat", ;
		CursorSource = "expcat", ;
		Database = ..\newdbc\appdata.dbc, ;
		Height = 90, ;
		Left = 672, ;
		Name = "Cursor27", ;
		Top = 7, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor28' AS cursor WITH ;
		Alias = "expense", ;
		CursorSource = "expense", ;
		Database = ..\newdbc\appdata.dbc, ;
		Height = 90, ;
		Left = 795, ;
		Name = "Cursor28", ;
		Top = 257, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor29' AS cursor WITH ;
		Alias = "expense1", ;
		CursorSource = "expense", ;
		Database = ..\newdbc\appdata.dbc, ;
		Height = 90, ;
		Left = 13, ;
		Name = "Cursor29", ;
		Top = 18, ;
		Width = 91
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor3' AS cursor WITH ;
		Alias = "glopt", ;
		BufferModeOverride = 1, ;
		CursorSource = "glopt", ;
		Database = ..\newdbc\appdata.dbc, ;
		Height = 90, ;
		Left = 177, ;
		Name = "Cursor3", ;
		Top = 1, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor31' AS cursor WITH ;
		Alias = "expsusp", ;
		CursorSource = "expsusp", ;
		Database = ..\newdbc\appdata.dbc, ;
		Height = 90, ;
		Left = 765, ;
		Name = "Cursor31", ;
		Top = 508, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor4' AS cursor WITH ;
		Alias = "revsrc", ;
		CursorSource = "revsrc", ;
		Database = ..\newdbc\appdata.dbc, ;
		Height = 90, ;
		Left = 257, ;
		Name = "Cursor4", ;
		Top = 499, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor5' AS cursor WITH ;
		Alias = "options", ;
		CursorSource = "options", ;
		Database = ..\newdbc\appdata.dbc, ;
		Height = 90, ;
		Left = 570, ;
		Name = "Cursor5", ;
		Top = 140, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor6' AS cursor WITH ;
		Alias = "incsusp", ;
		BufferModeOverride = 5, ;
		CursorSource = "incsusp", ;
		Database = ..\newdbc\appdata.dbc, ;
		Height = 90, ;
		Left = 22, ;
		Name = "Cursor6", ;
		Top = 338, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor7' AS cursor WITH ;
		Alias = "investor", ;
		CursorSource = "investor", ;
		Database = ..\newdbc\appdata.dbc, ;
		Height = 90, ;
		Left = 909, ;
		Name = "Cursor7", ;
		Top = 405, ;
		Width = 91
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor8' AS cursor WITH ;
		Alias = "custvend", ;
		CursorSource = "custvend", ;
		Database = ..\newdbc\appdata.dbc, ;
		Height = 90, ;
		Left = 990, ;
		Name = "Cursor8", ;
		Top = 260, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor9' AS cursor WITH ;
		Alias = "income", ;
		BufferModeOverride = 5, ;
		CursorSource = "income", ;
		Database = ..\newdbc\appdata.dbc, ;
		Height = 90, ;
		Left = 653, ;
		Name = "Cursor9", ;
		Top = 271, ;
		Width = 101
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Relation1' AS relation WITH ;
		ChildAlias = "csrctdet", ;
		ChildOrder = "cbatch", ;
		Name = "Relation1", ;
		ParentAlias = "csrcthdr", ;
		RelationalExpr = "cbatch"
		*< END OBJECT: BaseClass="relation" />

ENDDEFINE

DEFINE CLASS formcsreceiptd AS frmdatamanagerformcustom OF "..\custom\cforms.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Shpshapecustom1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcName" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtCcheckno" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblCcheckno" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtNcashamt" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblNcashamt" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblSource" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblDpostdate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grouptran" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtnUnits" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblUnits" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtnPrice" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblAmount" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Glmaint" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboInttype" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtnTotal" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcOwnerID" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdLookWell" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtdpostdate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdLookID" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcBegRange1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcEndRange1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdDocument" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcWellID" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblDash" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcProdYear" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbltextcustom6" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblAllocate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblDaysOn" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtnDaysOn" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtnDaysOn1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblPeriodRange" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboType" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcProdPeriod" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblIntType" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkGross" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdLookOwner" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lstWellRcpt" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboCashAcct" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcwellname" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkNOQBPOST" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcOwnerID1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblInfo" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblDentdate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtdRecDate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblPartnershipImport" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblCleared" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom6" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboDeck" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbltextcustom7" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbltextcustom4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtCendrange" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtCbegrange" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: adddetail		&& Adds detail lines
		*m: calcdays		&& Calculates the dayson from the period ranges entered.
		*m: calcext		&& Calculates the detail extension total
		*m: calctot		&& Calculates the Invoice Totals
		*m: checkhist		&& Returns .T. if the given production period is closed.
		*m: daysonsave		&& Saves the number of days the well was on.
		*m: dmincome		&& Either places the income entries in the INCSUSP or INCOME tables depending on whether the production year and period were specified.
		*m: editdetail		&& Edit a detail line
		*m: getaddr
		*m: getprice		&& Gets the price for the item based upon the price code passed.
		*m: ischeckcleared		&& Queries QB to see if this receipt has been marked cleared in QB.
		*m: lookcoa
		*m: refreshinfo
		*m: setstate		&& Resets the form state for non bound controls so that the save button still works.
		*m: valterms		&& Validate Terms and Set Due Date and Disc Date based on the Terms
		*m: viewdocument
		*p: coldacctno
		*p: ldeptrequired
		*p: linvestment		&& .T. if the well is an investment well
		*p: lnewdetail
		*p: lqbpost
		*p: lwellrequired
		*p: ndetrecno
		*p: nextension
		*p: nprice
		*p: nquantity
		*p: odist		&& Distproc Object
		*p: owellinv
	*</DefinedPropArrayMethod>

	Caption = "Production Receipts"
	cdisplayname = 
	clistexpression = csrcthdr.cbatch
	cnavworkarea = csrcthdr
	cworkarea = csrcthdr
	DoCreate = .T.
	Height = 460
	HelpContextID = 19
	lexpliciteditmode = .F.
	lrememberrecord = .T.
	Name = "formcsreceiptd"
	owellinv = .NULL.
	Visible = .T.
	Width = 612
	_memberdata = <VFPData>
		<memberdata name="ischeckcleared" display="IsCheckCleared"/>
		<memberdata name="owellinv" display="oWellInv"/>
		</VFPData>
	cmdatamanager.Name = "cmdatamanager"
	cmdatamanager.TabIndex = 2
	cmdatamanager.ZOrderSet = 2
	cmlookupmanager.Name = "cmlookupmanager"
	Mwresize1.lblHighLight.Name = "lblHighLight"
	Mwresize1.lblShading.Name = "lblShading"
	Mwresize1.Name = "Mwresize1"
	Mwresize1.TabIndex = 1
	Mwresize1.ZOrderSet = 1

	ADD OBJECT 'cboCashAcct' AS qbaccount WITH ;
		ControlSource = "csrcthdr.cacctlistid", ;
		Height = 20, ;
		lbankonly = .F., ;
		Left = 182, ;
		Name = "cboCashAcct", ;
		TabIndex = 5, ;
		Top = 3, ;
		Width = 253, ;
		ZOrderSet = 44
		*< END OBJECT: ClassLib="..\custom\swcontrol.vcx" BaseClass="combobox" />

	ADD OBJECT 'cboDeck' AS cbocomboboxcustom WITH ;
		BoundColumn = 2, ;
		ControlSource = "", ;
		Height = 20, ;
		Left = 211, ;
		Name = "cboDeck", ;
		Style = 0, ;
		TabIndex = 30, ;
		Top = 141, ;
		ZOrderSet = 55
		*< END OBJECT: ClassLib="..\..\..\codeminenew\ampro_rv\custom\ccontrol.vcx" BaseClass="combobox" />

	ADD OBJECT 'cboInttype' AS cbocomboboxcustom WITH ;
		Left = 506, ;
		Name = "cboInttype", ;
		RowSource = "Landowner,Override,Work Int", ;
		RowSourceType = 1, ;
		TabIndex = 38, ;
		Top = 140, ;
		Visible = .F., ;
		ZOrderSet = 17
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="combobox" />

	ADD OBJECT 'cboType' AS cbocomboboxcustom WITH ;
		ColumnCount = 2, ;
		ControlSource = "", ;
		Format = "", ;
		Height = 20, ;
		IncrementalSearch = .T., ;
		InputMask = "", ;
		Left = 272, ;
		Name = "cboType", ;
		SelectOnEntry = .T., ;
		Style = 2, ;
		TabIndex = 23, ;
		Top = 117, ;
		Width = 60, ;
		ZOrderSet = 37
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="combobox" />

	ADD OBJECT 'chkGross' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		BackStyle = 0, ;
		Caption = "Gross", ;
		FontSize = 7, ;
		Left = 337, ;
		Name = "chkGross", ;
		TabIndex = 24, ;
		TabStop = .F., ;
		Top = 98, ;
		Value = .F., ;
		ZOrderSet = 41
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkNOQBPOST' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Don't Post To QuickBooks", ;
		ControlSource = "csrcthdr.lNoQBPost", ;
		Left = 417, ;
		Name = "chkNOQBPOST", ;
		TabIndex = 53, ;
		Top = 29, ;
		Value = .F., ;
		ZOrderSet = 47
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'cmdDocument' AS cmdcommandbuttoncustom WITH ;
		Caption = "\<Document", ;
		Height = 25, ;
		Left = 12, ;
		Name = "cmdDocument", ;
		TabIndex = 18, ;
		TabStop = .F., ;
		Top = 417, ;
		Visible = .F., ;
		Width = 64, ;
		ZOrderSet = 25
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdLookID' AS cmdcommandbuttoncustom WITH ;
		Caption = "Received From", ;
		Height = 22, ;
		Left = 16, ;
		Name = "cmdLookID", ;
		TabIndex = 3, ;
		TabStop = .F., ;
		Top = 3, ;
		Width = 79, ;
		ZOrderSet = 22
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdLookOwner' AS cmdcommandbuttoncustom WITH ;
		Caption = "Allocate All To", ;
		Height = 20, ;
		Left = 446, ;
		Name = "cmdLookOwner", ;
		TabIndex = 39, ;
		TabStop = .F., ;
		Top = 169, ;
		ZOrderSet = 42
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdLookWell' AS cmdcommandbuttoncustom WITH ;
		Caption = " Well ID ", ;
		Height = 20, ;
		Left = 18, ;
		Name = "cmdLookWell", ;
		TabIndex = 14, ;
		TabStop = .F., ;
		Top = 94, ;
		Width = 79, ;
		ZOrderSet = 20
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'Glmaint' AS glmaint WITH ;
		Height = 45, ;
		Left = 12, ;
		Name = "Glmaint", ;
		Top = 61, ;
		Width = 24
		*< END OBJECT: ClassLib="..\custom\swgl.vcx" BaseClass="custom" />

	ADD OBJECT 'Grouptran' AS grouptran WITH ;
		Left = 389, ;
		Name = "Grouptran", ;
		Top = 40
		*< END OBJECT: ClassLib="..\custom\swgl.vcx" BaseClass="custom" />

	ADD OBJECT 'lblAllocate' AS lbltextcustom WITH ;
		Caption = "Allocate All To", ;
		FontSize = 8, ;
		Height = 16, ;
		Left = 387, ;
		Name = "lblAllocate", ;
		TabIndex = 44, ;
		Top = 416, ;
		Visible = .F., ;
		Width = 71, ;
		ZOrderSet = 31
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblAmount' AS lblfieldlabelcustom WITH ;
		Caption = "Total", ;
		FontSize = 8, ;
		Height = 16, ;
		Left = 579, ;
		Name = "lblAmount", ;
		TabIndex = 19, ;
		Top = 98, ;
		Width = 25, ;
		ZOrderSet = 15
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblCcheckno' AS lblfieldlabelcustom WITH ;
		AutoSize = .T., ;
		Caption = "Chk No", ;
		Height = 16, ;
		Left = 267, ;
		Name = "lblCcheckno", ;
		TabIndex = 11, ;
		Top = 57, ;
		Width = 36, ;
		ZOrderSet = 6
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblCleared' AS lbllabelcustom WITH ;
		Caption = "Cleared", ;
		FontBold = .T., ;
		ForeColor = 255,0,0, ;
		Left = 214, ;
		Name = "lblCleared", ;
		TabIndex = 56, ;
		Top = 57, ;
		Visible = .F., ;
		ZOrderSet = 53
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblDash' AS lbltextcustom WITH ;
		Caption = "-", ;
		FontBold = .T., ;
		FontSize = 8, ;
		Height = 16, ;
		Left = 264, ;
		Name = "lblDash", ;
		TabIndex = 48, ;
		Top = 436, ;
		Visible = .F., ;
		Width = 6, ;
		ZOrderSet = 28
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblDaysOn' AS lbltextcustom WITH ;
		Caption = "Days On", ;
		FontSize = 8, ;
		Height = 16, ;
		Left = 328, ;
		Name = "lblDaysOn", ;
		TabIndex = 43, ;
		Top = 416, ;
		Visible = .F., ;
		Width = 44, ;
		ZOrderSet = 32
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblDentdate' AS lblfieldlabelcustom WITH ;
		AutoSize = .T., ;
		Caption = "Acct Date", ;
		Height = 16, ;
		Left = 31, ;
		Name = "lblDentdate", ;
		TabIndex = 13, ;
		Top = 58, ;
		Width = 50, ;
		ZOrderSet = 50
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblDpostdate' AS lblfieldlabelcustom WITH ;
		Caption = "Post Date", ;
		Height = 16, ;
		Left = 454, ;
		Name = "lblDpostdate", ;
		TabIndex = 7, ;
		Top = 6, ;
		Width = 48, ;
		ZOrderSet = 10
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblInfo' AS lbllabelcustom WITH ;
		Caption = "Additional Info:", ;
		FontBold = .T., ;
		FontSize = 10, ;
		Left = 87, ;
		Name = "lblInfo", ;
		TabIndex = 54, ;
		Top = 435, ;
		Visible = .F., ;
		ZOrderSet = 49
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblIntType' AS lbllabelcustom WITH ;
		Caption = "Int Type:", ;
		Left = 453, ;
		Name = "lblIntType", ;
		TabIndex = 46, ;
		Top = 143, ;
		Visible = .F., ;
		ZOrderSet = 40
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom1' AS lbllabelcustom WITH ;
		BackStyle = 0, ;
		Caption = "Price", ;
		Comment = "P", ;
		Left = 477, ;
		Name = "Lbllabelcustom1", ;
		TabIndex = 17, ;
		Top = 98, ;
		ZOrderSet = 38
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom3' AS lbllabelcustom WITH ;
		Caption = "Prod Period", ;
		Left = 25, ;
		Name = "Lbllabelcustom3", ;
		TabIndex = 50, ;
		Top = 146, ;
		ZOrderSet = 27
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom4' AS lbllabelcustom WITH ;
		Caption = "/", ;
		FontBold = .T., ;
		FontSize = 10, ;
		Left = 115, ;
		Name = "Lbllabelcustom4", ;
		TabIndex = 42, ;
		Top = 143, ;
		ZOrderSet = 36
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom5' AS lbllabelcustom WITH ;
		Caption = "Cash Acct", ;
		Left = 123, ;
		Name = "Lbllabelcustom5", ;
		TabIndex = 52, ;
		Top = 5, ;
		ZOrderSet = 45
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom6' AS lbllabelcustom WITH ;
		Caption = "Deck:", ;
		Left = 175, ;
		Name = "Lbllabelcustom6", ;
		TabIndex = 22, ;
		Top = 144, ;
		ZOrderSet = 54
		*< END OBJECT: ClassLib="..\..\..\codeminenew\ampro_rv\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblNcashamt' AS lblfieldlabelcustom WITH ;
		AutoSize = .T., ;
		Caption = "Total Amount", ;
		Height = 16, ;
		Left = 418, ;
		Name = "lblNcashamt", ;
		TabIndex = 12, ;
		Top = 58, ;
		Width = 65, ;
		ZOrderSet = 8
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblPartnershipImport' AS lbllabelcustom WITH ;
		Caption = "Partnership Import", ;
		FontBold = .T., ;
		ForeColor = 255,0,0, ;
		Left = 490, ;
		Name = "lblPartnershipImport", ;
		TabIndex = 55, ;
		Top = 433, ;
		Visible = .F., ;
		ZOrderSet = 52
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblPeriodRange' AS lbltextcustom WITH ;
		Caption = "Period Range", ;
		Left = 236, ;
		Name = "lblPeriodRange", ;
		TabIndex = 41, ;
		Top = 416, ;
		Visible = .F., ;
		ZOrderSet = 35
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblSource' AS lblfieldlabelcustom WITH ;
		Caption = "Type", ;
		FontSize = 8, ;
		Height = 16, ;
		Left = 288, ;
		Name = "lblSource", ;
		TabIndex = 15, ;
		Top = 98, ;
		Width = 26, ;
		ZOrderSet = 9
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbltextcustom4' AS lbltextcustom WITH ;
		Caption = "-", ;
		FontBold = .T., ;
		FontSize = 8, ;
		Height = 16, ;
		Left = 137, ;
		Name = "Lbltextcustom4", ;
		TabIndex = 45, ;
		Top = 171, ;
		Width = 6, ;
		ZOrderSet = 57
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbltextcustom6' AS lbltextcustom WITH ;
		Caption = "Days On:", ;
		FontSize = 8, ;
		Height = 16, ;
		Left = 262, ;
		Name = "Lbltextcustom6", ;
		TabIndex = 49, ;
		Top = 171, ;
		Width = 47, ;
		ZOrderSet = 30
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbltextcustom7' AS lbltextcustom WITH ;
		Caption = "Range", ;
		Left = 25, ;
		Name = "Lbltextcustom7", ;
		TabIndex = 47, ;
		Top = 171, ;
		ZOrderSet = 56
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblUnits' AS lblfieldlabelcustom WITH ;
		BackStyle = 0, ;
		Caption = "# Units", ;
		FontSize = 8, ;
		Height = 16, ;
		Left = 391, ;
		Name = "lblUnits", ;
		TabIndex = 16, ;
		Top = 98, ;
		Width = 35, ;
		ZOrderSet = 13
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lstWellRcpt' AS lstlistboxcustom WITH ;
		ColumnCount = 8, ;
		ColumnWidths = "75,15,30,125,35,110,75,120", ;
		cvaluesource = , ;
		FontName = "Courier New", ;
		Height = 197, ;
		Left = 8, ;
		Name = "lstWellRcpt", ;
		RowSource = "csrctdet.cwellid, cprodperiod, cprodyear, cdesc, ctype, nunits, nprice, namount", ;
		RowSourceType = 6, ;
		TabIndex = 51, ;
		Top = 216, ;
		Width = 600, ;
		ZOrderSet = 43
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="listbox" />

	ADD OBJECT 'Shpshapecustom1' AS shpshapecustom WITH ;
		BackColor = 255,255,128, ;
		Height = 118, ;
		Left = 9, ;
		Name = "Shpshapecustom1", ;
		Top = 86, ;
		Width = 600, ;
		ZOrderSet = 0
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="shape" />

	ADD OBJECT 'txtCbegrange' AS txttextboxcustom WITH ;
		ControlSource = "", ;
		FontSize = 8, ;
		Height = 20, ;
		InputMask = "XX/XX", ;
		Left = 88, ;
		MaxLength = 5, ;
		Name = "txtCbegrange", ;
		TabIndex = 31, ;
		Top = 169, ;
		Width = 45, ;
		ZOrderSet = 59
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcBegRange1' AS txttextboxcustom WITH ;
		ControlSource = "csrctdet.cbegrange", ;
		DisabledForeColor = 0,0,255, ;
		Enabled = .F., ;
		FontBold = .F., ;
		FontSize = 8, ;
		Height = 20, ;
		InputMask = "XX/XX", ;
		Left = 217, ;
		MaxLength = 5, ;
		Name = "txtcBegRange1", ;
		TabIndex = 32, ;
		Top = 434, ;
		Visible = .F., ;
		Width = 42, ;
		ZOrderSet = 23
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtCcheckno' AS txttextboxcustom WITH ;
		ControlSource = "csrcthdr.ccheckno", ;
		Height = 20, ;
		Left = 309, ;
		MaxLength = 10, ;
		Name = "txtCcheckno", ;
		TabIndex = 9, ;
		Top = 55, ;
		Width = 89, ;
		ZOrderSet = 5
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtCendrange' AS txttextboxcustom WITH ;
		ControlSource = "", ;
		FontSize = 8, ;
		Height = 20, ;
		InputMask = "XX/XX", ;
		Left = 147, ;
		MaxLength = 5, ;
		Name = "txtCendrange", ;
		TabIndex = 34, ;
		Top = 169, ;
		Width = 45, ;
		ZOrderSet = 58
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcEndRange1' AS txttextboxcustom WITH ;
		ControlSource = "csrctdet.cendrange", ;
		DisabledForeColor = 0,0,255, ;
		Enabled = .F., ;
		FontBold = .F., ;
		FontSize = 8, ;
		Height = 20, ;
		InputMask = "XX/XX", ;
		Left = 272, ;
		MaxLength = 5, ;
		Name = "txtcEndRange1", ;
		TabIndex = 33, ;
		Top = 434, ;
		Visible = .F., ;
		Width = 44, ;
		ZOrderSet = 24
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcName' AS txtquickfill WITH ;
		BackColor = 255,255,255, ;
		clistexpression = revsrc.crevname, ;
		clistworkarea = revsrc, ;
		ControlSource = "csrcthdr.cname", ;
		Height = 20, ;
		Left = 17, ;
		lreadonly = .F., ;
		MaxLength = 40, ;
		Name = "txtcName", ;
		TabIndex = 4, ;
		Top = 27, ;
		Width = 331, ;
		ZOrderSet = 4
		*< END OBJECT: ClassLib="..\common\cmgadget.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcOwnerID' AS txtquickfill WITH ;
		clistexpression = investor.cownerid, ;
		clistworkarea = investor, ;
		Height = 20, ;
		Left = 526, ;
		MaxLength = 10, ;
		Name = "txtcOwnerID", ;
		TabIndex = 40, ;
		Top = 169, ;
		Width = 76, ;
		ZOrderSet = 19
		*< END OBJECT: ClassLib="..\common\cmgadget.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcOwnerID1' AS txtquickfill WITH ;
		clistexpression = investor.cownerid, ;
		clistworkarea = investor, ;
		ControlSource = "csrctdet.cownerid", ;
		DisabledForeColor = 0,0,255, ;
		Enabled = .F., ;
		FontBold = .F., ;
		Height = 20, ;
		Left = 384, ;
		MaxLength = 10, ;
		Name = "txtcOwnerID1", ;
		TabIndex = 37, ;
		Top = 434, ;
		Visible = .F., ;
		Width = 76, ;
		ZOrderSet = 48
		*< END OBJECT: ClassLib="..\custom\cgadget.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcProdPeriod' AS swperiod WITH ;
		Height = 20, ;
		Left = 88, ;
		Name = "txtcProdPeriod", ;
		TabIndex = 28, ;
		Top = 141, ;
		Width = 24, ;
		ZOrderSet = 39
		*< END OBJECT: ClassLib="..\custom\swcontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcProdYear' AS swyear WITH ;
		Format = "XXXX", ;
		Height = 20, ;
		Left = 121, ;
		MaxLength = 4, ;
		Name = "txtcProdYear", ;
		TabIndex = 29, ;
		Top = 141, ;
		Width = 36, ;
		ZOrderSet = 29
		*< END OBJECT: ClassLib="..\custom\swcontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcWellID' AS txtquickfill WITH ;
		clistexpression = cwellid, ;
		clistworkarea = wells, ;
		Height = 20, ;
		Left = 18, ;
		MaxLength = 10, ;
		Name = "txtcWellID", ;
		TabIndex = 20, ;
		Top = 117, ;
		Width = 79, ;
		ZOrderSet = 26
		*< END OBJECT: ClassLib="..\common\cmgadget.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcwellname' AS txtquickfill WITH ;
		clistexpression = cwellname, ;
		clistworkarea = wells, ;
		Height = 20, ;
		Left = 99, ;
		Name = "txtcwellname", ;
		TabIndex = 21, ;
		Top = 117, ;
		Width = 171, ;
		ZOrderSet = 46
		*< END OBJECT: ClassLib="..\common\cmgadget.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtdpostdate' AS dpk WITH ;
		ControlSource = "csrcthdr.dpostdate", ;
		Height = 20, ;
		lcheckdate = .T., ;
		Left = 512, ;
		lmorethan90 = .T., ;
		Name = "txtdpostdate", ;
		TabIndex = 6, ;
		Top = 4, ;
		Width = 75, ;
		ZOrderSet = 21
		*< END OBJECT: ClassLib="..\custom\swdate.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtdRecDate' AS dpk WITH ;
		ControlSource = "csrcthdr.ddate", ;
		Height = 20, ;
		lcheckdate = .T., ;
		Left = 92, ;
		Name = "txtdRecDate", ;
		TabIndex = 8, ;
		Top = 56, ;
		Width = 75, ;
		ZOrderSet = 51
		*< END OBJECT: ClassLib="..\custom\swdate.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtNcashamt' AS txttextboxcustom WITH ;
		BackColor = 212,208,200, ;
		ControlSource = "csrcthdr.ncashamt", ;
		Height = 20, ;
		InputMask = "$$$,$$$,$$$.99", ;
		Left = 490, ;
		Name = "txtNcashamt", ;
		ReadOnly = .F., ;
		TabIndex = 10, ;
		TabStop = .F., ;
		Top = 55, ;
		Width = 110, ;
		ZOrderSet = 7
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtnDaysOn' AS txttextboxcustom WITH ;
		ControlSource = "", ;
		FontSize = 8, ;
		Height = 20, ;
		Left = 311, ;
		Name = "txtnDaysOn", ;
		TabIndex = 35, ;
		Top = 169, ;
		Width = 49, ;
		ZOrderSet = 33
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtnDaysOn1' AS txttextboxcustom WITH ;
		Alignment = 3, ;
		ControlSource = "csrctdet.ndayson", ;
		DisabledForeColor = 0,0,255, ;
		Enabled = .F., ;
		FontBold = .F., ;
		FontSize = 8, ;
		Height = 20, ;
		Left = 326, ;
		Name = "txtnDaysOn1", ;
		TabIndex = 36, ;
		Top = 434, ;
		Value = 0, ;
		Visible = .F., ;
		Width = 48, ;
		ZOrderSet = 34
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtnPrice' AS txttextboxcustom WITH ;
		Alignment = 3, ;
		ControlSource = "", ;
		FontSize = 8, ;
		Format = "", ;
		Height = 20, ;
		InputMask = "999.999999", ;
		Left = 428, ;
		Name = "txtnPrice", ;
		TabIndex = 26, ;
		Top = 116, ;
		Value = 0, ;
		Width = 81, ;
		ZOrderSet = 14
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtnTotal' AS txttextboxcustom WITH ;
		Alignment = 3, ;
		ControlSource = "", ;
		FontSize = 8, ;
		Format = "", ;
		Height = 20, ;
		InputMask = "999999999.99", ;
		Left = 511, ;
		Name = "txtnTotal", ;
		TabIndex = 27, ;
		Top = 116, ;
		Value = 0, ;
		Width = 94, ;
		ZOrderSet = 18
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtnUnits' AS txttextboxcustom WITH ;
		Alignment = 3, ;
		ControlSource = "", ;
		FontSize = 8, ;
		Format = "", ;
		Height = 20, ;
		InputMask = "99999999.99", ;
		Left = 337, ;
		Name = "txtnUnits", ;
		TabIndex = 25, ;
		Top = 117, ;
		Value = 0, ;
		Width = 90, ;
		ZOrderSet = 12
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />
	
	PROCEDURE Activate
		IF DODEFAULT()
		   IF TYPE('thisform.txtntotal.value') <> 'N'
		      thisform.txtntotal.value = 0
		   ENDIF   
		ENDIF   
	ENDPROC

	PROCEDURE adddetail		&& Adds detail lines
		*
		*  Adds the detail line to the csdisdet table
		*
		LOCAL m.cItemDesc, m.cAcctNo, m.cUnitno, m.cDeptNo, m.nExtension, m.cidpurd
		LOCAL lcAcctNo, lcID, llTaxError
		LOCAL lGrossUnits, lWellRcpt, lcExpClear, lcRevClear, lcSuspense, lcidrctd, llNoGo, llReturn
		LOCAL loError
		LOCAL cAcctNo, cBatch, cBegRange, cDeptNo, cDesc, cEndRange, cGroup, cIntType, cOwnerID
		LOCAL cProdPeriod, cProdYear, cType, cWellID, cWellName, cidrctd, cwellstat, nAmount, nDaysOn
		LOCAL nPrice, nUnits, temp[1]
		
		llReturn = .T.
		
		TRY
		    lcID     = csrcthdr.cid
		    m.cBatch = csrcthdr.cBatch
		
		    SELECT glopt
		    GO TOP
		    lcAcctNo   = cQBRevClear
		    lcExpClear = cQBExpClear
		    lcSuspense = cQBSuspense
		    IF EMPTY(lcSuspense)
		        lcSuspense = '999999'
		    ENDIF
		    
		    IF thisform.IsCheckCleared()
		       MESSAGEBOX('This receipt has been cleared in the QB check register. It cannot be changed.',16,'Production Receipts')
		       llReturn = .f.
		       EXIT 
		    ENDIF 
		
		    THISFORM.lNewDetail = .T.
		
		    WITH THIS
		        m.cWellID     = .txtcWellID.VALUE
		        m.cDesc       = .txtcWellName.VALUE
		        m.nUnits      = .txtnUnits.VALUE
		        m.nPrice      = .txtnPrice.VALUE
		        m.nAmount     = .txtnTotal.VALUE
		        m.cAcctNo     = lcAcctNo
		        m.cBegRange   = .txtcBegRange.VALUE
		        m.cEndRange   = .txtcEndRange.VALUE
		        m.nDaysOn     = .txtnDaysOn.VALUE
		        m.cWellName   = .txtcWellName.VALUE
		        m.cProdPeriod = .txtcProdPeriod.VALUE
		        m.cProdYear   = .txtcProdYear.VALUE
		        m.cDeck       = .cbodeck.Value 
		        m.cIntType    = LEFT(.cboIntType.VALUE, 1)
		        m.cDeptNo     = ''
		        m.lGrossUnits = .chkgross.VALUE
		
		*  Get the group associated with the well
		        SELE wells
		        LOCATE FOR cWellID = m.cWellID
		        IF FOUND()
		            m.cGroup    = cGroup
		            m.cwellstat = cwellstat
		        ELSE
		            THISFORM.omessage.Warning('The Well entered on this detail line was not found in the well master file. Please enter a valid Well ID.')
		            THISFORM.setnextcontrol(THISFORM.txtcWellID)
		            llReturn = .F.
		            EXIT
		        ENDIF
		
		* Check to make sure the period is not closed. Don't allow expense to be allocated to a closed period.
		        SELE income
		        LOCATE FOR cWellID = m.cWellID AND cBatch = m.cBatch
		        IF FOUND() AND nRunNo <> 0
		            THIS.omessage.Warning('This revenue has already been processed in a revenue run. It cannot be modified.')
		            THIS.setnextcontrol(.txtcProdPeriod)
		            llReturn = .F.
		            EXIT
		        ENDIF
		
		        m.cOwnerID = .txtcOwnerID.VALUE
		        m.cType    = .cboType.VALUE
		
		*
		*  Check to see if its a one man item.  If so check to see
		*  if the type of income is directly paid.  If so, don't let
		*  this allocation happen.
		*
		        IF NOT THISFORM.lInvestment
		            SELE wellinv
		            LOCATE FOR cOwnerID == m.cOwnerID AND cWellID == m.cWellID
		            IF FOUND()
		                llNoGo = .F.
		                DO CASE
		                    CASE m.cType = 'BBL'
		                        IF wellinv.cdirect = 'O' OR wellinv.cdirect = 'B'
		                            llNoGo = .T.
		                        ENDIF
		                    CASE m.cType = 'MCF'
		                        IF wellinv.cdirect = 'G' OR wellinv.cdirect = 'B'
		                            llNoGo = .T.
		                        ENDIF
		                ENDCASE
		                IF llNoGo
		                    THISFORM.omessage.Warning('This type of income cannot be allocated all to this owner. ' + ;
		                                              'The owner is directly paid this type of income.')
		                    THISFORM.setnextcontrol(.txtcWellID)
		                    llReturn = .F.
		                    EXIT
		                ENDIF
		            ENDIF
		        ENDIF
		
		*  Make sure the owner type is specified if the well is an investment well.
		        IF EMPTY(m.cIntType) AND THISFORM.lInvestment
		            THISFORM.omessage.Warning('The interest type must be specified for investment wells.')
		            THISFORM.setnextcontrol(.cboIntType)
		            llReturn = .F.
		            EXIT
		        ENDIF
		
		        IF NOT EMPTY(m.cWellID) AND NOT EMPTY(m.cProdYear) AND NOT EMPTY(m.cProdPeriod) AND NOT THISFORM.lInvestment
		*  Make sure the well has owners
		            SELECT cWellID FROM wellinv WHERE cWellID = m.cWellID INTO ARRAY temp
		            IF _TALLY = 0
		                THISFORM.omessage.Warning('Unable to allocate to this period for well: ' + m.cWellID + ;
		                                          ' This well has no owners. Revenue will be sent to unallocated file.')
		                STORE '' TO m.cProdYear, m.cProdPeriod
		            ENDIF
		        ENDIF
		
		
		        IF TYPE('m.nDaysOn') <> 'N'
		            m.nDaysOn = VAL(m.nDaysOn)
		        ENDIF
		
		        IF NOT EMPTY(m.cOwnerID)
		            SELECT wellinv
		            LOCATE FOR wellinv.cWellID = m.cWellID AND wellinv.cOwnerID = m.cOwnerID
		            IF NOT FOUND('wellinv')
		                THISFORM.omessage.DISPLAY('You cannot allocate a well revenue entry to an owner that has no interests in that well.')
		                THISFORM.setnextcontrol(.txtcOwnerID)
		                llReturn = .F.
		                EXIT
		            ENDIF
		        ENDIF
		
		        IF m.nAmount = 0
		            llReturn = .F.
		            EXIT
		        ENDIF
		
		        SELECT wells
		        SET ORDER TO cWellID
		        IF SEEK(m.cWellID)
		            m.cDesc = cWellName
		            IF cwellstat = 'V'
		                SELE revcat
		                LOCATE FOR cRevType = m.cType
		                IF FOUND()
		                   DO CASE 
		                      CASE m.cIntType = 'L'
		                         lcRevClear = cqbcracctroy
		                      CASE m.cIntType = 'O'
		                         lcRevClear = cqbcracctov
		                      OTHERWISE    
		                         lcRevClear = cqbcracctwi
		                   ENDCASE   
		                   IF INLIST(m.ctype,'COMP','GATH')
		                      m.nAmount = m.nAMount * -1
		                   ENDIF       
		                ELSE 
		                   SELE expcat
		                   LOCATE FOR ccatcode = LEFT(m.cType, 4)
		                   IF FOUND()
		                      lcRevClear = cownacctlistid
		                      m.nAmount = m.nAmount * -1
		                   ELSE
		                      THISFORM.omessage.Warning('The entered revenue type is not valid. Please correct.')
		                      THISFORM.setnextcontrol(.cboType)
		                      llReturn = .F.
		                      EXIT
		                   ENDIF
		                ENDIF    
		            ELSE
		                IF 'TAX' $ m.cType 
		                    m.nAmount = m.nAmount * -1
		                ENDIF
		                SELE revcat
		                LOCATE FOR cRevType = m.cType
		                IF NOT FOUND()
		                   SELE expcat
		                   LOCATE FOR ccatcode = LEFT(m.cType, 4)
		                   IF NOT FOUND()
		                       THISFORM.omessage.Warning('The entered revenue type is not valid. Please correct.')
		                       THISFORM.setnextcontrol(.cboType.VALUE)
		                       llReturn = .F.
		                       EXIT 
		                   ENDIF
		                   lcRevClear = lcExpClear
		                   m.nAmount  = m.nAmount * -1
		                ELSE
		                    lcRevClear = lcAcctNo
		                ENDIF
		            ENDIF
		        ELSE
		            lcRevClear = lcAcctNo
		        ENDIF
		
		        m.cAcctNo = lcRevClear
		
		        IF EMPTY(m.cAcctNo) AND m.goapp.oQB.lQBActive AND NOT THISFORM.chknoQBPOST.VALUE
		            THISFORM.omessage.Warning('The revenue clearing account has not been specified on the ' + ;
		                                      'Account Settings screen.  Please correct before proceeding.')
		            llReturn = .F.
		            EXIT
		        ENDIF
		        m.lWellRcpt = .T.
		
		        WITH THISFORM
		            IF 'TAX' $ .cboType.VALUE
		                llTaxError = .F.
		                swselect('wells')
		                LOCATE FOR cWellID == m.cWellID
		                IF FOUND()
		                    DO CASE
		                        CASE NOT wells.lsev1o AND .cboType.VALUE = 'OTAX1'
		                            IF THISFORM.omessage.CONFIRM('The purchaser has not been set to withhold Oil Tax 1 for this well. ' + ;
		                                      'Do you want to set this option in the well record for this well?')
		                                SELECT wells
		                                REPLACE lsev1o WITH .T., ;
		                                    ldiroilpurch WITH .T.
		                            ELSE
		                                llTaxError = .T.
		                            ENDIF
		                        CASE NOT wells.lsev2o AND .cboType.VALUE = 'OTAX2'
		                            IF THISFORM.omessage.CONFIRM('The purchaser has not been set to withhold Oil Tax 2 for this well. ' + ;
		                                      'Do you want to set this option in the well record for this well?')
		                                SELECT wells
		                                REPLACE lsev2o WITH .T., ;
		                                    ldiroilpurch WITH .T.
		                            ELSE
		                                llTaxError = .T.
		                            ENDIF
		                        CASE NOT wells.lsev3o AND .cboType.VALUE = 'OTAX3'
		                            IF THISFORM.omessage.CONFIRM('The purchaser has not been set to withhold Oil Tax 3 for this well. ' + ;
		                                      'Do you want to set this option in the well record for this well?')
		                                SELECT wells
		                                REPLACE lsev3o WITH .T., ;
		                                    ldiroilpurch WITH .T.
		                            ELSE
		                                llTaxError = .T.
		                            ENDIF
		                        CASE NOT wells.lsev4o AND .cboType.VALUE = 'OTAX4'
		                            IF THISFORM.omessage.CONFIRM('The purchaser has not been set to withhold Oil Tax 4 for this well. ' + ;
		                                      'Do you want to set this option in the well record for this well?')
		                                SELECT wells
		                                REPLACE lsev4o WITH .T., ;
		                                    ldiroilpurch WITH .T.
		                            ELSE
		                                llTaxError = .T.
		                            ENDIF
		                        CASE NOT wells.lsev1g AND .cboType.VALUE = 'GTAX1'
		                            IF THISFORM.omessage.CONFIRM('The purchaser has not been set to withhold Gas Tax 1 for this well. ' + ;
		                                      'Do you want to set this option in the well record for this well?')
		                                SELECT wells
		                                REPLACE lsev1g WITH .T., ;
		                                    ldirgaspurch WITH .T.
		                            ELSE
		                                llTaxError = .T.
		                            ENDIF
		                        CASE NOT wells.lsev2g AND .cboType.VALUE = 'GTAX2'
		                            IF THISFORM.omessage.CONFIRM('The purchaser has not been set to withhold Gas Tax 2 for this well. ' + ;
		                                      'Do you want to set this option in the well record for this well?')
		                                SELECT wells
		                                REPLACE lsev2g WITH .T., ;
		                                    ldirgaspurch WITH .T.
		                            ELSE
		                                llTaxError = .T.
		                            ENDIF
		                        CASE NOT wells.lsev3g AND .cboType.VALUE = 'GTAX3'
		                            IF THISFORM.omessage.CONFIRM('The purchaser has not been set to withhold Gas Tax 3 for this well. ' + ;
		                                      'Do you want to set this option in the well record for this well?')
		                                SELECT wells
		                                REPLACE lsev3g WITH .T., ;
		                                    ldirgaspurch WITH .T.
		                            ELSE
		                                llTaxError = .T.
		                            ENDIF
		                        CASE NOT wells.lsev4g AND .cboType.VALUE = 'GTAX4'
		                            IF THISFORM.omessage.CONFIRM('The purchaser has not been set to withhold Gas Tax 4 for this well. ' + ;
		                                      'Do you want to set this option in the well record for this well?')
		                                SELECT wells
		                                REPLACE lsev4g WITH .T., ;
		                                    ldirgaspurch WITH .T.
		                            ELSE
		                                llTaxError = .T.
		                            ENDIF
		                        CASE NOT wells.lsev1P AND .cboType.VALUE = 'PTAX1'
		                            IF THISFORM.omessage.CONFIRM('The purchaser has not been set to withhold Other Tax 1 for this well. ' + ;
		                                      'Do you want to set this option in the well record for this well?')
		                                SELECT wells
		                                REPLACE lsev1P WITH .T.
		                            ELSE
		                                llTaxError = .T.
		                            ENDIF
		                        CASE NOT wells.lsev2P AND .cboType.VALUE = 'PTAX2'
		                            IF THISFORM.omessage.CONFIRM('The purchaser has not been set to withhold Other Tax 2 for this well. ' + ;
		                                      'Do you want to set this option in the well record for this well?')
		                                SELECT wells
		                                REPLACE lsev2P WITH .T.
		                            ELSE
		                                llTaxError = .T.
		                            ENDIF
		                        CASE NOT wells.lsev3P AND .cboType.VALUE = 'PTAX3'
		                            IF THISFORM.omessage.CONFIRM('The purchaser has not been set to withhold Other Tax 3 for this well. ' + ;
		                                      'Do you want to set this option in the well record for this well?')
		                                SELECT wells
		                                REPLACE lsev3P WITH .T.
		                            ELSE
		                                llTaxError = .T.
		                            ENDIF
		                        CASE NOT wells.lsev4P AND .cboType.VALUE = 'PTAX4'
		                            IF THISFORM.omessage.CONFIRM('The purchaser has not been set to withhold Other Tax 4 for this well. ' + ;
		                                      'Do you want to set this option in the well record for this well?')
		                                SELECT wells
		                                REPLACE lsev4P WITH .T.
		                            ELSE
		                                llTaxError = .T.
		                            ENDIF
		
		                    ENDCASE
		                ENDIF
		                IF llTaxError
		                    THISFORM.setnextcontrol(.cboType)
		                    llReturn = .F.
		                    EXIT
		                ENDIF
		            ENDIF
		           
		            lcidrctd = GetNextPK('CSRCTDET')
		            
		            m.cidrctd = lcidrctd
		
		            .New('CSRCTDET')
		            .cmdatamanager.REPLACE('CSRCTDET', 'cWellID', m.cWellID)
		            .cmdatamanager.REPLACE('CSRCTDET', 'cDesc', m.cWellName)
		            .cmdatamanager.REPLACE('CSRCTDET', 'nAmount', m.nAmount)
		            .cmdatamanager.REPLACE('CSRCTDET', 'cAcctListID', lcRevClear)
		            .cmdatamanager.REPLACE('CSRCTDET', 'cBegRange', m.cBegRange)
		            .cmdatamanager.REPLACE('CSRCTDET', 'cEndRange', m.cEndRange)
		            .cmdatamanager.REPLACE('CSRCTDET', 'cOwnerID', m.cOwnerID)
		            .cmdatamanager.REPLACE('CSRCTDET', 'nUnits', m.nUnits)
		            .cmdatamanager.REPLACE('CSRCTDET', 'nPrice', m.nPrice)
		            .cmdatamanager.REPLACE('CSRCTDET', 'nDaysOn', m.nDaysOn)
		            .cmdatamanager.REPLACE('CSRCTDET', 'cType', m.cType)
		            .cmdatamanager.REPLACE('CSRCTDET', 'cDeck', m.cDeck)
		            .cmdatamanager.REPLACE('CSRCTDET', 'lWellRcpt', .T.)
		            .cmdatamanager.REPLACE('CSRCTDET', 'cProdPeriod', m.cProdPeriod)
		            .cmdatamanager.REPLACE('CSRCTDET', 'cProdYear', m.cProdYear)
		            .cmdatamanager.REPLACE('CSRCTDET', 'lGrossUnits', m.lGrossUnits)
		 
		        ENDWITH
		
		        .txtcWellName.VALUE = ' '
		        .txtnTotal.VALUE    = 0
		        .txtcWellID.VALUE   = ' '
		        .txtnUnits.VALUE    = 0
		        .txtcOwnerID.VALUE  = ''
		        .lstwellrcpt.REQUERY()
		        .lstwellrcpt.REFRESH()
		        .lstwellrcpt.LISTITEMID = .lstwellrcpt.LISTCOUNT
		        .txtcWellID.SETFOCUS()
		        THISFORM.lInvestment = .F.
		        THISFORM.lNewDetail  = .F.
		        THISFORM.CalcTot()
		        THISFORM.setstate()
		        THISFORM.refreshinfo()
		        .REFRESH()
		        THISFORM.cboType.VALID()
		    ENDWITH
		CATCH TO loError
		    llReturn = .F.
		    DO errorlog WITH 'AddDetail', loError.LINENO, 'CSReceipt', loError.ERRORNO, loError.MESSAGE, '', loError
		    MESSAGEBOX('Unable to process the receipt at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		          'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		RETURN llReturn
		
		
	ENDPROC

	PROCEDURE calcdays		&& Calculates the dayson from the period ranges entered.
		LOCAL ldDate1, ldDate2, lnDays, lcYear, lcRange1, lcRange2
		
		*
		*  Get the current year to use to build the date.
		*
		lcYear   = STR(YEAR(DATE()),4)
		
		*
		*  Put the period ranges in variables to make them easier
		*  to work with.
		*
		lcRange1 = thisform.txtcBegRange.value
		lcRange2 = thisform.txtcEndRange.value
		
		*
		*  Check to see if we're supposed to calculate the dayson
		*
		SELECT options
		GO TOP
		glCalcDays = lCalcDays
		
		*
		*  Calculate the number of days between the ranges
		*
		IF glCalcDays AND lcRange1 <> '  /  ' AND lcRange2 <> '  /  '
		   IF LEFT(lcRange1,2) > LEFT(lcRange2,2)
		      lcYear1 = STR(VAL(lcYear)+1,4)
		   ELSE
		      IF LEFT(lcRange1,2) = LEFT(lcRange2,2)
		         IF RIGHT(lcRange1,2) > RIGHT(lcRange2,2)
		            lcYear1 = STR(VAL(lcYear)+1,4)
		         ELSE   
		            lcYear1 = lcYear
		         ENDIF
		      ELSE      
		         lcYear1 = lcYear
		      ENDIF   
		   ENDIF      
		   ldDate1 = CTOD(lcRange1+'/'+lcYear)
		   ldDate2 = CTOD(lcRange2+'/'+lcYear1)
		   lnDays  = ldDate2 - ldDate1 + 1
		   RETURN (lnDays)
		ELSE
		   RETURN (0)
		ENDIF      
		
	ENDPROC

	PROCEDURE calcext		&& Calculates the detail extension total
	ENDPROC

	PROCEDURE calctot		&& Calculates the Invoice Totals
		*
		*  Calculates the invoice totals
		*
		LOCAL lnSelect, lnRecno, lnTotal, lcBatch, lcFilter
		
		IF thisform.lNewDetail
		   RETURN
		ENDIF   
		
		lcBatch = CSRCTHDR.cbatch
		
		lnSelect = SELECT()
		SELECT CSRCTDET
		lnRecNo = RECNO()
		
		lnTotal = 0
		SCAN FOR cBatch == lcBatch
		   lnTotal = lnTotal + nAmount
		ENDSCAN   
		
		SELECT csrctdet
		IF lnRecNo <= RECC()
		   GOTO lnRecNo
		ELSE
		   GO TOP    
		ENDIF   
		
		SELECT (lnSelect)
		
		IF csrcthdr.nCashAmt <> lnTotal
		   THIS.cmdatamanager.REPLACE('CSRCThdr', 'nCashAmt', lnTotal)
		   THISFORM.txtnCashamt.REFRESH()
		ENDIF
		
		
		
	ENDPROC

	PROCEDURE checkhist		&& Returns .T. if the given production period is closed.
		LPARA tcYear, tcPeriod, tcGroup
		LOCAL llHist, llSepClose, lcDeleted
		*
		*  Checks to see if the given period is closed
		*  Returns .T. if the period is closed
		*
		
		lcDeleted = SET('DELETED')
		SET DELETED ON
		
		llHist = .F.
		
		IF tcGroup = '**'
		   SELECT sysctl
		   LOCATE FOR cyear+cperiod = tcYear+tcPeriod AND lDisbMan AND cTypeClose = 'R'
		   IF FOUND()
		      llHist = .T.
		   ENDIF   
		ELSE
		   SELECT sysctl
		   SET ORDER TO yrprdgrp
		   IF SEEK(tcYear+tcPeriod+tcGroup+'YR')
		      llHist = .T.
		   ENDIF
		ENDIF
		
		SET DELETED &lcDeleted
		
		RETURN (llHist)
		
	ENDPROC

	PROCEDURE daysonsave		&& Saves the number of days the well was on.
		LPARA tcWellID, tcYear, tcPeriod, tnDaysOn
		
		
	ENDPROC

	PROCEDURE Destroy
		thisform.grouptran.unload()
		DODEFAULT()
	ENDPROC

	PROCEDURE dmincome		&& Either places the income entries in the INCSUSP or INCOME tables depending on whether the production year and period were specified.
		LOCAL lcBatch, llReturn
		
		llReturn = .T.
		
		lcBatch = csrcthdr.cbatch
		
		* Post the revenue from this receipt to the income and expense tables
		llReturn = PostIncome(lcBatch)
		
		IF !llReturn
		    MESSAGEBOX('Unable to process the receipt at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		         'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDIF 
	ENDPROC

	PROCEDURE editdetail		&& Edit a detail line
		LOCAL lcBatch, llReturn, loError
		llReturn = .T.
		
		TRY
		    WITH THISFORM
		        lcBatch = csrcthdr.cbatch
		        swselect('income')
		        LOCATE FOR cbatch == lcBatch
		        IF FOUND()
		            IF income.nrunno <> 0
		                .oMessage.Warning('Revenue from this receipt has already been allocated and processed during run: ' + income.crunyear + '/' + PADL(ALLT(STR(income.nrunno)), 3, '0')  + ;
		                      ' This receipt cannot be changed.')
		                llReturn = .F.
		                THISFORM.cmdatamanager.revertall('*')
		                EXIT
		            ENDIF
		        ENDIF
		        
		        IF thisform.IsCheckCleared()
		           MESSAGEBOX('This receipt has been cleared in the QB check register. It cannot be changed.',16,'Production Receipts')
		           llReturn = .f.
		           EXIT 
		         ENDIF 
		         
		        .txtcWellID.VALUE = csrctdet.cWellID
		        .cboType.VALUE    = csrctdet.cType
		        .txtnUnits.VALUE  = csrctdet.nunits
		        .txtnPrice.VALUE  = csrctdet.nPrice
		        
		        
		        IF 'TAX' $ csrctdet.cType
		            .txtnTotal.VALUE      = csrctdet.nAmount * -1
		        ELSE
		           swselect('revcat')
		           LOCATE FOR crevtype = csrctdet.ctype
		           IF NOT FOUND()
		             .txtnTotal.VALUE      = csrctdet.nAmount * -1
		           else   
		             .txtnTotal.VALUE      = csrctdet.nAmount
		           ENDIF   
		        ENDIF
		        
		        .txtcOwnerID.SET('value', csrctdet.cownerid)
		        .txtcProdYear.VALUE   = csrctdet.cProdYear
		        .txtcProdPeriod.VALUE = csrctdet.cProdPeriod
		        .txtnDaysOn.VALUE     = csrctdet.nDaysOn
		        .txtcBegRange.VALUE   = csrctdet.cbegrange
		        .txtcEndRange.VALUE   = csrctdet.cendrange
		        .chkGross.VALUE       = csrctdet.lgrossunits
		        
		        m.cDeck               = csrctdet.cDeck
		        IF EMPTY(m.cDeck)
		           m.cDeck = THISFORM.oWellInv.DOIDeckNameLookup(csrctdet.cProdYear, csrctdet.cProdPeriod, csrctdet.cWellID)
		        ENDIF   
		        .cbodeck.requery(m.cDeck)
		
		*  Fill in the well name
		        SELECT wells
		        SET ORDER TO cWellID
		        IF SEEK(csrctdet.cWellID)
		            .txtcWellName.VALUE  = wells.cwellname
		            THISFORM.lInvestment = IIF(wells.cwellstat = 'V', .T., .F.)
		
		            IF THISFORM.lInvestment
		                THISFORM.cmdlookowner.VISIBLE = .F.
		                THISFORM.txtcOwnerID.VISIBLE  = .F.
		                THISFORM.lblIntType.VISIBLE   = .T.
		                THISFORM.cboIntType.VISIBLE   = .T.
		            ELSE
		                THISFORM.lblIntType.VISIBLE   = .F.
		                THISFORM.cboIntType.VISIBLE   = .F.
		                THISFORM.cmdlookowner.VISIBLE = .T.
		                THISFORM.txtcOwnerID.VISIBLE  = .T.
		            ENDIF
		
		        ENDIF
		
		        .txtcWellID.SETFOCUS()
		
		        SELECT csrctdet
		        THISFORM.cmdatamanager.deleterecord('Csrctdet')
		        .lstwellrcpt.REQUERY()
		        .lstwellrcpt.REFRESH()
		        THISFORM.calctot()
		        THISFORM.REFRESH()
		    ENDWITH
		CATCH TO loError
		    llReturn = .F.
		    DO errorlog WITH 'EditDetail', loError.LINENO, 'CSReceipt', loError.ERRORNO, loError.MESSAGE, '', loError
		    MESSAGEBOX('Unable to process the receipt at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		          'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		RETURN llReturn
		
	ENDPROC

	PROCEDURE flushcontrolbuffer
		* Trying to avoid error 2012 Cannot call SetFocus from within a When, Valid, RangeHigh or RangeLow event. 
		* When this form is open and shutdown is called.
		IF NOT m.goApp.lShutDown = .T.
		   DODEFAULT()
		ELSE
		   m.goApp.lShutDown = .F.
		ENDIF 
	ENDPROC

	PROCEDURE getaddr
		LOCAL lnSelect
		
		lnSelect = SELECT()
		SELECT vendor
		
		LOCATE FOR vendor.cvendorid == THISFORM.txtcVendorID.VALUE
		IF FOUND()
			WITH THISFORM
				.txtcVendName.VALUE = vendor.cvendname
				.txtcAddr1.VALUE = vendor.cAddress1
				IF vendor.cAddress2 = ""
					.txtcAddr2.VALUE = vendor.cCity + " " + vendor.cState + " " + vendor.cZip
					.txtcCityStZip.VALUE = ""
				ELSE
					.txtcAddr2.VALUE = vendor.cAddress2
					.txtcCityStZip.VALUE = vendor.cCity + ", " + vendor.cState + " " + vendor.cZip
				ENDIF
			ENDWITH
		ELSE
			WITH THISFORM
				.cboCashAcct.VALUE = ""
				.txtcVendName.VALUE = ""
				.txtcAddr1.VALUE = ""
				.txtcCityStZip.VALUE = ""
				.txtcAddr2.VALUE = ""
			ENDWITH
		
		ENDIF
		
		SELECT (lnSelect)
		
		WITH THISFORM
			.txtcVendName.REFRESH()
			.txtcAddr1.REFRESH()
			.txtcAddr2.REFRESH()
			.txtcCityStZip.REFRESH()
		ENDWITH
		
		
	ENDPROC

	PROCEDURE getprice		&& Gets the price for the item based upon the price code passed.
	ENDPROC

	PROCEDURE Init
		IF DODEFAULT()
		   SELE glopt
		   GO TOP
		   THIS.lQBPost = NOT lDMNoPost
		   
		   IF m.goApp.lDocuments
		      thisform.AddObject('oFileDialog','sffiledialog')
		      thisform.cmddocument.Visible = .t.
		   ELSE
		      thisform.cmddocument.Visible = .f.
		   ENDIF 
		
		   *
		   *  Call distproc to create the (invtmp) and (wellwork) cursors
		   *
		   SELECT wells
		   SET ORDER TO cwellid
		   GO TOP
		   lcWellID1 = cwellid
		   GO BOTT
		   lcWellID2 = cwellid
		
		   THISFORM.oDist = CREATEOBJECT('distproc',lcWellID1, lcWellID2, ;
		      '01', '1980', '00', 'W', DATE(), .F.,0)
		      
		   THISFORM.oWellInv = CREATEOBJECT('swbizobj_wellinv')   
		ENDIF
		
	ENDPROC

	PROCEDURE ischeckcleared		&& Queries QB to see if this receipt has been marked cleared in QB.
		LOCAL llCleared, lcListID, lcCashAcct, ldDate, lnAmount, lcCheckNo
		
		llCleared  = .F.
		lcListID   = ''
		lcCashAcct = ''
		lcCheckNo  = ''
		ldDate = {01/01/1980}
		lnAmount   = 0
		
		TRY
		    IF NOT m.goapp.oqb.lqbactive
		       llreturn = .f.
		       EXIT
		    ENDIF 
		    
			SWSELECT('revsrc')
			SET ORDER TO cRevKey
			IF SEEK(csrcthdr.cid)
				IF EMPTY(revsrc.cListID)
					THIS.cErrorMsg = 'The receipt cannot be saved.  The purchaser file needs to be synchronized with QuickBooks.'
					llreturn = .F.
					EXIT
				ENDIF
				lcListID = revsrc.cListID
			ELSE
				SWSELECT('vendor')
				SET ORDER TO cVendorID
				IF SEEK(csrcthdr.cid)
					lcListID = vendor.cListID
				ENDIF
			ENDIF
			
			lcCashAcct = csrcthdr.cCashAcct
			lnAmount   = csrcthdr.nCashAmt
			lcCheckNo  = csrcthdr.cCheckNo
			ldDate     = csrcthdr.ddate
			
			IF NOT EMPTY(ldDate) AND lnAmount # 0 AND NOT EMPTY(lcCashAcct)
				llCleared = m.goApp.oQB.IsCheckCleared(ldDate, lnAmount, lcCheckNo, lcListID, lcCashAcct)
			ENDIF 	
			
		CATCH TO loError
		
		ENDTRY
		
		RETURN llCleared
		
	ENDPROC

	PROCEDURE KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		
		TRY
		  DODEFAULT(nKeyCode, nShiftAltCtrl)
		CATCH TO loError
		   llReturn = .F.
		   IF loerror.errorno # 5
		      DO errorlog WITH 'KeyPress', loError.LineNo, 'Csreceiptd', loError.ERRORNO, loError.MESSAGE, '', loError
		   ENDIF    
		ENDTRY
		
		
	ENDPROC

	PROCEDURE list
		LPARAMETERS cworkarea
		LOCAL lcList, lnRecNo
		PRIV llOK
		
		llOK = .T.
		lcList = 'cid,cname,ddate/date,ncashamt'
		
		SELECT csrcthdr
		lnRecNo = RECNO()
		
		DO FORM ..\custom\picklist WITH 'Csrcthdr', lcList, csrcthdr.cid, 4
		
		IF llOK
		   SELECT csrcthdr
		ELSE
		   SELECT csrcthdr
		   GOTO lnRecNo   
		ENDIF   
		
		THISFORM.cmdatamanager.setrecordposition('Csrcthdr')
		thisform.refresh()
	ENDPROC

	PROCEDURE Load
		IF DODEFAULT()
		      *  Get the cursor of QuickBooks Accounts
		      m.goApp.oQB.QBAccounts('',.F.,.T.,THISFORM.DATASESSIONID)
		ENDIF
		
	ENDPROC

	PROCEDURE lookcoa
	ENDPROC

	PROCEDURE refreshinfo
		SELECT csrctdet
		IF NOT EOF()
		   THISFORM.lblPeriodRange.VISIBLE  = .T.
		   THISFORM.txtcBegRange1.VISIBLE   = .T.
		   THISFORM.txtcEndRange1.VISIBLE   = .T.
		   THISFORM.lblDash.VISIBLE         = .T.
		   THISFORM.lblDaysOn.VISIBLE       = .T.
		   THISFORM.txtnDaysOn1.VISIBLE     = .T.
		   THISFORM.txtcOwnerID1.VISIBLE    = .T.
		   THISFORM.lblAllocate.VISIBLE     = .T.
		   THISFORM.lblInfo.VISIBLE         = .T.
		ELSE
		   THISFORM.lblPeriodRange.VISIBLE  = .F.
		   THISFORM.txtcBegRange1.VISIBLE   = .F.
		   THISFORM.txtcEndRange1.VISIBLE   = .F.
		   THISFORM.lblDash.VISIBLE         = .F.
		   THISFORM.lblDaysOn.VISIBLE       = .F.
		   THISFORM.txtnDaysOn1.VISIBLE     = .F.
		   THISFORM.txtcOwnerID1.VISIBLE    = .F.
		   THISFORM.lblAllocate.VISIBLE     = .F.
		   THISFORM.lblInfo.VISIBLE         = .F.
		ENDIF
		
		THISFORM.txtcBegRange1.REFRESH()
		THISFORM.txtcEndRange1.REFRESH()
		THISFORM.txtnDaysOn1.REFRESH()
		THISFORM.txtcOwnerID1.REFRESH()
		
	ENDPROC

	PROCEDURE Release
		ON KEY LABEL F2
		DODEFAULT()
		
	ENDPROC

	PROCEDURE save
		LPARAMETERS cworkarealist
		
		THISFORM.txtcName.SETFOCUS()
		THISFORM.SetNextControl(THISFORM.txtcName)
		THISFORM.ActivateNextControl()
		
		DODEFAULT(cworkarealist)
		
	ENDPROC

	PROCEDURE setstate		&& Resets the form state for non bound controls so that the save button still works.
		this.lChanged = .T.
		m.goStateManager.RefreshAll('Form Edit')
	ENDPROC

	PROCEDURE valterms		&& Validate Terms and Set Due Date and Disc Date based on the Terms
	ENDPROC

	PROCEDURE viewdocument
		LPARAMETERS tcBatch
		
		LOCAL lnReturn, llReturn, lcOutputFile
		LOCAL liKey, lcPath
		
		
		swselect('documents')
		SET ORDER TO cFK
		IF SEEK(tcBatch)
		   lcOutputFile = cPath
		
		   llReturn = .T.
		
		   IF NOT FILE(lcOutputFile)
		      llReturn = .F.
		   ENDIF
		
		   viewdocument(lcOutputFile)
		
		ENDIF
	ENDPROC

	PROCEDURE cboDeck.Init
		IF DODEFAULT()
		   this.Requery()
		ENDIF    
	ENDPROC

	PROCEDURE cboDeck.Requery
		LPARAMETERS tcDeck, tcYear, tcPeriod
		
		IF DODEFAULT()
			THIS.Clear()
			this.Value = ''
			this.DisplayValue = ''
			IF VARTYPE(tcYear) # 'C'
			   tcYear = ''
			ENDIF 
			IF VARTYPE(tcPeriod) # 'C'
			   tcPeriod = ''
			ENDIF 
		
		    IF VARTYPE(tcDeck) # 'C'
		       tcDeck = ''
		    ENDIF 
		       
		    lcWellID = thisform.txtcwellID.Value 
		    IF EMPTY(lcWellID)
		       RETURN
		    ENDIF 
		    
		    lnIndex = 1
		    
		    * Get a list of decks for the given well
			SELECT cdeck, ldefault, effstartyr, effstartprd FROM doidecks ;
				INTO CURSOR temp ;
				WHERE cwellid = lcwellid ;
				ORDER BY cdeck DESC  ;
				GROUP BY cdeck
		
		    * Add the decks to the dropdown
			lnx = 1
			IF _TALLY > 0
				SELECT temp
				SCAN
					SCATTER MEMVAR
					IF EMPTY(m.cdeck)
					   m.cdeck = '(blank)'
					ENDIF 
					THIS.ADDLISTITEM(m.cdeck,lnx,1)
					THIS.ADDLISTITEM(m.cdeck,lnx,2)
					
					* If we passed the deck or production period
					* set the deck to the given deck or the one
					* that has an effective date for the production period.
					IF NOT EMPTY(tcDeck)
						IF m.cDeck = tcDeck
					  	 	lnIndex = lnx
						ENDIF 
					ELSE
					   IF tcYear = m.effstartyr AND tcPeriod = m.effstartprd
					      lnIndex = lnX
					   ENDIF 
					ENDIF 	
					lnx = lnx + 1 
				ENDSCAN
			    this.ListItemId = lnIndex
			ELSE 		
			    this.ListItemId = 1
			ENDIF
		ENDIF
		
	ENDPROC

	PROCEDURE cboDeck.Valid
		RETURN .t.
	ENDPROC

	PROCEDURE cboInttype.GotFocus
		ON KEY LABEL TAB _SCREEN.ACTIVEFORM.adddetail()
		ON KEY LABEL ENTER _SCREEN.ACTIVEFORM.adddetail()
		
	ENDPROC

	PROCEDURE cboInttype.LostFocus
		ON KEY LABEL TAB
		ON KEY LABEL ENTER
	ENDPROC

	PROCEDURE cboType.Init
		LOCAL llAllocExp, lnCount
		
		
		swselect('revcat')
		lnCount = 5
		
		THIS.ADDLISTITEM('     ', 1, 1)
		THIS.ADDLISTITEM('              ', 1, 2)
		
		this.AddListItem('BBL  ', 2, 1)
		this.AddListItem('Oil Revenue', 2, 2)
		
		this.AddListItem('MCF  ', 3, 1)
		this.AddListItem('Gas Revenue', 3, 2)
		
		this.AddListItem('OTH  ', 4, 1)
		this.AddListItem('Other Revenue', 4, 2)
		
		SCAN FOR NOT INLIST(crevtype,'BBL','MCF','OTH')
		   SCATTER MEMVAR
		   THIS.ADDLISTITEM(revcat.crevtype, lnCount, 1)
		   THIS.ADDLISTITEM(revcat.crevdesc, lnCount, 2)
		   lnCount = lnCount + 1
		ENDSCAN
		
		swselect('afeopt')
		GO TOP
		llAllocExp = lAllocExp
		
		IF llAllocExp
		   SELE ccatcode, ccateg FROM expcat where ccatcode # 'PLUG' INTO ARRAY lacats ORDER BY ccatcode
		ELSE
		   SELE ccatcode, ccateg FROM expcat WHERE NOT lafetype and ccatcode # 'PLUG' INTO ARRAY lacats ORDER BY ccatcode
		ENDIF
		
		IF _TALLY > 0
		   FOR lnx = 1 TO _TALLY
		      THIS.ADDLISTITEM(lacats[lnx, 1] + ' ', lnx + lnCount, 1)
		      THIS.ADDLISTITEM(lacats[lnx, 2], lnx + lnCount, 2)
		   ENDFOR
		ENDIF
		
		THIS.LISTITEMID = 1
		DODEFAULT()
	ENDPROC

	PROCEDURE cboType.InteractiveChange
		IF DODEFAULT()
		   lcExact = SET('exact')
		   SET EXACT OFF
		   IF THIS.SELSTART > 0
		      IF ( LASTKEY() > 31 AND LASTKEY() < 128 ) OR ( LASTKEY() = 7 )
		         WITH THIS
		            IF LASTKEY() = 127
		               .SELSTART = .SELSTART -1
		            ENDIF
		
		            lnselstart = .SELSTART
		            lcsofar = LEFT(.DISPLAYVALUE, lnselstart)
		
		            FOR lnrow = 1 TO .LISTCOUNT
		               IF UPPER(.LIST[lnrow,1]) = UPPER(lcsofar)
		                  .LISTINDEX = lnrow
		                  EXIT
		               ENDIF
		            ENDFOR
		
		            .SELSTART = lnselstart
		            lnsellength = LEN(ALLTRIM(.DISPLAYVALUE)) - lnselstart
		            IF lnsellength > 0
		               .SELLENGTH = lnsellength
		            ENDIF
		         ENDWITH
		      ENDIF
		   ENDIF
		ENDIF
		
	ENDPROC

	PROCEDURE cboType.LostFocus
		*  If a tax is chosen, check to see if the well is marked as exempt from any of the tax types.
		*  If it is, don't let them enter it.
		IF 'TAX' $ THIS.VALUE
		   SELECT wells
		   LOCATE FOR cWellID == THIS.PARENT.txtcwellID.VALUE
		   IF FOUND()
		      IF lTaxExempt1 OR lTaxExempt2 OR lTaxExempt3 OR lTaxExempt4
		         IF ('1' $ THIS.VALUE AND lTaxExempt1) OR ('2' $ THIS.VALUE AND lTaxExempt2);
		               OR ('3' $ THIS.VALUE AND lTaxExempt3) OR ('4' $ THIS.VALUE AND lTaxExempt4)
		            THISFORM.oMessage.Warning('Well ' + ALLTRIM(THIS.PARENT.txtcwellID.VALUE) + ' is marked as exempt from this type of tax, so it cannot be entered.')
		            THIS.PARENT.txtcwellID.SET('value','')
		            THIS.PARENT.txtcwellName.SET('value','')
		            THISFORM.setnextcontrol(THIS.PARENT.txtcwellID)
		         ENDIF
		      ENDIF
		   ENDIF
		ENDIF
		
		DODEFAULT()
		
	ENDPROC

	PROCEDURE cboType.Valid
		IF DODEFAULT()
		   swselect('revcat')
		   LOCATE FOR crevtype = ALLTRIM(this.value)
		   IF NOT FOUND()
		      swselect('expcat')
		      SET ORDER TO ccatcode
		      IF NOT SEEK(LEFT(THIS.VALUE,4))
		         WAIT WIND NOWAIT 'An invalid income type was entered. Please correct'
		         THISFORM.setnextcontrol(THIS)
		         RETURN 0
		      ELSE
		         THISFORM.txtnunits.SET('value',0)
		         THISFORM.txtnprice.SET('value',0)
		         IF FILE('datafiles\specrcpt.cfg')
		            THISFORM.txtnunits.ENABLED = .T.
		            THISFORM.txtnprice.ENABLED = .T.
		         ELSE
		            THISFORM.txtnunits.ENABLED = .F.
		            THISFORM.txtnprice.ENABLED = .F.
		         ENDIF
		         THISFORM.chkGross.VISIBLE = .F.
		      ENDIF
		   ELSE
		      IF 'TAX' $ this.Value 
		         THISFORM.txtnunits.SET('value',0)
		         THISFORM.txtnprice.SET('value',0)
		                           
		         IF FILE('datafiles\specrcpt.cfg')
		            THISFORM.txtnunits.ENABLED = .T.
		            THISFORM.txtnprice.ENABLED = .T.
		         ELSE
		            THISFORM.txtnunits.ENABLED = .F.
		            THISFORM.txtnprice.ENABLED = .F.
		         ENDIF
		      ELSE
		         THISFORM.txtnunits.ENABLED = .T.
		         THISFORM.txtnprice.ENABLED = .T.
		         THISFORM.chkGross.VISIBLE = .T.
		      ENDIF
		   ENDIF
		ENDIF
		
	ENDPROC

	PROCEDURE chkNOQBPOST.Init
		IF DODEFAULT()
		   this.Value = not m.goapp.oqb.lqbactive
		ENDIF 
	ENDPROC

	PROCEDURE chkNOQBPOST.Valid
		IF DODEFAULT()
		   THISFORM.lQBPost = NOT this.value
		ENDIF   
	ENDPROC

	PROCEDURE chkNOQBPOST.When
		RETURN m.goapp.oqb.lQBActive
	ENDPROC

	PROCEDURE cmdatamanager.afterchange
		LPARAMETERS cworkarea,cfield
		
		IF UPPER(m.cWorkarea) == 'CSRCTDET'
		   * Recalculate the invoice totals
		   IF NOT thisform.cmdatamanager.isnew('csrctdet')
		      thisform.calctot()
		   ENDIF   
		ENDIF   
		
		RETURN (DODEFAULT(m.cworkArea, m.cField))
	ENDPROC

	PROCEDURE cmdatamanager.afterdelete
		LPARAMETERS cworkarea
		
			DO CASE
				CASE m.cworkarea = 'Csrcthdr'
					SELECT csrcthdr
				CASE m.cworkarea = 'Csrctdet'
					SELECT csrctdet
					* Recalculate the invoice totals
					THISFORM.calctot()
					THISFORM.REFRESH()
			ENDCASE
			
			SELECT csrcthdr
			TABLEUPDATE(.T.,.T.,'Csrcthdr')
			SELECT csrctdet
			TABLEUPDATE(.T.,.T.,'Csrctdet')
		
		
	ENDPROC

	PROCEDURE cmdatamanager.afternav
		LPARAMETERS cworkarea
		
		IF UPPER(m.cworkarea) == 'CSRCTHDR'
		   swselect('csrcthdr')
		   thisform.lstWellRcpt.requery()
		   thisform.lstWellRcpt.refresh()
		   
		   IF m.goApp.lPartnershipMod AND NOT EMPTY(csrcthdr.cdmbatch)
		      thisform.lblpartnershipImport.Visible = .t.
		   ELSE
		      thisform.lblpartnershipImport.Visible = .f.
		   ENDIF 
		   
		   IF thisform.IsCheckCleared()
		      thisform.lblclEARED.Visible = .t.
		   ELSE
		      thisform.lblclEARED.Visible = .f.
		   ENDIF 
		   
		   THISFORM.lQBPost = NOT csrcthdr.lNoQBPost
		ENDIF   
	ENDPROC

	PROCEDURE cmdatamanager.afternew
		LPARAMETERS cworkarea
		
		LOCAL lcidrctd, lcBatch
		
		DO CASE
		   CASE UPPER(m.cworkarea) = 'CSRCTHDR'    && Cash Header
		      lcBatch = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Batch')
		      SET DELETED OFF
		      SELECT csrcthdr1
		      SET ORDER TO cbatch
		      DO WHILE SEEK(lcBatch)
		         lcBatch = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Batch')
		      ENDDO
		      SET DELETED ON
		      SELECT csrcthdr
		
		      REPLACE cbatch  WITH lcBatch
		      REPLACE lnoqbpost WITH NOT m.goapp.oqb.lQBActive
		      WITH THISFORM
		         .txtnDaysOn.VALUE = 0
		         .txtnUnits.VALUE  = 0
		         .txtnPrice.VALUE  = 0
		         .txtnTotal.VALUE  = 0
		      ENDWITH
		
		      IF EMPTY(THISFORM.coldacctno)
		         THISFORM.cboCashAcct.LISTITEMID = 1
		      ELSE
		         THISFORM.cboCashAcct.SET('value',THISFORM.coldacctno)
		         thisform.cboCashAcct.Refresh()
		      ENDIF
		      select csrcthdr
		      REPL ccashacct WITH THISFORM.cboCashAcct.VALUE
		      THISFORM.cboCashAcct.REFRESH()
		      THISFORM.setnextcontrol(THISFORM.txtcName)
		      SELE csrcthdr
		      thisform.lstWellRcpt.Requery()
		      thisform.lstWellRcpt.Refresh()
		      thisform.refresh()
		
		   CASE UPPER(m.cworkarea) = 'CSRCTDET'    && Cash Detail
		      lcidrctd = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Cash Receipt Detail')
		      SET DELETED OFF
		      SELECT csrctdet1
		      SET ORDER TO cidpurd
		      DO WHILE SEEK(lcidrctd)
		         lcidrctd = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Cash Receipt Detail')
		      ENDDO
		      SET DELETED ON
		      SELECT csrcthdr
		      lcBatch = csrcthdr.cbatch
		      SELECT csrctdet
		      REPLACE csrctdet.cidrctd WITH lcidrctd,  ;
		              csrctdet.lWellRcpt    WITH .T., ;
		              csrctdet.cbatch       WITH lcBatch
		ENDCASE
		
		RETURN (DODEFAULT(m.cworkarea))
		
	ENDPROC

	PROCEDURE cmdatamanager.beforedelete
		LPARAMETERS cworkarea
		LOCAL lcBatch, llReturn, llQBPost
		
		llReturn = .T.
		
		*  Check to see if the fiscal period is closed
		IF m.cworkarea = 'Csrcthdr'
		
		   IF thisform.IsCheckCleared()
		      MESSAGEBOX('This receipt has been cleared in the QB check register. It cannot be deleted.',16,'Production Receipts')
		      RETURN .f.
		   ENDIF 
		
		    lcBatch  = csrcthdr.cbatch
		    llQBPost = !csrcthdr.lnoqbpost
		    llReturn = DelReceipt(lcBatch, llQBPost)
		    TABLEUPDATE(.t.,.t.,'Csrcthdr')
		
		ENDIF
		
		RETURN llReturn
	ENDPROC

	PROCEDURE cmdatamanager.beforenew
		LPARAMETERS cworkarea
		
		IF m.cworkarea == 'Csrcthdr'
		   THISFORM.coldacctno = csrcthdr.ccashacct
		ENDIF
		
	ENDPROC

	PROCEDURE cmdatamanager.beforeupdate
		LPARA cworkarealist
		LOCAL lcAPAcct, lcAcct, lcAcctListID, lcBatch, lcClearAcct, lcExpClear, lcFilter, lcListID
		LOCAL lcMemoExtra, lcMessage, lcSelect, lcidchec, lcref, lcreq, lcxml, llDelete, llInvestment
		LOCAL llResult, llReturn, lnRecNo, loAddResp, loDebit, loDelResp, loEntry, loNewCheck, loRcptAdd
		LOCAL loRcptDel, loRequest, loresp, loresponse
		LOCAL m.cAcctListID, m.ctxnid, m.nAmount, llJVPosting
		
		llInvestment = .F.
		
		IF m.goapp.lPartnershipMod
		   swselect('progopt')
		   GO TOP
		   llJVPosting = progopt.lJVPosting
		ELSE
		   llJVPosting = .F.
		ENDIF
		
		IF THISFORM.IsCheckCleared()
		   MESSAGEBOX('This receipt has been cleared in the QB check register. It cannot be changed.',16,'Production Receipts')
		   RETURN .F.
		ENDIF
		
		IF NOT THISFORM.lChanged
		   RETURN .F.
		ENDIF
		
		*  Check to see if any income from this receipt is in a period that has been closed.
		SELECT income
		SCAN FOR cbatch == csrcthdr.cbatch
		   IF income.nrunno <> 0
		      THISFORM.oMessage.Warning('Revenue from this receipt has already been allocated and processed ' + ;
		         'during run: ' + income.crunyear + '/' + PADL(ALLT(STR(income.nrunno)), 3, '0')  + ;
		         ' This receipt cannot be changed.')
		      THISFORM.cmdatamanager.revertall('*')
		      RETURN .F.
		   ENDIF
		ENDSCAN
		
		IF llJVPosting
		   llReturn = m.goapp.oQB.PostReceiptJV(csrcthdr.cbatch)
		ELSE
		   llReturn = m.goapp.oQB.PostReceipt(csrcthdr.cbatch)
		ENDIF
		IF llReturn
		   llReturn = PostIncome(csrcthdr.cbatch)
		ELSE
		   IF NOT EMPTY(m.goapp.oQB.cerrormsg)
		      MESSAGEBOX(m.goapp.oQB.cerrormsg,16,THISFORM.CAPTION)
		   ENDIF
		ENDIF
		
		IF llReturn
		   TABLEUPDATE(.T.,.T.,'csrcthdr')
		   TABLEUPDATE(.T.,.T.,'csrctdet')
		   TABLEUPDATE(.T.,.T.,'income')
		   TABLEUPDATE(.T.,.T.,'incsusp')
		   TABLEUPDATE(.T.,.T.,'expense')
		   TABLEUPDATE(.T.,.T.,'expsusp')
		ENDIF
		RETURN llReturn
		
		
	ENDPROC

	PROCEDURE cmdatamanager.Error
		LPARAMETERS nerror,cmethod,nline
		
		if between(m.nerror,1426,1429)
		   aerror(aerrinfo)
		   messagebox(aerrinfo[3],0,'QuickBooks Error')
		else
		   dodefault(nerror,cmethod,nline)
		endif   
		      
	ENDPROC

	PROCEDURE cmdatamanager.new
		LPARAMETERS cworkarea
		
		IF UPPER(m.cworkarea) == 'CSRCTHDR'    && Cash Header
		      WITH THISFORM
		         .txtcName.VALUE = ""
		      ENDWITH
		      
		ENDIF
		
		RETURN (DODEFAULT(m.cworkarea))
		
		
		
	ENDPROC

	PROCEDURE cmdDocument.Click
		LOCAL llNewDoc
		LOCAL llReturn
		*:Global cDocLink, cfk, cpath
		
		llNewDoc = .t.
		TRY
		   swSELECT('documents')
		   SET ORDER TO cFK
		   m.cFK      = 'CS' + csrcthdr.cbatch
		   IF SEEK(m.cFK)
		      IF MESSAGEBOX('View the document? Choosing No will allow you to attach a new document.', 36, 'Attached Document') = 6
		         THISFORM.viewdocument(m.cFK)
		         llNewDoc = .f.
		      ENDIF
		   ENDIF 
		   IF llNewDoc
		      LOCAL lnx
		      THISFORM.oFileDialog.FileName = ''
		      llReturn                      = THISFORM.oFileDialog.openfile()
		      IF llReturn
		         m.cDocLink = 'CS'
		         m.cpath    = UPPER(THISFORM.oFileDialog.aFiles[1])
		         swSELECT('documents')
		         LOCATE FOR cFK == m.cFK
		         IF NOT FOUND()
		            INSERT INTO documents FROM MEMVAR
		         ELSE
		            REPLACE cpath WITH m.cpath
		         ENDIF
		         THISFORM.setchanged(.T., 'Documents')
		         m.gostatemanager.refreshall('Form')
		      ENDIF
		   ENDIF
		CATCH TO loError
		   MESSAGEBOX('Error: ' + loError.MESSAGE, 48, 'View Document',2)
		ENDTRY
	ENDPROC

	PROCEDURE cmdLookID.Click
		LOCAL lcList
		PRIV llOK
		
		llOK = .T.
		lcList = 'cname, ctype'
		
		DO FORM ..\custom\picklist WITH 'custvend', lcList, thisform.txtcName.value, 2
		
		IF llOK
		   thisform.cmdatamanager.Replace('Csrcthdr','cId', custvend.cid)
		   thisform.cmdatamanager.Replace('Csrcthdr','cName',custvend.cname)
		   thisform.txtcName.refresh()
		ENDIF   
		
		thisform.setnextcontrol(thisform.txtcName)
		
		DODEFAULT()   
	ENDPROC

	PROCEDURE cmdLookOwner.Click
		LOCAL lcList
		PRIV llOK
		
		llOK = .T.
		
		lcList = 'cOwnerID\Owner ID,csortfield\Owner Name'
		
		swclose('tempown')
		swclose('tempown1')
		
		IF NOT EMPTY(THISFORM.txtcwellid.VALUE)
		   SET SAFETY OFF
		   SELECT cOwnerID, cSortField FROM investor ;
		      WHERE cOwnerID IN (SELECT cOwnerID FROM wellinv WHERE cWellID = THISFORM.txtcwellid.VALUE) ;
		      INTO CURSOR tempown READWRITE  ;
		      ORDER BY cOwnerID
		
		   IF _TALLY > 0
		      SELECT tempown
		      INDEX ON cOwnerID TAG cOwnerID
		      INDEX ON cSortField TAG cSortField
		
		      DO FORM ..\CUSTOM\Picklist WITH 'tempown', lcList, THISFORM.txtcownerid.VALUE, 2, .T., .t.
		
		      IF llOK
		         THISFORM.txtcownerid.VALUE = tempown.cOwnerID
		         THISFORM.txtcownerid.REFRESH()
		      ENDIF
		
		      THISFORM.setnextcontrol(THIS.PARENT.txtcownerid)
		   ENDIF
		ENDIF
		
	ENDPROC

	PROCEDURE cmdLookOwner.When
		RETURN MDOWN()
	ENDPROC

	PROCEDURE cmdLookWell.Click
		LOCAL lcList
		PRIV llOK
		
		llOK = .T.
		lcList = 'cwellid,cwellname,cgroup,cwellstat'
		
		DO FORM ..\CUSTOM\picklist WITH 'Wells', lcList, THISFORM.txtcwellid.VALUE, 4
		
		IF llOK
		   THISFORM.txtcwellid.VALUE = wells.cwellid
		   THISFORM.txtcwellid.REFRESH()
		   THISFORM.txtcWellName.VALUE = wells.cwellname
		   THISFORM.txtcWellName.REFRESH()
		   THISFORM.lInvestment = IIF(wells.cwellstat='V',.T.,.F.)
		   IF THISFORM.lInvestment
		      THISFORM.cmdlookowner.VISIBLE = .F.
		      THISFORM.txtcownerid.VISIBLE  = .F.
		      THISFORM.lblIntType.VISIBLE = .T.
		      THISFORM.cboIntType.VISIBLE = .T.
		   ELSE
		      THISFORM.lblIntType.VISIBLE = .F.
		      THISFORM.cboIntType.VISIBLE = .F.
		      THISFORM.cmdlookowner.VISIBLE = .T.
		      THISFORM.txtcownerid.VISIBLE  = .T.
		   ENDIF
		
		ENDIF
		
		THISFORM.setnextcontrol(THISFORM.txtcwellid)
		
	ENDPROC

	PROCEDURE lstWellRcpt.Click
		dodefault()
		
		thisform.refreshinfo()
	ENDPROC

	PROCEDURE lstWellRcpt.DblClick
		thisform.editdetail()
		
		select csrctdet
		go top
		this.refresh()
		thisform.refreshinfo()
	ENDPROC

	PROCEDURE txtcBegRange1.When
		return .f.
	ENDPROC

	PROCEDURE txtCendrange.LostFocus
		*
		*  Only calculate the dayson if the dayson field is zero.
		*
		IF EMPTY(THIS.PARENT.txtnDaysOn.VALUE) AND isdigit(left(THIS.PARENT.txtcbegrange.VALUE,1))
		   THIS.PARENT.txtnDaysOn.VALUE = THISFORM.calcdays()
		   THIS.PARENT.txtnDaysOn.REFRESH()
		ELSE
		   IF isdigit(left(THIS.PARENT.txtcbegrange.VALUE,1))
		      lnDays = THISFORM.calcdays()
		      IF lnDays <> THIS.PARENT.txtnDaysOn.VALUE
		         THIS.PARENT.txtnDaysOn.VALUE = lnDays
		         THIS.PARENT.txtnDaysOn.REFRESH()
		      ENDIF
		   ENDIF
		ENDIF
		
	ENDPROC

	PROCEDURE txtcEndRange1.When
		return .f.
	ENDPROC

	PROCEDURE txtcName.GotFocus
		ON KEY LABEL F2 _screen.activeform.cmdLookID.Click()
		DODEFAULT()
	ENDPROC

	PROCEDURE txtcName.InteractiveChange
		IF DODEFAULT()
		   thisform.cmdatamanager.replace('Csrcthdr','cid',custvend.cid)
		ENDIF 
	ENDPROC

	PROCEDURE txtcName.LostFocus
		ON KEY LABEL F2 *
		DODEFAULT()
	ENDPROC

	PROCEDURE txtcName.Valid
		IF DODEFAULT()
		   lcListID = ''
		   IF NOT EMPTY(THIS.VALUE)
		      SELE custvend
		      LOCATE FOR ALLT(cname) = ALLT(THIS.VALUE)
		      IF FOUND()
		         IF custvend.cid <> csrcthdr.cid
		            IF custvend.ctype = 'Vendor'
		               swselect('vendor')
		               LOCATE FOR cvendorid = csrcthdr.cid
		               IF FOUND()
		                  lcListID = cListID
		               ENDIF
		            ELSE
		               SELECT revsrc
		               SET ORDER TO cRevKey
		               IF SEEK(csrcthdr.cid)
		                  lcListID = cListID
		               ENDIF
		            ENDIF
		            IF NOT EMPTY(THIS.VALUE) AND EMPTY(ALLTRIM(lcListID)) AND m.goapp.lQBActive AND NOT THISFORM.chkNOQBPOST.VALUE
		               THISFORM.omessage.warning('This purchaser/vendor needs to be synchronized with QuickBooks.')
		            ENDIF
		            THISFORM.cmdatamanager.REPLACE('Csrcthdr','cId', custvend.cid)
		         ENDIF
		      ENDIF
		   ENDIF
		ENDIF
		
	ENDPROC

	PROCEDURE txtcOwnerID.GotFocus
		ON KEY LABEL F2 _SCREEN.ACTIVEFORM.cmdLookOwner.CLICK()
		*ON KEY LABEL TAB _SCREEN.ACTIVEFORM.adddetail()
		*ON KEY LABEL ENTER _SCREEN.ACTIVEFORM.adddetail()
		
		DODEFAULT()
		
	ENDPROC

	PROCEDURE txtcOwnerID.LostFocus
		ON KEY LABEL F2 *
		*ON KEY LABEL TAB 
		*ON KEY LABEL ENTER 
		
		IF (LASTKEY() = 13 OR LASTKEY() = 9) AND not mDown()  &&  Tab or enter, but not a mouseclick
		   thisform.adddetail()
		ENDIF   
		
	ENDPROC

	PROCEDURE txtcOwnerID1.When
		return .f.
	ENDPROC

	PROCEDURE txtcProdPeriod.Valid
		IF NOT EMPTY(THIS.VALUE)
		   THIS.VALUE = PADL(ALLTRIM(THIS.VALUE),2,'0')
		   IF NOT BETWEEN(THIS.VALUE,'01','12')
		      THISFORM.omessage.warning('Please enter a valid production period. The period must be between 01 and 12')
		      RETURN 0
		   ENDIF
		   THIS.REFRESH()
		   if empty (thisform.txtcprodyear.value)
		      THISFORM.txtcProdYear.SET('value',ALLT(STR(YEAR(DATE()))))
		   endif   
		else
		   THISFORM.txtcProdYear.SET('value','')
		ENDIF
		
	ENDPROC

	PROCEDURE txtcProdYear.Valid
		DODEFAULT()
		IF EMPTY(THIS.VALUE) AND NOT EMPTY(THIS.PARENT.txtcProdPeriod.VALUE)
		   THIS.SET('value',ALLTRIM(STR(YEAR(DATE()))))
		ENDIF
		IF NOT EMPTY(THIS.VALUE)
		   IF NOT BETWEEN(THIS.VALUE,'1900','2999')   
		      THISFORM.oMessage.Warning('Please enter a valid 4 digit production year.')
		      RETURN 0
		   ENDIF   
		ENDIF
		
		lcDeck = thisform.oWellInv.DOIDeckNameLookup(this.Value, thisform.txtcprodperiod.value, thisform.txtcwellID.Value) 
		thisform.cboDeck.Requery(lcDeck)
		
		
		
	ENDPROC

	PROCEDURE txtcWellID.GotFocus
		ON KEY LABEL F2 _SCREEN.ACTIVEFORM.cmdLookWell.CLICK()
		DODEFAULT()
		
	ENDPROC

	PROCEDURE txtcWellID.LostFocus
		ON KEY LABEL F2 *
		DODEFAULT()
		
	ENDPROC

	PROCEDURE txtcWellID.Valid
		IF DODEFAULT()
		   SELECT wells
		   SET ORDER TO cwellid
		   IF SEEK(this.value)
		      IF NOT INLIST(wells.cwellstat,'A','V')
		         thisform.omessage.warning('This well is not an active well. Rev Dist and JIB will not process this well.')
		      ENDIF   
		      IF EMPTY(ALLT(wells.clistid)) AND m.goapp.lQBActive AND NOT thisform.chkNOQBPOST.Value 
		         thisform.omessage.warning('The wells file needs to be synchronized with QuickBooks before this well can be used.')
		         RETURN .F.
		      ENDIF   
		      THIS.PARENT.txtcWellName.SET('value',wells.cWellName)
		      THISFORM.lInvestment = IIF(wells.cwellstat='V',.T.,.F.)
		      thisform.cbodeck.Requery('',thisform.txtcprodYear.value,thisform.txtcprodPeriod.Value)
		   ENDIF
		ENDIF      
	ENDPROC

	PROCEDURE txtcwellname.InteractiveChange
		DODEFAULT()
		
		thisform.txtcwellid.set('VALUE',wells.cwellid)
	ENDPROC

	PROCEDURE txtdpostdate.LostFocus
		IF DODEFAULT()
		   thisform.txtdRecDate.set('value',this.Value)
		ENDIF 
	ENDPROC

	PROCEDURE txtdRecDate.Valid
		IF DODEFAULT()
		   IF this.Value <> csrcthdr.ddate
		      thisform.cmdatamanager.replace('Csrcthdr','Ddate',this.Value)
		   ENDIF
		ENDIF 
	ENDPROC

	PROCEDURE txtNcashamt.When
		RETURN .F.
	ENDPROC

	PROCEDURE txtnDaysOn.Valid
		IF DODEFAULT()
		   m.nDaysOn = this.Value
		   IF VARTYPE(m.nDayson) # 'N'
		      m.nDaysOn = INT(VAL(m.nDaysOn))
		   ENDIF 
		   IF NOT BETWEEN(m.nDaysOn,0,365)
		      MESSAGEBOX('An invalid value for Days On was entered. The value must be between 0 and 365.',16,'Invalid Days On Value')
		      RETURN 0
		   ENDIF
		ENDIF 
	ENDPROC

	PROCEDURE txtnDaysOn1.When
		return .f.
	ENDPROC

	PROCEDURE txtnPrice.Init
		this.value = 0
	ENDPROC

	PROCEDURE txtnPrice.LostFocus
		WITH thisform
		  .txtnTotal.value = ROUND(.txtnUnits.value * .txtnPrice.value,2)
		  .txtnTotal.refresh()
		ENDWITH  
	ENDPROC

	PROCEDURE txtnTotal.Init
		this.value = 0
	ENDPROC

	PROCEDURE txtnTotal.Valid
		DODEFAULT()
		LOCAL lcValue, lcUnits
		
		lnPrice    = THIS.PARENT.txtnPrice.VALUE
		lnUnits    = THIS.PARENT.txtnUnits.VALUE
		lnTotalInc = THIS.PARENT.txtnTotal.VALUE
		m.cwellid  = THIS.PARENT.txtcwellid.VALUE
		
		swselect('revcat')
		LOCATE FOR crevtype = ALLTRIM(this.Parent.cbotype.value)
		IF NOT FOUND()
		   swselect('expcat')
		   SET ORDER TO ccatcode
		   IF NOT SEEK(LEFT(THIS.PARENT.cbotype.VALUE,4))
		      WAIT WIND NOWAIT 'An invalid revenue type was entered. Please correct'
		      THISFORM.setnextcontrol(THIS.PARENT.cbotype)
		      RETURN 0
		   ENDIF
		   IF THIS.VALUE < 0
		      IF NOT THISFORM.omessage.CONFIRM("Expenses don't have to be entered as a negative. You are entering this as an expense credit. Is that what you want to do?")
		         THIS.VALUE = ABS(THIS.VALUE)
		      ENDIF
		   ENDIF
		ELSE
		   IF NOT 'TAX' $ THIS.PARENT.cbotype.VALUE AND NOT INLIST(ALLTRIM(this.Parent.cbotype.Value),'COMP','GATH')
		      IF lnPrice = 0
		         IF lnUnits > 0 AND lnTotalInc > 0
		            IF THIS.PARENT.chkGross.VALUE = .F.
		*!*	               IF THISFORM.omessage.CONFIRM('Should the price be calculated?')
		*!*	                  IF THIS.PARENT.chkGross.VALUE
		*!*	                     DO CASE
		*!*	                        CASE THIS.PARENT.cbotype.VALUE = 'BBL'
		*!*	                           lnUnits = THISFORM.odist.netrev(m.cwellid, lnUnits, 'O', .F.,.T.)
		*!*	                        CASE THIS.PARENT.cbotype.VALUE = 'MCF'
		*!*	                           lnUnits = THISFORM.odist.netrev(m.cwellid, lnUnits, 'G', .F.,.T.)
		*!*	                     ENDCASE
		*!*	                  ENDIF
		*!*	                  THIS.PARENT.txtnPrice.VALUE = ROUND(lnTotalInc/lnUnits,6)
		*!*	                  THIS.PARENT.txtnPrice.REFRESH()
		*!*	               ENDIF
		            ENDIF
		         ENDIF
		         THISFORM.setnextcontrol(THIS.PARENT.txtcProdPeriod)
		      ENDIF
		      IF lnUnits = 0
		         IF lnPrice > 0 AND lnTotalInc > 0
		            IF THIS.PARENT.chkGross.VALUE = .F.
		               IF THISFORM.omessage.CONFIRM('Should the units be calculated?')
		                  THIS.PARENT.txtnUnits.VALUE = ROUND(lnTotalInc/lnPrice,2)
		                  THIS.PARENT.txtnUnits.REFRESH()
		               ENDIF
		            ENDIF
		            THISFORM.setnextcontrol(THIS.PARENT.txtcProdPeriod)
		         ENDIF
		      ENDIF
		   ELSE
		      IF 'TAX' $ this.parent.cbotype.value AND THIS.VALUE < 0
		         IF NOT THISFORM.omessage.CONFIRM("Taxes don't have to be entered as a negative. You are entering this as a tax credit. Is that what you want to do?")
		            THIS.VALUE = ABS(THIS.VALUE)
		         ENDIF
		      ENDIF
		      IF INLIST(ALLTRIM(this.parent.cbotype.value),'COMP','GATH') AND this.value < 0
		         IF NOT THISFORM.omessage.CONFIRM("Compression/Gathering don't have to be entered as a negative. You are entering this as a credit. Is that what you want to do?")
		            THIS.VALUE = ABS(THIS.VALUE)
		         ENDIF
		      ENDIF
		   ENDIF
		ENDIF
		
	ENDPROC

	PROCEDURE txtnUnits.Init
		this.value = 0000000.00
	ENDPROC

	PROCEDURE txtnUnits.LostFocus
		WITH thisform
		  .txtnTotal.value = ROUND(.txtnUnits.value * .txtnPrice.value,2)
		  .txtnTotal.refresh()
		ENDWITH  
	ENDPROC

ENDDEFINE
