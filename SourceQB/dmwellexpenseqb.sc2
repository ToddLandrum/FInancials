*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="dmwellexpenseqb.scx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="2" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Cursor4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor6" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor11" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor12" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor14" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor7" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor16" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor17" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor18" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor8" UniqueID="" Timestamp="" />

	AutoOpenTables = .F.
	DataSource = .NULL.
	Height = 898
	Left = -3
	Name = "Dataenvironment"
	Top = 98
	Width = 1016

	ADD OBJECT 'Cursor1' AS cursor WITH ;
		Alias = "wellexp", ;
		BufferModeOverride = 5, ;
		CursorSource = "wellexp", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 96, ;
		Left = 8, ;
		Name = "Cursor1", ;
		NoDataOnLoad = .T., ;
		Top = 7, ;
		Width = 85
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor11' AS cursor WITH ;
		Alias = "glopt", ;
		CursorSource = "glopt", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 430, ;
		Name = "Cursor11", ;
		Top = 140, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor12' AS cursor WITH ;
		Alias = "sysctl", ;
		CursorSource = "sysctl", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 526, ;
		Name = "Cursor12", ;
		Top = 15, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor14' AS cursor WITH ;
		Alias = "options", ;
		CursorSource = "options", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 850, ;
		Name = "Cursor14", ;
		Top = 140, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor16' AS cursor WITH ;
		Alias = "wellinv", ;
		CursorSource = "wellinv", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 57, ;
		Name = "Cursor16", ;
		Top = 280, ;
		Width = 91
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor17' AS cursor WITH ;
		Alias = "expsusp", ;
		BufferModeOverride = 5, ;
		CursorSource = "expsusp", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 554, ;
		Name = "Cursor17", ;
		Top = 144, ;
		Width = 91
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor18' AS cursor WITH ;
		Alias = "expsusp1", ;
		BufferModeOverride = 5, ;
		CursorSource = "expsusp", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 232, ;
		Name = "Cursor18", ;
		Top = 10, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor2' AS cursor WITH ;
		Alias = "afehdr", ;
		CursorSource = "afehdr", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 395, ;
		Name = "Cursor2", ;
		Top = 303, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor3' AS cursor WITH ;
		Alias = "expcat", ;
		CursorSource = "expcat", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 349, ;
		Name = "Cursor3", ;
		Top = 13, ;
		Width = 91
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor4' AS cursor WITH ;
		Alias = "investor", ;
		CursorSource = "investor", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 120, ;
		Name = "Cursor4", ;
		Top = 142, ;
		Width = 91
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor5' AS cursor WITH ;
		Alias = "vendor", ;
		CursorSource = "vendor", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 11, ;
		Name = "Cursor5", ;
		Top = 143, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor6' AS cursor WITH ;
		Alias = "wells", ;
		CursorSource = "wells", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 710, ;
		Name = "Cursor6", ;
		Order = "cwellid", ;
		Top = 20, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor7' AS cursor WITH ;
		Alias = "apopt", ;
		CursorSource = "apopt", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 860, ;
		Name = "Cursor7", ;
		Top = 20, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor8' AS cursor WITH ;
		Alias = "exptxnid", ;
		CursorSource = "exptxnid", ;
		Database = ..\newdbc\appdata.dbc, ;
		Height = 90, ;
		Left = 119, ;
		Name = "Cursor8", ;
		Top = 7, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

ENDDEFINE

DEFINE CLASS formdmwellexpense AS frmdatamanagerformcustom OF "..\custom\cforms.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Shpshapecustom1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcOwnerID" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column1.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column1.txtcCategory" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column2.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column2.txtdExpDate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column3.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column3.txtcPayee" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column4.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column4.txtnAmount" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column5.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column5.txtcYear" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column6.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column6.txtcPeriod" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column7.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column7.Txtquickfill1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column8.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column8.txtClass" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column9.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column9.chknopostqb" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblClosed" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcWellName" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblWellid2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcWellID" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Swyear" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblGroup" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtTotalExp" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdLookWell" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbltextcustom17" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblDate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lblfieldlabelcustom1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblRunNo" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcRefID" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblRefid" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcCategory" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcatcode" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtnAmount" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Glmaint" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblAmount" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcNotes" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblMemo" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="spnBBL" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbltextcustom2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdLookVend" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcVendName" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdLookCat" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcVendorID" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Runcombo1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdOwner" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdDelDetail" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdEditDetail" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtafeno" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Swperiod" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboClass" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtdExpDate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chknopostqb" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom7" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboDeck" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdAFENo" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: adddetail		&& Add the detail information to the income table
		*m: addfixed		&& Adds fixed expenses to the period
		*m: calcdayson		&& Calculates the days on.
		*m: calctot		&& Calculates the total  income for the period.
		*m: calctotalinc		&& Calculates the total income based on the units and price entered.
		*m: checkclose		&& Checks to see if the period has been closed.
		*m: checkruns		&& Check for runs for the given well id.
		*m: deleteqb		&& Deletes the passed expense from QB
		*m: editdetail		&& Brings the current record in the grid up to the detail section in the form.
		*m: getexpenses
		*m: listwells
		*p: cwellsave		&& Saves wellid on entry to txtcwellid
		*p: lclosed
		*p: ldeldetail		&& .T. = deleting a detail entry
		*p: lfromedit
		*p: ljibwell
		*p: lqbpost
		*p: lvalidwell
		*p: nrunitemid		&& The itemid of runcombo on entry.
		*p: owellinv
	*</DefinedPropArrayMethod>

	Caption = "Well Expenses by Well (8/8ths)"
	clistexpression = wells.cwellid
	cnavworkarea = wells
	cworkarea = wellexp
	DoCreate = .T.
	Height = 433
	lnonewask = .T.
	lqbpost = .F.
	lrememberposition = .F.
	lremembersize = .F.
	Name = "formdmwellexpense"
	nrunitemid = 1		&& The itemid of runcombo on entry.
	owellinv = .NULL.
	Visible = .T.
	Width = 615
	_memberdata = <VFPData>
		<memberdata name="deleteqb" type="method" display="deleteQB"/>
		<memberdata name="owellinv" display="oWellInv"/>
		</VFPData>
	cmdatamanager.Name = "cmdatamanager"
	cmdatamanager.TabIndex = 1
	cmdatamanager.ZOrderSet = 0
	cmlookupmanager.Name = "cmlookupmanager"
	Mwresize1.lblHighLight.Name = "lblHighLight"
	Mwresize1.lblShading.Name = "lblShading"
	Mwresize1.Name = "Mwresize1"
	Mwresize1.TabIndex = 2

	ADD OBJECT 'cboClass' AS cbocomboboxcustom WITH ;
		ColumnCount = 2, ;
		Height = 20, ;
		Left = 348, ;
		Name = "cboClass", ;
		TabIndex = 26, ;
		Top = 135, ;
		Width = 40, ;
		ZOrderSet = 42
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="combobox" />

	ADD OBJECT 'cboDeck' AS cbocomboboxcustom WITH ;
		BoundColumn = 2, ;
		ControlSource = "", ;
		Height = 20, ;
		Left = 192, ;
		Name = "cboDeck", ;
		Style = 2, ;
		TabIndex = 25, ;
		Top = 135, ;
		ZOrderSet = 64
		*< END OBJECT: ClassLib="..\..\..\codeminenew\ampro_rv\custom\ccontrol.vcx" BaseClass="combobox" />

	ADD OBJECT 'chknopostqb' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Don't Post To QB", ;
		Left = 106, ;
		Name = "chknopostqb", ;
		TabIndex = 16, ;
		Top = 87, ;
		Value = .F., ;
		ZOrderSet = 45
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'cmdAFENo' AS cmdcommandbuttoncustom WITH ;
		Caption = "AFE No", ;
		FontBold = .T., ;
		Height = 20, ;
		Left = 254, ;
		Name = "cmdAFENo", ;
		TabIndex = 31, ;
		TabStop = .F., ;
		Top = 188, ;
		ZOrderSet = 47
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdDelDetail' AS cmdcommandbuttoncustom WITH ;
		Caption = "Delete Detail Line", ;
		Height = 22, ;
		Left = 32, ;
		Name = "cmdDelDetail", ;
		TabIndex = 41, ;
		Top = 409, ;
		Width = 96, ;
		ZOrderSet = 36
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdEditDetail' AS cmdcommandbuttoncustom WITH ;
		Caption = "Edit Detail Line", ;
		Height = 22, ;
		Left = 140, ;
		Name = "cmdEditDetail", ;
		TabIndex = 42, ;
		Top = 409, ;
		Width = 97, ;
		ZOrderSet = 37
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdLookCat' AS cmdcommandbuttoncustom WITH ;
		Caption = "Expense Code", ;
		Height = 23, ;
		Left = 7, ;
		Name = "cmdLookCat", ;
		TabIndex = 10, ;
		Top = 83, ;
		Width = 89, ;
		ZOrderSet = 32
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdLookVend' AS cmdcommandbuttoncustom WITH ;
		Caption = "Vendor", ;
		Height = 23, ;
		Left = 347, ;
		Name = "cmdLookVend", ;
		TabIndex = 11, ;
		Top = 83, ;
		Width = 46, ;
		ZOrderSet = 30
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdLookWell' AS cmdcommandbuttoncustom WITH ;
		Caption = " Well ID", ;
		Height = 23, ;
		Left = 18, ;
		Name = "cmdLookWell", ;
		TabIndex = 3, ;
		Top = 11, ;
		Width = 48, ;
		ZOrderSet = 14
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdOwner' AS cmdcommandbuttoncustom WITH ;
		Caption = "Allocate All To", ;
		Height = 20, ;
		Left = 446, ;
		Name = "cmdOwner", ;
		TabIndex = 35, ;
		Top = 188, ;
		ZOrderSet = 35
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'Glmaint' AS glmaint WITH ;
		Height = 24, ;
		Left = 540, ;
		Name = "Glmaint", ;
		Top = 12, ;
		Width = 36
		*< END OBJECT: ClassLib="..\custom\swgl.vcx" BaseClass="custom" />

	ADD OBJECT 'Grdgridcustom1' AS grdgridcustom WITH ;
		ColumnCount = 9, ;
		cworkarea = wellexp, ;
		Height = 172, ;
		lallownew = .F., ;
		lcolumnmemory = .F., ;
		Left = 2, ;
		LinkMaster = "", ;
		Name = "Grdgridcustom1", ;
		Panel = 1, ;
		RecordSource = "wellexp", ;
		RelationalExpr = "", ;
		TabIndex = 39, ;
		Top = 224, ;
		Width = 612, ;
		ZOrderSet = 4, ;
		Column1.ColumnOrder = 3, ;
		Column1.ControlSource = "wellexp.ccateg", ;
		Column1.FontName = "Courier New", ;
		Column1.FontSize = 8, ;
		Column1.Name = "Column1", ;
		Column1.Width = 136, ;
		Column2.ColumnOrder = 6, ;
		Column2.ControlSource = "wellexp.dexpdate", ;
		Column2.FontName = "Courier New", ;
		Column2.FontSize = 8, ;
		Column2.Name = "Column2", ;
		Column2.Width = 70, ;
		Column3.ColumnOrder = 7, ;
		Column3.ControlSource = "wellexp.cpayee", ;
		Column3.FontName = "Courier New", ;
		Column3.FontSize = 8, ;
		Column3.Name = "Column3", ;
		Column3.Width = 144, ;
		Column4.ColumnOrder = 8, ;
		Column4.ControlSource = "wellexp.namount", ;
		Column4.FontName = "Courier New", ;
		Column4.FontSize = 8, ;
		Column4.Name = "Column4", ;
		Column4.Width = 76, ;
		Column5.ColumnOrder = 1, ;
		Column5.ControlSource = "wellexp.cyear", ;
		Column5.FontSize = 8, ;
		Column5.Name = "Column5", ;
		Column5.Width = 36, ;
		Column6.ColumnOrder = 2, ;
		Column6.ControlSource = "wellexp.cperiod", ;
		Column6.FontSize = 8, ;
		Column6.Name = "Column6", ;
		Column6.Width = 33, ;
		Column7.ColumnOrder = 4, ;
		Column7.ControlSource = "wellexp.ccatcode", ;
		Column7.FontName = "Courier New", ;
		Column7.FontSize = 8, ;
		Column7.Name = "Column7", ;
		Column7.Width = 35, ;
		Column8.ColumnOrder = 5, ;
		Column8.ControlSource = "wellexp.cexpclass", ;
		Column8.FontSize = 8, ;
		Column8.Name = "Column8", ;
		Column8.Width = 23, ;
		Column9.ControlSource = "wellexp.lnopostqb", ;
		Column9.FontSize = 8, ;
		Column9.Name = "Column9", ;
		Column9.Sparse = .F., ;
		Column9.Width = 18
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="grid" />

	ADD OBJECT 'Grdgridcustom1.Column1.Header1' AS header WITH ;
		Caption = "Expense Description", ;
		FontSize = 8, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'Grdgridcustom1.Column1.txtcCategory' AS txtquickfill WITH ;
		clistexpression = ccateg, ;
		clistworkarea = expcat, ;
		ControlSource = "wellexp.ccateg", ;
		FontName = "Arial", ;
		lallowexceptions = .F., ;
		Left = 109, ;
		Name = "txtcCategory", ;
		Top = 23
		*< END OBJECT: ClassLib="..\custom\cgadget.vcx" BaseClass="textbox" />

	ADD OBJECT 'Grdgridcustom1.Column2.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "Date", ;
		FontSize = 8, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'Grdgridcustom1.Column2.txtdExpDate' AS txttextboxcustom WITH ;
		ControlSource = "wellexp.dexpdate", ;
		FontName = "Arial", ;
		FontSize = 8, ;
		InputMask = "99/99/9999", ;
		Left = 50, ;
		Name = "txtdExpDate", ;
		Top = 31
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'Grdgridcustom1.Column3.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "Vendor Name", ;
		FontSize = 8, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'Grdgridcustom1.Column3.txtcPayee' AS txtquickfill WITH ;
		clistexpression = cvendname, ;
		clistworkarea = vendor, ;
		ControlSource = "wellexp.cpayee", ;
		FontName = "Arial", ;
		lallowexceptions = .T., ;
		Left = 90, ;
		Name = "txtcPayee", ;
		Top = 23
		*< END OBJECT: ClassLib="..\custom\cgadget.vcx" BaseClass="textbox" />

	ADD OBJECT 'Grdgridcustom1.Column4.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "Total", ;
		FontName = "Arial", ;
		FontSize = 8, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'Grdgridcustom1.Column4.txtnAmount' AS txttextboxcustom WITH ;
		ControlSource = "wellexp.namount", ;
		FontName = "Arial", ;
		FontSize = 8, ;
		Left = 54, ;
		Name = "txtnAmount", ;
		Top = 31
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'Grdgridcustom1.Column5.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "Year", ;
		FontSize = 8, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'Grdgridcustom1.Column5.txtcYear' AS txttextboxcustom WITH ;
		ControlSource = "wellexp.cyear", ;
		FontName = "Arial", ;
		Left = 13, ;
		Name = "txtcYear", ;
		Top = 23
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'Grdgridcustom1.Column6.Header1' AS header WITH ;
		Caption = "Period", ;
		FontSize = 8, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'Grdgridcustom1.Column6.txtcPeriod' AS txttextboxcustom WITH ;
		ControlSource = "wellexp.cperiod", ;
		FontName = "Arial", ;
		Left = 12, ;
		Name = "txtcPeriod", ;
		Top = 35
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'Grdgridcustom1.Column7.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "Code", ;
		FontSize = 8, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'Grdgridcustom1.Column7.Txtquickfill1' AS txtquickfill WITH ;
		clistexpression = expcat.ccatcode, ;
		clistworkarea = expcat, ;
		ControlSource = "wellexp.ccatcode", ;
		Left = 21, ;
		Name = "Txtquickfill1", ;
		Top = 23
		*< END OBJECT: ClassLib="..\custom\cgadget.vcx" BaseClass="textbox" />

	ADD OBJECT 'Grdgridcustom1.Column8.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "Cls", ;
		FontSize = 8, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'Grdgridcustom1.Column8.txtClass' AS txttextboxcustom WITH ;
		ControlSource = "wellexp.cexpclass", ;
		FontName = "Arial", ;
		FontSize = 8, ;
		InputMask = "!", ;
		Left = 8, ;
		Name = "txtClass", ;
		Top = 23
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'Grdgridcustom1.Column9.chknopostqb' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "", ;
		Left = 2, ;
		Name = "chknopostqb", ;
		Top = 23
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'Grdgridcustom1.Column9.Header1' AS header WITH ;
		Caption = "NP", ;
		FontSize = 8, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'lblAmount' AS lblfieldlabelcustom WITH ;
		Caption = "Total", ;
		Height = 16, ;
		Left = 566, ;
		Name = "lblAmount", ;
		TabIndex = 15, ;
		Top = 92, ;
		Width = 25, ;
		ZOrderSet = 25
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblClosed' AS lbllabelcustom WITH ;
		Caption = "RUN CLOSED", ;
		FontSize = 20, ;
		ForeColor = 255,0,0, ;
		Left = 207, ;
		Name = "lblClosed", ;
		TabIndex = 40, ;
		Top = 284, ;
		Visible = .F., ;
		ZOrderSet = 5
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblDate' AS lblfieldlabelcustom WITH ;
		Caption = "AcctDate", ;
		Height = 16, ;
		Left = 262, ;
		Name = "lblDate", ;
		TabIndex = 14, ;
		Top = 92, ;
		Width = 47, ;
		ZOrderSet = 16
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lblfieldlabelcustom1' AS lblfieldlabelcustom WITH ;
		Caption = "Code", ;
		Height = 16, ;
		Left = 216, ;
		Name = "Lblfieldlabelcustom1", ;
		TabIndex = 13, ;
		Top = 92, ;
		Width = 27, ;
		ZOrderSet = 17
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblGroup' AS lbllabelcustom WITH ;
		Caption = " ", ;
		Left = 492, ;
		Name = "lblGroup", ;
		TabIndex = 6, ;
		Top = 13, ;
		ZOrderSet = 12
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom1' AS lbllabelcustom WITH ;
		Caption = "Prod Period", ;
		Left = 11, ;
		Name = "Lbllabelcustom1", ;
		TabIndex = 29, ;
		Top = 137, ;
		ZOrderSet = 8
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom2' AS lbllabelcustom WITH ;
		Caption = "/", ;
		Left = 95, ;
		Name = "Lbllabelcustom2", ;
		TabIndex = 33, ;
		Top = 137, ;
		ZOrderSet = 39
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom5' AS lbllabelcustom WITH ;
		Caption = "Class", ;
		FontBold = .F., ;
		Left = 315, ;
		Name = "Lbllabelcustom5", ;
		TabIndex = 45, ;
		Top = 137, ;
		ZOrderSet = 41
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom7' AS lbllabelcustom WITH ;
		Caption = "Deck:", ;
		Left = 156, ;
		Name = "Lbllabelcustom7", ;
		TabIndex = 23, ;
		Top = 137, ;
		ZOrderSet = 63
		*< END OBJECT: ClassLib="..\..\..\codeminenew\ampro_rv\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblMemo' AS lblfieldlabelcustom WITH ;
		Caption = "Notes:", ;
		Height = 16, ;
		Left = 11, ;
		Name = "lblMemo", ;
		TabIndex = 37, ;
		Top = 162, ;
		Width = 33, ;
		ZOrderSet = 27
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblRefid' AS lblfieldlabelcustom WITH ;
		Caption = "Ref ID", ;
		Height = 16, ;
		Left = 11, ;
		Name = "lblRefid", ;
		TabIndex = 36, ;
		Top = 190, ;
		Width = 31, ;
		ZOrderSet = 20
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblRunNo' AS lbllabelcustom WITH ;
		Caption = "Run No", ;
		Left = 22, ;
		Name = "lblRunNo", ;
		TabIndex = 9, ;
		Top = 45, ;
		ZOrderSet = 18
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbltextcustom17' AS lbltextcustom WITH ;
		Caption = "Total Expenses This Period:", ;
		Left = 359, ;
		Name = "Lbltextcustom17", ;
		TabIndex = 44, ;
		Top = 411, ;
		ZOrderSet = 15
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbltextcustom2' AS lbltextcustom WITH ;
		AutoSize = .T., ;
		Caption = "BBL", ;
		Left = 521, ;
		Name = "Lbltextcustom2", ;
		TabIndex = 34, ;
		Top = 162, ;
		ZOrderSet = 29
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblWellid2' AS lblfieldlabelcustom WITH ;
		Caption = "Well Name:", ;
		FontSize = 8, ;
		Height = 16, ;
		Left = 160, ;
		Name = "lblWellid2", ;
		TabIndex = 7, ;
		Top = 15, ;
		Width = 55, ;
		ZOrderSet = 7
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Runcombo1' AS runcombo WITH ;
		ColumnWidths = "230,0,0", ;
		cshowwhat = B, ;
		Height = 20, ;
		HelpContextID = 100, ;
		Left = 71, ;
		lnewrunboth = .T., ;
		Name = "Runcombo1", ;
		TabIndex = 8, ;
		Top = 43, ;
		Width = 263, ;
		ZOrderSet = 34
		*< END OBJECT: ClassLib="..\custom\swcontrol.vcx" BaseClass="combobox" />

	ADD OBJECT 'Shpshapecustom1' AS shpshapecustom WITH ;
		BackColor = 255,255,128, ;
		Height = 144, ;
		Left = 3, ;
		Name = "Shpshapecustom1", ;
		Top = 72, ;
		Width = 609, ;
		ZOrderSet = 1
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="shape" />

	ADD OBJECT 'spnBBL' AS spnspinnercustom WITH ;
		Enabled = .F., ;
		Height = 20, ;
		Left = 551, ;
		lenabled = .F., ;
		Name = "spnBBL", ;
		SelectOnEntry = .T., ;
		TabIndex = 28, ;
		Top = 160, ;
		Width = 51, ;
		ZOrderSet = 28
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="spinner" />

	ADD OBJECT 'Swperiod' AS swperiod WITH ;
		Left = 70, ;
		Name = "Swperiod", ;
		TabIndex = 22, ;
		Top = 135, ;
		ZOrderSet = 40
		*< END OBJECT: ClassLib="..\custom\swcontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'Swyear' AS swyear WITH ;
		BackColor = 255,255,255, ;
		Left = 103, ;
		Name = "Swyear", ;
		TabIndex = 24, ;
		Top = 135, ;
		ZOrderSet = 10
		*< END OBJECT: ClassLib="..\custom\swcontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtafeno' AS txtquickfill WITH ;
		clistexpression = afehdr.cafeno, ;
		clistworkarea = afehdr, ;
		Height = 20, ;
		Left = 333, ;
		MaxLength = 10, ;
		Name = "txtafeno", ;
		TabIndex = 32, ;
		Top = 188, ;
		Width = 106, ;
		ZOrderSet = 35
		*< END OBJECT: ClassLib="..\custom\cgadget.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcatcode' AS txtquickfill WITH ;
		clistexpression = ccatcode, ;
		clistworkarea = expcat, ;
		Height = 20, ;
		Left = 208, ;
		Name = "txtcatcode", ;
		TabIndex = 18, ;
		Top = 110, ;
		Width = 41, ;
		ZOrderSet = 22
		*< END OBJECT: ClassLib="..\custom\cgadget.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcCategory' AS txtquickfill WITH ;
		clistexpression = ccateg, ;
		clistworkarea = expcat, ;
		Height = 20, ;
		Left = 7, ;
		Name = "txtcCategory", ;
		TabIndex = 17, ;
		Top = 110, ;
		Width = 197, ;
		ZOrderSet = 21
		*< END OBJECT: ClassLib="..\custom\cgadget.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcNotes' AS txttextboxcustom WITH ;
		ControlSource = "", ;
		Height = 20, ;
		Left = 70, ;
		MaxLength = 40, ;
		Name = "txtcNotes", ;
		TabIndex = 27, ;
		Top = 160, ;
		Width = 446, ;
		ZOrderSet = 26
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcOwnerID' AS txtquickfill WITH ;
		clistexpression = investor.cownerid, ;
		clistworkarea = investor, ;
		ControlSource = "", ;
		Format = "!", ;
		Height = 20, ;
		Left = 528, ;
		MaxLength = 10, ;
		Name = "txtcOwnerID", ;
		SelectOnEntry = .T., ;
		TabIndex = 38, ;
		TabStop = .T., ;
		Top = 188, ;
		Width = 76, ;
		ZOrderSet = 2
		*< END OBJECT: ClassLib="..\custom\cgadget.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcRefID' AS txttextboxcustom WITH ;
		ControlSource = "", ;
		Height = 20, ;
		Left = 70, ;
		MaxLength = 20, ;
		Name = "txtcRefID", ;
		SelectOnEntry = .T., ;
		TabIndex = 30, ;
		Top = 188, ;
		Width = 134, ;
		ZOrderSet = 19
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcVendName' AS txtquickfill WITH ;
		clistexpression = cvendname, ;
		clistworkarea = vendor, ;
		Height = 20, ;
		lallowexceptions = .T., ;
		Left = 347, ;
		Name = "txtcVendName", ;
		TabIndex = 20, ;
		Top = 110, ;
		Width = 158, ;
		ZOrderSet = 31
		*< END OBJECT: ClassLib="..\custom\cgadget.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcVendorID' AS txttextboxcustom WITH ;
		BackColor = 212,208,200, ;
		Height = 20, ;
		Left = 419, ;
		Name = "txtcVendorID", ;
		TabIndex = 12, ;
		Top = 84, ;
		Width = 70, ;
		ZOrderSet = 33
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcWellID' AS txtquickfill WITH ;
		clistexpression = cWellID, ;
		clistworkarea = wells, ;
		ControlSource = "wells.cwellid", ;
		Format = "!", ;
		Height = 20, ;
		Left = 70, ;
		lreadonly = .F., ;
		lrequired = .T., ;
		MaxLength = 10, ;
		Name = "txtcWellID", ;
		TabIndex = 4, ;
		Top = 12, ;
		Width = 84, ;
		ZOrderSet = 9
		*< END OBJECT: ClassLib="..\custom\cgadget.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcWellName' AS txttextboxcustom WITH ;
		BackColor = 212,208,200, ;
		ControlSource = "wells.cwellname", ;
		FontSize = 8, ;
		Height = 20, ;
		Left = 222, ;
		MaxLength = 0, ;
		Name = "txtcWellName", ;
		TabIndex = 5, ;
		Top = 12, ;
		Width = 263, ;
		ZOrderSet = 6
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtdExpDate' AS dpk WITH ;
		ControlSource = "", ;
		Height = 20, ;
		Left = 251, ;
		Name = "txtdExpDate", ;
		TabIndex = 19, ;
		Top = 110, ;
		Visible = .T., ;
		Width = 75
		*< END OBJECT: ClassLib="..\custom\swdate.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtnAmount' AS txttextboxcustom WITH ;
		ControlSource = "", ;
		FontSize = 8, ;
		ForeColor = 0,0,0, ;
		Height = 20, ;
		InputMask = "999999999.99", ;
		Left = 507, ;
		MaxLength = 0, ;
		Name = "txtnAmount", ;
		SelectOnEntry = .T., ;
		TabIndex = 21, ;
		Top = 110, ;
		Width = 99, ;
		ZOrderSet = 23
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtTotalExp' AS txttextboxcustom WITH ;
		Height = 20, ;
		Left = 501, ;
		Name = "txtTotalExp", ;
		TabIndex = 43, ;
		Top = 409, ;
		Width = 91, ;
		ZOrderSet = 13
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />
	
	PROCEDURE adddetail		&& Add the detail information to the income table
		LOCAL m.cWellID, m.cYear, m.cPeriod, m.cSource, m.cRevKey, m.nUnits
		LOCAL m.nPrice, m.nTotalInc, m.cBegRange, m.cEndRange, m.cNotes
		LOCAL m.cOwnerID, m.nDaysOn
		LOCAL lAPTran, lClosed, lFixed, lOneMan, lcidexpe, llReturn, lnopostqb, loError
		LOCAL cAcctPrd, cAcctYear, cBatch, cCateg, cMemo, cOwnerID, cPaidByCk, cPayee, cPeriod, cPrdPaid
		LOCAL cRefID, cVendorID, cWellID, cYear, ccatcode, cexpclass, cidexph, dExpDate, nAmount
		LOCAL nSaltWater
		
		llReturn = .T.
		
		TRY
		*
		*  Check to see if period is closed
		*
		   IF THISFORM.lClosed
		      WAIT WIND NOWAIT 'This period and group are closed. No updates allowed.'
		      llReturn = .T.
		      EXIT
		   ENDIF
		
		* Don't allow an entry to be saved if the link to QB is not active and
		* they haven't specified Don't Post to QuickBooks
		   IF NOT m.goApp.lQBActive AND NOT THISFORM.chknoPostQB.VALUE
		      THISFORM.omessage.warning("The link to QuickBooks is not active. This entry cannot be added unless the DON'T POST TO QUICKBOOKS option is included.")
		      llReturn = .F.
		      EXIT
		   ENDIF
		
		   swselect('wells')
		   LOCATE FOR cWellID = THISFORM.txtcwellid.VALUE
		   IF FOUND() AND cwellstat = 'I'
		      WAIT WIND NOWAIT 'This well is not active. Expenses cannot be allocated to it.'
		      llReturn = .F.
		      EXIT
		   ENDIF
		
		* Make sure the expense category is valid
		   IF EMPTY(THISFORM.txtcatcode.VALUE)
		      THISFORM.omessage.warning('Please select a valid expense category for this expense.')
		      THISFORM.setnextcontrol(THISFORM.txtcCategory)
		      llReturn = .F.
		      EXIT
		   ENDIF
		
		* Validate vendor...Must have a valid vendor
		   IF EMPTY(THISFORM.txtcvendorID.VALUE)
		      THISFORM.omessage.warning('Please select a vendor for this expense.')
		      THISFORM.setnextcontrol(THISFORM.txtcvendName)
		      llReturn = .F.
		      EXIT
		   ELSE
		      SELECT vendor
		      LOCATE FOR cVendorID == THISFORM.txtcvendorID.VALUE
		      IF NOT FOUND()
		         THISFORM.omessage.warning('Please select a vendor for this expense.')
		         THISFORM.setnextcontrol(THISFORM.txtcvendName)
		         llReturn = .F.
		         EXIT
		      ENDIF
		   ENDIF
		
		* Make sure the expense class is valid
		   IF EMPTY(THISFORM.cboClass.VALUE)
		      SELECT expcat
		      LOCATE FOR ccatcode == THISFORM.txtcatcode.VALUE
		      IF FOUND()
		         THISFORM.cboClass.VALUE = expcat.cexpclass
		      ELSE
		         THISFORM.cboClass.VALUE = '0'
		      ENDIF
		   ENDIF
		
		   IF m.goApp.lAFEOpt AND NOT EMPTY(THISFORM.txtcOwnerID.VALUE)
		      swselect('expcat')
		*  If it's an AFE expense getting allocated all to one owner, warn them that the AFE reports by owner will be wrong
		      LOCATE FOR ccatcode == THISFORM.txtcatcode.VALUE AND lAFEType
		      IF FOUND()
		         THISFORM.omessage.warning('This expense code is marked as an AFE type code. Entering an AFE expense allocated all to one owner will cause AFE reports by owner to show incorrectly.')
		      ENDIF
		   ENDIF
		   
		   m.cWellID    = wells.cWellID
		   m.cPeriod    = THISFORM.swPeriod.VALUE
		   m.cYear      = THISFORM.swYear.VALUE
		
		   m.cDeck = thisform.cbodeck.Value    
		   IF EMPTY(m.cDeck)
		      m.cDeck      = thisform.oWellInv.DOIDeckNameLookup(m.cYear, m.cPeriod, m.cWellID)
		   ENDIF    
		
		*  Store the detail in memory variables that are the same names
		*  as the table fields
		
		   SELECT wellexp
		   m.cidexph    = ''
		   m.cCateg     = THISFORM.txtcCategory.VALUE
		   m.cVendorID  = THISFORM.txtcvendorID.VALUE
		   m.cPayee     = THISFORM.txtcvendName.VALUE
		   m.dExpDate   = THISFORM.txtdExpDate.VALUE
		   m.nAmount    = THISFORM.txtnAmount.VALUE
		   m.cRefID     = THISFORM.txtcRefID.VALUE
		   m.cMemo      = THISFORM.txtcNotes.VALUE
		   m.cOwnerID   = THISFORM.txtcOwnerID.VALUE
		   m.nSaltWater = THISFORM.spnBBL.VALUE
		   m.cYear      = THISFORM.swYear.VALUE
		   m.cPeriod    = THISFORM.swPeriod.VALUE
		   m.cAFENo     = thisform.txtafeno.Value 
		   m.cPaidByCk  = ''
		   m.cPrdPaid   = ''
		   m.ccatcode   = THISFORM.txtcatcode.VALUE
		   m.cexpclass  = THISFORM.cboClass.VALUE
		   m.lnopostqb  = THISFORM.chknoPostQB.VALUE
		
		   IF NOT EMPTY(m.cOwnerID)  &&  Change all one-man items to class 0
		      m.cexpclass = '0'
		   ENDIF
		
		   IF m.ccatcode = 'PLUG'
		      swselect('vendor')
		      SET ORDER TO cVendorID
		      IF SEEK(m.cVendorID) AND vendor.linteggl = .F.
		         MESSAGEBOX('Plugging exepenses must be entered with a vendor that is marked to post to the G/L.', 16, 'Wrong Vendor')
		         llReturn = .F.
		         EXIT
		      ENDIF
		
		      swselect('plugwell')
		      LOCATE FOR cWellID = m.cWellID
		      IF NOT FOUND()
		         MESSAGEBOX('The "PLUG" expense code is designated for the Plugging module. ' + ;
		            'A target must be setup on the Plugging Fund Well Targets window ' + ;
		            'for this well before you can use the PLUG expense code for the well.', 16, 'Missing Plugging Target')
		         llReturn = .F.
		         EXIT
		      ENDIF
		   ENDIF
		
		*  Get the fiscal year and period from the accounting date entered
		   m.cAcctPrd  = THISFORM.glmaint.getperiod(wellexp.dExpDate, .F.)
		   m.cAcctYear = THISFORM.glmaint.getperiod(wellexp.dExpDate, .T.)
		
		   STORE .F. TO m.lOneMan, m.lAPTran, m.lClosed, m.lFixed
		
		   THISFORM.cmdatamanager.new('Wellexp')
		   m.cBatch     = wellexp.cBatch
		
		   lcidexpe = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Expense')
		
		   SELECT expense
		   SET DELE OFF
		   SET ORDER TO cidexpe
		   DO WHILE SEEK(lcidexpe)
		      lcidexpe = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Expense')
		   ENDDO
		   SET DELE ON
		
		*  Plug in today's date for the accounting date if it is empty
		   IF EMPTY(wellexp.dExpDate)
		      THISFORM.cmdatamanager.REPLACE('wellexp', 'DExpdate', DATE())
		   ENDIF
		
		   THISFORM.cmdatamanager.REPLACE('wellexp', 'cwellid', m.cWellID)
		   THISFORM.cmdatamanager.REPLACE('wellexp', 'cvendorid', m.cVendorID)
		   THISFORM.cmdatamanager.REPLACE('wellexp', 'ccateg', m.cCateg)
		   THISFORM.cmdatamanager.REPLACE('wellexp', 'cpayee', m.cPayee)
		   THISFORM.cmdatamanager.REPLACE('wellexp', 'namount', m.nAmount)
		   THISFORM.cmdatamanager.REPLACE('wellexp', 'cexpclass', m.cexpclass)
		   THISFORM.cmdatamanager.REPLACE('wellexp', 'ccatcode', m.ccatcode)
		   THISFORM.cmdatamanager.REPLACE('wellexp', 'cownerid', m.cOwnerID)
		   THISFORM.cmdatamanager.REPLACE('wellexp', 'crefid', m.cRefID)
		   THISFORM.cmdatamanager.REPLACE('wellexp', 'cyear', m.cYear)
		   THISFORM.cmdatamanager.REPLACE('wellexp', 'cperiod', m.cPeriod)
		   THISFORM.cmdatamanager.REPLACE('wellexp', 'dexpdate', m.dExpDate)
		   THISFORM.cmdatamanager.REPLACE('wellexp', 'cidexpe', lcidexpe)
		   THISFORM.cmdatamanager.REPLACE('wellexp', 'nsaltwater', m.nSaltWater)
		   THISFORM.cmdatamanager.REPLACE('wellexp', 'cmemo', m.cMemo)
		   THISFORM.cmdatamanager.REPLACE('wellexp', 'lnopostqb', m.lnopostqb)
		   THISFORM.cmdatamanager.REPLACE('wellexp', 'cafeno', m.cafeno)
		
		   IF m.lnopostqb
		      MESSAGEBOX("This expense is marked not to post to QuickBooks."  + CHR(10) + CHR(10) + ;
		         "Nothing will be posted to QuickBooks when this     "  + CHR(10) + ;
		         "expense is saved."                                  + CHR(10) + CHR(10) + ;
		         "However, when the revenue/JIB run which processes this" + CHR(10) + ;
		         "expense is closed and then posted to QuickBooks,"   + CHR(10) + ;
		         "the clearing entries will still be made for this"   + CHR(10) + ;
		         "expense. This will cause more expenses to be cleared" + CHR(10) + ;
		         "than what was originally posted for the run."      + CHR(10) + ;
		         "You will need to make an adjustment in QuickBooks"  + CHR(10) + ;
		         "to the Expense Clearing account to correct this." + CHR(10) + CHR(10) + ;
		         "Please see the 'Don't post to QuickBooks' topic"    + CHR(10) + ;
		         "in the Help file for more information.", 48, "QuickBooks No Post Notice")
		   ENDIF
		
		   STORE '' TO thisform.txtcNotes.VALUE, thisform.txtcvendName.VALUE, thisform.txtcvendorID.VALUE, ;
		      thisform.txtcOwnerID.VALUE, thisform.txtcCategory.VALUE, thisform.txtcRefID.VALUE, thisform.txtafeno.value
		   thisform.txtnAmount.setvalue(0)
		   THISFORM.spnBBL.VALUE = 0
		
		   thisform.calctot()
		   THISFORM.setnextcontrol(THISFORM.grdgridcustom1.Column1.txtcCategory)
		   THISFORM.setnextcontrol(THISFORM.txtcCategory)
		   THISFORM.lChanged = .T.
		   m.goStateManager.RefreshAll('Form Edit')
		   THISFORM.REFRESH()
		CATCH TO loError
		   llReturn = .F.
		   DO errorlog WITH 'AddDetail', loError.LINENO, 'Well Exp by Well', loError.ERRORNO, loError.MESSAGE, '', loError
		   MESSAGEBOX('Unable to process the expenses at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		      'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		RETURN llReturn
		
		
	ENDPROC

	PROCEDURE addfixed		&& Adds fixed expenses to the period
	ENDPROC

	PROCEDURE calcdayson		&& Calculates the days on.
	ENDPROC

	PROCEDURE calctot		&& Calculates the total  income for the period.
		LOCAL lnTotal, lcidexph, lnRecNo, lcSelect
		LOCAL llReturn, loError
		
		llReturn = .T.
		
		TRY
		    lcSelect = SELECT()
		    lnTotal  = 0
		
		    SELECT wellexp
		    lnRecNo = RECNO()
		    SCAN
		        lnTotal = lnTotal + namount
		    ENDSCAN
		
		    IF lnRecNo <= RECCOUNT()
		        GOTO lnRecNo
		    ENDIF
		
		    THISFORM.txtTotalExp.VALUE = lnTotal
		    THISFORM.txtTotalExp.REFRESH()
		
		    SELECT (lcSelect)
		
		CATCH TO loError
		    llReturn = .F.
		    DO errorlog WITH 'CalcTot', loError.LINENO, 'Well Exp by Well', loError.ERRORNO, loError.MESSAGE, '', loError
		    MESSAGEBOX('Unable to process the expenses at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		          'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		RETURN llReturn
	ENDPROC

	PROCEDURE calctotalinc		&& Calculates the total income based on the units and price entered.
	ENDPROC

	PROCEDURE checkclose		&& Checks to see if the period has been closed.
		LOCAL lcYear, lcPeriod, lcGroup, lcAlias, llReturn
		
		WAIT CLEAR
		
		lnRunNo    = INT(VAL(THISFORM.RunCombo1.LISTITEM[THISFORM.RunCombo1.LISTITEMID,3]))
		
		IF lnrunno <> 0
		   RETURN .T.
		ELSE
		   RETURN .F.
		ENDIF
		      
		
	ENDPROC

	PROCEDURE checkruns		&& Check for runs for the given well id.
	ENDPROC

	PROCEDURE delete
		LPARAMETERS cWorkarea
		
		IF TYPE('m.cWorkarea') = 'L'
		   m.cWorkarea = 'Wellexp'
		ENDIF
		
		*  Keep it from deleting a well when clicking the delete button on the toolbar
		IF UPPER(m.cWorkarea) = 'WELLS'
		   m.cWorkArea = 'Wellexp'
		ENDIF
		
		*!*	IF NOT m.goapp.oQB.lQBActive
		*!*	   thisform.omessage.warning('Expenses cannot be deleted while the link to QuickBooks is not active.')
		*!*	   RETURN 
		*!*	ELSE
		   DODEFAULT(cWorkarea)
		*!*	ENDIF 
	ENDPROC

	PROCEDURE deleteqb		&& Deletes the passed expense from QB
		LPARAMETERS tcidexpe
		LOCAL loRequest, loExpDel, loResponse, loDelResp
		
		IF NOT m.goapp.oQB.lqbactive
		   RETURN .T.
		ENDIF
		
		*  Delete the transaction from QB
		loRequest = m.goapp.oQB.oQBRequest
		
		* set the on error attribute for the request
		loRequest.ATTRIBUTES.OnError = 1
		loRequest.ClearRequests()
		
		lcbatch = ''
		lnTotal = 0
		
		* Post the entries entered through this form.
		* When lAPTran = .T. the entry was added by the Acct Mgr
		
		* add a request to delete the receipt
		SELE exptxnid
		LOCATE FOR cidexpe = tcidexpe
		IF FOUND()
		    llReturn = m.goApp.oQB.DeleteTxnID(exptxnid.ctxnid, 15)
		ENDIF
		
		loRequest.ClearRequests()
		
	ENDPROC

	PROCEDURE editdetail		&& Brings the current record in the grid up to the detail section in the form.
		LOCAL llReturn, loError
		
		llReturn = .T.
		
		TRY
		    IF NOT THISFORM.lJIBWell
		        IF wellexp.nrunnojib <> 0 OR wellexp.nrunnorev <> 0
		            WAIT WIND NOWAIT 'This expense has been processed in a closed run. It cannot be modified.'
		            llReturn = .F.
		            EXIT
		        ENDIF
		    ELSE
		        IF wellexp.nrunnojib <> 0
		            WAIT WIND NOWAIT 'This expense has been processed in a closed run. It cannot be modified.'
		            llReturn = .F.
		            EXIT
		        ENDIF
		    ENDIF
		
		    IF wellexp.laptran
		        THISFORM.omessage.warning('This wellexp came from A/P or Cash Disbursements. It cannot be changed here.')
		        llReturn = .F.
		        EXIT
		    ENDIF
		
		    WITH THISFORM
		        .txtdexpdate.SETVALUE(wellexp.dexpdate)
		        .txtcatcode.SETVALUE(wellexp.ccatcode)
		        .txtnAmount.SETVALUE(wellexp.nAmount)
		        .txtcVendName.VALUE = wellexp.cPayee
		        .txtcVendorID.VALUE = wellexp.cVendorID
		        .txtcOwnerID.VALUE  = wellexp.cownerid
		        .chknopostqb.VALUE  = wellexp.lnopostqb
		        .txtcNotes.VALUE    = wellexp.cmemo
		        .txtcCategory.VALUE = wellexp.ccateg
		        .txtcRefID.VALUE    = wellexp.crefid
		        .cboclass.VALUE     = wellexp.cexpclass
		        .spnBBL.VALUE       = wellexp.nsaltwater
		        .txtafeno.Value     = wellexp.cafeno
		        .cboDeck.value      = wellexp.cdeck
		
		        SELECT wellexp
		        THISFORM.deleteQB(wellexp.cidexpe)
		        SELECT wellexp
		        DELETE NEXT 1
		        = TABLEUPDATE(.T.)
		        GO TOP
		        THISFORM.txtcCategory.SETFOCUS()
		    ENDWITH
		CATCH TO loError
		    llReturn = .F.
		    DO errorlog WITH 'EditDetail', loError.LINENO, 'Well Exp by Well', loError.ERRORNO, loError.MESSAGE, '', loError
		    MESSAGEBOX('Unable to process the expenses at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		          'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		RETURN llReturn
		
		
	ENDPROC

	PROCEDURE getexpenses
		LOCAL lcYear, lcPeriod, lcWellID, lnRecNo, lcWellName
		
		lnRunNo    = INT(VAL(THISFORM.runcombo1.LISTITEM[THISform.runcombo1.LISTITEMID,3]))
		lcYear     = THISFORM.runcombo1.LISTITEM[THISform.runcombo1.LISTITEMID,2]
		lcWellID   = THISFORM.txtcwellid.VALUE
		lcWellName = THISFORM.txtcWellName.VALUE
		
		IF THISFORM.checkclose()
		   WAIT WIND NOWAIT 'This run is closed. No updates allowed.'
		   THISFORM.lblClosed.VISIBLE = .T.
		   THISFORM.cmdatamanager.revertall()
		ELSE
		   THISFORM.lblClosed.VISIBLE = .F.
		ENDIF
		
		THISFORM.REQUERY()
		
		RETURN .T.
		
		
		
		
		
		
	ENDPROC

	PROCEDURE Init
		IF DODEFAULT()
		   THISFORM.RunCombo1.LISTITEMID = 1
		   thisform.txtdExpDate.value = date()
		   thisform.oWellInv = CREATEOBJECT('swbizobj_wellinv') 
		ENDIF
		
	ENDPROC

	PROCEDURE list
		thisform.listwells()
	ENDPROC

	PROCEDURE listwells
		LOCAL lcList
		PRIV llOK
		
		IF THISFORM.flushcontrolbuffer()
		    IF THISFORM.cmdatamanager.ischanged()
		        IF THISFORM.omessage.CONFIRM('Save changes to records for this well?')
		            THISFORM.SAVE()
		        ENDIF
		    ENDIF
		
		    llOK = .F.
		    lcList = 'cwellid,cwellname,cgroup,cwellstat'
		
		    DO FORM ..\CUSTOM\picklist WITH 'Wells', lcList, THISFORM.txtcwellid.VALUE, 4
		
		    IF llOK
		        THISFORM.cmdatamanager.revertall()
		        THISFORM.txtcwellid.VALUE = wells.cwellid
		        THISFORM.txtcWellName.VALUE = wells.cwellname
		        THISFORM.txtcWellName.REFRESH()
		        THISFORM.getexpenses()
		    ENDIF
		ENDIF
		
	ENDPROC

	PROCEDURE Load
		IF DODEFAULT()
		      *  Get the cursor of QuickBooks Accounts
		      m.goApp.oQB.QBAccounts('',.F.,.T.,THISFORM.DATASESSIONID)
		ENDIF
		
	ENDPROC

	PROCEDURE new
		LPARAMETERS cworkarea
		*
	ENDPROC

	PROCEDURE requery
		LPARAMETERS cworkarealist
		LOCAL lcWellID, lcRunYear, lnRunNo, lcType, llError
		LOCAL llReturn, loError
		
		llReturn = .T.
		
		TRY
		    swselect('wells')
		    llError   = .F.
		    lcWellID  = wells.cwellid
		    lcRunYear = THISFORM.runcombo1.LISTITEM[thisform.runcombo1.listitemid, 2]
		    lnRunNo   = INT(VAL(THISFORM.runcombo1.LISTITEM[thisform.runcombo1.listitemid, 3]))
		    lcType    = THISFORM.runcombo1.LISTITEM[thisform.runcombo1.listitemid, 6]
		
		    SELE wellexp
		
		* Catch errors on the requery and handle them
		    TRY
		        REQUERY('wellexp')
		    CATCH TO loError
		* Catch uncommitted changes
		        IF loError.ERRORNO = 1545
		            llError = .T.
		        ELSE
		            MESSAGEBOX('An error kept this form from operating properly: ' + CHR(10) + ;
		                  'Error: ' + TRANSFORM(loError.ERRORNO) + CHR(10) + ;
		                  'Message: ' + loError.MESSAGE, 16, 'Error Encountered')
		        ENDIF
		
		    ENDTRY
		
		* Error ocurred so save the form and try the requery again
		    IF llError
		        llError = .F.
		        THISFORM.SAVE()
		        TRY
		            REQUERY('wellexp')
		        CATCH TO loError
		            llError = .T.
		        ENDTRY
		    ENDIF
		
		    IF llError
		        MESSAGEBOX('Error encountered: ' + CHR(10) + ;
		              'Error No: ' + TRANSFORM(loError.ERRORNO) + CHR(10) + ;
		              'Description: ' + loError.MESSAGE, 16, 'Well Expenses Query Error')
		        llReturn = .F.
		        EXIT
		    ENDIF
		
		    SELECT wellexp
		    GO TOP
		    THISFORM.calctot()
		    THISFORM.REFRESH()
		CATCH TO loError
		    llReturn = .F.
		    DO errorlog WITH 'Requery', loError.LINENO, 'Well Exp by Well', loError.ERRORNO, loError.MESSAGE, '', loError
		    MESSAGEBOX('Unable to process the expenses at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		          'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		RETURN llReturn
		
	ENDPROC

	PROCEDURE save
		LPARAMETERS cworkarealist
		
		thisform.setnextcontrol(thisform.txtcwellid)
		
		DODEFAULT(cworkarealist)
		
	ENDPROC

	PROCEDURE cboClass.Init
		IF DODEFAULT()
		   this.addlistitem('0',1,1)
		   this.addlistitem('Working Interest',1,2)
		   this.addlistitem('1',2,1)
		   this.addlistitem('Class 1',2,2)
		   this.addlistitem('2',3,1)
		   this.addlistitem('Class 2',3,2)
		   this.addlistitem('3',4,1)
		   this.addlistitem('Class 3',4,2)
		   this.addlistitem('4',5,1)
		   this.addlistitem('Class 4',5,2)
		   this.addlistitem('5',6,1)
		   this.addlistitem('Class 5',6,2)
		   this.addlistitem('A',7,1)
		   this.addlistitem('After Casing Point',7,2)
		   this.addlistitem('B',8,1)
		   this.addlistitem('Before Casing Point',8,2)
		   this.addlistitem('G',9,1)
		   this.addlistitem('Net Gas Interest',9,2)
		ENDIF   
	ENDPROC

	PROCEDURE cboDeck.Init
		IF DODEFAULT()
		   this.Requery()
		ENDIF    
	ENDPROC

	PROCEDURE cboDeck.Requery
		LPARAMETERS tcDeck, tcYear, tcPeriod
		
		IF DODEFAULT()
			THIS.Clear()
			this.Value = ''
			this.DisplayValue = ''
			IF VARTYPE(tcYear) # 'C'
			   tcYear = ''
			ENDIF 
			IF VARTYPE(tcPeriod) # 'C'
			   tcPeriod = ''
			ENDIF 
		
		    IF VARTYPE(tcDeck) # 'C'
		       tcDeck = ''
		    ENDIF 
		       
		    lcWellID = thisform.txtcwellID.Value 
		    IF EMPTY(lcWellID)
		       RETURN
		    ENDIF 
		    
		    lnIndex = 1
		    
		    * Get a list of decks for the given well
			SELECT cdeck, ldefault, effstartyr, effstartprd FROM doidecks ;
				INTO CURSOR temp ;
				WHERE cwellid = lcwellid ;
				ORDER BY cdeck DESC  ;
				GROUP BY cdeck
		
		    * Add the decks to the dropdown
			lnx = 1
			IF _TALLY > 0
				SELECT temp
				SCAN
					SCATTER MEMVAR
					IF EMPTY(m.cdeck)
					   m.cdeck = '(blank)'
					ENDIF 
					THIS.ADDLISTITEM(m.cdeck,lnx,1)
					THIS.ADDLISTITEM(m.cdeck,lnx,2)
					
					* If we passed the deck or production period
					* set the deck to the given deck or the one
					* that has an effective date for the production period.
					IF NOT EMPTY(tcDeck)
						IF m.cDeck = tcDeck
					  	 	lnIndex = lnx
						ENDIF 
					ELSE
					   IF tcYear = m.effstartyr AND tcPeriod = m.effstartprd
					      lnIndex = lnX
					   ENDIF 
					ENDIF 	
					lnx = lnx + 1 
				ENDSCAN
			    this.ListItemId = lnIndex
			ELSE 		
			    this.ListItemId = 1
			ENDIF
		ENDIF
		
	ENDPROC

	PROCEDURE cboDeck.Valid
		RETURN .t.
	ENDPROC

	PROCEDURE chknopostqb.Init
		IF NOT m.goapp.oqb.lqbactive
		   this.Value = .t.
		ENDIF 
	ENDPROC

	PROCEDURE chknopostqb.When
		DODEFAULT()
		IF NOT m.goapp.oqb.lqbactive
		   this.Value = .t.
		   RETURN .f.
		ENDIF 
	ENDPROC

	PROCEDURE cmdAFENo.Click
		LOCAL lcList
		PRIV llOK
		
		llOK = .T.
		
		lcList = 'cafeno,cwellid'
		
		
		
		IF _TALLY > 0
		
		   DO FORM ..\CUSTOM\Picklist WITH 'afehdr', lcList, THISFORM.txtafeno.VALUE, 2, .F.
		
		   IF llOK
		      THISFORM.txtafeno.VALUE = afehdr.cafeno
		      THISFORM.txtafeno.REFRESH()
		   ENDIF
		
		   THISFORM.setnextcontrol(THISFORM.txtafeno)
		ENDIF
		
	ENDPROC

	PROCEDURE cmdAFENo.When
		RETURN MDOWN()
	ENDPROC

	PROCEDURE cmdatamanager.afternav
		LPARAMETERS cworkarea
		LOCAL lcgroup
		
		IF m.cworkarea = 'Wells'
		
		   lcwellid   = wells.cwellid
		
		   STORE 0 TO THISFORM.txtnamount.VALUE
		
		   SELE wellinv
		   LOCATE FOR cwellid=lcwellid AND ctypeinv='W' AND ljib
		   IF FOUND()
		      THISFORM.ljibwell = .T.
		   ELSE
		      THISFORM.ljibwell = .F.
		   ENDIF
		
		   THISFORM.getexpenses()
		
		   *   thisform.calctot()
		
		ENDIF
		
		
	ENDPROC

	PROCEDURE cmdatamanager.afternew
		LPARAMETERS cworkarea
		LOCAL lcidexph, lcidexpe
		
		IF m.cworkarea = 'Wellexp'
		   m.cBatch = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Batch')
		   lcidexpe = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Expense')
		
		   SELECT expense
		   SET DELE OFF
		   SET ORDER TO cidexpe
		   DO WHILE SEEK(lcidexpe)
		      lcidexpe = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Expense')
		   ENDDO
		   SET DELE ON
		
		   SELECT Wellexp
		   REPL cBatch  WITH m.cBatch, ;
		        cidexpe WITH lcidexpe
		        
		   THISFORM.setnextcontrol(THISFORM.txtcWellID)
		ENDIF
		
		
	ENDPROC

	PROCEDURE cmdatamanager.afterupdate
		LPARAMETERS cWorkareaList, lCurrentRecordOnly
		
		thisform.requery()
		
		DODEFAULT(cWorkareaList,lCurrentRecordOnly)
	ENDPROC

	PROCEDURE cmdatamanager.beforedelete
		LPARAMETERS cworkarea
		LOCAL lcbatch, lcidexpe
		LOCAL llReturn, llalloc, lnTotal, lnexpcnt, loDelResp, loError, loExpDel, loRequest, loResponse
		LOCAL cidexps
		
		llReturn = .T.
		
		TRY
		    DO CASE
		        CASE m.cworkarea = 'Wellexp' AND NOT THISFORM.ldeldetail
		            IF NOT THISFORM.ljibwell
		                IF wellexp.nrunnojib <> 0 OR wellexp.nrunnorev <> 0
		                    WAIT WIND NOWAIT 'These expenses have been processed in a closed run. They cannot be deleted.'
		                    llReturn = .F.
		                    EXIT
		                ENDIF
		            ELSE
		                IF wellexp.nrunnojib <> 0
		                    WAIT WIND NOWAIT 'These expenses have been processed in a closed run. They cannot be deleted.'
		                    llReturn = .F.
		                    EXIT
		                ENDIF
		            ENDIF
		
		            lnexpcnt = 0
		            llalloc  = THISFORM.omessage.CONFIRM('Should these expenses be placed in the allocation file?')
		            IF NOT llalloc
		                THISFORM.omessage.DISPLAY('Since these expenses are not being placed into the allocation file, any that came from a bill will not be deleted.  To delete those entries, the original bill must be deleted.')
		            ENDIF
		
		            SET DELETED ON
		            SELECT wellexp
		            SCAN
		                SCATTER MEMVAR
		                m.cidexps    = THISFORM.oregistry.incrementcounter('%Shared.Counters.Expense')
		
		*  Get the batch number to delete
		                lcbatch = wellexp.cbatch
		                SELECT expsusp1
		                SET DELE OFF
		                SET ORDER TO cidexps
		                DO WHILE SEEK(m.cidexps)
		                    m.cidexps    = THISFORM.oregistry.incrementcounter('%Shared.Counters.Expense')
		                ENDDO
		                SET DELE ON
		
		*  If they said yes to send it to the allocation file, or it came from a bill, send it to the expsusp table
		                IF llalloc
		                    SELECT expsusp
		                    INSERT INTO expsusp FROM MEMVAR
		                    IF llalloc
		                        lnexpcnt = lnexpcnt + 1
		                    ENDIF
		                ELSE
		                    THISFORM.deleteqb(m.cidexpe)
		                ENDIF
		
		                IF llalloc OR (NOT llalloc AND NOT m.lAPTran)
		                    SELE wellexp
		                    DELE NEXT 1
		                ENDIF
		            ENDSCAN
		
		            IF lnexpcnt > 0
		                THISFORM.omessage.DISPLAY('Placed ' + ALLTRIM(STR(lnexpcnt)) + ' entries in the wellexp allocation file.')
		            ENDIF
		            SELECT wellexp
		            = TABLEUPDATE(.T.)
		            SELECT expsusp
		            = TABLEUPDATE(.T.)
		
		        CASE m.cworkarea = 'Wellexp' AND THISFORM.ldeldetail
		            SELECT wellexp
		            SCATTER MEMVAR
		            IF NOT THISFORM.lfromedit
		                IF m.lAPTran
		                    m.cidexps    = THISFORM.oregistry.incrementcounter('%Shared.Counters.Expense')
		                    SELECT expsusp1
		                    SET DELE OFF
		                    SET ORDER TO cidexps
		                    DO WHILE SEEK(m.cidexps)
		                        m.cidexps    = THISFORM.oregistry.incrementcounter('%Shared.Counters.Expense')
		                    ENDDO
		                    SET DELE ON
		                    SELECT expsusp
		                    INSERT INTO expsusp FROM MEMVAR
		                    SELE wellexp
		                    DELE NEXT 1
		                    WAIT WINDOW NOWAIT 'Returned the entry to the allocation file.'
		                ELSE
		                    IF THISFORM.omessage.CONFIRM('Should this expense be placed in the allocation file?')
		                        lcidexpe  = m.cidexpe
		                        m.cidexps = THISFORM.oregistry.incrementcounter('%Shared.Counters.Expense')
		                        SELECT expsusp1
		                        SET DELE OFF
		                        SET ORDER TO cidexps
		                        DO WHILE SEEK(m.cidexps)
		                            m.cidexps    = THISFORM.oregistry.incrementcounter('%Shared.Counters.Expense')
		                        ENDDO
		                        SET DELE ON
		                        SELECT expsusp
		                        INSERT INTO expsusp FROM MEMVAR
		                        SELE wellexp
		                        DELE NEXT 1
		*  Update the exptxnid table with the new cidexpe for this entry, so if it 
		*  gets re-allocated and then deleted, it can properly remove the posting.
		                        SELECT exptxnid
		                        LOCATE FOR cidexpe = lcidexpe
		                        IF FOUND()
		                            REPLACE cidexpe WITH m.cidexps
		                            = TABLEUPDATE(.T.)
		                        ENDIF
		
		                        WAIT WINDOW NOWAIT 'Returned the entry to the allocation file.'
		                    ELSE
		                        IF m.goapp.oQB.lQBActive
		                            loRequest = m.goapp.oQB.oQBRequest
		
		* set the on error attribute for the request
		                            loRequest.ATTRIBUTES.OnError = 1
		                            loRequest.ClearRequests()
		
		                            lcbatch = ''
		                            lnTotal = 0
		
		* Post the entries entered through this form.
		* When lAPTran = .T. the entry was added by the Enter Bills
		
		* add a request to delete the receipt
		                            
		                            SELE exptxnid
		                            LOCATE FOR cidexpe = m.cidexpe
		                            IF FOUND()
		                                llReturn = m.goApp.oQB.DeleteTxnID(exptxnid.ctxnid, 15)
		                            ENDIF
		                            SELE wellexp
		                            DELE NEXT 1
		                        ELSE
		                            IF NOT wellexp.lNoPostQB
		                                MESSAGEBOX('The link to QuickBooks is not active. Can not delete an entry that was originally posted to QuickBooks.', 16, 'Delete Detail Line')
		                                llReturn = .F.
		                                EXIT
		                            ENDIF
		                        ENDIF
		                    ENDIF
		                ENDIF
		            ELSE
		                IF m.goapp.oQB.lQBActive
		                    loRequest = m.goapp.oQB.oQBRequest
		
		* set the on error attribute for the request
		                    loRequest.ATTRIBUTES.OnError = 1
		                    loRequest.ClearRequests()
		
		                    lcbatch = ''
		                    lnTotal = 0
		
		* Post the entries entered through this form.
		* When lAPTran = .T. the entry was added by the Enter Bills
		
		* add a request to delete the receipt
		                    SELE exptxnid
		                    LOCATE FOR cidexpe = m.cidexpe
		                    IF FOUND()
		                        llReturn = m.goApp.oQB.DeleteTxnID(exptxnid.ctxnid, 15)
		                    ENDIF
		                ELSE
		                    IF NOT wellexp.lNoPostQB
		                        MESSAGEBOX('The link to QuickBooks is not active. Can not delete an entry that was originally posted to QuickBooks.', 16, 'Delete Detail Line')
		                        llReturn = .F.
		                        EXIT
		                    ENDIF
		                ENDIF
		            ENDIF
		    ENDCASE
		CATCH TO loError
		    llReturn = .F.
		    DO errorlog WITH 'BeforeDelete', loError.LINENO, 'Well Exp by Well', loError.ERRORNO, loError.MESSAGE, '', loError
		    MESSAGEBOX('Unable to process the expenses at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		          'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		RETURN llReturn
		
		
		
		
		
	ENDPROC

	PROCEDURE cmdatamanager.beforenav
		LPARAMETERS cworkarea
		
		IF m.cWorkarea = 'Wellexp'
		   IF thisform.lblClosed.Visible = .T.
		      thisform.cmdatamanager.revertall()
		      thisform.lChanged = .F.
		   ENDIF
		ENDIF
		
		DODEFAULT()      
	ENDPROC

	PROCEDURE cmdatamanager.beforeupdate
		LPARAMETERS cworkarealist
		LOCAL lcBatch, lcCash, lcRevClear, lcGroup, llReturn, lnjournal, lnDetail
		LOCAL lcDMExp, lcExpClear, lcListID, lcMessage, lcVendList, lcWellID, lcWellListID, lcWellName
		LOCAL lcYear, lcapacct, llDMNoExp, llDMNoPost, llResult, lnRunNo, lnTotal, loAddResp, loDelResp
		LOCAL loEntry, loError, loExpAdd, loExpDel, loNewCheck, loRequest, loResponse
		LOCAL cidsysctl, ctxnid, mtxnids, namount, ntype
		
		llReturn = .T.
		
		TRY
		*
		*  Builds the glmaster journal entries for the wellexps for the well
		*
		    THISFORM.setnextcontrol(THISFORM.txtcwellid)
		
		    lnRunNo    = INT(VAL(THISFORM.RunCombo1.LISTITEM[THISFORM.RunCombo1.LISTITEMID, 3]))
		    lcYear     = THISFORM.RunCombo1.LISTITEM[THISFORM.RunCombo1.LISTITEMID, 2]
		    lcWellID   = THISFORM.txtcwellid.VALUE
		    lcWellName = THISFORM.txtcWellName.VALUE
		
		* Can't save to a period that's already closed
		    IF THISFORM.checkclose()
		        WAIT WIND NOWAIT 'This run is closed. No updates allowed.'
		        THISFORM.cmdatamanager.revertall()
		        THISFORM.lchanged = .F.
		        llReturn          = .F.
		        EXIT
		    ENDIF
		
		* Check to see if we have anything to save
		    lnDetail = 0
		    SELECT wellexp
		    SET DELETED OFF
		    COUNT FOR NOT lAPTran TO lnDetail
		    IF lnDetail = 0
		* Bail out because there's nothing to do here.
		        SET DELETED ON
		        llReturn = .T.
		        EXIT
		    ENDIF
		    SET DELETED ON
		
		    IF NOT m.goapp.oQB.lqbactive
		        llReturn = .T.
		        EXIT
		    ENDIF
		
		*  Get the default A/P account
		    swselect('apopt')
		    lcapacct  = cQBapacct
		
		    swselect('options')
		    GO TOP
		    lcDMExp = cQBFixedAcct
		
		    IF EMPTY(lcDMExp)
		        lcDMExp = lcapacct
		    ENDIF
		
		*  Get the default wellexp clearing account
		    swselect('glopt')
		    lcExpClear = cQBExpClear
		    llDMNoPost = .F.
		    llDMNoExp  = .F.
		
		*  Get the group for this well
		    swselect('wells')
		    SET ORDER TO cwellid
		    IF SEEK(lcWellID)
		        lcGroup = cGroup
		    ELSE
		        lcGroup = '00'
		    ENDIF
		
		    IF m.goapp.oQB.QBFCVersion > ' 4.0'
		        lnjournal = 15
		    ELSE
		        lnjournal = 14
		    ENDIF
		
		* Setup the fields for qbpost so we can unpost this allocation if part fails
		* Prepend the sysctl with an "E" so the error_recovery in oQB doesn't try to unpost
		* these entries on startup. - pws 3/8/10
		    m.cidsysctl = 'E' + RIGHT(THISFORM.oregistry.incrementcounter('%Shared.Counters.Batch'), 7)
		
		    IF m.goapp.oQB.lqbactive
		* get a message set request object (version 1.1 xml)
		        loRequest = m.goapp.oQB.oQBRequest
		
		* set the on error attribute for the request
		        loRequest.ATTRIBUTES.OnError = 1
		        loRequest.ClearRequests()
		
		
		        swselect('wells')
		        LOCATE FOR cwellid = lcWellID
		        IF FOUND()
		            lcWellListID = wells.cListID
		        ELSE
		            THISFORM.oMessage.Warning('Invalid Well ID. QuickBooks cannot save this entry.')
		            llReturn = .F.
		            EXIT
		        ENDIF
		
		        lcBatch = ''
		        lnTotal = 0
		
		* Post the entries entered through this form.
		* When lAPTran = .T. the entry was added by the Acct Mgr\
		*  Commented out the "AND NOT LFIXED" part in the scan below, since each expense gets
		*  posted separately as a distinct transaction, so we should be able
		*  to update them individually.
		
		        SELECT wellexp
		        SCAN FOR NOT lAPTran &&AND NOT lFixed
		            SCATTER MEMVAR
		            m.namount = swNetExp(m.namount, m.cwellid, .T., m.cexpclass, 'B')
		            IF m.namount = 0
		                LOOP
		            ENDIF
		
		            IF EMPTY(m.cvendorid)
		                MESSAGEBOX('There is an expense without a vendor associated with it. All expenses must have a vendor.', 48, 'Missing Vendor')
		                llReturn = .F.
		                EXIT
		            ENDIF
		
		* add a request to delete the receipt
		            
		            swselect('exptxnid')
		            LOCATE FOR cidexpe = m.cidexpe
		            IF FOUND()
		                llReturn = m.goApp.oQB.DeleteTxnID(exptxnid.ctxnid, 15)
		            ENDIF
		
		            loRequest.ClearRequests()
		
		* If this entry is not to be posted to QB, loop out
		            IF wellexp.lnopostqb
		                LOOP
		            ENDIF
		
		*  Setup the expense add request
		            loExpAdd = loRequest.AppendJournalEntryAddRq()
		            loExpAdd.RefNumber.SetValue(' ')
		            IF NOT EMPTY(wellexp.dexpdate)
		                loExpAdd.TxnDate.SetValue(wellexp.dexpdate)
		            ELSE
		                loExpAdd.TxnDate.SetValue(DATE())
		            ENDIF
		
		            IF m.namount > 0
		                IF m.goapp.oQB.QBFCVersion > ' 4.0'
		                    loEntry = loExpAdd.ORJournalLineList.APPEND.JournalDebitLine
		                ELSE
		                    loEntry = loExpAdd.JournalDebitLineList.APPEND
		                ENDIF
		            ELSE
		                IF m.goapp.oQB.QBFCVersion > ' 4.0'
		                    loEntry = loExpAdd.ORJournalLineList.APPEND.JournalCreditLine
		                ELSE
		                    loEntry = loExpAdd.JournalCreditLineList.APPEND
		                ENDIF
		            ENDIF
		
		            swselect('vendor')
		            LOCATE FOR cvendorid = m.cvendorid
		            lcVendList = cListID
		            loEntry.MEMO.SetValue('Prod Prd:' + m.cperiod + '/' + m.cyear + '  ' + ALLT(m.cCateg))
		            loEntry.ClassRef.ListID.SetValue(lcWellListID)
		            loEntry.EntityRef.ListID.SetValue(lcVendList)
		            loEntry.AccountRef.ListID.SetValue(lcExpClear)
		            loEntry.Amount.SetValue(ABS(m.namount))
		
		            IF m.namount < 0
		                IF m.goapp.oQB.QBFCVersion > ' 4.0'
		                    loEntry = loExpAdd.ORJournalLineList.APPEND.JournalDebitLine
		                ELSE
		                    loEntry = loExpAdd.JournalDebitLineList.APPEND
		                ENDIF
		            ELSE
		                IF m.goapp.oQB.QBFCVersion > ' 4.0'
		                    loEntry = loExpAdd.ORJournalLineList.APPEND.JournalCreditLine
		                ELSE
		                    loEntry = loExpAdd.JournalCreditLineList.APPEND
		                ENDIF
		            ENDIF
		
		            loEntry.MEMO.SetValue('Well: ' + lcWellID)
		            loEntry.ClassRef.ListID.SetValue(lcWellListID)
		            loEntry.EntityRef.ListID.SetValue(lcVendList)
		            loEntry.AccountRef.ListID.SetValue(lcDMExp)
		            loEntry.Amount.SetValue(ABS(m.namount))
		
		            loResponse = m.goapp.oQB.oQBSM.DoRequests(loRequest)
		            loAddResp  = loResponse.responselist.getat(0)
		
		            IF loAddResp.StatusCode = 0
		                WAIT WIND NOWAIT 'Well Expenses successfully added in QuickBooks'
		
		                loNewCheck = loAddResp.DETAIL
		                m.ctxnid   = loNewCheck.TxnID.getvalue()
		
		                swselect('exptxnid')
		                LOCATE FOR cidexpe = m.cidexpe
		                IF NOT FOUND()
		                    INSERT INTO exptxnid FROM MEMVAR
		                ELSE
		                    REPL ctxnid WITH m.ctxnid
		                ENDIF
		* Save the transaction so that it can be unposted from QB if
		* any of the other transactions fails
		                swselect('qbpost')
		                LOCATE FOR cidsysctl = m.cidsysctl AND ntype = lnjournal
		                IF NOT FOUND()
		                    m.ntype   = lnjournal
		                    m.mtxnids = m.ctxnid
		                    INSERT INTO qbpost FROM MEMVAR
		                ELSE
		                    IF NOT EMPTY(ALLT(mtxnids))
		                        REPL mtxnids WITH ALLT(mtxnids) + CHR(13) + m.ctxnid
		                    ELSE
		                        REPL mtxnids WITH m.ctxnid
		                    ENDIF
		                ENDIF
		                loRequest.ClearRequests()
		                m.goapp.oQB.oQBSM.ClearErrorRecovery()
		            ELSE
		                IF 'object' $ LOWER(loAddResp.statusmessage)
		                    lcListID = SUBSTR(loAddResp.statusmessage, AT('"', loAddResp.statusmessage) + 1, AT('"', loAddResp.statusmessage, 2) - (AT('"', loAddResp.statusmessage) + 1))
		                    llResult = m.goapp.oQB.QBListID(lcListID, THISFORM.DATASESSIONID)
		                    IF llResult
		                        SELECT QBListID
		                        IF QBListID.ctype = 'Account'
		                            lcMessage = 'The ' + ALLTRIM(QBListID.cdescription) + ' specified in the ' + ;
		                                'QB Posting Preferences was not found in QuickBooks. Please select a new account ' + ;
		                                'and try to save the expenses again.'
		                        ELSE
		                            lcMessage = 'The ' + ALLTRIM(QBListID.cdescription) + ' was not found in QuickBooks. ' + ;
		                                'Please synchronize the ' + ALLTRIM(QBListID.ctype) + ' file and try to save the expenses again.'
		                        ENDIF
		                        THISFORM.oMessage.severe(lcMessage)
		                    ELSE
		                        THISFORM.oMessage.severe(loAddResp.statusmessage)
		                    ENDIF
		                ELSE
		                    THISFORM.oMessage.severe(loAddResp.statusmessage)
		                ENDIF
		* Unpost what got posted so far
		                m.goapp.oQB.csysctlkey = m.cidsysctl
		                m.goapp.oQB.QBUnpostRev()
		                m.goapp.oQB.oQBSM.ClearErrorRecovery()
		                llReturn = .F.
		                EXIT
		            ENDIF
		
		        ENDSCAN
		    ELSE
		        IF NOT THISFORM.oMessage.CONFIRM('There is no active connection to QuickBooks. Should these expenses be saved anyway?')
		            llReturn = .F.
		            EXIT
		        ENDIF
		    ENDIF
		CATCH TO loError
		    llReturn = .F.
		    DO errorlog WITH 'BeforeUpdate', loError.LINENO, 'Well Exp by Well', loError.ERRORNO, loError.MESSAGE, '', loError
		    MESSAGEBOX('Unable to process the expenses at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		          'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		RETURN llReturn
		
		
	ENDPROC

	PROCEDURE cmdDelDetail.Click
		SELECT wellexp
		* Don't try to delete if there's no record - avoids a blank record getting sent to the allocation file
		IF EOF()  
		   RETURN
		ENDIF
		
		IF NOT THISFORM.lJIBWell
		   IF wellexp.nrunnojib <> 0 OR wellexp.nrunnorev <> 0
		      THISFORM.oMessage.warning('This expense has been processed in a closed run. It cannot be modified.')
		      RETURN
		   ENDIF
		ELSE
		   IF wellexp.nrunnojib <> 0
		      THISFORM.oMessage.warning('This expense has been processed in a closed run. It cannot be modified.')
		      RETURN
		   ENDIF
		ENDIF
		
		THISFORM.ldeldetail = .t.
		THISFORM.lConfirmDelete = .F.
		THISFORM.DELETE('Wellexp')
		THISFORM.setnextcontrol(THISFORM.txtcCategory)
		THISFORM.lConfirmDelete = .T.
		THISFORM.ldeldetail = .f.
		
		THISFORM.grdgridcustom1.REFRESH()
		
	ENDPROC

	PROCEDURE cmdDelDetail.When
		RETURN MDOWN()
	ENDPROC

	PROCEDURE cmdEditDetail.Click
		thisform.editdetail()
		thisform.grdgridcustom1.Refresh()
		
	ENDPROC

	PROCEDURE cmdEditDetail.When
		RETURN MDOWN()
	ENDPROC

	PROCEDURE cmdLookCat.Click
		LOCAL lcList
		PRIV llOK
		
		llOK = .F.
		SELECT cCateg,cCatCode,cExpClass,IIF(lAFEType,'X','') AS cAFEType, IIF(lJIBOnly,'X','') AS cJIBOnly  ;
		    FROM expcat INTO CURSOR exptmp READWRITE
		
		SELECT exptmp
		INDEX ON cCatCode           TAG cCatCode
		INDEX ON UPPER(cCateg)      TAG cCateg
		INDEX ON cExpClass+cCatCode TAG cExpClass
		INDEX ON cAFEType           TAG cAFEType
		INDEX ON cJIBOnly           TAG cJIBOnly
		
		lcList = 'ccateg\Category,ccatcode\Code,cexpclass\Cls,cAFEType\AFE,cJIBOnly\JIB'
		
		DO FORM '..\custom\picklist' WITH 'exptmp', lcList, THISFORM.txtcCategory.VALUE, 5, .T., .T.
		IF llOK
		   THISFORM.txtccategory.VALUE = exptmp.ccateg
		   THISFORM.txtccategory.REFRESH()
		   THISFORM.txtCatCode.SET('value',exptmp.cCatCode)
		   thisform.cboclass.set('value',exptmp.cexpclass)
		ENDIF
		
		thisform.setnextcontrol(thisform.txtccategory)
		
	ENDPROC

	PROCEDURE cmdLookCat.When
		RETURN MDOWN()
	ENDPROC

	PROCEDURE cmdLookVend.Click
		LOCAL lcList
		PRIV llOK
		
		llOK = .F.
		lcList = 'cvendorid,cvendname'
		
		DO FORM ..\custom\picklist WITH 'Vendor', lcList, thisform.txtcvendorid.value, 2
		
		IF llOK
		   thisform.txtcVendorID.value = vendor.cvendorid
		   thisform.txtcVendName.value = vendor.cvendname
		   thisform.txtcVendorID.Refresh()
		   thisform.txtcVendName.Refresh()
		ENDIF   
		
		thisform.setnextcontrol(thisform.txtcVendName)
	ENDPROC

	PROCEDURE cmdLookVend.When
		RETURN MDOWN()
	ENDPROC

	PROCEDURE cmdLookWell.Click
		IF DODEFAULT()
		   thisform.listwells()
		ENDIF
		   
	ENDPROC

	PROCEDURE cmdLookWell.When
		
		RETURN MDOWN()
	ENDPROC

	PROCEDURE cmdOwner.Click
		LOCAL lcList
		PRIV llOK
		
		llOK = .F.
		lcList = 'cownerid\Owner ID,csortfield\Owner Name'
		
		SET SAFETY OFF
		SELECT cownerid, csortfield FROM investor INTO CURSOR temp ;
		  WHERE cownerid IN (SELECT cOwnerid FROM wellinv WHERE cWellID = thisform.txtcwellid.value) ;
		  ORDER BY cownerid
		
		USE DBF('temp') AGAIN IN 0 ALIAS tempown
		SELECT tempown
		INDEX ON cownerid TAG cownerid
		INDEX ON csortfield TAG csortfield
		
		DO FORM ..\custom\picklist WITH 'Tempown', lcList, thisform.txtcownerid.value, 2, .t.,.t.
		
		IF llOK
		   thisform.txtcOwnerID.setvalue(tempown.cownerid)
		   thisform.txtcOwnerID.Refresh()
		   thisform.setnextcontrol(thisform.txtcownerid)
		ENDIF   
		
		IF USED('temp')
		   USE IN temp
		ENDIF
		
		IF USED('tempown')
		   USE IN tempown
		ENDIF      
	ENDPROC

	PROCEDURE cmdOwner.When
		RETURN MDOWN()
	ENDPROC

	PROCEDURE Grdgridcustom1.AfterRowColChange
		LPARAMETERS ncol
		
		IF DODEFAULT(ncol)
		   thisform.calctot()
		endif   
	ENDPROC

	PROCEDURE Grdgridcustom1.Column1.txtcCategory.DblClick
		thisform.editdetail()
	ENDPROC

	PROCEDURE Grdgridcustom1.Column1.txtcCategory.InteractiveChange
		
		IF NOT wellexp.laptran
		   DODEFAULT()
		   thisform.cmdatamanager.replace('wellexp','Ccatcode',expcat.ccatcode)
		   thisform.cmdatamanager.replace('wellexp','cexpclass',expcat.cexpclass)
		ENDIF   
	ENDPROC

	PROCEDURE Grdgridcustom1.Column1.txtcCategory.KeyPress
		LPARAMETERS nkeycode,nshiftaltctrl
		
		IF wellexp.laptran
		   thisform.omessage.warning('This expense came from A/P or G/L. It cannot be changed here.')
		   NODEFAULT
		ELSE
		   DODEFAULT(nkeycode,nshiftaltctrl)   
		ENDIF   
	ENDPROC

	PROCEDURE Grdgridcustom1.Column1.txtcCategory.Valid
		IF NOT wellexp.laptran
		   DODEFAULT()
		ENDIF   
	ENDPROC

	PROCEDURE Grdgridcustom1.Column1.txtcCategory.When
		IF DODEFAULT()
		   IF wellexp.laptran
		      RETURN .f.
		   ENDIF
		ENDIF
		      
	ENDPROC

	PROCEDURE Grdgridcustom1.Column2.txtdExpDate.DblClick
		thisform.editdetail()
	ENDPROC

	PROCEDURE Grdgridcustom1.Column2.txtdExpDate.KeyPress
		LPARAMETERS nkeycode,nshiftaltctrl
		
		IF wellexp.laptran
		   thisform.omessage.warning('This Expense came from A/P or G/L. It cannot be changed here.')
		   NODEFAULT
		ELSE
		   DODEFAULT(nkeycode,nshiftaltctrl)   
		ENDIF   
	ENDPROC

	PROCEDURE Grdgridcustom1.Column2.txtdExpDate.Valid
		IF NOT wellexp.laptran
		   DODEFAULT()
		ENDIF   
	ENDPROC

	PROCEDURE Grdgridcustom1.Column3.txtcPayee.DblClick
		thisform.editdetail()
	ENDPROC

	PROCEDURE Grdgridcustom1.Column3.txtcPayee.InteractiveChange
		
		IF NOT wellexp.laptran
		   DODEFAULT()
		   thisform.cmdatamanager.replace('wellexp','cvendorid',vendor.cvendorid)
		ENDIF   
	ENDPROC

	PROCEDURE Grdgridcustom1.Column3.txtcPayee.KeyPress
		LPARAMETERS nkeycode,nshiftaltctrl
		
		IF wellexp.laptran
		   thisform.omessage.warning('This expense came from A/P or G/L. It cannot be changed here.')
		   NODEFAULT
		ELSE
		   DODEFAULT(nkeycode,nshiftaltctrl)   
		ENDIF   
		
		
	ENDPROC

	PROCEDURE Grdgridcustom1.Column3.txtcPayee.Valid
		IF NOT wellexp.laptran
		   IF DODEFAULT()
		      SELECT vendor
		      SET ORDER TO cvendname
		      LOCATE FOR ALLT(THIS.VALUE) $ cvendname
		      IF NOT FOUND()
		         THISFORM.cmdatamanager.REPLACE('wellexp','Cvendorid','')
		      ELSE
		         THISFORM.cmdatamanager.REPLACE('wellexp','Cvendorid',vendor.cvendorid)
		         IF wellexp.ccatcode = 'PLUG' AND NOT vendor.linteggl
		            MESSAGEBOX('Plugging exepenses must be entered with a vendor that is marked to post to the G/L.', 16, 'Wrong Vendor')
		            THISFORM.cmdatamanager.REPLACE('wellexp','Cvendorid','')
		         ENDIF             
		      ENDIF
		   ENDIF
		ENDIF
		
		
	ENDPROC

	PROCEDURE Grdgridcustom1.Column4.txtnAmount.DblClick
		thisform.editdetail()
	ENDPROC

	PROCEDURE Grdgridcustom1.Column4.txtnAmount.KeyPress
		LPARAMETERS nkeycode,nshiftaltctrl
		
		IF wellexp.laptran
		   thisform.omessage.warning('This expense came from A/P or G/L. It cannot be changed here.')
		   NODEFAULT
		ELSE
		   DODEFAULT(nkeycode,nshiftaltctrl)   
		ENDIF   
		
		
	ENDPROC

	PROCEDURE Grdgridcustom1.Column4.txtnAmount.Valid
		IF NOT wellexp.laptran
		   DODEFAULT()
		ENDIF   
	ENDPROC

	PROCEDURE Grdgridcustom1.Column5.txtcYear.Valid
		
		if not between(this.value,'1960','2040')
		   wait wind nowait 'Invalid production year entered.'
		   return 0
		endif   
		
		dodefault()
	ENDPROC

	PROCEDURE Grdgridcustom1.Column6.txtcPeriod.Valid
		this.value = padl(allt(this.value),2,'0')
		if not between(this.value,'01','12')
		   wait wind nowait 'Invalid production period entered.'
		   return 0
		endif
		
		dodefault()   
	ENDPROC

	PROCEDURE Grdgridcustom1.Column7.Txtquickfill1.InteractiveChange
		IF NOT wellexp.laptran
		   DODEFAULT()
		   thisform.cmdatamanager.replace('wellexp','Ccatcode',expcat.ccatcode)
		   thisform.cmdatamanager.replace('wellexp','cexpclass',expcat.cexpclass)
		ENDIF   
	ENDPROC

	PROCEDURE Grdgridcustom1.Column7.Txtquickfill1.When
		IF DODEFAULT()
		   IF wellexp.laptran
		      RETURN .f.
		   ENDIF
		ENDIF
		      
	ENDPROC

	PROCEDURE Grdgridcustom1.Column8.txtClass.Valid
		if not inlist(this.value,'0','1','2','3','4','5','A','B','G')
		   wait wind nowait 'Invalid expense class entered. Valid choices are 012345AB'
		   return 0
		endif
		
		dodefault()   
	ENDPROC

	PROCEDURE Grdgridcustom1.Column9.chknopostqb.Valid
		IF DODEFAULT()
		   IF NOT m.goapp.oQB.lQBActive
		      thisform.omessage.warning('The option to not post to QuickBooks cannot be changed while the link to QuickBooks is not active.')
		      RETURN 0
		   ENDIF 
		   IF THIS.VALUE
		      MESSAGEBOX("This expense is marked not to post to QuickBooks."  + CHR(10) + CHR(10) + ;
		         "Nothing will be posted to QuickBooks when this     "  + CHR(10) + ;
		         "expense is saved."                                  + CHR(10) + CHR(10) + ;
		         "However, when the revenue/JIB run which processes this" + CHR(10) + ;
		         "expense is closed and then posted to QuickBooks,"   + CHR(10) + ;
		         "the clearing entries will still be made for this"   + CHR(10) + ;
		         "expense. This will cause more expenses to be cleared"+ CHR(10) + ;
		         "than what was originally posted for the run."      + CHR(10) + ;
		         "You will need to make an adjustment in QuickBooks"  + CHR(10) + ;
		         "to the Expense Clearing account to correct this." + CHR(10) + CHR(10) + ;
		         "Please see the 'Don't post to QuickBooks' topic"    + CHR(10) + ;
		         "in the Help file for more information.",48,"QuickBooks No Post Notice")
		   ENDIF
		ENDIF
		
	ENDPROC

	PROCEDURE Grdgridcustom1.Column9.chknopostqb.When
		RETURN NOT wellexp.laptran
	ENDPROC

	PROCEDURE Grdgridcustom1.Init
		IF DODEFAULT()
		   FOR EACH oCol IN THIS.COLUMNS
		      oCol.DYNAMICFORECOLOR = "IIF(wellexp.lFixed,rgb(255,0,0),IIF(wellexp.lAPTran,rgb(0,0,255),rgb(0,0,0)))"
		   ENDFOR
		ENDIF
		
	ENDPROC

	PROCEDURE Runcombo1.fieldvalid
		IF THISFORM.cmdatamanager.ischanged()
		   IF MESSAGEBOX('The changes made to the expenses for this well will not be saved if you continue. Do you want to continue?',36,'Discard Changes?') = 6
		      thisform.cmdatamanager.revertall()
		      
		   ELSE
		      this.ListItemId = thisform.nrunitemid
		      RETURN     
		   ENDIF 
		ENDIF
		
		RETURN thisform.getexpenses()
	ENDPROC

	PROCEDURE Runcombo1.When
		thisform.nrunitemid = this.listitemid
		DODEFAULT()
	ENDPROC

	PROCEDURE spnBBL.When
		IF DODEFAULT()
		   IF 'BRINE' $ UPPER(THISFORM.txtcCategory.VALUE) OR ;
		         'WATER' $ UPPER(THISFORM.txtcCategory.VALUE) OR ;
		         'SALT'  $ UPPER(THISFORM.txtcCategory.VALUE) OR ;
		         'H2O'   $ UPPER(THISFORM.txtcCategory.VALUE)
		      RETURN .T.
		   ELSE
		      RETURN .F.
		   ENDIF
		ENDIF
		
	ENDPROC

	PROCEDURE Swyear.Valid
		IF DODEFAULT()
		
			lcDeck = thisform.oWellInv.DOIDeckNameLookup(this.Value, thisform.swperiod.value, thisform.txtcwellID.Value) 
			thisform.cboDeck.Requery(lcDeck)
		
		ENDIF 
		
	ENDPROC

	PROCEDURE txtafeno.GotFocus
		ON KEY LABEL F2 _SCREEN.ACTIVEFORM.cmdLookOwner.CLICK()
		
		DODEFAULT()
		
	ENDPROC

	PROCEDURE txtcatcode.GotFocus
		ON KEY LABEL F2 _screen.activeform.cmdLookCat.Click()
		DODEFAULT()
	ENDPROC

	PROCEDURE txtcatcode.InteractiveChange
		IF DODEFAULT()
		   SELECT expcat
		   LOCATE FOR ccatcode == this.Value
		   IF FOUND()
		      thisform.txtcCategory.set('value',expcat.ccateg)
		      thisform.cboClass.set('value',expcat.cexpclass)
		   ELSE
		      thisform.txtcCategory.set('value','')
		      thisform.cboclass.set('value','0')
		   ENDIF
		ENDIF       
	ENDPROC

	PROCEDURE txtcatcode.LostFocus
		ON KEY LABEL F2
		DODEFAULT()
	ENDPROC

	PROCEDURE txtcatcode.Valid
		LOCAL lcClass, lcWellID
		
		IF EMPTY(THIS.VALUE) AND NOT EMPTY(THIS.PARENT.txtccategory.VALUE)
		   THIS.SET('value',expcat.ccatcode)
		ENDIF
		IF EMPTY(THISFORM.txtccategory.VALUE) AND NOT EMPTY(THIS.VALUE)
		   THISFORM.txtccategory.SET('value',expcat.ccateg)
		ENDIF
		
		lcClass = expcat.cexpclass
		lcWellID = THISFORM.txtcwellid.VALUE
		lcDeck   = thisform.cbodeck.Value 
		
		IF NOT BETWEEN(lcClass,'0','B')
		   lcClass = '0'
		ENDIF
		
		IF NOT EMPTY(THIS.VALUE) AND NOT chkdoi(lcWellID,lcClass,lcDeck)
		   THIS.VALUE = ''
		   THISFORM.txtccategory.SET('value','')
		   RETURN 0
		ENDIF
		
		DODEFAULT()
		
	ENDPROC

	PROCEDURE txtcCategory.GotFocus
		ON KEY LABEL F2 _screen.activeform.cmdLookCat.Click()
		DODEFAULT()
	ENDPROC

	PROCEDURE txtcCategory.InteractiveChange
		IF DODEFAULT()
		   thisform.txtcatcode.value = expcat.ccatcode
		   thisform.cboclass.value   = expcat.cexpclass
		endif   
	ENDPROC

	PROCEDURE txtcCategory.LostFocus
		ON KEY LABEL F2
		DODEFAULT()
	ENDPROC

	PROCEDURE txtcCategory.Valid
		LOCAL lcClass, lcWellID
		
		IF EMPTY(THIS.VALUE)
		   RETURN
		ENDIF
		
		IF 'BRINE' $ UPPER(thisform.txtcCategory.value) OR ;
		   'WATER' $ UPPER(thisform.txtcCategory.value) OR ;
		   'SALT'  $ UPPER(thisform.txtcCategory.value) OR ;
		   'H2O'   $ UPPER(thisform.txtcCategory.value)
		   thisform.spnbbl.enabled = .t.
		else
		   thisform.spnbbl.enabled = .f.
		endif   
		
		SELE expcat
		LOCATE FOR ccateg = ALLT(THIS.VALUE)
		IF FOUND()
		   lcClass = expcat.cexpclass
		   lcWellID = THISFORM.txtcwellid.VALUE
		   lcDeck   = thisform.cbodeck.Value 
		   thisform.txtcatcode.value = expcat.ccatcode
		   IF NOT INLIST(lcClass,'0','1','2','3','4','5','A','B','G','P')
		      lcClass = '0'
		   ENDIF
		
		   IF NOT chkdoi(lcWellID,lcClass,lcDeck)
		      THIS.VALUE = ''
		      thisform.txtcatcode.set('value','')
		      RETURN 0
		   ENDIF
		ENDIF
		DODEFAULT()
		
	ENDPROC

	PROCEDURE txtcOwnerID.GotFocus
		ON KEY LABEL F2 _screen.activeform.cmdOwner.Click()
		DODEFAULT()
	ENDPROC

	PROCEDURE txtcOwnerID.LostFocus
		ON KEY LABEL F2
		DODEFAULT()
		IF (LASTKEY() = 13 OR LASTKEY() = 9) AND not mDown()  &&  Tab or enter, but not a mouseclick
		   *  Add the data to the income table
		   
		   IF NOT chkdoi(thisform.txtcwellid.value,thisform.cboclass.value,thisform.cbodeck.value)
		      thisform.setnextcontrol(thisform.cboClass)
		      RETURN 0
		   ENDIF
		   
		   thisform.adddetail()
		   thisform.setnextcontrol(thisform.txtcCategory)
		   thisform.txtcCategory.SetFocus()
		endif
	ENDPROC

	PROCEDURE txtcOwnerID.Valid
		DODEFAULT()
		
		IF NOT EMPTY(THIS.VALUE)
		   SELECT investor
		   SET ORDER TO cownerid
		   IF SEEK(THIS.VALUE)
		      SELECT wellinv
		      LOCATE FOR cwellid = THISFORM.txtcwellid.VALUE AND cownerid = THIS.VALUE
		      IF NOT FOUND()
		         THIS.VALUE = ''
		         THISFORM.oMessage.DISPLAY('The owner chosen is not an owner in this well. Please choose another.')
		         RETURN 0
		      ENDIF
		   ELSE
		      THISFORM.oMessage.DISPLAY('%msgBadOwnerID')
		      RETURN 0
		   ENDIF
		ENDIF
		
	ENDPROC

	PROCEDURE txtcVendName.GotFocus
		ON KEY LABEL F2 _screen.activeform.cmdLookVend.Click()
		DODEFAULT()
	ENDPROC

	PROCEDURE txtcVendName.InteractiveChange
		IF DODEFAULT()
		   SELECT vendor
		   LOCATE FOR ALLT(cVendName) = ALLT(THIS.VALUE)
		   IF FOUND()
		      THISFORM.txtcvendorid.VALUE = vendor.cvendorid
		      THISFORM.txtcvendorid.REFRESH()
		   ENDIF
		ENDIF
		
	ENDPROC

	PROCEDURE txtcVendName.LostFocus
		ON KEY LABEL F2
		IF NOT EMPTY(this.value) AND NOT LEFT(this.value,1) = '*'
		   thisform.txtcVendorID.value = vendor.cVendorID
		   thisform.txtcVendorID.Refresh()
		ELSE
		   thisform.txtcVendorID.value = ''
		   thisform.txtcVendorID.Refresh()
		ENDIF   
		DODEFAULT()
	ENDPROC

	PROCEDURE txtcVendName.Valid
		DODEFAULT()
		
		SELECT vendor
		LOCATE FOR ALLT(cVendName) = ALLT(this.value)
		IF FOUND()
		   thisform.txtcvendorid.value = vendor.cvendorid
		   thisform.txtcvendorid.refresh()
		ENDIF
		   
	ENDPROC

	PROCEDURE txtcVendorID.When
		RETURN .F.
	ENDPROC

	PROCEDURE txtcWellID.GotFocus
		ON KEY LABEL F2 _screen.activeform.cmdLookWell.Click()
		DODEFAULT()
	ENDPROC

	PROCEDURE txtcWellID.InteractiveChange
		IF DODEFAULT()
		   SELECT wells
		   LOCATE FOR cwellid == this.Value
		   IF FOUND()
		      thisform.txtcWellName.set('value',wells.cWellName)
		   ELSE
		      thisform.txtcWellName.set('value','')
		   ENDIF 
		ENDIF    
	ENDPROC

	PROCEDURE txtcWellID.LostFocus
		LOCAL lcWellID
		
		IF DODEFAULT()
		   ON KEY LABEL F2 *
		   IF THIS.VALUE <> THISFORM.cwellsave      
		      IF LASTKEY() <> -1 AND NOT MDOWN()
		         lcWellID = THIS.VALUE
		         SELE wellexp
		         IF RECC() > 0
		            this.Value = thisform.cWellSave
		            THISFORM.SAVE()
		            this.Value = lcWellID
		         ENDIF
		         SELE wells
		         LOCATE FOR cwellid = lcWellID
		         IF FOUND()
		            IF wells.cwellstat = 'I'
		               THISFORM.lvalidwell = .F.
		            ELSE
		               THISFORM.lvalidwell = .T.
		            ENDIF
		         ENDIF
		         SELE wellinv
		         LOCATE FOR cwellid=lcWellID AND ctypeinv='W' AND lJIB
		         IF FOUND()
		            THISFORM.lJIBWell = .T.
		         ELSE
		            THISFORM.lJIBWell = .F.
		         ENDIF
		         THISFORM.getexpenses()
		      ENDIF
		   ENDIF
		ENDIF
		
	ENDPROC

	PROCEDURE txtcWellID.Valid
		*
	ENDPROC

	PROCEDURE txtcWellID.When
		thisform.cwellsave = this.value
		dodefault()
	ENDPROC

	PROCEDURE txtcWellName.When
		IF DODEFAULT()
		   RETURN .F.
		ENDIF   
	ENDPROC

	PROCEDURE txtTotalExp.When
		IF DODEFAULT()
		   RETURN .F.
		ENDIF
		   
	ENDPROC

ENDDEFINE
