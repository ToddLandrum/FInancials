*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="dmrojibqb.scx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="2" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Cursor2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor6" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor7" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor9" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor10" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor11" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor12" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor13" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor14" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor8" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor16" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor17" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor18" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor19" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor20" UniqueID="" Timestamp="" />

	AutoOpenTables = .F.
	DataSource = .NULL.
	Height = 619
	Left = -4
	Name = "Dataenvironment"
	Top = 232
	Width = 981

	ADD OBJECT 'Cursor1' AS cursor WITH ;
		Alias = "investor", ;
		CursorSource = "investor", ;
		Database = ..\..\codeminenew\ampro_rv\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor1", ;
		Top = 20, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor10' AS cursor WITH ;
		Alias = "invdet", ;
		CursorSource = "invdet", ;
		Database = ..\..\codeminenew\ampro_rv\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor10", ;
		Top = 380, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor11' AS cursor WITH ;
		Alias = "terms", ;
		CursorSource = "terms", ;
		Database = ..\..\codeminenew\ampro_rv\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 150, ;
		Name = "Cursor11", ;
		Top = 380, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor12' AS cursor WITH ;
		Alias = "vendor", ;
		CursorSource = "vendor", ;
		Database = ..\..\codeminenew\ampro_rv\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 290, ;
		Name = "Cursor12", ;
		Top = 380, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor13' AS cursor WITH ;
		Alias = "wellhist", ;
		CursorSource = "wellhist", ;
		Database = ..\..\codeminenew\ampro_rv\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor13", ;
		Top = 500, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor14' AS cursor WITH ;
		Alias = "wells", ;
		CursorSource = "wells", ;
		Database = ..\..\codeminenew\ampro_rv\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 150, ;
		Name = "Cursor14", ;
		Top = 500, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor16' AS cursor WITH ;
		Alias = "arpmthdr", ;
		CursorSource = "arpmthdr", ;
		Database = ..\..\codeminenew\ampro_rv\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 150, ;
		Name = "Cursor16", ;
		Top = 260, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor17' AS cursor WITH ;
		Alias = "options", ;
		CursorSource = "options", ;
		Database = ..\..\codeminenew\ampro_rv\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 414, ;
		Name = "Cursor17", ;
		Top = 145, ;
		Width = 91
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor18' AS cursor WITH ;
		Alias = "sysctl", ;
		CursorSource = "sysctl", ;
		Database = ..\..\codeminenew\ampro_rv\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 430, ;
		Name = "Cursor18", ;
		Top = 260, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor19' AS cursor WITH ;
		Alias = "arpmtdet", ;
		CursorSource = "arpmtdet", ;
		Database = ..\..\codeminenew\ampro_rv\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 570, ;
		Name = "Cursor19", ;
		Top = 260, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor2' AS cursor WITH ;
		Alias = "groups", ;
		CursorSource = "groups", ;
		Database = ..\..\codeminenew\ampro_rv\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 150, ;
		Name = "Cursor2", ;
		Top = 20, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor20' AS cursor WITH ;
		Alias = "roundtmp", ;
		CursorSource = "roundtmp", ;
		Database = ..\..\codeminenew\ampro_rv\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 680, ;
		Name = "Cursor20", ;
		Top = 19, ;
		Width = 91
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor3' AS cursor WITH ;
		Alias = "aropt", ;
		CursorSource = "aropt", ;
		Database = ..\..\codeminenew\ampro_rv\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 290, ;
		Name = "Cursor3", ;
		Top = 20, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor4' AS cursor WITH ;
		Alias = "disbhist", ;
		CursorSource = "disbhist", ;
		Database = ..\..\codeminenew\ampro_rv\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor4", ;
		Top = 140, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor5' AS cursor WITH ;
		Alias = "expcat", ;
		CursorSource = "expcat", ;
		Database = ..\..\codeminenew\ampro_rv\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 150, ;
		Name = "Cursor5", ;
		Top = 140, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor6' AS cursor WITH ;
		Alias = "expense", ;
		CursorSource = "expense", ;
		Database = ..\..\codeminenew\ampro_rv\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 290, ;
		Name = "Cursor6", ;
		Top = 140, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor7' AS cursor WITH ;
		Alias = "glopt", ;
		CursorSource = "glopt", ;
		Database = ..\..\codeminenew\ampro_rv\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor7", ;
		Top = 260, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor8' AS cursor WITH ;
		Alias = "taxcodes", ;
		CursorSource = "taxcodes", ;
		Database = ..\..\codeminenew\ampro_rv\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 420, ;
		Name = "Cursor8", ;
		Top = 23, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor9' AS cursor WITH ;
		Alias = "invhdr", ;
		CursorSource = "invhdr", ;
		Database = ..\..\codeminenew\ampro_rv\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 290, ;
		Name = "Cursor9", ;
		Top = 260, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

ENDDEFINE

DEFINE CLASS formdmrojibqb AS frmrptcriteria OF "appforms.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Runcombo1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkEmail" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkIncludeEmail" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkPDF" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkSummary" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Swgroup1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="LblBegID" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="LblGroup" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="LblEndID" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Swrptlook1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblRunNo" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblAcctDate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtAcctDate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboRcvAccount" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblRcvAccount" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboSortOrder" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkSelected" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblSelected" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: checksupportexp
		*m: createpdf		&& Creates the PDF to email
		*m: getformats
		*p: creportsave
		*p: ojib		&& JIB Processing object
		*p: oxfrx
	*</DefinedPropArrayMethod>

	Caption = "Joint Interest Billing Statements"
	creportsave = .F.
	DataSession = 2
	DoCreate = .T.
	FontSize = 8
	Height = 572
	HelpContextID = 220
	Name = "FormDmrojibQB"
	oxfrx = .NULL.
	Width = 480
	_memberdata = <VFPData>
		<memberdata name="createpdf" display="CreatePDF"/>
		<memberdata name="oxfrx" display="oXFRX"/>
		</VFPData>
	Swrptcriteriabuttons1.chkExport.Alignment = 0
	Swrptcriteriabuttons1.chkExport.Name = "chkExport"
	Swrptcriteriabuttons1.cmdclose.Name = "cmdclose"
	Swrptcriteriabuttons1.cmdPreview.Name = "cmdPreview"
	Swrptcriteriabuttons1.cmdPrint.Name = "cmdPrint"
	Swrptcriteriabuttons1.Left = 123
	Swrptcriteriabuttons1.Name = "Swrptcriteriabuttons1"
	Swrptcriteriabuttons1.TabIndex = 15
	Swrptcriteriabuttons1.Top = 488

	ADD OBJECT 'cboRcvAccount' AS cbocomboboxcustom WITH ;
		BoundColumn = 2, ;
		Height = 20, ;
		Left = 150, ;
		Name = "cboRcvAccount", ;
		TabIndex = 6, ;
		Top = 152, ;
		Width = 228, ;
		ZOrderSet = 15
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="combobox" />

	ADD OBJECT 'cboSortOrder' AS combobox WITH ;
		BoundColumn = 2, ;
		FontSize = 8, ;
		Height = 20, ;
		Left = 150, ;
		Name = "cboSortOrder", ;
		Style = 2, ;
		TabIndex = 10, ;
		Top = 324, ;
		Width = 276
		*< END OBJECT: BaseClass="combobox" />

	ADD OBJECT 'chkEmail' AS chkcheckboxcustom WITH ;
		Alignment = 4, ;
		Caption = "Email Statements to Owners", ;
		FontName = "Segoe UI", ;
		Height = 15, ;
		Left = 150, ;
		Name = "chkEmail", ;
		TabIndex = 13, ;
		Top = 417, ;
		Value = .F., ;
		Visible = .F., ;
		Width = 162, ;
		WordWrap = .T., ;
		ZOrderSet = 3
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkIncludeEmail' AS chkcheckboxcustom WITH ;
		Alignment = 4, ;
		Caption = "Include Owners Marked to Only Have Statements Emailed.", ;
		FontName = "Segoe UI", ;
		Height = 28, ;
		Left = 150, ;
		Name = "chkIncludeEmail", ;
		TabIndex = 14, ;
		Top = 442, ;
		Value = .T., ;
		Visible = .F., ;
		Width = 272, ;
		WordWrap = .T., ;
		ZOrderSet = 3
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkPDF' AS chkcheckboxcustom WITH ;
		Alignment = 4, ;
		Caption = "Export To PDF", ;
		FontName = "Segoe UI", ;
		Height = 15, ;
		Left = 150, ;
		lvaluememory = .T., ;
		Name = "chkPDF", ;
		TabIndex = 12, ;
		Top = 392, ;
		Value = .F., ;
		Visible = .F., ;
		Width = 89, ;
		WordWrap = .T., ;
		ZOrderSet = 3
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkSelected' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Choose Selected Owners", ;
		Left = 165, ;
		Name = "chkSelected", ;
		TabIndex = 7, ;
		Top = 181, ;
		Value = .F.
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkSummary' AS chkcheckboxcustom WITH ;
		Alignment = 4, ;
		Caption = "Include Billing Summary", ;
		FontName = "Segoe UI", ;
		Height = 15, ;
		Left = 150, ;
		lvaluememory = .T., ;
		Name = "chkSummary", ;
		TabIndex = 11, ;
		Top = 367, ;
		Value = .F., ;
		Visible = .T., ;
		Width = 141, ;
		WordWrap = .T., ;
		ZOrderSet = 3
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'Label2' AS label WITH ;
		AutoSize = .T., ;
		Caption = "Sort Order", ;
		FontName = "Segoe UI", ;
		FontSize = 9, ;
		Height = 17, ;
		Left = 42, ;
		Name = "Label2", ;
		TabIndex = 18, ;
		Top = 326, ;
		Width = 56
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'lblAcctDate' AS lbllabelcustom WITH ;
		Caption = "Accounting Date:", ;
		FontName = "Segoe UI", ;
		FontSize = 9, ;
		Left = 49, ;
		Name = "lblAcctDate", ;
		TabIndex = 17, ;
		Top = 95, ;
		Visible = .T.
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'LblBegID' AS lbllabelcustom WITH ;
		Caption = "First Owner:", ;
		FontName = "Segoe UI", ;
		FontSize = 9, ;
		Height = 17, ;
		Left = 49, ;
		Name = "LblBegID", ;
		TabIndex = 4, ;
		Top = 207, ;
		Width = 65
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'LblEndID' AS lbllabelcustom WITH ;
		Caption = "Last Owner:", ;
		FontName = "Segoe UI", ;
		FontSize = 9, ;
		Height = 17, ;
		Left = 49, ;
		Name = "LblEndID", ;
		TabIndex = 8, ;
		Top = 258, ;
		Width = 64
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'LblGroup' AS lbllabelcustom WITH ;
		AutoSize = .T., ;
		Caption = "Group:", ;
		FontName = "Segoe UI", ;
		FontSize = 9, ;
		Height = 17, ;
		Left = 49, ;
		Name = "LblGroup", ;
		TabIndex = 5, ;
		Top = 63, ;
		Visible = .T., ;
		Width = 38, ;
		ZOrderSet = 9
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblRcvAccount' AS lbllabelcustom WITH ;
		Caption = "A/R Account for Previous Balances", ;
		FontName = "Segoe UI", ;
		FontSize = 9, ;
		Left = 47, ;
		Name = "lblRcvAccount", ;
		TabIndex = 16, ;
		Top = 127, ;
		ZOrderSet = 16
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblRunNo' AS lbllabelcustom WITH ;
		Caption = "Run No", ;
		FontName = "Segoe UI", ;
		FontSize = 9, ;
		Left = 49, ;
		Name = "lblRunNo", ;
		TabIndex = 9, ;
		Top = 28, ;
		ZOrderSet = 12
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblSelected' AS lbllabelcustom WITH ;
		Caption = "All Owners Selected", ;
		ForeColor = 0,0,255, ;
		Left = 185, ;
		Name = "lblSelected", ;
		TabIndex = 32, ;
		Top = 242, ;
		Visible = .F.
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Runcombo1' AS runcombo WITH ;
		cshowwhat = J, ;
		Height = 20, ;
		Left = 150, ;
		Name = "Runcombo1", ;
		TabIndex = 1, ;
		Top = 25, ;
		Width = 257, ;
		ZOrderSet = 0
		*< END OBJECT: ClassLib="..\custom\swcontrol.vcx" BaseClass="combobox" />

	ADD OBJECT 'Swgroup1' AS swgroup WITH ;
		Left = 150, ;
		lexcludeall = .T., ;
		Name = "Swgroup1", ;
		TabIndex = 2, ;
		Top = 61, ;
		Visible = .T., ;
		ZOrderSet = 7
		*< END OBJECT: ClassLib="..\custom\swcontrol.vcx" BaseClass="combobox" />

	ADD OBJECT 'Swrptlook1' AS swrptlook WITH ;
		Left = 150, ;
		Name = "Swrptlook1", ;
		TabIndex = 7, ;
		Top = 204, ;
		Swlookupbutton1.Name = "Swlookupbutton1", ;
		Swlookupbutton2.Name = "Swlookupbutton2", ;
		TxtBegID.clistexpression = investor.cOwnerID, ;
		TxtBegID.clistworkarea = investor, ;
		TxtBegID.Name = "TxtBegID", ;
		TxtBegName.Name = "TxtBegName", ;
		TxtEndID.clistexpression = investor.cOwnerID, ;
		TxtEndID.clistworkarea = investor, ;
		TxtEndID.Name = "TxtEndID", ;
		TxtEndName.Name = "TxtEndName"
		*< END OBJECT: ClassLib="..\custom\swcontrol.vcx" BaseClass="container" />

	ADD OBJECT 'txtAcctDate' AS dpk WITH ;
		Height = 20, ;
		Left = 150, ;
		lnocurrentdate = .F., ;
		lrequired = .T., ;
		Name = "txtAcctDate", ;
		TabIndex = 3, ;
		Top = 93, ;
		Width = 67
		*< END OBJECT: ClassLib="..\custom\swdate.vcx" BaseClass="textbox" />
	
	PROCEDURE builddata
		LOCAL tcYear, tcPeriod, tcOwner1, tcOwner2, tcGroup, oJIB
		LOCAL laRpts[1], lcCust1, lcCust2, lcSortOrder, lcYear, ldDate1, ldDate2, ldPmtRcv, llFormatError
		LOCAL llGetFormats, llJIBNotes, llNoJIBBal, llPrintDesc, llReturn, llSummaryRet, lnFiles, lnPmtAmt
		LOCAL lnRunNo, lnx, loError
		LOCAL cAddr3, cCatCode, cExpCateg, cSection, cTaxCode, cTaxDesc, ccustid, cownerid, cownerlistid
		LOCAL dExpDate, nPrevBal, tcDMBatch, tdAcctDate, tnRunNo, llSelected
		
		llReturn = .T.
		
		TRY
		   tcYear    = THISFORM.runcombo1.LISTITEM[thisform.runcombo1.listitemid, 2]
		   tnRunNo   = INT(VAL(THISFORM.runcombo1.LISTITEM[thisform.runcombo1.listitemid, 3]))
		   tcDMBatch = THISFORM.runcombo1.LISTITEM[thisform.runcombo1.listitemid, 5]
		
		   IF tnRunNo  = 0
		      tcGroup    = LEFT(THISFORM.swgroup1.VALUE, 2)
		      tdAcctDate = THISFORM.txtacctdate.VALUE
		   ELSE
		      tcGroup    = THISFORM.runcombo1.LISTITEM[thisform.runcombo1.listitemid, 4]
		      tdAcctDate = CTOD(THISFORM.runcombo1.LISTITEM[thisform.runcombo1.listitemid, 7])
		   ENDIF
		
		   tcOwner1 = THISFORM.swrptlook1.txtBegID.VALUE
		   tcOwner2 = THISFORM.swrptlook1.txtEndID.VALUE
		   llSelected = thisform.chkselected.Value 
		
		   lcSortOrder  = THISFORM.cbosortOrder.VALUE
		
		* Check to see if we need new report formats
		   lnFiles = ADIR(laRpts, m.goapp.crptsfolder + '*.frx')
		
		   llGetFormats = .F.
		
		   IF lnFiles > 0
		      FOR lnx = 1 TO lnFiles
		         IF LOWER(laRpts[lnx, 1]) = 'dmrojibrun.frx'
		            IF laRpts[lnx, 3] < {12/13/2013}
		               llGetFormats = .T.
		               lnx          = lnFiles + 1
		            ENDIF
		         ENDIF
		      ENDFOR
		   ENDIF
		   
		   IF NOT llSelected
		      SELECT cownerid AS cid FROM investor ;
		         INTO CURSOR SELECTED ;
		         WHERE BETWEEN(cownerid,tcOwner1,tcOwner2) ;
		         ORDER BY cid
		   ENDIF
		
		*  Add the custom report formats to the rpts folder if they don't already exist
		   IF lcSortOrder = '2'
		      IF NOT FILE(m.goapp.crptsfolder + 'dmrojibrun1.frx')
		         llGetFormats = .T.
		      ENDIF
		      WAIT CLEAR
		   ELSE
		      IF NOT FILE(m.goapp.crptsfolder + 'dmrojibrun.frx')
		         llGetFormats = .T.
		      ENDIF
		   ENDIF
		
		   IF llGetFormats
		      WAIT WINDOW NOWAIT 'Copying in new report formats...'
		      llFormatError = .F.
		      TRY
		         THISFORM.getformats()
		      CATCH
		         llFormatError = .T.
		      ENDTRY
		      IF NOT llFormatError
		         WAIT WINDOW NOWAIT 'New JIB statement formats were downloaded successfully...' TIMEOUT 3
		      ENDIF
		   ENDIF
		
		   swSELECT('options')
		   llPrintDesc = lAcctDesc
		   llJIBNotes  = lJIBNotes
		
		
		   m.goapp.oQB.dAcctDate = tdAcctDate
		*
		*  Call jibproc to create the (jibowner) and (jibwell) cursors
		*
		   THISFORM.oJIB = CREATEOBJECT('jibproc', tcOwner1, tcOwner2, ;
		        '01', ;
		        tcYear, ;
		        tcGroup, 'O', tdAcctDate, .F., tnRunNo, llSelected)
		
		   IF THISFORM.oJIB.MAIN()
		      swSELECT('invhdr')
		      SCAN FOR cinvtype <> 'J'
		         m.cownerid = ccustid
		         swSELECT('investor')
		         SET ORDER TO cownerid
		         IF SEEK(m.cownerid)
		            swSELECT('invhdr')
		            REPL cinvtype WITH 'J'
		         ENDIF
		      ENDSCAN
		
		**********************************************************
		*  Create the jib invoice work file
		**********************************************************
		      CREATE CURSOR jibinv   ;
		         (ccustid    C(10),   ;
		           cpagebreak C(10), ;
		           lWellPage  L, ;
		           cCustName  C(60),   ;
		           cCustName2 C(40),   ;
		           cAddr1     C(40),   ;
		           cAddr2     C(40),   ;
		           cAddr3     C(40),   ;
		           nstmttype  I,       ;
		           dJIBDate   D,       ;
		           dDueDate   D,       ;
		           cInvNum    C(20),   ;
		           cWellId    C(10),   ;
		           cWellName  C(30),   ;
		           cCounty    C(25),   ;
		           cState     C(2),    ;
		           cPayee     C(60),   ;
		           dExpDate   D,       ;
		           cExpCateg  C(60),   ;
		           cNotes     C(60),   ;
		           nExpTotal  N(12, 2), ;
		           nExpAmount N(12, 2), ;
		           nJibTotal  N(12, 2), ;
		           nPrevBal   N(12, 2), ;
		           nPayments  N(12, 2), ;
		           dpmtrcv    D,       ;
		           cProdYear  C(4),    ;
		           cProdPrd   C(2),    ;
		           nRunNo     I,       ;
		           cRunYear   C(4),    ;
		           nInterest  N(11, 7), ;
		           cTaxCode   C(2),    ;
		           cCatCode   C(4), ;
		           crefid     C(20),   ;
		           cTaxDesc   C(50), ;
		           cSection   C(1))
		
		**********************************************************
		*  Build the jib invoice data
		**********************************************************
		
			  SELECT  jibtemph.ccustid, ;
					  investor.cOwnname AS cCustName, ;
					  IIF(investor.lchktosec, investor.cOwnName2, investor.cOwnName1) AS cCustName2, ;
					  IIF(investor.lchktosec, investor.cAddress2a, investor.caddress1a) AS cAddr1, ;
					  IIF(investor.lchktosec, investor.cAddress2b, investor.caddress1b) AS cAddr2, ;
					  IIF(investor.lchktosec, TRIM(investor.ccity2) + ' ' + investor.cstate2 + ' ' + investor.czip2, TRIM(investor.ccity1) + ' ' + investor.cstate1 + ' ' + investor.czip1) AS cAddr3, ;
					  investor.nstmttype, ;
					  investor.lWellPage, ;
					  jibtemph.dInvDate AS dJIBDate, ;
					  jibtemph.dDueDate, ;
					  jibtemph.cInvNum,  ;
					  jibtemph.nRunNo, ;
					  jibtemph.cRunYear, ;
					  jibtempd.cUnitNo AS cWellId, ;
					  wells.cWellName, ;
					  wells.cCounty, ;
					  wells.cState, ;
					  jibtempd.dExpDate, ;
					  jibtempd.citemid AS cCatCode, ;
					  jibtempd.cItemDesc AS cNotes, ;
					  jibtempd.nExtension AS nExpAmount, ;
					  jibtemph.nInvTot AS nJibTotal, ;
					  jibtempd.nPrice  AS nExpTotal, ;
					  jibtempd.cPayee, ;
					  jibtempd.cProdYear, ;
					  jibtempd.cProdPrd, ;
					  jibtempd.nInterest, ;
					  jibtempd.cworkorder AS crefid, ;
					  jibtempd.cTaxCode ;
				  FROM jibtemph, jibtempd, investor, wells ;
				  WHERE jibtemph.cRunYear = tcYear ;
					  AND jibtemph.nRunNo     = tnRunNo ;
					  AND ccustid in (SELECT cid FROM selected) ;
					  AND jibtemph.ccustid = investor.cownerid ;
					  AND jibtemph.cBatch  = jibtempd.cBatch ;
					  AND jibtempd.cUnitNo = wells.cWellId ;
				  INTO CURSOR temp ;
				  ORDER BY jibtemph.ccustid, jibtempd.cUnitNo, jibtempd.cTaxCode, jibtempd.cProdYear, jibtempd.cProdPrd, jibtempd.citemid
		
		      IF _TALLY = 0
		         llReturn = .F.
		         EXIT 
		      ENDIF
		
		      SELECT jibinv
		      APPEND FROM DBF('temp')
		      USE IN temp
		
		      swselect('taxcodes')
		      SET ORDER TO cTaxCode
		
		      SELECT jibinv
		      SCAN
		* If we're not emailing statments
		* exclude the owners that are marked
		* to only get emailed statements.
		         IF NOT THISFORM.chkincludeEmail.VALUE AND ;
		               NOT THISFORM.chkemail.VALUE
		            IF jibinv.nstmttype = 3
		               DELETE NEXT 1
		            ENDIF
		         ENDIF
		         m.cTaxCode  = cTaxCode
		         m.cExpCateg = cExpCateg
		         m.cCatCode  = cCatCode
		         swselect('expcat')
		         SET ORDER TO cCatCode
		         IF SEEK(m.cCatCode)
		            m.cTaxCode  = cTaxCode
		            m.cExpCateg = cCateg
		            IF llPrintDesc
		               m.cExpCateg = cDescrip
		            ENDIF
		*  Printing description from bills takes precedence, but they shouldn't be able to have both marked anyway
		            IF llJIBNotes
		               m.cExpCateg = jibinv.cNotes
		            ENDIF
		         ELSE
		*  If there's no match, it may be something like a pre-pay, which already has a description built in.  Use it instead.
		            m.cExpCateg = jibinv.cNotes
		         ENDIF
		         m.dExpDate = jibinv.dExpDate
		         swselect('taxcodes')
		         DO CASE
		            CASE SEEK(m.cTaxCode)
		               m.cTaxDesc = cDesc
		               m.cSection = 'A'
		            CASE m.cTaxCode == '{P'
		               m.cTaxDesc = '** ' + ALLTRIM(jibinv.cWellId) + ' Prepayment Applied **'
		               m.cSection = 'B'
		               m.dExpDate = {}
		            OTHERWISE
		               m.cTaxDesc = 'Lease Operating Expense '
		               m.cSection = 'A'
		         ENDCASE
		         SELECT jibinv
		         REPL cTaxCode WITH m.cTaxCode, ;
		            cTaxDesc WITH m.cTaxDesc, ;
		            cExpCateg WITH m.cExpCateg, ;
		            cSection  WITH m.cSection, ;
		            dExpDate  WITH m.dExpDate
		      ENDSCAN
		
		      SELE jibinv
		      GO TOP
		      lcCust1     = ccustid
		      GO BOTT
		      lcCust2     = ccustid
		
		      IF tnRunNo = 1
		* If this is the 1st run of the year,
		* Find out what the last run of last year was.
		         lcYear  = STR(VAL(tcYear) - 1, 4)
		         lnRunNo = getrunno(lcYear, .F., 'J')
		      ELSE
		*  If this is a new run, get the last run
		*  for this year.
		         IF tnRunNo = 0
		            lnRunNo = getrunno(tcYear, .F., 'J')
		            tcYear  = ALLT(STR(YEAR(tdAcctDate)))
		         ELSE
		            lnRunNo  = tnRunNo - 1
		         ENDIF
		         lcYear   = tcYear
		      ENDIF
		
		      swSELECT('sysctl')
		      LOCATE FOR cYear = lcYear AND nRunNo = lnRunNo AND cTypeClose = 'J' AND cgroup == tcGroup
		      IF FOUND()
		         ldDate1 = dAcctDate
		      ELSE
		         ldDate1 = tdAcctDate - 30
		      ENDIF
		
		      IF tnRunNo = 0
		         ldDate2 = tdAcctDate
		      ELSE
		         ldDate2 = tdAcctDate
		      ENDIF
		
		      IF EMPTY(ldDate1)
		         ldDate1 = ldDate2 - 30
		      ENDIF
		
		      CREATE CURSOR jibbal ;
		         (cownerlistid C(36), ;
		           cownerid     C(10), ;
		           cOwnname     C(60), ;
		           ncurrent     N(12, 2), ;
		           ndays30      N(12, 2), ;
		           ndays60      N(12, 2), ;
		           ndays90      N(12, 2))
		
		
		*  Check to see if the previous jib balances should be printed on the statement
		      swSELECT('options')
		      llNoJIBBal = lNoJIBBal
		
		      IF NOT llNoJIBBal AND m.goapp.oqb.lqbactive
		         IF THISFORM.cboRcvAccount.VALUE = '** All Accounts **'
		            IF VAL(m.goapp.oQB.QBFCVersion) < 5
		               m.goapp.oQB.qbbal(ldDate2, tcGroup, lcYear, lnRunNo, tcOwner1, tcOwner2, .F.)
		            ENDIF
		            m.goapp.oQB.qbpmts(ldDate2, ldDate1 + 1, tcOwner1, tcOwner2)
		         ELSE
		            IF VAL(m.goapp.oQB.QBFCVersion) < 5
		               m.goapp.oQB.qbbal(ldDate2, tcGroup, lcYear, lnRunNo, tcOwner1, tcOwner2, THISFORM.cboRcvAccount.VALUE)
		            ENDIF
		            m.goapp.oQB.qbpmts(ldDate2, ldDate1 + 1, tcOwner1, tcOwner2, THISFORM.cboRcvAccount.VALUE)
		         ENDIF
		
		         SELE jibtemph
		         SCAN FOR BETWEEN(ccustid, tcOwner1, tcOwner2)
		            m.ccustid  = ccustid
		            m.nPrevBal = 0
		            swselect('investor')
		            SET ORDER TO cownerid
		            IF SEEK(m.ccustid)
		               m.cownerlistid = clistid
		               WAIT WIND NOWAIT 'Retrieving prior balance and payments for: ' + ALLT(cOwnname)
		               IF VAL(m.goapp.oQB.QBFCVersion) > 4
		                  m.nPrevBal = m.goapp.oQB.qbOwnerBal(m.ccustid, ldDate2, THISFORM.cboRcvAccount.VALUE)
		               ENDIF
		               lnPmtAmt = 0
		               ldPmtRcv = {}
		               IF USED('jibPmts')
		                  SELECT jibPmts
		                  SCAN FOR cownerlistid = m.cownerlistid
		                     lnPmtAmt   = lnPmtAmt + nPmtAmt
		                     ldPmtRcv   = dRecDate
		                     m.nPrevBal = m.nPrevBal + nPmtAmt
		                  ENDSCAN
		               ENDIF
		               IF tnRunNo # 0
		* Add this invoice balance back into the previous balance if the run is already closed               
		                  SELECT jibinv
		                  LOCATE FOR ccustid == m.ccustid
		                  IF FOUND()
		                     m.njibtotal = njibtotal
		                     m.nPrevBal = m.nPrevBal - m.nJIBTotal
		                  ENDIF 
		               ENDIF    
		            ELSE
		               LOOP
		            ENDIF
		
		            SELECT jibinv
		            SCAN FOR ccustid == m.ccustid
		               m.cAddr3   = cAddr3
		               IF EMPTY(cAddr2)
		                  REPLACE cAddr2 WITH m.cAddr3, ;
		                     cAddr3 WITH ' '
		               ENDIF
		
		               IF VAL(m.goapp.oQB.QBFCVersion) < 5
		                  SELECT jibbal
		                  LOCATE FOR cownerid = m.ccustid
		                  IF FOUND()
		                     m.nPrevBal     = ncurrent + ndays30 + ndays60 + ndays90
		                     m.cownerlistid = cownerlistid
		                  ELSE
		                     LOOP
		                  ENDIF
		               ENDIF
		
		               SELECT jibinv
		               REPLACE nPrevBal  WITH m.nPrevBal, ;
		                  nPayments WITH lnPmtAmt, ;
		                  dpmtrcv   WITH ldPmtRcv
		            ENDSCAN
		         ENDSCAN
		      ENDIF
		
		      IF lcSortOrder = '2'
		         SELECT jibinv
		         INDEX ON ccustid + cWellId + cTaxCode + cExpCateg + cProdYear + cProdPrd + cPayee TAG jibkey
		      ELSE
		         SELECT jibinv
		         INDEX ON ccustid + cWellId + cTaxCode + cProdYear + cProdPrd + cExpCateg + cPayee TAG jibkey
		      ENDIF
		
		* Call the Summary processing if requested
		      IF THISFORM.chkSummary.VALUE
		         llSummaryRet = THISFORM.oJIB.BuildSummary()
		      ENDIF
		
		      IF lcSortOrder = '2'
		         IF FILE('rpts\dmrojibcust1.frx')
		            THISFORM.cReportName = 'rpts\dmrojibcust1.frx'
		         ELSE
		            IF FILE('rpts\dmrojibrun1.frx')
		               THISFORM.cReportName = 'rpts\dmrojibrun1.frx'
		            ELSE
		               MESSAGEBOX('The required report format can not be found. Contact SherWare to get the updated format.', 16, 'Missing Report Format')
		               llReturn = .F.
		               EXIT 
		            ENDIF
		         ENDIF
		      ELSE
		         IF FILE('rpts\dmrojibcust.frx')
		            THISFORM.cReportName = 'rpts\dmrojibcust.frx'
		         ELSE
		            THISFORM.cReportName = 'rpts\dmrojibrun.frx'
		         ENDIF
		      ENDIF
		
		      THISFORM.ctitle1     = ''
		      THISFORM.ctitle2     = ''
		      THISFORM.cReportSave = THISFORM.cReportName
		      llReturn             = .T.
		   ELSE
		      llReturn = .F.
		   ENDIF
		CATCH TO loError
		   llReturn = .F.
		   DO errorlog WITH 'BuildData', loError.LINENO, 'Owner JIB Stmts', loError.ERRORNO, loError.MESSAGE
		   MESSAGEBOX('Unable to process the report at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		        'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		RETURN llReturn
	ENDPROC

	PROCEDURE checksupportexp
		*********************
		LOCAL lcCode, lcClient, lnCode, lnClient, oRegCode
		LOCAL ldCurrentDate, ldExpDate, llReturn, lnBytes, loError
		*:Global fh
		
		llReturn = .T.
		
		TRY
		   SET PROCEDURE TO swregcode ADDITIVE
		* Start the regcode object
		   oRegCode = CREATEOBJECT('swregcode', SYS(5) + CURDIR() + 'datafiles\')
		
		* If demo mode bail out
		   IF NOT oRegCode.GetOpt(5)
		      llReturn = .T.
		      EXIT 
		   ENDIF
		
		   lnClient = oRegCode.GetCode(1)
		   lcCode   = oRegCode.GetCode(2)
		
		* Get the support expiration date
		   ldExpDate = oRegCode.Checksum(lnClient, lcCode, .F., .T.)
		
		   IF ldExpDate >= DATE()
		      IF FILE('datafiles\swconfig.daa', 1)
		         fh            = FOPEN('datafiles\swconfig.daa')
		         ldCurrentDate = FGETS(fh)
		         FCLOSE(fh)
		         ldCurrentDate = GOMONTH(CTOD(ldCurrentDate), -14)
		         IF ldExpDate < ldCurrentDate
		            MESSAGEBOX('Your SherWare Support Subscription Has Expired. ' + CHR(10) + ;
		                 'Expiration Date: ' + DTOC(ldExpDate) + CHR(10) + ;
		                 'Please contact SherWare Inc. to renew your support subscription. ' + CHR(10) + ;
		                 'Phone: (888) 262-3115  Fax: (866) 338-1254  Email: sales@sherware.com', 48, 'Expired Support Subscription')
		            llReturn = .F.
		            EXIT
		         ENDIF
		      ENDIF
		      llReturn = .T.
		      EXIT
		   ELSE
		      MESSAGEBOX('Your SherWare Support Subscription Has Expired. ' + CHR(10) + ;
		           'Expiration Date: ' + DTOC(ldExpDate) + CHR(10) + ;
		           'Please contact SherWare Inc. to renew your support subscription. ' + CHR(10) + ;
		           'Phone: (330) 262-0200  Fax: (866) 338-1254  Email: sales@sherware.com', 48, 'Expired Support Subscription')
		      IF NOT FILE('datafiles\swconfig.daa', 1)
		         fh        = FCREATE('datafiles\swconfig.daa')
		         ldExpDate = DTOC(GOMONTH(DATE(), 14))
		         lnBytes   = FWRITE(fh, ldExpDate)
		         FCLOSE(fh)
		      ENDIF
		      llReturn = .F.
		   ENDIF
		CATCH TO loError
		   llReturn = .F.
		   DO errorlog WITH 'CheckSupportExp', loError.LINENO, 'Owner JIB Stmts', loError.ERRORNO, loError.MESSAGE
		   MESSAGEBOX('Unable to process the report at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		        'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		RETURN llReturn
		
		
	ENDPROC

	PROCEDURE createpdf		&& Creates the PDF to email
	ENDPROC

	PROCEDURE getformats
		LOCAL lcLibrary
		LOCAL loIP AS 'wwftp'
		LOCAL lcSourceFile, lcTargetFile, llReturn, llSupport, lnResult, loerror
		
		llReturn = .T.
		
		TRY
		   lcLibrary = SET('library')
		
		   llSupport = checksupportexp()
		
		   IF NOT llSupport
		      llReturn = .F.
		      EXIT
		   ENDIF
		
		   IF MESSAGEBOX('This utility will download new JIB Statement report formats for the JIB statements.' + ;
		                 'The new formats will need to be installed before viewing the statements.' + CHR(10) + CHR(10) + ;
		           'Do you want to continue?', 36, 'Download JIB Stmt Formats') = 7
		      llReturn = .F.
		      EXIT
		   ENDIF
		
		   lcSourceFile = 'jibstmt.zip'
		   lcTargetFile = m.goapp.cCommonFolder+'jibstmt.zip'
		   lcDescription = "new JIB Statement report formats"
		   
		   loUpdate              = m.goApp.oUpdate
		   loUpdate.cSourceFile  = lcSourceFile
		   loUpdate.cTargetFile  = lcTargetFile
		   loUpdate.cDescription = lcDescription
		   loUpdate.cUnzipTo     = m.goApp.cRptsFolder
		   llReturn              = loUpdate.GetUpdate()
		
		    IF NOT EMPTY(loUpdate.cErrorMessage)
		       MESSAGEBOX(loUpdate.cErrorMessage,0,'Update Files')
		    ENDIF 
		
		CATCH TO loerror
		   llReturn = .F.
		   DO errorlog WITH 'GetFormats', loerror.LINENO, 'Owner JIB Stmts', loerror.ERRORNO, loerror.MESSAGE
		   MESSAGEBOX('Unable to get the new JIB Stmt formats at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		        'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		RETURN llReturn
		
	ENDPROC

	PROCEDURE Init
		DODEFAULT()
		Local lnListCount
		
		swSELECT('investor')
		SET ORDER TO cOwnerID
		GO TOP
		
		THISFORM.swrptlook1.txtBegName.VALUE = cOwnname
		THISFORM.swrptlook1.txtBegID.VALUE = cOwnerID
		GO BOTTOM
		
		THISFORM.swrptlook1.txtEndName.VALUE = cOwnname
		THISFORM.swrptlook1.txtEndID.VALUE = cOwnerID
		
		
	ENDPROC

	PROCEDURE Load
		IF DODEFAULT()
		   *  Get the cursor of QuickBooks Accounts
		   m.goApp.oQB.QBAccounts('',.F.,.T.,thisform.datasessionid)
		ENDIF   
	ENDPROC

	PROCEDURE report
		LPARAMETERS cbutton
		LOCAL lnResult, lcAlias, lcTemp, oPDF, llResult, llError, lnSepPage
		LOCAL lcAcctDate, lcBadEmail, lcEmail, lcFile, lcOutputFile, lcSelect, lcSortOrder, lcTitle1
		LOCAL lcTitle2, lcYear, llPrinted, lnCount, lnCountCusts, lnRunNo, lnTotalCusts, loError
		*:Global cCustID, cGrpName, cProcessor, cProducer, glGrpName, osendmail, pState, pZip, paddr1
		*:Global paddr2, paddr3, pcCustID, pcity, pcontact, pphone, ptax, tcRunNo, tcYear
		
		PRIV lcTitle1, lcTitle2, lcSortOrder, lcSelect, glGrpName, m.cGrpName, llPrinted, pcCustID
		
		llReturn = .T.
		
		TRY
		   * Check for the parameter. If it's not a character we're being called by the toolbar print button
		   * Bail out if we got here by the toolbar button.
		   IF VARTYPE(cbutton) # 'C'
		      llReturn = .F.
		      EXIT
		   ENDIF
		
		   lcTemp    = ADDBS(SYS(2023))    && Get temp location
		   llResult  = .T.
		   lnSepPage = 0
		
		   lcBadEmail = ''
		
		   IF m.cbutton = 'S' AND THISFORM.chkpDF.VALUE
		      THISFORM.chkpDF.VALUE = .F.
		   ENDIF
		
		   * Check on the existence of the application object
		   * if it doesn't exist, we're running in development
		   * mode and need to initialize the company address info.
		   IF TYPE('m.goApp') = 'O'
		      m.cProducer = m.goapp.ccompanyname
		      m.paddr1    = m.goapp.cAddress1
		      m.paddr2    = m.goapp.cAddress2
		      m.paddr3    = m.goapp.cAddress3
		      m.pcontact  = m.goapp.cContact
		      m.pphone    = m.goapp.cPhoneNo
		   ELSE
		      m.cProducer = 'SherWare, Inc.'
		      m.paddr1    = 'PO Box 223'
		      m.paddr2    = 'Wooster, OH  44691'
		      m.paddr3    = ''
		      m.ptax      = '99-9999999'
		      m.pcontact  = 'Phil Sherwood'
		      m.pphone    = '3302623115'
		      m.pcity     = 'Wooster'
		      m.pState    = 'OH'
		      m.pZip      = '44691'
		   ENDIF
		
		   * Check to See if the period is closed and set the
		   * flag appropriately
		   PUBLIC llFinal
		   llFinal = THISFORM.oJIB.Checkhist()
		
		
		   *
		   *  Check to see if the requirements for calling this method are met.
		   *
		   ASSERT TYPE('this.cReportName') = 'C' MESSAGE 'You must set the cReportName property to use this class'
		   ASSERT INLIST(m.cbutton, 'F', 'P', 'S')  MESSAGE 'The parm to the report method must be either "F" or "P"'
		
		   IF TYPE('this.ctitle1') # 'C'
		      THIS.ctitle1 = ''
		   ENDIF
		   IF TYPE('this.ctitle2') # 'C'
		      THIS.ctitle2 = ''
		   ENDIF
		
		   lcAlias = ALIAS()
		
		   llPrinted = .F.
		
		   *
		   *  Check on using group name in place of company name
		   *
		   IF NOT USED('options')
		      IF TYPE('m.goApp') = 'O'
		         USE (ALLTRIM(m.goapp.cdatafilepath) + 'options') IN 0
		      ENDIF
		   ENDIF
		   IF NOT USED('groups')
		      IF TYPE('m.goApp') = 'O'
		         USE (ALLTRIM(m.goapp.cdatafilepath) + 'groups') IN 0
		      ENDIF
		   ENDIF
		
		   * If the form doesn't have a swgroup control
		   * don't try to get the company name from the group
		   IF TYPE('thisform.swgroup1') # 'O'
		      glGrpName = .F.
		   ELSE
		      swSELECT('options')
		      GO TOP
		      glGrpName = lGrpName
		      IF glGrpName
		         swSELECT('groups')
		         SET ORDER TO cgroup
		         * If the Runcombo dropdown exists, and the value isn't New Run, get the group from that
		         IF VARTYPE(THISFORM.RunCombo1) = 'O'  AND THISFORM.RunCombo1.VISIBLE AND THISFORM.RunCombo1.ENABLED
		            IF NOT 'NEW RUN' $ UPPER(THISFORM.RunCombo1.VALUE)
		               IF SEEK(THISFORM.RunCombo1.LISTITEM(THISFORM.RunCombo1.LISTITEMID, 4))
		                  m.cGrpName = cDesc
		               ELSE
		                  m.cGrpName = ''
		               ENDIF
		            ELSE
		               IF SEEK(LEFT(THISFORM.swgroup1.VALUE, 2))
		                  m.cGrpName = cDesc
		               ELSE
		                  IF LEFT(THISFORM.swgroup1.VALUE, 2) = '**'
		                     m.cGrpName = 'All Companies'
		                  ELSE
		                     m.cGrpName = ''
		                  ENDIF
		               ENDIF
		            ENDIF
		         ELSE
		            IF SEEK(LEFT(THISFORM.swgroup1.VALUE, 2))
		               m.cGrpName = cDesc
		            ELSE
		               IF LEFT(THISFORM.swgroup1.VALUE, 2) = '**'
		                  m.cGrpName = 'All Companies'
		               ELSE
		                  m.cGrpName = ''
		               ENDIF
		            ENDIF
		         ENDIF
		      ELSE
		         m.cGrpName = ''
		      ENDIF
		   ENDIF
		
		   *
		   *  Make the cProducer variable a default value for development purposes
		   *
		   IF TYPE('m.goApp') = 'O'
		      m.cProducer = m.goapp.ccompanyname
		      IF m.goapp.lDemo
		         m.cProducer = 'Demo Version of Software'
		         m.cGrpName  = m.cProducer
		      ENDIF
		   ELSE
		      m.cProducer = 'Sample Development Company'
		   ENDIF
		
		   IF TYPE('m.cProcessor') # 'C'
		      m.cProcessor = ''
		   ENDIF
		
		   IF EMPTY(m.cProducer) OR m.cProducer = "''"
		      m.cProducer = 'Sample Development Company'
		   ENDIF
		
		   lcTitle1    = THISFORM.ctitle1
		   lcTitle2    = THISFORM.ctitle2
		   lcSortOrder = THISFORM.cSortOrder
		   lcSelect    = THISFORM.cSelectCriteria
		   lcYear      = THISFORM.RunCombo1.LISTITEM[thisform.runcombo1.listitemid, 2]
		   lnRunNo     = INT(VAL(THISFORM.RunCombo1.LISTITEM[thisform.runcombo1.listitemid, 3]))
		   lcAcctDate  = THISFORM.RunCombo1.LISTITEM[thisform.runcombo1.listitemid, 7]
		
		   *
		   *  Set defaults for titles and criteria if not in correct format
		   *
		   IF TYPE('lcTitle1') # 'C'
		      lcTitle1 = ''
		   ENDIF
		   IF TYPE('lcTitle2') # 'C'
		      lcTitle2 = ''
		   ENDIF
		   IF TYPE('lcSortOrder') # 'C'
		      lcSortOrder = ''
		   ENDIF
		   IF TYPE('lcSelect') # 'C'
		      lcSelect = ''
		   ENDIF
		
		   SELECT (lcAlias)
		
		
		   IF m.goapp.oOptions.lDecimalInts
		      lcTempPath = SYS(2023)
		      lcRptName  = SYS(3)
		      lcReport   = ADDBS(lcTempPath) + ALLTRIM(lcRptName) + '.frx'
		      USE (THISFORM.cReportname) IN 0 ALIAS rptformat
		      SELECT rptformat
		      COPY TO (lcReport)
		      USE (lcReport) IN 0 ALIAS newrpt
		      SELECT newrpt
		      SCAN
		         REPLACE EXPR WITH STRTRAN(EXPR, '%', ' ')
		      ENDSCAN
		      USE IN newrpt
		      USE IN rptformat
		      THISFORM.cReportname = ADDBS(lcTempPath) + ALLTRIM(lcRptName) + '.frx'
		   ENDIF
		
		   * Disable F1 Help
		   ON KEY LABEL F1 *
		
		   * Disable the picklist key
		   ON KEY LABEL F2 *
		
		   * Get the count of owners who should have each well on its own page
		   SELECT jibinv
		   COUNT FOR lWellPage TO lnSepPage
		
		   lnSent = 0
		
		   *
		   *  Send the report to the proper location based upon the button pressed.
		   DO CASE
		
		      CASE m.cbutton = 'P'
		         SET REPORTBEHAVIOR 80
		         llError = .F.
		         TRY
		            IF THISFORM.chksUMMARY.VALUE
		               * Include Summary Reports before and after the JIB Statement
		
		               * Do the statement as a regular VFP report
		               SET REPORTBEHAVIOR 90
		
		               LOCAL loPreviewContainer, loReportListener
		
		               *-- Create the Report Listener
		               LOCAL loSession, lnRetval, loXFF, loPreview, loScripts
		               loSession                 = EVALUATE([xfrx("XFRX#LISTENER")])
		               loUpdate                  = CREATEOBJECT('updatelistener')
		               loUpdate.thermFormCaption = ALLTRIM(THIS.cFriendlyName) + ' Report in progress ...'
		               loSession.successor       = loUpdate
		
		               lcFile       = 'OJIB' + '_' + lcYear + '_' + PADL(lnRunNo, 3, '0') + '.pdf'
		               lcFile       = STRTRAN(lcFile, ' ', '_')
		               lcOutputFile = m.goapp.cCommonFolder + lcFile
		
		               IF THISFORM.chkpDF.VALUE
		                  lnRetval  = loSession.SetParams(lcOutputFile, , , , , , 'PDF') && PDF
		               ELSE
		                  lnRetval  = loSession.SetParams(, , , , , , 'XFF') && no name = just in memory
		               ENDIF
		
		               loSession.PRINTJOBNAME         = THIS.cFriendlyName
		               loSession.CallEvaluateContents = 2
		
		               IF NOT THISFORM.chkpDF.VALUE
		                  loSession.LISTENERTYPE         = 0
		               ENDIF
		
		               loSession.PRINTJOBNAME         = THISFORM.CAPTION
		
		               SELECT cCustID, lWellPage FROM jibinv INTO CURSOR tempcust ORDER BY cCustID GROUP BY cCustID
		               lnTotalCusts = _TALLY
		               lnCountCusts = 1
		               SELECT tempcust
		               SCAN
		                  m.cCustID = cCustID
		
		                  SELECT jibinv
		                  LOCATE FOR cCustID == m.cCustID
		                  IF FOUND()
		                     SCATTER MEMVAR
		                     SELECT summary_well
		                     SCAN FOR cCustID == m.cCustID
		                        REPLACE cinvnum WITH m.cinvnum, ;
		                           nrunno    WITH m.nrunno, ;
		                           crunyear  WITH m.crunyear, ;
		                           djibdate  WITH m.djibdate, ;
		                           dduedate  WITH m.dduedate, ;
		                           njibtotal WITH m.njibtotal, ;
		                           nprevbal  WITH m.nprevbal, ;
		                           npayments WITH m.npayments
		                     ENDSCAN
		
		                     SELECT summary_cat
		                     SCAN FOR cCustID == m.cCustID
		                        REPLACE cinvnum WITH m.cinvnum, ;
		                           nrunno    WITH m.nrunno, ;
		                           crunyear  WITH m.crunyear, ;
		                           djibdate  WITH m.djibdate, ;
		                           dduedate  WITH m.dduedate, ;
		                           njibtotal WITH m.njibtotal, ;
		                           nprevbal  WITH m.nprevbal, ;
		                           npayments WITH m.npayments
		                     ENDSCAN
		                     * Summary by Well
		                     IF FILE(m.goapp.cRptsFolder + 'dmrojibsummcust.frx')
		                        lcSumRpt = m.goapp.cRptsFolder + 'dmrojibsummcust.frx'
		                     ELSE
		                        lcSumRpt = 'dmrojibsumm.frx'
		                     ENDIF
		                     SELECT summary_well
		                     SET FILTER TO cCustID == m.cCustID
		                     REPORT FORM (lcSumRpt) TO PRINTER PROMPT OBJECT loSession NOWAIT NOPAGEEJECT
		                     * JIB statement
		                     SELECT jibinv
		                     SET FILTER TO cCustID == m.cCustID
		                     IF tempcust.lWellPage
		                        REPLACE cPageBreak WITH cWellID FOR cCustID == m.cCustID
		                     ENDIF
		                     REPORT FORM (THIS.cReportname) TO PRINTER PROMPT OBJECT loSession NOPAGEEJECT NOWAIT
		                     * Summary by Expense Category
		
		                     IF FILE(m.goapp.cRptsFolder + 'dmrojibsumcatcust.frx')
		                        lcSumRpt = m.goapp.cRptsFolder + 'dmrojibsumcatcust.frx'
		                     ELSE
		                        lcSumRpt = 'dmrojibsumcat.frx'
		                     ENDIF
		                     SELECT summary_cat
		                     SET FILTER TO cCustID == m.cCustID
		                     IF lnCountCusts < lnTotalCusts
		                        REPORT FORM (lcSumRpt) TO PRINTER PROMPT OBJECT loSession NOPAGEEJECT NOWAIT
		                     ELSE
		                        REPORT FORM (lcSumRpt) TO PRINTER PROMPT OBJECT loSession NOWAIT
		                     ENDIF
		                     lnCountCusts = lnCountCusts + 1
		                  ENDIF
		               ENDSCAN
		            ELSE
		               * No summary reports, just the JIB statement
		               * Do the statement as a regular VFP report
		               TRY
		                  SET REPORTBEHAVIOR 90
		
		                  LOCAL loSession, lnRetval, loXFF, loPreview, loScripts
		                  loSession                 = EVALUATE([xfrx("XFRX#LISTENER")])
		                  loUpdate                  = CREATEOBJECT('updatelistener')
		                  loUpdate.thermFormCaption = ALLTRIM(THIS.cFriendlyName) + ' Report in progress ...'
		                  loSession.successor       = loUpdate
		
		                  lcFile       = 'OJIB' + '_' + lcYear + '_' + PADL(lnRunNo, 3, '0') + '.pdf'
		                  lcFile       = STRTRAN(lcFile, ' ', '_')
		                  lcOutputFile = m.goapp.cCommonFolder + lcFile
		
		                  IF THISFORM.chkpDF.VALUE
		                     lnRetval  = loSession.SetParams(lcOutputFile, , , , , , 'PDF') && PDF
		                  ELSE
		                     lnRetval               = loSession.SetParams(, , , , , , 'XFF') && no name = just in memory
		                     loSession.LISTENERTYPE = 0
		                  ENDIF
		                  loSession.SetOtherParams('PRINT_BOOKMARKS', .T.)
		                  loSession.PRINTJOBNAME         = THISFORM.CAPTION
		                  loSession.CallEvaluateContents = 2
		
		                  loSession.PRINTJOBNAME         = THISFORM.CAPTION
		
		                  SELECT cCustID, lWellPage FROM jibinv INTO CURSOR tempcust ORDER BY cCustID GROUP BY cCustID
		                  lnCustMax   = _TALLY
		                  lnCustCount = 0
		                  SCAN
		                     m.cCustID    = cCustID
		
		                     lnCustCount = lnCustCount + 1
		                     SELECT jibinv
		                     SET FILTER TO cCustID == m.cCustID
		                     IF tempcust.lWellPage
		                        REPLACE cPageBreak WITH cWellID FOR cCustID == m.cCustID
		                     ENDIF
		                     IF lnCustCount = lnCustMax
		                        REPORT FORM (THIS.cReportname) TO PRINTER PROMPT OBJECT loSession NOWAIT
		                     ELSE
		                        REPORT FORM (THIS.cReportname) TO PRINTER PROMPT OBJECT loSession NOWAIT NOPAGEEJECT
		                     ENDIF
		                  ENDSCAN
		               CATCH TO loError
		                  llError = .T.
		               ENDTRY
		               IF llError
		                  IF loError.ERRORNO = 1958
		                     MESSAGEBOX('There was an error loading the printer driver. Make sure you have a valid printer selected or setup as your default printer.', 16, 'Windows Printer Driver Error')
		                  ELSE
		                     MESSAGEBOX('Error sending the report to the printer.' + CHR(10) + ;
		                          'Error: ' + loError.MESSAGE, 16, 'Report Print Problem')
		                  ENDIF
		               ENDIF
		            ENDIF
		         CATCH TO loError
		            llReturn = .F.
		         ENDTRY
		
		         IF llError
		            IF loError.ERRORNO = 1958
		               MESSAGEBOX('There was an error loading the printer driver. Make sure you have a valid printer selected or setup as your default printer.', 16, 'Windows Printer Driver Error')
		            ELSE
		               MESSAGEBOX('Error sending the report to the printer.' + CHR(10) + ;
		                    'Error: ' + loError.MESSAGE, 16, 'Report Print Problem')
		            ENDIF
		         ENDIF
		
		      CASE m.cbutton = 'S'
		         SET REPORTBEHAVIOR 80
		         TRY
		            IF 'Export' $ THISFORM.swrptcriteriabuttons1.cmdPreview.CAPTION
		               DO FORM exportcsv WITH THISFORM.CAPTION, THISFORM.cReportname, lcAlias, lcTitle1, lcTitle2, lcSortOrder, lcSelect
		            ELSE
		               IF THISFORM.chksUMMARY.VALUE
		                  * Include Summary Reports before and after the JIB Statement
		
		                  * Do the statement as a regular VFP report
		                  SET REPORTBEHAVIOR 90
		                  LOCAL loPreviewContainer, loReportListener
		                  LOCAL loSession, lnRetval, loXFF, loPreview, loScripts
		                  loSession                 = EVALUATE([xfrx("XFRX#LISTENER")])
		                  loUpdate                  = CREATEOBJECT('updatelistener')
		                  loUpdate.thermFormCaption = ALLTRIM(THISFORM.CAPTION) + ' Report in progress ...'
		                  loSession.successor       = loUpdate
		                  loSession.SetOtherParams('PRINT_BOOKMARKS', .T., 0)
		
		                  IF NOT THISFORM.chkEmail.VALUE
		                     lnRetval  = loSession.SetParams(, , , , , , 'XFF') && no name = just in memory
		                  ENDIF
		
		                  loSession.PRINTJOBNAME         = THIS.cFriendlyName
		                  loSession.CallEvaluateContents = 2
		
		                  IF THISFORM.chkEmail.VALUE
		                     SELE cCustID, investor.cemail, investor.lWellPage FROM jibinv JOIN investor ON jibinv.cCustID = investor.cownerid ;
		                        WHERE NOT EMPTY(investor.cemail) INTO CURSOR tempcust ORDER BY cCustID GROUP BY cCustID
		                  ELSE
		                     SELECT cCustID, SPACE(10) AS cemail, lWellPage FROM jibinv INTO CURSOR tempcust ORDER BY cCustID GROUP BY cCustID
		                  ENDIF
		                  lnTotalCusts = _TALLY
		                  lnCountCusts = 1
		                  SELECT tempcust
		                  SCAN
		                     m.cCustID = cCustID
		                     lcEmail   = cemail
		
		                     IF THISFORM.chkEmail.VALUE AND NOT '@' $ lcEmail
		                        lcBadEmail = lcBadEmail + tempcust.cCustID + ' - ' + investor.cownname + CHR(10)
		                        LOOP
		                     ENDIF
		
		                     IF THISFORM.chkEmail.VALUE
		                        lcFile       = 'OJIB' + '_' + ALLTRIM(tempcust.cCustID) + '_' + lcYear + '_' + PADL(lnRunNo, 3, '0') + '.pdf'
		                        lcFile       = STRTRAN(lcFile, ' ', '_')
		                        lcOutputFile = m.goapp.cCommonFolder + lcFile
		                        lnRetval     = loSession.SetParams(lcOutputFile, , .T., , , , 'PDF') && PDF & don't preview
		                     ENDIF
		
		                     SELECT jibinv
		                     LOCATE FOR cCustID == m.cCustID
		                     IF FOUND()
		                        SCATTER MEMVAR
		                        SELECT summary_well
		                        SCAN FOR cCustID == m.cCustID
		                           REPLACE cinvnum WITH m.cinvnum, ;
		                              nrunno    WITH m.nrunno, ;
		                              crunyear  WITH m.crunyear, ;
		                              djibdate  WITH m.djibdate, ;
		                              dduedate  WITH m.dduedate, ;
		                              njibtotal WITH m.njibtotal, ;
		                              nprevbal  WITH m.nprevbal, ;
		                              npayments WITH m.npayments
		                        ENDSCAN
		
		                        SELECT summary_cat
		                        SCAN FOR cCustID == m.cCustID
		                           REPLACE cinvnum WITH m.cinvnum, ;
		                              nrunno    WITH m.nrunno, ;
		                              crunyear  WITH m.crunyear, ;
		                              djibdate  WITH m.djibdate, ;
		                              dduedate  WITH m.dduedate, ;
		                              njibtotal WITH m.njibtotal, ;
		                              nprevbal  WITH m.nprevbal, ;
		                              npayments WITH m.npayments
		                        ENDSCAN
		                        * Summary by Well
		                        IF FILE(m.goapp.cRptsFolder + 'dmrojibsummcust.frx')
		                           lcSumRpt = m.goapp.cRptsFolder + 'dmrojibsummcust.frx'
		                        ELSE
		                           lcSumRpt = 'dmrojibsumm.frx'
		                        ENDIF
		
		                        IF THISFORM.chkEmail.VALUE
		                           SELECT summary_well
		                           SET FILTER TO cCustID == m.cCustID
		                           REPORT FORM (lcSumRpt) TO PRINTER OBJECT loSession NOWAIT NOPAGEEJECT
		                           * JIB statement
		                           SELECT jibinv
		                           SET FILTER TO cCustID == m.cCustID
		                           IF tempcust.lWellPage
		                              REPLACE cPageBreak WITH cWellID FOR cCustID == m.cCustID
		                           ENDIF
		                           REPORT FORM (THIS.cReportname) TO PRINTER OBJECT loSession NOPAGEEJECT NOWAIT
		                           * Summary by Expense Category
		
		                           IF FILE(m.goapp.cRptsFolder + 'dmrojibsumcatcust.frx')
		                              lcSumRpt = m.goapp.cRptsFolder + 'dmrojibsumcatcust.frx'
		                           ELSE
		                              lcSumRpt = 'dmrojibsumcat.frx'
		                           ENDIF
		                           SELECT summary_cat
		                           SET FILTER TO cCustID == m.cCustID
		                           REPORT FORM (lcSumRpt) TO PRINTER OBJECT loSession NOWAIT
		                           lnCountCusts = lnCountCusts + 1
		                        ELSE
		                           SELECT summary_well
		                           SET FILTER TO cCustID == m.cCustID
		                           REPORT FORM (lcSumRpt) OBJECT loSession NOWAIT NOPAGEEJECT
		                           * JIB statement
		                           SELECT jibinv
		                           SET FILTER TO cCustID == m.cCustID
		                           IF tempcust.lWellPage
		                              REPLACE cPageBreak WITH cWellID FOR cCustID == m.cCustID
		                           ENDIF
		                           REPORT FORM (THIS.cReportname) OBJECT loSession NOPAGEEJECT NOWAIT
		                           * Summary by Expense Category
		
		                           IF FILE(m.goapp.cRptsFolder + 'dmrojibsumcatcust.frx')
		                              lcSumRpt = m.goapp.cRptsFolder + 'dmrojibsumcatcust.frx'
		                           ELSE
		                              lcSumRpt = 'dmrojibsumcat.frx'
		                           ENDIF
		                           SELECT summary_cat
		                           SET FILTER TO cCustID == m.cCustID
		                           IF lnCountCusts < lnTotalCusts
		                              REPORT FORM (lcSumRpt) OBJECT loSession NOPAGEEJECT NOWAIT
		                           ELSE
		                              REPORT FORM (lcSumRpt) OBJECT loSession NOWAIT
		                           ENDIF
		                           lnCountCusts = lnCountCusts + 1
		                        ENDIF
		                     ENDIF
		
		                     IF THISFORM.chkEmail.VALUE
		                        osendmail = swEmailReport(ALLTRIM(lcEmail), lcAcctDate + ' Owner JIB Statement', lcOutputFile)
		                        llResult  = osendmail.lResult
		                        IF llResult
		                           lnSent = lnSent + 1
		                        ENDIF
		                        osendmail = .NULL.
		                     ENDIF
		                  ENDSCAN
		
		                  IF THISFORM.chkEmail.VALUE
		                     IF NOT EMPTY(lcBadEmail)
		                        lcBadEmail = 'The following owners had bad or missing email addresses and no email was sent:' + CHR(10) + CHR(10) + lcBadEmail
		                        MESSAGEBOX(lcBadEmail, 48, 'Bad Email Addresses')
		                     ELSE
		                        IF lnSent > 0
		                           MESSAGEBOX(TRANSFORM(lnSent) + ' JIB statements were emailed successfully', 64, 'Email JIB Statements')
		                        ELSE
		                           MESSAGEBOX('Unable to email statements.', 64, THISFORM.CAPTION)
		                        ENDIF
		                     ENDIF
		                  ENDIF
		
		                  IF NOT THISFORM.chkEmail.VALUE
		                     loXFF                                   = loSession.oxfDocument
		                     loPreview                               = CREATEOBJECT('frmMPPreviewer')
		                     loPreview.oDisplayDefaults.nOutlineType = 1
		                     loPreview.ShowStatus                    = .F.
		                     loPreview.oDisplayDefaults.ZoomFactor   = -2
		                     loPreview.PreviewXFF(loXFF)
		                     loPreview.SHOW(0)
		                  ENDIF
		               ELSE
		                  * No summary reports, just the JIB statement
		                  * Do the statement as a regular VFP report
		                  TRY
		                     SET REPORTBEHAVIOR 90
		
		                     LOCAL loSession, lnRetval, loXFF, loPreview, loScripts
		                     loSession                 = EVALUATE([xfrx("XFRX#LISTENER")])
		                     loUpdate                  = CREATEOBJECT('updatelistener')
		                     loUpdate.thermFormCaption = ALLTRIM(THIS.cFriendlyName) + ' Report in progress ...'
		                     loSession.successor       = loUpdate
		
		                     IF NOT THISFORM.chkEmail.VALUE
		                        lnRetval               = loSession.SetParams(, , , , , , 'XFF') && no name = just in memory
		                     ENDIF
		                     loSession.SetOtherParams('PRINT_BOOKMARKS', .T.)
		                     loSession.PRINTJOBNAME         = THISFORM.CAPTION
		                     loSession.CallEvaluateContents = 2
		                     loSession.PRINTJOBNAME         = THISFORM.CAPTION
		
		                     IF THISFORM.chkEmail.VALUE
		                        SELE cCustID, investor.cemail, investor.lWellPage FROM jibinv JOIN investor ON jibinv.cCustID = investor.cownerid ;
		                           WHERE NOT EMPTY(investor.cemail) INTO CURSOR tempcust ORDER BY cCustID GROUP BY cCustID
		                     ELSE
		                        SELECT cCustID, SPACE(10) AS cemail, lWellPage FROM jibinv INTO CURSOR tempcust ORDER BY cCustID GROUP BY cCustID
		                     ENDIF
		                     lnCustMax   = _TALLY
		                     lnCustCount = 0
		                     SCAN
		                        m.cCustID   = cCustID
		                        lcEmail     = cemail
		                        lnCustCount = lnCustCount + 1
		
		                        IF THISFORM.chkEmail.VALUE AND NOT '@' $ lcEmail
		                           lcBadEmail = lcBadEmail + tempcust.cCustID + ' - ' + investor.cownname + CHR(10)
		                           LOOP
		                        ENDIF
		
		                        IF THISFORM.chkEmail.VALUE
		                           lcFile       = 'OJIB' + '_' + ALLTRIM(tempcust.cCustID) + '_' + lcYear + '_' + PADL(lnRunNo, 3, '0') + '.pdf'
		                           lcFile       = STRTRAN(lcFile, ' ', '_')
		                           lcOutputFile = m.goapp.cCommonFolder + lcFile
		                           lnRetval     = loSession.SetParams(lcOutputFile, , .T., , , , 'PDF') && PDF & don't preview
		                        ENDIF
		
		                        SELECT jibinv
		                        SET FILTER TO cCustID == m.cCustID
		                        IF tempcust.lWellPage
		                           REPLACE cPageBreak WITH cWellID FOR cCustID == m.cCustID
		                        ENDIF
		                        IF lnCustCount = lnCustMax OR THISFORM.chkEmail.VALUE
		                           REPORT FORM (THIS.cReportname) OBJECT loSession NOWAIT
		                        ELSE
		                           REPORT FORM (THIS.cReportname) OBJECT loSession NOWAIT NOPAGEEJECT
		                        ENDIF
		
		                        IF THISFORM.chkEmail.VALUE
		                           osendmail = swEmailReport(lcEmail, lcAcctDate + ' Owner JIB Statement', lcOutputFile)
		                           llResult  = osendmail.lResult
		                           IF llResult
		                              lnSent = lnSent + 1
		                           ENDIF
		                           RELEASE osendmail
		                        ENDIF
		                     ENDSCAN
		
		                     IF THISFORM.chkEmail.VALUE
		                        IF NOT EMPTY(lcBadEmail)
		                           lcBadEmail = 'The following owners had bad or missing email addresses and no email was sent:' + CHR(10) + CHR(10) + lcBadEmail
		                           MESSAGEBOX(lcBadEmail, 48, 'Bad Email Addresses')
		                        ELSE
		                           IF lnSent > 0
		                              MESSAGEBOX(TRANSFORM(lnSent) + ' JIB statements were emailed successfully', 64, 'Email JIB Statements')
		                           ELSE
		                              MESSAGEBOX('Unable to email statements.', 64, THISFORM.CAPTION)
		                           ENDIF
		                        ENDIF
		                     ENDIF
		                  IF NOT THISFORM.chkEmail.VALUE
		                     loXFF                                   = loSession.oxfDocument
		                     loPreview                               = CREATEOBJECT('frmMPPreviewer')
		                     loPreview.oDisplayDefaults.nOutlineType = 1
		                     loPreview.ShowStatus                    = .F.
		                     loPreview.oDisplayDefaults.ZoomFactor   = -2
		                     loPreview.PreviewXFF(loXFF)
		                     loPreview.SHOW(0)
		                  ENDIF
		               CATCH TO loError
		                  llError = .T.
		               ENDTRY
		               IF llError
		                  IF loError.ERRORNO = 1958
		                     MESSAGEBOX('There was an error loading the printer driver. Make sure you have a valid printer selected or setup as your default printer.', 16, 'Windows Printer Driver Error')
		                  ELSE
		                     MESSAGEBOX('Error sending the report to the printer.' + CHR(10) + ;
		                          'Error: ' + loError.MESSAGE, 16, 'Report Print Problem')
		                  ENDIF
		               ENDIF
		            ENDIF
		            IF llError
		               IF loError.ERRORNO = 1958
		                  MESSAGEBOX('There was an error loading the printer driver. Make sure you have a valid printer selected or setup as your default printer.', 16, 'Windows Printer Driver Error')
		               ELSE
		                  MESSAGEBOX('Error sending the report to the printer.' + CHR(10) + ;
		                       'Error: ' + loError.MESSAGE, 16, 'Report Print Problem')
		               ENDIF
		            ENDIF
		         ENDIF
		      CATCH TO loError
		         llReturn = .F.
		      ENDTRY
		
		ENDCASE
		CATCH TO loError
		   llReturn = .F.
		   DO errorlog WITH 'Report', loError.LINENO, 'Owner JIB Stmts', loError.ERRORNO, loError.MESSAGE
		   MESSAGEBOX('Unable to process the report at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		        'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		RETURN llReturn
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
	ENDPROC

	PROCEDURE cboRcvAccount.Init
		IF DODEFAULT()
		   sele cacctdesc as cdesc, clistid from accounts where 'Accounts Receivable' $ caccttype ;
		        into cursor tempcoa order by cdesc
		   this.addlistitem('** All Accounts **',1,1)
		   this.addlistitem('',1,2)
		   if _Tally > 0
		      lnx = 2
		      sele tempcoa
		      scan
		         scatter memvar
		         this.addlistitem(m.cdesc,lnx,1)
		         this.AddListItem(m.clistid,lnx,2)
		         lnx = lnx + 1
		      endscan
		      this.listitemid = 1
		   endif
		endif              
	ENDPROC

	PROCEDURE cboSortOrder.Init
		this.AddListItem('Exp Section,Prod Prd,Expense Code,Vendor',1,1)
		this.AddListItem('1',1,2)
		
		this.AddListItem('Exp Section,Expense Code,Prod Prd,Vendor',2,1)
		this.AddListItem('2',2,2)
		
		this.ListItemId = 1
	ENDPROC

	PROCEDURE chkEmail.Click
		IF this.Value = .T.
		   IF NOT swIsEmailSetup()
		      MESSAGEBOX('The email preferences are not setup. Reports cannot be emailed at this time.',16,'Email Preferences Missing')
		      this.Value = .f.
		   ELSE 
		      thisform.swrptcriteriabuttons1.chkExport.Visible = .f.
		      thisform.swrptcriteriabuttons1.cmdPreview.Caption = 'Ema\<il'
		      thisform.chkincludeEmail.Visible = .f.
		      thisform.chkpdf.Value = .f.
		   ENDIF    
		ELSE
		   thisform.swrptcriteriabuttons1.chkExport.Visible = .t.
		   thisform.swrptcriteriabuttons1.cmdPreview.Caption = 'Pre\<view'
		   thisform.chkincludeEmail.Visible = .t. 
		ENDIF 
	ENDPROC

	PROCEDURE chkSelected.Click
		IF this.Value
		   DO FORM commonsource\selected-ids WITH 'OWNER' LINKED 
		   lnCount = RECCOUNT('selected')
		   thisform.lblselected.Caption = TRANSFORM(lnCount) + ' Owners Selected'
		   thisform.lblselected.Visible = .T.
		   thisform.lblbegID.Visible = .F.
		   thisform.lblendID.Visible = .F.
		   thisform.swrptlook1.Visible = .F.
		ELSE
		   thisform.lblselected.Visible = .F.
		   thisform.lblbegID.Visible = .T.
		   thisform.lblendID.Visible = .T.
		   thisform.swrptlook1.Visible = .T.
		ENDIF 
	ENDPROC

	PROCEDURE Runcombo1.Init
		IF DODEFAULT()
		   this.listitemid = 1
		ENDIF   
	ENDPROC

	PROCEDURE Runcombo1.Valid
		IF 'New' $ this.value
		   thisform.swgroup1.visible = .t.
		   thisform.lblgroup.visible = .t.
		   thisform.lblacctdate.visible = .t.
		   thisform.txtacctdate.visible = .t.
		   thisform.chkEmail.Visible = .f.
		   thisform.chkEmail.Value   = .F.
		   thisform.chkincludeEmail.Visible = .f.
		   thisform.chkincludeEmail.Value = .t.
		   thisform.chkpDF.Visible = .f.
		ELSE
		   thisform.swgroup1.visible = .f.
		   thisform.lblgroup.visible = .f.
		   thisform.lblacctdate.visible = .f.
		   thisform.txtacctdate.visible = .f.
		   thisform.chkEmail.Visible = .t.
		   thisform.chkincludeEmail.Visible = .t.
		   thisform.chkpDF.Visible = .t.
		ENDIF   
	ENDPROC

	PROCEDURE Swrptlook1.Swlookupbutton1.Click
		LOCAL lcList
		PRIV llOK
		
		llOK = .F.
		lcList = 'cownerid,csortfield'
		
		DO FORM ..\custom\picklist WITH 'Investor', lcList, thisform.swrptlook1.txtbegid.value, 2
		
		IF llOK
		   thisform.swrptlook1.txtBegId.value = cownerid
		   thisform.swrptlook1.txtBegName.value = cOwnName
		   thisform.swrptlook1.txtBegId.refresh()
		   thisform.swrptlook1.txtBegName.refresh()
		ENDIF  
		
		thisform.setnextcontrol(thisform.swrptlook1.txtBegID)   
		
	ENDPROC

	PROCEDURE Swrptlook1.Swlookupbutton2.Click
		LOCAL lcList
		PRIV llOK
		
		llOK = .F.
		lcList = 'cownerid,csortfield'
		
		DO FORM ..\custom\picklist WITH 'Investor', lcList, thisform.swrptlook1.txtendid.value, 2
		
		IF llOK
		   thisform.swrptlook1.txtEndId.value = cownerid
		   thisform.swrptlook1.txtEndName.value = cOwnname
		   thisform.swrptlook1.txtEndId.refresh()
		   thisform.swrptlook1.txtEndName.refresh()
		ENDIF   
		
		thisform.setnextcontrol(thisform.swrptlook1.txtEndID)   
		
	ENDPROC

	PROCEDURE txtAcctDate.Init
		if dodefault()
		   this.value = DATE()
		endif   
	ENDPROC

ENDDEFINE
