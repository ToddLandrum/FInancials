*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="dmreopenjqb.scx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="2" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Cursor1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor6" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor7" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor8" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor9" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor10" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor11" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor12" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Relation2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor13" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor14" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor15" UniqueID="" Timestamp="" />

	AutoOpenTables = .F.
	DataSource = .NULL.
	Height = 587
	Left = -2
	Name = "Dataenvironment"
	Top = 233
	Width = 1016

	ADD OBJECT 'Cursor1' AS cursor WITH ;
		Alias = "checks", ;
		BufferModeOverride = 5, ;
		CursorSource = "checks", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor1", ;
		Top = 20, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor10' AS cursor WITH ;
		Alias = "wells", ;
		CursorSource = "wells", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor10", ;
		Top = 380, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor11' AS cursor WITH ;
		Alias = "invhdr", ;
		BufferModeOverride = 5, ;
		CursorSource = "invhdr", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 150, ;
		Name = "Cursor11", ;
		Top = 380, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor12' AS cursor WITH ;
		Alias = "invdet", ;
		BufferModeOverride = 5, ;
		CursorSource = "invdet", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 290, ;
		Name = "Cursor12", ;
		Top = 380, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor13' AS cursor WITH ;
		Alias = "qbpost", ;
		CursorSource = "qbpost", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 424, ;
		Name = "Cursor13", ;
		Top = 25, ;
		Width = 91
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor14' AS cursor WITH ;
		Alias = "prepayd", ;
		BufferModeOverride = 5, ;
		CursorSource = "prepayd", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 434, ;
		Name = "Cursor14", ;
		Top = 170, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor15' AS cursor WITH ;
		Alias = "plugwellbal", ;
		BufferModeOverride = 5, ;
		CursorSource = "plugwellbal", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 448, ;
		Name = "Cursor15", ;
		Top = 300, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor2' AS cursor WITH ;
		Alias = "disbhist", ;
		BufferModeOverride = 5, ;
		CursorSource = "disbhist", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 150, ;
		Name = "Cursor2", ;
		Top = 20, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor3' AS cursor WITH ;
		Alias = "expense", ;
		BufferModeOverride = 5, ;
		CursorSource = "expense", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 290, ;
		Name = "Cursor3", ;
		Top = 20, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor4' AS cursor WITH ;
		Alias = "glmaster", ;
		BufferModeOverride = 5, ;
		CursorSource = "glmaster", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor4", ;
		Top = 140, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor5' AS cursor WITH ;
		Alias = "income", ;
		BufferModeOverride = 5, ;
		CursorSource = "income", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 150, ;
		Name = "Cursor5", ;
		Top = 140, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor6' AS cursor WITH ;
		Alias = "groups", ;
		CursorSource = "groups", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 290, ;
		Name = "Cursor6", ;
		Top = 140, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor7' AS cursor WITH ;
		Alias = "susaudit", ;
		BufferModeOverride = 5, ;
		CursorSource = "susaudit", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor7", ;
		Top = 260, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor8' AS cursor WITH ;
		Alias = "sysctl", ;
		BufferModeOverride = 5, ;
		CursorSource = "sysctl", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 150, ;
		Name = "Cursor8", ;
		Top = 260, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor9' AS cursor WITH ;
		Alias = "wellhist", ;
		BufferModeOverride = 5, ;
		CursorSource = "wellhist", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 290, ;
		Name = "Cursor9", ;
		Top = 260, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Relation2' AS relation WITH ;
		ChildAlias = "invdet", ;
		ChildOrder = "cbatch", ;
		Name = "Relation2", ;
		ParentAlias = "invhdr", ;
		RelationalExpr = "cbatch"
		*< END OBJECT: BaseClass="relation" />

ENDDEFINE

DEFINE CLASS formdmreopenj AS frmformcustom OF "..\custom\cforms.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="cmdReopen" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdClose" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Runcombo1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom1" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: check_for_payments
		*m: reopen		&& Re-Opens the closed revenue period.
	*</DefinedPropArrayMethod>

	Caption = "Re-Open A Closed JIB Run"
	DataSession = 2
	DoCreate = .T.
	Height = 149
	HelpContextID = 132
	Name = "FormDmreopenj"
	Width = 375
	MWRESIZE1.lblHighLight.Name = "lblHighLight"
	MWRESIZE1.lblShading.Name = "lblShading"
	MWRESIZE1.Left = 360
	MWRESIZE1.Name = "MWRESIZE1"
	MWRESIZE1.Top = 132

	ADD OBJECT 'cmdClose' AS cmdcommandbuttoncustom WITH ;
		Caption = "\<Cancel", ;
		Height = 36, ;
		Left = 196, ;
		Name = "cmdClose", ;
		TabIndex = 4, ;
		Top = 96, ;
		Width = 75
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdReopen' AS cmdcommandbuttoncustom WITH ;
		Caption = "\<Re-Open", ;
		Height = 36, ;
		Left = 106, ;
		Name = "cmdReopen", ;
		TabIndex = 3, ;
		Top = 96, ;
		Width = 75
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'Lbllabelcustom1' AS lbllabelcustom WITH ;
		Caption = "Run No", ;
		Left = 37, ;
		Name = "Lbllabelcustom1", ;
		TabIndex = 2, ;
		Top = 47
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Runcombo1' AS runcombo WITH ;
		ColumnWidths = "230,0,0", ;
		cshowwhat = J, ;
		Height = 20, ;
		Left = 85, ;
		lshownew = .F., ;
		Name = "Runcombo1", ;
		TabIndex = 1, ;
		Top = 45, ;
		Width = 259
		*< END OBJECT: ClassLib="..\custom\swcontrol.vcx" BaseClass="combobox" />
	
	PROCEDURE Activate
		thisform.runcombo1.init()
		DODEFAULT()
	ENDPROC

	PROCEDURE check_for_payments
	ENDPROC

	PROCEDURE Error
		LPARAMETERS nerror,cmethod,nline
		LOCAL lnLevel
		
		=aerror(gaerror)
		
		lnLevel = TXNLEVEL()
		
		IF lnLevel > 0
		   FOR lnX = 1 TO lnLevel
		     ROLLBACK
		   ENDFOR
		ENDIF
		
		DODEFAULT()     
	ENDPROC

	PROCEDURE Init
		
		SET DELETED ON
		
		*
		*  See if there are any closed jib periods
		*
		SELECT sysctl
		LOCATE FOR cTypeClose = 'J'
		
		IF NOT Found()
		   thisform.oMessage.Display('There are no closed JIB runs to open.')
		   RETURN .F.
		ENDIF   
		
		thisform.runcombo1.listitemid = 1 
		DODEFAULT()       
	ENDPROC

	PROCEDURE reopen		&& Re-Opens the closed revenue period.
		LOCAL lcsyskey, lcDMBatch, lcYear, lcPeriod, lcGroup, lcIDChec, lnCheck, lnInvoice, lnJournal
		LOCAL lnCreditMemo
		LOCAL laTxnid[1], lcTxnID, lcTxnIDs, llReturn, lnCount, lnInvDel, lnRunNo, lnX, loDelResp, loError
		LOCAL loJournalDel, loResponse
		*:Global cidsysctl
		
		llReturn = .T.
		
		TRY
		   lcYear    = THISFORM.runcombo1.LISTITEM[thisform.runcombo1.listitemid, 2]
		   lnRunNo   = INT(VAL(THISFORM.runcombo1.LISTITEM[thisform.runcombo1.listitemid, 3]))
		   lcDMBatch = THISFORM.runcombo1.LISTITEM[thisform.runcombo1.listitemid, 5]
		   lcGroup   = THISFORM.runcombo1.LISTITEM[thisform.runcombo1.listitemid, 4]
		
		* Check to see if this run was closed in the old version.
		* If it was don't let the run be opened.
		   SWSELECT('sysctl', .T.)
		   LOCATE FOR crunyear = lcYear AND lDisbMan AND cTypeClose = 'J' AND nrunno = lnRunNo
		   IF FOUND()
		      IF EMPTY(cVersion)
		         MESSAGEBOX('You cannot re-open this run, because it was closed with a previous version of the software.', 16, 'Unable To Reopen Run')
		         llReturn = .F.
		         EXIT
		      ENDIF
		   ENDIF
		
		   SELE nrunno, crunyear FROM sysctl WHERE cgroup == lcGroup AND cTypeClose = 'J' INTO CURSOR tempclose ORDER BY crunyear DESC, nrunno DESC
		
		   IF NOT m.goapp.oQB.lqbactive  &&  No QB connection, so they can't open, or it breaks the link to those entries
		      THISFORM.oMessage.Warning('There is no active connection to QB at this time.  The JIB run cannot be opened.')
		      llReturn = .F.
		      EXIT
		   ENDIF
		
		* Choose the correct txndeltype depending on the SDK.
		   IF m.goapp.oQB.QBFCVersion > ' 4.0'
		      lnJournal    = 15
		      lnCheck      = 6
		      lnInvoice    = 13
		      lnCreditMemo = 9
		   ELSE
		      lnJournal    = 14
		      lnCheck      = 11
		      lnInvoice    = 0
		      lnCreditMemo = 3
		   ENDIF
		
		   SELE tempclose
		   GO TOP
		   IF nrunno # lnRunNo
		      THISFORM.oMessage.Warning('You must open the last closing for this group.')
		      llReturn = .F.
		      EXIT
		   ENDIF
		
		   SELECT sysctl
		   LOCATE FOR cyear = lcYear AND lDisbMan AND cTypeClose = 'J' AND nrunno = lnRunNo
		   IF FOUND()
		      m.cidsysctl = cidsysctl
		   ELSE
		      THISFORM.oMessage.Warning('Could not find the system control record for this closed run.')
		      llReturn = .F.
		      EXIT
		   ENDIF
		
		*  Make sure this is what the user wants to do.
		   IF NOT THISFORM.oMessage.CONFIRM('Are you sure run: ' + ALLT(STR(lnRunNo)) + '/' + lcYear + ' should be reopened?')
		      THISFORM.oMessage.DISPLAY('Reopen of JIB run cancelled.')
		      llReturn = .F.
		      EXIT
		   ENDIF
		
		* Turn FoxAudit auditing off for the close
		   IF TYPE('oFoxAudit_APPDATA') = 'O'
		      oFoxAudit_APPDATA.lLogUpdates = .F.
		   ENDIF
		
		*
		*  Remove records from the well history table
		*
		   WAIT WIND NOWAIT 'Removing well history records...'
		   SELECT wellhist
		   DELETE FROM wellhist WHERE nrunno = lnRunNo AND crunyear = lcYear AND cRecType = 'J'
		
		*
		*  Remove records from the owner history table
		*
		   WAIT WIND NOWAIT 'Removing owner history records...'
		   SELECT disbhist
		   DELETE FROM disbhist WHERE nrunno = lnRunNo AND crunyear = lcYear AND cRecType = 'J'
		
		
		*
		*  Remove invoices from the invhdr and invdet files
		*
		   WAIT WIND NOWAIT 'Removing joint interest billing statements....'
		   SELECT invhdr
		   DELETE FROM invhdr WHERE cDMBatch = lcDMBatch
		
		*
		*  Reset the flag in the expense table
		*
		
		   WAIT WIND NOWAIT 'Resetting closed flag in the well expense records...'
		   SELECT expense
		   SCAN FOR nRunNoJIB = lnRunNo AND cRunYearJIB = lcYear
		      IF cRunYearRev = '1901'
		         REPL cRunYearRev WITH '', ;
		            nRunNoRev   WITH 0,  ;
		            cPaidByCk WITH '', ;
		            lClosed     WITH .F., ;
		            nRunNoJIB   WITH 0, ;
		            cRunYearJIB WITH '', ;
		            cprdpaid WITH ''
		
		         IF expense.laptran = .F.
		            SWSELECT('checks')
		            LOCATE FOR cidchec = expense.cPaidByCk AND cbatch = lcDMBatch
		            IF FOUND()
		               SWSELECT('expense')
		               REPLACE cPaidByCk WITH ''
		            ENDIF
		         ENDIF
		      ELSE
		         IF cRunYearRev + PADL(TRANSFORM(nRunNoRev), 3, '0') <= lcYear + PADL(TRANSFORM(lnRunNo), 3, '0')
		* This means the jib run was closed first and created the check
		            REPLACE lClosed     WITH .F., ;
		               nRunNoJIB   WITH 0, ;
		               cRunYearJIB WITH '', ;
		               cprdpaid WITH ''
		         ELSE
		            REPLACE nRunNoJIB   WITH 0, ;
		               cRunYearJIB WITH ''
		         ENDIF
		      ENDIF
		
		
		   ENDSCAN
		
		*
		* Delete any vendor checks created
		*
		   WAIT WINDOW NOWAIT 'Removing vendor checks created...'
		   SELECT checks
		   DELETE FROM checks WHERE cbatch == lcDMBatch
		
		*
		*  Remove the QuickBooks Transactions
		*
		* add a request to delete the receipt
		   IF m.goapp.oQB.lqbactive
		
		* Clear error recovery
		      m.goapp.oQB.oQBSM.ClearErrorRecovery()
		
		      m.goapp.oQB.oQBSM.EnableErrorRecovery = .F.
		
		* set the on error attribute for the request
		      m.goapp.oQB.oQBRequest.ATTRIBUTES.OnError = 1
		      m.goapp.oQB.oQBRequest.ClearRequests()
		
		      WAIT WIND NOWAIT 'Deleting QuickBooks Journal Entries...'
		      SELE qbpost
		      SCAN FOR cidsysctl = m.cidsysctl AND nType = lnJournal
		         lcTxnIDs = mtxnids
		         lnCount  = ALINES(laTxnid, lcTxnIDs)
		         IF lnCount > 0
		            FOR lnX = 1 TO lnCount
		               lcTxnID      = PADR(ALLT(laTxnid[lnX]), 36, ' ')
		               llReturn = m.goApp.oQB.DeleteTxnID(lcTxnID, lnJournal)
		            ENDFOR
		         ENDIF
		      ENDSCAN
		
		      WAIT WIND NOWAIT 'Deleting QuickBooks Invoices...'
		      lnInvDel = 0
		      SELE qbpost
		      SCAN FOR cidsysctl == m.cidsysctl AND nType = lnInvoice
		         lcTxnIDs = mtxnids
		         lnCount  = ALINES(laTxnid, lcTxnIDs)
		         IF lnCount > 0
		            FOR lnX = 1 TO lnCount
		               lcTxnID      = PADR(ALLT(laTxnid[lnX]), 36, ' ')
		               llReturn = m.goApp.oQB.DeleteTxnID(lcTxnID, lnInvoice)
		               lnInvDel = lnInvDel + 1
		               WAIT WIND NOWAIT 'Deleting QuickBooks Invoices...' + ALLT(STR(lnInvDel))
		            ENDFOR
		         ENDIF
		      ENDSCAN
		
		      WAIT WIND NOWAIT 'Deleting QuickBooks Credit Memos...'
		      SELE qbpost
		      SCAN FOR cidsysctl = m.cidsysctl AND nType = lnCreditMemo
		         lcTxnIDs = mtxnids
		         lnCount  = ALINES(laTxnid, lcTxnIDs)
		         IF lnCount > 0
		            FOR lnX = 1 TO lnCount
		               lcTxnID      = PADR(ALLT(laTxnid[lnX]), 36, ' ')
		               llReturn = m.goApp.oQB.DeleteTxnID(lcTxnID, lnCreditMemo)
		            ENDFOR
		         ENDIF
		      ENDSCAN
		
		      WAIT WIND NOWAIT 'Deleting QuickBooks Vendor Checks...'
		      SELE qbpost
		      SCAN FOR cidsysctl = m.cidsysctl AND nType = lnCheck
		         lcTxnIDs = mtxnids
		         lnCount  = ALINES(laTxnid, lcTxnIDs)
		         IF lnCount > 0
		            FOR lnX = 1 TO lnCount
		               lcTxnID      = PADR(ALLT(laTxnid[lnX]), 36, ' ')
		              llReturn = m.goApp.oQB.DeleteTxnID(lcTxnID, lnCheck)
		            ENDFOR
		         ENDIF
		      ENDSCAN
		
		      WAIT CLEAR
		   ENDIF
		
		*  Remove any pre-pay records from prepayd that were created during the closing
		   WAIT WIND NOWAIT 'Releasing used prepayments...'
		   SWSELECT('prepayd', .T.)
		   SCAN FOR nrunno = lnRunNo AND crunyear = lcYear AND cRecType = 'U'
		      DELETE NEXT 1
		   ENDSCAN
		
		*  Delete plugging charges from the plugging fund
		   SWSELECT('plugwellbal', .T.)
		   DELETE FROM plugwellbal WHERE cDMBatch == lcDMBatch
		
		
		*
		*  Remove the closed record from the sysctl table
		*
		   WAIT WINDOW NOWAIT 'Finalizing the JIB reopen process...'
		   SELECT sysctl
		   DELETE FOR nrunno = lnRunNo AND cyear = lcYear AND lDisbMan AND cTypeClose = 'J'
		
		   BEGIN TRANSACTION
		   SELE glmaster
		   llReturn = TABLEUPDATE(.T.)
		   IF llReturn
		      SELE expense
		      llReturn = TABLEUPDATE(.T.)
		   ENDIF
		   IF llReturn
		      SELE invhdr
		      llReturn = TABLEUPDATE(.T.)
		   ENDIF
		   IF llReturn
		      SELE wellhist
		      llReturn = TABLEUPDATE(.T.)
		   ENDIF
		   IF llReturn
		      SELE sysctl
		      llReturn = TABLEUPDATE(.T.)
		   ENDIF
		   IF llReturn
		      SELE disbhist
		      llReturn = TABLEUPDATE(.T.)
		   ENDIF
		   IF llReturn
		      SELE wellhist
		      llReturn = TABLEUPDATE(.T.)
		   ENDIF
		   IF llReturn
		      SELE checks
		      llReturn = TABLEUPDATE(.T.)
		   ENDIF
		   IF llReturn
		      SELE prepayd
		      llReturn = TABLEUPDATE(.T.)
		   ENDIF
		   IF llReturn
		      SELE plugwellbal
		      llReturn = TABLEUPDATE(.T.)
		   ENDIF
		   END TRANSACTION
		   WAIT CLEAR
		   THISFORM.oMessage.DISPLAY('JIB run: ' + lcYear + '/' + ALLT(STR(lnRunNo)) + ' is now open.')
		
		   m.goapp.oQB.oQBSM.EnableErrorRecovery = .T.
		CATCH TO loError
		   llReturn = .F.
		   DO errorlog WITH 'Reopen', loError.LINENO, 'DMReopenJ', loError.ERRORNO, loError.MESSAGE, '', loError
		   MESSAGEBOX('Unable to open the JIB run at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		        'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		   * Turn FoxAudit auditing off for the reopen
		   IF TYPE('oFoxAudit_APPDATA') = 'O'
		      oFoxAudit_APPDATA.lLogUpdates = m.goapp.lAuditTrail
		   ENDIF
		
		
		RETURN llReturn
		
		
		
		
		
		
		
	ENDPROC

	PROCEDURE cmdClose.Click
		thisform.release()
	ENDPROC

	PROCEDURE cmdReopen.Click
		thisform.reopen()
	ENDPROC

ENDDEFINE
