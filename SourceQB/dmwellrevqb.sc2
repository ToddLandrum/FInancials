*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="dmwellrevqb.scx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="2" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Cursor8" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor11" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor12" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor13" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor14" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor15" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor16" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor18" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor17" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor7" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor6" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor4" UniqueID="" Timestamp="" />

	AutoOpenTables = .F.
	DataSource = .NULL.
	Height = 587
	InitialSelectedAlias = "wells"
	Left = 1
	Name = "Dataenvironment"
	Top = 37
	Width = 1015

	ADD OBJECT 'Cursor1' AS cursor WITH ;
		Alias = "wells", ;
		CursorSource = "wells", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 153, ;
		Name = "Cursor1", ;
		Top = 13, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor11' AS cursor WITH ;
		Alias = "glopt", ;
		CursorSource = "glopt", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 445, ;
		Name = "Cursor11", ;
		Top = 169, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor12' AS cursor WITH ;
		Alias = "sysctl", ;
		CursorSource = "sysctl", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 597, ;
		Name = "Cursor12", ;
		Top = 201, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor13' AS cursor WITH ;
		Alias = "glmaster", ;
		BufferModeOverride = 5, ;
		CursorSource = "glmaster", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 738, ;
		Name = "Cursor13", ;
		Order = "glbatch", ;
		Top = 177, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor14' AS cursor WITH ;
		Alias = "options", ;
		CursorSource = "options", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 877, ;
		Name = "Cursor14", ;
		Top = 193, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor15' AS cursor WITH ;
		Alias = "wellinv", ;
		BufferModeOverride = 5, ;
		CursorSource = "wellinv", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 281, ;
		Name = "Cursor15", ;
		Top = 8, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor16' AS cursor WITH ;
		Alias = "incsusp", ;
		BufferModeOverride = 5, ;
		CursorSource = "incsusp", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 624, ;
		Name = "Cursor16", ;
		Top = 26, ;
		Width = 91
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor17' AS cursor WITH ;
		Alias = "stmtnote", ;
		CursorSource = "stmtnote", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 281, ;
		Name = "Cursor17", ;
		Top = 155, ;
		Width = 91
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor18' AS cursor WITH ;
		Alias = "incsusp1", ;
		BufferModeOverride = 1, ;
		CursorSource = "incsusp", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 888, ;
		Name = "Cursor18", ;
		Top = 29, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor2' AS cursor WITH ;
		Alias = "investor", ;
		CursorSource = "investor", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 761, ;
		Name = "Cursor2", ;
		Top = 23, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor3' AS cursor WITH ;
		Alias = "income", ;
		CursorSource = "income", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 1008, ;
		Name = "Cursor3", ;
		Top = 20, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor4' AS cursor WITH ;
		Alias = "qbpost", ;
		BufferModeOverride = 5, ;
		CursorSource = "qbpost", ;
		Database = ..\newdbc\appdata.dbc, ;
		Height = 90, ;
		Left = 148, ;
		Name = "Cursor4", ;
		Top = 303, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor5' AS cursor WITH ;
		Alias = "wellrev", ;
		BufferModeOverride = 5, ;
		CursorSource = "wellrev", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 32, ;
		Name = "Cursor5", ;
		NoDataOnLoad = .T., ;
		Top = 16, ;
		Width = 91
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor6' AS cursor WITH ;
		Alias = "revsrc", ;
		CursorSource = "revsrc", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 4, ;
		Name = "Cursor6", ;
		Top = 158, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor7' AS cursor WITH ;
		Alias = "inctxnid", ;
		BufferModeOverride = 5, ;
		CursorSource = "inctxnid", ;
		Database = ..\newdbc\appdata.dbc, ;
		Height = 90, ;
		Left = 456, ;
		Name = "Cursor7", ;
		Top = 18, ;
		Width = 91
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor8' AS cursor WITH ;
		Alias = "checks", ;
		CursorSource = "checks", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 131, ;
		Name = "Cursor8", ;
		Top = 145, ;
		Width = 91
		*< END OBJECT: BaseClass="cursor" />

ENDDEFINE

DEFINE CLASS formdmwellinc AS frmdatamanagerformcustom OF "..\custom\cforms.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="txtrevkey" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Shpshapecustom1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column1.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column1.txtcSource" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column2.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column2.txtcRevName" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column3.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column3.txtdRevDate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column4.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column4.txtnUnits" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column5.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column5.txtnPrice" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column6.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column6.txtnTotalInc" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column6.Chkcheckboxcustom1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column7.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column7.txtcYear" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column8.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column8.txtcPeriod" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column9.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgridcustom1.Column9.chkqbnopost" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcWellName" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblWellid2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtRefid" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblRefid" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblSource" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcPurchaser" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblDate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtnUnits" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblUnits" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtnPrice" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblAmount" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtnDaysOn" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcWellID" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtnTotalInc" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblClosed" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblIncnote" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblGroup" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtTotalInc" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtCbegrange" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtCendrange" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdLookWell" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdRevsrc" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdDelDetail" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblRunNo" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Swyear" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbltextcustom4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Swperiod" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbltextcustom6" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Runcombo1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdEditDetail" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbltextcustom7" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbltextcustom17" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcOwnerID" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboSource" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdAllocate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtdRevDate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkQBPost" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcNotes" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Glmaint" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom7" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboDeck" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: adddetail		&& Add the detail information to the income table
		*m: calcdayson		&& Calculates the days on.
		*m: calctot		&& Calculates the total  income for the period.
		*m: calctotalinc		&& Calculates the total income based on the units and price entered.
		*m: checkclose		&& Checks to see if the period has been closed.
		*m: checkcloserun
		*m: checkruns		&& Checks for last closed run for given well.
		*m: deleteqb		&& Deletes the passed income entry from QB.
		*m: editdetail		&& Brings the current record in the grid up to the detail section in the form.
		*m: getrange		&& Gets the period range for gas and oil
		*m: getrevenue		&& Refreshes the grid with the revenue for the given well and run.
		*m: qberror
		*p: cdelfromqb		&& Keys of deleted records that need to be deleted from QB.
		*p: cwellsave
		*p: lclosed
		*p: lcloserun
		*p: lcperiod
		*p: lcyear
		*p: ldeldetail
		*p: leditdetail		&& Edit Detail Flag
		*p: lqbpost
		*p: lqbrevpost
		*p: neditrecno
		*p: nrunitemid		&& The itemid of runcombo1 on entry.
		*p: owellinv
	*</DefinedPropArrayMethod>

	Caption = "Well Revenue by Well (8/8ths)"
	cdelfromqb = 		&& Keys of deleted records that need to be deleted from QB.
	cnavworkarea = wells
	cwellsave = ''
	cworkarea = wells
	DoCreate = .T.
	Height = 444
	HelpContextID = 96
	lrememberposition = .F.
	lrememberrecord = .T.
	Name = "formdmwellinc"
	nrunitemid = 1		&& The itemid of runcombo1 on entry.
	owellinv = .NULL.
	Visible = .T.
	Width = 628
	WindowState = 0
	_memberdata = <VFPData>
		<memberdata name="deleteqb" type="method" display="deleteQB"/>
		<memberdata name="cdelfromqb" type="property" favorites="True" display="cDelFromQB"/>
		<memberdata name="owellinv" display="oWellInv"/>
		</VFPData>
	cmdatamanager.Name = "cmdatamanager"
	cmdatamanager.TabIndex = 1
	cmdatamanager.ZOrderSet = 0
	cmlookupmanager.Name = "cmlookupmanager"
	Mwresize1.lblHighLight.Name = "lblHighLight"
	Mwresize1.lblShading.Name = "lblShading"
	Mwresize1.Name = "Mwresize1"
	Mwresize1.TabIndex = 2

	ADD OBJECT 'cboDeck' AS cbocomboboxcustom WITH ;
		BoundColumn = 2, ;
		ControlSource = "", ;
		Height = 20, ;
		Left = 209, ;
		Name = "cboDeck", ;
		Style = 0, ;
		TabIndex = 23, ;
		Top = 118, ;
		ZOrderSet = 64
		*< END OBJECT: ClassLib="..\..\..\codeminenew\ampro_rv\custom\ccontrol.vcx" BaseClass="combobox" />

	ADD OBJECT 'cboSource' AS cbocomboboxcustom WITH ;
		cdisplayname = Type, ;
		ControlSource = "", ;
		Height = 20, ;
		Left = 5, ;
		lrequired = .T., ;
		Name = "cboSource", ;
		SelectOnEntry = .T., ;
		TabIndex = 15, ;
		Top = 93, ;
		Width = 61, ;
		ZOrderSet = 41
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="combobox" />

	ADD OBJECT 'chkQBPost' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Don't Post To QB", ;
		Left = 344, ;
		Name = "chkQBPost", ;
		TabIndex = 47, ;
		TabStop = .F., ;
		Top = 168, ;
		Value = .F., ;
		ZOrderSet = 45
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'cmdAllocate' AS cmdcommandbuttoncustom WITH ;
		Caption = "Allocate All To", ;
		Height = 20, ;
		Left = 451, ;
		Name = "cmdAllocate", ;
		TabIndex = 34, ;
		TabStop = .F., ;
		Top = 166, ;
		ZOrderSet = 43
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdDelDetail' AS cmdcommandbuttoncustom WITH ;
		Caption = "Delete Detail Line", ;
		Left = 36, ;
		Name = "cmdDelDetail", ;
		TabIndex = 41, ;
		Top = 420, ;
		Width = 97, ;
		ZOrderSet = 27
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdEditDetail' AS cmdcommandbuttoncustom WITH ;
		Caption = "Edit Detail Line", ;
		Height = 22, ;
		Left = 140, ;
		Name = "cmdEditDetail", ;
		TabIndex = 42, ;
		Top = 420, ;
		Width = 97, ;
		ZOrderSet = 36
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdLookWell' AS cmdcommandbuttoncustom WITH ;
		Caption = " Well ID", ;
		Height = 23, ;
		Left = 18, ;
		Name = "cmdLookWell", ;
		TabIndex = 3, ;
		TabStop = .F., ;
		Top = 11, ;
		Width = 48, ;
		ZOrderSet = 25
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdRevsrc' AS cmdcommandbuttoncustom WITH ;
		Caption = "Received From", ;
		Height = 19, ;
		Left = 68, ;
		Name = "cmdRevsrc", ;
		TabIndex = 40, ;
		Top = 72, ;
		Width = 85, ;
		ZOrderSet = 26
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'Glmaint' AS glmaint WITH ;
		Height = 12, ;
		Left = 346, ;
		Name = "Glmaint", ;
		Top = 48, ;
		Width = 26
		*< END OBJECT: ClassLib="..\custom\swgl.vcx" BaseClass="custom" />

	ADD OBJECT 'Grdgridcustom1' AS grdgridcustom WITH ;
		ColumnCount = 9, ;
		cworkarea = wellrev, ;
		Height = 226, ;
		lallownew = .F., ;
		lcolumnmemory = .F., ;
		Left = 0, ;
		Name = "Grdgridcustom1", ;
		Panel = 1, ;
		RecordSource = "wellrev", ;
		TabIndex = 37, ;
		Top = 192, ;
		Width = 624, ;
		ZOrderSet = 4, ;
		Column1.ColumnOrder = 1, ;
		Column1.ControlSource = "wellrev.csource", ;
		Column1.FontName = "Courier New", ;
		Column1.FontSize = 8, ;
		Column1.Name = "Column1", ;
		Column1.Width = 34, ;
		Column2.ColumnOrder = 4, ;
		Column2.ControlSource = "wellrev.crevname", ;
		Column2.FontName = "Courier New", ;
		Column2.FontSize = 8, ;
		Column2.Name = "Column2", ;
		Column2.Width = 128, ;
		Column3.ColumnOrder = 5, ;
		Column3.ControlSource = "wellrev.drevdate", ;
		Column3.FontName = "Courier New", ;
		Column3.FontSize = 8, ;
		Column3.Name = "Column3", ;
		Column3.Width = 73, ;
		Column4.ColumnOrder = 6, ;
		Column4.ControlSource = "wellrev.nunits", ;
		Column4.FontName = "Courier New", ;
		Column4.FontSize = 8, ;
		Column4.Name = "Column4", ;
		Column4.Width = 95, ;
		Column5.ColumnOrder = 7, ;
		Column5.ControlSource = "wellrev.nprice", ;
		Column5.FontName = "Courier New", ;
		Column5.FontSize = 8, ;
		Column5.Name = "Column5", ;
		Column5.Width = 83, ;
		Column6.ColumnOrder = 8, ;
		Column6.ControlSource = "wellrev.ntotalinc", ;
		Column6.FontName = "Courier New", ;
		Column6.FontSize = 8, ;
		Column6.Name = "Column6", ;
		Column6.Width = 92, ;
		Column7.ColumnOrder = 3, ;
		Column7.ControlSource = "wellrev.cyear", ;
		Column7.FontSize = 8, ;
		Column7.Name = "Column7", ;
		Column7.Width = 37, ;
		Column8.ColumnOrder = 2, ;
		Column8.ControlSource = "wellrev.cperiod", ;
		Column8.FontSize = 8, ;
		Column8.Name = "Column8", ;
		Column8.Width = 22, ;
		Column9.ControlSource = "wellrev.lnopostqb", ;
		Column9.Name = "Column9", ;
		Column9.Sparse = .F., ;
		Column9.Width = 16
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="grid" />

	ADD OBJECT 'Grdgridcustom1.Column1.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "Type", ;
		FontSize = 8, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'Grdgridcustom1.Column1.txtcSource' AS txttextboxcustom WITH ;
		ControlSource = "wellrev.csource", ;
		FontName = "Courier New", ;
		FontSize = 8, ;
		Left = 25, ;
		Name = "txtcSource", ;
		Top = 31
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'Grdgridcustom1.Column2.Header1' AS header WITH ;
		Caption = "Purchaser", ;
		FontSize = 8, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'Grdgridcustom1.Column2.txtcRevName' AS textbox WITH ;
		BackColor = 255,255,255, ;
		BorderStyle = 0, ;
		ControlSource = "wellrev.crevname", ;
		FontName = "Courier New", ;
		FontSize = 8, ;
		ForeColor = 0,0,0, ;
		Margin = 0, ;
		Name = "txtcRevName"
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'Grdgridcustom1.Column3.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "Date", ;
		FontSize = 8, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'Grdgridcustom1.Column3.txtdRevDate' AS txttextboxcustom WITH ;
		ControlSource = "wellrev.drevdate", ;
		FontName = "Courier New", ;
		FontSize = 8, ;
		Left = 50, ;
		Name = "txtdRevDate", ;
		Top = 31
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'Grdgridcustom1.Column4.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "Units", ;
		FontSize = 8, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'Grdgridcustom1.Column4.txtnUnits' AS txttextboxcustom WITH ;
		ControlSource = "wellrev.nunits", ;
		FontName = "Courier New", ;
		FontSize = 8, ;
		Left = 63, ;
		Name = "txtnUnits", ;
		Top = 31
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'Grdgridcustom1.Column5.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "Price", ;
		FontSize = 8, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'Grdgridcustom1.Column5.txtnPrice' AS txttextboxcustom WITH ;
		ControlSource = "wellrev.nprice", ;
		FontName = "Courier New", ;
		FontSize = 8, ;
		Left = 66, ;
		Name = "txtnPrice", ;
		Top = 31
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'Grdgridcustom1.Column6.Chkcheckboxcustom1' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Chkcheckboxcustom1", ;
		Left = 92, ;
		Name = "Chkcheckboxcustom1", ;
		Top = 31
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'Grdgridcustom1.Column6.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "Total", ;
		FontName = "Arial", ;
		FontSize = 8, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'Grdgridcustom1.Column6.txtnTotalInc' AS txttextboxcustom WITH ;
		ControlSource = "wellrev.ntotalinc", ;
		FontName = "Courier New", ;
		FontSize = 8, ;
		Left = 54, ;
		Name = "txtnTotalInc", ;
		Top = 31
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'Grdgridcustom1.Column7.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "Year", ;
		FontSize = 8, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'Grdgridcustom1.Column7.txtcYear' AS txttextboxcustom WITH ;
		ControlSource = "wellrev.cYear", ;
		FontSize = 8, ;
		Left = 30, ;
		Name = "txtcYear", ;
		Top = 31
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'Grdgridcustom1.Column8.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "Prd", ;
		FontSize = 8, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'Grdgridcustom1.Column8.txtcPeriod' AS txttextboxcustom WITH ;
		ControlSource = "wellrev.cperiod", ;
		FontSize = 8, ;
		Left = 10, ;
		Name = "txtcPeriod", ;
		Top = 19
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'Grdgridcustom1.Column9.chkqbnopost' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "", ;
		ControlSource = "wellrev.lnopostqb", ;
		Left = 11, ;
		Name = "chkqbnopost", ;
		Top = 31
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'Grdgridcustom1.Column9.Header1' AS header WITH ;
		Caption = "NP", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'lblAmount' AS lblfieldlabelcustom WITH ;
		BackColor = 255,255,128, ;
		BackStyle = 1, ;
		Caption = "Total", ;
		FontBold = .T., ;
		FontSize = 8, ;
		Height = 16, ;
		Left = 555, ;
		Name = "lblAmount", ;
		TabIndex = 14, ;
		Top = 75, ;
		Width = 29, ;
		ZOrderSet = 15
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblClosed' AS lbllabelcustom WITH ;
		Caption = "RUN CLOSED", ;
		FontSize = 20, ;
		ForeColor = 255,0,0, ;
		Left = 218, ;
		Name = "lblClosed", ;
		TabIndex = 9, ;
		Top = 293, ;
		Visible = .F., ;
		ZOrderSet = 19
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblDate' AS lblfieldlabelcustom WITH ;
		BackColor = 255,255,128, ;
		BackStyle = 1, ;
		Caption = "Acct Date", ;
		FontBold = .T., ;
		FontSize = 8, ;
		Height = 16, ;
		Left = 261, ;
		Name = "lblDate", ;
		TabIndex = 11, ;
		Top = 75, ;
		Width = 53, ;
		ZOrderSet = 11
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblGroup' AS lbllabelcustom WITH ;
		Caption = " ", ;
		Height = 16, ;
		Left = 76, ;
		Name = "lblGroup", ;
		TabIndex = 7, ;
		Top = -12, ;
		Width = 5, ;
		ZOrderSet = 21
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblIncnote' AS lblfieldlabelcustom WITH ;
		Caption = "Notes:", ;
		FontSize = 8, ;
		Height = 16, ;
		Left = 9, ;
		Name = "lblIncnote", ;
		TabIndex = 36, ;
		Top = 145, ;
		Width = 33, ;
		ZOrderSet = 20
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom1' AS lbllabelcustom WITH ;
		BackColor = 255,255,128, ;
		BackStyle = 1, ;
		Caption = "Price", ;
		Comment = "P", ;
		FontBold = .T., ;
		Left = 452, ;
		Name = "Lbllabelcustom1", ;
		TabIndex = 13, ;
		Top = 75, ;
		ZOrderSet = 42
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom2' AS lbllabelcustom WITH ;
		Caption = "/", ;
		Left = 111, ;
		Name = "Lbllabelcustom2", ;
		TabIndex = 45, ;
		Top = 120, ;
		ZOrderSet = 32
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom3' AS lbllabelcustom WITH ;
		Caption = "Prod Period", ;
		Left = 9, ;
		Name = "Lbllabelcustom3", ;
		TabIndex = 46, ;
		Top = 120, ;
		ZOrderSet = 34
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom7' AS lbllabelcustom WITH ;
		Caption = "Deck:", ;
		Left = 173, ;
		Name = "Lbllabelcustom7", ;
		TabIndex = 25, ;
		Top = 120, ;
		ZOrderSet = 63
		*< END OBJECT: ClassLib="..\..\..\codeminenew\ampro_rv\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblRefid' AS lblfieldlabelcustom WITH ;
		Caption = "Refid:", ;
		FontSize = 8, ;
		Height = 16, ;
		Left = 9, ;
		Name = "lblRefid", ;
		TabIndex = 33, ;
		Top = 169, ;
		Width = 30, ;
		ZOrderSet = 8
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblRunNo' AS lbllabelcustom WITH ;
		Caption = "Run No", ;
		Left = 21, ;
		Name = "lblRunNo", ;
		TabIndex = 44, ;
		Top = 44, ;
		ZOrderSet = 28
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblSource' AS lblfieldlabelcustom WITH ;
		BackColor = 255,255,128, ;
		BackStyle = 1, ;
		Caption = "Type", ;
		FontBold = .T., ;
		FontSize = 8, ;
		Height = 16, ;
		Left = 21, ;
		Name = "lblSource", ;
		TabIndex = 10, ;
		Top = 75, ;
		Width = 29, ;
		ZOrderSet = 9
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbltextcustom17' AS lbltextcustom WITH ;
		Caption = "Total Income:", ;
		Left = 433, ;
		Name = "Lbltextcustom17", ;
		TabIndex = 39, ;
		Top = 422, ;
		ZOrderSet = 39
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbltextcustom4' AS lbltextcustom WITH ;
		Caption = "-", ;
		FontBold = .T., ;
		FontSize = 8, ;
		Height = 16, ;
		Left = 449, ;
		Name = "Lbltextcustom4", ;
		TabIndex = 31, ;
		Top = 120, ;
		Width = 6, ;
		ZOrderSet = 30
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbltextcustom6' AS lbltextcustom WITH ;
		Caption = "Days On:", ;
		FontSize = 8, ;
		Height = 16, ;
		Left = 533, ;
		Name = "Lbltextcustom6", ;
		TabIndex = 32, ;
		Top = 120, ;
		Width = 47, ;
		ZOrderSet = 33
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbltextcustom7' AS lbltextcustom WITH ;
		Caption = "Range:", ;
		Left = 359, ;
		Name = "Lbltextcustom7", ;
		TabIndex = 30, ;
		Top = 120, ;
		ZOrderSet = 37
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblUnits' AS lblfieldlabelcustom WITH ;
		BackColor = 255,255,128, ;
		BackStyle = 1, ;
		Caption = "# Units", ;
		FontBold = .T., ;
		FontSize = 8, ;
		Height = 16, ;
		Left = 361, ;
		Name = "lblUnits", ;
		TabIndex = 12, ;
		Top = 75, ;
		Width = 39, ;
		ZOrderSet = 13
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblWellid2' AS lblfieldlabelcustom WITH ;
		Caption = "Well Name:", ;
		FontSize = 8, ;
		Height = 16, ;
		Left = 160, ;
		Name = "lblWellid2", ;
		TabIndex = 8, ;
		Top = 14, ;
		Width = 55, ;
		ZOrderSet = 6
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Runcombo1' AS runcombo WITH ;
		ColumnWidths = "230,0,0", ;
		cshowwhat = R, ;
		Height = 20, ;
		Left = 70, ;
		Name = "Runcombo1", ;
		TabIndex = 6, ;
		Top = 42, ;
		Width = 261, ;
		ZOrderSet = 35
		*< END OBJECT: ClassLib="..\custom\swcontrol.vcx" BaseClass="combobox" />

	ADD OBJECT 'Shpshapecustom1' AS shpshapecustom WITH ;
		BackColor = 255,255,128, ;
		Height = 124, ;
		Left = 2, ;
		Name = "Shpshapecustom1", ;
		Top = 68, ;
		Width = 624, ;
		ZOrderSet = 2
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="shape" />

	ADD OBJECT 'Swperiod' AS swperiod WITH ;
		Left = 84, ;
		Name = "Swperiod", ;
		TabIndex = 21, ;
		Top = 118, ;
		ZOrderSet = 31
		*< END OBJECT: ClassLib="..\custom\swcontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'Swyear' AS swyear WITH ;
		Left = 120, ;
		Name = "Swyear", ;
		TabIndex = 22, ;
		Top = 118, ;
		ZOrderSet = 29
		*< END OBJECT: ClassLib="..\custom\swcontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtCbegrange' AS txttextboxcustom WITH ;
		ControlSource = "", ;
		FontSize = 8, ;
		Height = 20, ;
		InputMask = "99/99", ;
		Left = 398, ;
		MaxLength = 5, ;
		Name = "txtCbegrange", ;
		SelectOnEntry = .T., ;
		TabIndex = 24, ;
		Top = 118, ;
		Width = 42, ;
		ZOrderSet = 23
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtCendrange' AS txttextboxcustom WITH ;
		ControlSource = "", ;
		FontSize = 8, ;
		Height = 20, ;
		InputMask = "99/99", ;
		Left = 462, ;
		MaxLength = 5, ;
		Name = "txtCendrange", ;
		SelectOnEntry = .T., ;
		TabIndex = 26, ;
		Top = 118, ;
		Width = 44, ;
		ZOrderSet = 24
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcNotes' AS txttextboxcustom WITH ;
		Height = 20, ;
		Left = 51, ;
		Name = "txtcNotes", ;
		TabIndex = 28, ;
		Top = 143, ;
		Width = 453, ;
		ZOrderSet = 46
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcOwnerID' AS txtquickfill WITH ;
		clistexpression = investor.cownerid, ;
		clistworkarea = investor, ;
		ControlSource = "", ;
		Format = "!", ;
		Height = 20, ;
		InputMask = "", ;
		Left = 535, ;
		MaxLength = 10, ;
		Name = "txtcOwnerID", ;
		SelectOnEntry = .T., ;
		TabIndex = 35, ;
		Top = 166, ;
		Width = 76, ;
		ZOrderSet = 40
		*< END OBJECT: ClassLib="..\custom\cgadget.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcPurchaser' AS txtquickfill WITH ;
		clistexpression = crevname, ;
		clistworkarea = revsrc, ;
		Height = 20, ;
		lallowexceptions = .F., ;
		Left = 68, ;
		MaxLength = 30, ;
		Name = "txtcPurchaser", ;
		TabIndex = 16, ;
		Top = 93, ;
		Width = 184, ;
		ZOrderSet = 10
		*< END OBJECT: ClassLib="..\custom\cgadget.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcWellID' AS txtquickfill WITH ;
		clistexpression = cWellID, ;
		clistworkarea = wells, ;
		ControlSource = "wells.cwellid", ;
		Format = "!", ;
		Height = 20, ;
		Left = 70, ;
		lrequired = .T., ;
		MaxLength = 10, ;
		Name = "txtcWellID", ;
		TabIndex = 4, ;
		Top = 12, ;
		Width = 84, ;
		ZOrderSet = 17
		*< END OBJECT: ClassLib="..\custom\cgadget.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcWellName' AS txttextboxcustom WITH ;
		BackColor = 212,208,200, ;
		ControlSource = "", ;
		FontSize = 8, ;
		Height = 20, ;
		Left = 222, ;
		MaxLength = 0, ;
		Name = "txtcWellName", ;
		TabIndex = 5, ;
		Top = 12, ;
		Width = 263, ;
		ZOrderSet = 5
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtdRevDate' AS dpk WITH ;
		Height = 20, ;
		Left = 254, ;
		lnocurrentdate = .F., ;
		lrequired = .T., ;
		Name = "txtdRevDate", ;
		TabIndex = 17, ;
		Top = 93, ;
		Visible = .T., ;
		Width = 67, ;
		ZOrderSet = 44
		*< END OBJECT: ClassLib="..\custom\swdate.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtnDaysOn' AS txttextboxcustom WITH ;
		Alignment = 3, ;
		FontSize = 8, ;
		Height = 20, ;
		InputMask = "999", ;
		Left = 580, ;
		Name = "txtnDaysOn", ;
		SelectOnEntry = .T., ;
		TabIndex = 27, ;
		Top = 118, ;
		Value = 0, ;
		Width = 41, ;
		ZOrderSet = 16
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtnPrice' AS txttextboxcustom WITH ;
		Alignment = 3, ;
		ControlSource = "", ;
		FontSize = 8, ;
		Height = 20, ;
		InputMask = "999.999999", ;
		Left = 444, ;
		Name = "txtnPrice", ;
		SelectOnEntry = .T., ;
		TabIndex = 19, ;
		Top = 93, ;
		Value = 0, ;
		Width = 67, ;
		ZOrderSet = 14
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtnTotalInc' AS txttextboxcustom WITH ;
		Alignment = 3, ;
		ControlSource = "", ;
		FontSize = 8, ;
		Height = 20, ;
		InputMask = "999999999.99", ;
		Left = 516, ;
		Name = "txtnTotalInc", ;
		SelectOnEntry = .T., ;
		TabIndex = 20, ;
		Top = 93, ;
		Value = 0, ;
		Width = 107, ;
		ZOrderSet = 18
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtnUnits' AS txttextboxcustom WITH ;
		Alignment = 3, ;
		ControlSource = "", ;
		FontSize = 8, ;
		Height = 20, ;
		InputMask = "999999999.99", ;
		Left = 340, ;
		Name = "txtnUnits", ;
		SelectOnEntry = .T., ;
		TabIndex = 18, ;
		Top = 93, ;
		Value = 0, ;
		Width = 102, ;
		ZOrderSet = 12
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtRefid' AS txttextboxcustom WITH ;
		ControlSource = "", ;
		FontSize = 8, ;
		Height = 20, ;
		Left = 51, ;
		MaxLength = 10, ;
		Name = "txtRefid", ;
		SelectOnEntry = .T., ;
		TabIndex = 29, ;
		Top = 167, ;
		Width = 152, ;
		ZOrderSet = 7
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtrevkey' AS txttextboxcustom WITH ;
		Left = 68, ;
		Name = "txtrevkey", ;
		TabIndex = 43, ;
		Top = 93, ;
		Visible = .F., ;
		ZOrderSet = 1
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtTotalInc' AS txttextboxcustom WITH ;
		Height = 20, ;
		Left = 501, ;
		Name = "txtTotalInc", ;
		TabIndex = 38, ;
		Top = 420, ;
		Width = 106, ;
		ZOrderSet = 22
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />
	
	PROCEDURE Activate
		
		DODEFAULT()
		*!*	WITH THISFORM
		*!*	   .txtnUnits.setvalue(0)
		*!*	   .txtnPrice.setvalue(0)
		*!*	   .txtnTotalInc.setvalue(0)
		*!*	   .txtnDaysOn.setvalue(0)
		*!*	   .txtdRevDate.setvalue(DATE())
		*!*	ENDWITH
		   
	ENDPROC

	PROCEDURE adddetail		&& Add the detail information to the income table
		LOCAL m.cWellID, m.cYear, m.cPeriod, m.cSource, m.cRevKey, m.nUnits
		LOCAL m.nPrice, m.nTotalInc, m.cBegRange, m.cEndRange, m.cNotes
		LOCAL m.cOwnerID, m.nDaysOn
		
		*
		*  Check to see if period is closed
		*
		IF THISFORM.lClosed
		   WAIT WIND NOWAIT 'This period and group is closed. No updates allowed.'
		   RETURN
		ENDIF
		
		*  Don't allow zero-amount lines to be added
		IF thisform.txtntotalInc.Value = 0
		   thisform.oMessage.Warning('Zero-amount detail lines cannot be added.')
		   thisform.setnextcontrol(thisform.txtntotalInc)
		   RETURN
		ENDIF 
		
		*  Check to make sure the division of interests for this
		*  class are 100%.  If not, give a message.
		IF NOT chkdoi(wells.cWellID, thisform.cbosource.value, thisform.cboDeck.value)
		   RETURN .F.
		ENDIF
		
		
		* Don't allow an entry to be saved if the link to QB is not active and
		* they haven't specified Don't Post to QuickBooks
		IF NOT m.goApp.lQBActive AND NOT thisform.chkQBPost.Value
		   thisform.omessage.warning("The link to QuickBooks is not active. This entry cannot be added unless the DON'T POST TO QUICKBOOKS option is included.")
		   RETURN .f.
		ENDIF 
		
		WITH THISFORM
		   .lChanged = .T.
		   *  Store the detail in memory variables that are the same names
		   *  as the table fields
		
		   SELECT income
		   m.cidinch    = ''
		   m.cWellID    = wells.cWellID
		   m.cPeriod    = .swperiod.VALUE
		   m.cYear      = .swyear.VALUE
		   m.cSource    = .cboSource.VALUE
		   m.cDeck      = .cbodeck.value 
		   SELE revsrc
		   LOCATE FOR crevname = THISFORM.txtcpurchaser.VALUE
		   IF FOUND()
		      m.cRevKey    = revsrc.cRevKey
		      m.crevname   = revsrc.crevname
		   ELSE
		      THISFORM.omessage.warning('The purchaser specified cannot be found in the purchaser file.')
		      RETURN .F.
		   ENDIF
		   m.dRevDate   = .txtdRevDate.VALUE
		   m.nUnits     = .txtnUnits.VALUE
		   m.nPrice     = .txtnPrice.VALUE
		   IF 'TAX' $ m.cSource
		      m.nTotalInc = .txtnTotalInc.value * -1
		   else
		      m.nTotalInc  = .txtnTotalInc.VALUE
		   ENDIF    
		   m.cBegRange  = .txtcBegRange.VALUE
		   m.cEndRange  = .txtcEndRange.VALUE
		   m.cMemo      = .txtcNotes.VALUE
		   m.cOwnerID   = .txtcOwnerID.VALUE
		   m.nDaysOn    = .txtnDaysOn.VALUE
		   m.lnopostqb  = .chkqbpost.VALUE
		   m.mIncNote   = ''
		   m.cRefID     = .txtrefid.VALUE
		   STORE .F. TO m.lOneMan, m.lCSTran, m.lClosed
		
		   *
		   *  Check to see if its a one man item.  If so check to see
		   *  if the type of income is directly paid.  If so, don't let
		   *  this allocation happen.
		   *
		   SELE wellinv
		   LOCATE FOR cOwnerID = m.cOwnerID AND cWellID = m.cWellID
		   IF FOUND()
		      llNoGo = .F.
		      DO CASE
		         CASE m.cSource = 'BBL'
		            IF wellinv.cdirect = 'O' OR wellinv.cdirect = 'B'
		               llNoGo = .T.
		            ENDIF
		         CASE m.cSource = 'MCF'
		            IF wellinv.cdirect = 'G' OR wellinv.cdirect = 'B'
		               llNoGo = .T.
		            ENDIF
		      ENDCASE
		      IF llNoGo
		         THISFORM.omessage.warning('This type of income cannot be allocated all to this owner. The owner is directly paid this type of revenue.')
		         RETURN .F.
		      ENDIF
		   ENDIF
		
		   SELECT revsrc
		   LOCATE FOR TRIM(.txtcpurchaser.VALUE) $ crevname
		   IF FOUND()
		      m.cRevKey = cRevKey
		   ENDIF
		
		*   IF NOT THISFORM.leditdetail
		      THISFORM.cmdatamanager.new('Wellrev')
		*   ELSE
		*      SELE wellrev
		*      GOTO THISFORM.neditrecno
		*   ENDIF
		   SELECT wellrev
		   GATHER MEMVAR
		
		   IF m.lnopostqb
		      MESSAGEBOX("This revenue is marked not to post to QuickBooks."  + CHR(10) + CHR(10) + ;
		         "Nothing will be posted to QuickBooks when this     "  + CHR(10) + ;
		         "revenue is saved."                                  + CHR(10) + CHR(10) + ;
		         "However, when the revenue run which processes this" + CHR(10) + ;
		         "revenue is closed and then posted to QuickBooks,"   + CHR(10) + ;
		         "the clearing entries will still be made for this"   + CHR(10) + ;
		         "revenue. This will cause more revenue to be cleared"+ CHR(10) + ;
		         "than what was originally posted for the run."      + CHR(10) + ;
		         "You will need to make an adjustment in QuickBooks"  + CHR(10) + ;
		         "to the Revenue Clearing account to correct this." + CHR(10) + CHR(10) + ;
		         "Please see the 'Don't post to QuickBooks' topic"    + CHR(10) + ;
		         "in the Help file for more information.",48,"QuickBooks No Post Notice")
		   ENDIF
		
		   STORE '' TO .txtcNotes.VALUE, .txtcOwnerID.VALUE, .txtcpurchaser.VALUE
		   .txtnUnits.setvalue(0)
		   .txtnPrice.setvalue(0)
		   .txtnTotalInc.setvalue(0)
		   .txtnDaysOn.setvalue(0)
		   .calctot()
		   .setnextcontrol(THISFORM.cboSource)
		   THISFORM.cboSource.SETFOCUS()
		   m.goStateManager.RefreshAll('Form Edit')
		   THISFORM.REFRESH()
		ENDWITH
		
	ENDPROC

	PROCEDURE calcdayson		&& Calculates the days on.
		LOCAL lcBegRange, lcEndRange, lcYear, lcYear1, ldDate1, ldDate2, lnDays
		
		lcYear = STR(YEAR(DATE()),4)
		
		SELECT options
		GO TOP
		glCalcDays = lCalcDays
		
		lcBegRange = THISFORM.txtcBegRange.VALUE
		lcEndRange = THISFORM.txtcEndRange.VALUE
		
		*
		*  If both oil & gas periods are displayed, use the gas period to
		*  calculate the dayson.  Otherwise use the oil period.
		*
		IF glCalcDays
		   IF LEFT(lcBegRange,2) > LEFT(lcEndRange,2)
		      lcYear1 = STR(VAL(lcYear)+1,4)
		   ELSE
		      lcYear1 = lcYear
		   ENDIF
		   ldDate1 = CTOD(lcBegRange+'/'+lcYear)
		   ldDate2 = CTOD(lcEndRange+'/'+lcYear1)
		   lnDays  = ldDate2 - ldDate1 + 1
		   thisform.txtnDaysOn.setvalue(lnDays)
		   thisform.txtnDaysOn.refresh()
		ENDIF
		
	ENDPROC

	PROCEDURE calctot		&& Calculates the total  income for the period.
		LOCAL lnTotal, lcidinch, lnRecNo, lcSelect
		
		lcSelect = SELECT()
		
		SELECT wellrev
		lnRecNo = RECNO()
		SUM(nTotalInc) TO lnTotal
		IF lnRecNo <= RECC()
		   GOTO lnRecNO
		ENDIF   
		
		thisform.txtTotalInc.Value = lnTotal
		thisform.txtTotalInc.Refresh()
		
		SELECT (lcSelect)
		
	ENDPROC

	PROCEDURE calctotalinc		&& Calculates the total income based on the units and price entered.
		LOCAL lntotal
		lnTotal = ROUND(thisform.txtnUnits.Value * thisform.txtnPrice.value,2)
		thisform.txtnTotalInc.SetValue(lntotal)
		thisform.txtnTotalInc.Refresh()
		
		
	ENDPROC

	PROCEDURE checkclose		&& Checks to see if the period has been closed.
		LOCAL lcYear, lcPeriod, lcGroup, lcAlias, llReturn
		SET DELETED ON
		lcAlias = ALIAS()
		
		lnRunNo    = INT(VAL(THISFORM.RunCombo1.LISTITEM[THISFORM.RunCombo1.LISTITEMID,3]))
		
		IF lnRunNo <> 0
		   RETURN .T.
		ELSE
		   RETURN .F.
		ENDIF      
		
		
	ENDPROC

	PROCEDURE checkcloserun
	ENDPROC

	PROCEDURE checkruns		&& Checks for last closed run for given well.
	ENDPROC

	PROCEDURE delete
		LPARAMETERS cworkarea, tlDetail
		
		* Set the workarea to Wellrev if none was passed
		IF TYPE('cworkarea') <> 'C'
		   cworkarea = 'Wellrev'
		ENDIF
		
		* We won't delete from the wells table so set the
		* workarea as Wellrev if wells was passed   
		IF cworkarea = 'Wells'
		   cworkarea = 'Wellrev'
		ENDIF   
		
		thisform.lDelDetail = .t.
		
		* Delete the record from wellrev view
		SELECT wellrev
		DELETE NEXT 1
		
		* Let the form know something changed
		thisform.lchanged = .t.
		
		* Call the processing in the before delete method
		thisform.cmdatamanager.beforedelete('Wellrev')
		
		
		
	ENDPROC

	PROCEDURE deleteqb		&& Deletes the passed income entry from QB.
		LPARAMETERS tcidinco
		LOCAL loRequest, loResponse, loRcptDel, m.ctxnid, loDelResp, lcAlias
		
		lcAlias = ALIAS()
		
		IF m.goapp.oQB.lqbactive
		   SELE inctxnid
		   LOCATE FOR cidinco = tcidinco
		   IF FOUND()
		      m.ctxnid = ctxnid
		      * add a request to delete the receipt
		      llReturn = m.goApp.oQB.DeleteTxnID(m.cTxnID, 15)
		   ENDIF
		ENDIF
		
		SELECT (lcAlias)
	ENDPROC

	PROCEDURE editdetail		&& Brings the current record in the grid up to the detail section in the form.
		IF wellrev.nrunno <> 0
		   WAIT WIND NOWAIT 'This period and group is closed. No updates allowed.'
		   RETURN
		ENDIF
		
		IF wellrev.lcstran = .T.
		   thisform.oMessage.Warning('This revenue entry was entered through the Cash/Production Revenue Receipts screen. ' +  ;
		                             'Changes cannot be made here.')
		   RETURN
		ENDIF   
		
		sele wellrev
		thisform.leditdetail = .T.
		thisform.neditrecno = recno()
		      
		WITH THISFORM
		   .lChanged = .T.
		   DO CASE
		      CASE wellrev.csource = 'BBL'
		         .cboSource.LISTITEMID = 1
		      CASE wellrev.csource = 'MCF'
		         .cboSource.LISTITEMID = 2
		      CASE wellrev.csource = 'OTH'
		         .cboSource.LISTITEMID = 3   
		      CASE wellrev.csource = 'MISC1'
		         .cboSource.LISTITEMID = 4
		      CASE wellrev.csource = 'MISC2'
		         .cboSource.LISTITEMID = 5
		      CASE wellrev.csource = 'TRANS'
		         .cboSource.LISTITEMID = 6
		      CASE wellrev.csource = 'OTAX1'
		         .cboSource.LISTITEMID = 7
		      CASE wellrev.csource = 'OTAX2'
		         .cboSource.LISTITEMID = 8
		      CASE wellrev.csource = 'OTAX3'
		         .cboSource.LISTITEMID = 9   
		      CASE wellrev.csource = 'OTAX4'
		         .cboSource.LISTITEMID = 10
		      CASE wellrev.csource = 'GTAX1'
		         .cboSource.LISTITEMID = 11
		      CASE wellrev.csource = 'GTAX2'
		         .cboSource.LISTITEMID = 12
		      CASE wellrev.csource = 'GTAX3'
		         .cboSource.LISTITEMID = 13
		      CASE wellrev.csource = 'GTAX4'
		         .cboSource.LISTITEMID = 14               
		      CASE wellrev.csource = 'PTAX1'
		         .cboSource.LISTITEMID = 15
		      CASE wellrev.csource = 'PTAX2'
		         .cboSource.LISTITEMID = 16
		      CASE wellrev.csource = 'PTAX3'
		         .cboSource.LISTITEMID = 17
		      CASE wellrev.csource = 'PTAX4'
		         .cboSource.LISTITEMID = 18                  
		      CASE wellrev.csource = 'EXP'
		         .cboSource.LISTITEMID = 19   
		   ENDCASE
		
		   .txtdRevDate.SETVALUE(wellrev.drevdate)
		   .txtnUnits.setvalue(wellrev.nUnits)
		   .txtnPrice.setvalue(wellrev.nPrice)
		   .txtnTotalInc.setvalue(wellrev.nTotalInc)
		   .txtcBegRange.VALUE  = wellrev.cBegRange
		   .txtcEndRange.VALUE  = wellrev.cEndRange
		   .txtnDaysOn.setvalue(wellrev.nDaysOn)
		   .txtcOwnerID.VALUE   = wellrev.cownerid
		   .txtrefid.value      = wellrev.crefid
		   .txtrevkey.value     = wellrev.crevkey
		   .txtcPurchaser.value = wellrev.cRevName
		   .swperiod.value      = wellrev.cperiod
		   .swyear.value        = wellrev.cyear
		   .chkqbpost.value     = wellrev.lnopostqb
		   .txtcNotes.VALUE     = wellrev.cmemo
		   
		   m.cDeck               = wellrev.cDeck
		   IF EMPTY(m.cDeck)
		      m.cDeck = THISFORM.oWellInv.DOIDeckNameLookup(wellrev.cYear, wellrev.cPeriod, wellrev.cWellID)
		   ENDIF   
		   .cbodeck.requery(m.cDeck)
		      
		   thisform.deleteQB(wellrev.cidinco)
		   SELECT wellrev   
		   DELETE NEXT 1
		   =TABLEUPDATE(.t.)
		
		   thisform.grdgridcustom1.Refresh()
		   thisform.setnextcontrol(thisform.cboSource)
		ENDWITH
		
		
		
	ENDPROC

	PROCEDURE Error
		LPARAMETERS nerror,cmethod,nline
		
		IF BETWEEN(m.nError,1426,1429)
		   THIS.qberror()
		ELSE
		   DODEFAULT(nerror,cmethod,nline)
		ENDIF      
	ENDPROC

	PROCEDURE getrange		&& Gets the period range for gas and oil
	ENDPROC

	PROCEDURE getrevenue		&& Refreshes the grid with the revenue for the given well and run.
		LOCAL lcYear, lcPeriod, lcWellID, lnRecNo, lcWellName, lcGroup
		
		lnRunNo     = INT(VAL(THISFORM.Runcombo1.LISTITEM[THISFORM.Runcombo1.LISTITEMID,3]))
		lcYear      = THISFORM.Runcombo1.LISTITEM[THISFORM.Runcombo1.LISTITEMID,2]
		lcTypeClose = THISFORM.Runcombo1.LISTITEM[THISFORM.Runcombo1.LISTITEMID,6]
		lcGroup     = THISFORM.Runcombo1.LISTITEM[THISFORM.Runcombo1.LISTITEMID,4]
		lcWellID    = thisform.txtcwellid.value
		lcWellName  = THISFORM.txtcWellName.VALUE
		
		IF thisform.cmdatamanager.ischanged()
		   sele wellrev
		   =tableupdate(.t.)
		   sele income
		   =tableupdate(.t.)
		ENDIF         
		
		thisform.requery()
		
		IF thisform.checkclose()
		   thisform.lblClosed.Visible = .T.
		   thisform.cmdatamanager.revertall()
		ELSE   
		   thisform.lblClosed.Visible = .F.
		ENDIF
		
		RETURN .t.
		
	ENDPROC

	PROCEDURE Init
		IF DODEFAULT()
		   SELE glopt
		   GO TOP
		   this.lqbpost   = not ldmnopost
		   this.lqbrevpost = not ldmnorev
		
		   THISFORM.RunCombo1.LISTITEMID = 1
		   this.oWellInv = CREATEOBJECT('swbizobj_wellinv')
		ENDIF
		
	ENDPROC

	PROCEDURE new
		LPARAMETERS cworkarea
		
		*
	ENDPROC

	PROCEDURE qberror
	ENDPROC

	PROCEDURE requery
		LPARAMETERS cworkarealist
		LOCAL llError, lnRunNo, lcRunYear, lcTypeClose, lcGroup, lcWellID, lcWellName
		
		STORE .f. TO llError
		
		lnRunNo     = INT(VAL(THISFORM.RUNCOMBO1.LISTITEM[THISFORM.RUNCOMBO1.LISTITEMID,3]))
		lcRunYear   = THISFORM.RUNCOMBO1.LISTITEM[THISFORM.RUNCOMBO1.LISTITEMID,2]
		lcTypeClose = THISFORM.RUNCOMBO1.LISTITEM[THISFORM.RUNCOMBO1.LISTITEMID,6]
		lcGroup     = THISFORM.RUNCOMBO1.LISTITEM[THISFORM.RUNCOMBO1.LISTITEMID,4]
		lcWellID    = wells.cwellid
		lcWellName  = THISFORM.txtcWellName.VALUE
		
		set dele on
		
		* Catch errors on the requery and handle them
		TRY 
		  REQUERY('wellrev')
		CATCH TO loError
		  * Catch uncommitted changes
		  IF loError.ErrorNo = 1545
		     llError = .T.
		  ENDIF    
		ENDTRY   
		
		* Error ocurred so save the form and try the requery again
		IF llError
		   llError = .F.
		   thisform.save()
		   TRY 
		      REQUERY('wellrev')
		   CATCH TO loError
		      llError = .T.
		   ENDTRY 
		ENDIF 
		
		IF llError
		      MESSAGEBOX('Error encountered: ' + CHR(10) + ;
		                 'Error No: ' + TRANSFORM(loError.ErrorNo) + CHR(10) + ;
		                 'Description: ' + loError.message,16,'Well Expenses Query Error')
		      RETURN            
		ENDIF 
		thisform.calctot()
		thisform.refresh()
	ENDPROC

	PROCEDURE cboDeck.Init
		IF DODEFAULT()
		   this.Requery()
		ENDIF    
	ENDPROC

	PROCEDURE cboDeck.Requery
		LPARAMETERS tcDeck, tcYear, tcPeriod
		
		IF DODEFAULT()
			THIS.Clear()
			this.Value = ''
			this.DisplayValue = ''
			IF VARTYPE(tcYear) # 'C'
			   tcYear = ''
			ENDIF 
			IF VARTYPE(tcPeriod) # 'C'
			   tcPeriod = ''
			ENDIF 
		
		    IF VARTYPE(tcDeck) # 'C'
		       tcDeck = ''
		    ENDIF 
		       
		    lcWellID = thisform.txtcwellID.Value 
		    IF EMPTY(lcWellID)
		       RETURN
		    ENDIF 
		    
		    lnIndex = 1
		    
		    * Get a list of decks for the given well
			SELECT cdeck, ldefault, effstartyr, effstartprd FROM doidecks ;
				INTO CURSOR temp ;
				WHERE cwellid = lcwellid ;
				ORDER BY cdeck DESC  ;
				GROUP BY cdeck
		
		    * Add the decks to the dropdown
			lnx = 1
			IF _TALLY > 0
				SELECT temp
				SCAN
					SCATTER MEMVAR
					IF EMPTY(m.cdeck)
					   m.cdeck = '(blank)'
					ENDIF 
					THIS.ADDLISTITEM(m.cdeck,lnx,1)
					THIS.ADDLISTITEM(m.cdeck,lnx,2)
					
					* If we passed the deck or production period
					* set the deck to the given deck or the one
					* that has an effective date for the production period.
					IF NOT EMPTY(tcDeck)
						IF m.cDeck = tcDeck
					  	 	lnIndex = lnx
						ENDIF 
					ELSE
					   IF tcYear = m.effstartyr AND tcPeriod = m.effstartprd
					      lnIndex = lnX
					   ENDIF 
					ENDIF 	
					lnx = lnx + 1 
				ENDSCAN
			    this.ListItemId = lnIndex
			ELSE 		
			    this.ListItemId = 1
			ENDIF
		ENDIF
		
	ENDPROC

	PROCEDURE cboDeck.Valid
		RETURN .t.
	ENDPROC

	PROCEDURE cboSource.Init
		LOCAL lnCount
		
		
		swselect('revcat')
		lnCount = 2
		
		THIS.ADDLISTITEM('     ', 1, 1)
		THIS.ADDLISTITEM('              ', 1, 2)
		
		SCAN
		   SCATTER MEMVAR
		   THIS.ADDLISTITEM(revcat.crevtype, lnCount, 1)
		   THIS.ADDLISTITEM(revcat.crevdesc, lnCount, 2)
		   lnCount = lnCount + 1
		ENDSCAN
		
		THIS.LISTITEMID = 1
		DODEFAULT()
	ENDPROC

	PROCEDURE cboSource.LostFocus
		LOCAL lcWellID
		
		lcWellID = wells.cwellid
		
		*
		*  Get the default purchaser and price
		*
		SELECT wells
		SET ORDER TO cwellid
		IF SEEK(lcWellID)
		   DO CASE
		      CASE INLIST(THIS.VALUE,'BBL','OTAX1','OTAX2','OTAX3','OTAX4')
		         IF THISFORM.txtnprice.VALUE = 0 AND this.Value = 'BBL'
		            THISFORM.txtnprice.setvalue(wells.nbblprice)
		            THISFORM.txtnprice.REFRESH()
		         ENDIF
		         lcrev = wells.crevbbl
		         IF NOT EMPTY(lcrev)
		            IF EMPTY(THISFORM.txtcPurchaser.VALUE)
		               SELECT revsrc
		               LOCATE FOR crevkey = lcrev
		               IF FOUND()
		                  THISFORM.txtcPurchaser.VALUE = crevname
		                  *  If the purchaser's default price is not
		                  *  zero, plug that price in.
		                  IF revsrc.ndefprice <> 0 AND this.Value = 'BBL'
		                     THISFORM.txtnprice.setvalue(revsrc.ndefprice)
		                  ENDIF
		               ENDIF
		            ENDIF
		         ENDIF
		      CASE INLIST(THIS.VALUE,'MCF','GTAX1','GTAX2','GTAX3','GTAX4')
		         IF THISFORM.txtnprice.VALUE = 0 AND this.Value = 'MCF'
		            THISFORM.txtnprice.setvalue(wells.nmcfprice)
		            THISFORM.txtnprice.REFRESH()
		         ENDIF
		         lcrev = wells.crevmcf
		         IF NOT EMPTY(lcrev)
		            IF EMPTY(THISFORM.txtcPurchaser.VALUE)
		               SELECT revsrc
		               LOCATE FOR crevkey = lcrev
		               IF FOUND()
		                  THISFORM.txtcPurchaser.VALUE = crevname
		                  *  If the purchaser's default price is not
		                  *  zero, plug that price in.
		                  IF revsrc.ndefprice <> 0 AND this.Value = 'MCF'
		                     THISFORM.txtnprice.setvalue(revsrc.ndefprice)
		                  ENDIF
		               ENDIF
		            ENDIF
		         ENDIF
		   ENDCASE
		   IF 'TAX' $ THIS.VALUE
		      THISFORM.txtnPrice.ENABLED = .F.
		      THISFORM.txtnunits.ENABLED = .F.
		      THISFORM.txtnunits.VALUE = 0
		      THISFORM.txtnPrice.VALUE = 0
		      
		      *  If a tax is chosen, check to see if the well is marked as exempt from any of the tax types.
		      *  If it is, don't let them enter it.   
		      SELECT wells
		      LOCATE FOR cWellID == this.Parent.txtcwellID.Value
		      IF FOUND()
		         IF lTaxExempt1 OR lTaxExempt2 OR lTaxExempt3 OR lTaxExempt4
		            IF ('1' $ this.Value AND lTaxExempt1) OR ('2' $ this.Value AND lTaxExempt2);
		                  OR ('3' $ this.Value AND lTaxExempt3) OR ('4' $ this.Value AND lTaxExempt4)
		               thisform.oMessage.Warning('Well ' + ALLTRIM(this.Parent.txtcwellID.Value) + ' is marked as exempt from this type of tax, so it cannot be entered.')
		               this.set('value','BBL')
		               thisform.setnextcontrol(this)
		            ENDIF
		         ENDIF
		      ENDIF 
		   ENDIF
		ENDIF
		
		DODEFAULT()
		
		
		
	ENDPROC

	PROCEDURE cmdAllocate.Click
		LOCAL lcList
		PRIV llOK
		
		llOK = .F.
		lcList = 'cownerid,csortfield'
		
		SET SAFETY OFF
		SELECT cownerid, csortfield FROM investor INTO CURSOR temp ;
		  WHERE cownerid IN (SELECT cOwnerid FROM wellinv WHERE cWellID = thisform.txtcwellid.value) ;
		  ORDER BY cownerid
		
		USE DBF('temp') AGAIN IN 0 ALIAS tempown
		SELECT tempown
		INDEX ON cownerid TAG cownerid
		INDEX ON csortfield TAG csortfield
		
		DO FORM ..\custom\picklist WITH 'Tempown', lcList, thisform.txtcownerid.value, 2, .t.
		
		IF llOK
		   thisform.txtcOwnerID.setvalue(tempown.cownerid)
		   thisform.txtcOwnerID.Refresh()
		   thisform.setnextcontrol(thisform.txtcownerid)
		ENDIF   
		
		IF USED('temp')
		   USE IN temp
		ENDIF
		
		IF USED('tempown')
		   USE IN tempown
		ENDIF      
	ENDPROC

	PROCEDURE cmdAllocate.When
		RETURN MDOWN()
	ENDPROC

	PROCEDURE cmdatamanager.afternav
		LPARAMETERS cworkarea
		
		IF ALLTRIM(cworkarea) == 'Wells'
		
		   THISFORM.txtcwellname.VALUE = cwellname
		   THISFORM.txtcwellname.REFRESH()
		   THISFORM.lblGroup.CAPTION = cGroup
		   THISFORM.runcombo1.FIELDVALID()
		   SELE wellrev
		ENDIF
		
	ENDPROC

	PROCEDURE cmdatamanager.afternew
		LPARAMETERS cworkarea
		LOCAL lcidinch, lcidinco
		
		IF m.cWorkArea = 'Wellrev'
		   lcidinco = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Income')
		   SET DELETED OFF
		   SELECT income
		   SET ORDER TO cidinco
		   DO WHILE SEEK(lcidinco)
		      lcidinco = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Income')
		   ENDDO
		   lcBatch = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Batch')
		   SET DELETED ON
		   SELECT wellrev
		   REPL cidinco WITH lcidinco, ;
		        cBatch  WITH lcBatch
		   THISFORM.setnextcontrol(THISFORM.txtcWellID)
		ENDIF
		
		DODEFAULT(cworkarea)
		
	ENDPROC

	PROCEDURE cmdatamanager.afterupdate
		LPARAMETERS cWorkareaList, lCurrentRecordOnly
		
		thisform.requery()
		thisform.refresh()
		thisform.lEditDetail = .F.
		
		thisform.lEditDetail = .F.
		
	ENDPROC

	PROCEDURE cmdatamanager.beforedelete
		LPARAMETERS cworkarea
		LOCAL lcBatch, lnIncCnt
		
		lnIncCnt = 0
		* Can't delete a closed period's record
		IF THISFORM.checkclose()
		   THISFORM.oMessage.Warning('The revenue has been closed. You cannot delete this record.')
		   RETURN .F.
		ENDIF
		
		IF m.goapp.oQB.lqbactive AND THISFORM.lQBPost AND THISFORM.lQBRevPost
		   * Clear any prior errors
		   m.goapp.oQB.oQBSM.ClearErrorRecovery()
		   
		   * get a message set request object (version 1.1 xml)
		   loRequest = m.goApp.oQB.oQBRequest
		
		   * set the on error attribute for the request
		   loRequest.ATTRIBUTES.OnError = 1
		   loRequest.ClearRequests()
		ENDIF
		
		IF m.cworkarea = 'Wells'
		   m.cworkarea = 'Wellrev'
		   THISFORM.lDelDetail = .F.
		ENDIF
		
		DO CASE
		   CASE m.cworkarea = 'Wellrev' AND NOT THISFORM.lDelDetail
		
		      SELECT wellrev
		      SCAN
		         SCATTER MEMVAR
		
		         IF lcstran
		            m.cidincs = THISFORM.oregistry.incrementcounter('%Shared.Counters.Income')
		            lnIncCnt = lnIncCnt + 1
		            SELECT incsusp1
		            SET DELE OFF
		            SET ORDER TO cidincs
		            DO WHILE SEEK(m.cidincs)
		               m.cidincs = THISFORM.oregistry.incrementcounter('%Shared.Counters.Income')
		            ENDDO
		            SET DELE ON
		
		            INSERT INTO incsusp FROM MEMVAR
		         ELSE
		            IF m.goapp.oQB.lqbactive AND THISFORM.lQBPost AND THISFORM.lQBRevPost
		               SELE inctxnid
		               LOCATE FOR cidinco = m.cidinco
		               IF FOUND()
		                  m.ctxnid = ctxnid
		                  * add a request to delete the receipt
		                  llReturn = m.goApp.oQB.DeleteTxnID(m.cTxnID, 15)
		               ENDIF
		            ENDIF
		            SELE wellrev
		            DELE NEXT 1
		         ENDIF
		      ENDSCAN
		      IF lnIncCnt > 0
		         THISFORM.oMessage.DISPLAY('Returned ' + ALLTRIM(STR(lnIncCnt)) + ' entries to the allocation file.')
		      ENDIF
		      *      THISFORM.cmdatamanager.updateall()
		      THISFORM.lchanged = .F.
		      *      thisform.next()
		      RETURN .F.
		
		   CASE m.cworkarea = 'Wellrev' AND THISFORM.lDelDetail
		      SELECT wellrev
		      SCATTER MEMVAR
		      IF NOT THISFORM.leditdetail
		         IF lcstran
		            m.cidincs = THISFORM.oregistry.incrementcounter('%Shared.Counters.Income')
		            SELECT incsusp1
		            SET DELE OFF
		            SET ORDER TO cidincs
		            DO WHILE SEEK(m.cidincs)
		               m.cidincs = THISFORM.oregistry.incrementcounter('%Shared.Counters.Income')
		            ENDDO
		            SET DELE ON
		            INSERT INTO incsusp FROM MEMVAR
		            WAIT WINDOW NOWAIT 'Returned the entry to the allocation file.'
		         ELSE
		            IF THISFORM.oMessage.CONFIRM('Should this entry be moved to the held revenue file?')
		               m.cidincs = THISFORM.oregistry.incrementcounter('%Shared.Counters.Income')
		               SELECT incsusp1
		               SET DELE OFF
		               SET ORDER TO cidincs
		               DO WHILE SEEK(m.cidincs)
		                  m.cidincs = THISFORM.oregistry.incrementcounter('%Shared.Counters.Income')
		               ENDDO
		               SET DELE ON
		               INSERT INTO incsusp FROM MEMVAR
		            ELSE
		               * It's not being moved to the allocation file so mark it to delete from QB
		               thisform.cDelFromQB = thisform.cDelFromQB + wellrev.cidinco
		            ENDIF
		         ENDIF
		      ELSE
		         * The record is being edited so mark it to be deleted from QB
		         thisform.cDelFromQB = thisform.cDelFromQB + wellrev.cidinco
		      ENDIF
		ENDCASE
		
		
		
		
		
	ENDPROC

	PROCEDURE cmdatamanager.beforeupdate
		LPARAMETERS cworkarealist
		LOCAL lcBatch, lcCash, lcRevClear, lcGroup, llReturn, lnJournal
		LOCAL m.lsev1o, m.lsev1g, m.lsev1p
		LOCAL m.lsev2o, m.lsev2g, m.lsev2p
		LOCAL m.lsev3o, m.lsev3g, m.lsev3p
		LOCAL m.lsev4o, m.lsev4g, m.lsev4p
		
		STORE .f. TO m.lsev1o, m.lsev1g, m.lsev1p
		STORE .f. TO m.lsev2o, m.lsev2g, m.lsev2p
		STORE .f. TO m.lsev3o, m.lsev3g, m.lsev3p
		STORE .f. TO m.lsev4o, m.lsev4g, m.lsev4p
		
		*
		*  Builds the glmaster journal entries for the income for the well
		*
		
		THISFORM.setnextcontrol(THISFORM.txtcwellid)
		
		lnRunNo    = INT(VAL(THISFORM.RunCombo1.LISTITEM[THISFORM.RunCombo1.LISTITEMID,3]))
		lcYear     = THISFORM.RunCombo1.LISTITEM[THISFORM.RunCombo1.LISTITEMID,2]
		lcGroup     = THISFORM.RunCombo1.LISTITEM[THISFORM.RunCombo1.LISTITEMID,4]
		lcWellID   = thisform.txtcwellID.Value 
		
		IF EMPTY(lcGroup)
		   lcGroup = '00'
		ENDIF
		
		IF m.goApp.oQB.QBFCVersion > ' 4.0'
		   lnJournal = 15
		ELSE
		   lnJournal = 14
		ENDIF
		
		IF EMPTY(lcWellID)
		   MESSAGEBOX('You must have a valid Well specifiied. Please correct and try again.',16,'Missing Well ID')
		   RETURN .f.
		ENDIF 
		
		*
		*  Builds the QuickBooks journal entries for the income for the well
		*
		
		SELECT wells
		SET ORDER TO cwellid
		IF SEEK(lcWellID)
		   lcGroup = cGroup
		   lcWellListID = cListID
		ELSE
		   RETURN .F.
		ENDIF
		
		*
		*  Call distproc to create the (invtmp) and (wellwork) cursors
		*
		* Can't save to a period that's already closed
		IF THISFORM.checkclose()
		   WAIT WIND NOWAIT 'This run and group are closed. No updates allowed.'
		   THISFORM.cmdatamanager.revertall()
		   THISFORM.lchanged = .F.
		   RETURN .F.
		ENDIF
		
		*  Get the default cash account
		SELECT options
		lcCash  = cQBDisbAcct
		
		*  Get the default revenue clearing account
		SELECT glopt
		lcRevClear = cQBRevClear
		lcExpClear = cQBExpClear
		
		* Setup the fields for qbpost so we can unpost this allocation if part fails
		m.cidsysctl = "I" + RIGHT(THISFORM.oregistry.incrementcounter('%Shared.Counters.Batch'),7)
		
		IF m.goApp.oQB.lqbactive
		   * Clear any prior errors
		   m.goApp.oQB.oQBSM.ClearErrorRecovery()
		   * get a message set request object (version 1.1 xml)
		   loRequest = m.goApp.oQB.oQBRequest
		
		   * set the on error attribute for the request
		   loRequest.ATTRIBUTES.OnError = 1
		   loRequest.ClearRequests()
		
		   lcBatch = ''
		
		   CREATE CURSOR tempinc ;
		      (cType     C(5), ;
		      cRevKey   C(10), ;
		      nTotalInc N(12,2))
		
		   * Delete any records from QB that were deleted from the detail
		   IF LEN(ALLTRIM(THISFORM.cDelFromQB)) >= 8
		      * The cidinco keys are appended one after the other in property cDelFromQB
		      lnRecs = LEN(ALLTRIM(THISFORM.cDelFromQB))/8
		      lnStart = 1
		      FOR lnx = 1 TO lnRecs
		         m.cidinco = SUBSTR(THISFORM.cDelFromQB,lnStart,8)
		         lnStart = lnStart + 8
		         thisform.deleteQB(m.cidinco)
		      ENDFOR
		      thisform.cDelFromQB = ''
		   ENDIF
		
		
		   * Post the entries entered through this form.
		   * When lCSTran = .T. the entry was added by the Acct Mgr
		
		   SELECT wellrev
		   SCAN FOR NOT lCSTran
		      SCATTER MEMVAR
		
		      SELECT wells
		      SET ORDER to cwellid
		      IF SEEK(m.cwellid)
		         SCATTER MEMVAR FIELDS like lSev*
		      ENDIF
		      
		      * Clear previous requests
		      loRequest.ClearRequests()
		
		      thisform.deleteQB(m.cidinco)
		
		      * Clear previous requests
		      loRequest.ClearRequests()
		
		      * If we're not supposed to post this entry to QB, loop out
		      IF wellrev.lnopostqb
		         LOOP
		      ENDIF
		
		      *  Setup the receipt add request
		      loRcptAdd = loRequest.AppendJournalEntryAddRq()
		      loRcptAdd.RefNumber.SetValue(' ')
		      IF NOT EMPTY(wellrev.drevdate)
		         loRcptAdd.TxnDate.SetValue(wellrev.drevdate)
		      ELSE
		         loRcptAdd.TxnDate.SetValue(DATE())
		      ENDIF
		      *      loRcptAdd.MEMO.SetValue('** DO NOT CHANGE OR DELETE THIS ENTRY IN QUICKBOOKS **')
		
		      m.cType = m.cSource
		      lcType  = ''
		      *  Net down the revenue for direct paid and "Dummy" owners
		      IF INLIST(m.cType,'BBL','OTAX1','OTAX2','OTAX3','OTAX4')
		         lcType = 'O'
		      ENDIF
		      IF INLIST(m.cType,'MCF','GTAX1','GTAX2','GTAX3','GTAX4')
		         lcType = 'G'
		      ENDIF
		      IF lcType = 'O' OR lcType = 'G'
		         jGross  = swNetRevenue(m.cwellid, m.nTotalInc, lcType,.F.,.T.,,,,,,m.cDeck)
		         jUnits  = swNetRevenue(m.cwellid, m.nUnits, lcType,.F.,.T.,,,,,,m.cDeck)
		      ELSE
		         jGross  = m.nTotalInc
		         jUnits  = m.nUnits
		      ENDIF
		      IF m.cType = 'TRANS'
		         lcType = 'T'
		         jGross  = swNetRevenue(m.cwellid, m.nTotalInc, lcType,.F.,.T.,,,,,,m.cDeck)
		         jUnits  = swNetRevenue(m.cwellid, m.nUnits, lcType,.F.,.T.,,,,,,m.cDeck)
		      ENDIF
		      IF m.cType = 'OTH'
		         lcType = 'P'
		         jGross  = swNetRevenue(m.cwellid, m.nTotalInc, lcType,.F.,.T.,,,,,,m.cDeck)
		         jUnits  = swNetRevenue(m.cwellid, m.nUnits, lcType,.F.,.T.,,,,,,m.cDeck)
		      ENDIF
		      IF m.cType = 'MISC1'
		         lcType = '1'
		         jGross  = swNetRevenue(m.cwellid, m.nTotalInc, lcType,.F.,.T.,,,,,,m.cDeck)
		         jUnits  = swNetRevenue(m.cwellid, m.nUnits, lcType,.F.,.T.,,,,,,m.cDeck)
		      ENDIF
		      IF m.cType = 'MISC2'
		         lcType = '2'
		         jGross  = swNetRevenue(m.cwellid, m.nTotalInc, lcType,.F.,.T.,,,,,,m.cDeck)
		         jUnits  = swNetRevenue(m.cwellid, m.nUnits, lcType,.F.,.T.,,,,,,m.cDeck)
		      ENDIF
		      DO CASE
		         CASE INLIST(m.cType,'OTAX1','OTAX2','OTAX3','OTAX4')
		            SELECT wellinv
		            SCAN FOR cwellid = m.cwellid
		               SCATTER MEMVAR
		               SELECT investor
		               SET ORDER TO cOwnerID
		               IF SEEK(m.cOwnerID) AND lExempt AND NOT INLIST(m.cDirect,'O','B')
		                  IF m.cType = 'OTAX1'
		                     jGross = jGross - (jGross * (m.nrevtax1/100))
		                  ENDIF
		                  IF m.cType = 'OTAX2'
		                     jGross = jGross - (jGross * (m.nrevtax4/100))
		                  ENDIF
		                  IF m.cType = 'OTAX3'
		                     jGross = jGross - (jGross * (m.nrevtax7/100))
		                  ENDIF
		                  IF m.cType = 'OTAX4'
		                     jGross = jGross - (jGross * (m.nrevtax10/100))
		                  ENDIF
		               ENDIF
		            ENDSCAN
		         CASE INLIST(m.cType,'GTAX1','GTAX2','GTAX3','GTAX4')
		            SELECT wellinv
		            SCAN FOR cwellid = m.cwellid
		               SCATTER MEMVAR
		               SELECT investor
		               SET ORDER TO cOwnerID
		               IF SEEK(m.cOwnerID) AND lExempt AND NOT INLIST(m.cDirect,'G','B')
		                  IF m.cType = 'GTAX1'
		                     jGross = jGross - (jGross * (m.nrevtax2/100))
		                  ENDIF
		                  IF m.cType = 'GTAX2'
		                     jGross = jGross - (jGross * (m.nrevtax5/100))
		                  ENDIF
		                  IF m.cType = 'GTAX3'
		                     jGross = jGross - (jGross * (m.nrevtax8/100))
		                  ENDIF
		                  IF m.cType = 'GTAX4'
		                     jGross = jGross - (jGross * (m.nrevtax11/100))
		                  ENDIF
		               ENDIF
		            ENDSCAN
		      ENDCASE
		
		      m.nTotalInc = jGross
		      m.nUnits    = jUnits
		
		      *  Add the deposit to the check register
		      IF m.nTotalInc > 0
		         IF m.goApp.oQB.QBFCVersion > ' 4.0'
		            loEntry = loRcptAdd.ORJournalLineList.APPEND.JournalDebitLine
		         ELSE
		            loEntry = loRcptAdd.JournalDebitLineList.APPEND
		         ENDIF
		      ELSE
		         IF m.goApp.oQB.QBFCVersion > ' 4.0'
		            loEntry = loRcptAdd.ORJournalLineList.APPEND.JournalCreditLine
		         ELSE
		            loEntry = loRcptAdd.JournalCreditLineList.APPEND
		         ENDIF
		      ENDIF
		
		      loEntry.AccountRef.ListID.SetValue(lcCash)
		
		      IF INLIST(m.cType,'BBL','MCF','OTH')
		         loEntry.MEMO.SetValue(m.cType+' '+ALLT(STR(m.nUnits,9,2))+' @ '+ALLT(STR(m.nprice,9,2))+ ' Prod: '+m.cPeriod+'/'+m.cYear)
		      ENDIF
		      IF 'OTAX' $ m.cType
		         loEntry.MEMO.SetValue('Oil Taxes - Prod: '+m.cPeriod+'/'+m.cYear)
		         IF m.cType = 'OTAX1' AND NOT m.lSev1O
		            loEntry.AccountRef.ListID.SetValue(lcRevClear)
		         ENDIF    
		         IF m.cType = 'OTAX2' AND NOT m.lSev2O
		            loEntry.AccountRef.ListID.SetValue(lcRevClear)
		         ENDIF    
		         IF m.cType = 'OTAX3' AND NOT m.lSev3O
		            loEntry.AccountRef.ListID.SetValue(lcRevClear)
		         ENDIF    
		         IF m.cType = 'OTAX4' AND NOT m.lSev4O
		            loEntry.AccountRef.ListID.SetValue(lcRevClear)
		         ENDIF    
		      ENDIF
		      IF 'GTAX' $ m.cType
		         loEntry.MEMO.SetValue('Gas Taxes - Prod: '+m.cPeriod+'/'+m.cYear)
		         IF m.cType = 'GTAX1' AND NOT m.lSev1G
		            loEntry.AccountRef.ListID.SetValue(lcRevClear)
		         ENDIF    
		         IF m.cType = 'GTAX2' AND NOT m.lSev2G
		            loEntry.AccountRef.ListID.SetValue(lcRevClear)
		         ENDIF    
		         IF m.cType = 'GTAX3' AND NOT m.lSev3G
		            loEntry.AccountRef.ListID.SetValue(lcRevClear)
		         ENDIF    
		         IF m.cType = 'GTAX4' AND NOT m.lSev4G
		            loEntry.AccountRef.ListID.SetValue(lcRevClear)
		         ENDIF    
		      ENDIF
		      IF 'PTAX' $ m.cType
		         loEntry.MEMO.SetValue('Other Taxes - Prod: '+m.cPeriod+'/'+m.cYear)
		         IF m.cType = 'PTAX1' AND NOT m.lSev1P
		            loEntry.AccountRef.ListID.SetValue(lcRevClear)
		         ENDIF    
		         IF m.cType = 'PTAX2' AND NOT m.lSev2P
		            loEntry.AccountRef.ListID.SetValue(lcRevClear)
		         ENDIF    
		         IF m.cType = 'PTAX3' AND NOT m.lSev3P
		            loEntry.AccountRef.ListID.SetValue(lcRevClear)
		         ENDIF    
		         IF m.cType = 'PTAX4' AND NOT m.lSev4P
		            loEntry.AccountRef.ListID.SetValue(lcRevClear)
		         ENDIF    
		      ENDIF
		
		      loEntry.ClassRef.ListID.SetValue(lcWellListID)
		
		      SELECT revsrc
		      LOCATE FOR cRevKey = m.cRevKey
		      IF FOUND()
		         loEntry.EntityRef.ListID.SetValue(revsrc.cListID)
		      ELSE
		         WAIT WIND 'Purchaser: ' + m.cRevKey + ' not found in purchaser file.'
		         RETURN .F.
		      ENDIF
		
		      loEntry.Amount.SetValue(ABS(ROUND(m.nTotalInc,2)))
		
		      IF m.nTotalInc < 0
		         IF m.goApp.oQB.QBFCVersion > ' 4.0'
		            loEntry = loRcptAdd.ORJournalLineList.APPEND.JournalDebitLine
		         ELSE
		            loEntry = loRcptAdd.JournalDebitLineList.APPEND
		         ENDIF
		      ELSE
		         IF m.goApp.oQB.QBFCVersion > ' 4.0'
		            loEntry = loRcptAdd.ORJournalLineList.APPEND.JournalCreditLine
		         ELSE
		            loEntry = loRcptAdd.JournalCreditLineList.APPEND
		         ENDIF
		      ENDIF
		
		      IF INLIST(m.cType,'BBL','MCF','OTH')
		         loEntry.MEMO.SetValue(m.cType+' '+ALLT(STR(m.nUnits,9,2))+' @ '+ALLT(STR(m.nprice,9,2))+ ' Prod: '+m.cPeriod+'/'+m.cYear)
		      ENDIF
		      IF 'OTAX' $ m.cType
		         loEntry.MEMO.SetValue('Oil Taxes - Prod: '+m.cPeriod+'/'+m.cYear)
		      ENDIF
		      IF 'GTAX' $ m.cType
		         loEntry.MEMO.SetValue('Gas Taxes - Prod: '+m.cPeriod+'/'+m.cYear)
		      ENDIF
		      IF 'PTAX' $ m.cType
		         loEntry.MEMO.SetValue('Other Taxes - Prod: '+m.cPeriod+'/'+m.cYear)
		      ENDIF
		      loEntry.ClassRef.ListID.SetValue(lcWellListID)
		      loEntry.EntityRef.ListID.SetValue(revsrc.cListID)
		      loEntry.AccountRef.ListID.SetValue(lcRevClear)
		      loEntry.Amount.SetValue(ABS(ROUND(m.nTotalInc,2)))
		      loResponse = m.goApp.oQB.oQBSM.DoRequests(loRequest)
		      loAddResp  = loResponse.responselist.getat(0)
		
		      IF loAddResp.StatusCode = 0
		         WAIT WIND NOWAIT 'Receipt successfully added in QuickBooks'
		
		         loNewCheck = loAddResp.DETAIL
		         m.ctxnid  = loNewCheck.TxnID.getvalue()
		
		         SELE inctxnid
		         LOCATE FOR cidinco = m.cidinco
		         IF FOUND()
		            REPL ctxnid WITH m.ctxnid
		         ELSE
		            INSERT INTO inctxnid FROM MEMVAR
		         ENDIF
		         * Save the transaction info so that it can be unposted from QB
		         * if any of the other transactions fail.
		         SWSELECT('qbpost')
		         LOCATE FOR cidsysctl = m.cidsysctl AND ntype = lnJournal
		         IF NOT FOUND()
		            m.ntype = lnJournal
		            m.mtxnids = m.ctxnid
		            INSERT INTO qbpost FROM MEMVAR
		         ELSE
		            IF NOT EMPTY(ALLT(mtxnids))
		               REPL mtxnids WITH ALLT(mtxnids)+CHR(13)+m.ctxnid
		            ELSE
		               REPL mtxnids WITH m.ctxnid
		            ENDIF
		         ENDIF
		         m.goApp.oQB.oQBSM.ClearErrorRecovery()
		      ELSE
		         IF 'object' $ LOWER(loAddResp.statusmessage)
		            lcListID = SUBSTR(loAddResp.statusmessage,AT('"',loAddResp.statusmessage)+1,AT('"',loAddResp.statusmessage,2)-(AT('"',loAddResp.statusmessage)+1))
		            llResult = m.goApp.oQB.QBListID(lcListID, THISFORM.DATASESSIONID)
		            IF llResult
		               SELECT QBListID
		               IF QBListID.cType = 'Account'
		                  lcMessage = 'The ' + ALLTRIM(QBListID.cdescription) + ' specified in the ' + ;
		                     'QB Posting Preferences was not found in QuickBooks. Please select a new account ' + ;
		                     'and try to save the revenue again.'
		               ELSE
		                  lcMessage = 'The ' + ALLTRIM(QBListID.cdescription) + ' was not found in QuickBooks. ' + ;
		                     'Please synchronize the ' + ALLTRIM(QBListID.cType) + ' file and try to save the revenue again.'
		               ENDIF
		               THISFORM.omessage.severe(lcMessage)
		            ELSE
		               THISFORM.omessage.severe(loAddResp.statusmessage)
		            ENDIF
		         ELSE
		            THISFORM.omessage.severe(loAddResp.statusmessage)
		         ENDIF
		         * Unpost what got posted so far
		         m.goApp.oQB.csysctlkey = m.cidsysctl
		         m.goApp.oQB.QBUnpostRev()
		         m.goApp.oQB.oQBSM.ClearErrorRecovery()
		         RETURN .F.
		      ENDIF
		   ENDSCAN
		ENDIF
		
		TABLEUPDATE(.T.,.F.,'Wellrev')
		TABLEUPDATE(.T.,.F.,'Inctxnid')
		SWSELECT('qbpost')
		REPLACE lPosted WITH .T. FOR cidsysctl = m.cidsysctl
		
		
		
		
	ENDPROC

	PROCEDURE cmdDelDetail.Click
		
		SELECT wellrev
		thisform.delete('wellrev',.t.)
		GO top
		thisform.calctot()
		thisform.grdgridcustom1.Refresh()
		
	ENDPROC

	PROCEDURE cmdEditDetail.Click
		thisform.editdetail()
		
	ENDPROC

	PROCEDURE cmdEditDetail.When
		RETURN MDOWN()
	ENDPROC

	PROCEDURE cmdLookWell.Click
		LOCAL lcList
		PRIV llOK
		
		llOK = .F.
		
		IF THISFORM.flushcontrolbuffer()
		    IF THISFORM.cmdatamanager.ischanged()
		        IF THISFORM.omessage.CONFIRM('Save changes to records for this well?')
		            THISFORM.SAVE()
		        ENDIF
		    ENDIF
		
		    lcList = 'cwellid,cwellname,cgroup,cwellstat'
		
		    DO FORM ..\CUSTOM\picklist WITH 'Wells', lcList, THISFORM.txtcwellid.VALUE, 4
		
		    IF llOK
		        THISFORM.cmdatamanager.revertall()
		        THISFORM.txtcwellid.VALUE = wells.cwellid
		        THISFORM.txtcWellName.VALUE = wells.cwellname
		        THISFORM.txtcWellName.REFRESH()
		        THISFORM.checkruns(wells.cwellid)
		    ENDIF
		    thisform.getrevenue()
		    
		    THISFORM.setnextcontrol(THISFORM.txtcwellid)
		ENDIF
		
	ENDPROC

	PROCEDURE cmdRevsrc.Click
		LOCAL lcList
		PRIV llOK
		
		llOK = .F.
		
		lcList = 'crevname\Purchase Name,crevkey\Purchaser ID'
		lcKey  = 'thisform.txtcpurchaser.value'
		
		DO FORM ..\custom\picklist WITH 'revsrc', lcList, &lcKey, 2,.f.,.t.
		
		IF llOK
		   thisform.txtcPurchaser.value = revsrc.crevname
		   thisform.txtcPurchaser.refresh()
		ENDIF   
		
		thisform.setnextcontrol(thisform.txtcpurchaser)
	ENDPROC

	PROCEDURE cmdRevsrc.When
		RETURN MDOWN()
	ENDPROC

	PROCEDURE Grdgridcustom1.AfterRowColChange
		LPARAMETERS ncol
		
		thisform.calctot()
	ENDPROC

	PROCEDURE Grdgridcustom1.Column1.txtcSource.DblClick
		thisform.editdetail()
	ENDPROC

	PROCEDURE Grdgridcustom1.Column1.txtcSource.Valid
		IF NOT wellrev.lcstran
		   DODEFAULT()
		ENDIF   
	ENDPROC

	PROCEDURE Grdgridcustom1.Column2.txtcRevName.DblClick
		thisform.editdetail()
	ENDPROC

	PROCEDURE Grdgridcustom1.Column2.txtcRevName.Valid
		IF NOT wellrev.lcstran
		   DODEFAULT()
		ENDIF   
	ENDPROC

	PROCEDURE Grdgridcustom1.Column2.txtcRevName.When
		RETURN .F.
	ENDPROC

	PROCEDURE Grdgridcustom1.Column3.txtdRevDate.DblClick
		thisform.editdetail()
	ENDPROC

	PROCEDURE Grdgridcustom1.Column3.txtdRevDate.Valid
		IF NOT wellrev.lcstran
		   DODEFAULT()
		ENDIF   
	ENDPROC

	PROCEDURE Grdgridcustom1.Column4.txtnUnits.DblClick
		thisform.editdetail()
	ENDPROC

	PROCEDURE Grdgridcustom1.Column4.txtnUnits.Valid
		LOCAL lnTotal
		
		IF NOT wellrev.lcstran
		   DODEFAULT()
		ENDIF   
		
		lnTotal = this.value * wellrev.nPrice
		IF wellrev.nTotalInc <> lnTotal
		   thisform.cmdatamanager.replace('wellrev','Ntotalinc',lnTotal)
		   thisform.calctot()
		   thisform.grdgridcustom1.column6.txtntotalinc.refresh()
		ENDIF   
		
		  
	ENDPROC

	PROCEDURE Grdgridcustom1.Column5.txtnPrice.DblClick
		thisform.editdetail()
	ENDPROC

	PROCEDURE Grdgridcustom1.Column5.txtnPrice.Valid
		LOCAL lnTotal
		
		IF NOT wellrev.lcstran
		   DODEFAULT()
		ENDIF   
		
		lnTotal = wellrev.nUnits * wellrev.nprice
		IF wellrev.nTotalInc <> lnTotal
		   thisform.cmdatamanager.replace('wellrev','Ntotalinc',lnTotal)
		   thisform.calctot()
		   thisform.grdgridcustom1.column6.txtntotalinc.refresh()
		ENDIF   
		
		  
	ENDPROC

	PROCEDURE Grdgridcustom1.Column6.txtnTotalInc.DblClick
		thisform.editdetail()
	ENDPROC

	PROCEDURE Grdgridcustom1.Column6.txtnTotalInc.Valid
		IF NOT wellrev.lcstran
		   DODEFAULT()
		ENDIF   
	ENDPROC

	PROCEDURE Grdgridcustom1.Column9.chkqbnopost.Valid
		IF DODEFAULT()
		   IF THIS.VALUE
		      MESSAGEBOX("This revenue is marked not to post to QuickBooks."  + CHR(10) + CHR(10) + ;
		         "Nothing will be posted to QuickBooks when this     "  + CHR(10) + ;
		         "revenue is saved."                                  + CHR(10) + CHR(10) + ;
		         "However, when the revenue run which processes this" + CHR(10) + ;
		         "revenue is closed and then posted to QuickBooks,"   + CHR(10) + ;
		         "the clearing entries will still be made for this"   + CHR(10) + ;
		         "revenue. This will cause more revenue to be cleared"+ CHR(10) + ;
		         "than what was originally posted for the run."      + CHR(10) + ;
		         "You will need to make an adjustment in QuickBooks"  + CHR(10) + ;
		         "to the Revenue Clearing account to correct this." + CHR(10) + CHR(10) + ;
		         "Please see the 'Don't post to QuickBooks' topic"    + CHR(10) + ;
		         "in the Help file for more information.",48,"QuickBooks No Post Notice")
		   ENDIF
		ENDIF
	ENDPROC

	PROCEDURE Grdgridcustom1.Init
		FOR EACH oCol IN THIS.Columns
		 oCol.DynamicForeColor = "IIF(wellrev.lCSTran,rgb(0,0,255),rgb(0,0,0))"
		ENDFOR
		DODEFAULT()
		
	ENDPROC

	PROCEDURE Runcombo1.fieldvalid
		IF THISFORM.cmdatamanager.ischanged()
		   IF MESSAGEBOX('The changes made to the revenue for this well will not be saved if you continue. Do you want to continue?',36,'Discard Changes?') = 6
		      thisform.cmdatamanager.revertall()
		   ELSE
		      this.ListItemId = thisform.nrunitemid
		      RETURN .t.      
		   ENDIF 
		ENDIF
		
		RETURN thisform.getrevenue()
	ENDPROC

	PROCEDURE Runcombo1.When
		thisform.nrunitemid = this.listitemid
		DODEFAULT()
	ENDPROC

	PROCEDURE Swyear.Valid
		IF DODEFAULT()
		   lcDeck = thisform.oWellInv.DOIDeckNameLookup(this.Value, thisform.swperiod.value, thisform.txtcwellid.Value) 
		   thisform.cboDeck.Requery(lcDeck)
		ENDIF 
	ENDPROC

	PROCEDURE txtCendrange.LostFocus
		thisform.calcdayson()
		DODEFAULT()
	ENDPROC

	PROCEDURE txtcOwnerID.GotFocus
		ON KEY LABEL F2 _screen.activeform.cmdAllocate.Click()
		keyboard "{HOME}"
	ENDPROC

	PROCEDURE txtcOwnerID.LostFocus
		* 
		*  If the last key press was:
		*   5  = up arrow
		*   15 = back tab
		*   19 = left arrow
		*  Don't execute the adddetail method.
		*  Only run it if the user is going forward
		*
		IF (LASTKEY() = 13 OR LASTKEY() = 9) AND not mDown()  &&  Tab or enter, but not a mouseclick
		   thisform.adddetail()
		else
		   RETURN .T.
		ENDIF   
		
		
	ENDPROC

	PROCEDURE txtcOwnerID.Valid
		ON KEY LABEL F2
		
		IF EMPTY(this.value)
		   RETURN
		ENDIF
		   
		SELECT wellinv
		LOCATE FOR cWellID+cOwnerID = thisform.txtcwellid.value+this.value
		IF not FOUND()
		   thisform.omessage.warning('The owner entered is not an owner in the given well. Please choose another.')
		   RETURN 0
		ENDIF      
		
	ENDPROC

	PROCEDURE txtcPurchaser.GotFocus
		ON KEY LABEL F2 _screen.activeform.cmdrevsrc.click()
		DODEFAULT()
	ENDPROC

	PROCEDURE txtcPurchaser.LostFocus
		ON KEY LABEL F2  *
		DODEFAULT()
	ENDPROC

	PROCEDURE txtcWellID.GotFocus
		ON KEY LABEL F2 _screen.activeform.cmdLookWell.Click()
		DODEFAULT()
	ENDPROC

	PROCEDURE txtcWellID.InteractiveChange
		IF DODEFAULT()
		   SELECT wells
		   LOCATE FOR cwellid == this.Value
		   IF FOUND()
		      thisform.txtcWellName.set('value',wells.cWellName)
		   ELSE
		      thisform.txtcWellName.set('value','')
		   ENDIF 
		ENDIF    
	ENDPROC

	PROCEDURE txtcWellID.LostFocus
		LOCAL lcWellID
		
		ON KEY LABEL F2 *
		IF THIS.VALUE <> THISFORM.cwellsave
		   IF LASTKEY() <> -1 AND NOT MDOWN()
		      lcWellID = THIS.VALUE
		      this.Value = thisform.cWellSave
		      THISFORM.SAVE()
		      this.Value = lcWellID
		      SELECT wells
		      LOCATE FOR cwellid = lcWellID
		      THISFORM.runcombo1.VALID()
		   ENDIF
		ENDIF
		
	ENDPROC

	PROCEDURE txtcWellID.Valid
		*
		thisform.cbodeck.Requery('',thisform.swyear.value,thisform.swPeriod.Value)
	ENDPROC

	PROCEDURE txtcWellID.When
		thisform.cWellSave = this.Value
		
		DODEFAULT()
	ENDPROC

	PROCEDURE txtcWellName.When
		RETURN .F.
	ENDPROC

	PROCEDURE txtnDaysOn.Valid
		IF DODEFAULT()
		   m.nDaysOn = this.Value
		   IF VARTYPE(m.nDaysOn) # 'N'
		      m.nDaysOn = INT(VAL(m.nDaysOn))
		   ENDIF
		   IF NOT BETWEEN(m.nDaysOn,0,365)
		      MESSAGEBOX('The Days On value must be between 0 and 365. Please correct.',64,'Invalid Days On')
		      RETURN 0
		   ENDIF
		ENDIF 
	ENDPROC

	PROCEDURE txtnPrice.LostFocus
		thisform.calctotalinc()
		DODEFAULT()
	ENDPROC

	PROCEDURE txtnTotalInc.Valid
		
		lcvalue = THISFORM.txtnprice.VALUE
		IF NOT 'TAX' $ THISFORM.cboSource.VALUE AND NOT INLIST(ALLTRIM(thisform.cbosource.Value),'COMP','GATH')
		   IF EMPTY(THISFORM.txtnprice.VALUE)
		      IF THISFORM.txtnUnits.VALUE > 0 AND THISFORM.txtnTotalInc.VALUE > 0
		         IF THISFORM.omessage.CONFIRM('Should the price be calculated?')
		            THISFORM.txtnprice.VALUE = ROUND(THISFORM.txtnTotalInc.VALUE/THISFORM.txtnUnits.VALUE,6)
		            THISFORM.txtnprice.REFRESH()
		         ENDIF
		         THISFORM.setnextcontrol(THISFORM.swPeriod)
		      ENDIF
		   ENDIF
		   IF EMPTY(THISFORM.txtnUnits.VALUE)
		      IF THISFORM.txtnprice.VALUE > 0 AND THISFORM.txtnTotalInc.VALUE > 0
		         IF THISFORM.omessage.CONFIRM('Should the units be calculated?')
		            THISFORM.txtnUnits.VALUE = ROUND(THISFORM.txtnTotalInc.VALUE/THISFORM.txtnprice.VALUE,2)
		            THISFORM.txtnUnits.REFRESH()
		         ENDIF
		         THISFORM.setnextcontrol(THISFORM.swPeriod)
		      ENDIF
		   ENDIF
		ELSE
		   IF 'TAX' $ THISFORM.cboSource.VALUE AND this.Value < 0
		      IF NOT thisform.omessage.confirm("Taxes don't have to be entered as a negative. You are entering this as a tax credit. Is that what you want to do?")
		         this.Value = ABS(this.Value)
		      ENDIF 
		   ENDIF    
		   IF INLIST(ALLTRIM(thisform.cbosource.Value),'COMP','GATH') AND this.Value < 0
		      IF NOT thisform.omessage.confirm("Compression/Gathering don't have to be entered as a negative. You are entering this as a credit. Is that what you want to do?")
		         this.Value = ABS(this.Value)
		      ENDIF 
		   ENDIF    
		ENDIF
		
		DODEFAULT()
	ENDPROC

	PROCEDURE txtTotalInc.When
		RETURN .F.
	ENDPROC

ENDDEFINE
