*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="apbillqb.scx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="2" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Cursor4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor10" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor9" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor12" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor13" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor14" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor15" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor16" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor18" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor19" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor20" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor21" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor22" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor26" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor27" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor28" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor29" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor30" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor31" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Relation2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor7" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor8" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Relation1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor6" UniqueID="" Timestamp="" />

	AutoOpenTables = .F.
	DataSource = .NULL.
	Height = 667
	InitialSelectedAlias = "appurchh"
	Left = 70
	Name = "Dataenvironment"
	Top = 181
	Width = 929

	ADD OBJECT 'Cursor1' AS cursor WITH ;
		Alias = "appurchh", ;
		BufferModeOverride = 3, ;
		CursorSource = "appurchh", ;
		Database = ..\database\appdata.dbc, ;
		Filter = "litempurch = .F.", ;
		Height = 90, ;
		Left = 15, ;
		Name = "Cursor1", ;
		Order = "invdate", ;
		Top = 135, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor10' AS cursor WITH ;
		Alias = "glmaster", ;
		BufferModeOverride = 5, ;
		CursorSource = "glmaster", ;
		Database = ..\database\appdata.dbc, ;
		Height = 90, ;
		Left = 356, ;
		Name = "Cursor10", ;
		Order = "glbatch", ;
		Top = 5, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor12' AS cursor WITH ;
		Alias = "wells", ;
		BufferModeOverride = 3, ;
		CursorSource = "wells", ;
		Database = ..\database\appdata.dbc, ;
		Height = 90, ;
		Left = 453, ;
		Name = "Cursor12", ;
		Order = "cwellid", ;
		Top = 6, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor13' AS cursor WITH ;
		Alias = "glopt", ;
		CursorSource = "glopt", ;
		Database = ..\database\appdata.dbc, ;
		Height = 90, ;
		Left = 257, ;
		Name = "Cursor13", ;
		Top = 6, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor14' AS cursor WITH ;
		Alias = "expcat", ;
		CursorSource = "expcat", ;
		Database = ..\database\appdata.dbc, ;
		Height = 90, ;
		Left = 457, ;
		Name = "Cursor14", ;
		Order = "ccatcode", ;
		Top = 122, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor15' AS cursor WITH ;
		Alias = "expense", ;
		BufferModeOverride = 5, ;
		CursorSource = "expense", ;
		Database = ..\database\appdata.dbc, ;
		Height = 90, ;
		Left = 358, ;
		Name = "Cursor15", ;
		Top = 237, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor16' AS cursor WITH ;
		Alias = "expsusp", ;
		BufferModeOverride = 5, ;
		CursorSource = "expsusp", ;
		Database = ..\database\appdata.dbc, ;
		Height = 90, ;
		Left = 16, ;
		Name = "Cursor16", ;
		Top = 317, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor18' AS cursor WITH ;
		Alias = "appurech", ;
		CursorSource = "appurech", ;
		Database = ..\database\appdata.dbc, ;
		Height = 90, ;
		Left = 655, ;
		Name = "Cursor18", ;
		Top = 7, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor19' AS cursor WITH ;
		Alias = "appurecd", ;
		CursorSource = "appurecd", ;
		Database = ..\database\appdata.dbc, ;
		Height = 90, ;
		Left = 657, ;
		Name = "Cursor19", ;
		Top = 125, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor2' AS cursor WITH ;
		Alias = "appurchd", ;
		BufferModeOverride = 5, ;
		CursorSource = "appurchd", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 143, ;
		Name = "Cursor2", ;
		Top = 135, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor20' AS cursor WITH ;
		Alias = "appurchh1", ;
		CursorSource = "appurchh", ;
		Database = ..\database\appdata.dbc, ;
		Height = 90, ;
		Left = 147, ;
		Name = "Cursor20", ;
		Top = 338, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor21' AS cursor WITH ;
		Alias = "appurchd1", ;
		BufferModeOverride = 5, ;
		CursorSource = "appurchd", ;
		Database = ..\database\appdata.dbc, ;
		Height = 90, ;
		Left = 659, ;
		Name = "Cursor21", ;
		Top = 240, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor22' AS cursor WITH ;
		Alias = "options", ;
		CursorSource = "options", ;
		Database = ..\database\appdata.dbc, ;
		Height = 90, ;
		Left = 418, ;
		Name = "Cursor22", ;
		Top = 364, ;
		Width = 97
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor26' AS cursor WITH ;
		Alias = "expense1", ;
		BufferModeOverride = 5, ;
		CursorSource = "expense", ;
		Database = ..\database\appdata.dbc, ;
		Height = 90, ;
		Left = 294, ;
		Name = "Cursor26", ;
		Top = 358, ;
		Width = 97
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor27' AS cursor WITH ;
		Alias = "wellinv", ;
		CursorSource = "wellinv", ;
		Database = ..\database\appdata.dbc, ;
		Height = 90, ;
		Left = 663, ;
		Name = "Cursor27", ;
		Top = 366, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor28' AS cursor WITH ;
		Alias = "trangroup", ;
		CursorSource = "trangroup", ;
		Database = ..\database\appdata.dbc, ;
		Height = 90, ;
		Left = 393, ;
		Name = "Cursor28", ;
		Top = 482, ;
		Width = 101
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor29' AS cursor WITH ;
		Alias = "sysctl", ;
		CursorSource = "sysctl", ;
		Database = ..\database\appdata.dbc, ;
		Height = 90, ;
		Left = 570, ;
		Name = "Cursor29", ;
		Top = 500, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor3' AS cursor WITH ;
		Alias = "items", ;
		CursorSource = "items", ;
		Database = ..\database\appdata.dbc, ;
		Height = 90, ;
		Left = 254, ;
		Name = "Cursor3", ;
		Order = "citemid", ;
		Top = 237, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor30' AS cursor WITH ;
		Alias = "afehdr", ;
		CursorSource = "afehdr", ;
		Database = ..\database\appdata.dbc, ;
		Height = 90, ;
		Left = 52, ;
		Name = "Cursor30", ;
		Top = 475, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor31' AS cursor WITH ;
		Alias = "afedet", ;
		CursorSource = "afedet", ;
		Database = ..\database\appdata.dbc, ;
		Height = 90, ;
		Left = 177, ;
		Name = "Cursor31", ;
		Top = 477, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor4' AS cursor WITH ;
		Alias = "terms", ;
		BufferModeOverride = 3, ;
		CursorSource = "terms", ;
		Database = ..\database\appdata.dbc, ;
		Height = 90, ;
		Left = 161, ;
		Name = "Cursor4", ;
		Top = 7, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor5' AS cursor WITH ;
		Alias = "vendor", ;
		BufferModeOverride = 1, ;
		CursorSource = "vendor", ;
		Database = ..\database\appdata.dbc, ;
		Height = 90, ;
		Left = 554, ;
		Name = "Cursor5", ;
		Order = "cvendorid", ;
		Top = 6, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor6' AS cursor WITH ;
		Alias = "groups", ;
		CursorSource = "groups", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 767, ;
		Name = "Cursor6", ;
		Top = 27, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor7' AS cursor WITH ;
		Alias = "investor", ;
		CursorSource = "investor", ;
		Database = ..\database\appdata.dbc, ;
		Height = 90, ;
		Left = 560, ;
		Name = "Cursor7", ;
		Top = 219, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor8' AS cursor WITH ;
		Alias = "afeopt", ;
		CursorSource = "afeopt", ;
		Database = ..\database\appdata.dbc, ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor8", ;
		Top = 20, ;
		Width = 91
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor9' AS cursor WITH ;
		Alias = "apopt", ;
		CursorSource = "apopt", ;
		Database = ..\database\appdata.dbc, ;
		Height = 90, ;
		Left = 287, ;
		Name = "Cursor9", ;
		Top = 130, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Relation1' AS relation WITH ;
		ChildAlias = "appurchd", ;
		ChildOrder = "cbatch", ;
		Name = "Relation1", ;
		ParentAlias = "appurchh", ;
		RelationalExpr = "cbatch"
		*< END OBJECT: BaseClass="relation" />

	ADD OBJECT 'Relation2' AS relation WITH ;
		ChildAlias = "afedet", ;
		ChildOrder = "cidafeh", ;
		Name = "Relation2", ;
		ParentAlias = "afehdr", ;
		RelationalExpr = "cidafeh"
		*< END OBJECT: BaseClass="relation" />

ENDDEFINE

DEFINE CLASS formapbill AS frmdatamanagerformcustom OF "..\custom\cforms.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="txtcDispCode" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtwastecode" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Shpshapecustom1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcdisperm" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblCvendorid" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtCvendname" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtCinvnum" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblCinvnum" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtCreference" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblCreference" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblCidterm" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblDinvdate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblDduedate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblDdiscdate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtNinvtot" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblNinvtot" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboTerms" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdVendor" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cmdcommandbuttoncustom1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdRecur" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cmdcommandbuttoncustom2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcVendorID" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtCitemdesc" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdLookUnit" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdDocument" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcCatCode" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcProdPeriod" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtnExtension" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblNextension" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcWellName" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcUnitNo" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcProdYear" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcOwnerID" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdLookCat" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtnSaltBBL" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lstWellBills" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label6" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtAccount" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdLookOwner" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkNOQBPOST" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cmdcommandbuttoncustom3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboClass" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtdInvDate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtDDueDate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtDdiscDate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblPaid" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboAPAcct" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom6" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtafeno" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdAFENo" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom7" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboDeck" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: adddetail1
		*m: adddetail2
		*m: calcext		&& Calculates the detail extension total
		*m: calcext1
		*m: calcext2
		*m: calctot		&& Calculates the Invoice Totals
		*m: checkexp		&& Check to see if expenses entered for wells have been allocated and the production period closed.
		*m: checkhist		&& Checks to see if the production period is closed.
		*m: checkpaid
		*m: dmexpense		&& Disbursement Manager integration for expenses.
		*m: editdetail		&& Moves the detail line from the grid to the update area.
		*m: edititems
		*m: getprice		&& Gets the price for the item based upon the price code passed.
		*m: lookcoa
		*m: setaccount		&& Sets the detail account based on the well and expense code
		*m: setstate		&& Resets the form state for non bound controls so that the save button still works.
		*m: valterms		&& Validate Terms and Set Due Date and Disc Date based on the Terms
		*m: viewdocument
		*m: zerotot
		*p: cclosedrun
		*p: cconfirmset
		*p: ldeptrequired
		*p: lf5
		*p: lnoclearext
		*p: lpaid
		*p: lqbpost		&& Post to QuickBooks
		*p: lsepclose		&& Separate close for revenue and JIBs
		*p: lvalidwell		&& A valid well id was entered in the well detail field.
		*p: lwellrequired
		*p: nextension
		*p: nprice
		*p: nquantity
		*p: odist		&& Distproc object
		*p: owellinv
	*</DefinedPropArrayMethod>

	Caption = "Enter Bills"
	cdisplayname = 
	clistexpression = appurchh.cbatch
	cnavworkarea = appurchh
	cworkarea = appurchh
	DoCreate = .T.
	Height = 453
	HelpContextID = 18
	lconfirmsave = .T.
	lexpliciteditmode = .F.
	lnoclearext = .F.
	lpaid = .F.
	lqbpost = .T.		&& Post to QuickBooks
	Name = "formapbill"
	owellinv = .NULL.
	Visible = .T.
	Width = 634
	WindowState = 0
	_memberdata = <VFPData>
		<memberdata name="owellinv" display="oWellInv"/>
		</VFPData>
	cmdatamanager.Name = "cmdatamanager"
	cmdatamanager.TabIndex = 1
	cmdatamanager.ZOrderSet = 0
	cmlookupmanager.Name = "cmlookupmanager"
	Mwresize1.lblHighLight.Name = "lblHighLight"
	Mwresize1.lblShading.Name = "lblShading"
	Mwresize1.Name = "Mwresize1"
	Mwresize1.TabIndex = 2
	Mwresize1.ZOrderSet = 6

	ADD OBJECT 'cboAPAcct' AS qbaccount WITH ;
		ControlSource = "appurchh.cqbapacct", ;
		Height = 20, ;
		lbankonly = .F., ;
		Left = 86, ;
		Name = "cboAPAcct", ;
		TabIndex = 3, ;
		Top = 5, ;
		Width = 346, ;
		ZOrderSet = 59
		*< END OBJECT: ClassLib="..\custom\swcontrol.vcx" BaseClass="combobox" />

	ADD OBJECT 'cboClass' AS cbocomboboxcustom WITH ;
		ColumnCount = 2, ;
		Height = 20, ;
		Left = 152, ;
		Name = "cboClass", ;
		TabIndex = 28, ;
		Top = 143, ;
		Width = 48, ;
		ZOrderSet = 54
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="combobox" />

	ADD OBJECT 'cboDeck' AS cbocomboboxcustom WITH ;
		BoundColumn = 2, ;
		ControlSource = "", ;
		Height = 20, ;
		Left = 201, ;
		Name = "cboDeck", ;
		Style = 0, ;
		TabIndex = 36, ;
		Top = 192, ;
		ZOrderSet = 64
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="combobox" />

	ADD OBJECT 'cboTerms' AS cbocomboboxcustom WITH ;
		BoundColumn = 2, ;
		ControlSource = "appurchh.cidterm", ;
		Height = 20, ;
		Left = 456, ;
		Margin = 2, ;
		Name = "cboTerms", ;
		TabIndex = 10, ;
		Top = 57, ;
		Width = 144, ;
		ZOrderSet = 19
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="combobox" />

	ADD OBJECT 'chkNOQBPOST' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Don't Post To QuickBooks", ;
		ControlSource = "appurchh.lNoQBPost", ;
		FontBold = .T., ;
		Left = 454, ;
		Name = "chkNOQBPOST", ;
		TabIndex = 56, ;
		Top = 8, ;
		Value = .F., ;
		ZOrderSet = 49
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'cmdAFENo' AS cmdcommandbuttoncustom WITH ;
		Caption = "AFE No", ;
		FontBold = .T., ;
		Height = 20, ;
		Left = 467, ;
		Name = "cmdAFENo", ;
		TabIndex = 39, ;
		TabStop = .F., ;
		Top = 191, ;
		ZOrderSet = 62
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'Cmdcommandbuttoncustom1' AS cmdcommandbuttoncustom WITH ;
		Caption = "Comments", ;
		FontBold = .T., ;
		Height = 20, ;
		Left = 535, ;
		Name = "Cmdcommandbuttoncustom1", ;
		TabIndex = 17, ;
		TabStop = .F., ;
		Top = 83, ;
		ZOrderSet = 21
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'Cmdcommandbuttoncustom2' AS cmdcommandbuttoncustom WITH ;
		Caption = "\<Edit Detail", ;
		Height = 24, ;
		Left = 132, ;
		Name = "Cmdcommandbuttoncustom2", ;
		Picture = ..\, ;
		TabIndex = 50, ;
		Top = 422, ;
		Width = 84, ;
		ZOrderSet = 23
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'Cmdcommandbuttoncustom3' AS cmdcommandbuttoncustom WITH ;
		Caption = "\<Delete Detail", ;
		Height = 24, ;
		Left = 240, ;
		Name = "Cmdcommandbuttoncustom3", ;
		TabIndex = 51, ;
		Top = 422, ;
		Width = 84, ;
		ZOrderSet = 53
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdDocument' AS cmdcommandbuttoncustom WITH ;
		Caption = "\<Document", ;
		Height = 25, ;
		Left = 483, ;
		Name = "cmdDocument", ;
		TabIndex = 18, ;
		TabStop = .F., ;
		Top = 27, ;
		Visible = .F., ;
		Width = 64, ;
		ZOrderSet = 27
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdLookCat' AS cmdcommandbuttoncustom WITH ;
		Caption = "Code", ;
		FontBold = .T., ;
		FontName = "Arial", ;
		FontSize = 8, ;
		Height = 20, ;
		Left = 97, ;
		Name = "cmdLookCat", ;
		TabIndex = 24, ;
		TabStop = .F., ;
		Top = 120, ;
		Width = 53, ;
		ZOrderSet = 37
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdLookOwner' AS cmdcommandbuttoncustom WITH ;
		Caption = "Allocate To", ;
		FontBold = .T., ;
		Height = 20, ;
		Left = 311, ;
		Name = "cmdLookOwner", ;
		TabIndex = 37, ;
		TabStop = .F., ;
		Top = 191, ;
		ZOrderSet = 48
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdLookUnit' AS cmdcommandbuttoncustom WITH ;
		Caption = " Well ", ;
		FontBold = .T., ;
		FontName = "Arial", ;
		FontSize = 8, ;
		Height = 20, ;
		Left = 12, ;
		Name = "cmdLookUnit", ;
		TabIndex = 23, ;
		TabStop = .F., ;
		Top = 120, ;
		Width = 77, ;
		ZOrderSet = 26
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdRecur' AS cmdcommandbuttoncustom WITH ;
		Caption = "\<Recurring Bills", ;
		Height = 24, ;
		Left = 24, ;
		Name = "cmdRecur", ;
		TabIndex = 52, ;
		Top = 422, ;
		Width = 84, ;
		ZOrderSet = 22
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdVendor' AS swlookupbutton WITH ;
		Left = 334, ;
		Name = "cmdVendor", ;
		TabIndex = 6, ;
		Top = 31, ;
		ZOrderSet = 20
		*< END OBJECT: ClassLib="..\custom\swcontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'Label1' AS label WITH ;
		Caption = "Period", ;
		FontBold = .T., ;
		Height = 17, ;
		Left = 305, ;
		Name = "Label1", ;
		TabIndex = 45, ;
		Top = 234, ;
		Width = 40, ;
		ZOrderSet = 50
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Label2' AS label WITH ;
		AutoSize = .T., ;
		Caption = "Description", ;
		FontBold = .T., ;
		Height = 17, ;
		Left = 6, ;
		Name = "Label2", ;
		TabIndex = 43, ;
		Top = 234, ;
		Width = 67, ;
		ZOrderSet = 41
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Label3' AS label WITH ;
		Caption = "Well ID", ;
		FontBold = .T., ;
		Height = 17, ;
		Left = 362, ;
		Name = "Label3", ;
		TabIndex = 44, ;
		Top = 234, ;
		Width = 40, ;
		ZOrderSet = 42
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Label4' AS label WITH ;
		AutoSize = .T., ;
		Caption = "Exp Code", ;
		FontBold = .T., ;
		Height = 17, ;
		Left = 430, ;
		Name = "Label4", ;
		TabIndex = 46, ;
		Top = 234, ;
		Width = 55, ;
		ZOrderSet = 43
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Label5' AS label WITH ;
		AutoSize = .T., ;
		Caption = "Cls", ;
		FontBold = .T., ;
		Height = 17, ;
		Left = 497, ;
		Name = "Label5", ;
		TabIndex = 47, ;
		Top = 234, ;
		Width = 20, ;
		ZOrderSet = 45
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Label6' AS label WITH ;
		AutoSize = .T., ;
		Caption = "Amount", ;
		FontBold = .T., ;
		Height = 17, ;
		Left = 552, ;
		Name = "Label6", ;
		TabIndex = 48, ;
		Top = 234, ;
		Width = 46, ;
		ZOrderSet = 44
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'lblCidterm' AS lblfieldlabelcustom WITH ;
		AutoSize = .T., ;
		Caption = "Terms", ;
		FontBold = .T., ;
		Height = 16, ;
		Left = 413, ;
		Name = "lblCidterm", ;
		TabIndex = 13, ;
		Top = 59, ;
		Width = 39, ;
		ZOrderSet = 13
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblCinvnum' AS lblfieldlabelcustom WITH ;
		AutoSize = .T., ;
		Caption = "Invoice No", ;
		FontBold = .T., ;
		Height = 16, ;
		Left = 21, ;
		Name = "lblCinvnum", ;
		TabIndex = 11, ;
		Top = 59, ;
		Width = 58, ;
		ZOrderSet = 10
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblCreference' AS lblfieldlabelcustom WITH ;
		AutoSize = .T., ;
		Caption = "Reference", ;
		FontBold = .T., ;
		Height = 16, ;
		Left = 183, ;
		Name = "lblCreference", ;
		TabIndex = 12, ;
		Top = 59, ;
		Width = 59, ;
		ZOrderSet = 12
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblCvendorid' AS lblfieldlabelcustom WITH ;
		AutoSize = .T., ;
		Caption = "Vendor", ;
		FontBold = .T., ;
		Height = 16, ;
		Left = 36, ;
		Name = "lblCvendorid", ;
		TabIndex = 7, ;
		Top = 33, ;
		Width = 43, ;
		ZOrderSet = 7
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblDdiscdate' AS lblfieldlabelcustom WITH ;
		AutoSize = .T., ;
		Caption = "Discount Date", ;
		FontBold = .T., ;
		Height = 16, ;
		Left = 354, ;
		Name = "lblDdiscdate", ;
		TabIndex = 21, ;
		Top = 86, ;
		Width = 77, ;
		ZOrderSet = 16
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblDduedate' AS lblfieldlabelcustom WITH ;
		AutoSize = .T., ;
		Caption = "Due Date", ;
		FontBold = .T., ;
		Height = 16, ;
		Left = 188, ;
		Name = "lblDduedate", ;
		TabIndex = 20, ;
		Top = 86, ;
		Width = 50, ;
		ZOrderSet = 15
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblDinvdate' AS lblfieldlabelcustom WITH ;
		AutoSize = .T., ;
		Caption = "Invoice Date", ;
		FontBold = .T., ;
		Height = 16, ;
		Left = 11, ;
		Name = "lblDinvdate", ;
		TabIndex = 19, ;
		Top = 86, ;
		Width = 68, ;
		ZOrderSet = 14
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom1' AS lbllabelcustom WITH ;
		Caption = "/", ;
		FontSize = 11, ;
		Left = 109, ;
		Name = "Lbllabelcustom1", ;
		TabIndex = 42, ;
		Top = 192, ;
		ZOrderSet = 35
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom2' AS lbllabelcustom WITH ;
		Caption = "Prod Period", ;
		FontBold = .T., ;
		Left = 12, ;
		Name = "Lbllabelcustom2", ;
		TabIndex = 41, ;
		Top = 193, ;
		ZOrderSet = 38
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom3' AS lbllabelcustom WITH ;
		Caption = "Account", ;
		FontBold = .T., ;
		Left = 240, ;
		Name = "Lbllabelcustom3", ;
		TabIndex = 55, ;
		Top = 169, ;
		ZOrderSet = 46
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom4' AS lbllabelcustom WITH ;
		Caption = "Description", ;
		FontBold = .T., ;
		Left = 212, ;
		Name = "Lbllabelcustom4", ;
		TabIndex = 58, ;
		Top = 125, ;
		ZOrderSet = 51
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom5' AS lbllabelcustom WITH ;
		Caption = "Class", ;
		FontBold = .T., ;
		Left = 159, ;
		Name = "Lbllabelcustom5", ;
		TabIndex = 57, ;
		Top = 125, ;
		ZOrderSet = 52
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom6' AS lbllabelcustom WITH ;
		Caption = "A/P Acct", ;
		FontBold = .T., ;
		Left = 32, ;
		Name = "Lbllabelcustom6", ;
		TabIndex = 60, ;
		Top = 7, ;
		ZOrderSet = 60
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom7' AS lbllabelcustom WITH ;
		Caption = "Deck:", ;
		Left = 165, ;
		Name = "Lbllabelcustom7", ;
		TabIndex = 22, ;
		Top = 195, ;
		ZOrderSet = 63
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblNextension' AS lblfieldlabelcustom WITH ;
		AutoSize = .T., ;
		Caption = "Amount", ;
		FontBold = .T., ;
		Height = 16, ;
		Left = 574, ;
		Name = "lblNextension", ;
		TabIndex = 25, ;
		Top = 125, ;
		Width = 46, ;
		ZOrderSet = 31
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblNinvtot' AS lblfieldlabelcustom WITH ;
		Caption = "Invoice Total", ;
		Height = 16, ;
		Left = 425, ;
		Name = "lblNinvtot", ;
		TabIndex = 54, ;
		Top = 423, ;
		Width = 62, ;
		ZOrderSet = 18
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblPaid' AS label WITH ;
		Caption = "BILL PAID", ;
		FontBold = .T., ;
		FontSize = 12, ;
		ForeColor = 255,0,0, ;
		Height = 17, ;
		Left = 335, ;
		Name = "lblPaid", ;
		TabIndex = 59, ;
		Top = 423, ;
		Visible = .F., ;
		Width = 88, ;
		ZOrderSet = 58
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'lstWellBills' AS lstlistboxcustom WITH ;
		ColumnCount = 9, ;
		ColumnWidths = "290,15,30,70,70,15,180", ;
		ControlSource = "", ;
		cworkarea = , ;
		FontName = "Courier New", ;
		Height = 168, ;
		Left = 5, ;
		Name = "lstWellBills", ;
		RowSource = "appurchd.cItemDesc, cprodperiod,cprodyear,cUnitNo, cCatCode, cExpClass, nExtension", ;
		RowSourceType = 6, ;
		TabIndex = 49, ;
		Top = 251, ;
		Width = 619, ;
		ZOrderSet = 40
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="listbox" />

	ADD OBJECT 'Shpshapecustom1' AS shpshapecustom WITH ;
		BackColor = 255,255,128, ;
		Height = 120, ;
		Left = 4, ;
		Name = "Shpshapecustom1", ;
		Top = 107, ;
		Width = 625, ;
		ZOrderSet = 4
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="shape" />

	ADD OBJECT 'txtAccount' AS qbaccount WITH ;
		Enabled = .T., ;
		Height = 20, ;
		Left = 288, ;
		Name = "txtAccount", ;
		TabIndex = 32, ;
		Top = 167, ;
		Width = 336, ;
		ZOrderSet = 47
		*< END OBJECT: ClassLib="..\custom\swcontrol.vcx" BaseClass="combobox" />

	ADD OBJECT 'txtafeno' AS txtquickfill WITH ;
		clistexpression = afehdr.cafeno, ;
		clistworkarea = afehdr, ;
		Height = 20, ;
		Left = 545, ;
		MaxLength = 10, ;
		Name = "txtafeno", ;
		TabIndex = 40, ;
		Top = 191, ;
		Width = 76, ;
		ZOrderSet = 61
		*< END OBJECT: ClassLib="..\custom\cgadget.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcCatCode' AS txtquickfill WITH ;
		clistexpression = ccatcode, ;
		clistworkarea = expcat, ;
		Enabled = .T., ;
		FontName = "Courier New", ;
		FontSize = 8, ;
		Height = 20, ;
		Left = 103, ;
		MaxLength = 4, ;
		Name = "txtcCatCode", ;
		SelectOnEntry = .T., ;
		TabIndex = 27, ;
		Top = 143, ;
		Width = 40, ;
		ZOrderSet = 28
		*< END OBJECT: ClassLib="..\custom\cgadget.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcDispCode' AS txttextboxcustom WITH ;
		Left = 523, ;
		Name = "txtcDispCode", ;
		TabIndex = 63, ;
		Top = 190, ;
		Visible = .F., ;
		ZOrderSet = 1
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcdisperm' AS txttextboxcustom WITH ;
		Left = 521, ;
		Name = "txtcdisperm", ;
		TabIndex = 62, ;
		Top = 191, ;
		Visible = .F., ;
		ZOrderSet = 5
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtCinvnum' AS txttextboxcustom WITH ;
		ControlSource = "appurchh.cinvnum", ;
		Height = 20, ;
		Left = 87, ;
		Margin = 1, ;
		MaxLength = 20, ;
		Name = "txtCinvnum", ;
		TabIndex = 8, ;
		Top = 57, ;
		Width = 79, ;
		ZOrderSet = 9
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtCitemdesc' AS txttextboxcustom WITH ;
		ControlSource = " ", ;
		FontName = "Courier New", ;
		FontSize = 8, ;
		Height = 20, ;
		Left = 205, ;
		MaxLength = 40, ;
		Name = "txtCitemdesc", ;
		SelectOnEntry = .T., ;
		TabIndex = 29, ;
		Top = 143, ;
		Width = 312, ;
		ZOrderSet = 25
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcOwnerID' AS txtquickfill WITH ;
		clistexpression = investor.cownerid, ;
		clistworkarea = investor, ;
		Height = 20, ;
		Left = 389, ;
		MaxLength = 10, ;
		Name = "txtcOwnerID", ;
		TabIndex = 38, ;
		Top = 191, ;
		Width = 69, ;
		ZOrderSet = 36
		*< END OBJECT: ClassLib="..\custom\cgadget.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcProdPeriod' AS txttextboxcustom WITH ;
		Height = 20, ;
		Left = 80, ;
		MaxLength = 2, ;
		Name = "txtcProdPeriod", ;
		SelectOnEntry = .T., ;
		TabIndex = 33, ;
		Top = 191, ;
		Width = 24, ;
		ZOrderSet = 29
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcProdYear' AS txttextboxcustom WITH ;
		Height = 20, ;
		Left = 116, ;
		MaxLength = 4, ;
		Name = "txtcProdYear", ;
		SelectOnEntry = .T., ;
		TabIndex = 34, ;
		Top = 191, ;
		Width = 39, ;
		ZOrderSet = 34
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtCreference' AS txttextboxcustom WITH ;
		ControlSource = "appurchh.creference", ;
		Height = 20, ;
		Left = 243, ;
		Margin = 1, ;
		MaxLength = 30, ;
		Name = "txtCreference", ;
		TabIndex = 9, ;
		Top = 57, ;
		Width = 165, ;
		ZOrderSet = 11
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcUnitNo' AS txtquickfill WITH ;
		clistexpression = wells.cwellid, ;
		clistworkarea = wells, ;
		FontName = "Courier New", ;
		FontSize = 8, ;
		Format = "K!", ;
		Height = 20, ;
		lallowexceptions = .T., ;
		Left = 12, ;
		MaxLength = 10, ;
		Name = "txtcUnitNo", ;
		SelectOnEntry = .T., ;
		TabIndex = 26, ;
		Top = 143, ;
		Width = 77, ;
		ZOrderSet = 33
		*< END OBJECT: ClassLib="..\custom\cgadget.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtCvendname' AS txtquickfill WITH ;
		BackColor = 255,255,255, ;
		clistexpression = cVendName, ;
		clistworkarea = Vendor, ;
		ControlSource = "", ;
		Height = 20, ;
		Left = 87, ;
		Margin = 1, ;
		MaxLength = 40, ;
		Name = "txtCvendname", ;
		ReadOnly = .F., ;
		TabIndex = 5, ;
		Top = 31, ;
		Width = 240, ;
		ZOrderSet = 8
		*< END OBJECT: ClassLib="..\custom\cgadget.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcVendorID' AS txtquickfill WITH ;
		clistexpression = vendor.cvendorid, ;
		clistworkarea = vendor, ;
		ControlSource = "appurchh.cvendorid", ;
		Format = "K!", ;
		Height = 22, ;
		InputMask = "XXXXXXXXXX", ;
		Left = 384, ;
		Name = "txtcVendorID", ;
		TabIndex = 4, ;
		TabStop = .F., ;
		Top = 28, ;
		Visible = .F., ;
		Width = 36, ;
		ZOrderSet = 24
		*< END OBJECT: ClassLib="..\custom\cgadget.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcWellName' AS txttextboxcustom WITH ;
		BackColor = 212,208,200, ;
		ControlSource = " ", ;
		FontName = "Courier New", ;
		FontSize = 8, ;
		Height = 20, ;
		Left = 12, ;
		MaxLength = 30, ;
		Name = "txtcWellName", ;
		TabIndex = 31, ;
		Top = 167, ;
		Width = 204, ;
		ZOrderSet = 32
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtDdiscDate' AS dpk WITH ;
		ControlSource = "appurchh.ddiscdate", ;
		Height = 20, ;
		Left = 436, ;
		lnocurrentdate = .F., ;
		lrequired = .T., ;
		Name = "txtDdiscDate", ;
		TabIndex = 16, ;
		Top = 83, ;
		Visible = .T., ;
		Width = 67, ;
		ZOrderSet = 57
		*< END OBJECT: ClassLib="..\custom\swdate.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtDDueDate' AS dpk WITH ;
		ControlSource = "appurchh.dduedate", ;
		Height = 20, ;
		Left = 243, ;
		lnocurrentdate = .F., ;
		lrequired = .T., ;
		Name = "txtDDueDate", ;
		TabIndex = 15, ;
		Top = 83, ;
		Visible = .T., ;
		Width = 67, ;
		ZOrderSet = 56
		*< END OBJECT: ClassLib="..\custom\swdate.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtdInvDate' AS dpk WITH ;
		ControlSource = "appurchh.dinvdate", ;
		Height = 20, ;
		Left = 87, ;
		lmorethan90 = .T., ;
		lnocurrentdate = .F., ;
		lrequired = .T., ;
		Name = "txtdInvDate", ;
		TabIndex = 14, ;
		Top = 83, ;
		Visible = .T., ;
		Width = 67, ;
		ZOrderSet = 55
		*< END OBJECT: ClassLib="..\custom\swdate.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtnExtension' AS txttextboxcustom WITH ;
		Alignment = 3, ;
		Height = 20, ;
		InputMask = "99999999.99", ;
		Left = 520, ;
		MaxLength = 0, ;
		Name = "txtnExtension", ;
		SelectOnEntry = .T., ;
		TabIndex = 30, ;
		Top = 143, ;
		Value = 0, ;
		Width = 104, ;
		ZOrderSet = 30
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtNinvtot' AS txttextboxcustom WITH ;
		ControlSource = "appurchh.ninvtot", ;
		Height = 20, ;
		InputMask = "999,999,999.99", ;
		Left = 492, ;
		Margin = 1, ;
		Name = "txtNinvtot", ;
		TabIndex = 53, ;
		Top = 421, ;
		Width = 115, ;
		ZOrderSet = 17
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtnSaltBBL' AS txttextboxcustom WITH ;
		Height = 20, ;
		Left = 564, ;
		Name = "txtnSaltBBL", ;
		SelectOnEntry = .T., ;
		TabIndex = 35, ;
		Top = 192, ;
		Visible = .F., ;
		Width = 36, ;
		ZOrderSet = 39
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtwastecode' AS txttextboxcustom WITH ;
		Left = 522, ;
		Name = "txtwastecode", ;
		TabIndex = 61, ;
		Top = 191, ;
		Visible = .F., ;
		ZOrderSet = 2
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />
	
	PROCEDURE Activate
		IF DODEFAULT()
		   swselect('appurchh')
		   SWSELECT('vendor')
		   SET ORDER TO cvendorid
		   IF SEEK(appurchh.cvendorid)
		      THISFORM.txtcVendName.VALUE = cvendname
		   ELSE
		      THISFORM.txtcVendName.VALUE = ' '
		   ENDIF
		   IF thisform.lPaid
		      thisform.lblpaid.Visible = .t.
		   ENDIF 
		
		ENDIF
		
	ENDPROC

	PROCEDURE adddetail1
		*
		*  Adds the detail line to the APPURCHD table
		*
		LOCAL m.citemdesc, m.cacctno, m.cunitno, m.cdeptno, m.nextension, m.cidpurd, m.ccatcode, lncount, lnrec, m.cbatch
		LOCAL lcrunno, lcsuspense, lctype, lcyear, llReturn, lnSaltBBL, lnSaltWaterEnd, lnamount, lnwellend
		LOCAL loError, llReturn
		*:Global cDisperm, cOwnerid, cProdPeriod, cProdYear, cWasteCode, cacctlistid, cacctno, cbatch
		*:Global ccatcode, cdispcode, cexpclass, cextdesc, cgroup, citemdesc, ctaxcode, cunitno, dexpdate
		*:Global ndiscount, ndiscpct, nextension, ninterest, nitemtax, nsaltbbl, temp[1]
		
		
		* If the bill has been paid, don't allow any detail lines to be added.
		IF THISFORM.lPaid
		   MESSAGEBOX('This bill has payments applied to it in QuickBooks. It cannot be modified.', 16, 'Update Problem')
		   RETURN .F.
		ENDIF
		
		llReturn = .T.
		
		TRY
		   IF THISFORM.chknoQBPOST.VALUE = .F.
		      IF EMPTY(THISFORM.txtaccount.VALUE)
		         THISFORM.omessage.warning('The account cannot be left blank')
		         THISFORM.setnextcontrol(THISFORM.txtaccount)
		         llReturn = .F.
		      ENDIF
		   ENDIF
		CATCH
		   llReturn = .F.
		ENDTRY
		
		IF llReturn = .F.
		   RETURN
		ENDIF
		
		TRY
		   swselect('glopt')
		   lcsuspense = cQBsuspense
		
		   SELE appurchh
		   m.cbatch = cbatch
		
		   WITH THISFORM
		
		      m.citemdesc  = .txtcitemdesc.VALUE
		      m.cacctno    = .txtaccount.VALUE
		      m.cunitno    = .txtcunitno.VALUE
		      m.nextension = .txtnextension.VALUE
		      m.cexpclass  = .cboclass.VALUE
		      m.cDisperm   = .txtcDisperm.VALUE
		      m.cdispcode  = .txtcdispCode.VALUE
		      m.cWasteCode = .txtwastecode.VALUE
		      m.cafeno     = .txtafeno.VALUE
		      m.cDeck      = .cboDeck.value 
		
		      IF EMPTY(m.cunitno)
		         STORE '' TO m.cProdPeriod, m.cProdYear, m.cOwnerid, m.ccatcode, m.cDeck
		      ELSE
		         m.cProdPeriod = .txtcprodperiod.VALUE
		         m.cProdYear   = .txtcprodyear.VALUE
		         m.cOwnerid    = .txtcownerid.VALUE
		         m.ccatcode    = .txtccatcode.VALUE
		         IF NOT EMPTY(m.cOwnerid)  &&  Change all one-man items to class 0
		            m.cexpclass = '0'
		         ENDIF
		      ENDIF
		
		      IF (EMPTY(THISFORM.txtcprodperiod.VALUE) AND NOT EMPTY(THISFORM.txtcprodyear.VALUE)) ;  &&  If either has been left blank, blank them both out
		         OR (NOT EMPTY(THISFORM.txtcprodperiod.VALUE) AND EMPTY(THISFORM.txtcprodyear.VALUE))
		         m.cProdPeriod = ''
		         m.cProdYear   = ''
		      ENDIF
		
		      IF m.goApp.lAFEOpt AND NOT EMPTY(THISFORM.txtcownerid.VALUE)
		         SWSELECT('expcat')
		         *  If it's an AFE expense getting allocated all to one owner, warn them that the AFE reports by owner will be wrong
		         LOCATE FOR ccatcode == THISFORM.txtccatcode.VALUE AND lAFEType
		         IF FOUND()
		            THISFORM.omessage.warning('This expense code is marked as an AFE type code. Entering an AFE expense allocated all to one owner will cause AFE reports by owner to show incorrectly.')
		         ENDIF
		      ENDIF
		
		      *
		      *  Get the group for the well
		      *
		      SELE wells
		      LOCATE FOR cwellid = m.cunitno
		      IF FOUND()
		         m.cgroup = cgroup
		      ELSE
		         m.cgroup = '00'
		      ENDIF
		
		      IF THISFORM.chknoQBPOST.VALUE = .F.
		         SELE accounts
		         LOCATE FOR m.cacctno = accounts.clistid
		         IF FOUND()
		            m.cacctlistid = accounts.clistid
		         ELSE
		            .omessage.warning('Please enter a valid account number.')
		            .setnextcontrol(.txtaccount)
		            llReturn = .F.
		            EXIT
		         ENDIF
		      ELSE
		         m.cacctlistid = ''
		      ENDIF
		
		      *
		      *  Check to see if the production or JIB period is closed. If it is, don't allow the
		      *  expense to be entered.
		      *
		      IF NOT EMPTY(m.cProdYear) AND NOT EMPTY(m.cProdPeriod)
		         IF THISFORM.checkexp(m.cbatch)
		            lctype  = SUBSTR(THISFORM.cclosedrun, 1, 1)
		            lcyear  = SUBSTR(THISFORM.cclosedrun, 2, 4)
		            lcrunno = SUBSTR(THISFORM.cclosedrun, 6, 3)
		            THISFORM.omessage.warning('Expenses from this bill have been processed during ' + IIF(lctype = 'J', 'JIB', 'Revenue') + ' Run: ' + ;
		               lcyear + '/' + lcrunno + ' This bill cannot be changed.')
		            THIS.setnextcontrol(.txtcprodperiod)
		            llReturn = .F.
		            EXIT
		         ENDIF
		      ENDIF
		
		      IF NOT EMPTY(m.cOwnerid)
		         SWSELECT('wellinv')
		         LOCA FOR cwellid = m.cunitno AND cOwnerid = m.cOwnerid
		         IF NOT FOUND('wellinv')
		            THISFORM.omessage.DISPLAY('You cannot allocate a well expense to an owner that has no interests in that well.')
		            THISFORM.lnoclearext = .T.
		            llReturn             = .F.
		            EXIT
		         ENDIF
		      ENDIF
		
		      IF NOT EMPTY(m.cunitno) AND EMPTY(m.ccatcode)
		         THISFORM.omessage.warning('This expense has a well ID associated with it but no expense category. The ' + ;
		            'expense will not go through distribution/JIB processing.')
		      ENDIF
		
		      IF NOT EMPTY(m.cunitno) AND NOT EMPTY(m.ccatcode) AND NOT EMPTY(m.cProdYear) AND NOT EMPTY(m.cProdPeriod) AND m.cunitno <> 'ALLOC'
		         *  Make sure the well has owners
		         SELECT cwellid FROM wellinv WHERE cwellid = m.cunitno INTO ARRAY temp
		         IF _TALLY = 0
		            THISFORM.omessage.warning('Unable to allocate to well: ' + m.cunitno + ' This well has no owners. Expenses cannot be allocated to the well.')
		            llReturn = .F.
		            EXIT
		         ENDIF
		      ENDIF
		
		      IF EMPTY(m.cunitno) AND THISFORM.lwellrequired
		         THISFORM.omessage.DISPLAY('A valid well ID is required when using this account no.')
		         THISFORM.setnextcontrol(THISFORM.txtcunitno)
		         llReturn = .F.
		         EXIT
		      ENDIF
		
		      IF TYPE('.txtnSaltBBL.value') <> 'N'
		         IF TYPE('.txtnSaltBBL.value') = 'C'
		            m.nsaltbbl = VAL(.txtnsaltbbl.VALUE)
		         ELSE
		            m.nsaltbbl = 0
		         ENDIF
		      ELSE
		         m.nsaltbbl    = .txtnsaltbbl.VALUE
		      ENDIF
		      IF m.nextension = 0
		         THISFORM.omessage.warning('An amount must be entered in the extension.')
		         .setnextcontrol(.txtnextension)
		         llReturn = .F.
		         EXIT
		      ENDIF
		
		      m.ndiscpct  = 0
		      m.nitemtax  = 0
		      m.ninterest = 0
		      m.ctaxcode  = ' '
		      m.dexpdate  = {}
		      m.ndiscount = 0
		      m.cextdesc  = 0
		
		      IF m.cunitno = 'ALLOC'
		         *  This expense is to be allocated among more than 1 well.
		         SELECT wellsel
		         lncount = RECC()
		         lnrec   = 0
		         IF lncount > 0
		            *  Calculate how much should go to each well.
		            lnamount = ROUND((m.nextension / lncount), 2)
		            *  Calculate the amount left over in case the amount didn't divide evenly among the wells
		            lnwellend = m.nextension - (lnamount * lncount)
		
		            *  Divide up any saltwater BBLs entered - salt bbls are whole numbers, so round to even BBLs on each well
		            IF m.nsaltbbl <> 0
		               lnSaltBBL = ROUND((m.nsaltbbl / lncount), 0)
		
		               *  Add up any extra BBLs to give to the last well
		               lnSaltWaterEnd = m.nsaltbbl - (lnSaltBBL * lncount)
		            ELSE
		               lnSaltBBL      = 0
		               lnSaltWaterEnd = 0
		            ENDIF
		            
		            m.cOwnerid = ''
		            WAIT WIND NOWAIT 'Allocating Expenses Evenly Among The Chosen Wells...'
		            SCAN
		               m.cunitno    = cwellid
		               m.nextension = lnamount
		               m.nsaltbbl   = lnSaltBBL
		               lnrec        = lnrec + 1
		               IF EMPTY(m.cDeck)
		                  m.cDeck      = thisform.oWellInv.DOIDeckNameLookup(m.cProdYear, m.cProdPeriod, m.cUnitNo)
		               ENDIF    
		               IF lnrec = lncount
		                  *  Adjust the last well so the total adds to the amount entered.
		                  m.nextension = m.nextension + lnwellend
		                  m.nsaltbbl   = m.nsaltbbl + lnSaltWaterEnd
		               ENDIF
		               .cmdatamanager.new('Appurchd')
		               .cmdatamanager.REPLACE('APPURCHD', 'Citemdesc', m.citemdesc)
		               .cmdatamanager.REPLACE('APPURCHD', 'Cacctlistid', m.cacctlistid)
		               .cmdatamanager.REPLACE('APPURCHD', 'Cunitno', m.cunitno)
		               .cmdatamanager.REPLACE('APPURCHD', 'Ccatcode', m.ccatcode)
		               .cmdatamanager.REPLACE('APPURCHD', 'Cexpclass', m.cexpclass)
		               .cmdatamanager.REPLACE('APPURCHD', 'Cdeptno', '')
		               .cmdatamanager.REPLACE('APPURCHD', 'Cprodyear', m.cProdYear)
		               .cmdatamanager.REPLACE('APPURCHD', 'Cprodperiod', m.cProdPeriod)
		               .cmdatamanager.REPLACE('APPURCHD', 'Nextension', m.nextension)
		               .cmdatamanager.REPLACE('APPURCHD', 'Nsaltbbl', m.nsaltbbl)
		               .cmdatamanager.REPLACE('APPURCHD', 'Litemdetail', .F.)
		               .cmdatamanager.REPLACE('APPURCHD', 'cOwnerID', m.cOwnerid)
		               .cmdatamanager.REPLACE('APPURCHD', 'Cdisperm', m.cDisperm)
		               .cmdatamanager.REPLACE('APPURCHD', 'Cdispcode', m.cdispcode)
		               .cmdatamanager.REPLACE('APPURCHD', 'Cwastecode', m.cWasteCode)
		               .cmdatamanager.REPLACE('APPURCHD', 'cafeno', m.cafeno)
		               .cmdatamanager.REPLACE('APPURCHD', 'cdeck', m.cdeck)
		            ENDSCAN
		            WAIT CLEAR
		         ELSE
		            THISFORM.omessage.warning('There were no wells selected. You must select at least 1 well when ALLOC is used.')
		            THISFORM.setnextcontrol(.txtcunitno)
		            llReturn = .F.
		            EXIT
		         ENDIF
		      ELSE
		         .cmdatamanager.new('Appurchd')
		         .cmdatamanager.REPLACE('APPURCHD', 'Citemdesc', m.citemdesc)
		         .cmdatamanager.REPLACE('APPURCHD', 'Cacctlistid', m.cacctlistid)
		         .cmdatamanager.REPLACE('APPURCHD', 'Cunitno', m.cunitno)
		         .cmdatamanager.REPLACE('APPURCHD', 'Ccatcode', m.ccatcode)
		         .cmdatamanager.REPLACE('APPURCHD', 'Cexpclass', m.cexpclass)
		         .cmdatamanager.REPLACE('APPURCHD', 'Cdeptno', '')
		         .cmdatamanager.REPLACE('APPURCHD', 'Cprodyear', m.cProdYear)
		         .cmdatamanager.REPLACE('APPURCHD', 'Cprodperiod', m.cProdPeriod)
		         .cmdatamanager.REPLACE('APPURCHD', 'Nextension', m.nextension)
		         .cmdatamanager.REPLACE('APPURCHD', 'Nsaltbbl', m.nsaltbbl)
		         .cmdatamanager.REPLACE('APPURCHD', 'Litemdetail', .F.)
		         .cmdatamanager.REPLACE('APPURCHD', 'cOwnerID', m.cOwnerid)
		         .cmdatamanager.REPLACE('APPURCHD', 'Cdisperm', m.cDisperm)
		         .cmdatamanager.REPLACE('APPURCHD', 'Cdispcode', m.cdispcode)
		         .cmdatamanager.REPLACE('APPURCHD', 'Cwastecode', m.cWasteCode)
		         .cmdatamanager.REPLACE('APPURCHD', 'cafeno', m.cafeno)
		         .cmdatamanager.REPLACE('APPURCHD', 'cdeck', m.cdeck)
		      ENDIF
		      IF NOT '*' $ .txtcitemdesc.VALUE
		         .txtcitemdesc.VALUE = ' '
		      ENDIF
		      .txtcownerid.VALUE = ' '
		      .txtafeno.VALUE = ' '
		      .cboclass.VALUE    = '0'
		      .txtnextension.setvalue(0)
		      .txtnsaltbbl.setvalue(0)
		      .lstwellbills.REQUERY()
		      .lstwellbills.LISTITEMID = .lstwellbills.LISTCOUNT
		      .lstwellbills.REFRESH()
		      .txtcunitno.SETFOCUS()
		      IF .txtcunitno.VALUE = 'ALLOC'  &&  If the well ID is ALLOC, blank it out, so when they save, it won't bring up the list of wells, thinking they want to allocate
		         .txtcunitno.SET('value', '')
		      ENDIF
		      .calctot()
		      .lvalidwell    = .F.
		      .lwellrequired = .F.
		      .ldeptrequired = .F.
		      .setstate()
		      .REFRESH()
		      llReturn = .T.
		   ENDWITH
		CATCH TO loError
		   DO errorlog WITH 'Adddetail1', loError.LINENO, 'Enter Bills', loError.ERRORNO, loError.MESSAGE, '', loError
		   MESSAGEBOX('Unable to add detail to the bill at this time. Check the System Log found under Other Reports for more information.', 16, 'Problem Encountered')
		   llReturn = .F.
		ENDTRY
		
		
		RETURN llReturn
		
		
		
	ENDPROC

	PROCEDURE adddetail2
	ENDPROC

	PROCEDURE calcext		&& Calculates the detail extension total
	ENDPROC

	PROCEDURE calcext1
	ENDPROC

	PROCEDURE calcext2
	ENDPROC

	PROCEDURE calctot		&& Calculates the Invoice Totals
		*
		*  Calculates the invoice totals
		*
		LOCAL lnSelect, lnRecno, lnTotal, lcBatch, lnSubTotal, lnBalance, lcFilter
		LOCAL lnCount
		LOCAL llReturn, loError
		
		TRY
		   SWSELECT('appurchh')
		
		   lcBatch = appurchh.cbatch
		
		   lnSelect = SELECT()
		   SWSELECT('appurchd')
		   lnRecno  = RECNO()
		   lcFilter = FILTER()
		   SET FILTER TO
		
		   lnSubTotal = 0
		   SWSELECT('appurchd')
		   SCAN
		      lnSubTotal = lnSubTotal + nExtension
		   ENDSCAN
		
		*SET FILTER TO &lcFilter
		
		   IF lnRecno <= RECC()
		      GOTO lnRecno
		   ENDIF
		
		   lnBalance = lnSubTotal - appurchh.npayments
		
		   IF appurchh.nInvTot <> lnSubTotal
		      THIS.cmdatamanager.REPLACE('appurchh', 'nInvTot', lnSubTotal)
		      THIS.cmdatamanager.REPLACE('appurchh', 'nSubTotal', lnSubTotal)
		      THISFORM.txtnInvTot.REFRESH()
		   ENDIF
		
		
		   SELECT (lnSelect)
		
		   UNLOCK
		
		CATCH TO loError
		   DO errorlog WITH 'Calctot', loError.LineNo, 'Enter Bills', loError.ERRORNO, loError.MESSAGE, '', loError
		   MESSAGEBOX('Unable to calculate the total bill at this time. Check the System Log found under Other Reports for more information.', 16, 'Problem Encountered')
		   llReturn = .F.
		ENDTRY
	ENDPROC

	PROCEDURE checkexp		&& Check to see if expenses entered for wells have been allocated and the production period closed.
		LPARA tcBatch
		
		*  Check to see if expenses entered for wells have been closed.
		SWSELECT('expense')
		SCAN FOR cbatch = tcbatch
		   lcwellid = cwellid
		   SELE wellinv
		   LOCATE FOR cwellid = lcwellid AND ctypeinv = 'W' AND ljib
		   lljibwell =  FOUND()
		   LOCATE FOR cwellid = lcwellid AND ctypeinv = 'W' AND NOT ljib
		   llnetwell =  FOUND()
		   SELE expense
		   IF lljibwell AND nRunNoJib <> 0
		      this.cclosedrun = 'J' + expense.crunyearjib+padl(allt(str(expense.nrunnojib)),3,'0')
		      RETURN .T.
		   ENDIF
		   IF llnetwell AND nRunNoRev <> 0
		      this.cclosedrun = 'R' + expense.crunyearrev+padl(allt(str(expense.nrunnorev)),3,'0')
		      RETURN .T.
		   ENDIF
		ENDSCAN
		
		RETURN .F.
	ENDPROC

	PROCEDURE checkhist		&& Checks to see if the production period is closed.
		LPARA tcYear, tcPeriod, tcGroup, tcWellID
		LOCAL llHist, llSepClose, lcDeleted
		*
		*  Checks to see if the given period is closed
		*  Returns .T. if the period is closed
		*
		llHist = .F.
		
		TRY
		   lcDeleted = SET('DELETED')
		   SET DELETED ON
		
		
		*
		*  Check to see if there are any JIB owners in the well. We need to check to see if the JIB period
		*  is closed if there are JIB owners. Otherwise, we check the revenue period 'cause it means we're
		*  netting expenses from revenue.
		*
		   SELE wellinv
		   LOCATE FOR cWellID = tcWellID AND lJIB = .T.
		   IF FOUND()
		      llJIB = .T.
		   ELSE
		      llJIB = .F.
		   ENDIF
		
		   IF llJIB
		      IF tcGroup = '**'
		         SWSELECT('sysctl')
		         LOCATE FOR cyear + cperiod = tcYear + tcPeriod AND lDisbMan AND cTypeClose = 'J'
		         IF FOUND()
		            llHist = .T.
		         ENDIF
		      ELSE
		         SWSELECT('sysctl')
		         SET ORDER TO yrprdgrp
		         IF SEEK(tcYear + tcPeriod + tcGroup + 'YJ')
		            llHist = .T.
		         ENDIF
		      ENDIF
		   ELSE
		      IF tcGroup = '**'
		         SWSELECT('sysctl')
		         LOCATE FOR cyear + cperiod = tcYear + tcPeriod AND lDisbMan AND cTypeClose = 'R'
		         IF FOUND()
		            llHist = .T.
		         ENDIF
		      ELSE
		         SWSELECT('sysctl')
		         SET ORDER TO yrprdgrp
		         IF SEEK(tcYear + tcPeriod + tcGroup + 'YR')
		            llHist = .T.
		         ENDIF
		      ENDIF
		
		   ENDIF
		   SET DELETED &lcDeleted
		
		CATCH TO loError
		   llHist = .F.
		   DO errorlog WITH 'CheckHist', loError.LINENO, 'Enter Bills', loError.ERRORNO, loError.MESSAGE, '', loError
		   MESSAGEBOX('Unable to process the bill at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		        'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		RETURN (llHist)
		
		
	ENDPROC

	PROCEDURE checkpaid
		LOCAL lobill AS "QBFC7.ibillret"
		LOCAL lnType, loError, lobillquery, lobillresp, lolink, lorequest, loresponse
		LOCAL lcreq, lcxml, loresp
		
		* Set the default to not show as paid
		THISFORM.lPaid           = .F.
		THISFORM.lblPaid.VISIBLE = .F.
		
		TRY
		   IF m.goapp.oQB.lqbactive
		      IF m.goapp.oQB.oqbsm.IsErrorRecoveryInfo()
		         loresp     = m.goapp.oQB.oqbsm.geterrorrecoverystatus()
		         lcxml      = loresp.toxmlstring()
		         loresponse = loresp.responselist.getat(0)
		         IF loresponse.statuscode = 0
		            lcreq  = m.goapp.oQB.oqbsm.getsavedmsgsetrequest()
		            m.goapp.oQB.oqbsm.ClearErrorRecovery()
		         ELSE
		            m.goapp.oQB.oqbsm.ClearErrorRecovery()
		            MESSAGEBOX(lcxml, 48, 'Error Recovery Info')
		         ENDIF
		      ENDIF
		* get a message set request object (version 1.1 xml)
		      lorequest = m.goapp.oQB.oQBRequest
		
		* set the on error attribute for the request
		      lorequest.ATTRIBUTES.onerror = 1
		      lorequest.clearrequests()
		
		      IF NOT EMPTY(appurchh.ctxnid)
		* Check to see if the bill has been paid
		         lobillquery = lorequest.appendbillqueryrq()
		         lobillquery.includelinkedtxns.setvalue(.T.)
		         lobillquery.orbillquery.txnidlist.ADD(appurchh.ctxnid)
		         loresponse = m.goapp.oQB.oqbsm.dorequests(lorequest)
		         lobillresp = loresponse.responselist.getat(0)
		         IF lobillresp.statuscode = 0
		            lobill = lobillresp.DETAIL.getat(0)
		            IF VARTYPE(lobill.linkedtxnlist) = 'O'
		               TRY
		                  lolink = lobill.linkedtxnlist.getat(0)
		                  lnType = lolink.txntype.getvalue()
		                  IF INLIST(lnType, 2, 3, 9, 25)
		                     THISFORM.lPaid           = .T.
		                     THISFORM.lblPaid.VISIBLE = .T.
		                     lorequest.clearrequests()
		                  ELSE
		                     THISFORM.lPaid           = .F.
		                     THISFORM.lblPaid.VISIBLE = .F.
		                     lorequest.clearrequests()
		                  ENDIF
		               CATCH TO loError
		                  THISFORM.lPaid           = .F.
		                  THISFORM.lblPaid.VISIBLE = .F.
		               ENDTRY
		            ELSE
		               THISFORM.lPaid           = .F.
		               THISFORM.lblPaid.VISIBLE = .F.
		            ENDIF
		         ENDIF
		         m.goapp.oQB.oqbsm.ClearErrorRecovery()
		      ELSE
		         lobill = lobillresp.DETAIL.getat(0)
		         THISFORM.lPaid           = .F.
		         THISFORM.lblPaid.VISIBLE = .F.
		      ENDIF
		   ENDIF
		CATCH TO loError
		   * DO errorlog WITH 'Checkpaid', loError.LineNo, 'Enter Bills', loError.ERRORNO, loError.MESSAGE, '', loError
		ENDTRY
		
		 
	ENDPROC

	PROCEDURE Destroy
		* Cleanup by releasing the distproc object
		IF TYPE('thisform.oDist') = 'O'
		   oDist = THISFORM.oDist
		   RELEASE oDist
		   THISFORM.oDist = .NULL.
		ENDIF
		ON KEY LABEL F5 *
		ON KEY LABEL F2 *
		ON KEY LABEL TAB 
		ON KEY LABEL ENTER 
		
		DODEFAULT()
		
	ENDPROC

	PROCEDURE dmexpense		&& Disbursement Manager integration for expenses.
		LOCAL lcBatch, lcYear, lcPeriod, m.cOwnerID, lcWellStat
		LOCAL lAPTran, lAllocated, lClosed, lFixed, lOneMan, lcWellID1, lcWellID2, llAllocExp, llFound
		LOCAL llReturn, loError, oWellInv
		*:Global cBatch, cCateg, cExpClass, cMemo, cPaidByCk, cPayee, cPeriod, cPrdPaid, cRunYearJIB
		*:Global cRunYearRev, cWellID, cYear, cidexpe, cidexph, cidexps, crefid, cvendorid, dExpDate
		*:Global dPostDate, nAmount, nRunNoJIB, nRunNoRev, nSaltWater
		
		*********************************************************************
		*  Adds the expense entries to the disbursement manager EXPSUSP or
		*  EXPENSE tables depending on whether the production year and
		*  period are specified.
		*********************************************************************
		
		TRY
		   SELE afeopt
		   GO TOP
		   llAllocExp = lAllocExp
		   
		   oWellInv = CREATEOBJECT('swbizobj_wellinv')
		*
		*  Call distproc to create the (invtmp) and (wellwork) cursors
		*
		   SWSELECT('wells')
		   SET ORDER TO cWellID
		   GO TOP
		   lcWellID1 = cWellID
		   GO BOTT
		   lcWellID2 = cWellID
		
		*  Check to see if expenses entered for wells were allocated
		*  If so, and the period isn't closed, delete it.  Otherwise
		*  let the user know he can't delete this entry.
		   lcBatch = appurchh.cBatch
		
		   THISFORM.oDist = CREATEOBJECT('distproc', lcWellID1, lcWellID2, ;
		        '01', '1980', '00', 'W', DATE(), .T., 0)
		
		   SWSELECT('expsusp')
		   SCAN FOR cBatch == lcBatch
		      DELETE NEXT 1
		   ENDSCAN
		
		   SWSELECT('expense')
		   SCAN FOR cBatch == lcBatch
		      m.cidexph = cidexph
		      DELE NEXT 1
		      SELECT expense1
		      llFound = .F.
		   ENDSCAN
		
		   m.cvendorid   = appurchh.cvendorid
		   m.dExpDate    = appurchh.dinvdate
		   lcYear        = TRANSFORM(YEAR(m.dExpDate))
		   lcPeriod      = PADL(ALLTRIM(TRANSFORM(MONTH(m.dExpDate))), 2, '0')
		   m.crefid      = appurchh.cinvnum
		   m.cPayee      = THISFORM.txtcVendName.VALUE
		   m.lAPTran     = .T.
		   m.cBatch      = lcBatch
		   m.dPostDate   = appurchh.dPostDate
		   m.cMemo       = ''
		   m.cPaidByCk   = ''
		   m.cPrdPaid    = ''
		   m.lFixed      = .F.
		   m.lClosed     = .F.
		   m.lAllocated  = .F.
		   m.nRunNoRev   = 0
		   m.nRunNoJIB   = 0
		   m.cRunYearRev = ''
		   m.cRunYearJIB = ''
		
		   SWSELECT('appurchd')
		   SCAN FOR cBatch == lcBatch AND NOT lItemDetail AND NOT EMPTY(cUnitNo) AND NOT EMPTY(cCatCode)
		      SCATTER MEMVAR
		     
		*
		*  Don't process any non-well expenses
		*
		      SWSELECT('wells')
		      SET ORDER TO cWellID
		      IF NOT SEEK(m.cUnitNo)
		         LOOP
		      ELSE
		         lcWellStat = wells.cWellStat  &&  Store current well status, so we know whether to send it to the allocation file or not
		      ENDIF
		
		*
		*  Don't process any expenses that aren't tied
		*  to a valid expense category or AFE category code
		*
		      SWSELECT('expcat')
		      SET ORDER TO cCatCode
		      IF NOT SEEK(m.cCatCode)
		         LOOP
		      ELSE
		         IF (lAFEType AND NOT llAllocExp) AND m.goapp.lafeopt
		            LOOP
		         ENDIF
		         m.cCateg = cCateg
		
		         IF EMPTY(m.cExpClass)  &&  If they somehow get a blank expense class, use the current setting - BH 10/11/05
		            m.cExpClass = cExpClass
		         ENDIF
		      ENDIF
		
		      m.cWellID    = m.cUnitNo
		      m.nSaltWater = m.nSaltBBL
		      m.cMemo      = m.citemdesc
		      
		       IF EMPTY(m.cDeck)
		          m.cDeck = oWellInv.DOIDeckNameLookup(m.cProdyear, m.cProdperiod, m.cwellid)
		       ENDIF    
		
		      IF EMPTY(m.cOwnerID)
		         m.nAmount = swNetExp(m.nExtension, m.cWellID, .F., m.cExpClass, 'B', .F., m.cOwnerID, m.cCatCode, m.cDeck)
		      ELSE
		         m.nAmount = m.nExtension
		      ENDIF
		
		      IF EMPTY(m.cProdYear) OR EMPTY(m.cProdPeriod)
		         m.cYear   = lcYear
		         m.cPeriod = lcPeriod
		      ELSE
		         m.cYear   = m.cProdYear
		         m.cPeriod = m.cProdPeriod
		      ENDIF
		
		      IF NOT EMPTY(m.cOwnerID)
		         m.lOneMan = .T.
		      ELSE
		         m.lOneMan = .F.
		      ENDIF
		
		      IF NOT EMPTY(m.cProdYear) AND NOT EMPTY(m.cProdPeriod) AND NOT m.goapp.lSendToAllocate AND INLIST(lcWellStat, 'A', 'V')
		         m.cidexpe = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Expense')
		         SET DELETED OFF
		         SELECT expense1
		         SET ORDER TO cidexpe
		         DO WHILE SEEK(m.cidexpe)
		            m.cidexpe = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Expense')
		         ENDDO
		         SET DELETED ON
		         SWSELECT('expense')
		         m.cYear   = m.cProdYear
		         m.cPeriod = m.cProdPeriod
		         INSERT INTO expense FROM MEMVAR
		      ELSE
		         m.cidexps    = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Expense')
		         SET DELETED OFF
		         SWSELECT('expsusp')
		         SET ORDER TO cidexps
		         DO WHILE SEEK(m.cidexps)
		            m.cidexps    = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Expense')
		         ENDDO
		         SET DELETED ON
		         m.cYear   = m.cProdYear
		         m.cPeriod = m.cProdPeriod
		         INSERT INTO expsusp FROM MEMVAR
		      ENDIF
		   ENDSCAN
		   llReturn = .T.
		CATCH TO loError
		   DO errorlog WITH 'DMExpense', loError.LineNo, 'Enter Bills', loError.ERRORNO, loError.MESSAGE, '', loError
		   MESSAGEBOX('Unable to save the bill at this time. Check the System Log found under Other Reports for more information.', 16, 'Problem Encountered')
		   llReturn = .F.
		ENDTRY
		
		RETURN llReturn
		
	ENDPROC

	PROCEDURE editdetail		&& Moves the detail line from the grid to the update area.
		LOCAL llreturn, lnItemID, lnX, loError
		
		TRY
		   WITH THISFORM
		
		*  If the bill has been paid, don't let them even bring up a line for editing.
		*  No chance of data loss that way.
		      IF THISFORM.lPaid
		         THISFORM.oMessage.Warning('There have been payments applied against this bill in QuickBooks.  It cannot be modified.')
		         llReturn = .F.
		         EXIT 
		      ENDIF
		
		      lnItemID = 1
		      FOR lnX = 1 TO .txtAccount.LISTCOUNT
		         IF .txtAccount.LISTITEM[lnx, 4] = appurchd.cacctlistid
		            lnItemID = lnX
		         ENDIF
		      ENDFOR
		      
		      .txtAccount.LISTITEMID = lnItemID
		      .txtcItemDesc.VALUE    = appurchd.citemdesc
		      .txtcUnitNo.VALUE      = appurchd.cUnitNo
		      .txtcCatCode.VALUE     = appurchd.ccatcode
		      .txtnExtension.setvalue(appurchd.nExtension)
		      .txtcProdYear.VALUE   = appurchd.cProdYear
		      .txtcProdPeriod.VALUE = appurchd.cProdPeriod
		      .txtcOwnerID.VALUE    = appurchd.cOwnerID
		      .txtnSaltBBL.VALUE    = appurchd.nSaltBBL
		      .cboclass.VALUE       = appurchd.cexpclass
		      .txtcDispCode.VALUE   = appurchd.cdisperm
		      .txtwastecode.VALUE   = appurchd.cwastecode
		      .txtcDispCode.VALUE   = appurchd.cdispcode
		      .txtafeno.Value       = appurchd.cafeno
		      
		      m.cDeck               = appurchd.cDeck
		      IF EMPTY(m.cDeck)
		         m.cDeck = THISFORM.oWellInv.DOIDeckNameLookup(appurchd.cProdYear, appurchd.cProdPeriod, appurchd.cUnitNo)
		      ENDIF   
		      .cbodeck.requery(m.cDeck)
		
		*  Fill in the well name
		      SWSELECT('wells')
		      SET ORDER TO cwellid
		      IF SEEK(appurchd.cUnitNo)
		         .txtcWellName.VALUE = wells.cwellname
		         .lValidWell         = .T.
		      ENDIF
		
		      .txtcUnitNo.SETFOCUS()
		      SWSELECT('appurchd')
		      .SetState()
		      THISFORM.cmdatamanager.deleterecord('Appurchd')
		      THISFORM.lstWellBills.REQUERY()
		      THISFORM.calctot()
		      THISFORM.REFRESH()
		* Enable/disable and set the correct account based on the expense code and other options
		      .SetAccount()
		   ENDWITH
		
		   SWSELECT('appurchh')
		
		*
		*  Let the form know something changed
		*
		   THISFORM.SetState()
		
		CATCH TO loError
		   DO errorlog WITH 'Editdetail', loError.LineNo, 'Enter Bills', loError.ERRORNO, loError.MESSAGE, '', loError
		   MESSAGEBOX('Unable to edit the bill at this time. Check the System Log found under Other Reports for more information.', 16, 'Problem Encountered')
		   llreturn = .F.
		ENDTRY
		
		RETURN llreturn 
	ENDPROC

	PROCEDURE edititems
	ENDPROC

	PROCEDURE getprice		&& Gets the price for the item based upon the price code passed.
		LPARAMETERS tcPriceCode
	ENDPROC

	PROCEDURE Init
		IF DODEFAULT()
		   SWSELECT('options')
		   GO TOP
		   this.lSepClose = lSepClose
		   on key label F5 _screen.activeform.zerotot()
		
		   SWSELECT('glopt')
		   GO TOP
		   this.lQBPost = NOT lDMNoPost
		 
		   IF m.goApp.lDocuments
		      thisform.AddObject('oFileDialog','sffiledialog')
		      thisform.cmddocument.Visible = .t.
		   ELSE
		      thisform.cmddocument.Visible = .f.
		   ENDIF
		   
		   thisform.oWellInv = CREATEOBJECT('swbizobj_wellinv') 
		ENDIF   
		   
	ENDPROC

	PROCEDURE list
		LPARAMETERS cworkarea
		LOCAL lcList, lcBatch
		LOCAL lcInvoice, llOK, llreturn, loError
		PRIV llOK
		
		TRY
		   llOK      = .T.
		   lcInvoice = appurchh.cInvNum
		
		   SELECT  appurchh.cInvNum, ;
				   appurchh.dinvdate, ;
				   appurchh.ninvtot, ;
				   vendor.csortfield AS cvendname, ;
				   appurchh.cbatch ;
			   FROM appurchh, vendor ;
			   WHERE appurchh.cvendorid = vendor.cvendorid ;
			   INTO CURSOR tempap1 ;
			   ORDER BY appurchh.cvendorid
		
		   IF _TALLY > 0
		      IF USED('tempap')
		         USE IN tempap
		      ENDIF
		      USE DBF('tempap1') AGAIN IN 0 ALIAS tempap EXCL
		      SET SAFETY OFF
		      SELECT tempap
		      INDEX ON cInvNum + STR(YEAR(dinvdate)) + STR(MONTH(dinvdate)) + STR(DAY(dinvdate))    TAG cInvNum
		      INDEX ON dinvdate             TAG dinvdate
		      INDEX ON UPPER(cvendname) + STR(YEAR(dinvdate)) + STR(MONTH(dinvdate)) + STR(DAY(dinvdate)) + cInvNum  TAG cvendname
		      INDEX ON cbatch               TAG cbatch
		      INDEX ON ninvtot              TAG ninvtot
		
		      lcList = 'cinvnum\Invoice Number,dInvDate\Date,cvendname\Vendor,ninvtot\Total'
		
		      DO FORM ..\CUSTOM\picklist WITH 'tempap', lcList, lcInvoice, 4, .T., .T.
		
		      IF llOK
		         SWSELECT('appurchh')
		         SET ORDER TO cbatch
		         SEEK(tempap.cbatch)
		         THISFORM.lstWellBills.REQUERY()
		         THISFORM.cmdatamanager.setrecordposition('Appurchh')
		         THISFORM.checkpaid()
		         THISFORM.txtcprodPeriod.VALUE = ''
		         THISFORM.txtcprodYear.VALUE   = ''
		         THISFORM.REFRESH()
		      ENDIF
		   ENDIF
		
		CATCH TO loError
		   DO errorlog WITH 'List', loError.LineNo, 'Enter Bills', loError.ERRORNO, loError.MESSAGE, '', loError
		   MESSAGEBOX('Unable to bring up the list at this time. Check the System Log found under Other Reports for more information.', 16, 'Problem Encountered')
		   llreturn = .F.
		ENDTRY
		
	ENDPROC

	PROCEDURE Load
		IF DODEFAULT()
		      *  Get the cursor of QuickBooks Accounts
		      m.goApp.oQB.QBAccounts('',.F.,.T.,THISFORM.DATASESSIONID)
		ENDIF
		
	ENDPROC

	PROCEDURE lookcoa
	ENDPROC

	PROCEDURE save
		LPARAMETERS cworkarealist
		
		THISFORM.txtcVendorID.SETFOCUS()
		THISFORM.setnextcontrol(THISFORM.txtcvendorid)
		thisform.activatenextcontrol()
		
		DODEFAULT(cworkarealist)
		
	ENDPROC

	PROCEDURE setaccount		&& Sets the detail account based on the well and expense code
		LOCAL lcAcct, llAllocExp, lnItemID, lnX, loError
		
		TRY
		   SWSELECT('afeopt')
		   GO TOP
		   llAllocExp = lAllocExp
		
		   IF NOT EMPTY(THISFORM.txtcCatCode.VALUE)
		      SWSELECT('expcat')
		      SET ORDER TO cCatCode
		      IF SEEK(THISFORM.txtcCatCode.VALUE)
		         IF NOT lAFEType OR llAllocExp OR NOT m.goapp.lafeopt
		            IF NOT EMPTY(glopt.cQBexpclear)
		               lnItemID = 1
		               FOR lnX = 1 TO THISFORM.txtAccount.LISTCOUNT + 1
		                  IF THISFORM.txtAccount.LISTITEM[lnx, 4] = glopt.cQBexpclear
		                     lnItemID = lnX
		                  ENDIF
		               ENDFOR
		               THISFORM.txtAccount.LISTITEMID = lnItemID
		               THISFORM.txtAccount.ENABLED    = .F.
		            ELSE
		               lnItemID = 1
		               FOR lnX = 1 TO THISFORM.txtAccount.LISTCOUNT
		                  IF THISFORM.txtAccount.LISTITEM[lnx, 4] = glopt.cQBrevclear
		                     lnItemID = lnX
		                  ENDIF
		               ENDFOR
		               THISFORM.txtAccount.LISTITEMID = lnItemID
		               THISFORM.txtAccount.ENABLED    = .T.
		            ENDIF
		         ELSE
		            lcAcct   = expcat.cownacctlistid
		            lnItemID = 1
		            FOR lnX = 1 TO THISFORM.txtAccount.LISTCOUNT
		               IF THISFORM.txtAccount.LISTITEM[lnx, 4] = lcAcct
		                  lnItemID = lnX
		               ENDIF
		            ENDFOR
		            THISFORM.txtAccount.LISTITEMID = lnItemID
		            THISFORM.txtAccount.ENABLED    = .T.
		         ENDIF
		      ELSE
		         THISFORM.txtAccount.ENABLED = .T.
		      ENDIF
		   ELSE
		      THISFORM.txtAccount.ENABLED = .T.
		   ENDIF
		
		CATCH TO loError
		   DO errorlog WITH 'Setaccount', loError.LineNo, 'Enter Bills', loError.ERRORNO, loError.MESSAGE, '', loError
		ENDTRY
		
		
	ENDPROC

	PROCEDURE setstate		&& Resets the form state for non bound controls so that the save button still works.
		this.lChanged = .T.
		m.goStateManager.RefreshAll('Form Edit')
	ENDPROC

	PROCEDURE valterms		&& Validate Terms and Set Due Date and Disc Date based on the Terms
		*
		*  Validates the terms code in the appurchh record and
		*  calculates the due date and disc date based upon
		*  the terms settings and the appurchh.dinvdate
		*
		LOCAL lcidTerm, lnNetDueIn, lnDiscIn, ldInvDate
		LOCAL lnDiscPct, loError, llReturn
		
		llReturn = .T.
		
		TRY
		   ldInvDate = appurchh.dinvdate
		   *
		   *  If the invoice date is empty, don't try to calculate
		   *  the due date or discount date
		   *
		   IF EMPTY(ldInvDate)
		      llReturn = .F.
		      EXIT
		   ENDIF
		   *
		   *  Get the terms table primary key from the purchase header
		   *  record.
		   lcidTerm  = appurchh.cidterm
		
		   *
		   *  Lookup the terms code in the terms table to get the
		   *  # of days the invoice is due in and the # of days
		   *  set for discounts
		   *
		   SWSELECT('terms')
		   LOCATE FOR ALLTRIM(CLISTID) == ALLTRIM(lcidTerm)
		   IF FOUND()
		      lnNetDueIn = nNetDueIn
		      lnDiscIn   = nDiscIn
		      lnDiscPct  = nDiscPct
		   ELSE
		      *  Terms have not been selected for this purchase so assume
		      *  COD.
		      STORE 0 TO lnNetDueIn, lnDiscIn, lnDiscPct
		   ENDIF
		
		   *
		   *  Calculate and set the values of the due date and
		   *  discount date fields
		   *
		   IF THISFORM.txtdDueDate.VALUE <> ldInvDate + lnNetDueIn  &&  Only replace dates if they're different than current values
		      THISFORM.txtdDueDate.setvalue(ldInvDate + lnNetDueIn)
		   ENDIF
		   IF THISFORM.txtdDiscDate.VALUE <> ldInvDate + lnDiscIn
		      THISFORM.txtdDiscDate.setvalue(ldInvDate + lnDiscIn)
		   ENDIF
		
		CATCH TO loError
		   DO errorlog WITH 'Valterms', loError.LINENO, 'Enter Bills', loError.ERRORNO, loError.MESSAGE, '', loError
		ENDTRY
		
		RETURN llReturn
		
	ENDPROC

	PROCEDURE viewdocument
		LPARAMETERS tcBatch
		
		LOCAL lnReturn, llReturn, lcOutputFile
		LOCAL liKey, lcPath
		
		
		swselect('documents')
		SET ORDER TO cFK
		IF SEEK(tcBatch)
		   lcOutputFile = cPath
		
		   llReturn = .T.
		
		   IF NOT FILE(lcOutputFile)
		      llReturn = .F.
		   ENDIF
		
		   viewdocument(lcOutputFile)
		
		ENDIF
		
	ENDPROC

	PROCEDURE zerotot
	ENDPROC

	PROCEDURE cboClass.Init
		IF DODEFAULT()
		   this.addlistitem('0',1,1)
		   this.addlistitem('Working Interest',1,2)
		   this.addlistitem('1',2,1)
		   this.addlistitem('Class 1',2,2)
		   this.addlistitem('2',3,1)
		   this.addlistitem('Class 2',3,2)
		   this.addlistitem('3',4,1)
		   this.addlistitem('Class 3',4,2)
		   this.addlistitem('4',5,1)
		   this.addlistitem('Class 4',5,2)
		   this.addlistitem('5',6,1)
		   this.addlistitem('Class 5',6,2)
		   this.addlistitem('A',7,1)
		   this.addlistitem('After Casing Point',7,2)
		   this.addlistitem('B',8,1)
		   this.addlistitem('Before Casing Point',8,2)
		ENDIF   
	ENDPROC

	PROCEDURE cboDeck.Init
		IF DODEFAULT()
		   this.Requery()
		ENDIF    
	ENDPROC

	PROCEDURE cboDeck.Requery
		LPARAMETERS tcDeck, tcYear, tcPeriod
		
		IF DODEFAULT()
			THIS.Clear()
			this.Value = ''
			this.DisplayValue = ''
			IF VARTYPE(tcYear) # 'C'
			   tcYear = ''
			ENDIF 
			IF VARTYPE(tcPeriod) # 'C'
			   tcPeriod = ''
			ENDIF 
		
		    IF VARTYPE(tcDeck) # 'C'
		       tcDeck = ''
		    ENDIF 
		       
		    lcWellID = thisform.txtcunitNo.Value 
		    IF EMPTY(lcWellID)
		       RETURN
		    ENDIF 
		    
		    lnIndex = 1
		    
		    * Get a list of decks for the given well
			SELECT cdeck, ldefault, effstartyr, effstartprd FROM doidecks ;
				INTO CURSOR temp ;
				WHERE cwellid = lcwellid ;
				ORDER BY cdeck DESC  ;
				GROUP BY cdeck
		
		    * Add the decks to the dropdown
			lnx = 1
			IF _TALLY > 0
				SELECT temp
				SCAN
					SCATTER MEMVAR
					IF EMPTY(m.cdeck)
					   m.cdeck = '(blank)'
					ENDIF 
					THIS.ADDLISTITEM(m.cdeck,lnx,1)
					THIS.ADDLISTITEM(m.cdeck,lnx,2)
					
					* If we passed the deck or production period
					* set the deck to the given deck or the one
					* that has an effective date for the production period.
					IF NOT EMPTY(tcDeck)
						IF m.cDeck = tcDeck
					  	 	lnIndex = lnx
						ENDIF 
					ELSE
					   IF tcYear = m.effstartyr AND tcPeriod = m.effstartprd
					      lnIndex = lnX
					   ENDIF 
					ENDIF 	
					lnx = lnx + 1 
				ENDSCAN
			    this.ListItemId = lnIndex
			ELSE 		
			    this.ListItemId = 1
			ENDIF
		ENDIF
		
	ENDPROC

	PROCEDURE cboDeck.Valid
		RETURN .t.
	ENDPROC

	PROCEDURE cboTerms.afterchange
		thisform.valterms()
		DODEFAULT()
	ENDPROC

	PROCEDURE cboTerms.Init
		LOCAL lnCount
		*
		*  Builds the data displayed in the combo list box
		*
		
		SELECT cTermDesc, cListID FROM terms INTO ARRAY laTerms ORDER BY cTermDesc
		lnCount = _tally
		
		This.addlistitem('NONE',1,1)
		This.addlistitem('',1,2)
		
		IF lnCount > 0
		   FOR lnX = 1 TO ALEN(laTerms,1)
		      this.addlistitem(laTerms[lnX,1],lnX+1,1)
		      this.addlistitem(laTerms[lnX,2],lnX+1,2)
		   ENDFOR   
		ENDIF   
		
		DODEFAULT()
	ENDPROC

	PROCEDURE chkNOQBPOST.Valid
		if dodefault()
		   THISFORM.lQBPost = NOT this.value
		endif   
	ENDPROC

	PROCEDURE cmdAFENo.Click
		LOCAL lcList
		PRIV llOK
		
		llOK = .T.
		
		lcList = 'cafeno,cwellid'
		
		
		IF NOT EMPTY(THISFORM.txtcunitno.VALUE)
		   
		   IF _TALLY > 0
		
		      DO FORM ..\CUSTOM\Picklist WITH 'afehdr', lcList, thisform.txtafeno.value, 2, .f. 
		
		      IF llOK
		         THISFORM.txtafeno.VALUE = afehdr.cafeno
		         THISFORM.txtafeno.REFRESH()
		      ENDIF
		
		      THISFORM.setnextcontrol(thisform.txtafeno)
		   ENDIF
		ENDIF
		
	ENDPROC

	PROCEDURE cmdAFENo.When
		RETURN MDOWN()
	ENDPROC

	PROCEDURE cmdatamanager.afterchange
		LPARAMETERS cworkarea,cfield
		
		DO CASE
			   CASE UPPER(m.cField) + ',' $ 'NQUANTITY,NPRICE,'
			      m.nExtension = appurchd.nQuantity * appurchd.nPrice
			      RETURN this.Replace('ApPurchd', 'nExtension', m.nExtension )
		      
		ENDCASE
		RETURN .T.      
	ENDPROC

	PROCEDURE cmdatamanager.afterdelete
		LPARAMETERS cworkarea
		
		DO CASE
		   CASE m.cWorkarea = 'Appurchh'
		      thisform.next()
		      sele appurchh
		      thisform.lstWellBills.Requery()
		      
		   CASE m.cWorkarea = 'Appurchd'
		      * Recalculate the invoice totals
		      thisform.calctot()
		ENDCASE
		
		DODEFAULT(cworkarea)
	ENDPROC

	PROCEDURE cmdatamanager.afternav
		LPARAMETERS cworkarea
		LOCAL lcBatch
		
		IF PROPER(m.cworkarea) = 'Appurchh'
		      
		   SWSELECT('appurchh')
		   lcBatch = cBatch
		   SWSELECT('vendor')
		   SET ORDER TO cvendorid
		   IF SEEK(appurchh.cvendorid)
		      THISFORM.txtcVendName.VALUE = cvendname
		   ELSE
		      THISFORM.txtcVendName.VALUE = ' '
		   ENDIF
		   THISFORM.calctot()
		   thisform.lF5 = .f.   
		   
		   thisform.lqbpost = not appurchh.lNoQBPost
		   
		   SWSELECT('appurchh')
		   THISFORM.lstWellBills.Requery()
		   
		   WITH THISFORM
		         .txtcItemDesc.VALUE = ' '
		         .txtAccount.VALUE = ' '
		         .txtcUnitNo.VALUE = ' '
		         .txtcWellName.VALUE = ' '
		         .txtcCatCode.VALUE = ' '
		         .txtcOwnerID.VALUE = ' '
		         .txtnExtension.value = 0
		         .txtnSaltBBL.value = 0
		      ENDWITH
		      thisform.checkpaid()
		
		   THISFORM.setnextcontrol(THISFORM.txtcvendorid)
		   sele appurchh
		ENDIF
		
		RETURN(DODEFAULT(cworkarea))
		
	ENDPROC

	PROCEDURE cmdatamanager.afternew
		LPARAMETERS cworkarea
		LOCAL llFoundTerm, lcidTerm, lcBatch, lcidpurd
		
		m.nextension = 0
		thisform.lPaid = .f.  &&  Reset the lPaid flag
		
		SWSELECT('glopt')
		GO TOP
		llQBNoPost = lDMNoPost
		
		* Get default A/P Account
		swselect('apopt')
		GO TOP
		IF NOT EMPTY(capacct)
		   lcaplistid = capacct
		ELSE
		   lcaplistid = ''
		ENDIF
		
		DO CASE
		   CASE UPPER(m.cworkarea) = 'APPURCHH'    && Purchases Header
		      * Look for duplicates so no uniqueness errors occur
		      lcBatch = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Batch')
		      SET DELETED OFF
		      SELECT appurchh1
		      SET ORDER TO cBatch
		      DO WHILE SEEK(lcBatch)
		         lcBatch = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Batch')
		      ENDDO
		      SET DELETED ON
		      SWSELECT('appurchh')
		      REPLACE cBatch  WITH lcBatch, ;
		              dPostDate WITH DATE(), ;
		              lNOQBPost WITH llQBNoPost, ;
		              capacct   WITH lcAPListID, ;
		              dentdate  WITH DATE()
		      *
		      *  Look for a default terms record so that we can set the terms
		      *  to that default
		      llFoundTerm = .F.
		      SWSELECT('terms')
		      SCAN FOR lDefTerm = .T.
		         lcidTerm = clistid
		         llFoundTerm = .T.
		         EXIT
		      ENDSCAN
		      SWSELECT('appurchh')
		      IF llFoundTerm
		         REPLACE cidterm WITH lcidTerm
		      ENDIF
		
		      WITH THISFORM
		         .lblpaid.visible = .f.
		         .txtcItemDesc.VALUE = ' '
		         .txtAccount.VALUE = ' '
		         .txtcUnitNo.VALUE = ' '
		         .txtcWellName.VALUE = ' '
		         .txtcCatCode.VALUE = ' '
		         .txtcOwnerID.VALUE = ' '
		         .txtnExtension.SetValue(0)
		         .txtnSaltBBL.SetValue(0)
		      ENDWITH
		
		      THISFORM.txtcVendName.SETFOCUS()
		
		   CASE UPPER(m.cworkarea) = 'APPURCHD'   &&  Purchase Detail
		      * Look for duplicates so no uniqueness errors occur
		      lcidpurd = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Purchase Detail')
		      SET DELETED OFF
		      SELECT appurchd1
		      SET ORDER TO cidPurd
		      DO WHILE SEEK(lcidpurd)
		         lcidpurd = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Purchase Detail')
		      ENDDO
		      SET DELETED ON
		      SWSELECT('appurchd')
		      REPLACE appurchd.cidPurd WITH lcidpurd
		ENDCASE
		
		THISFORM.txtnExtension.SET('value',0)
		
	ENDPROC

	PROCEDURE cmdatamanager.afterupdate
		LPARAMETERS cworkarealist
		
		WAIT CLEAR
		
		RETURN .T.
	ENDPROC

	PROCEDURE cmdatamanager.beforedelete
		LPARAMETERS cworkarea
		LOCAL llReturn, lcBatch, loError, loRequest, lobilldel, lodelresp, loresponse
		llReturn = .T.
		
		TRY
		   IF m.cworkarea = 'Appurchh'
		
		      IF (m.goapp.oQB.lqbactive AND THISFORM.lQBPost) OR (NOT m.goapp.oQB.lqbactive AND NOT THISFORM.lQBPost)
		
		         lcBatch = appurchh.cBatch
		
		         * If the bill has been paid, don't allow it to be updated.
		         IF THISFORM.lPaid
		            MESSAGEBOX('This bill has payments applied to it in QuickBooks. It cannot be deleted.', 16, 'Delete Problem')
		            llReturn = .F.
		            EXIT
		         ENDIF
		
		         IF THISFORM.checkexp(lcBatch)
		            THISFORM.omessage.warning('Expenses have been allocated to a production period and the period has been closed. ' + ;
		               'You cannot delete this bill.')
		            llReturn = .F.
		            EXIT
		         ENDIF
		
		
		         SWSELECT('appurchd')
		         *   SET FILTER TO
		
		         SWSELECT('expense')
		         SCAN FOR cBatch == lcBatch
		            DELE NEXT 1
		         ENDSCAN
		
		         SWSELECT('expsusp')
		         SCAN FOR cBatch == lcBatch
		            DELE NEXT 1
		         ENDSCAN
		
		         IF m.goapp.oQB.lqbactive AND THISFORM.lQBPost
		            * get a message set request object (version 1.1 xml)
		            loRequest = m.goapp.oQB.oQBRequest
		            TRY
		               m.goapp.oQB.oQBSM.ClearErrorRecovery()
		            CATCH
		            ENDTRY
		            * set the on error attribute for the request
		            loRequest.ATTRIBUTES.OnError = 1
		            loRequest.clearrequests()
		
		            IF NOT EMPTY(appurchh.ctxnid)
		               * add a request to delete the bill
		               IF appurchh.ninvtot > 0
		                  llReturn = m.goapp.oQB.DeleteTxnID(appurchh.ctxnid,1)
		
		                  IF llReturn
		                     WAIT WIND NOWAIT 'Bill successfully deleted in QuickBooks.'
		                  ENDIF
		               ELSE
		                  llReturn = m.goapp.oQB.DeleteTxnID(appurchh.ctxnid, 24)
		                  IF llReturn
		                     WAIT WIND NOWAIT 'Credit successfully deleted in QuickBooks.'
		                  ENDIF
		               ENDIF
		            ENDIF
		
		            loRequest.clearrequests()
		         ENDIF
		
		         IF llReturn
		            BEGIN TRANSACTION
		            SWSELECT('expense')
		            = TABLEUPDATE(.T.)
		            SWSELECT('expsusp')
		            = TABLEUPDATE(.T.)
		            SWSELECT('appurchh')
		            = TABLEUPDATE(.T.)
		            SWSELECT('appurchd')
		            = TABLEUPDATE(.T.)
		            END TRANSACTION
		            SELE appurchh
		            THISFORM.setchanged(.F.)
		         ENDIF
		      ELSE
		         IF THISFORM.lQBPost
		            THISFORM.omessage.severe('There is no active connection to QuickBooks.  Bills cannot be deleted at this time.')
		            llReturn = .F.
		            EXIT
		         ENDIF
		      ENDIF
		   ENDIF
		
		CATCH TO loError
		   DO errorlog WITH 'Beforedelete', loError.LINENO, 'Enter Bills', loError.ERRORNO, loError.MESSAGE, '', loError
		   MESSAGEBOX('Unable to delete the bill at this time. Check the System Log found under Other Reports for more information.', 16, 'Problem Encountered')
		   llReturn = .F.
		ENDTRY
		
		RETURN llReturn
		
	ENDPROC

	PROCEDURE cmdatamanager.beforeupdate
		LPARAMETERS cworkarealist
		LOCAL lcbatch, lcapacct, lctaxacct, llreturn, lcselect, lnrecno, lcfilter
		LOCAL loqbsm, llDelete
		LOCAL lobilladd AS 'qbfc5.ibilladd'
		LOCAL lcAPListID, lcCatchAll, lcListID, lcMessage, lcidterm, lcreq, lcrunno, lctype, lcxml, lcyear
		LOCAL llResult, loError, loaddresp, lobilldel, lobillline, lobilllist, locreditline, locreditlist
		LOCAL lodelresp, lonewbill, lonewcredit, lorequest, loresp, loresponse, lovendorcreditadd, llDebug
		*:Global ctxnid
		
		llreturn = .T.
		
		TRY
		
		   IF FILE('datafiles\billx.txt')
		      llDebug = .T.
		   ELSE
		      llDebug = .F.
		   ENDIF
		
		   IF NOT THISFORM.lchanged
		      llreturn = .F.
		      EXIT
		   ENDIF
		
		   THISFORM.checkpaid()
		   * Don't allow the bill to be modifed if payments have been applied against it.
		   IF THISFORM.lPaid
		      THISFORM.oMessage.Warning('There have been payments applied against this bill in QuickBooks.  It cannot be modified.')
		      llreturn = .F.
		      EXIT
		   ENDIF
		
		   THISFORM.lqbpost = NOT appurchh.lNoQBPost
		
		   lcbatch    = appurchh.cbatch
		   lcAPListID = appurchh.cqbapacct
		
		   IF EMPTY(lcAPListID)
		      THISFORM.oMessage.severe('Please choose a valid A/P account for this bill. Then save again.')
		      llreturn = .F.
		      EXIT
		   ENDIF
		
		   lcselect   = SELECT()
		
		   IF appurchh.ninvtot = 0
		      swselect('appurchd')
		      LOCATE FOR cbatch == lcbatch AND nextension <> 0
		      IF NOT FOUND()
		         MESSAGEBOX('You cannot save a zero amount bill. There must be some detail lines before saving this bill.',16,'Enter Bills')
		         llreturn = .F.
		         EXIT
		      ENDIF
		   ENDIF
		
		   *  Get the catch-all account
		   swselect('glopt')
		   lcCatchAll = cSuspense
		
		   *
		   *  Check to see if expenses have been allocated and the production period closed.
		   *
		   IF THISFORM.checkexp(lcbatch)
		      lctype  = SUBSTR(THISFORM.cclosedrun, 1, 1)
		      lcyear  = SUBSTR(THISFORM.cclosedrun, 2, 4)
		      lcrunno = SUBSTR(THISFORM.cclosedrun, 6, 3)
		      THISFORM.oMessage.Warning('Expenses from this bill have been processed during ' + IIF(lctype = 'J', 'JIB', 'Revenue') + ' Run: ' + ;
		         lcyear + '/' + lcrunno + ' This bill cannot be changed.')
		      llreturn = .F.
		      EXIT
		   ENDIF
		
		   IF EMPTY(appurchh.cvendorid)
		      THISFORM.oMessage.Warning('There must be a vendor associated with each bill.  Please enter a vendor for this bill.')
		      THISFORM.setnextcontrol(THISFORM.txtcvendname)
		      llreturn = .F.
		      EXIT
		   ENDIF
		
		   * Check to see if payments have been applied to this bill.
		   **  Need to check into this for QuickBooks **
		
		   WAIT WINDOW NOWAIT 'Saving Changes, Please Wait.....'
		
		   ** Do we have an active connection to QuicBooks?
		   IF m.goapp.oQB.lqbactive
		
		      IF m.goapp.oQB.oqbsm.IsErrorRecoveryInfo()
		         loresp     = m.goapp.oQB.oqbsm.geterrorrecoverystatus()
		         lcxml      = loresp.toxmlstring()
		         loresponse = loresp.responselist.getat(0)
		         IF loresponse.statuscode = 0
		            lcreq  = m.goapp.oQB.oqbsm.getsavedmsgsetrequest()
		            m.goapp.oQB.oqbsm.ClearErrorRecovery()
		         ELSE
		            MESSAGEBOX(lcxml, 48, 'Error Recovery Info')
		         ENDIF
		      ENDIF
		
		      * get a message set request object (version 1.1 xml)
		      lorequest = m.goapp.oQB.oQBRequest
		
		      * set the on error attribute for the request
		      lorequest.ATTRIBUTES.onerror = 1
		      lorequest.clearrequests()
		
		      IF NOT EMPTY(appurchh.ctxnid)
		         llDelete = .T.
		         IF appurchh.lNoQBPost
		            * Ask if the bill should be deleted from QB since it obviously was posted to QB earlier and
		            * not they're telling it not to post.
		            IF NOT THISFORM.oMessage.CONFIRM('This bill/credit has previously been saved to QuickBooks. Do you want to delete the original entry from QuickBooks?')
		               llDelete = .F.
		            ENDIF
		         ENDIF
		         IF llDebug
		            MESSAGEBOX('QBFC Version: ' + m.goapp.oQB.qbfcversion,0,'QBFC')
		         ENDIF
		         IF llDelete
		            * add a request to delete the bill
		            llReturn = m.goapp.oQB.DeleteTxnID(appurchh.ctxnid, 1)
		
		            *  Delete previous credit
		            IF NOT llreturn
		               llReturn = m.goApp.oQB.DeleteTxnID(appurchh.ctxnid, 24)
		            ENDIF
		         ENDIF
		      ENDIF
		
		      IF appurchh.lNoQBPost
		
		         MESSAGEBOX("This bill is marked not to post to QuickBooks."  + CHR(10) + CHR(10) + ;
		            "Nothing new will be posted to QuickBooks when this   "  + CHR(10) + ;
		            "bill is saved."                                  + CHR(10) + CHR(10) + ;
		            "However, when the Revenue/JIB run which processes" + CHR(10) + ;
		            "these expenses is closed and then posted to QuickBooks,"   + CHR(10) + ;
		            "the clearing entries will still be made for this"   + CHR(10) + ;
		            "bill. This may cause more expenses to be cleared" + CHR(10) + ;
		            "than what was originally posted for that run."      + CHR(10) + ;
		            "You may need to make an adjustment in QuickBooks"  + CHR(10) + ;
		            "to the Expense Clearing account to correct this." + CHR(10) + CHR(10) + ;
		            "Please see the 'Don't post to QuickBooks' topic"    + CHR(10) + ;
		            "in the Help file for more information.", 48, "QuickBooks No Post Notice")
		      ELSE
		         llreturn = m.goapp.oQB.PostBill(appurchh.cbatch)
		         IF NOT llreturn
		            MESSAGEBOX(m.goapp.oQB.cErrorMsg,48,'Enter Bills')
		            EXIT
		         ENDIF
		      ENDIF
		      llreturn = THISFORM.dmexpense()
		   ELSE
		      IF NOT appurchh.lNoQBPost
		         THISFORM.oMessage.severe('There is no active connection to QuickBooks.  Bills cannot be entered or changed.')
		         llreturn = .F.
		      ELSE
		         IF llreturn
		            llreturn = THISFORM.dmexpense()
		         ENDIF
		      ENDIF
		   ENDIF
		CATCH TO loError
		   DO errorlog WITH 'Beforeupdate', loError.LINENO, 'Enter Bills', loError.ERRORNO, loError.MESSAGE, '', loError
		   MESSAGEBOX('Unable to save the bill at this time. Check the System Log found under Other Reports for more information.', 16, 'Problem Encountered')
		   llreturn = .F.
		ENDTRY
		
		RETURN llreturn
		
		
		
		
		
		
		
		
		
	ENDPROC

	PROCEDURE Cmdcommandbuttoncustom1.Click
		do form memoedit with 'Vendor Bill Comments', 'appurchh.mnotes'
		thisform.lChanged = .T.
		ON KEY LABEL F10 _screen.activeform.Save()
		ON KEY LABEL CTRL+A _screen.activeform.New()
		ON KEY LABEL CTRL+D _screen.activeform.Delete()
		ON KEY LABEL CTRL+L _screen.activeform.List()
		
	ENDPROC

	PROCEDURE Cmdcommandbuttoncustom2.Click
		thisform.editdetail()	
	ENDPROC

	PROCEDURE Cmdcommandbuttoncustom3.Click
		THISFORM.cmdatamanager.deleterecord('Appurchd')
		thisform.lstWellBills.Requery()
		THISFORM.calctot()
		thisform.refreshall
		
	ENDPROC

	PROCEDURE cmdDocument.Click
		LOCAL llNewDoc
		LOCAL llReturn
		*:Global cDocLink, cfk, cpath
		
		llNewDoc = .t.
		TRY
		   swSELECT('documents')
		   SET ORDER TO cFK
		   m.cFK      = 'AP' + appurchh.cbatch
		   IF SEEK(m.cFK)
		      IF MESSAGEBOX('View the document? Choosing No will allow you to attach a new document.', 36, 'Attached Document') = 6
		         THISFORM.viewdocument(m.cFK)
		        llNewDoc = .f.
		      ENDIF
		   ENDIF 
		   IF llNewDoc
		      LOCAL lnx
		      THISFORM.oFileDialog.FileName = ''
		      llReturn                      = THISFORM.oFileDialog.openfile()
		      IF llReturn
		         m.cDocLink = 'AP'
		         m.cpath    = UPPER(THISFORM.oFileDialog.aFiles[1])
		         swSELECT('documents')
		         LOCATE FOR cFK == m.cFK
		         IF NOT FOUND()
		            INSERT INTO documents FROM MEMVAR
		         ELSE
		            REPLACE cpath WITH m.cpath
		         ENDIF
		         THISFORM.setchanged(.T., 'Documents')
		         m.gostatemanager.refreshall('Form')
		      ENDIF
		   ENDIF
		CATCH TO loError
		   MESSAGEBOX('Error: ' + loError.MESSAGE, 48, 'View Document',2)
		ENDTRY
	ENDPROC

	PROCEDURE cmdLookCat.Click
		LOCAL lcList
		PRIV llOK
		
		llOK = .T.
		
		IF USED('exptmp')
		   USE IN exptmp
		ENDIF
		IF USED('exptmp1')
		   USE IN exptmp1
		ENDIF
		
		IF THISFORM.flushcontrolbuffer()
		
		   llOK = .F.
		
		   SELECT cCatCode,cCateg,cExpClass,IIF(lAFEType,'X','') AS cAFEType, IIF(lJIBOnly,'X','') AS cJIBOnly  ;
		      FROM expcat INTO CURSOR exptmp READWRITE
		
		   SELECT exptmp
		   INDEX ON cCatCode           TAG cCatCode
		   INDEX ON cCateg             TAG cCateg
		   INDEX ON cExpClass+cCatCode TAG cExpClass
		   INDEX ON cAFEType           TAG cAFEType
		   INDEX ON cJIBOnly           TAG cJIBOnly
		
		   lcList = 'ccatcode\Code,ccateg\Category,cexpclass\Cls,cAFEType\AFE,cJIBOnly\JIB'
		
		   DO FORM '..\custom\picklist' WITH 'exptmp', lcList, THISFORM.txtcCatCode.VALUE, 5, .T., .T.
		
		   IF llOK
		      THISFORM.txtcCatCode.VALUE = exptmp.cCatCode
		      THISFORM.cboclass.VALUE = exptmp.cExpClass
		      THISFORM.cboclass.REFRESH()
		      THISFORM.txtcCatCode.REFRESH()
		   ENDIF
		ENDIF
		
		THISFORM.setnextcontrol(THISFORM.txtcCatCode)
		
		ON KEY LABEL F10 _SCREEN.ACTIVEFORM.SAVE()
		ON KEY LABEL CTRL+A _SCREEN.ACTIVEFORM.New()
		ON KEY LABEL CTRL+D _SCREEN.ACTIVEFORM.DELETE()
		ON KEY LABEL CTRL+L _SCREEN.ACTIVEFORM.LIST()
		
	ENDPROC

	PROCEDURE cmdLookOwner.Click
		LOCAL lcList
		PRIV llOK
		
		llOK = .T.
		
		lcList = 'cOwnerID\Owner ID,csortfield\Owner Name'
		
		IF USED('tempown')
		   USE IN tempown
		ENDIF
		IF USED('tempown1')
		   USE IN tempown1
		ENDIF
		
		IF NOT EMPTY(THISFORM.txtcunitno.VALUE)
		   SET SAFETY OFF
		   SELECT cOwnerID, cSortField FROM investor ;
		      WHERE cOwnerID IN (SELECT cOwnerID FROM wellinv WHERE cWellID = THISFORM.txtcunitno.VALUE) ;
		      INTO CURSOR tempown1 ;
		      ORDER BY cOwnerID
		
		   IF _TALLY > 0
		
		      USE DBF('tempown1') AGAIN IN 0 ALIAS tempown
		      SELECT tempown
		      INDEX ON cOwnerID TAG cOwnerID
		      INDEX ON cSortField TAG cSortField
		
		      DO FORM ..\CUSTOM\Picklist WITH 'tempown', lcList, THISFORM.txtcownerid.VALUE, 2, .T., .t.
		
		      IF llOK
		         THISFORM.txtcownerid.VALUE = tempown.cOwnerID
		         THISFORM.txtcownerid.REFRESH()
		      ENDIF
		
		      THISFORM.setnextcontrol(THIS.PARENT.txtcownerid)
		   ENDIF
		ENDIF
		
	ENDPROC

	PROCEDURE cmdLookOwner.When
		RETURN MDOWN()
	ENDPROC

	PROCEDURE cmdLookUnit.Click
		LOCAL lcList
		PRIV llOK
		
		llOK = .T.
		
		lcList = 'cwellid,cwellname,cgroup,cwellstat'
		
		*SELE wells
		*SET FILTER TO cwellstat <> 'I'
		
		DO FORM ..\Custom\PickList WITH 'Wells', lcList, thisform.txtcunitno.value, 4
		
		IF llOK
		   thisform.txtcUnitNo.value   = wells.cwellid
		   thisform.txtcWellName.value = wells.cwellname
		   thisform.txtcUnitNo.refresh()
		   thisform.txtcWellName.refresh()
		ENDIF   
		
		thisform.setnextcontrol(This.Parent.txtcUnitNo)
		
		ON KEY LABEL F10 _screen.activeform.Save()
		ON KEY LABEL CTRL+A _screen.activeform.New()
		ON KEY LABEL CTRL+D _screen.activeform.Delete()
		ON KEY LABEL CTRL+L _screen.activeform.List()
		
	ENDPROC

	PROCEDURE cmdRecur.Click
		LOCAL lcList
		PRIV llOK
		
		llOK = .T.
		
		IF USED('tempap1')
		   USE IN tempap1
		ENDIF
		
		IF USED('tempap')
		   USE IN tempap
		ENDIF
		
		SELECT appurech.cvendorid, ;
		   appurech.creference, ;
		   appurech.ninvtot, ;
		   vendor.cvendname, ;
		   appurech.cbatch ;
		   FROM appurech, vendor ;
		   WHERE appurech.cvendorid = vendor.cvendorid ;
		   INTO CURSOR tempap1 ;
		   ORDER BY appurech.cvendorid
		
		IF _TALLY > 0
		
		   USE DBF('tempap1') AGAIN IN 0 ALIAS tempap EXCL
		
		   SELECT tempap
		   INDEX ON cvendorid  TAG cvendorid
		   INDEX ON creference TAG creference
		   INDEX ON cvendname  TAG cvendname
		
		   lcList = 'cvendorid\Vendor ID,cvendname\Vendor Name,creference\Reference,ninvtot\Invoice Total'
		
		   DO FORM ..\CUSTOM\picklist WITH 'tempap', lcList, 'cbatch', 4, .T., .t.
		
		   IF llOK
		      
		      lcBatch = tempap.cbatch
		      SWSELECT('appurech')
		      SET ORDER TO cbatch
		      SEEK(lcBatch)
		      SCATTER MEMVAR
		      m.cbatch = appurchh.cbatch
		      jcBatch  = m.cbatch
		      m.nInvBal = m.ninvtot
		      m.nSubTotal = m.ninvtot
		      m.dInvDate  = DATE()
		      m.dDueDate  = DATE()
		      m.dPostDate = DATE()
		      m.dDiscDate = DATE()
		      SWSELECT('appurchh')
		      GATHER MEMVAR MEMO
		
		      SWSELECT('appurecd')
		      LOCATE FOR NOT EMPTY(cUnitNo) AND NOT EMPTY(ccatcode) AND cbatch = lcBatch
		      IF FOUND()  &&  Well expenses, so ask for the year and period to allocate them to
		         DO FORM apselprd TO lcYearPrd
		         lnLength = LEN(lcYearPrd)
		         IF lnLength < 6  &&  No valid year and period passed back, so assign it the current month and year
		            lcYear = padl(alltrim(str(month(date()))),2,'0')
		            lcPeriod = alltrim(str(year(date())))
		         ELSE
		            lcYear = LEFT(lcYearPrd,4)
		            lcPeriod = RIGHT(lcYearPrd,2)
		         ENDIF
		      ENDIF
		
		      SWSELECT('appurecd')
		      SCAN FOR cbatch = lcBatch
		         SCATTER MEMVAR
		         * Look for duplicates so no uniqueness errors occur
		         m.cidpurd = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Purchase Detail')
		         SET DELETED OFF
		         SELECT appurchd1
		         SET ORDER TO cidpurd
		         DO WHILE SEEK(m.cidpurd)
		            m.cidpurd = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Purchase Detail')
		         ENDDO
		         SET DELETED ON
		         m.cbatch = jcBatch
		         IF NOT EMPTY(m.cUnitNo) AND NOT EMPTY(m.ccatcode)  &&  Well expense, so plug in the year and period
		            m.cProdYear = lcYear
		            m.cProdPeriod = lcPeriod
		         ELSE
		            m.cProdYear = ''
		            m.cProdPeriod = ''
		         ENDIF
		         INSERT INTO appurchd FROM MEMVAR
		      ENDSCAN
		      SWSELECT('appurchh')
		      THISFORM.lstWellBills.Requery()
		      THISFORM.lstWellBills.Refresh()
		      THISFORM.REFRESH()
		      THISFORM.calctot()
		   ENDIF
		ELSE
		   THISFORM.omessage.DISPLAY('There are no recurring bills defined.')
		ENDIF
		
		ON KEY LABEL F10 _SCREEN.ACTIVEFORM.SAVE()
		ON KEY LABEL CTRL+A _SCREEN.ACTIVEFORM.New()
		ON KEY LABEL CTRL+D _SCREEN.ACTIVEFORM.DELETE()
		ON KEY LABEL CTRL+L _SCREEN.ACTIVEFORM.LIST()
		
	ENDPROC

	PROCEDURE cmdRecur.When
		RETURN thisform.cmdatamanager.isnew('Appurchh')
		
	ENDPROC

	PROCEDURE cmdVendor.Click
		LOCAL lcList
		PRIV llOK
		
		llOK = .T.
		
		lcList = 'cSortfield'
		
		DO FORM ..\CUSTOM\picklist WITH 'Vendor', lcList, ALLTRIM(thisform.txtcvendname.value), 1
		
		IF llOK
		   THISFORM.cmdatamanager.REPLACE('appurchh','cVendorId', Vendor.cVendorID)
		   THISFORM.txtcVendName.VALUE = vendor.cvendname
		   THISFORM.txtcVendName.REFRESH()
		   THISFORM.txtcVendorId.REFRESH
		   THISFORM.setstate()
		ENDIF
		
		THISFORM.setnextcontrol(THISFORM.txtcVendname)
		
		ON KEY LABEL F10 _screen.activeform.Save()
		ON KEY LABEL CTRL+A _screen.activeform.New()
		ON KEY LABEL CTRL+D _screen.activeform.Delete()
		ON KEY LABEL CTRL+L _screen.activeform.List()
		
	ENDPROC

	PROCEDURE lstWellBills.DblClick
		THISFORM.editdetail()
	ENDPROC

	PROCEDURE txtAccount.Valid
		IF EMPTY(thisform.txtcitemdesc.value)
		   thisform.txtcitemdesc.value = this.displayvalue
		endif
		DODEFAULT()   
	ENDPROC

	PROCEDURE txtafeno.GotFocus
		ON KEY LABEL F2 _SCREEN.ACTIVEFORM.cmdLookOwner.CLICK()
		
		DODEFAULT()
		
	ENDPROC

	PROCEDURE txtafeno.LostFocus
		IF (LASTKEY() = 13 OR LASTKEY() = 9) AND not mDown()  &&  Tab or enter, but not a mouseclick
		   THISFORM.adddetail1()
		ENDIF
		
		ON KEY LABEL F2 *
	ENDPROC

	PROCEDURE txtafeno.When
		RETURN thisform.lValidWell
	ENDPROC

	PROCEDURE txtcCatCode.afterchange
		thisform.txtcitemdesc.set('value',expcat.ccateg)
	ENDPROC

	PROCEDURE txtcCatCode.GotFocus
		ON KEY LABEL F2 _screen.activeform.cmdLookCat.Click()
		DODEFAULT()
	ENDPROC

	PROCEDURE txtcCatCode.LostFocus
		LOCAL odialog, lnbbl, lcdisp, lnLastKey
		ON KEY LABEL f2 *
		lnLastKey = LASTKEY()  &&  Store the last key, so if it's a tab or enter, we can set the cursor to the right field after returning from the brine lookup
		
		WITH THISFORM
		
		   IF 'SALT'  $ UPPER(.txtcitemdesc.VALUE) OR ;
		      'BRINE' $ UPPER(.txtcitemdesc.VALUE) OR ;
		      'WATER' $ UPPER(.txtcitemdesc.VALUE)
		      THISFORM.lnoclearext = .T.
		      *   .txtnSaltBBL.VALUE = thisform.oMessage.GetText('Enter the number of BBLs of water.  (4 digits max)','Amount of Water in BBL')
		      IF m.goApp.lPARpts
		         m.odialog = CREATEOBJECT('frmWaterDialog',.txtnsaltbbl.VALUE,.txtcdisperm.VALUE,.txtcdispcode.VALUE,.txtWasteCode.VALUE)
		         m.odialog.SHOW()
		         lnbbl   = m.odialog.txtwaterbbl.VALUE
		         lcperm  = m.odialog.cbodisposal.VALUE
		         lcdisp  = m.odialog.cbodispcode.VALUE
		         lcWaste = m.odialog.cbowastecode.value
		         m.odialog.RELEASE()
		         .txtnsaltbbl.VALUE = lnbbl
		         .txtcdisperm.VALUE = lcperm
		         .txtWasteCode.value = lcWaste
		         .txtcdispcode.value = lcdisp
		      ELSE
		         .txtnSaltBBL.VALUE = thisform.oMessage.GetText('Enter the number of BBLs of water.  (5 digits max)','Amount of Water in BBL')
		         IF VARTYPE(.txtnsaltbbl.value) <> 'N'
		            .txtnsaltbbl.set('value',VAL(.txtnsaltbbl.value))
		         ENDIF 
		         .txtcdispcode.VALUE = ''
		         .txtcdisperm.value = ''
		         .txtwastecode.value = ''
		      ENDIF
		      IF lnLastKey = 13 OR lnLastKey = 9  &&  Tab or enter, so set the cursor to the cboClass control
		         thisform.setnextcontrol(thisform.cboClass)
		      ENDIF 
		   ENDIF
		ENDWITH
		
		DODEFAULT()
		
	ENDPROC

	PROCEDURE txtcCatCode.Valid
		DODEFAULT()
		SELE afeopt
		GO TOP
		llAllocExp = lAllocExp
		
		IF NOT EMPTY(THIS.VALUE)
		   SWSELECT('expcat')
		   SET ORDER TO cCatCode
		   IF SEEK(THIS.VALUE)
		      THISFORM.txtcitemdesc.VALUE = expcat.ccateg
		      THISFORM.txtcitemdesc.REFRESH()
		      thisform.cboclass.value = expcat.cexpclass
		      IF EMPTY(cListID)
		         thisform.omessage.warning('The expense category files need to be synchronized with QuickBooks before this category can be used.')
		         RETURN .F.
		      ENDIF   
		   ENDIF
		   thisform.setaccount()   
		ENDIF
		
		
	ENDPROC

	PROCEDURE txtcCatCode.When
		RETURN thisform.lValidWell
	ENDPROC

	PROCEDURE txtCinvnum.LostFocus
		*
		*  Check for duplicate invoice numbers
		*
		IF THISFORM.cmdatamanager.isnew('Appurchh')
		   SELECT appurchh1
		   SET ORDER TO vendinv
		   IF SEEK(THISFORM.txtcVendorID.VALUE+THISFORM.txtcInvNum.VALUE) AND NOT EMPTY(thisform.txtcinvnum.Value)  &&  Only ask if it's not blank
		      IF NOT THISFORM.oMessage.CONFIRM('This appears to be a duplicate invoice.  Do you want to continue?')
		         thisform.SetNextControl(thisform.txtcInvNum)
		      ENDIF
		   ENDIF
		ENDIF
		SWSELECT('appurchh')
		DODEFAULT()
	ENDPROC

	PROCEDURE txtcOwnerID.GotFocus
		ON KEY LABEL F2 _SCREEN.ACTIVEFORM.cmdLookOwner.CLICK()
		
		DODEFAULT()
		
	ENDPROC

	PROCEDURE txtcOwnerID.When
		RETURN thisform.lValidWell
	ENDPROC

	PROCEDURE txtcProdPeriod.Valid
		IF NOT EMPTY(THIS.VALUE)
		   THIS.VALUE = PADL(ALLTRIM(THIS.VALUE),2,'0')
		   IF NOT BETWEEN(THIS.VALUE,'01','12')
		      THISFORM.omessage.warning('Please enter a valid production period. The period must be between 01 and 12')
		      RETURN 0
		   ENDIF
		   THIS.REFRESH()
		   if empty (thisform.txtcprodyear.value)
		      THISFORM.txtcProdYear.SET('value',ALLT(STR(YEAR(DATE()))))
		   endif   
		else
		   THISFORM.txtcProdYear.SET('value','')
		ENDIF
		
	ENDPROC

	PROCEDURE txtcProdPeriod.When
		RETURN thisform.lValidWell
	ENDPROC

	PROCEDURE txtcProdYear.Valid
		IF NOT EMPTY(THIS.VALUE)
		   IF NOT BETWEEN(THIS.VALUE,'1980','2030')
		      WAIT WIND NOWAIT 'Invalid production year entered. Please correct'
		      RETURN 0
		   ENDIF
		   IF EMPTY(THISFORM.txtcProdPeriod.VALUE)
		      THIS.SET('value','')
		   ENDIF
		ELSE
		   IF NOT EMPTY(THISFORM.txtcProdPeriod.VALUE)
		      THIS.SET('value',ALLTRIM(STR(YEAR(DATE()))))
		   ENDIF
		ENDIF
		
		lcDeck = thisform.oWellInv.DOIDeckNameLookup(this.Value, thisform.txtcprodperiod.value, thisform.txtcunitNo.Value) 
		thisform.cboDeck.Requery(lcDeck)
		
		
	ENDPROC

	PROCEDURE txtcProdYear.When
		RETURN thisform.lValidWell
	ENDPROC

	PROCEDURE txtcUnitNo.afterchange
		thisform.txtcwellname.set('value',wells.cwellname)
	ENDPROC

	PROCEDURE txtcUnitNo.GotFocus
		ON KEY LABEL F2 _screen.activeform.cmdLookUnit.Click()
		DODEFAULT()
	ENDPROC

	PROCEDURE txtcUnitNo.InteractiveChange
		IF DODEFAULT()
		   SWSELECT('wells')
		   LOCATE FOR cwellid == this.Value
		   IF FOUND()
		      thisform.txtcWellName.set('value',wells.cWellName)
		   ELSE
		      thisform.txtcWellName.set('value','')
		   ENDIF 
		ENDIF    
	ENDPROC

	PROCEDURE txtcUnitNo.LostFocus
		ON KEY LABEL F2 *
		DODEFAULT()
		
	ENDPROC

	PROCEDURE txtcUnitNo.Valid
		LOCAL lnCount
		IF NOT EMPTY(THIS.VALUE)
		   IF this.Value = 'ALLOC '
		      IF LEN(ALLTRIM(THIS.VALUE)) > 5
		         lcGroup = SUBSTR(THIS.VALUE,6,2)
		         swselect('groups')
		         LOCATE FOR cGroup = lcGroup
		         IF FOUND()
		            DO FORM dmselwells WITH lcGroup
		         ELSE
		            DO FORM dmselwells WITH '**'
		         ENDIF
		      ELSE
		         DO FORM dmselwells WITH '**'
		      ENDIF
		      SELECT wellsel
		      COUNT FOR NOT DELETED() TO lnCount
		      IF lnCount > 0
		         THISFORM.lValidWell = .T.
		         SELECT wellsel
		         SCAN
		            SWSELECT('wells')
		            SET ORDER TO cwellid
		            IF SEEK(wellsel.cwellid) AND INLIST(wells.cWellStat,'I','S','P','N','T','D')  &&  All non-active statuses except investment
		               THISFORM.omessage.warning('One or more of the wells chosen to allocate are not active.  Those expenses will be sent to the allocation file.')
		            ENDIF
		         ENDSCAN
		         SELECT wellsel
		      ELSE
		         THISFORM.lValidWell = .F.
		      ENDIF
		      THISFORM.setnextcontrol(THISFORM.txtcCatCode)
		   ELSE
		      SWSELECT('wells')
		      SET ORDER TO cwellid
		      IF SEEK(THIS.VALUE)
		         IF EMPTY(ALLT(wells.clistid))
		            IF THISFORM.omessage.CONFIRM('The wells file needs to be synchronized with QuickBooks before this well can be used. Synchronize now?')
		               m.goapp.oQB.sync_wells()
		               SELE wells
		               SET ORDER TO cwellid
		               SEEK(THIS.VALUE)
		            ELSE
		               RETURN .F.
		            ENDIF
		         ENDIF
		         IF INLIST(wells.cWellStat, 'F','A','V')   && AFE, Active, Investment
		            THISFORM.lValidWell = .T.
		         ELSE
		            *
		            *  The well exists in the wells table but did not have a
		            *  well status of 'F' - AFE; 'A' - Active or 'V' - Investment
		            *  Expenses cannot be allocated to wells without one of the
		            *  above status codes
		            *
		            THISFORM.lValidWell = .T.
		
		            IF NOT INLIST(wells.cWellStat,'A','V')
		               THISFORM.omessage.warning('This well is not an active well. Its expenses will be sent to the allocation file.')
		            ENDIF
		         ENDIF
		         thisform.cbodeck.Requery('',thisform.txtcprodYear.value,thisform.txtcprodPeriod.Value)
		      ELSE
		         THISFORM.omessage.warning('The Well ID entered is not a valid well ID.  Please reenter.')
		         RETURN 0
		      ENDIF
		   ENDIF
		ELSE
		   IF NOT MDOWN()
		      IF THISFORM.lWellRequired
		         THISFORM.omessage.DISPLAY('A valid well ID is required when using this account no.')
		         RETURN 0
		      ENDIF
		   ENDIF
		   THISFORM.lValidWell = .F.
		   THIS.PARENT.txtcWellName.SET('value','')
		ENDIF
		DODEFAULT()
		
	ENDPROC

	PROCEDURE txtCvendname.InteractiveChange
		IF DODEFAULT()
		   thisform.cmdatamanager.replace('appurchh','cvendorid',vendor.cvendorid)
		ENDIF 
	ENDPROC

	PROCEDURE txtCvendname.LostFocus
		ON KEY LABEL F2 *
		DODEFAULT()
	ENDPROC

	PROCEDURE txtCvendname.Valid
		IF DODEFAULT()
		   SELE vendor
		   LOCATE FOR cvendorid = appurchh.cvendorid
		   IF FOUND()
		      IF EMPTY(ALLT(vendor.clistid))
		         IF THISFORM.omessage.CONFIRM('The vendor file needs to be synchronized with QuickBooks before this vendor can be used. Synchronize now?')
		            m.goapp.oQB.sync_vendors()
		         ELSE
		            RETURN .F.
		         ENDIF
		      ENDIF
		      IF THISFORM.cmdatamanager.isnew('Appurchh')
		         IF NOT EMPTY(vendor.cidterm)
		            IF appurchh.cidterm <> vendor.cidterm
		               THISFORM.cmdatamanager.REPLACE('Appurchh','Cidterm',vendor.cidterm)
		               THISFORM.cboterms.VALUE = vendor.cidterm
		            ENDIF
		         ENDIF
		      ENDIF
		   ELSE
		      IF NOT EMPTY(THIS.VALUE)
		         WAIT WIND NOWAIT 'Invalid vendor entered.'
		         thisform.txtcvendname.set('value','')
		         return 0
		      ELSE
		         WAIT WIND NOWAIT 'Please fill in the vendor for this bill.'
		      ENDIF
		   ENDIF
		ENDIF
		
	ENDPROC

	PROCEDURE txtCvendname.When
		ON KEY LABEL F2 _screen.activeform.cmdvendor.click()
		DODEFAULT()
	ENDPROC

	PROCEDURE txtcVendorID.GotFocus
		ON KEY LABEL F2 _screen.activeform.cmdVendor.Click()
	ENDPROC

	PROCEDURE txtcVendorID.LostFocus
		ON KEY LABEL F2 *
		
		SWSELECT('vendor')
		SET ORDER TO cvendorid
		IF SEEK(this.value)
		   thisform.txtcVendName.set('value',vendor.cvendname)
		ENDIF   
		
	ENDPROC

	PROCEDURE txtcWellName.When
		RETURN .F.
	ENDPROC

	PROCEDURE txtDdiscDate.LostFocus
		IF appurchh.dPostDate <> this.value
		   thisform.cmdatamanager.replace('Appurchh','Dpostdate',this.value)
		ENDIF   
		
		*  Only validate the terms, which will affect the  due/discount dates if they're not empty
		IF NOT EMPTY(thisform.cboTerms.Value)
		   thisform.valterms()
		ENDIF
		
		DODEFAULT()
		
	ENDPROC

	PROCEDURE txtDDueDate.LostFocus
		IF appurchh.dPostDate <> this.value
		   thisform.cmdatamanager.replace('Appurchh','Dpostdate',this.value)
		ENDIF   
		
		*  Only validate the terms, which will affect the  due/discount dates if they're not empty
		IF NOT EMPTY(thisform.cboTerms.Value)
		   thisform.valterms()
		ENDIF
		
		DODEFAULT()
		
	ENDPROC

	PROCEDURE txtdInvDate.LostFocus
		IF appurchh.dPostDate <> this.value
		   thisform.cmdatamanager.replace('Appurchh','Dpostdate',this.value)
		ENDIF   
		thisform.valterms()
		DODEFAULT()
		
	ENDPROC

	PROCEDURE txtnExtension.GotFocus
		thisform.cconfirmset = set('confirm')
		set confirm on
		dodefault()
	ENDPROC

	PROCEDURE txtnExtension.LostFocus
		lcConfirm = THISFORM.cConfirmSet
		SET CONFIRM &lcConfirm
		
		IF NOT THISFORM.lvalidwell
		   *  Check to make sure the following keys were not pressed
		   *  F1 			= 28
		   *  Backspace 	= 127
		   *  Shift-Tab		= 15
		   *  Left Arrow	= 19
		   *  Up Arrow		= 5
		   IF LASTKEY() <> 28 AND ;
		         LASTKEY() <> 127 AND ;
		         LASTKEY() <> 15 AND ;
		         LASTKEY() <> 19 AND ;
		         LASTKEY() <> 5
		      THISFORM.adddetail1()
		   ENDIF
		ENDIF
		
	ENDPROC

	PROCEDURE txtNinvtot.When
		DODEFAULT()
		RETURN .F.
	ENDPROC

ENDDEFINE
