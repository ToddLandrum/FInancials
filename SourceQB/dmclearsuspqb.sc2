*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="dmclearsuspqb.scx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="1" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Cursor1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor6" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor8" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor10" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor12" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor13" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor7" UniqueID="" Timestamp="" />

	AutoOpenTables = .F.
	DataSource = .NULL.
	Height = 727
	Left = 40
	Name = "Dataenvironment"
	Top = 235
	Width = 520

	ADD OBJECT 'Cursor1' AS cursor WITH ;
		Alias = "investor", ;
		CursorSource = "investor", ;
		Database = ..\qbdata\appdata.dbc, ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor1", ;
		Top = 20, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor10' AS cursor WITH ;
		Alias = "options", ;
		CursorSource = "options", ;
		Database = ..\qbdata\appdata.dbc, ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor10", ;
		Top = 380, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor12' AS cursor WITH ;
		Alias = "disbhist", ;
		BufferModeOverride = 5, ;
		CursorSource = "disbhist", ;
		Database = ..\qbdata\appdata.dbc, ;
		Height = 90, ;
		Left = 290, ;
		Name = "Cursor12", ;
		Top = 380, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor13' AS cursor WITH ;
		Alias = "ownpcts", ;
		BufferModeOverride = 5, ;
		CursorSource = "ownpcts", ;
		Database = ..\qbdata\appdata.dbc, ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor13", ;
		Top = 500, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor2' AS cursor WITH ;
		Alias = "suspense", ;
		BufferModeOverride = 5, ;
		CursorSource = "suspense", ;
		Database = ..\qbdata\appdata.dbc, ;
		Height = 90, ;
		Left = 150, ;
		Name = "Cursor2", ;
		Top = 20, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor3' AS cursor WITH ;
		Alias = "wells", ;
		CursorSource = "wells", ;
		Database = ..\qbdata\appdata.dbc, ;
		Height = 90, ;
		Left = 290, ;
		Name = "Cursor3", ;
		Top = 20, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor4' AS cursor WITH ;
		Alias = "sysctl", ;
		CursorSource = "sysctl", ;
		Database = ..\qbdata\appdata.dbc, ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor4", ;
		Top = 140, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor5' AS cursor WITH ;
		Alias = "suspense1", ;
		CursorSource = "suspense", ;
		Database = ..\qbdata\appdata.dbc, ;
		Height = 90, ;
		Left = 152, ;
		Name = "Cursor5", ;
		Top = 135, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor6' AS cursor WITH ;
		Alias = "glopt", ;
		CursorSource = "glopt", ;
		Database = ..\qbdata\appdata.dbc, ;
		Height = 90, ;
		Left = 290, ;
		Name = "Cursor6", ;
		Top = 140, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor7' AS cursor WITH ;
		Alias = "qbpost", ;
		BufferModeOverride = 5, ;
		CursorSource = "qbpost", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 171, ;
		Name = "Cursor7", ;
		Top = 408, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor8' AS cursor WITH ;
		Alias = "checks", ;
		CursorSource = "checks", ;
		Database = ..\qbdata\appdata.dbc, ;
		Height = 90, ;
		Left = 150, ;
		Name = "Cursor8", ;
		Top = 260, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

ENDDEFINE

DEFINE CLASS formdmclearsusp AS frmformcustom OF "..\custom\cforms.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="txtcOwnName" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdLookOwner" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcOwnerID" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcWellName" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdLookWell" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcWellID" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblOwner" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblWell" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chklSingle" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdProcess" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdCancel" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chklCheck" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Glmaint" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtdDate" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: process
		*p: lqberror
	*</DefinedPropArrayMethod>

	Caption = "Clear Owner Suspense"
	DoCreate = .T.
	Height = 249
	HelpContextID = 136
	lcloseonescape = .T.
	lqberror = .F.
	Name = "formdmclearsusp"
	Width = 383
	Mwresize1.lblHighLight.Name = "lblHighLight"
	Mwresize1.lblShading.Name = "lblShading"
	Mwresize1.Name = "Mwresize1"

	ADD OBJECT 'chklCheck' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		AutoSize = .T., ;
		Caption = "Create a Check if Balance is Positive", ;
		Left = 98, ;
		Name = "chklCheck", ;
		TabIndex = 13, ;
		Top = 166, ;
		Value = .F.
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chklSingle' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Clear Balance for a Single Well", ;
		Left = 90, ;
		Name = "chklSingle", ;
		TabIndex = 6, ;
		Top = 69, ;
		Value = .F.
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'cmdCancel' AS cmdcommandbuttoncustom WITH ;
		Caption = "E\<xit", ;
		Height = 36, ;
		Left = 198, ;
		Name = "cmdCancel", ;
		TabIndex = 15, ;
		Top = 199, ;
		Width = 75
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdLookOwner' AS cmdcommandbuttoncustom WITH ;
		Caption = "...", ;
		FontBold = .T., ;
		FontSize = 9, ;
		Height = 20, ;
		Left = 66, ;
		Name = "cmdLookOwner", ;
		TabIndex = 2, ;
		TabStop = .F., ;
		Top = 36, ;
		Width = 20, ;
		ZOrderSet = 47
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdLookWell' AS cmdcommandbuttoncustom WITH ;
		Caption = "...", ;
		FontBold = .T., ;
		FontSize = 9, ;
		Height = 20, ;
		Left = 66, ;
		Name = "cmdLookWell", ;
		TabIndex = 8, ;
		TabStop = .F., ;
		Top = 96, ;
		Visible = .F., ;
		Width = 20, ;
		ZOrderSet = 47
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdProcess' AS cmdcommandbuttoncustom WITH ;
		Caption = "\<Process", ;
		Height = 36, ;
		Left = 110, ;
		Name = "cmdProcess", ;
		TabIndex = 14, ;
		Top = 199, ;
		Width = 75
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'Glmaint' AS glmaint WITH ;
		Height = 24, ;
		Left = 12, ;
		Name = "Glmaint", ;
		Top = 192, ;
		Width = 24
		*< END OBJECT: ClassLib="..\custom\swgl.vcx" BaseClass="custom" />

	ADD OBJECT 'Lbllabelcustom1' AS lbllabelcustom WITH ;
		Caption = "Date to Put on History Entries/Check:", ;
		Left = 59, ;
		Name = "Lbllabelcustom1", ;
		TabIndex = 11, ;
		Top = 138
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblOwner' AS lbltextcustom WITH ;
		Caption = "Owner:", ;
		Left = 17, ;
		Name = "lblOwner", ;
		TabIndex = 5, ;
		Top = 38
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblWell' AS lbltextcustom WITH ;
		Caption = " Well:", ;
		Left = 16, ;
		Name = "lblWell", ;
		TabIndex = 7, ;
		Top = 96, ;
		Visible = .F.
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'txtcOwnerID' AS txtquickfill WITH ;
		clistexpression = investor.cownerid, ;
		clistworkarea = investor, ;
		Height = 20, ;
		Left = 90, ;
		Name = "txtcOwnerID", ;
		TabIndex = 3, ;
		Top = 36, ;
		Width = 76
		*< END OBJECT: ClassLib="..\custom\cgadget.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcOwnName' AS txttextboxcustom WITH ;
		BackColor = 212,208,200, ;
		Height = 20, ;
		Left = 174, ;
		Name = "txtcOwnName", ;
		TabIndex = 4, ;
		Top = 36, ;
		Width = 191
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcWellID' AS txtquickfill WITH ;
		clistexpression = wells.cwellid, ;
		clistworkarea = wells, ;
		Height = 20, ;
		Left = 90, ;
		Name = "txtcWellID", ;
		TabIndex = 9, ;
		Top = 96, ;
		Visible = .F., ;
		Width = 76
		*< END OBJECT: ClassLib="..\custom\cgadget.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcWellName' AS txttextboxcustom WITH ;
		BackColor = 212,208,200, ;
		Height = 20, ;
		Left = 174, ;
		Name = "txtcWellName", ;
		TabIndex = 10, ;
		Top = 96, ;
		Visible = .F., ;
		Width = 191
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtdDate' AS dpk WITH ;
		ControlSource = "", ;
		Height = 20, ;
		Left = 241, ;
		Name = "txtdDate", ;
		TabIndex = 12, ;
		Top = 135, ;
		Visible = .T., ;
		Width = 75
		*< END OBJECT: ClassLib="..\custom\swdate.vcx" BaseClass="textbox" />
	
	PROCEDURE process
		LOCAL lcidsusa, lcOwnerID, lcWellID, llSingle, llFound, llReturn, lnTotal, ldDate, llCheck
		LOCAL lcScan, cidsysctl
		
		lcOwnerID = THISFORM.txtcOwnerID.VALUE
		lcOwnName = THISFORM.txtcOwnName.VALUE
		lcWellID  = THISFORM.txtcWellID.VALUE
		llSingle  = THISFORM.chklSingle.VALUE
		llFound = .F.
		ldDate = THISFORM.txtdDate.VALUE
		llCheck = THISFORM.chklCheck.VALUE
		lnTotal = 0  &&  Running balance, to determine whether a check needs to be created for them
		lcRunYear = TRANSFORM(YEAR(ldDate))
		oRegistry = findglobalobject('cmRegistry')
		
		IF llSingle  &&  Scan for a single well, so set the scan parameter appropriately
		   lcScan = 'cOwnerID == lcOwnerID and cWellID == lcWellID'
		ELSE
		   lcScan = 'cOwnerID == lcOwnerID'
		ENDIF
		
		*  Make sure the period or year isn't closed
		IF NOT THISFORM.glmaint.CheckPeriod(ldDate)
		   THISFORM.omessage.warning('Unable to clear suspense. Either the fiscal year or period represented by this date has been closed.')
		   RETURN .F.
		ENDIF
		
		* 
		* If we're supposed to create a check for positive balances make sure that
		* the link to QB is active. If it isn't don't allow the suspense to be cleared
		* if it is positive.
		*
		
		swSELECT('suspense',.T.)
		SCAN FOR &lcScan
		   lnTotal = lnTotal + nNetCheck  &&  Running total for the entries being transferred
		ENDSCAN
		
		IF llCheck
		   IF lnTotal > 0 AND NOT m.goApp.oQB.lQBActive
		      THISFORM.omessage.warning('The QuickBooks link is not active. A check cannot be cannot be created until the connection is active. No suspense cleared.')
		      RETURN .F.
		   ENDIF
		ENDIF
		
		swSELECT('suspense',.T.)
		SCAN FOR &lcScan
		   SCATTER MEMVAR
		   m.hDate = ldDate
		
		   m.ciddisb = oRegistry.IncrementCounter('%Shared.Counters.Owner History')  &&  Make sure new primary key in disbhist is unique
		
		   swSELECT('disbhist',.T.)
		   SET ORDER TO ciddisb
		   SET DELE OFF
		   DO WHILE SEEK(m.ciddisb)
		      m.ciddisb = oRegistry.IncrementCounter('%Shared.Counters.Owner History')
		   ENDDO
		   swSELECT('ownpcts',.T.)  &&  Check ownpcts, too, since we're updating that, too
		   SET ORDER TO ciddisb
		   DO WHILE SEEK(m.ciddisb)
		      m.ciddisb = oRegistry.IncrementCounter('%Shared.Counters.Owner History')
		   ENDDO
		   SET DELE ON
		
		* Changed to make the run be 9999 when added back to owner history
		   m.nRunNo = 9999
		   m.cRunYear = lcRunYear
		   INSERT INTO disbhist FROM MEMVAR
		   INSERT INTO ownpcts FROM MEMVAR
		
		   swSELECT('suspense')
		   DELETE NEXT 1
		
		ENDSCAN
		
		* Add the cleared suspense run if it'snot there
		SWSELECT('sysctl')
		   LOCATE FOR nrunno=9999 AND crunYear = lcRunYear
		   IF NOT FOUND()
		      m.cidsysctl = oRegistry.IncrementCounter('%Shared.Counters.Sysctl')
		      m.cRunYear  = lcRunYear
		      m.nRunno    = 9999
		      m.ddateclose  = lddate
		      m.cTimeClose  = TIME()
		      m.dacctdate   = lddate
		      m.dpostdate   = lddate
		      m.drevdate    = lddate
		      m.dexpdate    = lddate
		      m.cTypeClose  = 'R'
		      m.cGroup      = '00'
		      m.cyear       = lcRunYear
		      m.cperiod     = '12'
		      m.lDisbman    = .T.
		      m.cversion    = STRTRAN(m.goapp.cFileVersion,'.','')
		      INSERT INTO sysctl FROM memvar
		      TABLEUPDATE(.T.,.T.,'Sysctl')
		   ENDIF 
		* Setup the fields for qbpost so we can unpost this allocation if part fails
		m.cidsysctl = oRegistry.IncrementCounter('%Shared.Counters.Batch')
		
		IF lnTotal > 0  &&  Positive, so create a check, if needed
		   IF llCheck  &&  Create a check
		      THISFORM.omessage.DISPLAY('This will create a check for $' + ALLTRIM(STR(lnTotal,10,2)) + ' for owner ' + ALLT(lcOwnerID) + ' - ' + ALLT(lcOwnName) + '.')
		
		      *  Get the cash account
		      swSELECT('options')
		      GO TOP
		      m.cdisbacct = cdisbacct
		      m.cMinAcct  = cMinAcct
		      IF EMPTY(ALLT(m.cdisbacct))
		         m.cdisbacct = glopt.cSuspense
		      ENDIF
		
		      swSELECT('investor')
		      LOCATE FOR cownerid = lcOwnerID  &&  Lookup QB List ID from owner file
		      lcOwnerListID = investor.cListID
		
		      m.cSource    = 'DM'
		      m.dCheckDate = DATE()
		      m.cPayee     = lcOwnName
		      m.cAcctno    = m.cdisbacct
		      m.cId        = lcOwnerID
		      m.cBatch     = oRegistry.IncrementCounter('%Shared.Counters.Batch')
		      m.nAmount    = lnTotal
		      m.cidchec    = oRegistry.IncrementCounter('%Shared.Counters.Checks')
		      m.centrytype = 'C'
		      m.cidtype    = 'I'
		      m.ccheckno   = ''
		      m.lPrinted   = .T.
		
		      INSERT INTO checks FROM MEMVAR
		
		      IF m.goApp.oQB.lQBActive
		         *  Setup the journal add request
		         m.goApp.oQB.oqbrequest.clearrequests()
		         locheckadd = m.goApp.oQB.oqbrequest.appendcheckaddrq()
		         locheckadd.txndate.setvalue(DATE())
		         *      locheckadd.MEMO.setvalue('** DO NOT CHANGE OR DELETE THIS ENTRY IN QUICKBOOKS **')
		
		         locheckadd.payeeentityref.listid.setvalue(lcOwnerListID)
		         locheckadd.accountref.listid.setvalue(m.cdisbacct)
		         locheckadd.istobeprinted.setvalue(1)
		         *      locheckadd.refnumber.setvalue('')
		
		         loexpenseline = locheckadd.expenselineaddlist.APPEND
		         loexpenseline.MEMO.setvalue('Owner Suspense Ck: '+lcOwnerID)
		         loexpenseline.amount.setvalue(ABS(ROUND(lnTotal,2)))
		         loexpenseline.accountref.listid.setvalue(m.cMinAcct)
		
		         lcxml = m.goApp.oQB.oqbrequest.toxmlstring()
		         loresponse = m.goApp.oQB.oqbsm.dorequests(m.goApp.oQB.oqbrequest)
		         loaddresp  = loresponse.responselist.getat(0)
		
		         IF loaddresp.statuscode <> 0
		            IF 'object' $ LOWER(loaddresp.statusmessage)
		               lcListID = SUBSTR(loaddresp.statusmessage,AT('"',loaddresp.statusmessage)+1,AT('"',loaddresp.statusmessage,2)-(AT('"',loaddresp.statusmessage)+1))
		               llResult = m.goApp.oQB.QBListID(lcListID, THISFORM.DATASESSIONID)
		               IF llResult
		                  SELECT QBListID
		                  IF QBListID.ctype = 'Account'
		                     lcMessage = 'The ' + ALLTRIM(QBListID.cdescription) + ' specified in the ' + ;
		                        'QB Posting Preferences was not found in QuickBooks. Please select a new account ' + ;
		                        'and try to clear the suspense again.'
		                  ELSE
		                     lcMessage = 'The ' + ALLTRIM(QBListID.cdescription) + ' was not found in QuickBooks. ' + ;
		                        'Please synchronize the ' + ALLTRIM(QBListID.ctype) + ' file and try to clear the suspense again.'
		                  ENDIF
		                  THISFORM.omessage.severe(lcMessage)
		               ELSE
		                  THISFORM.omessage.severe(loaddresp.statusmessage)
		               ENDIF
		            ELSE
		               THISFORM.omessage.severe(loaddresp.statusmessage)
		            ENDIF
		            m.goApp.oQB.csysctlkey = m.cidsysctl
		            m.goApp.oQB.QBUnpostRev()
		            m.goApp.oQB.oqbsm.ClearErrorRecovery()
		            THIS.lqberror = .T.
		            RETURN .F.
		         ELSE
		            lonewchk = loaddresp.DETAIL
		            m.ctxnid  = lonewchk.txnid.getvalue()
		            SELE checks
		            LOCATE FOR cidchec = m.cidchec
		            REPL ctxnid WITH m.ctxnid
		            swSELECT('qbpost',.T.)
		            LOCATE FOR cidsysctl = m.cidsysctl AND ntype = 13
		            IF NOT FOUND()
		               m.ntype = 13
		               m.mtxnids = m.ctxnid
		               INSERT INTO qbpost FROM MEMVAR
		            ELSE
		               IF NOT EMPTY(ALLT(mtxnids))
		                  REPL mtxnids WITH ALLT(mtxnids)+CHR(13)+m.ctxnid
		               ELSE
		                  REPL mtxnids WITH m.ctxnid
		               ENDIF
		            ENDIF
		            m.goApp.oQB.oqbrequest.clearrequests()
		            m.goApp.oQB.oqbsm.ClearErrorRecovery()
		         ENDIF
		      ENDIF
		   ELSE
		      MESSAGEBOX('No journal entry was created during the clearing process.' + ;
		                 ' A manual journal entry will need to be made to reflect this clearing.', 16, 'Clear Owner Suspense')   
		   ENDIF
		ELSE
		   MESSAGEBOX('No journal entry or check was created during the clearing process since the amount was negative.' + ;
		                 ' A manual journal entry will need to be made to reflect this clearing.', 16, 'Clear Owner Suspense')
		ENDIF
		
		* Commit the changes
		BEGIN TRANSACTION
		llReturn = TABLEUPDATE(.T.,.T.,'suspense')
		IF llReturn
		   llReturn = TABLEUPDATE(.T.,.T.,'disbhist')
		   IF llReturn
		      llReturn = TABLEUPDATE(.T.,.T.,'ownpcts')
		      IF llReturn
		         llReturn = TABLEUPDATE(.T.,.T.,'checks')
		         IF llReturn
		            llReturn = TABLEUPDATE(.T.,.T.,'qbpost')
		         ENDIF
		      ENDIF
		   ENDIF
		ENDIF
		* If all the tableupdates were successful
		* end the transaction
		IF llReturn
		   END TRANSACTION
		ELSE
		   * There was at least one tableupdate that wasn't
		   * successful, so back everything out
		   ROLLBACK
		   m.goApp.oQB.csysctlkey = m.cidsysctl
		   m.goApp.oQB.QBUnpostRev()
		ENDIF
		
		THISFORM.txtcOwnerID.SET('value','')
		THISFORM.txtcOwnName.SET('value','')
		THISFORM.txtcWellID.SET('value','')
		THISFORM.txtcwellname.SET('value','')
		
		IF llCheck  &&  If we're creating a check, they already know the amount being cleared
		   THISFORM.omessage.DISPLAY('Suspense balance was cleared successfully.')
		ELSE
		   THISFORM.omessage.DISPLAY('Suspense balance of ' + IIF(lnTotal < 0,'-','') + '$' + ALLTRIM(STR(ABS(lnTotal),10,2)) + ' cleared successfully.')
		ENDIF
		
	ENDPROC

	PROCEDURE chklCheck.Click
		DODEFAULT()
		
		IF THIS.VALUE = .T. and m.goApp.lAMVersion
		   THISFORM.oMessage.DISPLAY('This option will cause a journal entry to be created which will debit ' + ;
		                             'your Legal/Min Suspense Account and credit the Checking Account specified in the Rev Dist/JIB Posting portion of the Edit >> Preferences screen.')
		ENDIF
		
	ENDPROC

	PROCEDURE chklSingle.Click
		IF THIS.VALUE
		   THISFORM.lblWell.VISIBLE = .T.
		   THISFORM.cmdLookWell.VISIBLE = .T.
		   THISFORM.txtcWellID.VISIBLE = .T.
		   THISFORM.txtcWellName.VISIBLE = .T.
		ELSE
		   THISFORM.lblWell.VISIBLE = .F.
		   THISFORM.cmdLookWell.VISIBLE = .F.
		   THISFORM.txtcWellID.VISIBLE = .F.
		   THISFORM.txtcWellName.VISIBLE = .F.
		ENDIF
		
		DODEFAULT()
		
	ENDPROC

	PROCEDURE cmdCancel.Click
		thisform.release()
	ENDPROC

	PROCEDURE cmdLookOwner.Click
		LPARAMETERS cworkarea
		LOCAL lcList, lnRecNo
		PRIV llOK
		
		llOK = .F.
		lcList = 'cownerid,csortfield'
		
		DO FORM ..\CUSTOM\picklist WITH 'Investor', lcList, THISFORM.txtcOwnerID.VALUE, 2
		
		IF llOK
		   THISFORM.txtcOwnerID.SET('value',investor.cOwnerID)
		   THISFORM.txtcOwnName.SET('value',investor.cOwnName)
		   THISFORM.REFRESH()
		ENDIF
		
	ENDPROC

	PROCEDURE cmdLookOwner.When
		RETURN MDOWN()
	ENDPROC

	PROCEDURE cmdLookWell.Click
		LPARAMETERS cworkarea
		LOCAL lcList, lnRecNo
		PRIV llOK
		
		llOK = .F.
		lcList = 'cwellid,cwellname'
		
		DO FORM ..\CUSTOM\picklist WITH 'wells', lcList, THISFORM.txtcWellID.VALUE, 2
		
		IF llOK
		   THISFORM.txtcWellID.SET('value',wells.cWellID)
		   THISFORM.txtcWellName.SET('value',wells.cWellName)
		   thisform.setnextcontrol(thisform.txtcwellID)
		   THISFORM.REFRESH()   
		ENDIF
		
	ENDPROC

	PROCEDURE cmdLookWell.When
		RETURN MDOWN()
	ENDPROC

	PROCEDURE cmdProcess.Click
		IF THISFORM.chklSingle.VALUE  &&  If clearing for a specific well
		   IF THISFORM.oMessage.CONFIRM('Do you want to clear any suspense balance for owner ' +  ;
		         ALLTRIM(THISFORM.txtcOwnerID.VALUE) + ' - ' + ALLTRIM(THISFORM.txtcOwnName.VALUE)  ;
		         + ' for the ' + ALLTRIM(THISFORM.txtcWellName.VALUE) + ' well?')
		      thisform.Process()
		   ENDIF
		ELSE
		   IF THISFORM.oMessage.CONFIRM('Do you want to clear all suspense balances for owner ' +  ;
		         ALLTRIM(THISFORM.txtcOwnerID.VALUE) + ' - ' + ALLTRIM(THISFORM.txtcOwnName.VALUE) + '?')
		      thisform.Process()
		   ENDIF
		ENDIF
		
	ENDPROC

	PROCEDURE txtcOwnerID.GotFocus
		ON KEY LABEL F2 _SCREEN.ACTIVEFORM.cmdLookOwner.CLICK()
		DODEFAULT()
		
	ENDPROC

	PROCEDURE txtcOwnerID.InteractiveChange
		IF DODEFAULT()
		   swSELECT('investor')
		   LOCATE FOR cownerid == this.Value
		   IF FOUND()
		      thisform.txtcownname.set('value',investor.cownname)
		   ELSE
		      thisform.txtcownname.set('value','')
		   ENDIF 
		ENDIF    
	ENDPROC

	PROCEDURE txtcOwnerID.LostFocus
		ON KEY LABEL F2 *
		DODEFAULT()
	ENDPROC

	PROCEDURE txtcOwnerID.Valid
		IF EMPTY(THIS.VALUE)
		   THISFORM.txtcOwnName.SET('value','')
		ELSE
		   IF NOT THISFORM.chklSingle.VALUE  &&  If not calculating for a specific well, check to see if there are any recs in suspense
		      swSELECT('suspense')
		      LOCATE FOR cOwnerID = THIS.VALUE
		      IF NOT FOUND()
		         THISFORM.oMessage.Warning('There are no suspense history entries for this owner.')
		         this.set('value','')
		         thisform.txtcOwnName.set('value','')
		         RETURN 0
		      ENDIF
		   ENDIF
		ENDIF
		
		DODEFAULT()
		
	ENDPROC

	PROCEDURE txtcOwnName.When
		RETURN .F.
		
	ENDPROC

	PROCEDURE txtcWellID.GotFocus
		ON KEY LABEL F2 _SCREEN.ACTIVEFORM.cmdLookWell.CLICK()
		
		DODEFAULT()
		
	ENDPROC

	PROCEDURE txtcWellID.InteractiveChange
		IF DODEFAULT()
		   swSELECT('wells')
		   LOCATE FOR cwellid == this.Value
		   IF FOUND()
		      thisform.txtcwellname.set('value',wells.cwellname)
		   ELSE
		      thisform.txtcwellname.set('value','')
		   ENDIF 
		ENDIF    
	ENDPROC

	PROCEDURE txtcWellID.LostFocus
		ON KEY LABEL F2 *
		DODEFAULT()
	ENDPROC

	PROCEDURE txtcWellID.Valid
		IF EMPTY(THIS.VALUE)
		   THISFORM.txtcWellName.SET('value','')
		ELSE
		   swSELECT('suspense')  &&  Check to see if there is any suspense for this owner and this well.
		   LOCATE FOR cwellid = THIS.VALUE AND cownerid = THISFORM.txtcOwnerID.VALUE
		   IF NOT FOUND()
		      THISFORM.oMessage.warning('There are no suspense history entries for this owner for this well.  Verify that this owner has interests in this well in the division of interests.')
		      this.set('value','')
		      thisform.txtcWellName.set('value','')
		      RETURN 0
		   ENDIF
		ENDIF
		
	ENDPROC

	PROCEDURE txtcWellName.When
		RETURN .F.
		
	ENDPROC

	PROCEDURE txtdDate.Init
		IF DODEFAULT()
		   IF NOT m.goApp.lAMVersion
		      this.lcheckdate = .t.
		   ELSE
		      this.lcheckdate = .f.
		   ENDIF 
		ENDIF    
	ENDPROC

	PROCEDURE txtdDate.Refresh
		this.cvaluesource = 'this.value'
		
		DODEFAULT()
	ENDPROC

ENDDEFINE
