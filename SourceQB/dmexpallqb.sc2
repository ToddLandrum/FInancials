*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="dmexpallqb.scx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="2" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Cursor1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor6" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor8" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor9" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor11" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor7" UniqueID="" Timestamp="" />

	AutoOpenTables = .F.
	DataSource = .NULL.
	Height = 462
	Left = 44
	Name = "Dataenvironment"
	Top = 48
	Width = 543

	ADD OBJECT 'Cursor1' AS cursor WITH ;
		Alias = "wells", ;
		CursorSource = "wells", ;
		Database = ..\newdbc\appdata.dbc, ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor1", ;
		Top = 20, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor11' AS cursor WITH ;
		Alias = "options", ;
		CursorSource = "options", ;
		Database = ..\newdbc\appdata.dbc, ;
		Height = 90, ;
		Left = 412, ;
		Name = "Cursor11", ;
		Top = 142, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor2' AS cursor WITH ;
		Alias = "expense", ;
		BufferModeOverride = 5, ;
		CursorSource = "expense", ;
		Database = ..\newdbc\appdata.dbc, ;
		Height = 90, ;
		Left = 150, ;
		Name = "Cursor2", ;
		Top = 20, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor3' AS cursor WITH ;
		Alias = "expcat", ;
		CursorSource = "expcat", ;
		Database = ..\newdbc\appdata.dbc, ;
		Height = 90, ;
		Left = 290, ;
		Name = "Cursor3", ;
		Top = 20, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor4' AS cursor WITH ;
		Alias = "vendor", ;
		CursorSource = "vendor", ;
		Database = ..\newdbc\appdata.dbc, ;
		Filter = "lInteggl = .t.", ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor4", ;
		Top = 140, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor5' AS cursor WITH ;
		Alias = "coa", ;
		CursorSource = "coa", ;
		Database = ..\newdbc\appdata.dbc, ;
		Height = 90, ;
		Left = 150, ;
		Name = "Cursor5", ;
		Top = 140, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor6' AS cursor WITH ;
		Alias = "glopt", ;
		CursorSource = "glopt", ;
		Database = ..\newdbc\appdata.dbc, ;
		Height = 90, ;
		Left = 290, ;
		Name = "Cursor6", ;
		Top = 140, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor7' AS cursor WITH ;
		Alias = "exptxnid", ;
		BufferModeOverride = 5, ;
		CursorSource = "exptxnid", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 448, ;
		Name = "Cursor7", ;
		Top = 295, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor8' AS cursor WITH ;
		Alias = "glmaster", ;
		BufferModeOverride = 5, ;
		CursorSource = "glmaster", ;
		Database = ..\newdbc\appdata.dbc, ;
		Height = 90, ;
		Left = 150, ;
		Name = "Cursor8", ;
		Top = 260, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor9' AS cursor WITH ;
		Alias = "apopt", ;
		CursorSource = "apopt", ;
		Database = ..\newdbc\appdata.dbc, ;
		Height = 90, ;
		Left = 290, ;
		Name = "Cursor9", ;
		Top = 260, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

ENDDEFINE

DEFINE CLASS formdmexpall AS frmdatamanagerformcustom OF "..\custom\cforms.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="LblProdPer" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Swperiod1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboSelect" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Swyear1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Swgroup1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdLookCat" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="LblProdYear" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="LblGroup" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom6" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcCategory" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Glmaint" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcCatCode" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtnAmount" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcRefID" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcNotes" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdProcess" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdExit" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcVendName" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdVendor" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcVendorID" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtdExpDate" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: process		&& Process the expense allocation
		*p: owellinv
	*</DefinedPropArrayMethod>

	Caption = "Allocate Operator-Charged Expenses Evenly"
	DoCreate = .T.
	Height = 386
	HelpContextID = 103
	lallowdelete = .F.
	lnodataentry = .T.
	Name = "FormDmexpall"
	owellinv = .NULL.
	Visible = .T.
	Width = 420
	_memberdata = <VFPData>
		<memberdata name="owellinv" display="oWellInv"/>
		</VFPData>
	cmdatamanager.Name = "cmdatamanager"
	cmdatamanager.TabIndex = 1
	cmdatamanager.ZOrderSet = 0
	cmlookupmanager.Name = "cmlookupmanager"
	Mwresize1.lblHighLight.Name = "lblHighLight"
	Mwresize1.lblShading.Name = "lblShading"
	Mwresize1.Name = "Mwresize1"

	ADD OBJECT 'cboSelect' AS cbocomboboxcustom WITH ;
		Height = 20, ;
		Left = 130, ;
		Name = "cboSelect", ;
		RowSource = "All Wells In Group,Selected Wells In Group", ;
		RowSourceType = 1, ;
		TabIndex = 23, ;
		Top = 308, ;
		Width = 210, ;
		ZOrderSet = 3
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="combobox" />

	ADD OBJECT 'cmdExit' AS cmdcommandbuttoncustom WITH ;
		Caption = "E\<xit", ;
		Height = 36, ;
		Left = 235, ;
		Name = "cmdExit", ;
		TabIndex = 26, ;
		Top = 340, ;
		Width = 60, ;
		ZOrderSet = 23
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdLookCat' AS cmdcommandbuttoncustom WITH ;
		Caption = "Exp Code", ;
		Height = 20, ;
		Left = 60, ;
		Name = "cmdLookCat", ;
		TabIndex = 14, ;
		Top = 168, ;
		Width = 60, ;
		ZOrderSet = 9
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdProcess' AS cmdcommandbuttoncustom WITH ;
		Caption = "\<Process", ;
		Height = 36, ;
		Left = 161, ;
		Name = "cmdProcess", ;
		TabIndex = 25, ;
		Top = 340, ;
		Width = 60, ;
		ZOrderSet = 22
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdVendor' AS swlookupbutton WITH ;
		Left = 377, ;
		Name = "cmdVendor", ;
		TabIndex = 12, ;
		Top = 131
		*< END OBJECT: ClassLib="..\custom\swcontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'Glmaint' AS glmaint WITH ;
		Left = 261, ;
		Name = "Glmaint", ;
		Top = 116
		*< END OBJECT: ClassLib="..\custom\swgl.vcx" BaseClass="custom" />

	ADD OBJECT 'LblGroup' AS lbllabelcustom WITH ;
		Caption = "Group:", ;
		Comment = "", ;
		Height = 16, ;
		Left = 85, ;
		Name = "LblGroup", ;
		TabIndex = 7, ;
		Top = 61, ;
		Width = 35, ;
		ZOrderSet = 12
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom1' AS lbllabelcustom WITH ;
		Caption = "Allocate To:", ;
		Left = 61, ;
		Name = "Lbllabelcustom1", ;
		TabIndex = 24, ;
		Top = 312, ;
		ZOrderSet = 11
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom2' AS lbllabelcustom WITH ;
		Caption = "Vendor:", ;
		Left = 79, ;
		Name = "Lbllabelcustom2", ;
		TabIndex = 13, ;
		Top = 134
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom3' AS lbllabelcustom WITH ;
		Caption = "Acct. Date:", ;
		Height = 16, ;
		Left = 64, ;
		Name = "Lbllabelcustom3", ;
		TabIndex = 9, ;
		Top = 96, ;
		Width = 56, ;
		ZOrderSet = 6
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom4' AS lbllabelcustom WITH ;
		Caption = "Total Amount", ;
		Height = 16, ;
		Left = 55, ;
		Name = "Lbllabelcustom4", ;
		TabIndex = 18, ;
		Top = 223, ;
		Width = 65, ;
		ZOrderSet = 13
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom5' AS lbllabelcustom WITH ;
		Caption = "Reference ID:", ;
		Height = 16, ;
		Left = 52, ;
		Name = "Lbllabelcustom5", ;
		TabIndex = 20, ;
		Top = 249, ;
		Width = 68, ;
		ZOrderSet = 14
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom6' AS lbllabelcustom WITH ;
		Caption = "Notes:", ;
		Height = 16, ;
		Left = 87, ;
		Name = "Lbllabelcustom6", ;
		TabIndex = 22, ;
		Top = 277, ;
		Width = 33, ;
		ZOrderSet = 15
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'LblProdPer' AS lbllabelcustom WITH ;
		Caption = "Period", ;
		Height = 16, ;
		Left = 187, ;
		Name = "LblProdPer", ;
		TabIndex = 4, ;
		Top = 26, ;
		Width = 32, ;
		ZOrderSet = 1
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'LblProdYear' AS lbllabelcustom WITH ;
		Caption = "Year:", ;
		Height = 16, ;
		Left = 91, ;
		Name = "LblProdYear", ;
		TabIndex = 5, ;
		Top = 27, ;
		Width = 29, ;
		ZOrderSet = 10
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Swgroup1' AS swgroup WITH ;
		Comment = "", ;
		Height = 20, ;
		Left = 130, ;
		Name = "Swgroup1", ;
		TabIndex = 6, ;
		Top = 59, ;
		Width = 258, ;
		ZOrderSet = 8
		*< END OBJECT: ClassLib="..\custom\swcontrol.vcx" BaseClass="combobox" />

	ADD OBJECT 'Swperiod1' AS swperiod WITH ;
		Left = 235, ;
		Name = "Swperiod1", ;
		SelectOnEntry = .T., ;
		TabIndex = 3, ;
		Top = 24, ;
		ZOrderSet = 2
		*< END OBJECT: ClassLib="..\custom\swcontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'Swyear1' AS swyear WITH ;
		Left = 130, ;
		Name = "Swyear1", ;
		SelectOnEntry = .T., ;
		TabIndex = 2, ;
		Top = 24, ;
		ZOrderSet = 4
		*< END OBJECT: ClassLib="..\custom\swcontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcCatCode' AS txtquickfill WITH ;
		clistexpression = expcat.ccatcode, ;
		clistworkarea = expcat, ;
		Height = 20, ;
		Left = 130, ;
		MaxLength = 4, ;
		Name = "txtcCatCode", ;
		SelectOnEntry = .T., ;
		TabIndex = 15, ;
		Top = 168, ;
		Width = 42, ;
		ZOrderSet = 18
		*< END OBJECT: ClassLib="..\custom\cgadget.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcCategory' AS txttextboxcustom WITH ;
		BackColor = 212,208,200, ;
		Height = 20, ;
		Left = 130, ;
		Name = "txtcCategory", ;
		TabIndex = 16, ;
		Top = 192, ;
		Width = 254
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcNotes' AS txttextboxcustom WITH ;
		Height = 20, ;
		Left = 130, ;
		Name = "txtcNotes", ;
		SelectOnEntry = .T., ;
		TabIndex = 21, ;
		Top = 274, ;
		Width = 210, ;
		ZOrderSet = 21
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcRefID' AS txttextboxcustom WITH ;
		Height = 20, ;
		Left = 130, ;
		Name = "txtcRefID", ;
		SelectOnEntry = .T., ;
		TabIndex = 19, ;
		Top = 246, ;
		Width = 96, ;
		ZOrderSet = 20
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcVendName' AS txtquickfill WITH ;
		BackColor = 255,255,255, ;
		clistexpression = cVendName, ;
		clistworkarea = Vendor, ;
		ControlSource = "", ;
		Height = 20, ;
		Left = 130, ;
		Margin = 1, ;
		MaxLength = 40, ;
		Name = "txtcVendName", ;
		ReadOnly = .F., ;
		TabIndex = 11, ;
		Top = 131, ;
		Width = 240
		*< END OBJECT: ClassLib="..\custom\cgadget.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcVendorID' AS txttextboxcustom WITH ;
		Enabled = .F., ;
		Left = 270, ;
		Name = "txtcVendorID", ;
		TabIndex = 10, ;
		Top = 108, ;
		Visible = .F.
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtdExpDate' AS dpk WITH ;
		ControlSource = "", ;
		Height = 20, ;
		Left = 130, ;
		lmorethan90 = .T., ;
		Name = "txtdExpDate", ;
		TabIndex = 8, ;
		Top = 94, ;
		Visible = .T., ;
		Width = 75
		*< END OBJECT: ClassLib="..\custom\swdate.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtnAmount' AS txttextboxcustom WITH ;
		Height = 20, ;
		InputMask = "999999999.99", ;
		Left = 130, ;
		Name = "txtnAmount", ;
		SelectOnEntry = .T., ;
		TabIndex = 17, ;
		Top = 218, ;
		Width = 134, ;
		ZOrderSet = 19
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />
	
	PROCEDURE beforeclose
		LPARAMETERS nCloseReason
		
		RETURN .t.
	ENDPROC

	PROCEDURE Destroy
		this.oWellInv = .Null.
		
		DODEFAULT()
	ENDPROC

	PROCEDURE Init
		
		this.oWellInv = CREATEOBJECT('swbizobj_wellinv')
		
		thisform.txtnAmount.value = 0
		thisform.txtdExpDate.Value = DATE()
		
		DODEFAULT()
	ENDPROC

	PROCEDURE process		&& Process the expense allocation
		LOCAL lcGroup, lnWells, lnExpense, lcExpClear, lcAPAcct, llReturn, lnWells
		LOCAL ARRAY laSelected[1]
		
		llReturn = .T.
		
		*
		*  Get the expense dist clearing account
		*
		SELECT glopt
		GO TOP
		lcExpClear  = cQBExpClear
		llQBPost    = NOT lDMNoPost
		llQBPostExp = NOT lDMNoExp
		
		*  Get the expense payable account
		SELE options
		GO TOP
		lcFixedAcct = cQBFixedAcct
		
		SELECT apopt
		GO TOP
		lcAPAcct   = cQBAPAcct
		
		IF EMPTY(lcFixedAcct)
		   lcFixedAcct = lcAPAcct
		ENDIF
		
		IF m.goapp.oQB.lqbactive
		   * get a message set request object (version 1.1 xml)
		   loRequest = m.goapp.oQB.oQBRequest
		
		   * set the on error attribute for the request
		   loRequest.ATTRIBUTES.OnError = 1
		   loRequest.clearrequests()
		ENDIF
		
		* Setup the fields for qbpost so we can unpost this allocation if part fails
		m.cidsysctl = THISFORM.oregistry.incrementcounter('%Shared.Counters.Batch')
		
		laSelected = ' '
		
		lcGroup = LEFT(THISFORM.swgroup1.VALUE, 2)
		
		DO CASE
		   CASE THISFORM.cboSelect.LISTITEMID = 1       && All Wells in Group
		      IF lcGroup = '**'
		         SELECT  cwellid, ;
		                 cgroup ;
		             FROM wells ;
		             WHERE cwellstat <> 'I' ;
		             INTO CURSOR wellsel ;
		             ORDER BY cwellid
		      ELSE
		         SELECT  cwellid, ;
		                 cgroup ;
		             FROM wells ;
		             WHERE cgroup = lcGroup ;
		                 AND cwellstat <> 'I' ;
		             INTO CURSOR wellsel ;
		             ORDER BY cwellid
		      ENDIF
		
		      IF _TALLY = 0
		         WAIT WIND 'No Wells in the given group...Try Another' NOWAIT
		         THISFORM.swgroup1.SETFOCUS()
		         llReturn = .F.
		      ELSE
		         lnWells = _TALLY
		      ENDIF
		   CASE THISFORM.cboSelect.LISTITEMID = 2      && Selected Wells
		      DO FORM dmselwells WITH lcGroup
		
		ENDCASE
		
		SELECT wellsel
		lnWells = RECC()
		
		IF lnWells > 0
		   lnTotal   = 0
		   lnExpense = ROUND(THISFORM.txtnAmount.VALUE / lnWells, 2)
		   lnDiff    = THISFORM.txtnAmount.VALUE - (lnExpense * lnWells)
		
		   SELECT wellsel
		   GO TOP
		   lcWellID1 = cwellid
		   GO BOTT
		   lcWellID2 = cwellid
		
		   m.cyear     = THISFORM.swyear1.VALUE
		   m.cperiod   = THISFORM.swperiod1.VALUE
		   m.cpayee    = THISFORM.txtcVendName.VALUE
		   m.cVendorID = THISFORM.txtcVendorID.VALUE
		   m.dExpDate  = THISFORM.txtdExpDate.VALUE
		   m.cmemo     = THISFORM.txtcNotes.VALUE
		   m.crefid    = THISFORM.txtcRefID.VALUE
		   m.ccateg    = THISFORM.txtcCategory.VALUE
		   m.ccatcode  = THISFORM.txtcCatCode.VALUE
		   m.namount   = lnExpense
		   m.cgroup    = LEFT(THISFORM.swgroup1.VALUE, 2)
		
		   SELECT vendor
		   LOCATE FOR cVendorID = m.cVendorID
		   IF FOUND()
		      lcVendListID = cListID
		
		      IF THISFORM.omessage.CONFIRM('Confirm the allocation of ' + ALLTRIM(STR(lnExpense, 9, 2)) + ' to ' + ALLTRIM(STR(lnWells)) + ' wells')
		         m.cBatch = THISFORM.oregistry.incrementcounter('%Shared.Counters.Batch')
		         SELECT wellsel
		         SCAN
		            SCATTER MEMVAR
		            WAIT WIND 'Allocating ' + ALLTRIM(STR(lnExpense, 9, 2)) + ' To Well: ' + m.cwellid NOWAIT
		            SWSELECT('expcat')
		            SET ORDER TO ccatcode
		            IF SEEK(m.ccatcode)
		               m.cExpClass = cExpClass
		            ELSE
		               m.cExpClass = '0'
		            ENDIF
		            
		            * Get deck for the well/period
		            m.cDeck = thisform.oWellInv.DOIDeckNameLookup(m.cYear, m.cPeriod, m.cwellid)
		
		            SET DELETED OFF
		            m.cidexpe = THISFORM.oregistry.incrementcounter('%Shared.Counters.Expense')
		            SELECT expense
		            SET ORDER TO cidexpe
		            DO WHILE SEEK(m.cidexpe)
		               m.cidexpe = THISFORM.oregistry.incrementcounter('%Shared.Counters.Expense')
		            ENDDO
		            SET DELETED ON
		            m.cyear   = THISFORM.swyear1.VALUE
		            m.cperiod = THISFORM.swperiod1.VALUE
		            INSERT INTO expense FROM MEMVAR
		         ENDSCAN
		
		         SELE expense
		         SCAN FOR cyear + cperiod = m.cyear + m.cperiod AND cBatch = m.cBatch AND cVendorID = m.cVendorID AND ALLT(ccateg) = ALLT(m.ccateg)
		            SELECT expense
		            REPLACE namount WITH (lnExpense + lnDiff)
		            EXIT
		         ENDSCAN
		
		         IF m.goapp.oQB.lqbactive
		            lnTotalPost = 0
		
		            SELE expense
		            SCAN FOR cyear + cperiod = m.cyear + m.cperiod AND cBatch = m.cBatch AND cVendorID = m.cVendorID AND ALLT(ccateg) = ALLT(m.ccateg)
		               SCATTER MEMVAR
		
		               *  Build the QuickBooks journal entries
		               *  Setup the journal add request
		               loJournalAdd = loRequest.AppendJournalEntryAddRq()
		               loJournalAdd.TxnDate.SetValue(m.dExpDate)
		
		               *  Get the well QuickBooks list id
		               SELE wells
		               LOCATE FOR cwellid = m.cwellid
		               IF FOUND()
		                  lcWellListID = cListID
		               ELSE
		                  LOOP
		               ENDIF
		
		
		               * Net out "Dummy" owner's share
		               lnAmount    = swNetExp(m.namount, m.cwellid, .T., m.cExpClass, 'B', .F., m.cOwnerID, m.cCatcode, m.cDeck )
		               lnTotalPost = lnTotalPost + lnAmount
		
		               IF lnAmount < 0
		                  IF m.goapp.oQB.QBFCVersion > ' 4.0'
		                     loEntry = loJournalAdd.orjournallinelist.APPEND.JournalDebitLine
		                  ELSE
		                     loEntry = loJournalAdd.JournalDebitLineList.APPEND
		                  ENDIF
		               ELSE
		                  IF m.goapp.oQB.QBFCVersion > ' 4.0'
		                     loEntry = loJournalAdd.orjournallinelist.APPEND.JournalCreditLine
		                  ELSE
		                     loEntry = loJournalAdd.JournalCreditLineList.APPEND
		                  ENDIF
		               ENDIF
		
		               loEntry.EntityRef.ListID.SetValue(lcVendListID)
		               loEntry.AccountRef.ListID.SetValue(lcFixedAcct)
		               loEntry.ClassRef.ListID.SetValue(lcWellListID)
		               loEntry.Amount.SetValue(ABS(lnAmount))
		               loEntry.MEMO.SetValue('Alloc Expenses - Period: ' + m.cperiod + '/' + m.cyear)
		
		               IF lnAmount > 0
		                  IF m.goapp.oQB.QBFCVersion > ' 4.0'
		                     lnJournal = 15
		                     loEntry   = loJournalAdd.orjournallinelist.APPEND.JournalDebitLine
		                  ELSE
		                     lnJournal = 14
		                     loEntry   = loJournalAdd.JournalDebitLineList.APPEND
		                  ENDIF
		               ELSE
		                  IF m.goapp.oQB.QBFCVersion > ' 4.0'
		                     lnJournal = 15
		                     loEntry   = loJournalAdd.orjournallinelist.APPEND.JournalCreditLine
		                  ELSE
		                     lnJournal = 14
		                     loEntry   = loJournalAdd.JournalCreditLineList.APPEND
		                  ENDIF
		               ENDIF
		
		               loEntry.EntityRef.ListID.SetValue(lcVendListID)
		               loEntry.AccountRef.ListID.SetValue(lcExpClear)
		               loEntry.ClassRef.ListID.SetValue(lcWellListID)
		               loEntry.Amount.SetValue(ABS(lnAmount))
		               loEntry.MEMO.SetValue(ALLT(m.ccateg) + ' Prd: ' + m.cperiod + '/' + m.cyear)
		
		               loResponse = m.goapp.oQB.oQBSM.DoRequests(loRequest)
		               loAddResp  = loResponse.responselist.getat(0)
		
		               IF loAddResp.StatusCode = 0
		                     loNewCheck = loAddResp.DETAIL
		                     m.ctxnid   = loNewCheck.TxnID.getvalue()
		                     SWSELECT('exptxnid')
		                     LOCATE FOR cidexpe = m.cidexpe
		                     IF NOT FOUND()
		                        INSERT INTO exptxnid FROM MEMVAR
		                     ELSE
		                        REPL ctxnid WITH m.ctxnid
		                     ENDIF
		                     * Save the transaction so that it can be unposted from QB
		                     * if any of the other transactions fail
		                     SWSELECT('qbpost')
		                     LOCATE FOR cidsysctl = m.cidsysctl AND ntype = lnJournal
		                     IF NOT FOUND()
		                        m.ntype   = lnJournal
		                        m.mtxnids = m.ctxnid
		                        INSERT INTO qbpost FROM MEMVAR
		                     ELSE
		                        IF NOT EMPTY(ALLT(mtxnids))
		                           REPL mtxnids WITH ALLT(mtxnids) + CHR(13) + m.ctxnid
		                        ELSE
		                           REPL mtxnids WITH m.ctxnid
		                        ENDIF
		                     ENDIF
		                  m.goapp.oQB.oQBSM.ClearErrorRecovery()
		               ELSE
		                  IF 'object' $ LOWER(loAddResp.statusmessage)
		                     lcListID = SUBSTR(loAddResp.statusmessage, AT('"', loAddResp.statusmessage) + 1, AT('"', loAddResp.statusmessage, 2) - (AT('"', loAddResp.statusmessage) + 1))
		                     llResult = m.goapp.oQB.QBListID(lcListID, THISFORM.DATASESSIONID)
		                     IF llResult
		                        SELECT QBListID
		                        IF QBListID.ctype = 'Account'
		                           lcMessage = 'The ' + ALLTRIM(QBListID.cdescription) + ' specified in the ' + ;
		                              'QB Posting Preferences was not found in QuickBooks. Please select a new account ' + ;
		                              'and try to allocate the expenses again.'
		                        ELSE
		                           lcMessage = 'The ' + ALLTRIM(QBListID.cdescription) + ' was not found in QuickBooks. ' + ;
		                              'Please synchronize the ' + ALLTRIM(QBListID.ctype) + ' file and try to allocate the expenses again.'
		                        ENDIF
		                        THISFORM.omessage.severe(lcMessage)
		                     ELSE
		                        THISFORM.omessage.severe(loAddResp.statusmessage)
		                     ENDIF
		                  ELSE
		                     THISFORM.omessage.severe(loAddResp.statusmessage)
		                  ENDIF
		                  * Unpost what got posted so far
		                  m.goapp.oQB.csysctlkey = m.cidsysctl
		                  m.goapp.oQB.QBUnpostRev()
		                  m.goapp.oQB.oQBSM.ClearErrorRecovery()
		                  llReturn = .F.
		               ENDIF
		               loRequest.clearrequests()
		            ENDSCAN
		
		
		         ELSE
		            IF MESSAGEBOX('The interface with QuickBooks is not active. These expenses will not be posted to QB. Is this ok?', 36, 'Allocate Expenses Problem') = 7
		               llReturn = .F.
		            ENDIF
		         ENDIF
		      ENDIF
		   ELSE
		      THISFORM.omessage.warning('The vendor specified is not found in the vendor file.')
		      llReturn = .F.
		   ENDIF
		ENDIF
		
		IF llReturn
		   SELECT expense
		   TABLEUPDATE(.T.)
		   SELECT exptxnid
		   TABLEUPDATE(.T.)
		   SWSELECT('qbpost')
		   REPLACE lposted WITH .T. FOR cidsysctl = m.cidsysctl
		   THISFORM.omessage.DISPLAY('Expenses Allocated To ' + ALLTRIM(STR(lnWells, 4)) + ' Wells.')
		ELSE
		   SWSELECT('expense', .T.)
		   TABLEREVERT(.T.)
		   SELECT exptxnid
		   TABLEREVERT(.T.)
		ENDIF
		
		RETURN llReturn
		
		
		
		
	ENDPROC

	PROCEDURE cboSelect.Init
		this.listitemid = 1
		DODEFAULT()
	ENDPROC

	PROCEDURE cmdExit.Click
		thisform.release()
	ENDPROC

	PROCEDURE cmdLookCat.Click
		LOCAL lcList
		PRIV llOK
		
		llOK = .T.
		lcList = 'ccatcode,ccateg,cexpclass'
		
		DO FORM ..\custom\picklist WITH 'Expcat', lcList, thisform.txtccatcode.value, 3
		
		IF llOK
		   thisform.txtcCatCode.value  = expcat.ccatcode
		   thisform.txtcCategory.value = expcat.cCateg
		   thisform.txtcCatCode.refresh()
		   thisform.txtcCategory.refresh()
		   thisform.setnextcontrol(thisform.txtcCatCode)
		ENDIF   
	ENDPROC

	PROCEDURE cmdLookCat.When
		RETURN MDOWN()
	ENDPROC

	PROCEDURE cmdProcess.Click
		IF EMPTY(THISFORM.swyear1.VALUE) OR EMPTY(THISFORM.swperiod1.VALUE)
		   THISFORM.oMessage.Warning('You must specify both a production year and production period before allocating.')
		   THISFORM.setnextcontrol(THISFORM.swyear1)
		   RETURN
		ENDIF
		IF EMPTY(THISFORM.txtdExpDate.VALUE)
		   THISFORM.oMessage.Warning('You must specify a valid date before allocating.')
		   THISFORM.setnextcontrol(THISFORM.txtdExpDate)
		   RETURN
		ENDIF
		IF EMPTY(THISFORM.txtcvendName.VALUE)
		   THISFORM.oMessage.Warning('You must specify a valid vendor before allocating.')
		   THISFORM.setnextcontrol(THISFORM.txtcvendName)
		   RETURN
		ENDIF
		IF EMPTY(THISFORM.txtccatCode.VALUE)
		   THISFORM.oMessage.Warning('You must specify a valid expense category before allocating.')
		   THISFORM.setnextcontrol(THISFORM.txtccatCode)
		   RETURN
		ENDIF
		IF THISFORM.txtnAmount.VALUE = 0
		   THISFORM.oMessage.Warning('You must specify an amount before allocating.')
		   THISFORM.setnextcontrol(THISFORM.txtnAmount)
		   RETURN
		ENDIF
		
		THISFORM.PROCESS()
		
	ENDPROC

	PROCEDURE cmdVendor.Click
		LOCAL lcList
		PRIV llOK
		
		llOK = .T.
		
		lcList = 'cSortfield'
		
		DO FORM ..\CUSTOM\picklist WITH 'Vendor', lcList, thisform.txtcvendorid.value, 1
		
		IF llOK
		   THISFORM.txtcVendName.VALUE = vendor.cvendname
		   THISFORM.txtcVendName.REFRESH()
		ENDIF
		
		THISFORM.setnextcontrol(THISFORM.txtcVendname)
		
		
	ENDPROC

	PROCEDURE txtcCatCode.GotFocus
		ON KEY LABEL F2 _screen.activeform.cmdLookCat.Click()
	ENDPROC

	PROCEDURE txtcCatCode.InteractiveChange
		IF DODEFAULT()
		   SELECT expcat
		   LOCATE FOR ccatcode == this.Value
		   IF FOUND()
		      thisform.txtcCategory.set('value',expcat.cCateg)
		   ELSE
		      thisform.txtcCategory.set('value','')
		   ENDIF 
		ENDIF    
		
		
	ENDPROC

	PROCEDURE txtcCatCode.LostFocus
		ON KEY LABEL F2 *
		
	ENDPROC

	PROCEDURE txtcCatCode.Valid
		IF DODEFAULT()
		   IF this.Value = 'PLUG'
		      MESSAGEBOX('The "PLUG" expense code is designated for the Plugging ' + ;
		                 'module and cannot be processed on this window. Use the ' + ;
		                 'Fixed Expenses or Well Expenses by Well (8/8th) window ' + ;
		                 'for any plugging fund adjustments that need made.',16,'PLUG not Allowed')
		      RETURN 0
		   ENDIF 
		ENDIF             
		 
	ENDPROC

	PROCEDURE txtcCategory.When
		RETURN .F.
	ENDPROC

	PROCEDURE txtcVendName.GotFocus
		ON KEY LABEL F2 _screen.activeform.cmdVendor.Click()
	ENDPROC

	PROCEDURE txtcVendName.LostFocus
		ON KEY LABEL F2
		
		thisform.txtcvendorid.value = vendor.cvendorid
		thisform.txtcvendorid.refresh()
	ENDPROC

ENDDEFINE
