*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="dmfixrelpctqb.scx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="2" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Cursor1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor6" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor7" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor8" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor9" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor10" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor13" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor5" UniqueID="" Timestamp="" />

	AutoOpenTables = .F.
	DataSource = .NULL.
	Height = 448
	Left = 83
	Name = "Dataenvironment"
	Top = 58
	Width = 729

	ADD OBJECT 'Cursor1' AS cursor WITH ;
		Alias = "apopt", ;
		CursorSource = "apopt", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor1", ;
		Top = 20, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor10' AS cursor WITH ;
		Alias = "groups", ;
		CursorSource = "groups", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 538, ;
		Name = "Cursor10", ;
		Top = 21, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor13' AS cursor WITH ;
		Alias = "expense1", ;
		CursorSource = "expense", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 290, ;
		Name = "Cursor13", ;
		Top = 260, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor2' AS cursor WITH ;
		Alias = "vendor", ;
		CursorSource = "vendor", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 413, ;
		Name = "Cursor2", ;
		Top = 153, ;
		Width = 91
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor3' AS cursor WITH ;
		Alias = "qbpost", ;
		BufferModeOverride = 1, ;
		CursorSource = "qbpost", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 150, ;
		Name = "Cursor3", ;
		Top = 20, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor4' AS cursor WITH ;
		Alias = "expense", ;
		BufferModeOverride = 5, ;
		CursorSource = "expense", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 12, ;
		Name = "Cursor4", ;
		Top = 140, ;
		Width = 91
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor5' AS cursor WITH ;
		Alias = "exptxnid", ;
		BufferModeOverride = 5, ;
		CursorSource = "exptxnid", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 417, ;
		Name = "Cursor5", ;
		Top = 288, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor6' AS cursor WITH ;
		Alias = "glopt", ;
		CursorSource = "glopt", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 292, ;
		Name = "Cursor6", ;
		Top = 29, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor7' AS cursor WITH ;
		Alias = "options", ;
		CursorSource = "options", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor7", ;
		Top = 260, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor8' AS cursor WITH ;
		Alias = "sysctl", ;
		CursorSource = "sysctl", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 150, ;
		Name = "Cursor8", ;
		Order = "yrprdgrp", ;
		Top = 260, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor9' AS cursor WITH ;
		Alias = "expcat", ;
		CursorSource = "expcat", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 415, ;
		Name = "Cursor9", ;
		Top = 21, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

ENDDEFINE

DEFINE CLASS formdmfixrel AS frmformcustom OF "..\custom\cforms.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Lbltextcustom2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbltextcustom3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdProcess" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdExit" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbltextcustom5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Swgroup" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Swyear" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Swperiod" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboProcess" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Glmaint" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Txtdate1" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: process		&& Releases the fixed expenses
		*p: lqberror
	*</DefinedPropArrayMethod>

	Caption = "Release Fixed Expenses"
	DataSession = 2
	DoCreate = .T.
	Height = 385
	HelpContextID = 102
	Name = "FormDmfixrel"
	Visible = .T.
	Width = 535
	MWRESIZE1.lblHighLight.Name = "lblHighLight"
	MWRESIZE1.lblShading.Name = "lblShading"
	MWRESIZE1.Left = 304
	MWRESIZE1.Name = "MWRESIZE1"
	MWRESIZE1.Top = 128

	ADD OBJECT 'cboProcess' AS cbocomboboxcustom WITH ;
		Height = 20, ;
		Left = 194, ;
		Name = "cboProcess", ;
		TabIndex = 9, ;
		Top = 226, ;
		Width = 190
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="combobox" />

	ADD OBJECT 'cmdExit' AS cmdcommandbuttoncustom WITH ;
		Caption = "E\<xit", ;
		Height = 51, ;
		Left = 265, ;
		Name = "cmdExit", ;
		TabIndex = 12, ;
		Top = 321, ;
		Width = 71
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdProcess' AS cmdcommandbuttoncustom WITH ;
		Caption = "\<Process", ;
		Height = 51, ;
		Left = 168, ;
		Name = "cmdProcess", ;
		TabIndex = 11, ;
		Top = 321, ;
		Width = 78
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'Glmaint' AS glmaint WITH ;
		Height = 15, ;
		Left = 293, ;
		Name = "Glmaint", ;
		Top = 125, ;
		Width = 21
		*< END OBJECT: ClassLib="..\custom\swgl.vcx" BaseClass="custom" />

	ADD OBJECT 'Lbllabelcustom1' AS lbllabelcustom WITH ;
		Caption = " Well Group:", ;
		Left = 122, ;
		Name = "Lbllabelcustom1", ;
		TabIndex = 2, ;
		Top = 40
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom2' AS lbllabelcustom WITH ;
		Caption = "Process:", ;
		Left = 138, ;
		Name = "Lbllabelcustom2", ;
		TabIndex = 10, ;
		Top = 228
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbltextcustom2' AS lbltextcustom WITH ;
		Caption = "Period/Year:", ;
		Left = 121, ;
		Name = "Lbltextcustom2", ;
		TabIndex = 6, ;
		Top = 111
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbltextcustom3' AS lbltextcustom WITH ;
		Caption = "Acct. Date:", ;
		Left = 127, ;
		Name = "Lbltextcustom3", ;
		TabIndex = 8, ;
		Top = 173
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbltextcustom5' AS lbltextcustom WITH ;
		Caption = "/", ;
		FontBold = .T., ;
		FontSize = 10, ;
		Height = 18, ;
		Left = 219, ;
		Name = "Lbltextcustom5", ;
		TabIndex = 5, ;
		Top = 109, ;
		Width = 6
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Swgroup' AS swgroup WITH ;
		Left = 194, ;
		lexcludeall = .F., ;
		Name = "Swgroup", ;
		TabIndex = 1, ;
		Top = 38
		*< END OBJECT: ClassLib="..\custom\swcontrol.vcx" BaseClass="combobox" />

	ADD OBJECT 'Swperiod' AS swperiod WITH ;
		Left = 194, ;
		Name = "Swperiod", ;
		TabIndex = 3, ;
		Top = 108
		*< END OBJECT: ClassLib="..\custom\swcontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'Swyear' AS swyear WITH ;
		Left = 228, ;
		Name = "Swyear", ;
		TabIndex = 4, ;
		Top = 108
		*< END OBJECT: ClassLib="..\custom\swcontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'Txtdate1' AS dpk WITH ;
		Height = 20, ;
		Left = 194, ;
		lmorethan90 = .T., ;
		lnocurrentdate = .F., ;
		lrequired = .T., ;
		Name = "Txtdate1", ;
		TabIndex = 7, ;
		Top = 171, ;
		Visible = .T., ;
		Width = 67
		*< END OBJECT: ClassLib="..\custom\swdate.vcx" BaseClass="textbox" />
	
	PROCEDURE Error
		LPARAMETERS nerror,cmethod,nline
		
		if between(m.nerror,1426,1429)
		   aerror(aerrinfo)
		   messagebox(aerrinfo[3],0,'QuickBooks Error')
		   this.lqberror = .t.
		else
		   dodefault(nerror,cmethod,nline)
		endif   
		
	ENDPROC

	PROCEDURE process		&& Releases the fixed expenses
		LOCAL lcgroup, llallwells, lcyear, lcperiod, ldexpdate, llsepclose, lnFixedType
		LOCAL lnfixed, lntotal, lcexpclear, lcapacct, oprogress, llnopost, lnJournal
		LOCAL oWellInv
		
		SET DELETED ON
		
		TRY
		
		   STORE 1 TO lnFixedType
		
		   *  Get the registry object
		   THISFORM.oregistry = findglobalobject('cmRegistry')
		   oWellInv = CREATEOBJECT('swbizobj_wellinv')
		
		   * Get the setting for JV Posting
		   IF m.goapp.lPartnershipMod
		      swselect('progopt')
		      GO TOP
		      llJVPosting = lJVPosting
		   ELSE
		      llJVPosting = .F.
		   ENDIF
		
		   *  Get the separate closing for JIB setting
		   SELECT options
		   llsepclose = lsepclose
		   llpostdm = lpostdm
		   lcfixedacct = cQBfixedacct
		
		   *  Get the expense clearing account
		   SELECT glopt
		   GO TOP
		   lcexpclear  = cQBexpclear
		   llqbpost    = .T.
		   llqbpostexp = .T.
		
		   IF EMPTY(lcexpclear)
		      lcexpclear = cQBsuspense
		   ENDIF
		
		   IF EMPTY(lcexpclear)
		      THISFORM.omessage.severe('Fixed Expenses cannot be released.  The expense clearing account has not been setup in the Account Settings.')
		      llRETURN = .F.
		      EXIT
		   ENDIF
		
		   *  Get the A/P account
		   SELECT apopt
		   lcapacct = cQBapacct
		
		   IF EMPTY(lcfixedacct)  &&  Don't let them release without specifying the Fixed Expense Account
		      THISFORM.omessage.severe('You cannot release Fixed Expenses without first specifying the Fixed Expense Account on the Edit >> Preferences screen.')
		      llRETURN = .F.
		      EXIT
		   ENDIF
		
		   llallwells = .F.
		
		   lcgroup   = LEFT(THISFORM.swgroup.VALUE,2)
		   lcyear    = THISFORM.swyear.VALUE
		   lcperiod  = THISFORM.swperiod.VALUE
		   ldexpdate = THISFORM.txtdate1.VALUE
		
		   IF LEFT(THISFORM.cboprocess.VALUE,1) = 'A'
		      llallwells = .T.
		   ELSE
		      llallwells = .F.
		   ENDIF
		
		   *  If all wells are to be processed, select them into wellsel
		   *  Exclude Inactive, Sold, and Plugged wells, since they won't be processed by the closing anyway
		   IF llallwells
		      SELECT cWellID, ' ' AS temp FROM wells  ;
		         WHERE IIF(lcgroup <> '**',cGroup = lcgroup,.T.) ;
		         AND NOT INLIST(cwellstat,'I','S','P') ;
		         AND cWellID IN (SELECT cWellID FROM expense WHERE cyear='FIXD') ;
		         INTO CURSOR wellsel ;
		         ORDER BY cWellID
		   ELSE
		      DO FORM ..\commonsource\dmselwells WITH lcgroup, lnFixedType
		   ENDIF
		
		   *
		   *  There were no wells selected
		   *
		   SELECT wellsel
		   IF RECC() = 0
		      MESSAGEBOX('You must choose at least one well to have fixed expenses release.',16,'Unable to Release Fixed Expenses')
		      llRETURN = .F.
		      EXIT
		   ENDIF
		
		   IF NOT THISFORM.omessage.CONFIRM('Are you sure you want to release fixed expenses for the chosen wells?')
		      llRETURN = .F.
		      EXIT
		   ENDIF
		
		   IF NOT m.goapp.oQB.lQBActive
		      MESSAGEBOX('The link to QuickBooks is not active. Fixed expenses cannot be released when not connected to QuickBooks.',48,'QuickBooks Link Problem')
		      llRETURN = .F.
		      EXIT
		   ENDIF
		
		   IF m.goapp.oQB.lQBActive AND llqbpost AND llqbpostexp
		      m.goapp.oQB.oQBSM.ClearErrorRecovery()
		      * get a message set request object (version 1.1 xml)
		      lorequest = m.goapp.oQB.oQBRequest
		
		      * set the on error attribute for the request
		      lorequest.ATTRIBUTES.onerror = 1
		      lorequest.clearrequests()
		   ENDIF
		
		   *
		   *  Check for fixed expenses that have already been released.
		   *
		   lnfixed = 0
		
		   SELECT wellsel
		   SCAN
		      m.cWellID = cWellID
		      SELECT expense
		      SCAN FOR cWellID = m.cWellID ;
		            AND nRunnoRev = 0 AND cyear <> 'FIXD' ;
		            AND lFixed = .T. AND NOT DELETED()
		         lnfixed = lnfixed + 1
		      ENDSCAN
		   ENDSCAN
		
		   IF lnfixed > 0
		      IF NOT THISFORM.omessage.CONFIRM('Fixed expenses have already been released for the new run for some or all of the wells. ' + ;
		            ' Do you want to continue?')
		         llRETURN = .F.
		         EXIT
		      ENDIF
		   ENDIF
		
		   SELECT wellsel
		   GO TOP
		   lcwellid1 = cWellID
		   GO BOTT
		   lcwellid2 = cWellID
		
		   * Only get the flat amount expenses here
		   SELECT  * ;
		      FROM expense ;
		      WHERE cyear = 'FIXD' ;
		      AND cWellID IN (SELECT  cWellID ;
		      FROM wellsel) ;
		      AND iType # 2 ;
		      INTO CURSOR exptemp READWRITE ;
		      ORDER BY cWellID
		
		   lnMax = _TALLY
		
		   * Get the pct amount expenses here
		   SELECT  * ;
		      FROM expense ;
		      WHERE cyear = 'FIXD' ;
		      AND cWellID IN (SELECT  cWellID ;
		      FROM wellsel) ;
		      AND iType = 2 ;
		      INTO CURSOR exppct ;
		      ORDER BY cWellID
		
		   lnMax = lnMax + _TALLY
		   IF lnMax = 0
		      THISFORM.omessage.DISPLAY('There were no fixed expenses found for the wells chosen...')
		      llRETURN = .F.
		      EXIT
		   ENDIF
		
		   SELECT exppct
		   SCAN
		      SCATTER MEMVAR
		
		      * Get the net revenue for the pct wells
		      SELECT cWellID, SUM(nTotalInc) AS nNetTotal ;
		         FROM income WHERE cWellID = m.cWellID ;
		         AND nRunNo = 0 ;
		         AND dRevDate <= ldexpdate ;
		         INTO CURSOR temp READWRITE ;
		         ORDER BY cWellID GROUP BY cWellID
		
		      SELECT cWellID, SUM(namount)*-1 AS nNetTotal ;
		         FROM exptemp ;
		         WHERE cWellID = m.cWellID ;
		         AND nRunnoRev = 0 ;
		         AND dExpdate <= ldexpdate ;
		         INTO CURSOR tmpexp ;
		         ORDER BY cWellID GROUP BY cWellID
		         
		      SELECT cWellID, SUM(namount)*-1 AS nNetTotal ;
		         FROM expense WITH (BUFFERING = .T.) ;
		         WHERE cWellID = m.cWellID ;
		         AND nRunnoRev = 0 ;
		         AND cYear # 'FIXD' ;
		         AND dExpdate <= ldExpDate ;
		         INTO CURSOR tmpexp1 ;
		         ORDER BY cWellID GROUP BY cWellid   
		
		      SELECT temp
		      APPEND FROM DBF('tmpexp')
		      APPEND FROM DBF('tmpexp1')
		      swclose('tmpexp')
		      swclose('tmpexp1')
		
		      SELECT cWellID, SUM(nNetTotal) AS nNetTotal ;
		         FROM temp ;
		         INTO CURSOR netrevenue ;
		         ORDER BY cWellID GROUP BY cWellID
		
		      SELECT netrevenue
		      SCAN FOR cWellID = m.cWellID
		         m.nNetTotal = nNetTotal
		
		         m.namount = ROUND(m.nNetTotal * (m.namount/100),2)
		
		         IF m.namount > m.nMaxAmount
		            m.namount = m.nMaxAmount
		         ENDIF
		      ENDSCAN   && netrevenue
		
		      IF NOT EMPTY(m.cownerid)
		         ** Check to make sure the owner has an interest in the well
		         SELECT wellinv
		         LOCATE FOR cownerid == m.cownerid AND cWellID == m.cWellID
		         IF NOT FOUND()
		            LOOP
		         ENDIF
		      ENDIF
		
		      IF EMPTY(m.cCatCode)
		         SELECT expcat
		         SET ORDER TO ccateg
		         IF SEEK(m.ccateg)
		            m.cCatCode  = cCatCode
		            m.cexpclass = cexpclass
		         ELSE
		            LOOP
		         ENDIF
		      ELSE
		         IF llJVPosting
		            SELECT expcat
		            SET ORDER TO cCatCode
		            IF SEEK(m.cCatCode)
		               m.cCatCode  = cCatCode
		               m.cexpclass = cexpclass
		               IF m.goapp.lQBVersion
		                  lcexpclear = cownacctlistid
		               ELSE
		                  lcexpclear = cdraccto
		               ENDIF
		            ENDIF
		         ENDIF
		      ENDIF
		      
		      m.cDeck       = oWellInv.DOIDeckNameLookup(lcYear, lcPeriod, m.cwellid)
		      m.cyear       = lcyear
		      m.cRunYearRev = lcyear
		      m.cRunYearJIB = lcyear
		      m.nRunnoRev   = 0
		      m.nRunNoJIB   = 0
		      m.cperiod     = lcperiod
		      m.dExpdate    = ldexpdate
		      m.dAcctDate   = ldexpdate
		      m.lFixed      = .T.
		      m.lAPTran     = .F.
		      m.cidexph     =  ''
		      m.cBatch      = THISFORM.oregistry.IncrementCounter('%Shared.Counters.Batch')
		      m.cidexpe     = GetNextPK('Expense')
		      m.cyear   = lcyear
		      m.cperiod = lcperiod
		      m.cpaidbyck = ''
		      INSERT INTO exptemp FROM MEMVAR
		   ENDSCAN
		
		   SELECT cvendorid, cpayee, SUM(namount) AS ntotal ;
		      FROM exptemp  ;
		      WHERE cWellID IN (SELECT cWellID FROM wellsel) ;
		      INTO CURSOR vendtot ;
		      ORDER BY cvendorid ;
		      GROUP BY cvendorid
		
		
		   SELECT vendtot
		   LOCATE FOR ntotal = 0
		   IF FOUND()
		      THISFORM.omessage.warning('One or more vendors have a total amount of fixed expenses that equals zero. Since zero-amount entries cannot be posted to QB, the fixed expenses for those vendor(s) will not be released.')
		   ENDIF
		
		   oprogress = THISFORM.omessage.progressbarex('Releasing Fixed Expenses to Period: ' + lcyear+'/'+lcperiod,'')
		   oprogress.setprogressrange(0,lnMax)
		   lncount = 0
		
		   IF m.goapp.oQB.QBFCVersion > ' 4.0'
		      lnJournal = 15
		   ELSE
		      lnJournal = 14
		   ENDIF
		
		   * Create a temp cursor to store all the batch #'s
		   * so we can mark them as posted in QBPost
		   CREATE CURSOR tempbatch ;
		      (cBatch   c(8))
		
		   ** Make sure the wellinv table is open
		   ** so we can check it below for one man
		   ** items to make sure the owner still
		   ** has an interest in the well.
		   swselect('wellinv')
		
		   SELECT vendtot
		   SCAN
		      SCATTER MEMVAR
		      SELE vendor
		      LOCATE FOR LOWER(cvendname) = LOWER(ALLTRIM(m.cpayee))
		      IF NOT FOUND()
		         LOOP
		      ELSE
		         lcvendlistid = clistid
		      ENDIF
		
		      IF m.ntotal = 0
		         LOOP
		      ENDIF
		
		      SELECT exptemp
		      SCAN FOR cvendorid = m.cvendorid
		         SCATTER MEMVAR
		         SELE wellsel
		         LOCATE FOR cWellID = m.cWellID
		         IF NOT FOUND()
		            LOOP
		         ENDIF
		
		         SELE wells
		         LOCATE FOR cWellID = m.cWellID
		         IF FOUND()
		            lcwelllistid = clistid
		         ELSE
		            LOOP
		         ENDIF
		
		         oprogress.setprogressmessage(' Well: ' + m.cWellID)
		         oprogress.updateprogress(lncount)
		         lncount = lncount + 1
		
		         IF NOT EMPTY(m.cownerid)
		            ** Check to make sure the owner has an interest in the well
		            SELECT wellinv
		            LOCATE FOR cownerid == m.cownerid AND cWellID == m.cWellID
		            IF NOT FOUND()
		               LOOP
		            ENDIF
		         ENDIF
		
		         ** If the category code is empty (never should be)
		         ** look up the code by the category name
		         IF EMPTY(m.cCatCode)
		            SELECT expcat
		            SET ORDER TO ccateg
		            IF SEEK(m.ccateg)
		               m.cCatCode = cCatCode
		               m.cexpclass = cexpclass
		            ELSE
		               LOOP
		            ENDIF
		         ENDIF
		
		
		         IF llJVPosting
		            SELECT expcat
		            SET ORDER TO cCatCode
		            IF SEEK(m.cCatCode)
		               m.cCatCode  = cCatCode
		               m.cexpclass = cexpclass
		               IF m.goapp.lQBVersion
		                  lcexpclear = cownacctlistid
		               ELSE
		                  lcexpclear = cdraccto
		               ENDIF
		            ENDIF
		         ENDIF
		
		         m.cyear    = lcyear
		         m.cperiod  = lcperiod
		         m.dExpdate = ldexpdate
		         m.dAcctDate = ldexpdate
		         STORE '' TO m.cRunYearRev, m.cRunYearJIB
		         STORE 0 TO m.nRunnoRev, m.nRunNoJIB
		
		         m.lFixed  = .T.
		         m.lAPTran = .F.
		
		         * Setup the fields for qbpost so we can unpost this allocation if part fails
		         m.cidsysctl = THISFORM.oregistry.IncrementCounter('%Shared.Counters.Batch')
		
		         m.cBatch  = m.cidsysctl  &&  So we can tie all these entries together to be backed out later - BH 4/23/09
		         INSERT INTO tempbatch FROM MEMVAR
		
		         m.cidexpe = THISFORM.oregistry.IncrementCounter('%Shared.Counters.Expense')
		         SET DELETED OFF
		         SELECT expense1
		         SET ORDER TO cidexpe
		         DO WHILE SEEK(m.cidexpe)
		            m.cidexpe = THISFORM.oregistry.IncrementCounter('%Shared.Counters.Expense')
		         ENDDO
		         SET DELETED ON
		         m.cyear    = lcyear
		         m.cperiod  = lcperiod
		         INSERT INTO expense FROM MEMVAR
		
		         *  Build the journal entries
		         IF m.goapp.oQB.lQBActive AND llqbpost AND llqbpostexp AND NOT THISFORM.lqberror
		
		            * Net out "Dummy" owner's share
		            lnamount = swNetExp(m.namount, m.cWellID, .T., m.cexpclass, 'B', .F., m.cOwnerID, m.cCatCode, m.cDeck)
		
		            IF lnamount = 0
		               LOOP
		            ENDIF
		
		            *  Setup the receipt add request
		            lojournaladd = lorequest.appendjournalentryaddrq()
		            lojournaladd.txndate.setvalue(ldexpdate)
		
		            IF lnamount > 0
		               IF m.goapp.oQB.QBFCVersion > ' 4.0'
		                  loEntry = lojournaladd.ORJournalLineList.APPEND.JournalDebitLine
		               ELSE
		                  loEntry = lojournaladd.journaldebitlinelist.APPEND
		               ENDIF
		            ELSE
		               IF m.goapp.oQB.QBFCVersion > ' 4.0'
		                  loEntry = lojournaladd.ORJournalLineList.APPEND.JournalCreditLine
		               ELSE
		                  loEntry = lojournaladd.journalcreditlinelist.APPEND
		               ENDIF
		            ENDIF
		
		            loEntry.entityref.listid.setvalue(lcvendlistid)
		            loEntry.accountref.listid.setvalue(lcexpclear)
		            loEntry.classref.listid.setvalue(lcwelllistid)
		            loEntry.amount.setvalue(ABS(lnamount))
		            loEntry.MEMO.setvalue(ALLT(m.ccateg)+' Prd: '+lcperiod+'/'+lcyear)
		
		            IF lnamount < 0
		               IF m.goapp.oQB.QBFCVersion > ' 4.0'
		                  loEntry = lojournaladd.ORJournalLineList.APPEND.JournalDebitLine
		               ELSE
		                  loEntry = lojournaladd.journaldebitlinelist.APPEND
		               ENDIF
		            ELSE
		               IF m.goapp.oQB.QBFCVersion > ' 4.0'
		                  loEntry = lojournaladd.ORJournalLineList.APPEND.JournalCreditLine
		               ELSE
		                  loEntry = lojournaladd.journalcreditlinelist.APPEND
		               ENDIF
		            ENDIF
		
		            loEntry.entityref.listid.setvalue(lcvendlistid)
		            loEntry.accountref.listid.setvalue(lcfixedacct)
		            loEntry.classref.listid.setvalue(lcwelllistid)
		            loEntry.amount.setvalue(ABS(lnamount))
		            loEntry.MEMO.setvalue('Fixed Expenses - Period: '+lcperiod+'/'+lcyear)
		
		            loresponse = m.goapp.oQB.oQBSM.dorequests(lorequest)
		
		            IF NOT THIS.lqberror
		               loaddresp  = loresponse.responselist.getat(0)
		
		               IF loaddresp.statuscode = 0
		                  lonewcheck = loaddresp.DETAIL
		                  m.ctxnid  = lonewcheck.txnid.getvalue()
		
		                  SELE exptxnid
		                  LOCATE FOR cidexpe = m.cidexpe
		                  IF NOT FOUND()
		                     INSERT INTO exptxnid FROM MEMVAR
		                  ELSE
		                     REPL ctxnid WITH m.ctxnid
		                  ENDIF
		
		                  swselect('qbpost')
		                  LOCATE FOR cidsysctl = m.cidsysctl AND ntype = lnJournal
		                  IF NOT FOUND()
		                     m.ntype = lnJournal
		                     m.mtxnids = m.ctxnid
		                     INSERT INTO qbpost FROM MEMVAR
		                  ELSE
		                     IF NOT EMPTY(ALLT(mtxnids))
		                        REPL mtxnids WITH ALLT(mtxnids)+CHR(13)+m.ctxnid
		                     ELSE
		                        REPL mtxnids WITH m.ctxnid
		                     ENDIF
		                  ENDIF
		                  m.goapp.oQB.oQBSM.ClearErrorRecovery()
		               ELSE
		                  IF 'object' $ LOWER(loaddresp.statusmessage)
		                     lcListID = SUBSTR(loaddresp.statusmessage,AT('"',loaddresp.statusmessage)+1,AT('"',loaddresp.statusmessage,2)-(AT('"',loaddresp.statusmessage)+1))
		                     llResult = m.goapp.oQB.QBListID(lcListID, THISFORM.DATASESSIONID)
		                     IF llResult
		                        SELECT QBListID
		                        IF QBListID.ctype = 'Account'
		                           lcMessage = 'The ' + ALLTRIM(QBListID.cdescription) + ' specified in the ' + ;
		                              'QB Posting Preferences was not found in QuickBooks. Please select a new account ' + ;
		                              'and try to release the expenses again.'
		                        ELSE
		                           lcMessage = 'The ' + ALLTRIM(QBListID.cdescription) + ' was not found in QuickBooks. ' + ;
		                              'Please synchronize the ' + ALLTRIM(QBListID.ctype) + ' file and try to release the expenses again.'
		                        ENDIF
		                        THISFORM.omessage.severe(lcMessage)
		                     ELSE
		                        THISFORM.omessage.severe(loaddresp.statusmessage)
		                     ENDIF
		                  ELSE
		                     THISFORM.omessage.severe(loaddresp.statusmessage)
		                  ENDIF
		                  m.goapp.oQB.csysctlkey = m.cidsysctl
		                  m.goapp.oQB.QBUnpostRev()
		                  m.goapp.oQB.oQBSM.ClearErrorRecovery()
		                  llRETURN = .F.
		                  EXIT
		               ENDIF
		               lorequest.clearrequests()
		            ENDIF
		         ENDIF
		      ENDSCAN
		   ENDSCAN
		
		   WAIT CLEAR
		
		   llok = .T.
		   BEGIN TRANSACTION
		   SELE expense
		   llok = TABLEUPDATE(.T.)
		   IF llok
		      SELECT exptxnid
		      llok = TABLEUPDATE(.T.)
		   ENDIF
		   IF llok
		      END TRANSACTION
		      SELECT tempbatch
		      SCAN
		         m.cidsysctl = cBatch
		         swselect('qbpost')
		         REPLACE lPosted WITH .T. FOR cidsysctl = m.cidsysctl
		      ENDSCAN
		   ELSE
		      THISFORM.omessage.DISPLAY('There was a problem releasing the fixed expenses.  All files were reset.')
		      ROLLBACK
		   ENDIF
		   oprogress.closeprogress()
		
		   IF llok
		      THISFORM.omessage.DISPLAY('Release of Fixed Expenses for Period ' + lcyear+'/'+lcperiod + ' Completed.')
		   ENDIF
		
		CATCH TO loError
		   llRETURN = .F.
		   DO errorlog WITH 'Process', loError.LINENO, 'DMFixRel', loError.ERRORNO, loError.MESSAGE, '', loError
		   MESSAGEBOX('Unable to process the fixed expenses at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		      'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		IF VARTYPE(oWellInv) = 'O'
		   oWellInv = .Null.
		ENDIF 
		
		
		
		
		
	ENDPROC

	PROCEDURE cboProcess.Init
		this.addlistitem('All Wells',1)
		this.addlistitem('Selected Wells',2)
		this.listitemid = 1
		
		DODEFAULT()
	ENDPROC

	PROCEDURE cmdExit.Click
		thisform.release()
	ENDPROC

	PROCEDURE cmdProcess.Click
		thisform.process()
	ENDPROC

	PROCEDURE Swgroup.Init
		DODEFAULT()
		
		this.listitemid = 1
	ENDPROC

	PROCEDURE Txtdate1.Init
		DODEFAULT()
		
		this.setvalue(DATE())
	ENDPROC

ENDDEFINE
