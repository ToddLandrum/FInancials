*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="swcontrol.vcx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS cntbase AS container 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	BackStyle = 0
	BorderWidth = 0
	Height = 181
	Name = "cntbase"
	Width = 200

ENDDEFINE

DEFINE CLASS cntdate AS cntbase OF "swcontrol.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="txtDate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="oleCalendar" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: dropcalendar		&& Make the Caledar Visible after refreshing it with the value from the text box
		*m: popcalendar		&& Make the Caledar invisible and refresh the text box
		*m: setcalendar		&& Used to synchronize the display of the calendar with what is in the text box
		*m: setcontrolsource		&& Set the controlSource of the text box using the cControlSOurce property of the container
		*p: ccontrolsource		&& Contains the controlSource which is used to set the text box's controlSource
	*</DefinedPropArrayMethod>

	ccontrolsource = 		&& Contains the controlSource which is used to set the text box's controlSource
	Height = 180
	Name = "cntdate"
	Width = 206

	ADD OBJECT 'oleCalendar' AS olecontrol WITH ;
		Height = 155, ;
		Left = 1, ;
		Name = "oleCalendar", ;
		Top = 23, ;
		Visible = .F., ;
		Width = 207
		*< END OBJECT: BaseClass="olecontrol" OLEObject="c:\windows\system32\mscal.ocx" Value="0M8R4KGxGuEAAAAAAAAAAAAAAAAAAAAAPgADAP7/CQAGAAAAAAAAAAAAAAABAAAAAQAAAAAAAAAAEAAAAgv////7///8EAAAA/vbwBvAHQAIABFAG4AdAByAHkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWAAUA//////////8BAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOCCS6Fv18YBAwAAAIADAAAAAAAAAwBPAGwAZQBPAGIAagBlAGMAdABEAGEAdABhAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4AAgEDAAAAAgAAAP////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAmgIAAAAAAAADAEEAYwBjAGUAcwBzAE8AYgBqAFMAaQB0AGUARABhAHQAYQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJgACAP///////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAA4AAAAAAAAAAMAQwBoAGEAbgBnAGUAZABQAHIAbwBwAHMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcAAIA////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAEYAAAAAAAAAAwAAAP7///8FAAAABAAAAAYAAAD+////BwAAAAgAAAAJAAAACgAAAAsrySeOZBIcEIovBAIkAJwCAAAIAGUVAAAFEAAA1gcJAAEA//8AAAAAAAAAAKAAAAD/AP8AAAABAAcAAgAAAAAAOAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAIAEAAAARGF5AAkAAABJCgAAAAEAAAAGAAAATW9udGgACQAAAEkKAAAACQAAAAUAAABZZWFyAAkAAABJCgAAAAEAAAABAAAAAQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA1gckRCAQANTVMgU2FucyBTZXJpZgEAAACQAURCAQANTVMgU2FucyBTZXJpZgEAAAC8AsDUAQAFQXJpYWwSCxAAAAAQAAAApwEAAKcBAAAAAAAAAAAAAAAAAAAAAAAANgMAAEgNHgCHAMDAAAAAAATYFHcAAAAAAAAAAOTLEncAAAAAHE4dAAEAAAAAAAAAAAAAAP/////////4iIiIiIj//3d3d3d3eP//f/////94//+ABQACBHYBDADwlBJ3AAAAAFAHAABUBwAAAACBBoDvgQaQkQQAMEYwMhMABwR7AAgA" />

	ADD OBJECT 'txtDate' AS txttextboxcustom WITH ;
		Alignment = 3, ;
		FontName = "Courier New", ;
		FontSize = 8, ;
		Format = "D", ;
		Height = 20, ;
		Left = 1, ;
		Name = "txtDate", ;
		NullDisplay = " ", ;
		Top = 1, ;
		Value = {}
		*< END OBJECT: ClassLib="ccontrol.vcx" BaseClass="textbox" />
	
	PROCEDURE dropcalendar		&& Make the Caledar Visible after refreshing it with the value from the text box
		WITH This
			*** Synchronize the calendar display with the textbox before making it visible
			.SetCalendar()
			.OleCalendar.Visible = .T.
		ENDWITH	
		
	ENDPROC

	PROCEDURE Init
		IF DODEFAULT()
			This.SetControlSource()
		ENDIF	
	ENDPROC

	PROCEDURE popcalendar		&& Make the Caledar invisible and refresh the text box
		WITH This
			*** synchronize the text box with the value in the calendar
		    .txtDate.Value = TTOD( .OleCalendar.Object.Value )	
			.OleCalendar.Visible = .F.
		ENDWITH	
		
	ENDPROC

	PROCEDURE setcalendar		&& Used to synchronize the display of the calendar with what is in the text box
		WITH This
		    IF EMPTY(.txtdate.Value)
		       .txtdate.setvalue(DATE())
		    ENDIF 
			.OleCalendar.Object.Value = .txtDate.Value
			.OleCalendar.Refresh()
		ENDWITH	
	ENDPROC

	PROCEDURE setcontrolsource		&& Set the controlSource of the text box using the cControlSOurce property of the container
		WITH This
			.txtDate.ControlSource = .cControlSource
		ENDWITH	
		
	ENDPROC

	PROCEDURE oleCalendar.AfterUpdate
		*** ActiveX Control Event ***
		This.Parent.PopCalendar()
	ENDPROC

	PROCEDURE oleCalendar.LostFocus
		This.Parent.SetCalendar()
		this.Parent.popcalendar()
	ENDPROC

	PROCEDURE txtDate.GotFocus
		IF DODEFAULT()
		   WITH This.Parent
				IF ! .OleCalendar.Visible
					 .DropCalendar()
				ENDIF
			ENDWITH
		ENDIF 
	ENDPROC

	PROCEDURE txtDate.InteractiveChange
		IF DODEFAULT()
		   IF LASTKEY() = 43 OR LASTKEY() = 45
		      this.Parent.setcalendar()
		   ENDIF
		ENDIF 
	ENDPROC

	PROCEDURE txtDate.KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		*** Make this behave like a combo...let F4 and ALT+DNARROW make the calendar visible
		IF ( nKeyCode = -3 ) OR ( nKeyCode = 160 )
		      WITH THIS.PARENT
		         IF ! .OleCalendar.VISIBLE
		            .DropCalendar()
		            NODEFAULT
		         ENDIF
		      ENDWITH
		ENDIF 
		
	ENDPROC

	PROCEDURE txtDate.LostFocus
		This.Parent.SetCalendar()
		this.Parent.popcalendar()
	ENDPROC

	PROCEDURE txtDate.Refresh
		*** Make sure the value of the textbox gets updated before
		*** updating the value on the calendar...so the two are synchronized 
		*** when the user navigates to another record
		DODEFAULT()
		This.Parent.SetCalendar()
		
	ENDPROC

ENDDEFINE

DEFINE CLASS cntdateright AS cntbase OF "swcontrol.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="txtDate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="oleCalendar" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: dropcalendar		&& Make the Caledar Visible after refreshing it with the value from the text box
		*m: popcalendar		&& Make the Caledar invisible and refresh the text box
		*m: setcalendar		&& Used to synchronize the display of the calendar with what is in the text box
		*m: setcontrolsource		&& Set the controlSource of the text box using the cControlSOurce property of the container
		*p: ccontrolsource		&& Contains the controlSource which is used to set the text box's controlSource
	*</DefinedPropArrayMethod>

	ccontrolsource = 		&& Contains the controlSource which is used to set the text box's controlSource
	Height = 180
	Name = "cntdateright"
	Width = 206

	ADD OBJECT 'oleCalendar' AS olecontrol WITH ;
		Height = 155, ;
		Left = 1, ;
		Name = "oleCalendar", ;
		Top = 23, ;
		Visible = .F., ;
		Width = 207
		*< END OBJECT: BaseClass="olecontrol" OLEObject="c:\windows\system32\mscal.ocx" Value="0M8R4KGxGuEAAAAAAAAAAAAAAAAAAAAAPgADAP7/CQAGAAAAAAAAAAAAAAABAAAAAQAAAAAAAAAAEAAAAgv////7///8EAAAA/vbwBvAHQAIABFAG4AdAByAHkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWAAUA//////////8BAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHCni+Jw18YBAwAAAIADAAAAAAAAAwBPAGwAZQBPAGIAagBlAGMAdABEAGEAdABhAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4AAgEDAAAAAgAAAP////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAmgIAAAAAAAADAEEAYwBjAGUAcwBzAE8AYgBqAFMAaQB0AGUARABhAHQAYQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJgACAP///////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAA4AAAAAAAAAAMAQwBoAGEAbgBnAGUAZABQAHIAbwBwAHMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcAAIA////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAEYAAAAAAAAAAwAAAP7///8FAAAABAAAAAYAAAD+////BwAAAAgAAAAJAAAACgAAAAsrySeOZBIcEIovBAIkAJwCAAAIAGUVAAAFEAAA1gcJAAEA//8AAAAAAAAAAKAAAAD/AP8AAAABAAcAAgAAAAAAOAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAIAEAAAARGF5AAkAAABJCgAAAAEAAAAGAAAATW9udGgACQAAAEkKAAAACQAAAAUAAABZZWFyAAkAAABJCgAAAAEAAAABAAAAAQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA1gckRCAQANTVMgU2FucyBTZXJpZgEAAACQAURCAQANTVMgU2FucyBTZXJpZgEAAAC8AsDUAQAFQXJpYWwSCxAAAAAQAAAApwEAAKcBAAAAAAAAAAAAAAAAAAAAAAAANgMAAEgNHgCHAMDAAAAAAATYFHcAAAAAAAAAAOTLEncAAAAAHE4dAAEAAAAAAAAAAAAAAP/////////4iIiIiIj//3d3d3d3eP//f/////94//+ABQACBHYBDADwlBJ3AAAAAFAHAABUBwAAAACBBoDvgQaQkQQAMEYwMhMABwR7AAgA" />

	ADD OBJECT 'txtDate' AS txttextboxcustom WITH ;
		Alignment = 3, ;
		FontName = "Courier New", ;
		FontSize = 8, ;
		Format = "D", ;
		Height = 20, ;
		Left = 104, ;
		Name = "txtDate", ;
		NullDisplay = " ", ;
		Top = 1, ;
		Value = {}
		*< END OBJECT: ClassLib="ccontrol.vcx" BaseClass="textbox" />
	
	PROCEDURE dropcalendar		&& Make the Caledar Visible after refreshing it with the value from the text box
		WITH This
			*** Synchronize the calendar display with the textbox before making it visible
			.SetCalendar()
			.OleCalendar.Visible = .T.
		ENDWITH	
		
	ENDPROC

	PROCEDURE Init
		IF DODEFAULT()
			This.SetControlSource()
		ENDIF	
	ENDPROC

	PROCEDURE popcalendar		&& Make the Caledar invisible and refresh the text box
		WITH This
			*** synchronize the text box with the value in the calendar
		    .txtDate.Value = TTOD( .OleCalendar.Object.Value )	
			.OleCalendar.Visible = .F.
		ENDWITH	
		
	ENDPROC

	PROCEDURE setcalendar		&& Used to synchronize the display of the calendar with what is in the text box
		WITH This
		    IF EMPTY(.txtdate.Value)
		       .txtdate.setvalue(DATE())
		    ENDIF 
			.OleCalendar.Object.Value = .txtDate.Value
			.OleCalendar.Refresh()
		ENDWITH	
	ENDPROC

	PROCEDURE setcontrolsource		&& Set the controlSource of the text box using the cControlSOurce property of the container
		WITH This
			.txtDate.ControlSource = .cControlSource
		ENDWITH	
		
	ENDPROC

	PROCEDURE oleCalendar.AfterUpdate
		*** ActiveX Control Event ***
		This.Parent.PopCalendar()
	ENDPROC

	PROCEDURE oleCalendar.LostFocus
		This.Parent.SetCalendar()
		this.Parent.popcalendar()
	ENDPROC

	PROCEDURE txtDate.GotFocus
		IF DODEFAULT()
		   WITH This.Parent
				IF ! .OleCalendar.Visible
					 .DropCalendar()
				ENDIF
			ENDWITH
		ENDIF 
	ENDPROC

	PROCEDURE txtDate.InteractiveChange
		IF DODEFAULT()
		   IF LASTKEY() = 43 OR LASTKEY() = 45
		      this.Parent.setcalendar()
		   ENDIF
		ENDIF 
	ENDPROC

	PROCEDURE txtDate.KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		*** Make this behave like a combo...let F4 and ALT+DNARROW make the calendar visible
		IF ( nKeyCode = -3 ) OR ( nKeyCode = 160 )
		      WITH THIS.PARENT
		         IF ! .OleCalendar.VISIBLE
		            .DropCalendar()
		            NODEFAULT
		         ENDIF
		      ENDWITH
		ENDIF 
		
	ENDPROC

	PROCEDURE txtDate.LostFocus
		This.Parent.SetCalendar()
		this.Parent.popcalendar()
	ENDPROC

	PROCEDURE txtDate.Refresh
		*** Make sure the value of the textbox gets updated before
		*** updating the value on the calendar...so the two are synchronized 
		*** when the user navigates to another record
		DODEFAULT()
		This.Parent.SetCalendar()
		
	ENDPROC

ENDDEFINE

DEFINE CLASS qbaccount AS cbocomboboxcustom OF "ccontrol.vcx" 
 	*< CLASSDATA: Baseclass="combobox" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*p: laponly
		*p: lbankonly		&& .T. = Only Bank Accounts
		*p: _memberdata		&& XML Metadata for customizable properties
	*</DefinedPropArrayMethod>

	BoundColumn = 4
	ColumnCount = 3
	ColumnWidths = "300,200,50"
	Height = 20
	laponly = .F.
	Name = "qbaccount"
	RowSource = ""
	RowSourceType = 0
	Sorted = .F.
	Width = 359
	_memberdata = <VFPData>
		<memberdata name="laponly" type="property" display="lAPOnly"/>
		</VFPData>		&& XML Metadata for customizable properties
	
	PROCEDURE Init
		
		IF m.goApp.lQBVersion
		    DO CASE
		        CASE NOT m.goApp.lqbactive
		            THIS.ADDLISTITEM('Not Connected To QuickBooks', 1, 1)
		            THIS.ADDLISTITEM(' ', 1, 2)
		            THIS.ADDLISTITEM(' ', 1, 3)
		            THIS.CONTROLSOURCE = ''
		            lnCount            = 2
		            THIS.LISTITEMID    = 1
		        CASE NOT THIS.lBankOnly AND NOT THIS.lAPOnly
		            THIS.ADDLISTITEM(' ', 1, 1)
		            THIS.ADDLISTITEM(' ', 1, 2)
		            THIS.ADDLISTITEM(' ', 1, 3)
		            THIS.ADDLISTITEM(' ', 1, 4)
		            lnCount = 2
		        OTHERWISE
		            lnCount = 1
		    ENDCASE
		
		    IF USED('accounts')
		        SELE accounts
		        LOCATE FOR NOT EMPTY(cacctno)
		        llAccount = FOUND()
		        SET ORDER TO nlistorder
		        SCAN
		            m.cAcctDesc = cAcctDesc
		            m.cAcctType = cAcctType
		            m.cListID   = cListID
		            m.cacctno   = cacctno
		
		            IF EMPTY(m.cAcctDesc)
		                LOOP
		            ENDIF
		
		            DO CASE
		                CASE THIS.lBankOnly
		                    IF m.cAcctType = 'Bank'
		                        THIS.ADDLISTITEM[m.cacctdesc, lnCount, 1]
		                        THIS.ADDLISTITEM[LEFT(m.cAcctType, 23), lnCount, 2]
		                        THIS.ADDLISTITEM[m.cacctno, lnCount, 3]
		                        THIS.ADDLISTITEM[m.clistid, lnCount, 4]
		                    ENDIF
		                    IF 'Undeposited' $ cAcctDesc
		                        THIS.ADDLISTITEM[m.cacctdesc, lnCount, 1]
		                        THIS.ADDLISTITEM[LEFT(m.cAcctType, 23), lnCount, 2]
		                        THIS.ADDLISTITEM[m.cacctno, lnCount, 3]
		                        THIS.ADDLISTITEM[m.clistid, lnCount, 4]
		                    ENDIF
		                CASE THIS.lAPOnly
		                    IF m.cAcctType = 'Accounts Payable'
		                        THIS.ADDLISTITEM[m.cacctdesc, lnCount, 1]
		                        THIS.ADDLISTITEM[LEFT(m.cAcctType, 23), lnCount, 2]
		                        THIS.ADDLISTITEM[m.cacctno, lnCount, 3]
		                        THIS.ADDLISTITEM[m.clistid, lnCount, 4]
		                    ENDIF
		                OTHERWISE
		                    THIS.ADDLISTITEM[m.cacctdesc, lnCount, 1]
		                    THIS.ADDLISTITEM[LEFT(m.cAcctType, 23), lnCount, 2]
		                    THIS.ADDLISTITEM[m.cacctno, lnCount, 3]
		                    THIS.ADDLISTITEM[m.clistid, lnCount, 4]
		            ENDCASE
		
		            lnCount = lnCount + 1
		        ENDSCAN
		        IF NOT llAccount
		            THIS.COLUMNCOUNT = 2
		        ENDIF
		    ENDIF
		ENDIF
		DODEFAULT()
		
		
	ENDPROC

ENDDEFINE

DEFINE CLASS runcombo AS cbocomboboxcustom OF "ccontrol.vcx" 
 	*< CLASSDATA: Baseclass="combobox" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*p: cshowwhat		&& J = show only close jib runs
		*p: lascending		&& .t. = sort the list in ascending order.
		*p: lnewrunboth		&& Show both Revenue and JIB new runs.
		*p: lnoinit
		*p: lnonpostedonly		&& .T. Only show non QB posted runs.
		*p: lnooldruns		&& Set to .t. to keep any old runs with a blank version in sysctl from showing up.
		*p: lshowbeg		&& Show entries that have "BEG" in the version
		*p: lshownew		&& .T. = show "New Run" in dropdown.
		*p: lshowposted
	*</DefinedPropArrayMethod>

	ColumnCount = 3
	ColumnLines = .F.
	ColumnWidths = "235,0,0"
	cshowwhat = ' '		&& J = show only close jib runs
	Height = 20
	lnewrunboth = .F.		&& Show both Revenue and JIB new runs.
	lnooldruns = .F.		&& Set to .t. to keep any old runs with a blank version in sysctl from showing up.
	lshowbeg = .F.		&& Show entries that have "BEG" in the version
	lshownew = .T.		&& .T. = show "New Run" in dropdown.
	Name = "runcombo"
	Width = 265
	
	PROCEDURE Init
		IF DODEFAULT()
		   this.Requery()
		ENDIF    
	ENDPROC

	PROCEDURE Requery
		IF DODEFAULT()
		   IF THIS.LISTCOUNT > 0
		      FOR lnx = 1 TO THIS.LISTCOUNT
		         THIS.REMOVELISTITEM(lnx)
		      ENDFOR
		   ENDIF
		   IF NOT THIS.lNoInit
		      SET DELE ON
		      DO CASE
		         CASE THIS.cShowWhat = 'J'
		            IF NOT THIS.lShowPosted
		               IF THIS.lAscending
		                  SELE 'RUN:'+cTypeClose+'-'+PADL(ALLT(STR(nRunNo)),3,'0')+'/'+cYear+'/'+cGroup+' Date:'+DTOC(dAcctDate), cYear, nRunNo, cGroup, cDMBatch, cTypeClose, DTOC(dAcctDate), DTOC(dPostDate), IIF(lCompanyPost,'Y','N') ;
		                     FROM sysctl ;
		                     WHERE lDisbman = .T. AND cTypeClose = 'J' ;
		                     AND nrunno # 9999 ;
		                     AND (IIF(THIS.lNonPostedOnly,lPosted = .F.,.T.)) ;
		                     and IIF(this.lNoOldruns,not EMPTY(cVersion),.t.)  ;
		                     INTO ARRAY laRuns ;
		                     ORDER BY cYear, nRunNo
		               ELSE
		                  SELE 'RUN:'+cTypeClose+'-'+PADL(ALLT(STR(nRunNo)),3,'0')+'/'+cYear+'/'+cGroup+' Date:'+DTOC(dAcctDate), cYear, nRunNo, cGroup, cDMBatch, cTypeClose, DTOC(dAcctDate), DTOC(dPostDate), IIF(lCompanyPost,'Y','N') ;
		                     FROM sysctl ;
		                     WHERE lDisbman = .T. AND cTypeClose = 'J' ;
		                     AND nrunno # 9999 ;
		                     AND (IIF(THIS.lNonPostedOnly,lPosted = .F.,.T.)) ;
		                     and IIF(this.lNoOldruns,not EMPTY(cVersion),.t.)  ;
		                     INTO ARRAY laRuns ;
		                     ORDER BY cYear DESC, nRunNo DESC
		               ENDIF
		            ELSE
		               IF THIS.lAscending
		                  SELE 'RUN:'+cTypeClose+'-'+PADL(ALLT(STR(nRunNo)),3,'0')+'/'+cYear+'/'+cGroup+' Date:'+DTOC(dAcctDate), cYear, nRunNo, cGroup, cDMBatch, cTypeClose, DTOC(dAcctDate), DTOC(dPostDate), IIF(lCompanyPost,'Y','N') ;
		                     FROM sysctl ;
		                     WHERE lDisbman = .T. AND cTypeClose = 'J' ;
		                     AND nrunno # 9999 ;
		                     and IIF(this.lNoOldruns,not EMPTY(cVersion),.t.)  ;
		                     INTO ARRAY laRuns ;
		                     ORDER BY cYear, nRunNo
		               ELSE
		                  SELE 'RUN:'+cTypeClose+'-'+PADL(ALLT(STR(nRunNo)),3,'0')+'/'+cYear+'/'+cGroup+' Date:'+DTOC(dAcctDate), cYear, nRunNo, cGroup, cDMBatch, cTypeClose, DTOC(dAcctDate), DTOC(dPostDate), IIF(lCompanyPost,'Y','N') ;
		                     FROM sysctl ;
		                     WHERE lDisbman = .T. AND cTypeClose = 'J' ;
		                     AND nrunno # 9999 ;
		                     and IIF(this.lNoOldruns,not EMPTY(cVersion),.t.)  ;
		                     INTO ARRAY laRuns ;
		                     ORDER BY cYear DESC, nRunNo DESC
		               ENDIF
		            ENDIF
		         CASE THIS.cShowWhat = 'R'
		            IF NOT THIS.lShowbeg  && Show entries with "BEG" in the version field
		               IF NOT THIS.lShowPosted
		                  IF THIS.lAscending
		                     SELE 'RUN:'+cTypeClose+'-'+PADL(ALLT(STR(nRunNo)),3,'0')+'/'+cYear+'/'+cGroup+' Date:'+DTOC(dAcctDate), cYear, nRunNo, cGroup, cDMBatch, cTypeClose, DTOC(dAcctDate), DTOC(dPostDate), IIF(lCompanyPost,'Y','N') ;
		                        FROM sysctl ;
		                        WHERE lDisbman = .T. AND cTypeClose = 'R' ;
		                        AND nrunno # 9999 ;
		                        AND (IIF(THIS.lNonPostedOnly,lPosted = .F.,.T.)) ;
		                        and IIF(this.lNoOldruns,not EMPTY(cVersion),.t.)  ;
		                        AND NOT 'BEG' $ cversion ;
		                        INTO ARRAY laRuns ;
		                        ORDER BY cYear, nRunNo
		                  ELSE
		                     SELE 'RUN:'+cTypeClose+'-'+PADL(ALLT(STR(nRunNo)),3,'0')+'/'+cYear+'/'+cGroup+' Date:'+DTOC(dAcctDate), cYear, nRunNo, cGroup, cDMBatch, cTypeClose, DTOC(dAcctDate), DTOC(dPostDate), IIF(lCompanyPost,'Y','N') ;
		                        FROM sysctl ;
		                        WHERE lDisbman = .T. AND cTypeClose = 'R' ;
		                        AND nrunno # 9999 ;
		                        AND (IIF(THIS.lNonPostedOnly,sysctl.lPosted = .F.,.T.)) ;
		                        and IIF(this.lNoOldruns,not EMPTY(cVersion),.t.)  ;
		                        AND NOT 'BEG' $ cversion ;
		                        INTO ARRAY laRuns ;
		                        ORDER BY cYear DESC, nRunNo DESC
		                  ENDIF
		               ELSE
		                  IF THIS.lAscending
		                     SELE 'RUN:'+cTypeClose+'-'+PADL(ALLT(STR(nRunNo)),3,'0')+'/'+cYear+'/'+cGroup+' Date:'+DTOC(dAcctDate), cYear, nRunNo, cGroup, cDMBatch, cTypeClose, DTOC(dAcctDate), DTOC(dPostDate), IIF(lCompanyPost,'Y','N') ;
		                        FROM sysctl ;
		                        WHERE lDisbman = .T. AND cTypeClose = 'R' AND lPosted = .T. ;
		                        AND nrunno # 9999 ;
		                        and IIF(this.lNoOldruns,not EMPTY(cVersion),.t.)  ;
		                        AND NOT 'BEG' $ cversion ;
		                        INTO ARRAY laRuns ;
		                        ORDER BY cYear, nRunNo
		                  ELSE
		                     SELE 'RUN:'+cTypeClose+'-'+PADL(ALLT(STR(nRunNo)),3,'0')+'/'+cYear+'/'+cGroup+' Date:'+DTOC(dAcctDate), cYear, nRunNo, cGroup, cDMBatch, cTypeClose, DTOC(dAcctDate), DTOC(dPostDate), IIF(lCompanyPost,'Y','N') ;
		                        FROM sysctl ;
		                        WHERE lDisbman = .T. AND cTypeClose = 'R' AND lPosted = .T. ;
		                        AND nrunno # 9999 ;
		                        and IIF(this.lNoOldruns,not EMPTY(cVersion),.t.)  ;
		                        AND NOT 'BEG' $ cversion ;
		                        INTO ARRAY laRuns ;
		                        ORDER BY cYear DESC, nRunNo DESC
		                  ENDIF
		               ENDIF
		            ELSE
		               IF NOT THIS.lShowPosted
		                  IF THIS.lAscending
		                     SELE 'RUN:'+cTypeClose+'-'+PADL(ALLT(STR(nRunNo)),3,'0')+'/'+cYear+'/'+cGroup+' Date:'+DTOC(dAcctDate), cYear, nRunNo, cGroup, cDMBatch, cTypeClose, DTOC(dAcctDate), DTOC(dPostDate), IIF(lCompanyPost,'Y','N') ;
		                        FROM sysctl ;
		                        WHERE lDisbman = .T. AND cTypeClose = 'R' ;
		                        AND nrunno # 9999 ;
		                        AND (IIF(THIS.lNonPostedOnly,lPosted = .F.,.T.)) ;
		                        and IIF(this.lNoOldruns,not EMPTY(cVersion),.t.)  ;
		                        INTO ARRAY laRuns ;
		                        ORDER BY cYear, nRunNo
		                  ELSE
		                     SELE 'RUN:'+cTypeClose+'-'+PADL(ALLT(STR(nRunNo)),3,'0')+'/'+cYear+'/'+cGroup+' Date:'+DTOC(dAcctDate), cYear, nRunNo, cGroup, cDMBatch, cTypeClose, DTOC(dAcctDate), DTOC(dPostDate), IIF(lCompanyPost,'Y','N') ;
		                        FROM sysctl ;
		                        WHERE lDisbman = .T. AND cTypeClose = 'R' ;
		                        AND nrunno # 9999 ;
		                        AND (IIF(THIS.lNonPostedOnly,sysctl.lPosted = .F.,.T.)) ;
		                        and IIF(this.lNoOldruns,not EMPTY(cVersion),.t.)  ;
		                        INTO ARRAY laRuns ;
		                        ORDER BY cYear DESC, nRunNo DESC
		                  ENDIF
		               ELSE
		                  IF THIS.lAscending
		                     SELE 'RUN:'+cTypeClose+'-'+PADL(ALLT(STR(nRunNo)),3,'0')+'/'+cYear+'/'+cGroup+' Date:'+DTOC(dAcctDate), cYear, nRunNo, cGroup, cDMBatch, cTypeClose, DTOC(dAcctDate), DTOC(dPostDate), IIF(lCompanyPost,'Y','N') ;
		                        FROM sysctl ;
		                        WHERE lDisbman = .T. AND cTypeClose = 'R' AND lPosted = .T. ;
		                        AND nrunno # 9999 ;
		                        and IIF(this.lNoOldruns,not EMPTY(cVersion),.t.)  ;
		                        INTO ARRAY laRuns ;
		                        ORDER BY cYear, nRunNo
		                  ELSE
		                     SELE 'RUN:'+cTypeClose+'-'+PADL(ALLT(STR(nRunNo)),3,'0')+'/'+cYear+'/'+cGroup+' Date:'+DTOC(dAcctDate), cYear, nRunNo, cGroup, cDMBatch, cTypeClose, DTOC(dAcctDate), DTOC(dPostDate), IIF(lCompanyPost,'Y','N') ;
		                        FROM sysctl ;
		                        WHERE lDisbman = .T. AND cTypeClose = 'R' AND lPosted = .T. ;
		                        AND nrunno # 9999 ;
		                        and IIF(this.lNoOldruns,not EMPTY(cVersion),.t.)  ;
		                        INTO ARRAY laRuns ;
		                        ORDER BY cYear DESC, nRunNo DESC
		                  ENDIF
		               ENDIF
		            ENDIF
		         OTHERWISE
		            IF NOT THIS.lShowbeg
		               IF NOT THIS.lShowPosted
		                  IF THIS.lAscending
		                     SELE 'RUN:'+cTypeClose+'-'+PADL(ALLT(STR(nRunNo)),3,'0')+'/'+cYear+'/'+cGroup+' Date:'+DTOC(dAcctDate), cYear, nRunNo, cGroup, cDMBatch, cTypeClose, DTOC(dAcctDate), DTOC(dPostDate), IIF(lCompanyPost,'Y','N') ;
		                        FROM sysctl ;
		                        WHERE lDisbman = .T. ;
		                        AND nrunno # 9999 ;
		                        AND (IIF(THIS.lNonPostedOnly,lPosted = .F.,.T.)) ;
		                        and IIF(this.lNoOldruns,not EMPTY(cVersion),.t.)  ;
		                        AND NOT 'BEG' $ cversion ;
		                        INTO ARRAY laRuns ;
		                        ORDER BY cYear DESC, nRunNo
		                  ELSE
		                     SELE 'RUN:'+cTypeClose+'-'+PADL(ALLT(STR(nRunNo)),3,'0')+'/'+cYear+'/'+cGroup+' Date:'+DTOC(dAcctDate), cYear, nRunNo, cGroup, cDMBatch, cTypeClose, DTOC(dAcctDate), DTOC(dPostDate), IIF(lCompanyPost,'Y','N') ;
		                        FROM sysctl ;
		                        WHERE lDisbman = .T. ;
		                        AND nrunno # 9999 ;
		                        AND (IIF(THIS.lNonPostedOnly,lPosted = .F.,.T.)) ;
		                        and IIF(this.lNoOldruns,not EMPTY(cVersion),.t.)  ;
		                        AND NOT 'BEG' $ cversion ;
		                        INTO ARRAY laRuns ;
		                        ORDER BY cYear DESC, nRunNo DESC
		                  ENDIF
		               ELSE
		                  IF THIS.lAscending
		                     SELE 'RUN:'+cTypeClose+'-'+PADL(ALLT(STR(nRunNo)),3,'0')+'/'+cYear+'/'+cGroup+' Date:'+DTOC(dAcctDate), cYear, nRunNo, cGroup, cDMBatch, cTypeClose, DTOC(dAcctDate), DTOC(dPostDate), IIF(lCompanyPost,'Y','N') ;
		                        FROM sysctl ;
		                        WHERE lDisbman = .T. AND lPosted = .T. ;
		                        AND nrunno # 9999 ;
		                        and IIF(this.lNoOldruns,not EMPTY(cVersion),.t.)  ;
		                        AND NOT 'BEG' $ cversion ;
		                        INTO ARRAY laRuns ;
		                        ORDER BY cYear DESC, nRunNo
		                  ELSE
		                     SELE 'RUN:'+cTypeClose+'-'+PADL(ALLT(STR(nRunNo)),3,'0')+'/'+cYear+'/'+cGroup+' Date:'+DTOC(dAcctDate), cYear, nRunNo, cGroup, cDMBatch, cTypeClose, DTOC(dAcctDate), DTOC(dPostDate), IIF(lCompanyPost,'Y','N') ;
		                        FROM sysctl ;
		                        WHERE lDisbman = .T. AND lPosted = .T.;
		                        AND nrunno # 9999 ;
		                        and IIF(this.lNoOldruns,not EMPTY(cVersion),.t.)  ;
		                        AND NOT 'BEG' $ cversion ;
		                        INTO ARRAY laRuns ;
		                        ORDER BY cYear DESC, nRunNo DESC
		                  ENDIF
		               ENDIF
		            ELSE
		               IF NOT THIS.lShowPosted
		                  IF THIS.lAscending
		                     SELE 'RUN:'+cTypeClose+'-'+PADL(ALLT(STR(nRunNo)),3,'0')+'/'+cYear+'/'+cGroup+' Date:'+DTOC(dAcctDate), cYear, nRunNo, cGroup, cDMBatch, cTypeClose, DTOC(dAcctDate), DTOC(dPostDate), IIF(lCompanyPost,'Y','N') ;
		                        FROM sysctl ;
		                        WHERE lDisbman = .T. ;
		                        AND nrunno # 9999 ;
		                        AND (IIF(THIS.lNonPostedOnly,lPosted = .F.,.T.)) ;
		                        and IIF(this.lNoOldruns,not EMPTY(cVersion),.t.)  ;
		                        INTO ARRAY laRuns ;
		                        ORDER BY cYear DESC, nRunNo
		                  ELSE
		                     SELE 'RUN:'+cTypeClose+'-'+PADL(ALLT(STR(nRunNo)),3,'0')+'/'+cYear+'/'+cGroup+' Date:'+DTOC(dAcctDate), cYear, nRunNo, cGroup, cDMBatch, cTypeClose, DTOC(dAcctDate), DTOC(dPostDate), IIF(lCompanyPost,'Y','N') ;
		                        FROM sysctl ;
		                        WHERE lDisbman = .T. ;
		                        AND nrunno # 9999 ;
		                        AND (IIF(THIS.lNonPostedOnly,lPosted = .F.,.T.)) ;
		                        and IIF(this.lNoOldruns,not EMPTY(cVersion),.t.)  ;
		                        INTO ARRAY laRuns ;
		                        ORDER BY cYear DESC, nRunNo DESC
		                  ENDIF
		               ELSE
		                  IF THIS.lAscending
		                     SELE 'RUN:'+cTypeClose+'-'+PADL(ALLT(STR(nRunNo)),3,'0')+'/'+cYear+'/'+cGroup+' Date:'+DTOC(dAcctDate), cYear, nRunNo, cGroup, cDMBatch, cTypeClose, DTOC(dAcctDate), DTOC(dPostDate), IIF(lCompanyPost,'Y','N') ;
		                        FROM sysctl ;
		                        WHERE lDisbman = .T. AND lPosted = .T. ;
		                        AND nrunno # 9999 ;
		                        and IIF(this.lNoOldruns,not EMPTY(cVersion),.t.)  ;
		                        INTO ARRAY laRuns ;
		                        ORDER BY cYear DESC, nRunNo
		                  ELSE
		                     SELE 'RUN:'+cTypeClose+'-'+PADL(ALLT(STR(nRunNo)),3,'0')+'/'+cYear+'/'+cGroup+' Date:'+DTOC(dAcctDate), cYear, nRunNo, cGroup, cDMBatch, cTypeClose, DTOC(dAcctDate), DTOC(dPostDate), IIF(lCompanyPost,'Y','N') ;
		                        FROM sysctl ;
		                        WHERE lDisbman = .T. AND lPosted = .T.;
		                        AND nrunno # 9999 ;
		                        and IIF(this.lNoOldruns,not EMPTY(cVersion),.t.)  ;
		                        INTO ARRAY laRuns ;
		                        ORDER BY cYear DESC, nRunNo DESC
		                  ENDIF
		               ENDIF
		            ENDIF
		      ENDCASE
		
		      lnCount = _TALLY
		
		      * Don't allow more than 1500 entries in the list.
		      IF lnCount > 1500
		         lnCount = 1500
		      ENDIF
		
		      IF THIS.lShowNew
		         IF THIS.lNewRunBoth
		            THIS.ADDLISTITEM('New Run - Revenue                  ',1,1)
		            THIS.ADDLISTITEM('',1,2)
		            THIS.ADDLISTITEM('0',1,3)
		            THIS.ADDLISTITEM('00',1,4)
		            THIS.ADDLISTITEM('',1,5)
		            THIS.ADDLISTITEM('R',1,6)
		            THIS.ADDLISTITEM('',1,7)
		            THIS.ADDLISTITEM('',1,8)
		            THIS.ADDLISTITEM('',1,9)
		            THIS.ADDLISTITEM('New Run - JIB                      ',2,1)
		            THIS.ADDLISTITEM('',2,2)
		            THIS.ADDLISTITEM('0',2,3)
		            THIS.ADDLISTITEM('00',2,4)
		            THIS.ADDLISTITEM('',2,5)
		            THIS.ADDLISTITEM('J',2,6)
		            THIS.ADDLISTITEM('',2,7)
		            THIS.ADDLISTITEM('',2,8)
		            THIS.ADDLISTITEM('',2,9)
		         ELSE
		            THIS.ADDLISTITEM('New Run                         ',1,1)
		            THIS.ADDLISTITEM('',1,2)
		            THIS.ADDLISTITEM('0',1,3)
		            THIS.ADDLISTITEM('00',1,4)
		            THIS.ADDLISTITEM('',1,5)
		            THIS.ADDLISTITEM('',1,6)
		            THIS.ADDLISTITEM('',1,7)
		            THIS.ADDLISTITEM('',1,8)
		            THIS.ADDLISTITEM('',1,9)
		
		         ENDIF
		
		         IF THIS.lNewRunBoth
		            lnStart = 2
		         ELSE
		            lnStart = 1
		         ENDIF
		
		         IF lnCount > 0
		            FOR lnx = 1 TO lnCount
		
		               IF lnx = 1500
		                  THIS.ADDLISTITEM('** More than 1500 Closed Runs **',lnx+1,1)
		                  THIS.ADDLISTITEM('',lnx+lnStart,2)
		                  THIS.ADDLISTITEM('',lnx+lnStart,3)
		                  THIS.ADDLISTITEM('',lnx+lnStart,4)
		                  THIS.ADDLISTITEM('',lnx+lnStart,5)
		                  THIS.ADDLISTITEM('',lnx+lnStart,6)
		                  THIS.ADDLISTITEM('',lnx+lnStart,7)
		                  THIS.ADDLISTITEM('',lnx+lnStart,8)
		                  THIS.ADDLISTITEM('',lnx+lnStart,9)
		               ELSE
		                  THIS.ADDLISTITEM(laRuns[lnX,1],lnx+lnStart,1)            && Display Value
		                  THIS.ADDLISTITEM(laRuns[lnX,2],lnx+lnStart,2)            && Run Year
		                  THIS.ADDLISTITEM(ALLT(STR(laRuns[lnX,3])),lnx+lnStart,3) && Run No
		                  THIS.ADDLISTITEM(laRuns[lnX,4],lnx+lnStart,4)            && Group
		                  THIS.ADDLISTITEM(laRuns[lnX,5],lnx+lnStart,5)            && DMBatch
		                  THIS.ADDLISTITEM(laRuns[lnX,6],lnx+lnStart,6)            && Type of Closing
		                  THIS.ADDLISTITEM(laRuns[lnX,7],lnx+lnStart,7)            && Accounting Date
		                  THIS.ADDLISTITEM(laRuns[lnX,8],lnx+lnStart,8)            && Post Date
		                  THIS.ADDLISTITEM(laRuns[lnX,9],lnx+lnStart,9)            && Company Share Only
		               ENDIF
		            ENDFOR
		         ENDIF
		      ELSE
		         IF lnCount > 0
		            FOR lnx = 1 TO lnCount
		               IF lnx = 1500
		                  THIS.ADDLISTITEM('** More than 1500 Closed Runs **',lnx,1)
		                  THIS.ADDLISTITEM('',lnx,2)
		                  THIS.ADDLISTITEM('',lnx,3)
		                  THIS.ADDLISTITEM('',lnx,4)
		                  THIS.ADDLISTITEM('',lnx,5)
		                  THIS.ADDLISTITEM('',lnx,6)
		                  THIS.ADDLISTITEM('',lnx,7)
		                  THIS.ADDLISTITEM('',lnx,8)
		                  THIS.ADDLISTITEM('',lnx,9)
		               ELSE
		                  THIS.ADDLISTITEM(laRuns[lnX,1],lnx,1)            && Display Value
		                  THIS.ADDLISTITEM(laRuns[lnX,2],lnx,2)            && Run Year
		                  THIS.ADDLISTITEM(ALLT(STR(laRuns[lnX,3])),lnx,3) && Run No
		                  THIS.ADDLISTITEM(laRuns[lnX,4],lnx,4)            && Group
		                  THIS.ADDLISTITEM(laRuns[lnX,5],lnx,5)            && DMBatch
		                  THIS.ADDLISTITEM(laRuns[lnX,6],lnx,6)            && Type of Closing
		                  THIS.ADDLISTITEM(laRuns[lnX,7],lnx,7)            && Accounting Date
		                  THIS.ADDLISTITEM(laRuns[lnX,8],lnx,8)            && Post Date
		                  THIS.ADDLISTITEM(laRuns[lnX,9],lnx,9)            && Company Share Only
		               ENDIF
		            ENDFOR
		         ENDIF
		      ENDIF
		   ENDIF
		ENDIF
		
	ENDPROC

ENDDEFINE

DEFINE CLASS swdate AS txttextboxcustom OF "ccontrol.vcx" 		&& Date text box
 	*< CLASSDATA: Baseclass="textbox" Timestamp="" Scale="Pixels" Uniqueid="" />

	Alignment = 0
	Enabled = .T.
	FontSize = 8
	Format = "D"
	Height = 20
	InputMask = "99/99/9999"
	lenabled = .T.
	Margin = 1
	Name = "swdate"
	TabIndex = 3
	Width = 77
	ZOrderSet = 8

ENDDEFINE

DEFINE CLASS swgrid AS grdgridcustom OF "ccontrol.vcx" 
 	*< CLASSDATA: Baseclass="grid" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*p: labout2leavegrid
		*p: nrecno
		*p: _memberdata		&& XML Metadata for customizable properties
	*</DefinedPropArrayMethod>

	labout2leavegrid = .F.
	Name = "swgrid"
	nrecno = 0
	_memberdata = <VFPData>
		<memberdata name="nrecno" display="nRecNo"/>
		<memberdata name="labout2leavegrid" display="lAbout2LeaveGrid"/>
		</VFPData>		&& XML Metadata for customizable properties
	
	PROCEDURE BeforeRowColChange
		LPARAMETERS nCol
		
		IF DODEFAULT(nCol)
		   this.nRecNo = 0
		ENDIF
		
	ENDPROC

	PROCEDURE Init
		
		LOCAL lcForeColor, lcBackColor
		IF DODEFAULT()
		   lcForeColor = IIF( RECNO( This.RecordSource ) = this.nRecNo, 'RGB( 0, 0, 128 )', 'RGB( 0, 0, 0 )' )
		   lcBackColor = IIF( RECNO( this.RecordSource ) = This.nRecNo, 'RGB( 0, 255, 255 )', 'RGB( 255, 255, 255 )' )
		
		   WITH THIS
		      .nRecNo = RECNO( .RECORDSOURCE )
		      .SETALL( 'DynamicForeColor', lcForeColor, 'COLUMN' )
		      .SETALL( 'DynamicBackColor', lcBackColor, 'COLUMN' )
		   ENDWITH
		ENDIF
		
	ENDPROC

	PROCEDURE Valid
		IF DODEFAULT()
		   this.lAbout2LeaveGrid = .t.
		ENDIF 
	ENDPROC

	PROCEDURE When
		IF DODEFAULT()
		   this.lAbout2LeaveGrid = .f.
		ENDIF 
	ENDPROC

ENDDEFINE

DEFINE CLASS swgroup AS cbocomboboxcustom OF "ccontrol.vcx" 
	*<ClassComment>
		*Group Drop Down List
	*</ClassComment>
 	*< CLASSDATA: Baseclass="combobox" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*p: lexcludeall		&& IF set to .T., the option for selecting ** - All Groups will not appear.
		*p: lonlyjib
	*</DefinedPropArrayMethod>

	ColumnCount = 0
	ControlSource = ""
	FontName = "Courier New"
	FontSize = 8
	Height = 20
	lonlyjib = .F.
	Name = "swgroup"
	RowSource = ""
	RowSourceType = 0
	TabIndex = 3
	Width = 216
	
	PROCEDURE Init
		SET DELETED ON
		
		IF this.lOnlyJIB
		   SELECT cgroup, cdesc FROM groups ;
		      JOIN wells ON groups.cgroup = wells.cgroup  ;
		      WHERE wells.cwellid in (SELECT cwellid FROM wellinv WHERE ljib) ;
		      INTO ARRAY laGroups ORDER BY cgroup
		ELSE
		   SELECT cgroup, cdesc FROM groups ;
		      INTO ARRAY laGroups ORDER BY cgroup
		ENDIF       
		
		IF NOT THIS.lExcludeAll
		   IF _TALLY > 0
		      THIS.ADDLISTITEM('** - All Groups',1,1)
		      THIS.ADDLISTITEM('**',1,2)
		
		      FOR lnX = 1 TO ALEN(laGroups,1)
		         THIS.ADDLISTITEM(laGroups[lnX,1] + ' - ' + laGroups[lnX,2],lnX+1,1)
		         THIS.ADDLISTITEM(laGroups[lnX,1],lnX+1,2)
		      ENDFOR
		      THIS.VALUE = '** - All Groups'
		   ENDIF
		ELSE
		   IF _TALLY > 0
		      FOR lnX = 1 TO ALEN(laGroups,1)
		         THIS.ADDLISTITEM(laGroups[lnX,1] + ' - ' + laGroups[lnX,2],lnX,1)
		         THIS.ADDLISTITEM(laGroups[lnX,1],lnX,2)
		      ENDFOR
		      IF LOWER(THIS.PARENT.CLASS) = 'frmrptcriteria'
		         THIS.LISTITEMID = 1
		      ENDIF
		   ENDIF
		ENDIF
		
		DODEFAULT()
	ENDPROC

	PROCEDURE Valid
		IF LOWER(THIS.PARENT.CLASS) <> 'frmrptcriteria'      
		   DODEFAULT()
		ENDIF   
	ENDPROC

ENDDEFINE

DEFINE CLASS swhyperlink AS cmdcommandbuttoncustom OF "ccontrol.vcx" 
 	*< CLASSDATA: Baseclass="commandbutton" Timestamp="" Scale="Pixels" Uniqueid="" />

	AutoSize = .F.
	Caption = "Access Live Chat Support"
	FontBold = .T.
	FontSize = 12
	ForeColor = 255,0,0
	Height = 43
	Name = "swhyperlink"
	Width = 221
	
	PROCEDURE Click
		IF LASTKEY() <> 13
		MESSAGEBOX('This feature is available to clients using the early release of the new versions of software. ' + ;
		           'The feature may disappear after a future update because it is being tested to see if it is a viable way of doing support.',64,'Support Notice')
		oLink = createobject('hyperlink')
		oLink.NavigateTo('www.sherware.com/livehelp/livehelp.php?department=2&amp;serversession=1&amp;pingtimes=15')
		ENDIF 
	ENDPROC

	PROCEDURE When
		RETURN MDOWN()
	ENDPROC

ENDDEFINE

DEFINE CLASS swlookupbutton AS cmdcommandbuttoncustom OF "ccontrol.vcx" 		&& Lookup Button
 	*< CLASSDATA: Baseclass="commandbutton" Timestamp="" Scale="Pixels" Uniqueid="" />

	Caption = "..."
	FontBold = .T.
	FontSize = 10
	Height = 20
	Name = "swlookupbutton"
	TabIndex = 13
	TabStop = .F.
	Width = 21
	
	PROCEDURE When
		RETURN MDOWN()
	ENDPROC

ENDDEFINE

DEFINE CLASS swperiod AS txttextboxcustom OF "ccontrol.vcx" 		&& Period text box
 	*< CLASSDATA: Baseclass="textbox" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*p: ldefvalue		&& T = provides default period if no period is entered.  (current month)
		*p: lnoinit
	*</DefinedPropArrayMethod>

	Alignment = 0
	FontSize = 8
	Format = "K"
	Height = 20
	InputMask = "99"
	Margin = 1
	Name = "swperiod"
	TabIndex = 2
	Width = 22
	ZOrderSet = 4
	
	PROCEDURE Init
		IF NOT this.lNoInit
		   this.value = PADL(MONTH(DATE()),2,'0')
		ENDIF   
		DODEFAULT()
	ENDPROC

	PROCEDURE Valid
		IF EMPTY(THIS.VALUE) AND this.lDefValue
		   THIS.VALUE = PADL(ALLTRIM(STR(MONTH(DATE()),2)),2,'0')
		ELSE
		   IF LEN(ALLTRIM(THIS.VALUE)) < 2
		      THIS.VALUE = PADL(ALLTRIM(THIS.VALUE),2,'0')
		   ENDIF
		   IF NOT BETWEEN(THIS.VALUE,'01','12')
		      WAIT WIND NOWAIT 'The period must be between 01 and 12., Please re-enter...'
		      RETURN 0
		   ENDIF
		ENDIF
		
		DODEFAULT()
		
	ENDPROC

ENDDEFINE

DEFINE CLASS swrange_py_ay_ad AS opgoptiongroupcustom OF "ccontrol.vcx" 		&& Option group for sorting by Production Year, Accounting Year, or Accounting Date
 	*< CLASSDATA: Baseclass="optiongroup" Timestamp="" Scale="Pixels" Uniqueid="" />

	BorderStyle = 0
	ButtonCount = 3
	Height = 75
	Name = "swrange_py_ay_ad"
	Width = 113
	Option1.AutoSize = .T.
	Option1.Caption = "Production Year"
	Option1.FontSize = 8
	Option1.Height = 16
	Option1.Left = 5
	Option1.Name = "ProdYear"
	Option1.Top = 5
	Option1.Width = 96
	Option2.AutoSize = .T.
	Option2.Caption = "Accounting Year"
	Option2.FontSize = 8
	Option2.Height = 16
	Option2.Left = 5
	Option2.Name = "AccYear"
	Option2.Top = 31
	Option2.Width = 100
	Option3.AutoSize = .T.
	Option3.Caption = "Accounting Date"
	Option3.FontSize = 8
	Option3.Height = 16
	Option3.Left = 5
	Option3.Name = "AccDate"
	Option3.Top = 57
	Option3.Width = 98
	
	PROCEDURE AccDate.Click
		thisform.swyear1.enabled = .f.
		thisform.swdate1.enabled = .t.
		thisform.swdate2.enabled = .t.
	ENDPROC

	PROCEDURE AccYear.Click
		thisform.swyear1.enabled = .t.
		thisform.swdate1.enabled = .f.
		thisform.swdate2.enabled = .f.
	ENDPROC

	PROCEDURE ProdYear.Click
		thisform.swyear1.enabled = .t.
		thisform.swdate1.enabled = .f.
		thisform.swdate2.enabled = .f.
	ENDPROC

ENDDEFINE

DEFINE CLASS swrptcriteriabuttons AS container 		&& Print/File/Close Buttons for Report Criteria Screens
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="cmdPrint" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdClose" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdPreview" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkExport" UniqueID="" Timestamp="" />

	BorderWidth = 0
	Height = 71
	Name = "swrptcriteriabuttons"
	Width = 235

	ADD OBJECT 'chkExport' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Export to CSV", ;
		Left = 74, ;
		Name = "chkExport", ;
		Top = 53, ;
		Value = .F.
		*< END OBJECT: ClassLib="ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'cmdClose' AS cmdclosecustom WITH ;
		Caption = "\<Close", ;
		Height = 48, ;
		Left = 160, ;
		Name = "cmdClose", ;
		Picture = ..\graphics\close.bmp, ;
		TabIndex = 3, ;
		Top = 0, ;
		Width = 74
		*< END OBJECT: ClassLib="cbutton.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdPreview' AS cmdtoolactionbuttonprint WITH ;
		Caption = "Pre\<view", ;
		Height = 48, ;
		Left = 0, ;
		Name = "cmdPreview", ;
		Picture = ..\graphics\preview.bmp, ;
		TabIndex = 1, ;
		Top = 0, ;
		Width = 74
		*< END OBJECT: ClassLib="..\common\cmtools.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdPrint' AS cmdtoolactionbuttonprint WITH ;
		Caption = "\<Print", ;
		Height = 48, ;
		Left = 80, ;
		Name = "cmdPrint", ;
		Picture = ..\graphics\print.bmp, ;
		TabIndex = 2, ;
		Top = 0, ;
		Width = 74
		*< END OBJECT: ClassLib="..\common\cmtools.vcx" BaseClass="commandbutton" />
	
	PROCEDURE chkExport.Click
		IF this.Value
		   this.Parent.cmdPreview.Caption = "\<Export"
		ELSE
		   this.Parent.cmdPreview.Caption = "Pre\<view"
		ENDIF 
	ENDPROC

	PROCEDURE cmdPreview.Click
		LOCAL lcOutFile
		
		IF thisform.builddata()
		   *
		   *  Call the report method and let it know that
		   *  it was called by the cmdFile button.
		   *
		   thisform.report('S')
		ELSE
		   IF PEMSTATUS(thisform,"lQuiet",5) = .t.
		      IF NOT thisform.lQuiet 
		         thisform.oMessage.Display('%msgRangeNotFound', 'No Records Found')   
		      ENDIF
		   ELSE
		      thisform.oMessage.Display('%msgRangeNotFound', 'No Records Found')   
		   ENDIF       
		ENDIF   
	ENDPROC

	PROCEDURE cmdPrint.Click
		LOCAL lcOutFile
		
		IF thisform.builddata()
		   *
		   *  Call the report method and let it know that
		   *  it was called by the cmdFile button.
		   *
		   thisform.report('P')
		ELSE
		   IF PEMSTATUS(thisform,"lQuiet",5) = .t.
		      IF NOT thisform.lQuiet 
		         thisform.oMessage.Display('%msgRangeNotFound', 'No Records Found')   
		      ENDIF
		   ELSE
		      thisform.oMessage.Display('%msgRangeNotFound', 'No Records Found')   
		   ENDIF       
		ENDIF   
	ENDPROC

ENDDEFINE

DEFINE CLASS swrptcustomerid_customername AS opgoptiongroupcustom OF "ccontrol.vcx" 
 	*< CLASSDATA: Baseclass="optiongroup" Timestamp="" Scale="Pixels" Uniqueid="" />

	BorderStyle = 0
	ButtonCount = 2
	Height = 42
	Name = "swrptcustomerid_customername"
	TabIndex = 1
	Width = 132
	Option1.AutoSize = .T.
	Option1.Caption = "Customer ID"
	Option1.FontSize = 8
	Option1.Height = 16
	Option1.Left = 5
	Option1.Name = "optID"
	Option1.Top = 5
	Option1.Width = 76
	Option2.AutoSize = .T.
	Option2.Caption = "Customer Name"
	Option2.FontSize = 8
	Option2.Height = 16
	Option2.Left = 5
	Option2.Name = "optName"
	Option2.Top = 27
	Option2.Width = 94

ENDDEFINE

DEFINE CLASS swrptlook AS container 		&& Lookup boxes and buttons for the report criteria screens
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="TxtBegName" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="TxtEndName" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Swlookupbutton1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Swlookupbutton2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtBegID" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtEndID" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*p: cdescfield
	*</DefinedPropArrayMethod>

	BorderWidth = 0
	cdescfield = .F.
	Height = 93
	Name = "swrptlook"
	Width = 216

	ADD OBJECT 'Swlookupbutton1' AS swlookupbutton WITH ;
		Left = 87, ;
		Name = "Swlookupbutton1", ;
		Top = 0
		*< END OBJECT: ClassLib="swcontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'Swlookupbutton2' AS swlookupbutton WITH ;
		Left = 87, ;
		Name = "Swlookupbutton2", ;
		Top = 52
		*< END OBJECT: ClassLib="swcontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'txtBegID' AS txtquickfill WITH ;
		Format = "K!", ;
		InputMask = "XXXXXXXXXX", ;
		Left = 0, ;
		Name = "txtBegID", ;
		Top = 0, ;
		Width = 81
		*< END OBJECT: ClassLib="cgadget.vcx" BaseClass="textbox" />

	ADD OBJECT 'TxtBegName' AS txttextboxcustom WITH ;
		Height = 20, ;
		Left = 0, ;
		Margin = 1, ;
		Name = "TxtBegName", ;
		ReadOnly = .T., ;
		TabIndex = 12, ;
		TabStop = .F., ;
		Top = 22, ;
		Width = 216
		*< END OBJECT: ClassLib="ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtEndID' AS txtquickfill WITH ;
		Format = "K!", ;
		InputMask = "XXXXXXXXXX", ;
		Left = 0, ;
		Name = "txtEndID", ;
		Top = 52, ;
		Width = 81
		*< END OBJECT: ClassLib="cgadget.vcx" BaseClass="textbox" />

	ADD OBJECT 'TxtEndName' AS txttextboxcustom WITH ;
		Height = 20, ;
		Left = 0, ;
		Margin = 1, ;
		Name = "TxtEndName", ;
		ReadOnly = .T., ;
		TabIndex = 13, ;
		TabStop = .F., ;
		Top = 73, ;
		Width = 216
		*< END OBJECT: ClassLib="ccontrol.vcx" BaseClass="textbox" />
	
	PROCEDURE txtBegID.GotFocus
		ON KEY LABEL F2 _screen.activeform.swrptlook1.swlookupbutton1.Click()
		DODEFAULT()
	ENDPROC

	PROCEDURE txtBegID.InteractiveChange
		IF DODEFAULT()
		   DO CASE
		      CASE LOWER(THIS.clistworkarea) = 'coa'
		         SWSELECT('coa')
		         IF 'cacctno' $ LOWER(THIS.clistexpression)
		            SET ORDER TO acctno
		            IF SEEK(THIS.VALUE)
		               THIS.PARENT.txtBegName.SET('value',coa.cacctdesc)
		            ELSE
		               THIS.PARENT.txtBegName.SET('value','')
		            ENDIF
		         ELSE
		            LOCATE FOR EVALUATE(THIS.clistexpression) == THIS.VALUE
		            IF FOUND()
		               THIS.PARENT.txtBegName.SET('value',coa.cacctdesc)
		            ELSE
		               THIS.PARENT.txtBegName.SET('value','')
		            ENDIF
		         ENDIF
		
		      CASE LOWER(THIS.clistworkarea) = 'custs'
		         SWSELECT('custs')
		         LOCATE FOR EVALUATE(THIS.clistexpression) == THIS.VALUE
		         IF FOUND()
		            THIS.PARENT.txtBegName.SET('value',custs.ccustname)
		         ELSE
		            THIS.PARENT.txtBegName.SET('value','')
		         ENDIF
		
		      CASE LOWER(THIS.clistworkarea) = 'vendor'
		         SWSELECT('vendor')
		         LOCATE FOR EVALUATE(THIS.clistexpression) == THIS.VALUE
		         IF FOUND()
		            THIS.PARENT.txtBegName.SET('value',vendor.csortfield)
		         ELSE
		            THIS.PARENT.txtBegName.SET('value','')
		         ENDIF
		
		      CASE LOWER(THIS.clistworkarea) = 'custownvend'
		         SWSELECT('custownvend')
		         LOCATE FOR EVALUATE(THIS.clistexpression) == THIS.VALUE
		         IF FOUND()
		            THIS.PARENT.txtBegName.SET('value',custownvend.cname)
		         ELSE
		            THIS.PARENT.txtBegName.SET('value','')
		         ENDIF
		         
		      CASE LOWER(THIS.clistworkarea) = 'custown'
		         SWSELECT('custown')
		         LOCATE FOR EVALUATE(THIS.clistexpression) == THIS.VALUE
		         IF FOUND()
		            THIS.PARENT.txtBegName.SET('value',custown.ccustname)
		         ELSE
		            THIS.PARENT.txtBegName.SET('value','')
		         ENDIF   
		
		      CASE LOWER(THIS.clistworkarea) = 'expcat'
		         SWSELECT('expcat')
		         LOCATE FOR EVALUATE(THIS.clistexpression) == THIS.VALUE
		         IF FOUND()
		            THIS.PARENT.txtBegName.SET('value',expcat.ccateg)
		         ELSE
		            THIS.PARENT.txtBegName.SET('value','')
		         ENDIF
		
		      CASE LOWER(THIS.clistworkarea) = 'investor'
		         SWSELECT('investor')
		         IF 'cownerid' $ LOWER(THIS.clistexpression)
		            SET ORDER TO cownerid
		            IF SEEK(THIS.VALUE)
		               THIS.PARENT.txtBegName.SET('value',investor.csortfield)
		            ELSE
		               THIS.PARENT.txtBegName.SET('value','')
		            ENDIF
		         ELSE
		            LOCATE FOR EVALUATE(THIS.clistexpression) == THIS.VALUE
		            IF FOUND()
		               THIS.PARENT.txtBegName.SET('value',investor.csortfield)
		            ELSE
		               THIS.PARENT.txtBegName.SET('value','')
		            ENDIF
		         ENDIF
		
		      CASE LOWER(THIS.clistworkarea) = 'wells'
		         SWSELECT('wells')
		         LOCATE FOR EVALUATE(THIS.clistexpression) == THIS.VALUE
		         IF FOUND()
		            THIS.PARENT.txtBegName.SET('value',wells.cwellname)
		         ELSE
		            THIS.PARENT.txtBegName.SET('value','')
		         ENDIF
		
		      CASE LOWER(THIS.clistworkarea) = 'revsrc'
		         SWSELECT('revsrc')
		         LOCATE FOR EVALUATE(THIS.clistexpression) == THIS.VALUE
		         IF FOUND()
		            THIS.PARENT.txtBegName.SET('value',revsrc.crevname)
		         ELSE
		            THIS.PARENT.txtBegName.SET('value','')
		         ENDIF
		
		      CASE LOWER(THIS.clistworkarea) = 'gldept'
		         SWSELECT('gldept')
		         LOCATE FOR EVALUATE(THIS.clistexpression) == THIS.VALUE
		         IF FOUND()
		            THIS.PARENT.txtBegName.SET('value',gldept.cdeptdesc)
		         ELSE
		            THIS.PARENT.txtBegName.SET('value','')
		         ENDIF
		
		      CASE LOWER(THIS.clistworkarea) = 'emps'
		         SWSELECT('emps')
		         LOCATE FOR EVALUATE(THIS.clistexpression) == THIS.VALUE
		         IF FOUND()
		            THIS.PARENT.txtBegName.SET('value',displaynamelastfirst('',emps.cfirstname,emps.cmidinit,emps.clastname,''))
		         ELSE
		            THIS.PARENT.txtBegName.SET('value','')
		         ENDIF
		         
		      CASE LOWER(THIS.clistworkarea) = 'afehdr'
		         SWSELECT('afehdr')
		         LOCATE FOR EVALUATE(THIS.clistexpression) == THIS.VALUE
		         IF FOUND()
		            THIS.PARENT.txtBegName.SET('value','Well: ' + afehdr.cwellid)
		         ELSE
		            THIS.PARENT.txtBegName.SET('value','')
		         ENDIF
		         
		      CASE LOWER(THIS.clistworkarea) = 'programs'
		         SWSELECT('programs')
		         LOCATE FOR EVALUATE(THIS.clistexpression) == THIS.VALUE
		         IF FOUND()
		            THIS.PARENT.txtBegName.SET('value',programs.cprogname)
		         ELSE
		            THIS.PARENT.txtBegName.SET('value','')
		         ENDIF   
		   ENDCASE
		   this.Parent.txtendID.Value = this.Value
		   this.Parent.txtEndName.Value = this.Parent.txtbegname.value 
		ENDIF
		
	ENDPROC

	PROCEDURE txtBegID.LostFocus
		ON KEY LABEL F2 *
		DODEFAULT()
	ENDPROC

	PROCEDURE TxtBegName.When
		RETURN .F.
	ENDPROC

	PROCEDURE txtEndID.GotFocus
		ON KEY LABEL F2 _screen.activeform.swrptlook1.swlookupbutton2.Click()
		DODEFAULT()
	ENDPROC

	PROCEDURE txtEndID.InteractiveChange
		IF DODEFAULT()
		   DO CASE
		      CASE LOWER(THIS.clistworkarea) = 'coa'
		         SWSELECT('coa')
		         IF 'cacctno' $ LOWER(THIS.clistexpression)
		            SET ORDER TO acctno
		            IF SEEK(THIS.VALUE)
		               THIS.PARENT.txtEndName.SET('value',coa.cacctdesc)
		            ELSE
		               THIS.PARENT.txtEndName.SET('value','')
		            ENDIF
		         ELSE
		            LOCATE FOR EVALUATE(THIS.clistexpression) == THIS.VALUE
		            IF FOUND()
		               THIS.PARENT.txtEndName.SET('value',coa.cacctdesc)
		            ELSE
		               THIS.PARENT.txtEndName.SET('value','')
		            ENDIF
		         ENDIF
		
		      CASE LOWER(THIS.clistworkarea) = 'custs'
		         SWSELECT('custs')
		         LOCATE FOR EVALUATE(THIS.clistexpression) == THIS.VALUE
		         IF FOUND()
		            THIS.PARENT.txtEndName.SET('value',custs.ccustname)
		         ELSE
		            THIS.PARENT.txtEndName.SET('value','')
		         ENDIF
		
		      CASE LOWER(THIS.clistworkarea) = 'vendor'
		         SWSELECT('vendor')
		         LOCATE FOR EVALUATE(THIS.clistexpression) == THIS.VALUE
		         IF FOUND()
		            THIS.PARENT.txtEndName.SET('value',vendor.csortfield)
		         ELSE
		            THIS.PARENT.txtEndName.SET('value','')
		         ENDIF
		
		      CASE LOWER(THIS.clistworkarea) = 'custownvend'
		         SWSELECT('custownvend')
		         LOCATE FOR EVALUATE(THIS.clistexpression) == THIS.VALUE
		         IF FOUND()
		            THIS.PARENT.txtEndName.SET('value',custownvend.cname)
		         ELSE
		            THIS.PARENT.txtEndName.SET('value','')
		         ENDIF
		      
		      CASE LOWER(THIS.clistworkarea) = 'custown'
		         SWSELECT('custown')
		         LOCATE FOR EVALUATE(THIS.clistexpression) == THIS.VALUE
		         IF FOUND()
		            THIS.PARENT.txtBegName.SET('value',custown.ccustname)
		         ELSE
		            THIS.PARENT.txtBegName.SET('value','')
		         ENDIF   
		
		      CASE LOWER(THIS.clistworkarea) = 'expcat'
		         SWSELECT('expcat')
		         LOCATE FOR EVALUATE(THIS.clistexpression) == THIS.VALUE
		         IF FOUND()
		            THIS.PARENT.txtEndName.SET('value',expcat.ccateg)
		         ELSE
		            THIS.PARENT.txtEndName.SET('value','')
		         ENDIF
		
		      CASE LOWER(THIS.clistworkarea) = 'investor'
		         SWSELECT('investor')
		         IF 'cownerid' $ LOWER(THIS.clistexpression)
		            SET ORDER TO cownerid
		            IF SEEK(THIS.VALUE)
		               THIS.PARENT.txtEndName.SET('value',investor.csortfield)
		            ELSE
		               THIS.PARENT.txtEndName.SET('value','')
		            ENDIF
		         ELSE
		            LOCATE FOR EVALUATE(THIS.clistexpression) == THIS.VALUE
		            IF FOUND()
		               THIS.PARENT.txtEndName.SET('value',investor.csortfield)
		            ELSE
		               THIS.PARENT.txtEndName.SET('value','')
		            ENDIF
		         ENDIF
		
		      CASE LOWER(THIS.clistworkarea) = 'wells'
		         SWSELECT('wells')
		         LOCATE FOR EVALUATE(THIS.clistexpression) == THIS.VALUE
		         IF FOUND()
		            THIS.PARENT.txtEndName.SET('value',wells.cwellname)
		         ELSE
		            THIS.PARENT.txtEndName.SET('value','')
		         ENDIF
		
		      CASE LOWER(THIS.clistworkarea) = 'revsrc'
		         SWSELECT('revsrc')
		         LOCATE FOR EVALUATE(THIS.clistexpression) == THIS.VALUE
		         IF FOUND()
		            THIS.PARENT.txtEndName.SET('value',revsrc.crevname)
		         ELSE
		            THIS.PARENT.txtEndName.SET('value','')
		         ENDIF
		
		      CASE LOWER(THIS.clistworkarea) = 'gldept'
		         SWSELECT('gldept')
		         LOCATE FOR EVALUATE(THIS.clistexpression) == THIS.VALUE
		         IF FOUND()
		            THIS.PARENT.txtEndName.SET('value',gldept.cdeptdesc)
		         ELSE
		            THIS.PARENT.txtEndName.SET('value','')
		         ENDIF
		
		      CASE LOWER(THIS.clistworkarea) = 'emps'
		         SWSELECT('emps')
		         LOCATE FOR EVALUATE(THIS.clistexpression) == THIS.VALUE
		         IF FOUND()
		            THIS.PARENT.txtEndName.SET('value',displaynamelastfirst('',emps.cfirstname,emps.cmidinit,emps.clastname,''))
		         ELSE
		            THIS.PARENT.txtEndName.SET('value','')
		         ENDIF
		         
		      CASE LOWER(THIS.clistworkarea) = 'afehdr'
		         SWSELECT('afehdr')
		         LOCATE FOR EVALUATE(THIS.clistexpression) == THIS.VALUE
		         IF FOUND()
		            THIS.PARENT.txtEndName.SET('value','Well: ' + afehdr.cwellid)
		         ELSE
		            THIS.PARENT.txtEndName.SET('value','')
		         ENDIF
		         
		      CASE LOWER(THIS.clistworkarea) = 'programs'
		         SWSELECT('programs')
		         LOCATE FOR EVALUATE(THIS.clistexpression) == THIS.VALUE
		         IF FOUND()
		            THIS.PARENT.txtEndName.SET('value',programs.cprogname)
		         ELSE
		            THIS.PARENT.txtEndName.SET('value','')
		         ENDIF   
		   ENDCASE
		ENDIF
		
	ENDPROC

	PROCEDURE txtEndID.LostFocus
		ON KEY LABEL F2 *
		DODEFAULT()
	ENDPROC

	PROCEDURE TxtEndName.When
		RETURN .F.
	ENDPROC

ENDDEFINE

DEFINE CLASS swrptownerid_ownername AS opgoptiongroupcustom OF "ccontrol.vcx" 		&& Option group to sort by Owner Name or Owner ID
 	*< CLASSDATA: Baseclass="optiongroup" Timestamp="" Scale="Pixels" Uniqueid="" />

	BorderStyle = 0
	ButtonCount = 2
	Height = 48
	Name = "swrptownerid_ownername"
	TabIndex = 1
	Width = 120
	Option1.Caption = "Owner ID"
	Option1.FontSize = 8
	Option1.Height = 17
	Option1.Left = 5
	Option1.Name = "OwnerID"
	Option1.Top = 5
	Option1.Width = 79
	Option2.Caption = "Owner Name"
	Option2.FontSize = 8
	Option2.Height = 17
	Option2.Left = 5
	Option2.Name = "OwnerName"
	Option2.Top = 28
	Option2.Width = 91
	
	PROCEDURE Init
		this.ownerid.value = 1
	ENDPROC

	PROCEDURE OwnerID.Click
		select investor
		set order to cownerid
		
		go top
		thisform.swrptlook1.txtBegName.value = cownname
		thisform.swrptlook1.txtBegID.value = cownerid
		
		go bottom
		thisform.swrptlook1.txtEndName.value = cownname
		thisform.swrptlook1.txtEndID.value = cownerid
		
	ENDPROC

	PROCEDURE OwnerName.Click
		select investor
		set order to cownerid
		go top
		
		thisform.swrptlook1.txtBegName.value = cownname
		thisform.swrptlook1.txtBegID.value = cownerid
		
		go bottom
		
		thisform.swrptlook1.txtEndName.value = cownname
		thisform.swrptlook1.txtEndID.value = cownerid
		
	ENDPROC

ENDDEFINE

DEFINE CLASS swrptvendorid_vendorname AS opgoptiongroupcustom OF "ccontrol.vcx" 		&& Vendor ID/Vendor Name option group for report criteria screens
 	*< CLASSDATA: Baseclass="optiongroup" Timestamp="" Scale="Pixels" Uniqueid="" />

	AutoSize = .T.
	BorderStyle = 0
	ButtonCount = 2
	Height = 49
	Name = "swrptvendorid_vendorname"
	TabIndex = 1
	Width = 112
	Option1.Caption = "Vendor ID"
	Option1.FontSize = 8
	Option1.Height = 17
	Option1.Left = 5
	Option1.Name = "VendorID"
	Option1.Top = 5
	Option1.Width = 79
	Option2.Caption = "Vendor Name"
	Option2.FontSize = 8
	Option2.Height = 17
	Option2.Left = 5
	Option2.Name = "VendorName"
	Option2.Top = 27
	Option2.Width = 102
	
	PROCEDURE Init
		this.vendorid.value = 1
	ENDPROC

	PROCEDURE VendorID.Click
		select vendor
		set order to cvendorid
		go top
		
		thisform.swrptlook1.txtBegName.value = cvendname
		thisform.swrptlook1.txtBegID.value = cvendorid
		go bottom
		
		thisform.swrptlook1.txtEndName.value = cvendname
		thisform.swrptlook1.txtEndID.value = cvendorid
	ENDPROC

	PROCEDURE VendorName.Click
		select vendor
		set order to cvendname
		go top
		
		thisform.swrptlook1.txtBegName.value = cvendname
		thisform.swrptlook1.txtBegID.value = cvendorid
		go bottom
		
		thisform.swrptlook1.txtEndName.value = cvendname
		thisform.swrptlook1.txtEndID.value = cvendorid
	ENDPROC

ENDDEFINE

DEFINE CLASS swrptwellid_wellname AS opgoptiongroupcustom OF "ccontrol.vcx" 		&& Well ID / Well Name option group
 	*< CLASSDATA: Baseclass="optiongroup" Timestamp="" Scale="Pixels" Uniqueid="" />

	AutoSize = .T.
	BorderStyle = 0
	ButtonCount = 2
	Height = 50
	Name = "swrptwellid_wellname"
	OLEDropMode = 0
	TabIndex = 1
	Width = 89
	Option1.BackStyle = 1
	Option1.Caption = "Well ID"
	Option1.FontSize = 8
	Option1.Height = 17
	Option1.Left = 5
	Option1.Name = "ID"
	Option1.Top = 5
	Option1.Width = 61
	Option2.Caption = "Well Name"
	Option2.FontSize = 8
	Option2.Height = 17
	Option2.Left = 5
	Option2.Name = "ByName"
	Option2.Top = 28
	Option2.Width = 79
	
	PROCEDURE Init
		this.id.value = 1
	ENDPROC

	PROCEDURE ByName.Click
		select wells
		set order to cwellname
		go top
		
		thisform.swrptlook1.txtBegName.value = cwellname
		thisform.swrptlook1.txtBegID.value = cwellid
		go bottom
		
		thisform.swrptlook1.txtEndName.value = cwellname
		thisform.swrptlook1.txtEndID.value = cwellid
	ENDPROC

	PROCEDURE ID.Click
		select wells
		set order to cwellid
		go top
		
		thisform.swrptlook1.txtBegName.value = cwellname
		thisform.swrptlook1.txtBegID.value = cwellid
		go bottom
		
		thisform.swrptlook1.txtEndName.value = cwellname
		thisform.swrptlook1.txtEndID.value = cwellid
	ENDPROC

ENDDEFINE

DEFINE CLASS swsortby_detail_summary AS opgoptiongroupcustom OF "ccontrol.vcx" 		&& Option Group to sort by Detail or Summary
 	*< CLASSDATA: Baseclass="optiongroup" Timestamp="" Scale="Pixels" Uniqueid="" />

	BorderStyle = 0
	ButtonCount = 2
	Height = 48
	Name = "swsortby_detail_summary"
	TabIndex = 1
	Width = 84
	Option1.Caption = "Detail"
	Option1.FontSize = 8
	Option1.Height = 17
	Option1.Left = 5
	Option1.Name = "Detail"
	Option1.Top = 5
	Option1.Width = 61
	Option2.Caption = "Summary"
	Option2.FontSize = 8
	Option2.Height = 17
	Option2.Left = 5
	Option2.Name = "Summary"
	Option2.Top = 28
	Option2.Width = 79
	
	PROCEDURE Detail.Init
		this.value = 1
	ENDPROC

ENDDEFINE

DEFINE CLASS swstate_list AS cbocomboboxcustom OF "ccontrol.vcx" 		&& State drop down listing
 	*< CLASSDATA: Baseclass="combobox" Timestamp="" Scale="Pixels" Uniqueid="" />

	BoundColumn = 2
	BoundTo = .T.
	ControlSource = ""
	Height = 20
	Margin = 2
	Name = "swstate_list"
	RowSource = ""
	RowSourceType = 0
	Value = 
	Width = 124

ENDDEFINE

DEFINE CLASS swtimer AS _timer OF "..\..\..\3rdparty\ffc\_base.vcx" 
 	*< CLASSDATA: Baseclass="timer" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*p: ncount
		*p: _memberdata		&& XML Metadata for customizable properties
	*</DefinedPropArrayMethod>

	Interval = 60000
	Name = "swtimer"
	ncount = 0
	_memberdata = <VFPData>
		<memberdata name="ncount" display="nCount"/>
		</VFPData>		&& XML Metadata for customizable properties
	
	PROCEDURE Timer
		LOCAL lcAlias
		TRY
		   lcAlias = ALIAS() 
		   swselect('logins')
		   lcUser = LOWER(ALLTRIM(m.goapp.cuser))
		   lcDevice = LOWER(ALLTRIM(SYS(0)))
		   LOCATE FOR LOWER(cuser) = ALLTRIM(LOWER(m.goapp.cuser)) AND LOWER(DEVICE) = lcDevice AND EMPTY(logged_out) AND forced_out
		
		   IF FOUND() AND THIS.nCount < 5
		      THIS.nCount = THIS.nCount + 1
		      MESSAGEBOX('You will be logged out in ' + TRANSFORM(6 - THIS.nCount) + ;
		         ' minutes. Please close all open forms and save any work.',0,'Application Terminating',10000)
		      IF THIS.nCount = 5
		         REPLACE logged_out WITH DATETIME()
		         USE IN logins
		         CLOSE DATABASES ALL
		         exitapp()
		      ENDIF
		   ELSE
		      THIS.nCount = 0
		   ENDIF
		   SELECT (lcAlias)
		CATCH TO loErr
		ENDTRY
		
	ENDPROC

ENDDEFINE

DEFINE CLASS swyear AS txttextboxcustom OF "ccontrol.vcx" 		&& Year text box
 	*< CLASSDATA: Baseclass="textbox" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*p: ldefvalue		&& T = Provides a default year if no year is entered.
		*p: lnoinit
	*</DefinedPropArrayMethod>

	Alignment = 0
	FontSize = 8
	Format = "K"
	Height = 20
	InputMask = "9999"
	lenabled = .T.
	Margin = 1
	Name = "swyear"
	TabIndex = 1
	Width = 37
	ZOrderSet = 3
	
	PROCEDURE Init
		IF NOT this.lNoInit
		   this.value = STR(YEAR(DATE()),4)
		ENDIF   
		DODEFAULT()
	ENDPROC

	PROCEDURE Valid
		IF THIS.lDefValue AND EMPTY(THIS.VALUE)
		   THIS.VALUE = STR(YEAR(DATE()),4)
		ELSE
		   IF LEN(ALLTRIM(this.Value)) = 2
		      this.Value = '20' + this.Value
		   ENDIF 
		   IF NOT BETWEEN(THIS.VALUE,'1900','2099')
		      WAIT WIND NOWAIT 'The year entered is not a valid year. Please re-enter...'
		      RETURN .f.
		   ENDIF
		
		   IF LEN(ALLTRIM(THIS.VALUE)) < 4
		      WAIT WIND NOWAIT 'The year entered is not a valid year. Please re-enter...'
		      RETURN .f.
		   ENDIF
		ENDIF
		
		DODEFAULT()
		
	ENDPROC

ENDDEFINE

DEFINE CLASS txtgridcustom AS textbox 
 	*< CLASSDATA: Baseclass="textbox" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: move2nextrow
		*p: cdatasource
		*p: corder
		*p: cparent
		*p: cstuffinkbbuffer
		*p: lfocus
		*p: ncurrecnum
		*p: ntimeelapsed
		*p: ntimestart
		*p: _memberdata		&& XML Metadata for customizable properties
	*</DefinedPropArrayMethod>

	BorderStyle = 0
	corder = 
	cstuffinkbbuffer = ""
	FontSize = 8
	Name = "txtgridcustom"
	ncurrecnum = 0
	ntimeelapsed = 0
	ntimestart = 0
	SpecialEffect = 1
	_memberdata = <VFPData>
		<memberdata name="move2nextrow" display="Move2NextRow"/>
		</VFPData>		&& XML Metadata for customizable properties
	
	PROCEDURE DblClick
		thisform.cmdokcancel.cmdok.click()
		
	ENDPROC

	PROCEDURE Init
		IF EMPTY(this.cDataSource)
		   this.cDataSource = this.ControlSource
		ENDIF  
		TRY  
		thisform.cparent = ''
		CATCH
		ENDTRY 
		DODEFAULT()
	ENDPROC

	PROCEDURE KeyPress
		LPARAMETERS nkeycode, nshiftaltctrl
		
		LOCAL lcData
		
		DO CASE
		   CASE nkeycode = 13  && enter
		      NODEFAULT
		      THIS.DBLCLICK()
		   CASE nkeycode = 24  && cursor down
		   CASE nkeycode = 18  && page up
		
		   CASE nkeycode = 3   && page down
		
		   CASE nkeycode = 1   && home
		      GO TOP
		      THISFORM.REFRESH()
		   CASE nkeycode = 6   && end
		      GO BOTT
		      THISFORM.REFRESH()
		   CASE nkeycode = 9   && tab
		   CASE nkeycode = 5   && up arrow
		       NODEFAULT
		       this.Move2NextRow(-1)
		   CASE nkeycode = 4   && cursor right
		   CASE nkeycode = 19  && cursor left
		   CASE nkeycode = 15  && back tab
		   CASE nkeycode = 24  && down arrow
		      NODEFAULT
		      this.Move2NextRow(1)
		   CASE nkeycode = 27  && escape
		      THISFORM.RELEASE()
		   CASE nkeycode = 28  && F1
		      THISFORM.callhelp(THISFORM.NAME)
		   OTHERWISE
		      NODEFAULT
		      TRY
		         * Avoid errors for date fields
		         lcSource = THIS.CONTROLSOURCE
		         IF TYPE(lcSource) = 'C'
		            THIS.nTimeElapsed = SECONDS() - THIS.nTimeStart
		            THIS.nCurRecNum   = RECNO()
		            THIS.cStuffInKBBuffer = IIF( THIS.nTimeElapsed > _DBLCLICK, ;
		                 CHR(nkeycode), ;
		                 THIS.cStuffInKBBuffer + CHR(nkeycode))
		            THISFORM.txtDisplay.VALUE = UPPER(IIF( THIS.nTimeElapsed > _DBLCLICK, ;
		                   CHR(nkeycode), ;
		                   THIS.cStuffInKBBuffer))
		            lcorder = THIS.corder
		            IF NOT EMPTY(lcorder)
		               *  Check to make sure the tag exists
		               FOR nCount = 1 TO 254
		                  IF !EMPTY(TAG(nCount))  && Checks for tags in the index
		                     IF UPPER(TAG(nCount)) = UPPER(lcorder)
		                        * The tag exists, so let's set the order to the tag given
		                        SET ORDER TO &lcorder
		                        lcFieldVal = ALLT(UPPER(THIS.cStuffInKBBuffer))
		                        * Store the record number because if the seek doesn't work
		                        * we don't want to end up at the bottom of the file.
		                        lnRecNo = RECNO()
		                        IF NOT SEEK(lcFieldVal)
		                           GOTO lnRecNo
		                        ENDIF
		                        THIS.PARENT.PARENT.REFRESH()
		                        EXIT
		                     ENDIF
		                  ELSE
		                     EXIT
		                  ENDIF
		               ENDFOR
		            ELSE
		               * No order set
		               lcData = THIS.cDataSource
		               SET NEAR ON
		               LOCATE FOR (UPPER(THIS.cStuffInKBBuffer)) $ ;
		                  UPPER(SUBSTR(&lcData, 1, LEN(THIS.cStuffInKBBuffer)))
		               IF FOUND()
		                  THISFORM.REFRESH()
		               ENDIF
		            ENDIF
		            THIS.nTimeStart = SECONDS()
		            SET NEAR OFF
		         ENDIF
		      CATCH TO loError
		          MESSAGEBOX(loError.Message,16,'txtGridCustom.Keypress')
		      ENDTRY
		ENDCASE
		
		
		
	ENDPROC

	PROCEDURE move2nextrow
		LPARAMETERS lnRow
		
		LOCAL lnMaxRows
		
		WITH THIS.PARENT.PARENT
		
		   lnMaxRows = INT(( .HEIGHT - .HEADERHEIGHT - IIF( INLIST( .SCROLLBARS, 1, 3), SYSMETRIC(8),0))/.ROWHEIGHT)
		
		   IF .RELATIVEROW >= lnMaxRows
		      .DOSCROLL(1)
		   ELSE
		      IF .RelativeRow = 1
		         .DoScroll(0)
		      ENDIF 
		      IF lnRow > 0
		         .ACTIVATECELL(.RELATIVEROW + 1, .RELATIVECOLUMN)
		      ELSE
		         .ACTIVATECELL(.RELATIVEROW - 1, .RELATIVECOLUMN)
		      ENDIF
		   ENDIF    
		ENDWITH
		
	ENDPROC

	PROCEDURE When
		LOCAL lcField, lcTable
		
		* ON KEY LABEL pgup _screen.activeform.pagekeys(18)
		* ON KEY LABEL pgdn _screen.activeform.pagekeys(3)
		
		DODEFAULT()
		
		* Get the table the lookup is based on and select it
		lcTable = thisform.cTable
		IF NOT EMPTY(lcTable)
		   SELECT (lcTable)
		ENDIF   
		
		*  Check the parent of this control to see if we switched columns
		*  If we switched columns, the order needs to be set.  This keeps
		*  us from setting the order when just moving up and down in the
		*  same column and allows us to get past fields with the same value
		
		IF thisform.cParent <> this.parent.name OR thisform.lInit
		   * Reset the parent name
		   THISFORM.cParent = this.parent.name
		   * Reset the Init property
		   THISFORM.lInit = .F.
		   lcOrder = THIS.cOrder
		   lcField = THIS.Parent.ControlSource
		   lnX = AT('.',lcField) 
		   IF lnX > 0
		      lcField = SUBSTR(lcField,lnX+1)
		   ENDIF   
		   IF NOT EMPTY(lcOrder)
		      *  Check to make sure the tag exists
		      FOR nCount = 1 TO 254
		         IF !EMPTY(TAG(nCount))  && Checks for tags in the index
		            IF UPPER(TAG(nCount))=UPPER(lcOrder)
		               * The tag exists, so let's set the order to the tag given
		               SET ORDER TO &lcOrder
		               lcFieldVal = EVAL(lcField)
		               * Store the record number because if the seek doesn't work
		               * we don't want to end up at the bottom of the file.
		               lnRecNo = RECNO()
		               IF NOT SEEK(lcFieldval)
		                  GOTO lnRecNo
		               ENDIF   
		               THIS.Parent.Parent.REFRESH()
		               EXIT
		            ENDIF
		         ELSE
		            EXIT  && Exit the loop when no more tags are found
		         ENDIF
		      ENDFOR
		   ENDIF
		ENDIF
		
		
		
	ENDPROC

ENDDEFINE

DEFINE CLASS txtswgrid AS txttextboxcustom OF "ccontrol.vcx" 
 	*< CLASSDATA: Baseclass="textbox" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: move2nextrow
		*p: _memberdata		&& XML Metadata for customizable properties
	*</DefinedPropArrayMethod>

	Name = "txtswgrid"
	_memberdata = <VFPData>
		<memberdata name="move2nextrow" display="Move2NextRow"/>
		</VFPData>		&& XML Metadata for customizable properties
	
	PROCEDURE KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		
		DO CASE
		   CASE nkeycode = 13  && enter
		      NODEFAULT
		      THIS.DBLCLICK()
		   CASE nkeycode = 24  && cursor down
		   CASE nkeycode = 18  && page up
		
		   CASE nkeycode = 3   && page down
		
		   CASE nkeycode = 1   && home
		      GO TOP
		      THISFORM.REFRESH()
		   CASE nkeycode = 6   && end
		      GO BOTT
		      THISFORM.REFRESH()
		   CASE nkeycode = 9   && tab
		   CASE nkeycode = 5   && up arrow
		       NODEFAULT
		       this.Move2NextRow(-1)
		   CASE nkeycode = 4   && cursor right
		   CASE nkeycode = 19  && cursor left
		   CASE nkeycode = 15  && back tab
		   CASE nkeycode = 24  && down arrow
		      NODEFAULT
		      this.Move2NextRow(1)
		   CASE nkeycode = 27  && escape
		      THISFORM.RELEASE()
		ENDCASE       
	ENDPROC

	PROCEDURE move2nextrow
		LPARAMETERS lnRow
		
		LOCAL lnMaxRows
		
		WITH THIS.PARENT.PARENT
		
		   lnMaxRows = INT(( .HEIGHT - .HEADERHEIGHT - IIF( INLIST( .SCROLLBARS, 1, 3), SYSMETRIC(8),0))/.ROWHEIGHT)
		
		   IF .RELATIVEROW >= lnMaxRows
		      .DOSCROLL(1)
		   ELSE
		      IF .RelativeRow = 1
		         .DoScroll(0)
		      ENDIF 
		      IF lnRow > 0
		         .ACTIVATECELL(.RELATIVEROW + 1, .RELATIVECOLUMN)
		      ELSE
		         .ACTIVATECELL(.RELATIVEROW - 1, .RELATIVECOLUMN)
		      ENDIF
		   ENDIF    
		ENDWITH
		
	ENDPROC

ENDDEFINE
