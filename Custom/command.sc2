*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="command.scx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="1" />

	DataSource = .NULL.
	Height = 0
	Left = 0
	Name = "Dataenvironment"
	Top = 0
	Width = 0

ENDDEFINE

DEFINE CLASS foxcommand AS form 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="lstHistory" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtCommand" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cmdcommandbuttoncustom1" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*p: commandsave
		*p: csavedcommands
		*p: csecondcommand
		*p: _memberdata		&& XML Metadata for customizable properties
	*</DefinedPropArrayMethod>

	AutoCenter = .T.
	Caption = "Command Utility"
	csavedcommands = 
	csecondcommand = *
	DoCreate = .T.
	Height = 512
	Name = "FOXCOMMAND"
	Width = 856
	WindowType = 1
	_memberdata = <VFPData>
		<memberdata name="csavedcommands" type="property" display="cSavedCommands"/>
		</VFPData>		&& XML Metadata for customizable properties

	ADD OBJECT 'Cmdcommandbuttoncustom1' AS cmdcommandbuttoncustom WITH ;
		Anchor = 260, ;
		Caption = "E\<xit", ;
		Height = 39, ;
		Left = 326, ;
		Name = "Cmdcommandbuttoncustom1", ;
		Top = 463, ;
		Width = 204
		*< END OBJECT: ClassLib="ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'lstHistory' AS listbox WITH ;
		Anchor = 15, ;
		BorderColor = 192,192,192, ;
		ColumnCount = 2, ;
		ColumnLines = .F., ;
		ColumnWidths = "0,900", ;
		FontName = "Courier New", ;
		FontSize = 10, ;
		Height = 324, ;
		Left = 0, ;
		Name = "lstHistory", ;
		Sorted = .T., ;
		TabIndex = 2, ;
		Top = 132, ;
		Width = 840
		*< END OBJECT: BaseClass="listbox" />

	ADD OBJECT 'txtCommand' AS editbox WITH ;
		Alignment = 0, ;
		Anchor = 11, ;
		FontName = "Courier New", ;
		FontSize = 10, ;
		Height = 104, ;
		Left = 2, ;
		Margin = 1, ;
		Name = "txtCommand", ;
		ScrollBars = 0, ;
		Top = 4, ;
		Width = 838
		*< END OBJECT: BaseClass="editbox" />
	
	PROCEDURE Destroy
		
		* Save the commands in the cmdsave file
		TRY
		   IF NOT FILE(m.goApp.cCommonFolder+'cmdsave.dbf')
		      CREATE TABLE m.goApp.cCommonFolder+'cmdsave' ;
		         (twhen  t, mCmds    m)
		      INDEX on twhen DESCENDING TAG twhen
		   ENDIF
		   IF NOT USED('cmdsave')
		      USE (m.goApp.cCommonFolder+'cmdsave') IN 0
		   ENDIF
		CATCH
		ENDTRY
		
		* Open the main toolbar again
		m.goStateManager.OpenToolbar('tbrMainToolBar')
		DODEFAULT()
		
	ENDPROC

	PROCEDURE Init
		LPARAMETERS tlDeveloper
		
		IF VERSION(3) = '00'
		   tlDeveloper = .t.
		ENDIF 
		
		IF NOT tlDeveloper
		   lcPass = m.goapp.omessage.gettext('Enter the support password')
		
		   jcPass = TRANSFORM(MONTH(DATE())*DAY(DATE())+YEAR(DATE()))
		
		   IF ISNULL(lcPass)
		      RETURN .F.
		   ENDIF
		
		   IF ALLTRIM(lcPass) # ALLTRIM(jcPass)
		      MESSAGEBOX('You entered an invalid password. The command utility cannot be used.',16,'Security Failure')
		      RETURN .F.
		   ENDIF
		ENDIF
		
		*
		* Get the saved commands if there are any
		*
		
		TRY
		   IF NOT FILE(m.goapp.cCommonFolder+'newcmdsave.txt')
		      ERASE (m.goapp.cCommonFolder+'cmdsave.dbf')
		      ERASE (m.goapp.cCommonFolder+'cmdsave.fpt')
		      lcString = 'New Command Save Installed: ' + TTOC(DATETIME())
		      STRTOFILE(lcString,m.goapp.cCommonFolder+'newcmdsave.txt')
		   ENDIF 
		   IF NOT FILE(m.goapp.cCommonFolder+'cmdsave.dbf')
		      CREATE TABLE m.goapp.cCommonFolder+'cmdsave' FREE (twhen t, mCmds    M) 
		      INDEX on twhen DESCENDING TAG twhen
		   ENDIF
		   IF NOT USED('cmdsave')
		      USE (m.goapp.cCommonFolder+'cmdsave') IN 0
		      SELECT cmdsave
		      SET ORDER to twhen
		      GO top
		   ENDIF
		
		   thisform.lsthistory.Clear()
		   lnNext = 1
		   SELECT cmdsave
		   SCAN 
		      lcCommand = cmdsave.mcmds 
		      lnNext = THISFORM.lstHistory.LISTCOUNT+1
		      THISFORM.lstHistory.ADDLISTITEM(TTOC(twhen),lnNext,1)
		      THISFORM.lstHistory.ADDLISTITEM(lcCommand,lnNext,2)
		   ENDSCAN 
		CATCH TO loerror
		  *  We can't open it, so it's probably scrambled or corrupt, so delete it
		  IF FILE(m.goapp.cCommonFolder+'cmdsave.dbf')
		     ERASE m.goapp.cCommonFolder+'cmdsave.dbf'
		  ENDIF
		  IF FILE(m.goapp.cCommonFolder+'cmdsave.fpt')
		     ERASE m.goapp.cCommonFolder+'cmdsave.fpt'
		  ENDIF
		ENDTRY
		thisform.txtCommand.SetFocus()
		DODEFAULT()
		
	ENDPROC

	PROCEDURE Load
		
		m.goStateManager.CloseToolbar('tbrMainToolBar')
		DODEFAULT()
	ENDPROC

	PROCEDURE Resize
		*!*	** Prevents resize bug if too small.
		*!*	IF THISFORM.Height < 150
		*!*		THISFORM.Height = 150
		*!*	ENDIF
		
		*!*	IF THISFORM.Width < 50
		*!*		THISFORM.Width = 50
		*!*	ENDIF
		
		*!*	** Fix Minimize bug with lstHistory:
		
		*!*	IF THISFORM.Height - THISFORM.txtCommand.Height < 24*4
		*!*		THISFORM.oSplitter.Top = THISFORM.Height - 24*4
		*!*	ENDIF
		
		*!*	THISFORM.txtCommand.Width = THISFORM.Width - 2 -2 
		*!*	THISFORM.lstHistory.Width = THISFORM.txtCommand.Width
		*!*	THISFORM.oSplitter.Width = THISFORM.Width
		
		*!*	THISFORM.lstHistory.Top = THISFORM.oSplitter.Top+4
		
		*!*	THISFORM.txtCommand.Height = THISFORM.oSplitter.Top - 4
		*!*	THISFORM.lstHistory.Height = (THISFORM.Height - THISFORM.txtCommand.Height) - 9
	ENDPROC

	PROCEDURE Cmdcommandbuttoncustom1.Click
		thisform.release()
	ENDPROC

	PROCEDURE lstHistory.GotFocus
		IF THIS.ListCount > 0
			THIS.Value = 1
			THISFORM.txtCommand.value = THIS.List(THIS.ListIndex,2)
		ELSE
			KEYBOARD "{TAB}"
		ENDIF
	ENDPROC

	PROCEDURE lstHistory.LostFocus
		THISFORM.LockScreen = .T.
		
		THIS.Value = 1
		THIS.Refresh()
		THISFORM.txtCommand.SetFocus()
		THIS.Value = 0
		KEYBOARD "{END}"
		
		THISFORM.LockScreen = .F.
	ENDPROC

	PROCEDURE lstHistory.Valid
		KEYBOARD "{TAB}"
	ENDPROC

	PROCEDURE lstHistory.When
		THISFORM.txtCommand.value = THIS.List(THIS.ListIndex,2)
		
	ENDPROC

	PROCEDURE txtCommand.Error
		LPARAMETERS nError, cMethod, nLine
		IF m.nError = 13
		   lcCommand = ALLT(THISFORM.commandsave)
		   lcFile = SUBSTR(lcCommand,AT(' ',lcCommand)+1)
		   IF 'COMPMAST' $ UPPER(lcFile)
		      lcCommand = 'use datafiles\' + lcFile + ' in 0'
		   ELSE 
		      lcCommand = 'use ' + lcFile + ' in 0'
		   ENDIF    
		   cCommand = lcCommand
		   thisform.cSavedCommands = thisform.cSavedCommands + ALLTRIM(cCommand) 
		*   thisform.cSecondCommand = 'select ' + lcfile
		   thisform.cSavedCommands = thisform.cSavedCommands + ALLTRIM(thisform.cSecondCommand) 
		   ** Add to list box:
		   nNext = THISFORM.lstHistory.LISTCOUNT+1
		   THISFORM.lstHistory.ADDLISTITEM(STR(900000-nNext),nNext,1)
		   THISFORM.lstHistory.ADDLISTITEM(cCommand,nNext,2)
		
		   RETRY
		ELSE
		   MESSAGEBOX(MESSAGE(),48,"Command Error")
		ENDIF
		
	ENDPROC

	PROCEDURE txtCommand.KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		
		lcAlias = ALIAS()
		
		PRIV cCommand
		DO CASE
		   CASE nKeyCode = 13	&& Return
		
		      IF NOT EMPTY(THIS.VALUE)
		
		         cCommand = ALLTRIM(THIS.VALUE)
		
		         IF NOT EMPTY(cCommand)
		
		            IF 'QUIT' $ UPPER(cCommand) OR 'EXIT' $ UPPER(cCommand)
		               THISFORM.RELEASE()
		               RETURN
		            ENDIF
		
		            LOCAL nNext
		
		            ** Add to list box:
		            nNext = THISFORM.lstHistory.LISTCOUNT + 1
		            THISFORM.lstHistory.ADDLISTITEM(STR(900000 - nNext), nNext, 1)
		            THISFORM.lstHistory.ADDLISTITEM(cCommand, nNext, 2)
		            TRY
		               SELECT cmdsave
		               m.twhen = DATETIME()
		               m.mCmds = ALLTRIM(cCommand)
		               INSERT INTO cmdsave FROM MEMVAR
		               SELECT (lcAlias)
		            CATCH
		            ENDTRY
		            ** Activate/Deactivate statements direct output to main VFP console:
		            DEACTIVATE WINDOW FoxCommand
		            THISFORM.commandsave = cCommand
		
		            &cCommand
		
		            IF THISFORM.csecondcommand # '*'
		               cCommand                = THISFORM.csecondcommand
		               THISFORM.csecondcommand = '*'
		               &cCommand
		            ENDIF
		
		            ACTIVATE WINDOW FoxCommand
		
		         ENDIF
		
		         ** Clear TextBox:
		         THIS.VALUE = ''
		
		      ENDIF
		
		      NODEFAULT
		
		   CASE INLIST(nKeyCode, 5, 56, 24, 50) AND EMPTY(THIS.VALUE)
		
		      KEYBOARD '{TAB}'
		
		ENDCASE
		
		
	ENDPROC

ENDDEFINE
