*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="picklist.scx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="1" />

	AutoOpenTables = .T.
	DataSource = .NULL.
	Height = 200
	Left = -14
	Name = "Dataenvironment"
	Top = 236
	Width = 520

ENDDEFINE

DEFINE CLASS formpicklist AS frmformcustom OF "cforms.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="GrdPickList" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="GrdPickList.Column1.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="GrdPickList.Column1.Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="GrdPickList.Column2.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="GrdPickList.Column2.Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="CmdOKCancel" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lblfieldlabelcustom1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtDisplay" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="ChkInactive" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: changeorder
		*m: pagekeys
		*p: cfieldlist
		*p: ckeyfield
		*p: cparent
		*p: ctable
		*p: ctag
		*p: custtype
		*p: lcatcode
		*p: linit		&& .T. when the form is 1st initalized.
		*p: ncurrecnum
	*</DefinedPropArrayMethod>

	AutoCenter = .F.
	BufferMode = 0
	Caption = "Record Lookup"
	custtype = 'C'
	DoCreate = .T.
	FontName = "Times New Roman"
	FontSize = 8
	Height = 464
	KeyPreview = .F.
	lcloseonescape = .T.
	Left = 0
	linit = .T.		&& .T. when the form is 1st initalized.
	Name = "FormPickList"
	ncurrecnum = 0
	Top = 0
	Width = 618
	WindowState = 0
	WindowType = 1
	Mwresize1.LBLHIGHLIGHT.Name = "LBLHIGHLIGHT"
	Mwresize1.LBLSHADING.Name = "LBLSHADING"
	Mwresize1.Left = 480
	Mwresize1.Name = "Mwresize1"
	Mwresize1.Top = 24
	Mwresize1.ZOrderSet = 5

	ADD OBJECT 'ChkInactive' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Anchor = 3, ;
		Caption = "Show Inactive", ;
		Left = 239, ;
		Name = "ChkInactive", ;
		Top = 7, ;
		Value = .F., ;
		Visible = .F., ;
		ZOrderSet = 4
		*< END OBJECT: ClassLib="..\..\..\codeminenew\ampro_rv\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'CmdOKCancel' AS cntokcancelcustom WITH ;
		Anchor = 768, ;
		Height = 36, ;
		Left = 276, ;
		Name = "CmdOKCancel", ;
		Top = 416, ;
		Width = 163, ;
		ZOrderSet = 1, ;
		cmdcancel.Height = 34, ;
		cmdcancel.Left = 87, ;
		cmdcancel.Name = "cmdcancel", ;
		cmdcancel.Top = 2, ;
		cmdcancel.Width = 75, ;
		cmdok.Height = 34, ;
		cmdok.Left = 1, ;
		cmdok.Name = "cmdok", ;
		cmdok.Top = 2, ;
		cmdok.Width = 75
		*< END OBJECT: ClassLib="cbutton.vcx" BaseClass="container" />

	ADD OBJECT 'GrdPickList' AS grid WITH ;
		Anchor = 15, ;
		ColumnCount = 2, ;
		DeleteMark = .F., ;
		FontName = "Arial", ;
		FontSize = 8, ;
		HeaderHeight = 17, ;
		Height = 341, ;
		Left = 3, ;
		Name = "GrdPickList", ;
		Panel = 1, ;
		ReadOnly = .T., ;
		RecordSource = "", ;
		RowHeight = 17, ;
		ScrollBars = 2, ;
		Top = 71, ;
		Width = 597, ;
		ZOrderSet = 0, ;
		Column1.BackColor = 255,255,255, ;
		Column1.ControlSource = "", ;
		Column1.FontName = "Arial", ;
		Column1.FontSize = 8, ;
		Column1.Name = "Column1", ;
		Column1.ReadOnly = .T., ;
		Column1.Width = 75, ;
		Column2.BackColor = 255,255,255, ;
		Column2.ControlSource = "", ;
		Column2.FontName = "Arial", ;
		Column2.FontSize = 8, ;
		Column2.Name = "Column2", ;
		Column2.ReadOnly = .T., ;
		Column2.Width = 278
		*< END OBJECT: BaseClass="grid" />

	ADD OBJECT 'GrdPickList.Column1.Header1' AS header WITH ;
		Caption = "Header 1", ;
		FontName = "Arial", ;
		FontSize = 8, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'GrdPickList.Column1.Text1' AS textbox WITH ;
		Anchor = 512, ;
		BackColor = 255,255,255, ;
		Height = 23, ;
		Left = 34, ;
		Name = "Text1", ;
		Top = 23, ;
		Width = 100
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'GrdPickList.Column2.Header1' AS header WITH ;
		Caption = "Header 2", ;
		FontName = "Arial", ;
		FontSize = 8, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'GrdPickList.Column2.Text1' AS textbox WITH ;
		Anchor = 512, ;
		BackColor = 255,255,255, ;
		Height = 23, ;
		Left = 210, ;
		Name = "Text1", ;
		Top = 23, ;
		Width = 100
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'Lblfieldlabelcustom1' AS lblfieldlabelcustom WITH ;
		Anchor = 3, ;
		Caption = "Search For:", ;
		FontBold = .T., ;
		Left = 12, ;
		Name = "Lblfieldlabelcustom1", ;
		Top = 41, ;
		ZOrderSet = 2
		*< END OBJECT: ClassLib="ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'txtDisplay' AS txttextboxcustom WITH ;
		Anchor = 3, ;
		Height = 20, ;
		Left = 84, ;
		Name = "txtDisplay", ;
		Top = 39, ;
		Width = 144, ;
		ZOrderSet = 3
		*< END OBJECT: ClassLib="ccontrol.vcx" BaseClass="textbox" />
	
	PROCEDURE beforeclose
		LPARAMETERS nclosereason
		
		this.cmdokcancel.cmdcancel.click()
	ENDPROC

	PROCEDURE changeorder
		LOCAL lcTable
		
		lcTable = THISFORM.cTable
		
		SWSELECT(lcTable)
		
		liColumn = THISFORM.grdpicklist.ACTIVECOLUMN
		
		lcOrder = THISFORM.grdpicklist.COLUMNS[liColumn].txtgridcustom.corder
		lcField = THISFORM.grdpicklist.COLUMNS[liColumn].CONTROLSOURCE
		
		lnX = AT('.',lcField)
		IF lnX > 0
		   lcField = SUBSTR(lcField,lnX+1)
		ENDIF
		
		IF NOT EMPTY(lcOrder)
		   *  Check to make sure the tag exists
		   FOR nCount = 1 TO 254
		      IF !EMPTY(TAG(nCount))  && Checks for tags in the index
		         IF UPPER(TAG(nCount))=UPPER(lcOrder)
		            * The tag exists, so let's set the order to the tag given
		            SET ORDER TO &lcOrder
		            lcFieldVal = EVAL(lcField)
		            * Store the record number because if the seek doesn't work
		            * we don't want to end up at the bottom of the file.
		            lnRecNo = RECNO()
		            IF NOT SEEK(lcFieldVal)
		               GOTO lnRecNo
		            ENDIF
		            THISFORM.REFRESH()
		            EXIT
		         ENDIF
		      ELSE
		         EXIT  && Exit the loop when no more tags are found
		      ENDIF
		   ENDFOR
		ENDIF
		
	ENDPROC

	PROCEDURE Init
		LPARAMETERS tcTable, tcFieldList, tcKeyField, tnColumns, tlCursor, tlCaption, tcFormCaption, tnHelpID
		
		DODEFAULT()
		
		IF TYPE('tcFormCaption') # 'L'  &&  Not .f., so something got passed - set the caption on this form to that value
		   THIS.CAPTION = tcFormCaption
		ENDIF
		
		THIS.cTable     = tcTable
		THIS.cFieldList = tcFieldList
		THIS.cKeyField  = tcKeyField
		
		LOCAL lnpos, lcfield, lcControl, lcAlias, lctag, lnpos2, lnGridWidth, lcSaveTag
		LOCAL lnCount, lcSaveControl
		
		* Set the help context id that was passed
		IF VARTYPE(tnHelpID) = 'N'
		   THISFORM.HELPCONTEXTID = tnHelpID
		ENDIF
		
		lnpos                        = 0
		lnpos2                       = 0
		lnPos3                       = 0
		lnGridWidth                  = 0
		lcfield                      = tcFieldList
		THIS.grdPickList.COLUMNCOUNT = tnColumns
		
		* Set the filter to not include inactive records
		DO CASE
		   CASE THIS.cTable = 'Wells'
		      SWSELECT('options')
		      GO TOP
		      llShowInact                  = lShowInact
		      THISFORM.chkinactive.VISIBLE = .T.
		      THISFORM.chkinactive.VALUE   = llShowInact
		      IF llShowInact
		         SWSELECT('wells')
		         SET FILTER TO
		      ELSE
		         SWSELECT('wells')
		         SET FILTER TO NOT INLIST(cWellStat, 'I', 'S', 'P')
		      ENDIF
		
		   CASE THIS.cTable = 'Allunits'
		      SWSELECT('options')
		      GO TOP
		      llShowInact                  = lShowInact
		      THISFORM.chkinactive.VISIBLE = .T.
		      THISFORM.chkinactive.VALUE   = llShowInact
		      IF llShowInact
		         SELE allunits
		         SET FILTER TO
		      ELSE
		         SELE allunits
		         SET FILTER TO NOT INLIST(cStatus, 'I', 'S', 'P')
		      ENDIF
		   OTHERWISE
		      TRY
		         SWSELECT(THISFORM.cTable)
		         SET FILTER TO NOT lInactive
		      CATCH
		      ENDTRY
		ENDCASE
		
		IF THIS.cTable = 'Investor'
		   THISFORM.chkinactive.VISIBLE = .T.
		ENDIF
		
		
		lcSaveTag     = ''
		lcSaveControl = ''
		
		IF NOT USED('coremeta')
		   IF FILE('coremeta.dbf')
		      USE coremeta IN 0
		   ENDIF
		ENDIF
		
		* pws 1/27/00 Added recordsource so more than the 1st record displays
		THIS.grdPickList.RECORDSOURCE = tcTable
		
		lcAlias = ALIAS()
		SWSELECT(tcTable)
		GO TOP
		
		*
		* Add the SearchBox class in the place of all standard TextBox objects in a grid
		*
		lnCount = 0
		
		FOR EACH loColumn IN THISFORM.grdPickList.COLUMNS
		   *
		   * Add a SearchBox to each default column
		   *
		   lnCount = lnCount + 1
		   lnpos   = AT(',', lcfield)
		   IF lnpos > 0
		      lctag   = ALLT(LEFT(lcfield, lnpos - 1))
		      lcTag1  = ALLT(LEFT(lcfield, lnpos - 1))
		      lnpos2  = AT('/', lctag)
		      lnPos3  = AT('\', lctag)
		      lcfield = ALLT(SUBSTR(lcfield, lnpos + 1))
		      IF lnpos2 > 0
		         lcControl = ALLT(tcTable) + '.' + ALLT(LEFT(lctag, lnpos2 - 1))
		         IF lnPos3 > 0
		            lctag = ALLT(SUBSTR(lctag, lnpos2 + 1, lnPos3 - lnpos2 - 1))
		         ELSE
		            lctag = ALLT(SUBSTR(lctag, lnpos2 + 1))
		         ENDIF
		      ELSE
		         IF lnPos3 > 0
		            lcControl = ALLT(tcTable) + '.' + ALLT(SUBSTR(lctag, 1, lnPos3 - 1))
		            lctag     = ALLTRIM(SUBSTR(lctag, 1, lnPos3 - 1))
		         ELSE
		            lcControl = ALLT(tcTable) + '.' + ALLT(lctag)
		         ENDIF
		      ENDIF
		   ELSE  &&check for '/'
		      lctag  = lcfield
		      lcTag1 = lcfield
		      lnpos2 = AT('/', lctag)
		      lnPos3 = AT('\', lctag)
		      IF lnpos2 > 0
		         lcControl = ALLT(tcTable) + '.' + ALLT(LEFT(lctag, lnpos2 - 1))
		         llmemo    = IIF(UPPER(LEFT(lctag, 1)) = 'M', .T., .F.)
		         IF lnPos3 > 0
		            lctag = ALLT(SUBSTR(lctag, lnpos2 + 1, lnPos3 - lnpos2 - 1))
		         ELSE
		            lctag = ALLT(SUBSTR(lctag, lnpos2 + 1))
		         ENDIF
		      ELSE
		         lnpos2 = AT('.', lctag)
		         IF lnpos2 > 0
		            IF lnPos3 > 0
		               lcControl = ALLTRIM(SUBSTR(lctag, 1, lnPos3 - 1))
		            ELSE
		               lcControl = ALLT(lctag)
		            ENDIF
		            llmemo = IIF(UPPER(LEFT(lctag, 1)) = 'M', .T., .F.)
		         ELSE
		            IF lnPos3 > 0
		               lcControl = ALLT(tcTable) + '.' + ALLT(SUBSTR(lctag, 1, lnPos3 - 1))
		               lctag     = ALLT(SUBSTR(lctag, 1, lnPos3 - 1))
		            ELSE
		               lcControl = ALLT(tcTable) + '.' + ALLT(lctag)
		               lctag     = ALLT(lctag)
		            ENDIF
		            llmemo = IIF(UPPER(LEFT(lctag, 1)) = 'M', .T., .F.)
		         ENDIF
		      ENDIF
		   ENDIF
		
		   IF lnCount = 1
		      IF lnPos3 > 0
		         lcSaveTag = SUBSTR(lctag, 1, lnPos3 - 1)
		      ELSE
		         lcSaveTag = lctag
		      ENDIF
		      lcSaveControl = lcControl
		   ENDIF
		
		   loColumn.CONTROLSOURCE = lcControl
		   loColumn.SPARSE        = .F.
		
		   *  If the data we're using is not a cursor, then get the caption from the DBC
		   IF NOT tlCursor
		      IF NOT tlCaption
		         SET DATABASE TO appdata
		         loColumn.Header1.CAPTION  = DBGETPROP(loColumn.CONTROLSOURCE, 'Field', 'Caption')
		         loColumn.FONTNAME         = 'Arial'
		         loColumn.Header1.FONTNAME = 'Arial'
		         loColumn.FONTSIZE         = 8
		         loColumn.Header1.FONTSIZE = 8
		      ELSE
		         IF lnPos3 > 0
		            loColumn.Header1.CAPTION = ALLTRIM(SUBSTR(lcTag1, lnPos3 + 1))
		         ELSE
		            loColumn.Header1.CAPTION = ''
		         ENDIF
		         loColumn.FONTNAME         = 'Arial'
		         loColumn.Header1.FONTNAME = 'Arial'
		         loColumn.FONTSIZE         = 8
		         loColumn.Header1.FONTSIZE = 8
		      ENDIF
		   ELSE
		      IF tlCaption
		         IF lnPos3 > 0
		            loColumn.Header1.CAPTION = ALLTRIM(SUBSTR(lcTag1, lnPos3 + 1))
		         ELSE
		            loColumn.Header1.CAPTION = ''
		         ENDIF
		         loColumn.FONTNAME         = 'Arial'
		         loColumn.Header1.FONTNAME = 'Arial'
		         loColumn.FONTSIZE         = 8
		         loColumn.Header1.FONTSIZE = 8
		      ENDIF
		   ENDIF
		
		   *GET FIELD WIDTHS
		   IF USED('coremeta')
		      SELE coremeta
		      lcControl1 = SUBSTR(lcControl, AT('.', lcControl) + 1)
		      LOCATE FOR LOWER(lcControl1) $ cobjectnam AND crectype = 'F'
		      IF FOUND()
		         lnSize = nsize
		         IF lnSize > 40
		            lnSize = 40
		         ENDIF
		         loColumn.WIDTH = INT(7.5 * lnSize) + 14
		         lnGridWidth    = lnGridWidth + loColumn.WIDTH
		         * If the data is in a cursor, get the caption in coremeta
		         IF tlCursor
		            IF NOT tlCaption
		               loColumn.Header1.CAPTION  = TRIM(cCaption)
		               loColumn.FONTNAME         = 'Arial'
		               loColumn.Header1.FONTNAME = 'Arial'
		               loColumn.FONTSIZE         = 8
		               loColumn.Header1.FONTSIZE = 8
		            ELSE
		               IF lnPos3 > 0
		                  loColumn.Header1.CAPTION = ALLTRIM(SUBSTR(lcTag1, lnPos3 + 1))
		               ELSE
		                  loColumn.Header1.CAPTION = ''
		               ENDIF
		               loColumn.FONTNAME         = 'Arial'
		               loColumn.Header1.FONTNAME = 'Arial'
		               loColumn.FONTSIZE         = 8
		               loColumn.Header1.FONTSIZE = 8
		            ENDIF
		         ENDIF
		      ELSE
		         IF tlCursor
		            LOCATE FOR TRIM(lctag) $ cobjectnam AND crectype = 'F'
		            IF FOUND()
		               lnSize = nsize
		               IF lnSize > 40
		                  lnSize = 40
		               ENDIF
		               loColumn.WIDTH = INT(7.5 * lnSize) + 14
		               lnGridWidth    = lnGridWidth + loColumn.WIDTH
		               IF NOT tlCaption
		                  loColumn.Header1.CAPTION  = TRIM(cCaption)
		                  loColumn.FONTNAME         = 'Arial'
		                  loColumn.Header1.FONTNAME = 'Arial'
		                  loColumn.FONTSIZE         = 8
		                  loColumn.Header1.FONTSIZE = 8
		               ELSE
		                  IF lnPos3 > 0
		                     loColumn.Header1.CAPTION = ALLTRIM(SUBSTR(lcTag1, lnPos3 + 1))
		                  ELSE
		                     loColumn.Header1.CAPTION = ''
		                  ENDIF
		                  loColumn.FONTNAME         = 'Arial'
		                  loColumn.Header1.FONTNAME = 'Arial'
		                  loColumn.FONTSIZE         = 8
		                  loColumn.Header1.FONTSIZE = 8
		               ENDIF
		            ELSE
		               DO CASE
		                  CASE UPPER(lctag) = 'CPRODUCER'
		                     loColumn.WIDTH            = INT(7.5 * 40) + 14
		                     lnGridWidth               = lnGridWidth + loColumn.WIDTH
		                     loColumn.Header1.CAPTION  = 'Company Name'
		                     loColumn.FONTNAME         = 'Arial'
		                     loColumn.Header1.FONTNAME = 'Arial'
		                     loColumn.FONTSIZE         = 8
		                     loColumn.Header1.FONTSIZE = 8
		
		                  CASE UPPER(lctag) = 'CDATAPATH'
		                     loColumn.WIDTH            = INT(7.5 * 40) + 14
		                     lnGridWidth               = lnGridWidth + loColumn.WIDTH
		                     loColumn.Header1.CAPTION  = 'Data Path'
		                     loColumn.FONTNAME         = 'Arial'
		                     loColumn.Header1.FONTNAME = 'Arial'
		                     loColumn.FONTSIZE         = 8
		                     loColumn.Header1.FONTSIZE = 8
		
		                  OTHERWISE
		                     SWSELECT(tcTable)
		                     loColumn.WIDTH = INT(7.5 * FSIZE(lctag, tcTable)) + 14
		                     lnGridWidth    = lnGridWidth + loColumn.WIDTH
		                     IF NOT tlCaption
		                        loColumn.Header1.CAPTION = ' '
		                     ELSE
		                        loColumn.Header1.CAPTION = ALLTRIM(SUBSTR(lcTag1, lnPos3 + 1))
		                     ENDIF
		                     loColumn.FONTNAME         = 'Arial'
		                     loColumn.Header1.FONTNAME = 'Arial'
		                     loColumn.FONTSIZE         = 8
		                     loColumn.Header1.FONTSIZE = 8
		               ENDCASE
		            ENDIF
		         ENDIF
		      ENDIF
		   ENDIF
		
		   IF EVAL('loColumn.' + loColumn.CURRENTCONTROL + '.Class') == 'Textbox'
		      *
		      * Add a search textbox and make it the default control
		      * Only replace standard text boxes
		      *
		      loColumn.ADDOBJECT('txtGridCustom', 'txtGridCustom')
		      loColumn.txtGridCustom.VISIBLE = .T.
		      loColumn.CURRENTCONTROL        = 'txtGridCustom'
		      loColumn.READONLY              = .T.
		      loColumn.txtGridCustom.cOrder  = lctag
		   ENDIF
		ENDFOR
		
		THISFORM.grdPickList.WIDTH = lnGridWidth + 34
		IF THISFORM.grdPickList.WIDTH > 350
		   THISFORM.WIDTH = THISFORM.grdPickList.WIDTH + 5
		ELSE
		   THISFORM.WIDTH             = 355
		   THISFORM.grdPickList.WIDTH = 350
		ENDIF
		THISFORM.cmdokcancel.LEFT = (THIS.WIDTH / 2 - THISFORM.cmdokcancel.WIDTH / 2)
		THISFORM.chkInactive.LEFT = (THIS.WIDTH / 2 - THISFORM.chkInactive.WIDTH / 2)
		THIS.HEIGHT               = THISFORM.cmdokcancel.TOP + THISFORM.cmdokcancel.HEIGHT + 25
		THIS.AUTOCENTER           = .T.
		IF USED('coremeta')
		   USE IN coremeta
		ENDIF
		
		SWSELECT(tcTable)
		IF NOT EMPTY(lcSaveTag)
		   *  Check to make sure the tag exists
		   FOR nCount = 1 TO 254
		      IF NOT EMPTY(TAG(nCount))  && Checks for tags in the index
		         IF UPPER(TAG(nCount)) = UPPER(lcSaveTag)
		            * The tag exists, so let's set the order to the tag given
		            SET ORDER TO &lcSaveTag
		            EXIT
		         ENDIF
		      ELSE
		         EXIT  && Exit the loop when no more tags are found
		      ENDIF
		   ENDFOR
		ENDIF
		
		TRY
		   SWSELECT(tcTable)
		   IF NOT EMPTY(lcSaveTag)
		      IF NOT SEEK(THIS.cKeyField)
		         IF VARTYPE(lcControl) = VARTYPE(THIS.cKeyField)
		            LOCATE FOR (lcControl) = THIS.cKeyField
		            IF NOT FOUND()
		               GO TOP
		            ENDIF
		         ELSE
		            GO TOP
		         ENDIF
		      ENDIF
		   ENDIF
		CATCH
		ENDTRY
		
		
	ENDPROC

	PROCEDURE Load
		PUSH KEY 
		ON KEY LABEL F2 *
		ON KEY LABEL F3 *
		ON KEY LABEL f5 *
		ON KEY LABEL F10 *
		DODEFAULT()
	ENDPROC

	PROCEDURE pagekeys
		LPARAMETERS nkeycode
		
		DO CASE 
		   CASE nkeycode = 18
		      keyboard "{pgup}" PLAIN
		   CASE nkeycode = 3
		      keyboard "{pgdn}" PLAIN
		ENDCASE      
		      
		
	ENDPROC

	PROCEDURE Resize
		  THIS.LockScreen = .T.
		  THIS.RepositionContents(THIS)
		  THIS.LockScreen = .F.
	ENDPROC

	PROCEDURE Unload
		IF this.ctable = 'Wells'
		   SELE wells
		   SET FILTER TO
		ENDIF   
		ON KEY LABEL F3
		DODEFAULT()
		POP KEY
	ENDPROC

	PROCEDURE ChkInactive.Click
		
		IF NOT THIS.VALUE
		   TRY
		      DO CASE
		         CASE THISFORM.cTable = 'Wells'
		            SWSELECT('wells')
		            SET FILTER TO NOT INLIST(cWellStat, 'I', 'S', 'P')
		         CASE THISFORM.cTable = 'Allunits'
		            SELECT Allunits
		            SET FILTER TO NOT INLIST(cWellStat, 'I', 'S', 'P')
		         OTHERWISE
		            SWSELECT(THISFORM.cTable)
		            SET FILTER TO NOT lInactive
		      ENDCASE
		   CATCH
		   ENDTRY
		ELSE 
		   TRY
		      DO CASE
		         CASE THISFORM.cTable = 'Wells'
		            SWSELECT('wells')
		            SET FILTER TO 
		         CASE THISFORM.cTable = 'Allunits'
		            SELECT Allunits
		            SET FILTER TO 
		         OTHERWISE
		            SWSELECT(THISFORM.cTable)
		            SET FILTER TO 
		      ENDCASE
		   CATCH
		   ENDTRY
		ENDIF
		
		thisform.grdPickList.Refresh()
	ENDPROC

	PROCEDURE CmdOKCancel.cmdcancel.Click
		llOK = .F.
		thisform.release()
	ENDPROC

	PROCEDURE CmdOKCancel.cmdok.Click
		llOK = .T.
		thisform.release()
	ENDPROC

	PROCEDURE GrdPickList.AfterRowColChange
		LPARAMETERS nColIndex
		
		this.columns[ncolindex].backcolor = rgb(255,255,121)
		this.columns[ncolindex].header1.backcolor = rgb(255,255,121)
		this.columns[ncolindex].header1.forecolor = rgb(0,0,255)
		dodefault(ncolindex)
	ENDPROC

	PROCEDURE GrdPickList.BeforeRowColChange
		LPARAMETERS nColIndex
		
		this.columns[ncolindex].backcolor = rgb(255,255,255)
		this.columns[ncolindex].header1.backcolor = rgb(212,208,200)
		this.columns[ncolindex].header1.forecolor = rgb(0,0,0)
		dodefault(ncolindex)
	ENDPROC

	PROCEDURE txtDisplay.When
		RETURN .f.
	ENDPROC

ENDDEFINE
