*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="cgadget.vcx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS cboquickfill AS cboquickfill OF "..\common\cmgadget.vcx" 
 	*< CLASSDATA: Baseclass="combobox" Timestamp="" Scale="Pixels" Uniqueid="" />

	Name = "cboquickfill"

ENDDEFINE

DEFINE CLASS cmdadjustablelistheader AS cmdadjustablelistheader OF "..\common\cmgadget.vcx" 
 	*< CLASSDATA: Baseclass="commandbutton" Timestamp="" Scale="Pixels" Uniqueid="" />

	Caption = "CMDADJUSTABLELISTHEADER"
	Name = "cmdadjustablelistheader"

ENDDEFINE

DEFINE CLASS cntadjustablelist AS cntadjustablelist OF "..\common\cmgadget.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	Name = "cntadjustablelist"
	lstColumnList.Name = "lstColumnList"

ENDDEFINE

DEFINE CLASS cntgetfile AS cntgetfile OF "..\common\cmgadget.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	Name = "cntgetfile"
	cmdPath.Name = "cmdPath"
	edtPath.Name = "edtPath"

ENDDEFINE

DEFINE CLASS cntgrowframe AS cntgrowframe OF "..\common\cmgadget.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	Name = "cntgrowframe"
	cmdMore.Name = "cmdMore"

ENDDEFINE

DEFINE CLASS cntmoverlistpair AS cntmoverlistpair OF "..\common\cmgadget.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	Name = "cntmoverlistpair"
	cmdDeselect.Name = "cmdDeselect"
	cmdDeselectAll.Name = "cmdDeselectAll"
	cmdSelect.Name = "cmdSelect"
	cmdSelectAll.Name = "cmdSelectAll"
	lstSelected.Name = "lstSelected"
	lstSource.Name = "lstSource"

ENDDEFINE

DEFINE CLASS cntprogressbar AS cntprogressbar OF "..\common\cmgadget.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\common\codemine.h"
	Name = "cntprogressbar"
	lblPercent.Name = "lblPercent"
	shpProgress.Name = "shpProgress"

ENDDEFINE

DEFINE CLASS cntrichtexteditor AS cntrichtexteditor OF "..\common\cmgadget.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	Name = "cntrichtexteditor"
	cboFont.Name = "cboFont"
	chkBold.Alignment = 0
	chkBold.Name = "chkBold"
	chkBullet.Alignment = 0
	chkBullet.Name = "chkBullet"
	chkCenter.Alignment = 0
	chkCenter.Name = "chkCenter"
	chkItalic.Alignment = 0
	chkItalic.Name = "chkItalic"
	chkLeft.Alignment = 0
	chkLeft.Name = "chkLeft"
	chkRight.Alignment = 0
	chkRight.Name = "chkRight"
	chkUnderline.Alignment = 0
	chkUnderline.Name = "chkUnderline"
	cmdColor.Name = "cmdColor"
	oleRichText.Height = 90
	oleRichText.Left = 0
	oleRichText.Name = "oleRichText"
	oleRichText.Top = 23
	oleRichText.Width = 367
	spnFontsize.Name = "spnFontsize"

ENDDEFINE

DEFINE CLASS ctlcombonavigator AS ctlcombonavigator OF "..\common\cmgadget.vcx" 
 	*< CLASSDATA: Baseclass="control" Timestamp="" Scale="Pixels" Uniqueid="" />

	Name = "ctlcombonavigator"
	cboNavigate.Name = "cboNavigate"
	cmdNavDn.Name = "cmdNavDn"
	cmdNavUp.Name = "cmdNavUp"

ENDDEFINE

DEFINE CLASS frmstatusbar AS frmstatusbar OF "..\common\cmgadget.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	DoCreate = .T.
	Name = "frmstatusbar"
	cmdAbout.Name = "cmdAbout"
	cntOptions.Name = "cntOptions"
	cntprogressbar.lblPercent.Name = "lblPercent"
	cntprogressbar.Name = "cntprogressbar"
	cntprogressbar.shpProgress.Name = "shpProgress"
	lblMessage.Name = "lblMessage"
	lblProgress.Name = "lblProgress"
	linCapsLeft.Name = "linCapsLeft"
	linCapsTop.Name = "linCapsTop"
	linClockLeft.Name = "linClockLeft"
	linClockTop.Name = "linClockTop"
	linNumLeft.Name = "linNumLeft"
	linNumTop.Name = "linNumTop"
	linOverLeft.Name = "linOverLeft"
	linOverTop.Name = "linOverTop"
	linTop1.Name = "linTop1"
	linTop2.Name = "linTop2"
	linUserLeft.Name = "linUserLeft"
	linUserTop.Name = "linUserTop"
	Timer.Name = "Timer"
	txtCapsLock.Name = "txtCapsLock"
	txtClock.Name = "txtClock"
	txtInsMode.Name = "txtInsMode"
	txtNumLock.Name = "txtNumLock"
	txtUser.Name = "txtUser"

ENDDEFINE

DEFINE CLASS lstchecklist AS lstchecklist OF "..\common\cmgadget.vcx" 
 	*< CLASSDATA: Baseclass="listbox" Timestamp="" Scale="Pixels" Uniqueid="" />

	Name = "lstchecklist"

ENDDEFINE

DEFINE CLASS lstlistnavigator AS lstlistnavigator OF "..\common\cmgadget.vcx" 
 	*< CLASSDATA: Baseclass="listbox" Timestamp="" Scale="Pixels" Uniqueid="" />

	Name = "lstlistnavigator"

ENDDEFINE

DEFINE CLASS shpsplitterbar AS shpsplitterbar OF "..\common\cmgadget.vcx" 
 	*< CLASSDATA: Baseclass="shape" Timestamp="" Scale="Pixels" Uniqueid="" />

	Name = "shpsplitterbar"

ENDDEFINE

DEFINE CLASS swquickfillsupport AS cmquickfillsupport OF "..\common\cmgadget.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	Name = "swquickfillsupport"
	
	PROCEDURE quickfill
		LPARAMETER oThis, cValue
		LOCAL lExact, nSelect, nPos, cNewValue, lFound, cFilter
		WITH m.oThis
		  * If the field is not blank then search for a quick fill value.
		  m.nPos = 0
		  m.cNewValue = ''
		  IF NOT EMPTY(m.cValue)
		    m.nPos = .SelStart          && Save cursor position
		
		    * Preserve original SET EXACT setting.
		    m.lExact = (SET('EXACT') = 'ON')
		    SET EXACT OFF
		    IF NOT EMPTY(.cRowSource)   && Items come from cRowSorce string
		      LOCAL cItem, cRowSource
		      m.cRowSource = .cRowSource
		      DO WHILE NOT EMPTY(m.cRowSource)
		        m.cItem = ALLTRIM(GetToken(@m.cRowSource, ','))
		        IF UPPER(m.cItem) = UPPER(m.cValue)
		          m.lFound = .T.
		          m.cNewValue = PADR(m.cItem, 128)  && Pad to a fixed length
		          EXIT
		        ENDIF
		      ENDDO
		    ELSE                            && Items come from cListWorkarea cursor
		      m.nSelect = SELECT()
		      SELECT (.cListWorkarea)
		
		      * Use display expression to locate matches.
		      m.cFilter = IIF(EMPTY(.cFilter), '.T.', .cFilter)
		      m.cExpr = .cListExpression
		      m.cTag  = IIF(at('.',.clistexpression)>0,substr(.clistexpression,at('.',.clistexpression)+1),.clistexpression)
		      lntagcount = tagcount(.clistworkarea)
		      llFoundTag = .f.
		      for lntag = 1 to lntagcount
		         if lower(tag(lntag)) = lower(m.ctag)
		            llfoundtag = .t.
		            exit
		         endif
		      endfor   
		      if llFoundTag 
		         set order to (m.ctag)
		         SEEK(UPPER(m.cValue))
		         m.cNewValue = EVALUATE(m.cExpr)
		         m.lFound = FOUND()
		         SELECT (m.nSelect)
		      else
		         IF .lExactCase
		           LOCATE FOR &cExpr = m.cValue AND &cFilter
		         ELSE
		           LOCATE FOR UPPER(&cExpr) = UPPER(m.cValue) AND &cFilter
		         ENDIF
		         m.cNewValue = EVALUATE(m.cExpr)
		         m.lFound = FOUND()
		         SELECT (m.nSelect)
		      endif   
		    ENDIF
		    IF m.lExact 
		      SET EXACT ON
		    ENDIF
		
		    IF NOT m.lFound
		      IF .lAllowExceptions
		        IF NOT .lException
		          .lException = .T.
		          IF NOT .SetValue(m.cValue)
		            m.nPos = .nLastPos
		            .Value = .cLastValue
		          ENDIF
		        ELSE
		          .Value = m.cValue
		        ENDIF
		        STORE m.nPos TO .SelStart, .nLastPos
		        RETURN .T.
		      ELSE
		        ??CHR(7)   && Invalid character(s) entered, restore previous state of the control.
		        IF NOT EMPTY(.cLastValue)
		          m.nPos = .nLastPos
		          m.cNewValue = .cLastValue
		        ENDIF
		      ENDIF
		    ENDIF
		  ENDIF
		
		  * Calling SetValue() here means Afterchange() will fire after each new value.
		  .lException = .F.
		  IF NOT m.cNewValue == .Value OR NOT m.cNewValue == .cLastValue
		    IF m.cNewValue == .cLastValue
		      .Value = m.cNewValue
		    ELSE
		      * Call SetValue() only when displayed value is actually different 
		      * than last time it was set.
		      IF NOT .SetValue(m.cNewValue)
		        m.nPos = .nLastPos
		        .Value = .cLastValue
		      ENDIF
		    ENDIF
		    STORE m.nPos TO .SelStart, .nLastPos
		  ENDIF
		  .SelStart = MIN(.SelStart, LEN(TRIM(.Value)))
		
		  * Highlight the text that was NOT keyed by the user
		  .SelLength = MAX(0, LEN(TRIM(.Value)) - .SelStart)
		ENDWITH   
		
	ENDPROC

ENDDEFINE

DEFINE CLASS txtdate AS txtdate OF "..\common\cmgadget.vcx" 
 	*< CLASSDATA: Baseclass="textbox" Timestamp="" Scale="Pixels" Uniqueid="" />

	Name = "txtdate"

ENDDEFINE

DEFINE CLASS txtnumeric AS txtnumeric OF "..\common\cmgadget.vcx" 
 	*< CLASSDATA: Baseclass="textbox" Timestamp="" Scale="Pixels" Uniqueid="" />

	Name = "txtnumeric"

ENDDEFINE

DEFINE CLASS txtquickfill AS txtquickfill OF "..\common\cmgadget.vcx" 
 	*< CLASSDATA: Baseclass="textbox" Timestamp="" Scale="Pixels" Uniqueid="" />

	Name = "txtquickfill"
	
	PROCEDURE Init
		IF NOT EMPTY(this.clistexpression) AND LOWER(this.clistexpression) # 'custownvend' AND LOWER(this.clistexpression) # 'custown'
		   swselect(this.clistworkarea)
		ENDIF    
		DODEFAULT()
	ENDPROC

ENDDEFINE
