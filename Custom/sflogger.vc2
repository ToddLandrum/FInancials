*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="sflogger.vcx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS sflogger AS sfcustom OF "..\..\..\3rdparty\stonefield9\sfcommon\sfctrls.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "sfctrls.h"
	*<DefinedPropArrayMethod>
		*m: endprocess		&& Ends the timer for a process
		*m: getheadermessage		&& The first line of the milestone text
		*m: logelapsedmilestone		&& Logs a milestone with the elapsed time
		*m: logmilestone		&& Logs a milestone
		*m: logtofile		&& Logs the specified message
		*m: startprocess		&& Starts the timer for a process to measure how long it took
		*p: clogfile		&& The name of the file to log milestones to
		*p: lloggingenabled		&& .T. if we're supposed to log milestones
		*p: nlastmilestone		&& The seconds at the last milestone
		*a: astarttime[1,0]		&& A FIFO array of milestone starting times
	*</DefinedPropArrayMethod>

	PROTECTED astarttime,nlastmilestone
	clogfile = datafiles\diagnostic.txt		&& The name of the file to log milestones to
	lloggingenabled = .T.		&& .T. if we're supposed to log milestones
	Name = "sflogger"
	nlastmilestone = 0		&& The seconds at the last milestone
	
	PROCEDURE endprocess		&& Ends the timer for a process
		lparameters tcMilestone
		local lnEnd, ;
			lnItems, ;
			lnStart, ;
			lcMessage
		with This
			if .lLoggingEnabled
				lnEnd   = seconds()
				lnItems = alen(.aStartTime)
				lnStart = .aStartTime[lnItems]
				if lnItems = 1
					dimension .aStartTime[1]
					.aStartTime[1] = 0
				else
					dimension .aStartTime[lnItems - 1]
				endif lnItems = 1
				.nLastMilestone = 0
				lcMessage = .GetHeaderMessage() + ALLTRIM(m.goapp.cuser)+': ' +tcMilestone + ccCRLF + ;
					'Time to run: ' + transform(lnEnd - lnStart) + ' seconds'
				.LogToFile(lcMessage)
			endif .lLoggingEnabled
		endwith
		
	ENDPROC

	PROTECTED PROCEDURE getheadermessage		&& The first line of the milestone text
		local lnTimeStamp, ;
			lcMessage
		lnTimeStamp = seconds()
		lcMessage   = '=====================> ' + ttoc(datetime()) + ;
			iif(empty(This.nLastMilestone), '', ' (' + ;
			transform(lnTimeStamp - This.nLastMilestone) + ;
			' seconds since previous milestone)') + ccCRLF
		This.nLastMilestone = lnTimeStamp
		return lcMessage
		
	ENDPROC

	PROCEDURE Init
		This.aStartTime[1] = 0
		
	ENDPROC

	PROCEDURE logelapsedmilestone		&& Logs a milestone with the elapsed time
		lparameters tcMilestone
		local lnEnd, ;
			lnItems, ;
			lnStart, ;
			lcMessage
		with This
			if .lLoggingEnabled and not empty(nvl(tcMilestone, ''))
				lnEnd   = seconds()
				lnItems = alen(.aStartTime)
				lnStart = .aStartTime[lnItems]
				if lnStart = 0
					store lnEnd to lnStart, .aStartTime[lnItems]
				endif lnStart = 0
				lcMessage = nvl(tcMilestone, '') + ccCRLF + iif(empty(.nLastMilestone), '', ;
					transform(lnEnd - .nLastMilestone) + ;
					' seconds since previous milestone' + ccCRLF) + ;
					'Total time to run: ' + transform(lnEnd - lnStart) + ' seconds'
				.LogToFile(lcMessage)
				.nLastMilestone = lnEnd
			endif .lLoggingEnabled ...
		endwith
		
	ENDPROC

	PROCEDURE logmilestone		&& Logs a milestone
		lparameters tcMilestone, ;
			tlExcludeHeader
		local lcMessage
		with This
			if .lLoggingEnabled and not empty(nvl(tcMilestone, ''))
			    tcMileStone = ALLTRIM(m.goapp.cUser)+': ' + tcMileStone
				lcMessage = iif(tlExcludeHeader, '', .GetHeaderMessage()) + tcMilestone
				.LogToFile(lcMessage)
			endif .lLoggingEnabled ...
		endwith
		
	ENDPROC

	PROTECTED PROCEDURE logtofile		&& Logs the specified message
		lparameters tcMessage
		strtofile(tcMessage + ccCRLF + ccCRLF, This.cLogFile, .T.)
		
	ENDPROC

	PROCEDURE startprocess		&& Starts the timer for a process to measure how long it took
		lparameters tcMilestone
		local lnItem
		with This
			lnItem = iif(empty(.aStartTime[1]), 1, alen(.aStartTime) + 1)
			dimension .aStartTime[lnItem]
			.aStartTime[lnItem] = seconds()
			.nLastMilestone     = 0
			.LogMilestone(tcMilestone)
		endwith
		
	ENDPROC

ENDDEFINE
