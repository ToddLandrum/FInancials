*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="cforms.vcx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS frmdatachildcustom AS frmdatachild OF "..\common\cmforms.vcx" 		&& CodeMine developer customizable Child Data form class. Use for child forms opened from a parent data form. The child form will share all data and business rules of the parent form.
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\common\codemine.h"
	Name = "frmdatachildcustom"

ENDDEFINE

DEFINE CLASS frmdataformcustom AS frmdataform OF "..\common\cmforms.vcx" 		&& CodeMine developer customizable Data Form class. Use for advanced data forms that use specialized data manager subclasses.
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\common\codemine.h"
	*<DefinedPropArrayMethod>
		*p: lnodataentry
		*p: _memberdata		&& XML Metadata for customizable properties
	*</DefinedPropArrayMethod>

	Caption = "Frmdataform1"
	DoCreate = .T.
	lconfirmdelete = .F.
	lnodataentry = .F.
	lrememberposition = .F.
	lremembersize = .F.
	Name = "frmdataformcustom"
	_memberdata = <VFPData>
		<memberdata name="lnodataentry" type="property" display="lNoDataEntry"/>
		</VFPData>		&& XML Metadata for customizable properties
	Mwresize1.lblHighLight.Name = "lblHighLight"
	Mwresize1.lblShading.Name = "lblShading"
	Mwresize1.Name = "Mwresize1"
	
	PROCEDURE Activate
		IF NOT THISFORM.lNoDataEntry
		   * This is a data entry form
		   ON KEY LABEL F10 _SCREEN.ACTIVEFORM.SAVE()
		   ON KEY LABEL CTRL+A _SCREEN.ACTIVEFORM.New()
		   ON KEY LABEL CTRL+D _SCREEN.ACTIVEFORM.DELETE()
		   ON KEY LABEL CTRL+L _SCREEN.ACTIVEFORM.LIST()
		ELSE
		   * This is not a data entry form
		   ON KEY LABEL F10 *
		   ON KEY LABEL CTRL+A *
		   ON KEY LABEL CTRL+D *
		   ON KEY LABEL CTRL+L *
		ENDIF
		
		* Turn FoxAudit auditing on
		IF TYPE('oFoxAudit_APPDATA') = 'O'
		   oFoxAudit_APPDATA.lLogUpdates = m.goapp.lAuditTrail
		   oFoxAudit_APPDATA.cUserMsg1 = THIS.CAPTION
		   oFoxAudit_APPDATA.cUserMsg2 = THIS.NAME
		ENDIF
		
		DODEFAULT()
		
		m.gostatemanager.refreshall('Form')
		
	ENDPROC

	PROCEDURE Deactivate
		* Turn FoxAudit auditing on
		IF TYPE('oFoxAudit_APPDATA') = 'O'
		   oFoxAudit_APPDATA.lLogUpdates = .F.
		   oFoxAudit_APPDATA.cUserMsg1 = ''
		   oFoxAudit_APPDATA.cUserMsg2 = ''
		ENDIF
		
		ON KEY LABEL F10 
		ON KEY LABEL CTRL+A 
		ON KEY LABEL CTRL+D 
		ON KEY LABEL CTRL+L 
		
		DODEFAULT()
		
	ENDPROC

	PROCEDURE delete
		LPARAMETERS cWorkarea
		
		* This is not a data entry form so dont perform this task
		IF thisform.lNoDataEntry
		   RETURN .F.
		ENDIF
		
		RETURN DODEFAULT(cWorkArea)
	ENDPROC

	PROCEDURE Destroy
		ON KEY LABEL F10 
		ON KEY LABEL CTRL+A 
		ON KEY LABEL CTRL+D 
		ON KEY LABEL CTRL+L 
		
		DODEFAULT()
	ENDPROC

	PROCEDURE editmode
		
		if m.goapp.lreadonly
		   wait wind nowait 'This form is read only...'
		   return .f.
		endif
		
		dodefault()   
	ENDPROC

	PROCEDURE find
		LPARAMETERS cWorkarea, cExpr
		
		* This is not a data entry form so dont perform this task
		IF thisform.lNoDataEntry
		   RETURN .F.
		ENDIF
		
		RETURN DODEFAULT(cWorkArea,cExpr)
	ENDPROC

	PROCEDURE first
		LPARAMETERS cWorkarea
		
		* This is not a data entry form so dont perform this task
		IF thisform.lNoDataEntry
		   RETURN .F.
		ENDIF
		
		RETURN DODEFAULT(cWorkArea)
	ENDPROC

	PROCEDURE Init
		DODEFAULT()   
		
		IF FILE(ALLTRIM(m.goapp.ccommonfolder)+'EDIT.COM') OR m.goapp.lreadonly
		   this.lExplicitEditMode = .T.
		   this.lWriteLock = .T.
		   this.refreshall()
		ENDIF
		
	ENDPROC

	PROCEDURE last
		LPARAMETERS cWorkarea
		
		* This is not a data entry form so dont perform this task
		IF thisform.lNoDataEntry
		   RETURN .F.
		ENDIF
		
		RETURN DODEFAULT(cWorkArea)
	ENDPROC

	PROCEDURE new
		LPARAMETERS cWorkarea
		
		* This is not a data entry form so dont perform this task
		IF thisform.lNoDataEntry
		   RETURN .F.
		ENDIF
		
		RETURN DODEFAULT(cWorkArea)
	ENDPROC

	PROCEDURE next
		LPARAMETERS cWorkarea
		
		* This is not a data entry form so dont perform this task
		IF thisform.lNoDataEntry
		   RETURN .F.
		ENDIF
		
		RETURN DODEFAULT(cWorkArea)
	ENDPROC

	PROCEDURE prior
		LPARAMETERS cWorkarea
		
		* This is not a data entry form so dont perform this task
		IF thisform.lNoDataEntry
		   RETURN .F.
		ENDIF
		
		RETURN DODEFAULT(cWorkArea)
	ENDPROC

	PROCEDURE save
		LPARAMETERS cworkarealist
		
		* This is not a data entry form so dont perform this task
		IF thisform.lNoDataEntry
		   RETURN
		ENDIF
		
		IF NOT EMPTY(ALLT(thisform.cworkarea))
		   SELECT (thisform.cWorkarea)
		ENDIF
		 
		RETURN DODEFAULT(cworkarealist)   
		
	ENDPROC

	PROCEDURE saveallchanges
		LPARAMETERS cworkarealist
		
		IF TYPE('thisform.grouptran') = 'O'
		   thisform.grouptran.lchanged = thisform.lchanged
		ENDIF
		
		RETURN DODEFAULT(cworkarealist)   
		
		
	ENDPROC

ENDDEFINE

DEFINE CLASS frmdatamanagerformcustom AS frmdatamanagerform OF "..\common\cmforms.vcx" 		&& CodeMine developer customizable Default Data Form class. Use for most data editing forms. Same as frmDataFormCustom except it already has a default Data Manager object in place.
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\common\codemine.h"
	*<DefinedPropArrayMethod>
		*m: errtriggerfailed		&& Trigger Failure Error Routine
		*p: lnonewask		&& Don't ask to add new record when table is empty.
	*</DefinedPropArrayMethod>

	DoCreate = .T.
	lconfirmdelete = .NULL.
	lconfirmsave = .T.
	lnonewask = .F.		&& Don't ask to add new record when table is empty.
	lremembersize = .F.
	Name = "frmdatamanagerformcustom"
	cmdatamanager.Name = "cmdatamanager"
	cmlookupmanager.Name = "cmlookupmanager"
	
	PROCEDURE errtriggerfailed		&& Trigger Failure Error Routine
		*==============================================================================
		* Method:				ErrTriggerFailed
		* Status:				Protected
		* Purpose:				Handle the error where a trigger failed
		* Author:				Doug Hennig
		* Copyright:			(c) 1996 Stonefield Systems Group Inc.
		* Last revision:		03/01/99
		* Parameters:			none
		* Returns:				ccMSG_CONTINUE (a constant in SFErrors.H)
		* Environment in:		This.nLastError points to the row in This.aErrorInfo
		*							that has information on the error that just
		*							occurred
		* Environment out:		an error message has been displayed
		*						pnError has been set to cnERR_TRIGGER_FAILED (a
		*							constant in Library.H) so the stored procedures
		*							will know an error occurred
		*==============================================================================
		
		local lcMessage
		with This
		
		* Find out what kind of trigger failed.
		
			do case
				case .aErrorInfo[.nLastError, cnAERR_TRIGGER] = 1
					lcMessage = ccERR_CANT_INSERT
				case .aErrorInfo[.nLastError, cnAERR_TRIGGER] = 2
					lcMessage = ccERR_CANT_UPDATE
				case .aErrorInfo[.nLastError, cnAERR_TRIGGER] = 3
					lcMessage = ccERR_CANT_DELETE
			endcase
		
		* Display the message to the user.
		
			messagebox(lcMessage, MB_OK + MB_ICONSTOP, _VFP.Caption)
		
		* Set pnError to a non-zero value so the stored procedures code knows
		* something went wrong.
		
			pnError = cnERR_TRIGGER_FAILED
		endwith
		return ccMSG_CONTINUE
		
	ENDPROC

	PROCEDURE Init
		LOCAL lcworkarea
		ON KEY LABEL F2 *
		IF DODEFAULT()
		   IF NOT THIS.lnonewask
		      THISFORM.SHOW(0)
		      lcworkarea = THISFORM.cworkarea
		      IF NOT EMPTY(lcworkarea) AND NOT lcworkarea = '*'
		         SELE (lcworkarea)
		         IF RECC() = 0
		            IF THISFORM.omessage.CONFIRM("This file is empty. Do you want to add a New record? From now on, you'll need to click the New button in the toolbar to add a new record.")
		               THISFORM.new(lcworkarea)
		            ENDIF
		         ELSE
		            * If we have a bad record pointer because we opened another
		            * company, put the pointer at the last record.
		            IF EOF(lcWorkArea)
		               thisform.prior(lcWorkArea)
		            ENDIF    
		         ENDIF
		      ENDIF
		   ENDIF
		ENDIF
		
	ENDPROC

	PROCEDURE cmdatamanager.afterdelete
		LPARAMETERS cworkarea
		
		SELECT (cworkarea)
		IF DELETED() AND m.cworkarea = THISFORM.cworkarea
		   TRY
		      SET DATABASE TO appdata
		      lcindex = DBGETPROP(m.cworkarea,'Table','PrimaryKey')
		      SET ORDER TO &lcindex
		      lnindex = SYS(21)
		      lcField = SYS(14,EVAL(lnindex))
		      lnLen = LEN(EVAL(lcField))
		      lcDelKey = ALLT(THISFORM.oregistry.incrementcounter('%Shared.Counters.DeletedKey'))
		      IF lnLen < 6
		         lcDelKey = RIGHT(lcDelKey,lnLen)
		      ENDIF
		      REPL &lcField WITH lcDelKey
		   CATCH TO loError
		   ENDTRY
		ENDIF
		
	ENDPROC

ENDDEFINE

DEFINE CLASS frmformcustom AS frmform OF "..\common\cmforms.vcx" 		&& CodeMine developer customizable Foundation Form class. Use for forms that do not need to edit any table data.
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Mwresize1" UniqueID="" Timestamp="" />

	#INCLUDE "..\source\appdefs.h"
	*<DefinedPropArrayMethod>
		*m: callhelp
		*p: cbunch		&& Transaction group number
		*p: mwresize
	*</DefinedPropArrayMethod>

	Caption = "Frmform1"
	DoCreate = .T.
	FontSize = 8
	Icon = ..\graphics\sherwareicon.ico
	lcloseonescape = .T.
	lrememberposition = .T.
	lremembersize = .F.
	MaxButton = .T.
	mwresize = .F.
	Name = "frmformcustom"
	Visible = .T.

	ADD OBJECT 'Mwresize1' AS mwresize WITH ;
		Left = 242, ;
		lresizegridcontents = .T., ;
		Name = "Mwresize1", ;
		Top = 68, ;
		lblHighLight.Name = "lblHighLight", ;
		lblShading.Name = "lblShading"
		*< END OBJECT: ClassLib="mwresize.vcx" BaseClass="control" />
	
	PROCEDURE callhelp
		LPARAMETERS tcName
		
		IF FILE('helptopic.txt')
		    WAIT WINDOW 'Showing Help Topic for Form: ' + ALLTRIM(tcName)+': ' + TRANSFORM(THIS.HELPCONTEXTID)
		ENDIF
		IF NOT EMPTY(THIS.HELPCONTEXTID)
		    HELP ID THISFORM.HELPCONTEXTID
		ELSE
		    HELP
		ENDIF
		
	ENDPROC

	PROCEDURE Deactivate
		ON KEY LABEL F1
		DODEFAULT()
	ENDPROC

	PROCEDURE Destroy
		ON KEY LABEL CTRL+P
		DODEFAULT()
		
	ENDPROC

	PROCEDURE displayhelp
		LPARAMETERS oContext
		
		if not empty(this.helpcontextid)
		   HELP ID thisform.helpcontextid
		ELSE
		   HELP    
		endif   
		
	ENDPROC

	PROCEDURE Error
		LPARAMETERS nerror,cmethod,nline
		
		*  If we're in the middle of a transaction, rollback.
		IF TXNLEVEL() > 0
		   FOR lnX = 1 TO TXNLEVEL()
		      ROLLBACK
		   ENDFOR
		ENDIF
		
		IF nerror <> 1967
		   =AERROR(gaerrors)
		   DO errorlog WITH m.cmethod, m.nline, THIS.NAME
		ENDIF
		
		*++
		* Handle form level errors, and errors from controls with no handler of their own.
		* Provide custom processing for the following VFP error numbers:
		*  1         - file not found
		*  202       - Invalid path or filename
		*  3, 108, 1705, 1995 - file in use
		*  15        - Not a table
		*  41        - memo missing
		*  19, 114   - damaged index
		*  1707      - Structural CDX not found
		*  1540      -
		*  1001      - Feature not available
		*--
		LOCAL cFatalMsg
		DO CASE
		   * 1001 - Feature not available
		   * 1540 - Session number invalid
		   * 1967 - Data environment already unloaded
		   CASE INLIST(m.nerror,1001,1540,1967)
		      * Ignore these errors               
		      RETURN .T.                       
		
		   * 2012 - Can't call SetFocus() from within Valid() error.
		   CASE m.nerror = 2012 AND THIS.WINDOWTYPE = 1   
		      * A VFP bug can cause SetFocus() in modal child forms called from a valid() event to
		      * incorrectly trigger this error when SetFocus() is used within the child.
		      RETURN .T.
		
		   CASE INLIST(m.nerror, 1733, 1752) AND PROPER(m.cmethod) == 'Load'
		      * Class in use or not found. Common design-time errors when loading CDE, or
		      * other component objects, so we display the error in a simple dialog, and
		      * let the Load() method abort the form load cleanly.
		      * No need to localize, since this should only be an error during development.
		      MESSAGEBOX('Form Cannot Load - ' + MESSAGE(), 16, THIS.CAPTION)
		      RETURN .T.
		
		   CASE m.nerror = 1 AND '.PRG' $ SYS(2018)
		      * A prg file not found is a fatal error
		      m.cFatalMsg = 'Procedure ' + PROPER(STRTRAN(SYS(2018), '.PRG', '')) + '() is not found'
		
		   CASE ISNULL(THIS.oMessage)         && Everything else fatal if no message handler
		      m.cFatalMsg = MESSAGE()
		
		   CASE INLIST(m.nerror, 1, 202, 2004)
		      THIS.ADDPROPERTY('nOpenError', m.nerror)  && Set form load error flag
		      THIS.DisplayMessage('%msgFileNotFound', SYS(2018))
		
		      * FilenotFound from DE gets stuck in infinite loop. Cancel is only way out.
		      IF '.dataenvironment.' $ m.cmethod
		         CANCEL
		      ENDIF
		
		   CASE INLIST(m.nerror, 3, 108, 1705, 1995)
		      THIS.ADDPROPERTY('nOpenError', m.nerror)  && Set form load error flag
		      THIS.DisplayMessage('%msgFileInUse', SYS(2018))
		
		   CASE INLIST(m.nerror, 15, 19, 41, 114, 1707)
		      THIS.ADDPROPERTY('nOpenError', m.nerror)  && Set form load error flag
		      THIS.DisplayMessage('%msgFileDamaged', SYS(2018), MESSAGE())
		
		   OTHERWISE
		      m.cFatalMsg = MESSAGE()
		ENDCASE
		
		* Close the QB Interface so QB doesn't get hung up.
		IF m.goapp.lQBVersion
		   m.goapp.oQB.QBClose()
		ENDIF 
		
		IF NOT EMPTY(m.cFatalMsg)
		   IF ISNULL(THIS.oMessage)
		      ERROR 'Error at line ' + LTRIM(STR(m.nline)) + ' of ' + m.cmethod + CHR(13) + m.cFatalMsg
		      RETURN 
		   ELSE
		      RETURN THIS.oMessage.FatalError(m.cFatalMsg, m.cmethod, m.nline)
		   ENDIF
		ENDIF
		
		DODEFAULT(nerror,cmethod,nline)
	ENDPROC

	PROCEDURE Init
		IF DODEFAULT()
		   ON KEY LABEL F2 *
		   ON KEY LABEL f1 _screen.ActiveForm.callhelp(_screen.ActiveForm.name)
		   ON KEY LABEL CTRL+p m.goapp.oScreenshot.TakeScreenShot(_screen.ActiveForm,SYS(2023)+'\'+ALLTRIM(STRTRAN(_screen.ActiveForm.Caption,'\','-'))+'.png',.t.)
		   
		   IF 'DMPRO' $ UPPER(SYS(16)) OR  'DMIE' $ UPPER(SYS(16))
		      m.goApp.lAMVersion = .F.
		   ENDIF
		   SET ESCAPE OFF 
		   IF VARTYPE(m.goApp.oLogger) = 'O'
		      m.goApp.oLogger.StartProcess(ALLTRIM(thisform.Caption) + ' Starting')
		   ENDIF 
		   
		   IF NOT EMPTY(m.goapp.formicon)
		      this.Icon = m.goapp.formicon
		   ENDIF 
		ENDIF
		
	ENDPROC

	PROCEDURE Resize
		IF DODEFAULT()
		   m.This.mwResize1.Resize( m.This )
		ENDIF 
	ENDPROC

	PROCEDURE Unload
		ON KEY LABEL F10 
		ON KEY LABEL CTRL+A 
		ON KEY LABEL CTRL+D 
		ON KEY LABEL CTRL+L 
		ON KEY LABEL f1 
		IF VARTYPE(m.goApp.oLogger) = 'O'
		      m.goApp.oLogger.EndProcess(ALLTRIM(thisform.Caption) + ' Ending')
		   ENDIF 
		DODEFAULT()
	ENDPROC

ENDDEFINE

DEFINE CLASS frmmodaldatachildcustom AS frmmodaldatachild OF "..\common\cmforms.vcx" 		&& CodeMine developer customizable Modal Child Data form class. Use for modal dialogs that need to edit data in the current record of an active data form.
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\common\codemine.h"
	Name = "frmmodaldatachildcustom"

ENDDEFINE

DEFINE CLASS frmmodaldialogcustom AS frmmodaldialog OF "..\common\cmforms.vcx" 		&& CodeMine developer customizable Modal Dialog class. Use for modal dialogs that need to return a value to their caller.
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\common\codemine.h"
	Name = "frmmodaldialogcustom"

ENDDEFINE

DEFINE CLASS frmrequerydialogcustom AS frmrequerydialog OF "..\common\cmforms.vcx" 		&& CodeMine developer customizable Requery dialog class. Use to accept parameters to requery parameterized views.
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\common\codemine.h"
	Name = "frmrequerydialogcustom"

ENDDEFINE

DEFINE CLASS frmwizarddialogcustom AS frmwizarddialog OF "..\common\cmforms.vcx" 		&& CodeMine developer customizable multi-step dialog class.
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\common\codemine.h"
	Name = "frmwizarddialogcustom"

ENDDEFINE

DEFINE CLASS tbrtoolbarcustom AS tbrtoolbar OF "..\common\cmforms.vcx" 		&& CodeMine developer customizable foundation toolbar class.
 	*< CLASSDATA: Baseclass="toolbar" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\common\codemine.h"
	Name = "tbrtoolbarcustom"

ENDDEFINE
