*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="swxfrx.vcx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS swxfrx AS custom 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\..\ampro\source\appdefs.h"
	*<DefinedPropArrayMethod>
		*m: callxfrx		&& Sends the report to XFRX
		*m: createbatch		&& Creates a bat file to install the XFRX modules.
		*m: runbatchfile		&& Runs the bat file by calling ShellExecute
		*m: setupxfrx		&& Makes sure the fll and dlls are correctly installed
		*m: viewdocument		&& Calls ShellExec with Open to open the document using it's file association
		*p: coutputfile		&& The output file name
		*p: coutputtype		&& The output file type
		*p: creportname		&& The name of the report to run
		*p: cselect
		*p: csortorder
		*p: ctitle1		&& Report Title
		*p: ctitle2		&& Report title 2
		*p: nreturnvalue		&& ShellExecute Return Value
		*p: _memberdata		&& XML Metadata for customizable properties
	*</DefinedPropArrayMethod>

	coutputfile = 		&& The output file name
	coutputtype = 		&& The output file type
	creportname = 		&& The name of the report to run
	cselect = 
	csortorder = 
	ctitle1 = 		&& Report Title
	ctitle2 = 		&& Report title 2
	Height = 38
	Name = "swxfrx"
	nreturnvalue = 0		&& ShellExecute Return Value
	Width = 111
	_memberdata = <VFPData>
		<memberdata name="callxfrx" display="CallXFRX"/>
		<memberdata name="setupxfrx" display="SetupXFRX"/>
		<memberdata name="createbatch" display="CreateBatch"/>
		<memberdata name="runbatchfile" display="RunBatchFile"/>
		<memberdata name="viewdocument" display="ViewDocument"/>
		<memberdata name="coutputfile" display="cOutputFile"/>
		<memberdata name="coutputtype" display="cOutputType"/>
		<memberdata name="ctitle1" display="cTitle1"/>
		<memberdata name="ctitle2" display="cTitle2"/>
		<memberdata name="creportname" display="cReportName"/>
		<memberdata name="nreturnvalue" display="nReturnValue"/>
		</VFPData>		&& XML Metadata for customizable properties
	
	PROCEDURE callxfrx		&& Sends the report to XFRX
		LPARAMETERS llSilent, tcArchive, tlAppend
		LOCAL lcOutputType, lcOutputFile, lnReturn, llResult, lcCurrEsc, loListener, loUpdate, lcAlias
		LOCAL lcCurDir, lcCurrEscape, lcQueryFolder, llSilent
		LOCAL llReturn, loError, myPath
		PRIVATE lcTitle1, lcTitle2
		
		llReturn = .T.
		
		
		TRY
		
		   myPath  = SET('Path')
		
		   IF 'rpts' $ LOWER(this.cReportName) 
		       IF NOT '.frx' $ LOWER(this.cReportName) AND NOT '.lbx' $ LOWER(this.cReportName)
		          this.cReportName = ALLTRIM(this.cReportName+'.frx')
		       ENDIF 
		       IF NOT FILE(this.cReportName)
		         MESSAGEBOX('The report format: ' + ALLTRIM(this.cReportName) + ' was not found. Unable to continue with this report.',16,'Missing Report Format')
		         llReturn = .F.
		         EXIT
		       ENDIF    
		   ENDIF 
		   
		   lcTitle1 = this.cTitle1
		   lcTitle2 = this.cTitle2
		   lcSortOrder = this.csortorder
		   lcSelect = this.cSelect
		
		   lcAlias = ALIAS()
		
		   IF VARTYPE(tcArchive) # 'C'
		      tcArchive = ' '
		   ENDIF
		
		   IF NOT FILE(m.goApp.cCommonFolder+'bin\xfrxlib.fll') 
		      llReturn = .F.
		      EXIT 
		   ENDIF
		   
		   IF NOT llReturn
		      EXIT
		   ENDIF
		
		*!*      TRY 
		*!*         SET PATH TO (m.GoApp.cCommonFolder)
		*!*      CATCH TO loError
		*!*      ENDTRY 
		   
		   lcOutputType = THIS.cOutputType
		   lcOutputFile = THIS.cOutputFile
		
		   IF NOT llSilent
		      WAIT WINDOW NOWAIT 'Report Export in progress...'
		   ENDIF
		
		   lcQueryFolder = FULLPATH(ALLTRIM(m.goapp.cQueryFolder))
		   lcCurDir      = FULLPATH(ADDBS(ALLTRIM(CURDIR())))
		
		* Create the XFRX Listener and the Update Listener objects
		   loListener = XFRX('XFRX#LISTENER')
		
		   loUpdate                  = CREATEOBJECT('updatelistener')
		   loUpdate.thermFormCaption = 'Report in progress...'
		
		   loListener.Successor = loUpdate
		
		   IF FILE('datafiles\xfrxlog.txt')
		      loListener.InitLog()
		      llSilent = .F.
		   ELSE
		      llSilent = .T.
		   ENDIF
		
		* Set the XFRX Parameters       Output File,  Temp Fldr, No Preview, Codepage, Silent Mode,  New Wrd Session,  Output File Type, Zip File, Additive, Delete After,  Append
		   IF NOT EMPTY(tcArchive)
		      lnReturn = loListener.SetParams(lcOutputFile, SYS(2023), .T.,         '',       llSilent,     .T.,              lcOutputType, tcArchive,   .T.,        .T.      )
		   ELSE
		      lnReturn = loListener.SetParams(lcOutputFile, SYS(2023), .T.,         '',       llSilent,     .T.,              lcOutputType,     '',      .F.,        .F.,         tlAppend)
		   ENDIF
		
		   IF lnReturn = 0
		* Setup the ability to escape out of building the output file
		      lcCurrEscape = ON('ESCAPE')
		      lcCurrEsc    = SET('ESCAPE')
		      SET ESCAPE ON
		      ON ESCAPE gnStopXFRX = 1
		
		      loListener.SetTitle(THIS.cTitle1)
		      TRY 
		      SELECT (lcAlias)
		      REPORT FORM (THIS.cReportName) NODIALOG OBJECT loListener
		      CATCH TO loerror
		         IF loerror.errorno = 2203
		            MESSAGEBOX('There are too many detail lines for the reports being sent to PDF. Try it again with a smaller range.',16,'Resource Limit')
		         ENDIF
		      ENDTRY 
		      loListener.Finalize()
		      ON ESCAPE &lcCurrEscape
		      IF lcCurrEsc = 'OFF'
		         SET ESCAPE OFF
		      ENDIF lcCurrEsc = 'OFF'
		   ELSE
		      DO CASE
		         CASE lnReturn = -1
		            IF lcOutputType = 'DOC'
		               MESSAGEBOX('Cannot load Microsoft Word to display the report.', 48, 'Microsoft Word Not Installed')
		            ELSE
		               MESSAGEBOX('Cannot load Microsoft Excel to display the report.', 48, 'Microsoft Excel Not Installed')
		            ENDIF
		            llReturn = .F.
		         CASE lnReturn = -2
		            IF lcOutputType = 'DOC'
		               MESSAGEBOX('Microsoft Word must be 2000 or higher to display the report.', 48, 'Wrong Version of Microsoft Word')
		            ELSE
		               MESSAGEBOX('Microsoft Excel must be 2000 or higher to display the report.', 48, 'Wrong Version of Microsoft Excel')
		            ENDIF
		            llReturn = .F.
		         CASE lnReturn = -3
		            MESSAGEBOX('Cannot create or open the output file: ' + lcOutputFile, 48, 'Output Error')
		            llReturn = .F.
		         CASE lnReturn = -5
		            MESSAGEBOX('Cannot export to the chosen file format. The correct hndlib.dll export module is not installed. Please contact SherWare support.', 48, 'File Export Error')
		            llReturn = .F.
		         CASE lnReturn = -6
		            MESSAGEBOX('Cannot export to the chosen file format. The correct xfrxlib.fll export module are not installed. Please contact SherWare support.', 48, 'File Export Error')
		            llReturn = .F.
		         CASE lnReturn = -8
		            MESSAGEBOX('An older version of XFRXLIB.FLL is installed. Please download the latest version and save it to both ' + lcQueryFolder + ' and ' + lcCurDir + ;
		                 ' Download from this link: http://support.sherware.com/download/xfrxlib.fll and then try again.', 48, 'File Export Error')
		            llReturn = .F.
		         OTHERWISE
		            MESSAGEBOX('An error code was returned from the export module while creating the file. Error Code: ' + TRANSFORM(lnReturn), 48, 'File Export Error')
		            llReturn = .F.
		      ENDCASE
		   ENDIF
		
		   WAIT CLEAR
		CATCH TO loError
		   llReturn = .F.
		   DO errorlog WITH 'CallXFRX', loError.LINENO, 'SWXFRX', loError.ERRORNO, loError.MESSAGE, '', loError
		   MESSAGEBOX('Unable to process the export at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		        'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		SET PATH TO (myPath)
		RETURN (llReturn)
		 
	ENDPROC

	PROCEDURE createbatch		&& Creates a bat file to install the XFRX modules.
		LOCAL lcFullPath, lcQueryFolder, lcCurDir, llSuccess
		
		llSuccess     = .T.
		lcFullPath    = 'datafiles\xfrx.bat'
		lcQueryFolder = FULLPATH(ALLTRIM(m.goapp.cQueryFolder))
		lcCurDir      = FULLPATH(ADDBS(ALLTRIM(CURDIR())))
		
		** Replace xfrxlib.fll with the latest version
		TRY
		   IF NOT USED('swlaunch')
		      USE swlaunch IN 0
		   ENDIF
		   SELECT swlaunch
		   GO TOP
		   lcExe = xfrxfll
		   lcSafety = SET('safety')
		   SET SAFETY OFF
		   STRTOFILE(lcExe,'swquery\xfrxlib.fll')
		   SET SAFETY &lcSafety
		CATCH
		ENDTRY
		
		TRY
		   fh = FCREATE(lcFullPath)
		   IF fh > 0
		      =FPUTS(fh,'COPY "' + lcQueryFolder + 'msvcp71.dll" "' + lcCurDir + 'msvcp71.dll"')
		      =FPUTS(fh,'COPY "' + lcQueryFolder + 'msvcr71.dll" "' + lcCurDir + 'msvcr71.dll"')
		      =FPUTS(fh,'COPY "' + lcQueryFolder + 'gdiplus.dll" "' + lcCurDir + 'gdiplus.dll"')
		      =FPUTS(fh,'COPY "' + lcQueryFolder + 'zlib.dll" "' + lcCurDir + 'zlib.dll"')
		      =FPUTS(fh,'COPY "' + lcQueryFolder + 'hndlib.dll" "' + lcCurDir + 'hndlib.dll"')
		      =FPUTS(fh,'COPY "' + lcQueryFolder + 'xfrxlib.fll" "' + lcCurDir + 'xfrxlib.fll"')
		      =FFLUSH(fh)
		      =FCLOSE(fh)
		   ENDIF
		CATCH
		   llSuccess = .F.
		ENDTRY
		
		RETURN (llSuccess)
		
	ENDPROC

	PROCEDURE runbatchfile		&& Runs the bat file by calling ShellExecute
		LPARAMETERS tcFileName, ;
		   tcOperation, ;
		   tcWorkDir, ;
		   tcParameters
		
		LOCAL lcFileName, ;
		   lcWorkDir, ;
		   lcOperation, ;
		   lcParameters, ;
		   lnShow, ;
		   lnReturn
		
		IF EMPTY(tcFileName)
		   RETURN -1
		ENDIF EMPTY(tcFileName)
		
		lcFileName   = ALLTRIM(tcFileName)
		lcWorkDir    = IIF(VARTYPE(tcWorkDir) = 'C', ALLTRIM(tcWorkDir), '')
		lcOperation  = IIF(VARTYPE(tcOperation) = 'C' AND NOT EMPTY(tcOperation), ALLTRIM(tcOperation), 'Open')
		lcParameters = IIF(VARTYPE(tcParameters) = 'C', ALLTRIM(tcParameters), '')
		lnShow       = IIF(UPPER(lcOperation) = 'Print', 0, 1)
		
		DECLARE INTEGER ShellExecute IN SHELL32.DLL ;
		   INTEGER nWinHandle, ; && handle of parent window
		   STRING cOperation, ; && operation to perform
		   STRING cFileName, ;  && filename
		   STRING cParameters, ; && parameters for the executable
		   STRING cDirectory, ; && default directory
		   INTEGER nShowWindow  && window state
		   
		lnReturn = ShellExecute(0, lcOperation, lcFileName, lcParameters, lcWorkDir, lnShow)
		
		RETURN (lnReturn)
		
	ENDPROC

	PROCEDURE setupxfrx		&& Makes sure the fll and dlls are correctly installed
		LOCAL llReturn
		
		llReturn = .t.
		llCopyError = .F.
		
		RETURN .T.
		
		lcPath = FULLPATH(m.goApp.cQueryFolder)
		lcCurDir = FULLPATH(CURDIR())
		
		IF NOT FILE(lcCurDir+'xfrxlib.fll')
		   IF MESSAGEBOX('Some modules need to be installed into the ' + ALLTRIM(lcCurDir) + ;
		         ' folder in order to be able to export reports to different formats. ' + CHR(10)+CHR(10) + ;
		         'Would you like to install these modules now?',36,'Export File Installation') = 6
		      IF THIS.CreateBatch()
		         IF 'Windows 6' $ OS()
		            lnReturn = THIS.RunBatchFile('datafiles\xfrx.bat', 'RunAs')
		         ELSE
		            lnReturn = THIS.RunBatchFile('datafiles\xfrx.bat')   
		         ENDIF    
		         IF lnReturn <= 30
		            MESSAGEBOX('Shell Execute return value: ' + TRANSFORM(lnReturn),16,'Shell Execute Error')
		            llCopyError = .T.
		         ELSE
		            INKEY(5)   
		         ENDIF
		      ELSE
		         llCopyError = .T.
		      ENDIF
		   ELSE
		      MESSAGEBOX('Exporting reports to other file formats will not be available until these modules are installed.',48,'Report Export')
		      llReturn = .F.
		   ENDIF
		   IF llCopyError
		      MESSAGEBOX('There was a problem encountered installing the required modules. Return Code: ' + TRANSFORM(lnReturn) + ' Report export will not be available.',48,'Problem installing files...')
		      llReturn = .F.
		   ENDIF
		ENDIF
		
		RETURN (llReturn)
		
	ENDPROC

	PROCEDURE viewdocument		&& Calls ShellExec with Open to open the document using it's file association
		LOCAL lnReturn, llReturn, lcOutputFile
		
		lcOutputFile = THIS.cOutputFile
		
		llReturn = .T.
		
		lnReturn = 0
		
		IF NOT FILE(lcOutputFile)
		   llReturn = .F.
		ENDIF
		
		TRY
		   IF llReturn
		      DECLARE INTEGER ShellExecute IN "Shell32.dll" ;
		         INTEGER HWND, ;
		         STRING lpVerb, ;
		         STRING lpFile, ;
		         STRING lpParameters, ;
		         STRING lpDirectory, ;
		         LONG nShowCmd
		
		      lnReturn = ShellExecute(0, "Open", lcOutputFile,"","", 1)
		   ENDIF
		
		   IF lnReturn > 32
		      llReturn = .T.
		   ELSE
		      llReturn = .F.
		   ENDIF
		CATCH TO loError
		   lnReturn = 99
		ENDTRY
		
		THIS.nReturnValue = lnReturn
		
		RETURN (llReturn)
		
	ENDPROC

ENDDEFINE
