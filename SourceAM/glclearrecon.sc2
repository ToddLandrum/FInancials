*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="glclearrecon.scx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="2" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Cursor2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor6" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor7" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor8" UniqueID="" Timestamp="" />

	AutoOpenTables = .F.
	DataSource = .NULL.
	Height = 974
	Left = 3
	Name = "Dataenvironment"
	Top = -2
	Width = 1754

	ADD OBJECT 'Cursor1' AS cursor WITH ;
		Alias = "expense", ;
		CursorSource = "expense", ;
		Database = ..\amdata\appdata.dbc, ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor1", ;
		Top = 20, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor2' AS cursor WITH ;
		Alias = "glmaster", ;
		CursorSource = "glmaster", ;
		Database = ..\amdata\appdata.dbc, ;
		Height = 90, ;
		Left = 157, ;
		Name = "Cursor2", ;
		Top = 27, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor3' AS cursor WITH ;
		Alias = "glopt", ;
		CursorSource = "glopt", ;
		Database = ..\amdata\appdata.dbc, ;
		Height = 90, ;
		Left = 290, ;
		Name = "Cursor3", ;
		Top = 20, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor4' AS cursor WITH ;
		Alias = "income", ;
		CursorSource = "income", ;
		Database = ..\amdata\appdata.dbc, ;
		Height = 90, ;
		Left = 430, ;
		Name = "Cursor4", ;
		Top = 20, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor5' AS cursor WITH ;
		Alias = "sysctl", ;
		CursorSource = "sysctl", ;
		Database = ..\amdata\appdata.dbc, ;
		Height = 90, ;
		Left = 570, ;
		Name = "Cursor5", ;
		Top = 20, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor6' AS cursor WITH ;
		Alias = "wells", ;
		CursorSource = "wells", ;
		Database = ..\amdata\appdata.dbc, ;
		Height = 90, ;
		Left = 710, ;
		Name = "Cursor6", ;
		Top = 20, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor7' AS cursor WITH ;
		Alias = "expsusp", ;
		CursorSource = "expsusp", ;
		Database = ..\amdata\appdata.dbc, ;
		Height = 90, ;
		Left = 850, ;
		Name = "Cursor7", ;
		Top = 20, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor8' AS cursor WITH ;
		Alias = "incsusp", ;
		CursorSource = "incsusp", ;
		Database = ..\amdata\appdata.dbc, ;
		Height = 90, ;
		Left = 990, ;
		Name = "Cursor8", ;
		Top = 20, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

ENDDEFINE

DEFINE CLASS formglclearrecon AS frmrptcriteria OF "appforms.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Runcombo1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="optReportBy" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="optType" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblBegDate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="date2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="date1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Swrptlook1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="LblLastWell" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblType" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="LblFirstWell" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblRunNo" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="optSelect" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom3" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*p: cbatch1
		*p: cbatch2
	*</DefinedPropArrayMethod>

	Caption = "G/L Clearing Account Reconciliation"
	cbatch1 = .F.
	cbatch2 = .F.
	DataSession = 2
	DoCreate = .T.
	Height = 417
	HelpContextID = 408
	Name = "FormGlClearRecon"
	Visible = .T.
	Width = 447
	Swrptcriteriabuttons1.chkSendFile.Alignment = 0
	Swrptcriteriabuttons1.chkSendFile.Name = "chkSendFile"
	Swrptcriteriabuttons1.cmdclose.Name = "cmdclose"
	Swrptcriteriabuttons1.cmdPreview.Name = "cmdPreview"
	Swrptcriteriabuttons1.cmdPrint.Name = "cmdPrint"
	Swrptcriteriabuttons1.Left = 106
	Swrptcriteriabuttons1.Name = "Swrptcriteriabuttons1"
	Swrptcriteriabuttons1.TabIndex = 13
	Swrptcriteriabuttons1.Top = 353
	Swrptcriteriabuttons1.ZOrderSet = 0

	ADD OBJECT 'date1' AS dpk WITH ;
		Enabled = .F., ;
		Left = 108, ;
		Name = "date1", ;
		TabIndex = 10, ;
		Top = 161, ;
		Visible = .T., ;
		ZOrderSet = 3
		*< END OBJECT: ClassLib="..\custom\swdate.vcx" BaseClass="textbox" />

	ADD OBJECT 'date2' AS dpk WITH ;
		Enabled = .F., ;
		Left = 228, ;
		Name = "date2", ;
		TabIndex = 11, ;
		Top = 161, ;
		Visible = .T., ;
		ZOrderSet = 3
		*< END OBJECT: ClassLib="..\custom\swdate.vcx" BaseClass="textbox" />

	ADD OBJECT 'lblBegDate' AS lbllabelcustom WITH ;
		Caption = "Date Range:", ;
		Left = 34, ;
		Name = "lblBegDate", ;
		TabIndex = 14, ;
		Top = 164, ;
		Visible = .T., ;
		ZOrderSet = 1
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'LblFirstWell' AS lbllabelcustom WITH ;
		Caption = "First Well:", ;
		Height = 16, ;
		Left = 34, ;
		Name = "LblFirstWell", ;
		TabIndex = 4, ;
		Top = 215, ;
		Width = 49, ;
		ZOrderSet = 9
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom1' AS lbllabelcustom WITH ;
		Caption = "Type", ;
		Height = 16, ;
		Left = 238, ;
		Name = "Lbllabelcustom1", ;
		TabIndex = 7, ;
		Top = 20
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom2' AS lbllabelcustom WITH ;
		Caption = "-", ;
		Left = 215, ;
		Name = "Lbllabelcustom2", ;
		TabIndex = 15, ;
		Top = 165
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom3' AS lbllabelcustom WITH ;
		Caption = "Report By", ;
		Left = 34, ;
		Name = "Lbllabelcustom3", ;
		TabIndex = 16, ;
		Top = 72
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'LblLastWell' AS lbllabelcustom WITH ;
		Caption = "Last Well:", ;
		Height = 16, ;
		Left = 34, ;
		Name = "LblLastWell", ;
		TabIndex = 6, ;
		Top = 266, ;
		Width = 49, ;
		ZOrderSet = 8
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblRunNo' AS lbllabelcustom WITH ;
		Caption = "Run No", ;
		Left = 34, ;
		Name = "lblRunNo", ;
		TabIndex = 8, ;
		Top = 127, ;
		ZOrderSet = 12
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblType' AS lblfieldlabelcustom WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "Report Type", ;
		Height = 16, ;
		Left = 34, ;
		Name = "lblType", ;
		TabIndex = 1, ;
		Top = 20, ;
		Width = 61, ;
		ZOrderSet = 9
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'optReportBy' AS opgoptiongroupcustom WITH ;
		ButtonCount = 2, ;
		Height = 48, ;
		Left = 108, ;
		Name = "optReportBy", ;
		TabIndex = 5, ;
		Top = 65, ;
		Value = 1, ;
		Width = 107, ;
		ZOrderSet = 1, ;
		Option1.AutoSize = .T., ;
		Option1.Caption = "Run No", ;
		Option1.FontSize = 8, ;
		Option1.Height = 16, ;
		Option1.Left = 6, ;
		Option1.Name = "option1", ;
		Option1.Top = 7, ;
		Option1.Value = 1, ;
		Option1.Width = 53, ;
		Option2.AutoSize = .T., ;
		Option2.Caption = "Date Range", ;
		Option2.FontSize = 8, ;
		Option2.Height = 16, ;
		Option2.Left = 6, ;
		Option2.Name = "Option2", ;
		Option2.Top = 26, ;
		Option2.Width = 74
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="optiongroup" />

	ADD OBJECT 'optSelect' AS opgoptiongroupcustom WITH ;
		ButtonCount = 3, ;
		Height = 66, ;
		Left = 283, ;
		Name = "optSelect", ;
		TabIndex = 3, ;
		Top = 12, ;
		Width = 142, ;
		Option1.AutoSize = .T., ;
		Option1.Caption = "Expense Clearing", ;
		Option1.FontSize = 8, ;
		Option1.Height = 16, ;
		Option1.Left = 5, ;
		Option1.Name = "Option1", ;
		Option1.Top = 5, ;
		Option1.Width = 102, ;
		Option2.AutoSize = .T., ;
		Option2.Caption = "Revenue Clearing", ;
		Option2.FontSize = 8, ;
		Option2.Height = 16, ;
		Option2.Left = 5, ;
		Option2.Name = "Option2", ;
		Option2.Top = 24, ;
		Option2.Width = 103, ;
		Option3.AutoSize = .T., ;
		Option3.Caption = "Both Clearing Accounts", ;
		Option3.FontSize = 8, ;
		Option3.Height = 16, ;
		Option3.Left = 5, ;
		Option3.Name = "Option3", ;
		Option3.Top = 43, ;
		Option3.Width = 132
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="optiongroup" />

	ADD OBJECT 'optType' AS opgoptiongroupcustom WITH ;
		ButtonCount = 2, ;
		Height = 48, ;
		Left = 108, ;
		Name = "optType", ;
		TabIndex = 2, ;
		Top = 12, ;
		Value = 1, ;
		Width = 107, ;
		ZOrderSet = 1, ;
		Option1.AutoSize = .T., ;
		Option1.Caption = "Detail Listing", ;
		Option1.FontSize = 8, ;
		Option1.Height = 16, ;
		Option1.Left = 6, ;
		Option1.Name = "optJournal", ;
		Option1.Top = 7, ;
		Option1.Value = 1, ;
		Option1.Width = 78, ;
		Option2.AutoSize = .T., ;
		Option2.Caption = "Summary Listing", ;
		Option2.FontSize = 8, ;
		Option2.Height = 16, ;
		Option2.Left = 6, ;
		Option2.Name = "Option2", ;
		Option2.Top = 26, ;
		Option2.Width = 97
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="optiongroup" />

	ADD OBJECT 'Runcombo1' AS runcombo WITH ;
		ColumnWidths = "230,0,0", ;
		cshowwhat = B, ;
		Height = 20, ;
		Left = 108, ;
		lnoinit = .F., ;
		lshownew = .F., ;
		Name = "Runcombo1", ;
		TabIndex = 9, ;
		Top = 124, ;
		Width = 257, ;
		ZOrderSet = 0
		*< END OBJECT: ClassLib="..\custom\swcontrol.vcx" BaseClass="combobox" />

	ADD OBJECT 'Swrptlook1' AS swrptlook WITH ;
		Left = 109, ;
		Name = "Swrptlook1", ;
		TabIndex = 12, ;
		Top = 212, ;
		ZOrderSet = 5, ;
		Swlookupbutton1.Name = "Swlookupbutton1", ;
		Swlookupbutton2.Name = "Swlookupbutton2", ;
		txtBegID.clistexpression = wells.cwellid, ;
		txtBegID.clistworkarea = wells, ;
		txtBegID.Name = "txtBegID", ;
		TxtBegName.Name = "TxtBegName", ;
		txtEndID.clistexpression = wells.cwellid, ;
		txtEndID.clistworkarea = wells, ;
		txtEndID.Name = "txtEndID", ;
		TxtEndName.Name = "TxtEndName"
		*< END OBJECT: ClassLib="..\custom\swcontrol.vcx" BaseClass="container" />
	
	PROCEDURE builddata
		LOCAL lcJourn, lcJournal, oGLMaint, oDist, oProgress
		LOCAL lcRevClear, lcExpClear
		LOCAL lcJIB, lctitle1, lctitle2, llReturn, llfound, lnGl, lnProgress, lnTotalIncG, lnTotalIncO
		LOCAL lnamount, loError
		LOCAL cType, cacctno, cdesc, cdmbatch, cprocessed, cproducer, crun_processed, csource, cwellid
		LOCAL ddate, nBegBal, nEndBal, namount, ncredits, ndebits, ntotalinc, tcClose, tcGroup, tcRunYear
		LOCAL tcType, tcWell1, tcWell2, tdDate1, tdDate2, tnReportBy, tnRunNo
		*:Global cbatch, cwellname
		
		tcRunYear  = THISFORM.runcombo1.LISTITEM[thisform.runcombo1.listitemid, 2]
		tnRunNo    = INT(VAL(THISFORM.runcombo1.LISTITEM[thisform.runcombo1.listitemid, 3]))
		tcGroup    = THISFORM.runcombo1.LISTITEM[thisform.runcombo1.listitemid, 4]
		tcClose    = THISFORM.runcombo1.LISTITEM[thisform.runcombo1.listitemid, 6]
		tnReportBy = THISFORM.optreportBy.VALUE
		tcWell1    = THISFORM.swrptlook1.txtBegID.VALUE
		tcWell2    = THISFORM.swrptlook1.txtEndID.VALUE
		
		
		llReturn = .T.
		
		TRY
		* Create the progress object for the progress bar
		    oProgress = THIS.omessage.progressbarex('Building the reconciliation report...please wait')
		
		* Get the GLMaint object
		    oGLMaint = CREATEOBJECT('glmaint')
		
		* Create the oDist object
		    oDist = CREATEOBJECT('distproc', tcWell1, tcWell2, ;
		          '01', ;
		          tcRunYear, ;
		          tcGroup, 'W', DATE(), .F., tnRunNo)
		
		
		    DO CASE
		        CASE THISFORM.optSelect.VALUE = 1
		* Expense Clearing
		            THISFORM.cTitle1         = 'Expense Clearing'
		            THISFORM.cselectcriteria = ''
		            tcType                   = 'E'
		        CASE THISFORM.optSelect.VALUE = 2
		* Revenue Clearing
		            THISFORM.cTitle1         = 'Revenue Clearing'
		            THISFORM.cselectcriteria = ''
		            tcType                   = 'R'
		        CASE THISFORM.optSelect.VALUE = 3
		* Both Clearing Accounts
		            THISFORM.cTitle1         = 'Both Expense and Revenue Clearing'
		            THISFORM.cselectcriteria = ''
		            tcType                   = 'A'
		    ENDCASE
		
		    IF tnReportBy = 1
		        IF tcClose = 'R'
		            THISFORM.cTitle2 = 'For Revenue Run ' + PADL(TRANSFORM(tnRunNo), 3, '0') + '/' + tcRunYear + '/' + tcGroup
		        ELSE
		            THISFORM.cTitle2 = 'For JIB Run ' + PADL(TRANSFORM(tnRunNo), 3, '0') + '/' + tcRunYear + '/' + tcGroup
		        ENDIF
		    ELSE
		        THISFORM.cTitle2 = 'For Date Range: ' + DTOC(THISFORM.date1.VALUE) + ' - ' + DTOC(THISFORM.date2.VALUE)
		    ENDIF
		
		    swselect('glopt')
		    GO TOP
		    lcRevClear = cRevClear
		    lcExpClear = cExpClear
		
		    IF tnReportBy = 1
		        swselect('sysctl')
				SELECT  nrunno, crunyear, cgroup, ctypeclose, dacctdate ;
					FROM sysctl ;
					WHERE crunyear + PADL(TRANSFORM(nrunno), 3, '0') <= tcRunYear + PADL(TRANSFORM(tnRunNo), 3, '0') ;
						AND cgroup == tcGroup ;
						AND ctypeclose = tcClose ;
					INTO CURSOR tempsys ;
					ORDER BY crunyear, nrunno
		
		* Get the date range for the run
		* It will be one day after the last run closing for the group - date1
		* and the accounting date of the chosen run - date2
		        IF _TALLY > 0
		            SELECT tempsys
		            GO BOTT
		            tdDate2 = dacctdate
		            SKIP - 1
		            tdDate1 = dacctdate + 1
		        ELSE
		            MESSAGEBOX('There have been no revenue or JIB closings. Choose to run the report by date range instead.', 16, 'No Closings')
		            llReturn = .F.
		            EXIT
		        ENDIF
		    ELSE
		        tdDate1 = THISFORM.date1.VALUE
		        tdDate2 = THISFORM.date2.VALUE
		    ENDIF
		
		    CREATE CURSOR tempclear ;
		        (ddate           d, ;
		          cType           c(2), ;
		          cprocessed      c(1), ;
		          crun_processed  c(9), ;
		          csource         c(2), ;
		          cacctno         c(6), ;
		          cbatch          c(8), ;
		          cwellid         c(10), ;
		          cwellname       c(30), ;
		          cdesc           c(40), ;
		          ndebits         N(12, 2), ;
		          ncredits        N(12, 2), ;
		          nBegBal         N(12, 2), ;
		          nEndBal         N(12, 2))
		    INDEX ON cbatch TAG cbatch
		
		    STORE ' ' TO m.cType, m.cprocessed, m.crun_processed, m.csource, m.cacctno, m.cbatch
		    STORE ' ' TO m.cwellid, m.cwellname, m.cdesc
		    STORE 0 TO m.ndebits, m.ncredits, m.nBegBal, m.nEndBal
		
		    CREATE CURSOR badbatch ;
		        (cbatch      c(8), ;
		          cwellid      c(10), ;
		          dexpdate    d, ;
		          cpayee      c(30), ;
		          namount     N(12, 2))
		
		    IF tnReportBy = 1  && Run No
		        SELECT cwellid FROM wells WHERE cgroup == tcGroup INTO CURSOR wellgroup ORDER BY cwellid
		
		        IF tcType = 'E' OR tcType = 'A'
		            m.cType = 'E'
		            swselect('sysctl')
		            SELECT sysctl
		            LOCATE FOR nrunno = tnRunNo AND crunyear = tcRunYear AND ctypeclose == tcClose
		            IF FOUND()
		                m.cdmbatch = cdmbatch
		                swselect('expense')
		                IF tcClose = 'R'
							SELECT  cwellid, cpayee, namount, dexpdate, cbatch, cexpclass, ccatcode, cownerid ;
								FROM expense ;
								WHERE nrunnorev = tnRunNo ;
									AND crunyearrev = tcRunYear ;
									AND BETWEEN(cwellid, tcWell1, tcWell2) ;
									AND cwellid IN (SELECT  cwellid ;
														FROM wellgroup) ;
								INTO CURSOR tempexp ;
								ORDER BY cwellid, cbatch
		                ELSE
							SELECT  cwellid, cpayee, namount, dexpdate, cbatch, cexpclass, ccatcode, cownerid ;
								FROM expense ;
								WHERE nrunnojib = tnRunNo ;
									AND crunyearjib = tcRunYear ;
									AND BETWEEN(cwellid, tcWell1, tcWell2) ;
									AND cwellid IN (SELECT  cwellid ;
														FROM wellgroup) ;
								INTO CURSOR tempexp ;
								ORDER BY cwellid, cbatch
		                ENDIF
		                oProgress.setprogressmessage('Processing Expense Clearing...')
		                oProgress.setprogressrange(0, _TALLY)
		                lnProgress = 1
		                CREATE CURSOR cidgl (cidglma c(10))
		                
		                SELECT tempexp
		                SCAN
		                    SCATTER MEMVAR
		                    oProgress.updateprogress(lnProgress)
		                    lnProgress = lnProgress + 1
		                    IF tcClose = 'R'
		                        lcJIB = 'B'
		                    ELSE
		                        lcJIB = 'B'
		                    ENDIF
		                    m.namount = swNetExp(m.namount, m.cwellid, .T., m.cexpclass, lcJIB, .T., m.cownerid, m.ccatcode)
		                    STORE 0 TO m.ndebits, m.ncredits
		                    IF namount > 0
		                        m.ndebits = m.namount
		                    ELSE
		                        m.ncredits = ABS(m.namount)
		                    ENDIF
		                    
		                    SELECT tempclear
		                    SCATTER MEMVAR blank 
		
		                    llfound = .F.
		                    swselect('glmaster')
		                    SELECT glmaster
		                    SCAN FOR cbatch == m.cbatch AND cacctno == lcExpClear ;
		                            AND cunitno == m.cwellid AND ndebits = m.ndebits AND ncredits = m.ncredits
		                        m.cidglma  = cidglma
		                        SELECT cidgl
		                        LOCATE FOR cidglma == m.cidglma
		                        IF FOUND()
		                           LOOP
		                        ENDIF     
		                        SELECT glmaster 
		                        llfound    = .T.
		                        m.ddate    = ddate
		                        m.ndebits  = ndebits
		                        m.ncredits = ncredits
		                        m.cdesc    = cdesc
		                        m.cacctno  = cacctno
		                        m.csource  = csource
		                        INSERT INTO tempclear FROM MEMVAR
		                        INSERT INTO cidgl FROM MEMVAR 
		                    ENDSCAN
		                    IF NOT llfound
		                        m.cdesc   = cpayee
		                        m.ddate   = m.dexpdate
		                        m.cacctno = lcExpClear
		                        INSERT INTO badbatch FROM MEMVAR
		                    ENDIF
		                ENDSCAN
		                
		                SELECT tempclear
		                SCATTER MEMVAR blank 
		
		                swselect('glmaster')
		                SELECT glmaster
		                SCAN FOR cdmbatch == m.cdmbatch AND cacctno = lcExpClear AND BETWEEN(cunitno, tcWell1, tcWell2)
		                    SCATTER MEMVAR
		                    WAIT WINDOW NOWAIT 'Setting up for expenses not processed...'
		                    m.cwellid = m.cunitno
		                    INSERT INTO tempclear FROM MEMVAR
		                ENDSCAN
		                WAIT CLEAR
		            ENDIF
		        ENDIF
		
		        IF tcType = 'R' OR tcType = 'A'
		            m.cType = 'R'
		            swselect('sysctl')
		            LOCATE FOR nrunno = tnRunNo AND crunyear = tcRunYear AND ctypeclose == tcClose
		            IF FOUND()
		                m.cdmbatch = cdmbatch
		                swselect('income')
						SELECT  cwellid, csource, ntotalinc, drevdate, cbatch, cownerid ;
							FROM income ;
							WHERE nrunno = tnRunNo ;
								AND crunyear = tcRunYear ;
								AND BETWEEN(cwellid, tcWell1, tcWell2) ;
								AND cwellid IN (SELECT  cwellid ;
													FROM wellgroup) ;
							INTO CURSOR temprev ;
							ORDER BY cwellid, cbatch
		                oProgress.setprogressmessage('Processing Revenue Clearing...')
		                oProgress.setprogressrange(0, _TALLY)
		                lnProgress = 1
		                CREATE CURSOR cidgl (cidglma c(10))
		                SELECT temprev
		                SCAN
		                    SCATTER MEMVAR
		                    oProgress.updateprogress(lnProgress)
		                    lnProgress = lnProgress + 1
		                    DO CASE
		                        CASE m.csource = 'MCF'
		                            m.csource = 'G'
		                        CASE m.csource = 'BBL'
		                            m.csource = 'O'
		                        CASE 'TAX' $ m.csource
		                            m.csource = STRTRAN(m.csource, 'TAX', '')
		                        CASE 'MISC' $ m.csource
		                            m.csource = RIGHT(ALLTRIM(m.csource), 1)
		                        OTHERWISE
		                            m.csource = LEFT(m.csource, 1)
		                    ENDCASE
		                    m.ntotalinc = oDist.NetRev(m.cwellid, m.ntotalinc, m.csource, .F., .T., .F., m.cownerid, 'TAX' $ m.csource, .T.)
		                    STORE 0 TO m.ndebits, m.ncredits
		                    IF ntotalinc < 0
		                        m.ndebits = ABS(m.ntotalinc)
		                    ELSE
		                        m.ncredits = m.ntotalinc
		                    ENDIF
		                    
		                    SELECT tempclear
		                    SCATTER MEMVAR blank 
		                    
		* Match up the entered revenue to what was posted to the revenue clearing
		                    llfound = .F.
		                    swselect('glmaster')
		                    SCAN FOR cbatch == m.cbatch AND cacctno == lcRevClear ;
		                            AND cunitno = m.cwellid AND ndebits = m.ndebits AND ncredits = m.ncredits
		                        m.cidglma  = cidglma
		                        SELECT cidgl
		                        LOCATE FOR cidglma == m.cidglma
		                        IF FOUND()
		                           LOOP
		                        ENDIF         
		                        llfound    = .T.
		                        m.ddate    = ddate
		                        m.ndebits  = ndebits
		                        m.ncredits = ncredits
		                        m.cdesc    = cdesc
		                        m.cacctno  = cacctno
		                        m.csource  = csource
		                        INSERT INTO tempclear FROM MEMVAR
		                    ENDSCAN
		                    IF NOT llfound
		                        m.cdesc    = m.csource
		                        m.dexpdate = m.drevdate
		                        m.cacctno  = lcRevClear
		                        m.namount  = m.ntotalinc
		                        m.cpayee   = ''
		                        INSERT INTO badbatch FROM MEMVAR
		                    ENDIF
		                ENDSCAN
		                
		                SELECT tempclear
		                SCATTER MEMVAR blank 
		                
		* Bring in the revenue posted when the revenue run was closed.
		                swselect('glmaster')
		                SCAN FOR cdmbatch == m.cdmbatch AND cacctno = lcRevClear AND BETWEEN(cunitno, tcWell1, tcWell2)
		                    SCATTER MEMVAR
		                    WAIT WINDOW NOWAIT 'Setting up for revenue not processed...'
		                    m.cwellid = m.cunitno
		                    INSERT INTO tempclear FROM MEMVAR
		                ENDSCAN
		            ENDIF
		        ENDIF
		
		        oProgress.CloseProgress()
		
		        m.cType = 'X'
		
		        lnGl = 1
		* Get the entries that have not been processed yet
		        IF tcType = 'E' OR tcType = 'A'
		            swselect('glmaster')
		            SCAN FOR cacctno = lcExpClear AND BETWEEN(cunitno, tcWell1, tcWell2)
		                SCATTER MEMVAR
		                WAIT WINDOW NOWAIT 'Looking for expenses in expense clearing not processed this run...' + PADL(TRANSFORM(lnGl), 6, '0')
		                lnGl = lnGl + 1
		                SELECT wellgroup
		                LOCATE FOR cwellid = m.cunitno
		                IF NOT FOUND()
		                    LOOP
		                ENDIF
		                m.cType = 'XE'
		                SELECT tempclear
		                LOCATE FOR cbatch == m.cbatch AND cType <> 'XE' AND cwellid == m.cunitno AND ndebits = m.ndebits AND ncredits = m.ncredits
		                IF FOUND()
		                    LOOP
		                ENDIF
		
		                m.cwellid = m.cunitno
		                INSERT INTO tempclear FROM MEMVAR
		            ENDSCAN
		            WAIT CLEAR
		        ENDIF
		
		        lnGl = 1
		        SELECT tempclear
		        SCATTER MEMVAR blank 
		        
		        IF tcType = 'R' OR tcType = 'A'
		            swselect('glmaster')
		            SCAN FOR  cacctno = lcRevClear AND BETWEEN(cunitno, tcWell1, tcWell2)
		                SCATTER MEMVAR
		                WAIT WINDOW NOWAIT 'Looking for revenue in revenue clearing not processed this run...' + PADL(TRANSFORM(lnGl), 6, '0')
		                lnGl = lnGl + 1
		                SELECT wellgroup
		                LOCATE FOR cwellid = m.cunitno
		                IF NOT FOUND()
		                    LOOP
		                ENDIF
		
		                m.cType = 'XR'
		                SELECT tempclear
		                LOCATE FOR cbatch == m.cbatch AND cType <> 'XR' AND cwellid == m.cunitno AND ndebits = m.ndebits AND ncredits = m.ncredits
		                IF FOUND()
		                    LOOP
		                ENDIF
		                IF m.cacctno <> lcRevClear
		                    LOOP
		                ENDIF
		
		                m.cwellid = m.cunitno
		                INSERT INTO tempclear FROM MEMVAR
		
		            ENDSCAN
		            WAIT CLEAR
		        ENDIF
		
		        swselect('wells')
		        SET ORDER TO cwellid
		        SELECT tempclear
		        SCAN
		            m.cwellid = cwellid
		            SELECT wells
		            IF SEEK(m.cwellid)
		                SELECT tempclear
		                REPLACE cwellname WITH wells.cwellname
		            ENDIF
		        ENDSCAN
		
		        SELECT tempclear
		        INDEX ON cType + cacctno + cwellid + DTOS(ddate) + cbatch TAG cType
		
		    ELSE
		        IF tcType = 'E' OR tcType = 'A'
		            m.cType   = 'E'
		            m.nBegBal = oGLMaint.getbalance(lcExpClear, {01/01/1900}, .F., tdDate1 - 1)
		            m.nEndBal = oGLMaint.getbalance(lcExpClear, {01/01/1900}, .F., tdDate2)
		
		* Process posting entries
		            swselect('sysctl')
		            SELECT nrunno, crunyear, ctypeclose, cdmbatch FROM sysctl WHERE BETWEEN(dacctdate, tdDate1, tdDate2) INTO CURSOR tempsys
		            CREATE CURSOR expid (cidexpe c(8))
		            SELECT tempclear
		            SCATTER MEMVAR blank 
		            swselect('glmaster')
		            SCAN FOR cacctno = lcExpClear AND BETWEEN(ddate, tdDate1, tdDate2) AND BETWEEN(cunitno, tcWell1, tcWell2)
		                SCATTER MEMVAR
		                m.cwellid = m.cunitno
		                SELECT expense
		                LOCATE FOR cbatch = m.cbatch AND ((nrunnorev <> 0 OR nrunnojib <> 0) AND crunyearrev <> '1980') AND cwellid == m.cwellid AND (ABS(namount) = ABS(m.ndebits) OR ABS(namount) = ABS(m.ncredits))
		                IF FOUND()
		                    SCAN FOR cbatch = m.cbatch AND ((nrunnorev <> 0 OR nrunnojib <> 0) AND crunyearrev <> '1980') AND cwellid == m.cwellid AND (ABS(namount) = ABS(m.ndebits) OR ABS(namount) = ABS(m.ncredits))
		                        m.cidexpe = cidexpe
		                        SELECT expid
		                        LOCATE FOR cidexpe == m.cidexpe
		                        IF FOUND()
		                            LOOP
		                        ENDIF
		                        IF expense.nrunnorev <> 0
		                            m.crun_processed = 'R' + expense.crunyearrev + '/' + PADL(TRANSFORM(expense.nrunnorev), 3, '0')
		                            m.cprocessed     = 'P'
		                            m.cType          = 'E'
		                        ELSE
		                            IF expense.nrunnojib <> 0
		                                m.crun_processed = 'J' + expense.crunyearjib + '/' + PADL(TRANSFORM(expense.nrunnojib), 3, '0')
		                                m.cprocessed     = 'P'
		                                m.cType          = 'E'
		                            ELSE
		                                m.cType = 'XE'
		                            ENDIF
		                        ENDIF
		                        INSERT INTO expid FROM MEMVAR
		                    ENDSCAN
		                ELSE
		                    SELECT expsusp
		                    LOCATE FOR cbatch = m.cbatch AND cwellid == m.cwellid AND (ABS(namount) = ABS(m.ndebits) OR ABS(namount) = ABS(m.ncredits))
		                    IF FOUND()
		                        m.crun_processed = ''
		                        m.cprocessed     = 'U'
		                        m.cType          = 'XE'
		                    ELSE
		* Look for entry that was posted as a result of closing the run
		                        IF NOT EMPTY(m.cdmbatch)
		                            SELECT tempsys
		                            LOCATE FOR cdmbatch = m.cdmbatch AND crunyear <> '1980'
		                            IF FOUND()
		                                SCATTER MEMVAR
		                                m.crun_processed = m.ctypeclose + m.crunyear + '/' + PADL(TRANSFORM(m.nrunno), 3, '0')
		                                m.cprocessed     = 'P'
		                                m.cType          = 'E'
		                            ELSE
		                                m.crun_processed = ''
		                                m.cprocessed     = 'U'
		                                m.cType          = 'XE'
		                            ENDIF
		                        ELSE
		                            m.crun_processed = ''
		                            m.cprocessed     = 'U'
		                            m.cType          = 'XE'
		                        ENDIF
		                    ENDIF
		                ENDIF
		
		                INSERT INTO tempclear FROM MEMVAR
		            ENDSCAN
		        ENDIF
		        IF tcType = 'R' OR tcType = 'A'
		            m.cType   = 'R'
		            m.nBegBal = oGLMaint.getbalance(lcRevClear, {01/01/1900}, .F., tdDate1 - 1)
		            m.nEndBal = oGLMaint.getbalance(lcRevClear, {01/01/1900}, .F., tdDate2)
		
		* Process posting entries
		            swselect('sysctl')
		            SELECT nrunno, crunyear, ctypeclose, cdmbatch FROM sysctl WHERE ctypeclose == tcClose AND BETWEEN(dacctdate, tdDate1, tdDate2) INTO CURSOR tempsys
		            
		            SELECT tempclear
		            SCATTER MEMVAR blank 
		
		            swselect('glmaster')
		            SCAN FOR cacctno = lcRevClear AND BETWEEN(ddate, tdDate1, tdDate2) AND BETWEEN(cunitno, tcWell1, tcWell2)
		                SCATTER MEMVAR
		                m.cwellid   = m.cunitno
		                lnamount    = m.ndebits + m.ncredits
		                lnTotalIncO = oDist.NetRev(m.cwellid, lnamount, 'O', .T., .T., .F., ' ', .F., .T.)
		                lnTotalIncG = oDist.NetRev(m.cwellid, lnamount, 'G', .T., .T., .F., ' ', .F., .T.)
		
		                SELECT income
		                LOCATE FOR cbatch = m.cbatch AND nrunno <> 0 AND cwellid == m.cwellid AND (ABS(ntotalinc) = ABS(lnTotalIncO) OR ABS(ntotalinc) = ABS(lnTotalIncG))
		                IF FOUND()
		                    m.crun_processed = 'R' + income.crunyear + '/' + PADL(TRANSFORM(income.nrunno), 3, '0')
		                    m.cprocessed     = 'P'
		                    m.cType          = 'R'
		                ELSE
		                    SELECT incsusp
		                    LOCATE FOR cbatch = m.cbatch AND cwellid == m.cwellid AND (ABS(ntotalinc) = ABS(m.ndebits) OR ABS(ntotalinc) = ABS(m.ncredits))
		                    IF FOUND()
		                        m.crun_processed = ''
		                        m.cprocessed     = 'U'
		                        m.cType          = 'XR'
		                    ELSE
		* Look for entry that was posted as a result of closing the run
		                        SELECT tempsys
		                        LOCATE FOR cdmbatch = m.cdmbatch
		                        IF FOUND()
		                            SCATTER MEMVAR
		                            m.crun_processed = m.ctypeclose + m.crunyear + '/' + PADL(TRANSFORM(m.nrunno), 3, '0')
		                            m.cprocessed     = 'P'
		                            m.cType          = 'R'
		                        ELSE
		                            m.crun_processed = ''
		                            m.cprocessed     = 'U'
		                            m.cType          = 'XR'
		                        ENDIF
		                    ENDIF
		                ENDIF
		
		                INSERT INTO tempclear FROM MEMVAR
		            ENDSCAN
		        ENDIF
		
		        swselect('wells')
		        SET ORDER TO cwellid
		        SELECT tempclear
		        SCAN
		            m.cwellid = cwellid
		            SELECT wells
		            IF SEEK(m.cwellid)
		                SELECT tempclear
		                REPLACE cwellname WITH wells.cwellname
		            ENDIF
		        ENDSCAN
		
		        SELECT tempclear
		        INDEX ON cType + cacctno + cprocessed + cwellid + DTOS(ddate) + cbatch TAG cType
		
		    ENDIF
		
		    lctitle1    = THISFORM.cTitle1
		    lctitle2    = THISFORM.cTitle2
		    m.cproducer = m.goapp.ccompanyname
		
		    IF tnReportBy = 1
		        IF THISFORM.opttype.VALUE = 1
		            THISFORM.creportname = 'source\glclearrecon'
		            THISFORM.lsummary    = .F.
		        ELSE
		            THISFORM.creportname = 'source\glclearrecon'
		            THISFORM.lsummary    = .T.
		            THISFORM.cTitle1     = 'Summary ' + THISFORM.cTitle1
		        ENDIF
		    ELSE
		        IF THISFORM.opttype.VALUE = 1
		            THISFORM.lsummary = .F.
		        ELSE
		            THISFORM.lsummary = .T.
		        ENDIF
		        THISFORM.creportname = 'source\glclearrecond'
		    ENDIF
		
		    SELECT tempclear
		    IF RECCOUNT() > 0
		        llReturn = .T.
		    ELSE
		        llReturn = .F.
		    ENDIF
		
		CATCH TO loError
		    llReturn = .F.
		    DO errorlog WITH 'BuildData', loError.LINENO, 'GlClearRecon', loError.ERRORNO, loError.MESSAGE, '', loError
		    MESSAGEBOX('Unable to process the report at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		          'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		RETURN llReturn
		
		
		
	ENDPROC

	PROCEDURE Init
		IF DODEFAULT()
		   swselect('wells')
		   SET ORDER to cwellid 
		   THISFORM.date1.VALUE = DATE()
		
		   THISFORM.swrptlook1.txtBegName.VALUE = cwellname
		   THISFORM.swrptlook1.txtBegID.VALUE = cWellID
		   GO BOTTOM
		
		   THISFORM.swrptlook1.txtEndName.VALUE = cwellname
		   THISFORM.swrptlook1.txtEndID.VALUE = cWellID
		
		ENDIF
		
	ENDPROC

	PROCEDURE report
		LPARA cButton
		LOCAL lnResult, lcAlias, llError
		PRIV lcTitle1, lcTitle2, lcSortOrder, lcSelect, glGrpName, m.cGrpName, llPrinted
		
		* Check for the parameter. If it's not a character we're being called by the toolbar print button
		* Bail out if we got here by the toolbar button.
		IF VARTYPE(cButton) <> 'C'
		   RETURN
		ENDIF
		
		*
		*  Check to see if the requirements for calling this method are met.
		*
		ASSERT TYPE('this.cReportName') = 'C' MESSAGE 'You must set the cReportName property to use this class'
		ASSERT INLIST(m.cButton,'F','P','S')  MESSAGE 'The parm to the report method must be either "F" or "P"'
		
		IF TYPE('this.ctitle1') <> 'C'
		   THIS.ctitle1 = ''
		ENDIF
		IF TYPE('this.ctitle2') <> 'C'
		   THIS.ctitle2 = ''
		ENDIF
		
		lcAlias = ALIAS()
		
		llPrinted = .F.
		llError   = .F.
		
		*
		*  Check on using group name in place of company name
		*
		IF NOT USED('options')
		   IF TYPE('m.goApp') = 'O'
		      USE (ALLTRIM(m.goapp.cdatafilepath)+'options') IN 0
		   ENDIF
		ENDIF
		IF NOT USED('groups')
		   IF TYPE('m.goApp') = 'O'
		      USE (ALLTRIM(m.goapp.cdatafilepath)+'groups') IN 0
		   ENDIF
		ENDIF
		
		* If the form doesn't have a swgroup control
		* don't try to get the company name from the group
		IF TYPE('thisform.swgroup1') <> 'O'
		   glGrpName = .F.
		ELSE
		   SELECT options
		   GO TOP
		   glGrpName = lGrpName
		   IF glGrpName
		      SELECT groups
		      SET ORDER TO cgroup
		      * If the Runcombo dropdown exists, and the value isn't New Run, get the group from that
		      IF VARTYPE(thisform.RunCombo1) = 'O'  AND thisform.runcombo1.visible AND thisform.runcombo1.enabled
		         IF NOT 'NEW RUN' $ UPPER(THISFORM.RunCombo1.VALUE)
		            IF SEEK(THISFORM.RunCombo1.LISTITEM(THISFORM.RunCombo1.LISTITEMID,4))
		               m.cGrpName = cDesc
		            ELSE
		               m.cGrpName = ''
		            ENDIF
		         ELSE
		            IF SEEK(LEFT(THISFORM.swgroup1.VALUE,2))
		               m.cGrpName = cDesc
		            ELSE
		               IF LEFT(THISFORM.swgroup1.VALUE,2) = '**'
		                  m.cGrpName = 'All Companies'
		               ELSE
		                  m.cGrpName = ''
		               ENDIF
		            ENDIF
		         ENDIF
		      ELSE
		         IF SEEK(LEFT(THISFORM.swgroup1.VALUE,2))
		            m.cGrpName = cDesc
		         ELSE
		            IF LEFT(THISFORM.swgroup1.VALUE,2) = '**'
		               m.cGrpName = 'All Companies'
		            ELSE
		               m.cGrpName = ''
		            ENDIF
		         ENDIF
		      ENDIF
		   ELSE
		      m.cGrpName = ''
		   ENDIF
		ENDIF
		
		*
		*  Make the cProducer variable a default value for development purposes
		*
		IF TYPE('m.goApp') = 'O'
		   m.cProducer = m.goapp.cCompanyName
		   IF m.goapp.lDemo
		      m.cProducer = 'Demo Version of Software'
		      m.cGrpName  = m.cProducer
		   ENDIF
		ELSE
		   m.cProducer = 'Sample Development Company'
		ENDIF
		
		IF TYPE('m.cProcessor') <> 'C'
		   m.cProcessor = ''
		ENDIF
		
		IF EMPTY(m.cProducer) OR m.cProducer = "''"
		   m.cProducer = 'Sample Development Company'
		ENDIF
		
		lcTitle1    = THISFORM.ctitle1
		lcTitle2    = THISFORM.ctitle2
		lcSortOrder = THISFORM.cSortOrder
		lcSelect    = THISFORM.cSelectCriteria
		
		*
		*  Set defaults for titles and criteria if not in correct format
		*
		IF TYPE('lcTitle1') <> 'C'
		   lcTitle1 = ''
		ENDIF
		IF TYPE('lcTitle2') <> 'C'
		   lcTitle2 = ''
		ENDIF
		IF TYPE('lcSortOrder') <> 'C'
		   lcSortOrder = ''
		ENDIF
		IF TYPE('lcSelect') <> 'C'
		   lcSelect = ''
		ENDIF
		
		SELECT (lcAlias)
		
		* Disable F1 Help
		ON KEY LABEL F1 *
		
		* Disable the picklist key
		ON KEY LABEL F2 *
		
		*
		*  Send the report to the proper location based upon the button pressed.
		*
		DO CASE
		
		   CASE m.cButton = 'P'
		      SET REPORTBEHAVIOR 80
		      TRY
		         IF NOT THISFORM.lSummary
		            REPORT FORM (THIS.cReportName) TO PRINTER PROMPT NOCONSOLE NOEJECT
		         ELSE
		            REPORT FORM (THIS.cReportName) TO PRINTER PROMPT NOCONSOLE NOEJECT SUMMARY
		         ENDIF
		      CATCH TO loError
		         llError = .T.
		      ENDTRY
		      IF llError
		         IF loError.ERRORNO = 1958
		            MESSAGEBOX('There was an error loading the printer driver. Make sure you have a valid printer selected or setup as your default printer.',16,'Windows Printer Driver Error')
		         ELSE
		            MESSAGEBOX('Error sending the report to the printer.' + CHR(10) + ;
		               'Error: ' + loError.MESSAGE,16,'Report Print Problem')
		         ENDIF
		      ENDIF
		
		   CASE m.cButton = 'S'
		      SET REPORTBEHAVIOR 80
		      IF THISFORM.swrptcriteriabuttons1.cmdPreview.CAPTION = 'File'
		         DO FORM utfileexport WITH thisform.Caption, THISFORM.cReportName, lcTitle1, lcTitle2, lcSortOrder, lcSelect
		      ELSE
		*!*	         LOCAL loPreviewContainer, loReportListener
		
		*!*	         *-- Create the preview container
		*!*	         DO (_REPORTPREVIEW) WITH loPreviewContainer
		
		*!*	         *-- Change some of the defaults
		*!*	         loPreviewContainer.CAPTION = 'Preview '
		*!*	         loPreviewContainer.ZoomLevel = 5 && 100%
		*!*	         loPreviewContainer.ToolbarIsVisible = .T.
		
		*!*	         *-- Create the Report Listener
		*!*	         loReportListener = CREATEOBJECT('GroupListener')
		*!*	         loReportListener.LISTENERTYPE = 1 && Preview
		*!*	         loReportListener.PRINTJOBNAME = ALLTRIM(THISFORM.CAPTION)
		
		*!*	         *-- Assign the preview container to the listener
		*!*	         loReportListener.PREVIEWCONTAINER = loPreviewContainer
		
		         TRY 
		         *-- Run the report (with NOWAIT)
		         IF NOT THISFORM.lSummary
		            REPORT FORM (THIS.cReportName) TO PRINTER PROMPT PREVIEW
		         ELSE
		            REPORT FORM (THIS.cReportName) TO PRINTER PROMPT PREVIEW SUMMARY
		         ENDIF
		         CATCH TO loError
		             llError = .T.
		         ENDTRY 
		         IF llError
		            IF loError.ERRORNO = 1958
		               MESSAGEBOX('There was an error loading the printer driver. Make sure you have a valid printer selected or setup as your default printer.',16,'Windows Printer Driver Error')
		            ELSE
		               MESSAGEBOX('Error sending the report to the printer.' + CHR(10) + ;
		                  'Error: ' + loError.MESSAGE,16,'Report Print Problem')
		            ENDIF
		         ENDIF
		*!*	         IF VARTYPE(loPreviewContainer.oForm) = 'O'
		*!*	            loPreviewContainer.oForm.TOOLBAR.DOCK(0) && Dock toolbar at the top
		*!*	            loPreviewContainer.oForm.WINDOWSTATE = 2 && Maximize preview
		*!*	         ENDIF
		      ENDIF
		ENDCASE
		
	ENDPROC

	PROCEDURE optReportBy.Init
		this.value = 1
	ENDPROC

	PROCEDURE optReportBy.option1.Click
		IF this.Value = 1
		   thisform.date1.Enabled = .f.
		   thisform.date2.Enabled = .f.
		   thisform.runcombo1.Enabled = .t.
		ENDIF 
	ENDPROC

	PROCEDURE optReportBy.Option2.Click
		IF this.Value = 1
		   thisform.date1.Enabled = .t.
		   thisform.date2.Enabled = .t.
		   thisform.runcombo1.Enabled = .f.
		ENDIF 
	ENDPROC

	PROCEDURE optSelect.Init
		this.value = 1
	ENDPROC

	PROCEDURE optType.Init
		this.value = 1
	ENDPROC

	PROCEDURE Runcombo1.Init
		IF DODEFAULT()
		   this.listitemid = 1
		ENDIF   
	ENDPROC

	PROCEDURE Swrptlook1.Swlookupbutton1.Click
		LOCAL lcList
		PRIV llOK
		
		llOK = .F.
		lcList = 'cwellid,cwellname,cgroup,cwellstat'
		DO FORM ..\custom\picklist WITH 'Wells', lcList, thisform.swrptlook1.txtbegid.value, 4
		
		IF llOK
		   thisform.swrptlook1.txtBegId.value = cwellid
		   thisform.swrptlook1.txtBegName.value = cwellname
		   thisform.swrptlook1.txtBegId.refresh()
		   thisform.swrptlook1.txtBegName.refresh()
		ENDIF   
		
		thisform.setnextcontrol(thisform.swrptlook1.txtBegId)
		
	ENDPROC

	PROCEDURE Swrptlook1.Swlookupbutton2.Click
		LOCAL lcList
		PRIV llOK
		
		llOK = .F.
		lcList = 'cwellid,cwellname,cgroup,cwellstat'
		DO FORM ..\custom\picklist WITH 'Wells', lcList, thisform.swrptlook1.txtendid.value, 4
		
		IF llOK
		   thisform.swrptlook1.txtEndId.value = cwellid
		   thisform.swrptlook1.txtEndName.value = cwellname
		   thisform.swrptlook1.txtEndId.refresh()
		   thisform.swrptlook1.txtEndName.refresh()
		ENDIF   
		
		thisform.setnextcontrol(thisform.swrptlook1.txtEndId)
		
	ENDPROC

ENDDEFINE
