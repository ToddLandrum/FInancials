*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="gltrialbrpt.scx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="2" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Cursor1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor6" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor7" UniqueID="" Timestamp="" />

	AutoOpenTables = .F.
	DataSource = .NULL.
	Height = 617
	Left = 40
	Name = "Dataenvironment"
	Top = 235
	Width = 981

	ADD OBJECT 'Cursor1' AS cursor WITH ;
		Alias = "coa", ;
		BufferModeOverride = 5, ;
		CursorSource = "coa", ;
		Database = ..\newdbc\appdata.dbc, ;
		Height = 90, ;
		Name = "Cursor1", ;
		Order = "acctno", ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor2' AS cursor WITH ;
		Alias = "coabal", ;
		BufferModeOverride = 5, ;
		CursorSource = "coabal", ;
		Database = ..\newdbc\appdata.dbc, ;
		Height = 90, ;
		Left = 295, ;
		Name = "Cursor2", ;
		Top = 6, ;
		Width = 97
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor3' AS cursor WITH ;
		Alias = "glmaster", ;
		CursorSource = "glmaster", ;
		Database = ..\newdbc\appdata.dbc, ;
		Height = 90, ;
		Left = 154, ;
		Name = "Cursor3", ;
		Top = 12, ;
		Width = 97
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor4' AS cursor WITH ;
		Alias = "wells", ;
		CursorSource = "wells", ;
		Database = ..\newdbc\appdata.dbc, ;
		Height = 90, ;
		Left = 570, ;
		Name = "Cursor4", ;
		Top = 20, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor5' AS cursor WITH ;
		Alias = "sysctl", ;
		CursorSource = "sysctl", ;
		Database = ..\newdbc\appdata.dbc, ;
		Height = 90, ;
		Left = 710, ;
		Name = "Cursor5", ;
		Top = 20, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor6' AS cursor WITH ;
		Alias = "coabalu", ;
		CursorSource = "coabalu", ;
		Database = ..\newdbc\appdata.dbc, ;
		Height = 90, ;
		Left = 290, ;
		Name = "Cursor6", ;
		Top = 140, ;
		Width = 97
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor7' AS cursor WITH ;
		Alias = "glopt", ;
		CursorSource = "glopt", ;
		Database = ..\newdbc\appdata.dbc, ;
		Height = 90, ;
		Left = 850, ;
		Name = "Cursor7", ;
		Top = 20, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

ENDDEFINE

DEFINE CLASS formgltrialblist AS frmrptcriteria OF "appforms.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Swrptlook2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblPeriod" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtPeriod" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtYear" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Swrptlook1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblBegID" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblEndID" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblYear" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chklWellSub" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblWell1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblWell2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkZeroAcct" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="opgreportby" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="OpgQuarters" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboAccountType" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbltextcustom1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Glmaint" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkWellPage" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkSelected" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblSelected" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*p: oglmaint
	*</DefinedPropArrayMethod>

	Caption = "Trial Balance"
	DataSession = 2
	DoCreate = .T.
	Height = 448
	HelpContextID = 413
	Name = "FormGltrialblist"
	Visible = .T.
	Width = 570
	Swrptcriteriabuttons1.chkExport.Alignment = 0
	Swrptcriteriabuttons1.chkExport.Name = "chkExport"
	Swrptcriteriabuttons1.cmdclose.Name = "cmdclose"
	Swrptcriteriabuttons1.cmdPreview.Name = "cmdPreview"
	Swrptcriteriabuttons1.cmdPrint.Name = "cmdPrint"
	Swrptcriteriabuttons1.Left = 160
	Swrptcriteriabuttons1.Name = "Swrptcriteriabuttons1"
	Swrptcriteriabuttons1.TabIndex = 19
	Swrptcriteriabuttons1.Top = 332
	Swrptcriteriabuttons1.ZOrderSet = 0

	ADD OBJECT 'cboAccountType' AS cbocomboboxcustom WITH ;
		BoundColumn = 2, ;
		Height = 20, ;
		Left = 207, ;
		Name = "cboAccountType", ;
		TabIndex = 9, ;
		Top = 122, ;
		Width = 217
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="combobox" />

	ADD OBJECT 'chklWellSub' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Subtotal by Well", ;
		Left = 159, ;
		Name = "chklWellSub", ;
		TabIndex = 15, ;
		Top = 288, ;
		ZOrderSet = 10
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkSelected' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Choose Selected Accounts", ;
		Left = 234, ;
		Name = "chkSelected", ;
		TabIndex = 14, ;
		Top = 157, ;
		Value = .F.
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkWellPage' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Report each Well to a page", ;
		Left = 159, ;
		Name = "chkWellPage", ;
		TabIndex = 22, ;
		Top = 307, ;
		Value = .F., ;
		Visible = .F., ;
		ZOrderSet = 20
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkZeroAcct' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Exclude Zero Accounts", ;
		Left = 321, ;
		Name = "chkZeroAcct", ;
		TabIndex = 16, ;
		Top = 288
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'Glmaint' AS glmaint WITH ;
		Height = 16, ;
		Left = 396, ;
		Name = "Glmaint", ;
		Top = 12, ;
		Width = 21
		*< END OBJECT: ClassLib="..\custom\swgl.vcx" BaseClass="custom" />

	ADD OBJECT 'lblBegID' AS lblfieldlabelcustom WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "From Account Number:", ;
		Height = 16, ;
		Left = 95, ;
		Name = "lblBegID", ;
		TabIndex = 12, ;
		Top = 184, ;
		Width = 113, ;
		ZOrderSet = 7
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblEndID' AS lblfieldlabelcustom WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "To Account Number:", ;
		Height = 16, ;
		Left = 95, ;
		Name = "lblEndID", ;
		TabIndex = 13, ;
		Top = 235, ;
		Width = 101, ;
		ZOrderSet = 8
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom1' AS lbllabelcustom WITH ;
		Caption = "Report By", ;
		Left = 95, ;
		Name = "Lbllabelcustom1", ;
		TabIndex = 2, ;
		Top = 11
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom2' AS lbllabelcustom WITH ;
		BackStyle = 1, ;
		Caption = "Quarter", ;
		Left = 95, ;
		Name = "Lbllabelcustom2", ;
		TabIndex = 7, ;
		Top = 68
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblPeriod' AS lblfieldlabelcustom WITH ;
		AutoSize = .T., ;
		Caption = "Fiscal Period:", ;
		Height = 16, ;
		Left = 276, ;
		Name = "lblPeriod", ;
		TabIndex = 6, ;
		Top = 40, ;
		Width = 66, ;
		ZOrderSet = 2
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblSelected' AS lbllabelcustom WITH ;
		Caption = "All IDs Selected", ;
		ForeColor = 0,0,255, ;
		Left = 233, ;
		Name = "lblSelected", ;
		TabIndex = 12, ;
		Top = 220, ;
		Visible = .F.
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbltextcustom1' AS lbltextcustom WITH ;
		Caption = "Include Accounts:", ;
		Left = 95, ;
		Name = "Lbltextcustom1", ;
		TabIndex = 10, ;
		Top = 124
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblWell1' AS lblfieldlabelcustom WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "From Well ID:", ;
		Height = 16, ;
		Left = 151, ;
		Name = "lblWell1", ;
		TabIndex = 18, ;
		Top = 332, ;
		Visible = .F., ;
		Width = 64, ;
		ZOrderSet = 11
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblWell2' AS lblfieldlabelcustom WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "To Well ID:", ;
		Height = 16, ;
		Left = 163, ;
		Name = "lblWell2", ;
		TabIndex = 20, ;
		Top = 383, ;
		Visible = .F., ;
		Width = 52, ;
		ZOrderSet = 12
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblYear' AS lblfieldlabelcustom WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "Fiscal Year:", ;
		Height = 16, ;
		Left = 95, ;
		Name = "lblYear", ;
		TabIndex = 5, ;
		Top = 40, ;
		Width = 60, ;
		ZOrderSet = 9
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'OpgQuarters' AS opgoptiongroupcustom WITH ;
		BorderStyle = 1, ;
		ButtonCount = 4, ;
		Enabled = .T., ;
		Height = 35, ;
		Left = 95, ;
		Name = "OpgQuarters", ;
		TabIndex = 8, ;
		Top = 74, ;
		Width = 373, ;
		Option1.AutoSize = .T., ;
		Option1.Caption = "1st (Jan - Mar)", ;
		Option1.Enabled = .F., ;
		Option1.FontSize = 8, ;
		Option1.Height = 16, ;
		Option1.Left = 5, ;
		Option1.Name = "Q1", ;
		Option1.Top = 11, ;
		Option1.Width = 89, ;
		Option2.AutoSize = .T., ;
		Option2.Caption = "2nd (Apr - Jun)", ;
		Option2.Enabled = .F., ;
		Option2.FontSize = 8, ;
		Option2.Height = 16, ;
		Option2.Left = 96, ;
		Option2.Name = "Q2", ;
		Option2.Top = 11, ;
		Option2.Width = 92, ;
		Option3.AutoSize = .T., ;
		Option3.Caption = "3rd (Jul - Sep)", ;
		Option3.Enabled = .F., ;
		Option3.FontSize = 8, ;
		Option3.Height = 16, ;
		Option3.Left = 192, ;
		Option3.Name = "Q3", ;
		Option3.Top = 11, ;
		Option3.Width = 87, ;
		Option4.AutoSize = .T., ;
		Option4.Caption = "4th (Oct - Dec)", ;
		Option4.Enabled = .F., ;
		Option4.FontSize = 8, ;
		Option4.Height = 16, ;
		Option4.Left = 281, ;
		Option4.Name = "Q4", ;
		Option4.Top = 11, ;
		Option4.Width = 90
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="optiongroup" />

	ADD OBJECT 'opgreportby' AS opgoptiongroupcustom WITH ;
		AutoSize = .T., ;
		BorderStyle = 0, ;
		ButtonCount = 2, ;
		Height = 26, ;
		Left = 168, ;
		Name = "opgreportby", ;
		TabIndex = 1, ;
		Top = 6, ;
		Value = 1, ;
		Width = 194, ;
		Option1.AutoSize = .T., ;
		Option1.Caption = "Fiscal Period", ;
		Option1.FontSize = 8, ;
		Option1.Height = 16, ;
		Option1.Left = 5, ;
		Option1.Name = "Option1", ;
		Option1.Top = 5, ;
		Option1.Value = 1, ;
		Option1.Width = 79, ;
		Option2.AutoSize = .T., ;
		Option2.Caption = "Fiscal Quarter", ;
		Option2.FontSize = 8, ;
		Option2.Height = 16, ;
		Option2.Left = 103, ;
		Option2.Name = "Option2", ;
		Option2.Top = 5, ;
		Option2.Width = 86
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="optiongroup" />

	ADD OBJECT 'Swrptlook1' AS swrptlook WITH ;
		Left = 232, ;
		Name = "Swrptlook1", ;
		TabIndex = 11, ;
		Top = 181, ;
		ZOrderSet = 6, ;
		Swlookupbutton1.Left = 60, ;
		Swlookupbutton1.Name = "Swlookupbutton1", ;
		Swlookupbutton1.Top = 0, ;
		Swlookupbutton2.Left = 60, ;
		Swlookupbutton2.Name = "Swlookupbutton2", ;
		Swlookupbutton2.Top = 52, ;
		txtBegID.clistexpression = coa.cacctno, ;
		txtBegID.clistworkarea = coa, ;
		txtBegID.Height = 20, ;
		txtBegID.InputMask = "XXXXXX", ;
		txtBegID.Left = 0, ;
		txtBegID.MaxLength = 6, ;
		txtBegID.Name = "txtBegID", ;
		txtBegID.Top = 0, ;
		txtBegID.Width = 53, ;
		TxtBegName.Name = "TxtBegName", ;
		txtEndID.clistexpression = coa.cacctno, ;
		txtEndID.clistworkarea = coa, ;
		txtEndID.Height = 20, ;
		txtEndID.InputMask = "XXXXXX", ;
		txtEndID.Left = 0, ;
		txtEndID.MaxLength = 6, ;
		txtEndID.Name = "txtEndID", ;
		txtEndID.Top = 51, ;
		txtEndID.Width = 53, ;
		TxtEndName.Name = "TxtEndName"
		*< END OBJECT: ClassLib="..\custom\swcontrol.vcx" BaseClass="container" />

	ADD OBJECT 'Swrptlook2' AS swrptlook WITH ;
		Left = 232, ;
		Name = "Swrptlook2", ;
		TabIndex = 17, ;
		Top = 329, ;
		Visible = .F., ;
		ZOrderSet = 1, ;
		Swlookupbutton1.Left = 79, ;
		Swlookupbutton1.Name = "Swlookupbutton1", ;
		Swlookupbutton1.Top = 0, ;
		Swlookupbutton1.ZOrderSet = 2, ;
		Swlookupbutton2.Left = 79, ;
		Swlookupbutton2.Name = "Swlookupbutton2", ;
		Swlookupbutton2.Top = 52, ;
		Swlookupbutton2.ZOrderSet = 3, ;
		txtBegID.clistexpression = wells.cwellid, ;
		txtBegID.clistworkarea = wells, ;
		txtBegID.Height = 20, ;
		txtBegID.Left = 0, ;
		txtBegID.MaxLength = 6, ;
		txtBegID.Name = "txtBegID", ;
		txtBegID.Top = 0, ;
		txtBegID.Width = 72, ;
		txtBegID.ZOrderSet = 4, ;
		TxtBegName.Name = "TxtBegName", ;
		TxtBegName.ZOrderSet = 0, ;
		txtEndID.clistexpression = wells.cwellid, ;
		txtEndID.clistworkarea = wells, ;
		txtEndID.Height = 20, ;
		txtEndID.Left = 0, ;
		txtEndID.MaxLength = 6, ;
		txtEndID.Name = "txtEndID", ;
		txtEndID.Top = 51, ;
		txtEndID.Width = 72, ;
		txtEndID.ZOrderSet = 5, ;
		TxtEndName.Name = "TxtEndName", ;
		TxtEndName.ZOrderSet = 1
		*< END OBJECT: ClassLib="..\custom\swcontrol.vcx" BaseClass="container" />

	ADD OBJECT 'txtPeriod' AS swperiod WITH ;
		Left = 360, ;
		Name = "txtPeriod", ;
		TabIndex = 4, ;
		Top = 38, ;
		ZOrderSet = 4
		*< END OBJECT: ClassLib="..\custom\swcontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtYear' AS swyear WITH ;
		Left = 216, ;
		Name = "txtYear", ;
		TabIndex = 3, ;
		Top = 38, ;
		ZOrderSet = 5
		*< END OBJECT: ClassLib="..\custom\swcontrol.vcx" BaseClass="textbox" />
	
	PROCEDURE builddata
		LOCAL tcYear, tcPeriod, tcAcct1, tcAcct2, llWellSub, lcYear
		LOCAL lcLastYr, lcLevel, lcParent, lcPeriod1, lcPeriod2, lcWell1, lcWell2, llLastYrClosed, llReturn
		LOCAL llWellPage, llZeroAcct, lnBegBal, lnCurrentLevel, lnEndBal, lnLevel, lnQtr, lnRecNo
		LOCAL lnReportBy, lncount, loError
		LOCAL cRetEarn, cyear, nRetEarn
		
		llReturn = .T.
		
		TRY
		    tcYear     = THISFORM.txtYear.VALUE
		    tcPeriod   = THISFORM.txtPeriod.VALUE
		    tcAcct1    = THISFORM.swrptlook1.txtBegID.VALUE
		    tcAcct2    = THISFORM.swrptlook1.txtEndID.VALUE
		    llWellSub  = THISFORM.chklWellSub.VALUE
		    lcWell1    = THISFORM.swrptlook2.txtBegID.VALUE
		    lcWell2    = THISFORM.swrptlook2.txtEndID.VALUE
		    lcLastYr   = STR(VAL(tcYear) - 1, 4)
		    llZeroAcct = THISFORM.chkZeroAcct.VALUE
		    lnReportBy = THISFORM.opgReportBy.VALUE
		    lnQtr      = THISFORM.opgQuarters.VALUE
		    lcLevel    = THISFORM.cboAccountType.VALUE
		    llWellPage = THISFORM.chkwellPage.VALUE
		    llSelected = THISFORM.chkSelected.VALUE
		
		    IF NOT llSelected
		       SELECT cacctno as cid FROM coa ;
		          WHERE BETWEEN(cacctno,tcAcct1,tcAcct2) ;
		          INTO CURSOR selected 
		    ENDIF 
		          
		    IF llWellSub
		        IF llWellPage
		            THISFORM.creportname = 'source\gltrialbwp.frx'
		        ELSE
		            THISFORM.creportname = 'source\gltrialbw.frx'
		        ENDIF
		    ELSE
		        THISFORM.creportname = 'source\gltrialb'
		    ENDIF
		
		    DO CASE
		        CASE lnReportBy = 1
		            lcPeriod1 = tcPeriod
		            lcPeriod2 = tcPeriod
		        CASE lnQtr = 1
		            lcPeriod1 = '01'
		            lcPeriod2 = '03'
		        CASE lnQtr = 2
		            lcPeriod1 = '04'
		            lcPeriod2 = '06'
		        CASE lnQtr = 3
		            lcPeriod1 = '07'
		            lcPeriod2 = '09'
		        CASE lnQtr = 4
		            lcPeriod1 = '10'
		            lcPeriod2 = '12'
		    ENDCASE
		
		*
		*  Check to see if the previous year was closed
		*
		    swselect('sysctl')
		    SET ORDER TO yearclose
		    IF SEEK(lcLastYr + 'YA')
		        llLastYrClosed = .T.
		    ELSE
		        llLastYrClosed = .F.
		    ENDIF
		
		    THISFORM.oglmaint = CREATEOBJECT('glmaint')
		
		*
		*  Get the retained earnings account number.
		*
		    swselect('glopt')
		    GO TOP
		    m.cRetEarn = cRetEarn
		
		*
		*  Recalculate account balances
		*
		    WAIT WIND NOWAIT 'Calculating the account balances...'
		    IF llWellSub
		        THISFORM.oglmaint.calcbalancew()
		    ELSE
		        THISFORM.oglmaint.calcbalance()
		    ENDIF
		    WAIT CLEAR
		
		
		* Get list of years so we can check if they've been closed
			SELECT  coabalnew.cyear, .F. AS lclosed ;
				FROM coabalnew ;
				WHERE cyear < tcYear ;
				INTO CURSOR closedyears READWRITE ;
				ORDER BY cyear ;
				GROUP BY cyear
		
		    SELECT closedyears
		    SCAN
		        m.cyear = cyear
		        swselect('sysctl')
		        SCAN FOR cyear == m.cyear AND ctypeclose = 'A'
		            IF sysctl.lyearclose
		                SELECT closedyears
		                REPLACE lclosed WITH .T.
		            ENDIF
		        ENDSCAN
		    ENDSCAN
		
		*
		*  Set the report title and select criteria
		*
		    IF lnReportBy = 1
		        THISFORM.cTitle1  = 'For Period ' + THISFORM.txtPeriod.VALUE + '/' + THISFORM.txtYear.VALUE
		    ELSE
		        THISFORM.cTitle1  = 'For Quarter ' + PADL(ALLT(STR(lnQtr)), 2, '0') + ' - ' + THISFORM.txtYear.VALUE
		    ENDIF
		    THISFORM.cSelectCriteria = 'Accts: ' + THISFORM.swrptlook1.txtBegID.VALUE + ' - ' + THISFORM.swrptlook1.txtEndID.VALUE
		    THISFORM.cSortOrder      = 'Account Number'
		
		    CREATE CURSOR trialbal ;
		        (cAcctNo     C(6), ;
		          cAcctDesc   C(30), ;
		          cFiscalYr   C(4), ;
		          cFiscalPrd  C(2), ;
		          cWellID     C(10), ;
		          cWellName   C(30), ;
		          nAcctType   N(2), ;
		          nBegBal     N(13, 2), ;
		          nDebits     N(13, 2), ;
		          nCredits    N(13, 2), ;
		          nEndBal     N(13, 2))
		    INDEX ON cAcctNo TAG AcctNo
		    INDEX ON cAcctNo + cWellID TAG cWellID
		    INDEX ON cWellID + cAcctNo TAG AcctWell
		
		
		    IF NOT llWellSub
		*
		*  Get the periods activity for each account in the range.
		*
				SELECT  coa.cAcctNo, ;
						coa.cAcctDesc, ;
						coa.nAcctType, ;
						coabalnew.cyear, ;
						coabalnew.cperiod, ;
						SUM(coabalnew.nDebits) AS nDebits, ;
						SUM(coabalnew.nCredits) AS nCredits ;
					FROM coabalnew, coa ;
					WHERE coa.cacctno in (SELECT cid FROM selected) ;
						AND coabalnew.cAcctNo = coa.cAcctNo ;
						AND BETWEEN(coabalnew.cyear + coabalnew.cperiod, tcYear + lcPeriod1, tcYear + lcPeriod2) ;
						AND NOT DELETED() ;
					INTO CURSOR tempbal1 ;
					ORDER BY 1 ;
					GROUP BY 1
		
		        lncount = _TALLY
		
				SELECT  coa.cAcctNo, ;
						coa.cAcctDesc, ;
						coa.nAcctType, ;
						tcYear AS cFiscalYr, ;
						lcPeriod1 AS cFiscalPrd, ;
						0 AS nDebits, ;
						0 AS nCredits ;
					FROM coa ;
					WHERE coa.cAcctNo NOT IN (SELECT  cAcctNo ;
												  FROM coabalnew ;
												  WHERE BETWEEN(coabalnew.cyear + coabalnew.cperiod, tcYear + lcPeriod1, tcYear + lcPeriod2)) ;
						AND coa.cacctno in (SELECT cid FROM selected) ;
					INTO CURSOR tempbal2 ;
					ORDER BY 1 ;
					GROUP BY 1
		
		        lncount = lncount + _TALLY
		
		*
		*  If there were no records found, bail out.
		*
		        IF lncount = 0
		            llReturn = .F.
		            EXIT 
		        ENDIF
		
		*
		*  Append the records to the trialbal table
		*
		        SELECT trialbal
		        APPEND FROM DBF('tempbal1')
		        APPEND FROM DBF('tempbal2')
		        SET ORDER TO AcctNo
		        SELECT tempbal1
		        USE
		*!*	   SELECT tempbal2
		*!*	   USE
		
		        CREATE CURSOR tempbeg ;
		            (cAcctNo    C(6), ;
		              nDebits    N(12, 2), ;
		              nCredits   N(12, 2))
		
		*
		*  Get the beginning balances for each balance sheet account in the range.
		*
				SELECT  coabalnew.cAcctNo, ;
						coa.nAcctType, ;
						SUM(nDebits) AS nDebits, ;
						SUM(nCredits) AS nCredits ;
					FROM coabalnew, coa ;
					WHERE coabalnew.cacctno in (SELECT cid FROM selected) ;
						AND coabalnew.cyear + coabalnew.cperiod < tcYear + lcPeriod1 ;
						AND coabalnew.cAcctNo = coa.cAcctNo ;
						AND coa.nAcctType < 8 ;
						AND NOT DELETED() ;
					INTO CURSOR tempbeg1 ;
					ORDER BY coabalnew.cAcctNo ;
					GROUP BY coabalnew.cAcctNo
		
		        lncount = _TALLY
		
		*
		*  Get the beginning balances for each income stmt sheet account in the range.
		*
				SELECT  coabalnew.cAcctNo, ;
						coa.nAcctType, ;
						SUM(nDebits) AS nDebits, ;
						SUM(nCredits) AS nCredits ;
					FROM coabalnew, coa ;
					WHERE coabalnew.cacctno in (SELECT cid FROM selected) ;
						AND coabalnew.cyear = tcYear ;
						AND coabalnew.cperiod < lcPeriod1 ;
						AND coabalnew.cAcctNo = coa.cAcctNo ;
						AND coa.nAcctType > 7 ;
						AND NOT DELETED() ;
					INTO CURSOR tempbeg2 ;
					ORDER BY coabalnew.cAcctNo ;
					GROUP BY coabalnew.cAcctNo
		
		*    AND coabalnew.cyear = tcYear ;
		
		        lncount = lncount + _TALLY
		
		
		*
		*  If there are any beginning balances, update the trialbal table.
		*  Otherwise, the beginning balances are assumed to be zero.
		*
		        IF lncount > 0
		            SELECT tempbeg
		            APPEND FROM DBF('tempbeg1')
		            APPEND FROM DBF('tempbeg2')
		            SCAN
		                SCATTER MEMVAR
		                lnBegBal = m.nDebits - m.nCredits
		                SELECT trialbal
		                IF SEEK(m.cAcctNo)
		                    IF lcPeriod1 = '01' AND trialbal.nAcctType > 7
		                        LOOP
		                    ELSE
		                        lnEndBal = lnBegBal + nDebits - nCredits
		                        REPLACE nBegBal WITH lnBegBal, ;
		                            nEndBal WITH lnEndBal
		                    ENDIF
		                ENDIF
		            ENDSCAN
		        ENDIF
		
		        SELECT closedyears
		        LOCATE FOR NOT lclosed
		        IF FOUND()
		            SELECT closedyears
		            SCAN FOR NOT lclosed
		                lcYear = cyear
		
						SELECT  coabalnew.cAcctNo, ;
								coa.nAcctType, ;
								SUM(nDebits - nCredits)  AS nRetEarn ;
							FROM coabalnew, coa ;
							WHERE coabalnew.cyear = lcYear ;
								AND coabalnew.cAcctNo = coa.cAcctNo ;
								AND BETWEEN(coa.nAcctType, 8, 16) ;
								AND NOT DELETED() ;
							INTO CURSOR tempbeg
		
		                IF _TALLY > 0
		                    SELECT tempbeg
		                    GO TOP
		                    m.nRetEarn = nRetEarn
		                ELSE
		                    m.nRetEarn = 0
		                ENDIF
		
		*
		*  Plug in the new retained earnings number
		*
		                SELECT trialbal
		                SET ORDER TO AcctNo
		                IF SEEK(m.cRetEarn)
		                    REPLACE nBegBal WITH nBegBal + m.nRetEarn, ;
		                        nEndBal WITH nEndBal + m.nRetEarn
		                ENDIF
		            ENDSCAN
		        ENDIF
		
		        SELECT trialbal
		        SCAN FOR nBegBal = 0
		            REPLACE nEndBal WITH nDebits - nCredits
		        ENDSCAN
		
		        IF llZeroAcct AND lcLevel = '*'  &&  Only remove zeroes if reporting on all levels, otherwise, the sublevel processing will do it
		            SELE trialbal
		            SCAN FOR nBegBal = 0 AND nDebits = 0 AND nCredits = 0 AND nEndBal = 0
		                DELE NEXT 1
		            ENDSCAN
		        ENDIF
		
		        THISFORM.cTitle2 = ''
		    ELSE
		
		*
		*  Get the periods activity for each account in the range.
		*
				SELECT  coa.cAcctNo, ;
						coa.cAcctDesc, ;
						coa.nAcctType, ;
						coabalnew.cunitno AS cWellID, ;
						wells.cWellName, ;
						coabalnew.cyear, ;
						coabalnew.cperiod, ;
						SUM(coabalnew.nDebits) AS nDebits, ;
						SUM(coabalnew.nCredits) AS nCredits ;
					FROM coabalnew, coa, wells ;
					WHERE coabalnew.cacctno in (SELECT cid FROM selected) ;
						AND BETWEEN(coabalnew.cAcctNo, tcAcct1, tcAcct2) ;
						AND BETWEEN(coabalnew.cyear + coabalnew.cperiod, tcYear + lcPeriod1, tcYear + lcPeriod2) ;
						AND coabalnew.cAcctNo = coa.cAcctNo ;
						AND coabalnew.cunitno = wells.cWellID ;
						AND NOT DELETED() ;
					INTO CURSOR tempbal1 ;
					ORDER BY coabalnew.cunitno, coabalnew.cAcctNo ;
					GROUP BY coabalnew.cunitno, coabalnew.cAcctNo
		
		        lncount = _TALLY
		
				SELECT  coa.cAcctNo, ;
						coa.cAcctDesc, ;
						coa.nAcctType, ;
						tcYear AS cFiscalYr, ;
						tcPeriod AS cFiscalPrd, ;
						0 AS nDebits, ;
						0 AS nCredits ;
					FROM coa ;
					WHERE coa.cAcctNo NOT IN (SELECT  cAcctNo ;
												  FROM coabalnew ;
												  WHERE BETWEEN(coabalnew.cyear + coabalnew.cperiod, tcYear + lcPeriod1, tcYear + lcPeriod2)) ;
						AND coa.cacctno in (SELECT cid FROM selected) ;
					INTO CURSOR tempbal2 ;
					ORDER BY 1 ;
					GROUP BY 1
		
		        lncount = lncount + _TALLY
		
		*
		*  If there were no records found, bail out.
		*
		        IF lncount = 0
		            llReturn = .F.
		            EXIT
		        ENDIF
		
		*
		*  Append the records to the trialbal table
		*
		        SELECT trialbal
		        APPEND FROM DBF('tempbal1')
		        APPEND FROM DBF('tempbal2')
		        SET ORDER TO cWellID
		        SELECT tempbal1
		        USE
		        SELECT tempbal2
		        USE
		
		        CREATE CURSOR tempbeg ;
		            (cAcctNo    C(6), ;
		              cWellID   C(10), ;
		              nDebits    N(12, 2), ;
		              nCredits   N(12, 2))
		              
		             
		*
		*  Get the beginning balances for each balance sheet account in the range.
		*
				SELECT  coabalnew.cAcctNo, ;
						coa.nAcctType, ;
						coabalnew.cunitno AS cWellID, ;
						wells.cWellName, ;
						SUM(nDebits) AS nDebits, ;
						SUM(nCredits) AS nCredits ;
					FROM coabalnew, coa, wells ;
					WHERE coabalnew.cacctno in (SELECT cid FROM selected) ;
						AND coabalnew.cyear + coabalnew.cperiod < tcYear + lcPeriod1 ;
						AND coabalnew.cAcctNo = coa.cAcctNo ;
						AND BETWEEN(coabalnew.cunitno, lcWell1, lcWell2) ;
						AND coabalnew.cunitno = wells.cWellID ;
						AND coa.nAcctType < 8 ;
						AND NOT DELETED() ;
					INTO CURSOR tempbeg1 ;
					ORDER BY coabalnew.cunitno, coabalnew.cAcctNo ;
					GROUP BY coabalnew.cunitno, coabalnew.cAcctNo
		
		        lncount = _TALLY
		
		*
		*  Get the beginning balances for each income stmt sheet account in the range.
		*
				SELECT  coabalnew.cAcctNo, ;
						coa.nAcctType, ;
						coabalnew.cunitno AS cWellID, ;
						SUM(nDebits) AS nDebits, ;
						SUM(nCredits) AS nCredits ;
					FROM coabalnew, coa ;
					WHERE coabalnew.cacctno in (SELECT cid FROM selected) ;
						AND BETWEEN(coabalnew.cunitno, lcWell1, lcWell2) ;
						AND coabalnew.cyear = tcYear ;
						AND coabalnew.cperiod < lcPeriod1 ;
						AND coabalnew.cAcctNo = coa.cAcctNo ;
						AND coa.nAcctType > 7 ;
						AND NOT DELETED() ;
					INTO CURSOR tempbeg2 ;
					ORDER BY coabalnew.cunitno, coabalnew.cAcctNo ;
					GROUP BY coabalnew.cunitno, coabalnew.cAcctNo
		
		*    AND coabalnew.cyear = tcYear ;
		
		        lncount = lncount + _TALLY
		
		*
		*  If there are any beginning balances, update the trialbal table.
		*  Otherwise, the beginning balances are assumed to be zero.
		*
		
		        IF lncount > 0
		            SELECT tempbeg
		            APPEND FROM DBF('tempbeg1')
		            APPEND FROM DBF('tempbeg2')
		            SCAN
		                SCATTER MEMVAR
		                lnBegBal = m.nDebits - m.nCredits
		                SELECT trialbal
		                IF SEEK(m.cAcctNo + m.cWellID)
		                    IF lcPeriod1 = '01' AND trialbal.nAcctType > 7
		                        LOOP
		                    ELSE
		                        lnEndBal = lnBegBal + nDebits - nCredits
		                        REPLACE nBegBal WITH lnBegBal, ;
		                            nEndBal WITH lnEndBal
		                    ENDIF
		                ENDIF
		            ENDSCAN
		        ENDIF
		
		        SELECT trialbal
		        SCAN FOR nBegBal = 0
		            REPLACE nEndBal WITH nDebits - nCredits
		        ENDSCAN
		
		        IF llZeroAcct AND lcLevel = '*'  &&  Only remove zeroes if reporting on all levels, otherwise, the sublevel processing will do it
		            SELE trialbal
		            SCAN FOR nBegBal = 0 AND nDebits = 0 AND nCredits = 0 AND nEndBal = 0
		                DELE NEXT 1
		            ENDSCAN
		        ENDIF
		
		        THISFORM.cTitle2 = ''
		
		    ENDIF
		
		    IF lcLevel <> '*'  &&  Not reporting on all levels, so sum the balances
		        WAIT WINDOW NOWAIT 'Summing Sub-Accounts....Please Wait'
		        lnLevel = VAL(lcLevel)
		        SELECT trialbal
		        SET DELETED OFF
		        SCAN
		            SCATTER MEMVAR
		            lnRecNo        = RECNO()  &&  Store the current record, so we can return to it
		            lnCurrentLevel = THISFORM.glmaint.calcsublevel(m.cAcctNo)  &&  Determine the level of the current account, so we know whether it should be added to a parent account
		            IF lnCurrentLevel > lnLevel  &&  This account is below the level on which to report, so find the parent and add to its total
		
		                SELECT trialbal
		                DO CASE
		                    CASE lnCurrentLevel - lnLevel = 1  &&  Only need to go up a single level to add on the totals
		                        swselect('coa')
		                        LOCATE FOR cAcctNo = m.cAcctNo  &&  Locate current account, and then check its parent
		                        IF FOUND()
		                            lcParent = cParent  &&  This is the account to have the current totals added to
		                        ELSE
		                            WAIT WINDOW 'Problem locating parent account...'
		                        ENDIF
		                    CASE lnCurrentLevel - lnLevel = 2  &&  Need to go up two levels to find the parent
		                        swselect('coa')
		                        LOCATE FOR cAcctNo = m.cAcctNo
		                        IF FOUND()
		                            lcParent = cParent
		                            LOCATE FOR cAcctNo = lcParent
		                            IF FOUND()
		                                lcParent = cParent
		                            ELSE
		                                WAIT WINDOW 'Problem locating parent account...'
		                            ENDIF
		                        ELSE
		                            WAIT WINDOW 'Problem locating parent account...'
		                        ENDIF
		                    CASE lnCurrentLevel - lnLevel = 3  &&  Need to go up 3 levels to find the parent
		                        swselect('coa')
		                        LOCATE FOR cAcctNo = m.cAcctNo
		                        IF FOUND()
		                            lcParent = cParent  &&  One level up
		                            LOCATE FOR cAcctNo = lcParent
		                            IF FOUND()
		                                lcParent = cParent  &&  Two levels up
		                                LOCATE FOR cAcctNo = lcParent
		                                IF FOUND()
		                                    lcParent = cParent  &&  Three levels up
		                                ELSE
		                                    WAIT WINDOW 'Problem locating parent account...'
		                                ENDIF
		                            ELSE
		                                WAIT WINDOW 'Problem locating parent account...'
		                            ENDIF
		                        ELSE
		                            WAIT WINDOW 'Problem locating parent account...'
		                        ENDIF
		                    CASE lnCurrentLevel - lnLevel = 4  &&  Need to go up 4 levels to find the parent - this is the max
		                        swselect('coa')
		                        LOCATE FOR cAcctNo = m.cAcctNo
		                        IF FOUND()
		                            lcParent = cParent  &&  One level up
		                            LOCATE FOR cAcctNo = lcParent
		                            IF FOUND()
		                                lcParent = cParent  &&  Two levels up
		                                LOCATE FOR cAcctNo = lcParent
		                                IF FOUND()
		                                    lcParent = cParent  &&  Three levels up
		                                    LOCATE FOR cAcctNo = lcParent
		                                    IF FOUND()
		                                        lcParent = cParent  &&  Four levels up
		                                    ELSE
		                                        WAIT WINDOW 'Problem locating parent account...'
		                                    ENDIF
		                                ELSE
		                                    WAIT WINDOW 'Problem locating parent account...'
		                                ENDIF
		                            ELSE
		                                WAIT WINDOW 'Problem locating parent account...'
		                            ENDIF
		                        ELSE
		                            WAIT WINDOW 'Problem locating parent account...'
		                        ENDIF
		                    OTHERWISE  &&  Should never get here, since it means there's more than a 4 level difference
		                        WAIT WINDOW 'Too many levels'
		                ENDCASE
		
		**  Now that we know what the parent account is on the right level, add the current record totals to it  **
		                SELECT trialbal
		                LOCATE FOR cAcctNo = lcParent AND cWellID == m.cWellID  &&  Match by well, too
		                IF FOUND()
		                    REPLACE nBegBal WITH nBegBal + m.nBegBal, nDebits WITH nDebits + m.nDebits, nCredits WITH nCredits + m.nCredits, ;
		                        nEndBal WITH nEndBal + m.nEndBal
		                    GOTO lnRecNo  &&  Go back to original record, ready to continue scanning
		                    DELETE NEXT 1
		                ELSE
		                    WAIT WINDOW NOWAIT 'Cannot find parent account to add totals to'
		                ENDIF
		            ENDIF
		
		        ENDSCAN
		        SET DELETED ON
		
		        IF llZeroAcct  &&  Remove zero balance entries
		            SELECT trialbal
		            SCAN FOR nBegBal = 0 AND nDebits = 0 AND nCredits = 0 AND nEndBal = 0
		                DELETE NEXT 1
		            ENDSCAN
		        ENDIF
		    ENDIF
		
		
		    COUNT FOR NOT DELETED() TO lncount
		    GO TOP
		
		    IF llWellPage
		        SET ORDER TO AcctWell
		    ENDIF
		
		    WAIT CLEAR
		
		    IF lncount > 0
		        llReturn = .T.
		    ELSE
		        llReturn = .F.
		    ENDIF
		CATCH TO loError
		    llReturn = .F.
		    DO errorlog WITH 'BuildData', loError.LINENO, 'GLTrialbRpt', loError.ERRORNO, loError.MESSAGE, '', loError
		    MESSAGEBOX('Unable to process the report at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		          'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		RETURN llReturn
		
		
		
	ENDPROC

	PROCEDURE Init
		IF DODEFAULT()
		   SELECT coa
		   SET DELETED ON
		   GO TOP
		   THISFORM.swrptlook1.txtBegID.VALUE = cacctno
		   THISFORM.swrptlook1.txtBegName.VALUE = cacctdesc
		   GO BOTTOM
		   THISFORM.swrptlook1.txtEndID.VALUE = cacctno
		   THISFORM.swrptlook1.txtEndName.VALUE = cacctdesc
		
		   SELE wells
		   SET ORDER TO cwellid
		   GO TOP
		   THISFORM.swrptlook2.txtBegID.VALUE = cwellid
		   THISFORM.swrptlook2.txtBegName.VALUE = cwellname
		   GO BOTTOM
		   THISFORM.swrptlook2.txtEndID.VALUE = cwellid
		   THISFORM.swrptlook2.txtEndName.VALUE = cwellname
		   
		   THISFORM.txtPeriod.VALUE = GetFiscalPeriod(DATE())
		   THISFORM.txtYear.VALUE = GetFiscalYear(DATE())
		   THISFORM.chklWellSub.VALUE = .F.
		   THISFORM.chkZeroAcct.VALUE = .T.
		ENDIF
		
		
	ENDPROC

	PROCEDURE cboAccountType.Init
		THIS.ADDLISTITEM('**  All Account Levels  **',1,1)
		THIS.ADDLISTITEM('*',1,2)
		THIS.ADDLISTITEM('Level 1 Accounts',2,1)
		THIS.ADDLISTITEM('1',2,2)
		THIS.ADDLISTITEM('Level 2 Accounts and Above',3,1)
		THIS.ADDLISTITEM('2',3,2)
		THIS.ADDLISTITEM('Level 3 Accounts and Above',4,1)
		THIS.ADDLISTITEM('3',4,2)
		THIS.ADDLISTITEM('Level 4 Accounts and Above',5,1)
		THIS.ADDLISTITEM('4',5,2)
		
		THIS.LISTITEMID = 1
		
		DODEFAULT()
		
	ENDPROC

	PROCEDURE chklWellSub.Click
		IF this.value
		   thisform.height = 485
		   thisform.swrptlook2.visible = .t.
		   thisform.lblWell1.visible = .t.
		   thisform.lblWell2.visible = .t.
		   thisform.chkwellPage.Visible = .t.
		   thisform.swrptcriteriabuttons1.top = 410
		ELSE
		   thisform.swrptcriteriabuttons1.top = 310
		   thisform.height = 434
		   thisform.swrptlook2.visible = .f.
		   thisform.lblWell1.visible = .f.
		   thisform.lblWell2.visible = .f.
		   thisform.chkwellPage.Visible = .f.
		   thisform.chkwellPage.Value = .f.
		ENDIF   
	ENDPROC

	PROCEDURE chklWellSub.Valid
		IF this.value
		   thisform.swrptcriteriabuttons1.top = 459
		   thisform.height = 528
		   thisform.swrptlook2.visible = .t.
		   thisform.lblWell1.visible = .t.
		   thisform.lblWell2.visible = .t.
		ELSE
		   thisform.swrptcriteriabuttons1.top = 361
		   thisform.height = 430
		   thisform.swrptlook2.visible = .f.
		   thisform.lblWell1.visible = .f.
		   thisform.lblWell2.visible = .f.
		ENDIF   
	ENDPROC

	PROCEDURE chkSelected.Click
		IF this.Value
		   DO FORM commonsource\selected-ids WITH 'COA' LINKED 
		   lnCount = RECCOUNT('selected')
		   thisform.lblselected.Caption = TRANSFORM(lnCount) + ' Accounts Selected'
		   thisform.lblselected.Visible = .T.
		   thisform.lblbegID.Visible = .F.
		   thisform.lblendID.Visible = .F.
		   thisform.swrptlook1.Visible = .F.
		ELSE
		   thisform.lblselected.Visible = .F.
		   thisform.lblbegID.Visible = .T.
		   thisform.lblendID.Visible = .T.
		   thisform.swrptlook1.Visible = .T.
		ENDIF 
	ENDPROC

	PROCEDURE OpgQuarters.Init
		this.q1.value = 1
	ENDPROC

	PROCEDURE OpgQuarters.Q1.GotFocus
		THISFORM.opgQuarters.VALUE = 1
		
	ENDPROC

	PROCEDURE OpgQuarters.Q2.GotFocus
		THISFORM.opgQuarters.VALUE = 2
	ENDPROC

	PROCEDURE OpgQuarters.Q3.GotFocus
		THISFORM.opgQuarters.VALUE = 3
	ENDPROC

	PROCEDURE OpgQuarters.Q4.GotFocus
		THISFORM.opgQuarters.VALUE = 4
	ENDPROC

	PROCEDURE opgreportby.Valid
		
		DODEFAULT()
		
		IF this.value = 1
		   thisform.txtyear.enabled = .t.
		   thisform.txtperiod.enabled = .t.
		   thisform.opgquarters.q1.enabled = .f.
		   thisform.opgquarters.q2.enabled = .f.
		   thisform.opgquarters.q3.enabled = .f.
		   thisform.opgquarters.q4.enabled = .f.
		else
		   thisform.txtyear.enabled = .t.
		   thisform.txtperiod.enabled = .f.
		   thisform.opgquarters.q1.enabled = .t.
		   thisform.opgquarters.q2.enabled = .t.
		   thisform.opgquarters.q3.enabled = .t.
		   thisform.opgquarters.q4.enabled = .t.
		endif      
	ENDPROC

	PROCEDURE Swrptlook1.Swlookupbutton1.Click
		LOCAL lcList
		PRIV llOK
		
		llOK = .F.
		lcList = 'cacctno/acctno,cacctdesc/acctdesc'
		
		DO FORM ..\CUSTOM\picklist WITH 'coa', lcList, THISFORM.swrptlook1.txtBegID.VALUE, 2
		
		IF llOK
		   THISFORM.swrptlook1.txtBegName.VALUE = coa.cacctdesc
		   THISFORM.swrptlook1.txtBegID.VALUE = coa.cacctno
		   THISFORM.REFRESH()
		ENDIF
		
		
		
	ENDPROC

	PROCEDURE Swrptlook1.Swlookupbutton2.Click
		LOCAL lcList
		PRIV llOK
		
		llOK = .F.
		lcList = 'cacctno/acctno,cacctdesc/acctdesc'
		
		DO FORM ..\CUSTOM\picklist WITH 'coa', lcList, THISFORM.swrptlook1.txtEndID.VALUE, 2
		
		IF llOK
		   THISFORM.swrptlook1.txtEndName.VALUE = coa.cacctdesc
		   THISFORM.swrptlook1.txtEndID.VALUE = coa.cacctno
		   THISFORM.REFRESH()
		ENDIF
		
		
		
	ENDPROC

	PROCEDURE Swrptlook2.Swlookupbutton1.Click
		LOCAL lcList
		PRIV llOK
		
		llOK = .F.
		lcList = 'cwellid,cwellname,cwellstat'
		
		DO FORM ..\CUSTOM\picklist WITH 'wells', lcList, THISFORM.swrptlook2.txtBegID.VALUE, 3
		
		IF llOK
		   THISFORM.swrptlook2.txtBegName.VALUE = wells.cwellname
		   THISFORM.swrptlook2.txtBegID.VALUE = wells.cwellid
		   THISFORM.REFRESH()
		ENDIF
		
		thisform.swrptlook2.txtbegid.setfocus()
		
		
	ENDPROC

	PROCEDURE Swrptlook2.Swlookupbutton2.Click
		LOCAL lcList
		PRIV llOK
		
		llOK = .F.
		lcList = 'cwellid,cwellname,cwellstat'
		
		DO FORM ..\CUSTOM\picklist WITH 'wells', lcList, THISFORM.swrptlook2.txtEndID.VALUE, 3
		
		IF llOK
		   THISFORM.swrptlook2.txtEndName.VALUE = wells.cwellname
		   THISFORM.swrptlook2.txtEndID.VALUE = wells.cwellid
		   THISFORM.REFRESH()
		ENDIF
		
		thisform.swrptlook2.txtendid.setfocus()
		
	ENDPROC

	PROCEDURE Swrptlook2.txtBegID.GotFocus
		ON KEY LABEL F2 _screen.activeform.swrptlook2.swlookupbutton1.Click()
		
	ENDPROC

	PROCEDURE Swrptlook2.txtEndID.GotFocus
		ON KEY LABEL F2 _screen.activeform.swrptlook2.swlookupbutton2.Click()
		
	ENDPROC

ENDDEFINE
