*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="apbill2.scx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="2" />

	AutoOpenTables = .F.
	DataSource = .NULL.
	Height = 552
	InitialSelectedAlias = "appurchh"
	Left = 59
	Name = "Dataenvironment"
	Top = 84
	Width = 929

ENDDEFINE

DEFINE CLASS formapbill2 AS frmdatamanagerformcustom OF "..\custom\cforms.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Shape1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblCvendorid" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtCvendname" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblDpostdate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtCinvnum" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblCinvnum" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtCreference" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblCreference" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblCidterm" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblDinvdate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblDduedate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblDdiscdate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtNinvtot" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblNinvtot" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtNinvbal" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblNinvbal" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboTerms" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdVendor" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cmdcommandbuttoncustom1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grouptran" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcVendorID" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtCitemdesc" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblNextension" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcDeptDesc" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdLookDept" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcDeptNo" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtnPrice" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtnQuantity" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdLookCOA" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdLookItem" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtnExtension" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lstItems" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcAcctDesc" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcAcctNo" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcItemId" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label6" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Glmaint" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtdPostDate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtdInvDate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtdDueDate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtdDiscDate" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: adddetail1
		*m: adddetail2
		*m: calcext		&& Calculates the detail extension total
		*m: calcext1
		*m: calcext2
		*m: calctot		&& Calculates the Invoice Totals
		*m: checkexp		&& Check to see if expenses entered for wells have been allocated and the production period closed.
		*m: checkhist		&& Checks to see if the production period is closed.
		*m: dmexpense		&& Disbursement Manager integration for expenses.
		*m: editdetail		&& Moves the detail line from the grid to the update area.
		*m: edititems
		*m: getprice		&& Gets the price for the item based upon the price code passed.
		*m: lookcoa
		*m: setstate		&& Resets the form state for non bound controls so that the save button still works.
		*m: valterms		&& Validate Terms and Set Due Date and Disc Date based on the Terms
		*m: zerotot
		*p: ldeptrequired
		*p: lf5
		*p: lnoclearext
		*p: lsepclose		&& Separate close for revenue and JIBs
		*p: lvalidwell		&& A valid well id was entered in the well detail field.
		*p: lwellrequired
		*p: nextension
		*p: nprice
		*p: nquantity
		*p: odist		&& Distproc object
	*</DefinedPropArrayMethod>

	Caption = "Purchase Inventory Items"
	cdataenvironment = ("AP")
	cdisplayname = 
	clistexpression = appurchh.cbatch
	cnavworkarea = appurchh
	cworkarea = appurchh
	DoCreate = .T.
	Height = 426
	HelpContextID = 347
	lconfirmsave = .T.
	lexpliciteditmode = .F.
	lnoclearext = .F.
	Name = "FormApbill2"
	Visible = .T.
	Width = 630
	cmdatamanager.Name = "cmdatamanager"
	cmdatamanager.TabIndex = 1
	cmdatamanager.ZOrderSet = 0
	cmlookupmanager.Name = "cmlookupmanager"
	Mwresize1.lblHighLight.Name = "lblHighLight"
	Mwresize1.lblShading.Name = "lblShading"
	Mwresize1.Name = "Mwresize1"

	ADD OBJECT 'cboTerms' AS cbocomboboxcustom WITH ;
		BoundColumn = 2, ;
		ControlSource = "appurchh.cidterm", ;
		Height = 20, ;
		Left = 456, ;
		Margin = 2, ;
		Name = "cboTerms", ;
		TabIndex = 10, ;
		Top = 31, ;
		Width = 144, ;
		ZOrderSet = 19
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="combobox" />

	ADD OBJECT 'Cmdcommandbuttoncustom1' AS cmdcommandbuttoncustom WITH ;
		Caption = "\<Comments", ;
		Height = 20, ;
		Left = 535, ;
		Name = "Cmdcommandbuttoncustom1", ;
		TabIndex = 17, ;
		TabStop = .F., ;
		Top = 60, ;
		ZOrderSet = 21
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdLookCOA' AS cmdcommandbuttoncustom WITH ;
		Caption = "Account", ;
		FontSize = 8, ;
		Height = 20, ;
		Left = 288, ;
		Name = "cmdLookCOA", ;
		TabIndex = 28, ;
		TabStop = .F., ;
		Top = 95, ;
		Width = 73, ;
		ZOrderSet = 33
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdLookDept' AS cmdcommandbuttoncustom WITH ;
		Caption = "Dept", ;
		FontSize = 8, ;
		Height = 20, ;
		Left = 403, ;
		Name = "cmdLookDept", ;
		TabIndex = 30, ;
		TabStop = .F., ;
		Top = 95, ;
		Width = 68, ;
		ZOrderSet = 27
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdLookItem' AS cmdcommandbuttoncustom WITH ;
		Caption = "Item ID", ;
		FontSize = 8, ;
		Height = 20, ;
		Left = 7, ;
		Name = "cmdLookItem", ;
		TabIndex = 21, ;
		TabStop = .F., ;
		Top = 95, ;
		Width = 73, ;
		ZOrderSet = 34
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdVendor' AS swlookupbutton WITH ;
		Left = 172, ;
		Name = "cmdVendor", ;
		TabIndex = 3, ;
		Top = 7, ;
		ZOrderSet = 20
		*< END OBJECT: ClassLib="..\custom\swcontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'Glmaint' AS glmaint WITH ;
		Left = 179, ;
		Name = "Glmaint", ;
		Top = 77
		*< END OBJECT: ClassLib="..\custom\swgl.vcx" BaseClass="custom" />

	ADD OBJECT 'Grouptran' AS grouptran WITH ;
		Left = 99, ;
		Name = "Grouptran", ;
		Top = 405
		*< END OBJECT: ClassLib="..\custom\swgl.vcx" BaseClass="custom" />

	ADD OBJECT 'Label1' AS label WITH ;
		BackStyle = 0, ;
		Caption = "Item ID", ;
		FontBold = .T., ;
		ForeColor = 0,0,0, ;
		Height = 17, ;
		Left = 12, ;
		Name = "Label1", ;
		Top = 172, ;
		Width = 40, ;
		ZOrderSet = 37
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Label2' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "Description", ;
		FontBold = .T., ;
		ForeColor = 0,0,0, ;
		Height = 17, ;
		Left = 96, ;
		Name = "Label2", ;
		Top = 172, ;
		Width = 67, ;
		ZOrderSet = 38
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Label3' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "Quantity", ;
		FontBold = .T., ;
		ForeColor = 0,0,0, ;
		Height = 17, ;
		Left = 298, ;
		Name = "Label3", ;
		Top = 172, ;
		Width = 49, ;
		ZOrderSet = 39
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Label4' AS label WITH ;
		BackStyle = 0, ;
		Caption = "Price", ;
		FontBold = .T., ;
		ForeColor = 0,0,0, ;
		Height = 17, ;
		Left = 394, ;
		Name = "Label4", ;
		Top = 172, ;
		Width = 40, ;
		ZOrderSet = 43
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Label5' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "Account No", ;
		FontBold = .T., ;
		ForeColor = 0,0,0, ;
		Height = 17, ;
		Left = 441, ;
		Name = "Label5", ;
		Top = 172, ;
		Width = 67, ;
		ZOrderSet = 44
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Label6' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "Amount", ;
		FontBold = .T., ;
		ForeColor = 0,0,0, ;
		Height = 17, ;
		Left = 552, ;
		Name = "Label6", ;
		Top = 172, ;
		Width = 46, ;
		ZOrderSet = 45
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'lblCidterm' AS lblfieldlabelcustom WITH ;
		AutoSize = .T., ;
		Caption = "Terms", ;
		Height = 16, ;
		Left = 413, ;
		Name = "lblCidterm", ;
		TabIndex = 13, ;
		Top = 33, ;
		Width = 32, ;
		ZOrderSet = 11
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblCinvnum' AS lblfieldlabelcustom WITH ;
		AutoSize = .T., ;
		Caption = "Invoice No", ;
		Height = 16, ;
		Left = 22, ;
		Name = "lblCinvnum", ;
		TabIndex = 11, ;
		Top = 33, ;
		Width = 52, ;
		ZOrderSet = 8
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblCreference' AS lblfieldlabelcustom WITH ;
		AutoSize = .T., ;
		Caption = "Reference", ;
		Height = 16, ;
		Left = 183, ;
		Name = "lblCreference", ;
		TabIndex = 12, ;
		Top = 33, ;
		Width = 53, ;
		ZOrderSet = 10
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblCvendorid' AS lblfieldlabelcustom WITH ;
		AutoSize = .T., ;
		Caption = "Vendor ID", ;
		Height = 16, ;
		Left = 22, ;
		Name = "lblCvendorid", ;
		TabIndex = 6, ;
		Top = 9, ;
		Width = 50, ;
		ZOrderSet = 4
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblDdiscdate' AS lblfieldlabelcustom WITH ;
		AutoSize = .T., ;
		Caption = "Discount Date", ;
		Height = 16, ;
		Left = 354, ;
		Name = "lblDdiscdate", ;
		TabIndex = 20, ;
		Top = 62, ;
		Width = 69, ;
		ZOrderSet = 14
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblDduedate' AS lblfieldlabelcustom WITH ;
		AutoSize = .T., ;
		Caption = "Due Date", ;
		Height = 16, ;
		Left = 188, ;
		Name = "lblDduedate", ;
		TabIndex = 19, ;
		Top = 62, ;
		Width = 46, ;
		ZOrderSet = 13
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblDinvdate' AS lblfieldlabelcustom WITH ;
		AutoSize = .T., ;
		Caption = "Invoice Date", ;
		Height = 16, ;
		Left = 22, ;
		Name = "lblDinvdate", ;
		TabIndex = 18, ;
		Top = 62, ;
		Width = 61, ;
		ZOrderSet = 12
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblDpostdate' AS lblfieldlabelcustom WITH ;
		Caption = "Post Date", ;
		Height = 16, ;
		Left = 452, ;
		Name = "lblDpostdate", ;
		TabIndex = 7, ;
		Top = 9, ;
		Width = 48, ;
		ZOrderSet = 6
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom1' AS lbllabelcustom WITH ;
		Caption = "Qty", ;
		Height = 16, ;
		Left = 148, ;
		Name = "Lbllabelcustom1", ;
		TabIndex = 22, ;
		Top = 97, ;
		Width = 19, ;
		ZOrderSet = 29
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom2' AS lbllabelcustom WITH ;
		Caption = "Cost", ;
		Height = 16, ;
		Left = 226, ;
		Name = "Lbllabelcustom2", ;
		TabIndex = 23, ;
		Top = 97, ;
		Width = 24, ;
		ZOrderSet = 31
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblNextension' AS lblfieldlabelcustom WITH ;
		AutoSize = .T., ;
		Caption = "Amount", ;
		Height = 16, ;
		Left = 579, ;
		Name = "lblNextension", ;
		TabIndex = 24, ;
		Top = 97, ;
		Width = 39, ;
		ZOrderSet = 25
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblNinvbal' AS lblfieldlabelcustom WITH ;
		Caption = "Invoice Balance", ;
		Height = 16, ;
		Left = 168, ;
		Name = "lblNinvbal", ;
		TabIndex = 40, ;
		Top = 400, ;
		Width = 78, ;
		ZOrderSet = 18
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblNinvtot' AS lblfieldlabelcustom WITH ;
		Caption = "Invoice Total", ;
		Height = 16, ;
		Left = 425, ;
		Name = "lblNinvtot", ;
		TabIndex = 41, ;
		Top = 400, ;
		Width = 62, ;
		ZOrderSet = 16
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lstItems' AS lstlistboxcustom WITH ;
		ColumnCount = 6, ;
		ColumnWidths = "75,190,70,85,70,110", ;
		FontName = "Courier New", ;
		Height = 196, ;
		Left = 7, ;
		Name = "lstItems", ;
		RowSource = "Appurchd.citemid,citemdesc,nquantity,nprice,cacctno,nextension", ;
		RowSourceType = 6, ;
		TabIndex = 36, ;
		Top = 194, ;
		Width = 612, ;
		ZOrderSet = 36
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="listbox" />

	ADD OBJECT 'Shape1' AS shape WITH ;
		BackColor = 255,255,128, ;
		Height = 77, ;
		Left = 3, ;
		Name = "Shape1", ;
		Top = 91, ;
		Width = 624, ;
		ZOrderSet = 1
		*< END OBJECT: BaseClass="shape" />

	ADD OBJECT 'txtcAcctDesc' AS txttextboxcustom WITH ;
		BackColor = 212,208,200, ;
		FontName = "Courier New", ;
		FontSize = 8, ;
		Height = 20, ;
		Left = 288, ;
		lreadonly = .F., ;
		Name = "txtcAcctDesc", ;
		TabIndex = 34, ;
		TabStop = .F., ;
		Top = 141, ;
		Width = 161, ;
		ZOrderSet = 40
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcAcctNo' AS txtquickfill WITH ;
		clistexpression = cacctno, ;
		clistworkarea = coa, ;
		FontName = "Courier New", ;
		FontSize = 8, ;
		Height = 20, ;
		InputMask = "XXXXXX", ;
		Left = 288, ;
		MaxLength = 6, ;
		Name = "txtcAcctNo", ;
		TabIndex = 29, ;
		Top = 118, ;
		Width = 73, ;
		ZOrderSet = 41
		*< END OBJECT: ClassLib="..\custom\cgadget.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcDeptDesc' AS txttextboxcustom WITH ;
		BackColor = 212,208,200, ;
		ControlSource = " ", ;
		FontName = "Courier New", ;
		FontSize = 8, ;
		Height = 20, ;
		Left = 452, ;
		MaxLength = 30, ;
		Name = "txtcDeptDesc", ;
		TabIndex = 35, ;
		Top = 141, ;
		Width = 162, ;
		ZOrderSet = 26
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcDeptNo' AS txtquickfill WITH ;
		clistexpression = cdeptno, ;
		clistworkarea = gldept, ;
		FontName = "Courier New", ;
		FontSize = 8, ;
		Format = "K!", ;
		Height = 20, ;
		InputMask = "", ;
		Left = 403, ;
		Name = "txtcDeptNo", ;
		TabIndex = 31, ;
		Top = 118, ;
		Width = 68, ;
		ZOrderSet = 28
		*< END OBJECT: ClassLib="..\custom\cgadget.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtCinvnum' AS txttextboxcustom WITH ;
		ControlSource = "appurchh.cinvnum", ;
		Height = 20, ;
		Left = 87, ;
		Margin = 1, ;
		MaxLength = 20, ;
		Name = "txtCinvnum", ;
		TabIndex = 8, ;
		Top = 31, ;
		Width = 79, ;
		ZOrderSet = 7
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtCitemdesc' AS txttextboxcustom WITH ;
		ControlSource = " ", ;
		FontName = "Courier New", ;
		FontSize = 8, ;
		Height = 20, ;
		Left = 7, ;
		MaxLength = 40, ;
		Name = "txtCitemdesc", ;
		TabIndex = 33, ;
		Top = 141, ;
		Width = 273, ;
		ZOrderSet = 24
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcItemId' AS txtquickfill WITH ;
		clistexpression = citemid, ;
		clistworkarea = items, ;
		FontName = "Courier New", ;
		FontSize = 8, ;
		Height = 20, ;
		InputMask = "XXXXXXXXXX", ;
		Left = 7, ;
		Name = "txtcItemId", ;
		TabIndex = 25, ;
		Top = 118, ;
		Width = 111, ;
		ZOrderSet = 42
		*< END OBJECT: ClassLib="..\custom\cgadget.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtCreference' AS txttextboxcustom WITH ;
		ControlSource = "appurchh.creference", ;
		Height = 20, ;
		Left = 243, ;
		Margin = 1, ;
		MaxLength = 30, ;
		Name = "txtCreference", ;
		TabIndex = 9, ;
		Top = 31, ;
		Width = 165, ;
		ZOrderSet = 9
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtCvendname' AS txttextboxcustom WITH ;
		BackColor = 212,208,200, ;
		ControlSource = "", ;
		Height = 20, ;
		Left = 204, ;
		Margin = 1, ;
		MaxLength = 40, ;
		Name = "txtCvendname", ;
		ReadOnly = .F., ;
		TabIndex = 4, ;
		Top = 7, ;
		Width = 240, ;
		ZOrderSet = 5
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcVendorID' AS txtquickfill WITH ;
		clistexpression = vendor.cvendorid, ;
		clistworkarea = vendor, ;
		ControlSource = "appurchh.cvendorid", ;
		Format = "K!", ;
		InputMask = "XXXXXXXXXX", ;
		Left = 87, ;
		Name = "txtcVendorID", ;
		TabIndex = 2, ;
		Top = 7, ;
		Width = 79, ;
		ZOrderSet = 23
		*< END OBJECT: ClassLib="..\custom\cgadget.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtdDiscDate' AS dpk WITH ;
		ControlSource = "appurchh.ddiscdate", ;
		Height = 20, ;
		Left = 432, ;
		Name = "txtdDiscDate", ;
		TabIndex = 13, ;
		Top = 60, ;
		Width = 75, ;
		ZOrderSet = 50
		*< END OBJECT: ClassLib="..\custom\swdate.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtdDueDate' AS dpk WITH ;
		ControlSource = "appurchh.dduedate", ;
		Height = 20, ;
		Left = 240, ;
		Name = "txtdDueDate", ;
		TabIndex = 12, ;
		Top = 60, ;
		Width = 75, ;
		ZOrderSet = 49
		*< END OBJECT: ClassLib="..\custom\swdate.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtdInvDate' AS dpk WITH ;
		ControlSource = "appurchh.dinvdate", ;
		Height = 20, ;
		Left = 87, ;
		lmorethan90 = .T., ;
		Name = "txtdInvDate", ;
		TabIndex = 11, ;
		Top = 60, ;
		Width = 75, ;
		ZOrderSet = 48
		*< END OBJECT: ClassLib="..\custom\swdate.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtdPostDate' AS dpk WITH ;
		ControlSource = "appurchh.dpostdate", ;
		Height = 20, ;
		lcheckdate = .T., ;
		Left = 516, ;
		lmorethan90 = .T., ;
		Name = "txtdPostDate", ;
		TabIndex = 7, ;
		Top = 7, ;
		Width = 75, ;
		ZOrderSet = 47
		*< END OBJECT: ClassLib="..\custom\swdate.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtnExtension' AS txttextboxcustom WITH ;
		Height = 20, ;
		InputMask = "99999999.99", ;
		Left = 501, ;
		Name = "txtnExtension", ;
		TabIndex = 32, ;
		Top = 118, ;
		Width = 112, ;
		ZOrderSet = 35
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtNinvbal' AS txttextboxcustom WITH ;
		ControlSource = "appurchh.ninvbal", ;
		Height = 20, ;
		InputMask = "999,999,999.99", ;
		Left = 264, ;
		Margin = 1, ;
		Name = "txtNinvbal", ;
		TabIndex = 38, ;
		Top = 398, ;
		Width = 108, ;
		ZOrderSet = 17
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtNinvtot' AS txttextboxcustom WITH ;
		ControlSource = "appurchh.ninvtot", ;
		Height = 20, ;
		InputMask = "999,999,999.99", ;
		Left = 492, ;
		Margin = 1, ;
		Name = "txtNinvtot", ;
		TabIndex = 39, ;
		Top = 398, ;
		Width = 115, ;
		ZOrderSet = 15
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtnPrice' AS txttextboxcustom WITH ;
		FontName = "Courier New", ;
		FontSize = 8, ;
		Height = 20, ;
		InputMask = "999,999.999", ;
		Left = 196, ;
		Name = "txtnPrice", ;
		TabIndex = 27, ;
		Top = 118, ;
		Width = 84, ;
		ZOrderSet = 30
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtnQuantity' AS txttextboxcustom WITH ;
		FontName = "Courier New", ;
		FontSize = 8, ;
		Height = 20, ;
		InputMask = "9999.99", ;
		Left = 121, ;
		Name = "txtnQuantity", ;
		TabIndex = 26, ;
		Top = 118, ;
		Width = 72, ;
		ZOrderSet = 32
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />
	
	PROCEDURE Activate
		IF DODEFAULT()
		   swselect('vendor')
		   SET ORDER TO cvendorid
		   IF SEEK(appurchh.cvendorid)
		      THISFORM.txtcVendName.VALUE = cvendname
		   ELSE
		      THISFORM.txtcVendName.VALUE = ' '
		   ENDIF
		   swselect('appurchh')
		ENDIF
		
	ENDPROC

	PROCEDURE adddetail1
	ENDPROC

	PROCEDURE adddetail2
		*
		*  Adds the detail line to the APPURCHD table
		*
		LOCAL m.cItemDesc, m.cAcctNo, m.cUnitno, m.nPrice, ;
		    m.cDeptNo, m.nExtension, m.cidpurd, m.cItemId, m.nQuantity
		LOCAL llReturn, loError
		LOCAL cAcctNo, cDeptNo, cExtDesc, cItemDesc, cItemId, cTaxCode, dExpDate, nDiscPct, nDiscount
		LOCAL nExtension, nInterest, nItemTax, nPrice, nQuantity
		
		llReturn = .T.
		
		TRY
		    WITH THISFORM
		        IF EMPTY(THISFORM.txtcAcctNo.VALUE)
		            THISFORM.omessage.warning('The account cannot be left blank')
		            THISFORM.setnextcontrol(.txtcAcctNo)
		            llReturn = .F.
		            EXIT
		        ENDIF
		
		        m.cBatch     = appurchh.cbatch
		        m.cItemId    = .txtcItemId.VALUE
		        m.nPrice     = .txtnPrice.VALUE
		        m.nQuantity  = .txtnQuantity.VALUE
		        m.cItemDesc  = .txtcItemDesc.VALUE
		        m.cAcctNo    = .txtcAcctNo.VALUE
		        m.cDeptNo    = .txtcDeptNo.VALUE
		        m.nExtension = .txtnExtension.VALUE
		
		
		        IF EMPTY(m.cDeptNo) AND THISFORM.lDeptRequired
		            THISFORM.omessage.DISPLAY('%msgDeptRequired')
		            THISFORM.setnextcontrol(THISFORM.txtcDeptNo)
		            llReturn = .F.
		            EXIT
		        ENDIF
		
		        m.nDiscPct  = 0
		        m.nItemTax  = 0
		        m.nInterest = 0
		        m.cTaxCode  = ' '
		        m.dExpDate  = {}
		        m.nDiscount = 0
		        m.cExtDesc  = 0
		        .cmdatamanager.new('Appurchd')
		        .cmdatamanager.REPLACE('APPURCHD', 'cBatch', m.cBatch)
		        .cmdatamanager.REPLACE('APPURCHD', 'Citemid', m.cItemId)
		        .cmdatamanager.REPLACE('APPURCHD', 'Citemdesc', m.cItemDesc)
		        .cmdatamanager.REPLACE('APPURCHD', 'Nprice', m.nPrice)
		        .cmdatamanager.REPLACE('APPURCHD', 'Nquantity', m.nQuantity)
		        .cmdatamanager.REPLACE('APPURCHD', 'Cacctno', m.cAcctNo)
		        .cmdatamanager.REPLACE('APPURCHD', 'Cdeptno', m.cDeptNo)
		        .cmdatamanager.REPLACE('APPURCHD', 'Nextension', m.nExtension)
		        .cmdatamanager.REPLACE('APPURCHD', 'Litemdetail', .T.)
		        .txtcItemDesc.VALUE  = ' '
		        .txtcItemId.VALUE    = ' '
		        .txtcAcctNo.VALUE    = ' '
		        .txtcDeptNo.VALUE    = ' '
		        .txtcAcctDesc.VALUE  = ' '
		        .txtcDeptDesc.VALUE  = ' '
		        .txtnPrice.VALUE     = 0
		        .txtnQuantity.VALUE  = 0
		        .txtnPrice.VALUE     = 0
		        .txtnExtension.VALUE = 0
		        .lstItems.LISTITEMID = .lstItems.LISTCOUNT
		        .lstItems.REQUERY()
		        .lstItems.REFRESH()
		        .txtcItemId.SETFOCUS()
		
		        .CalcTot()
		        .lWellRequired = .F.
		        .lDeptRequired = .F.
		        .REFRESH()
		        thisform.setstate()
		    ENDWITH
		CATCH TO loError
		    llReturn = .F.
		    DO errorlog WITH 'AddDetail2', loError.LINENO, 'Purchase Inventory', loError.ERRORNO, loError.MESSAGE, '', loError
		    MESSAGEBOX('Unable to save the items at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		          'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		RETURN llReturn
		
	ENDPROC

	PROCEDURE calcext		&& Calculates the detail extension total
	ENDPROC

	PROCEDURE calcext1
	ENDPROC

	PROCEDURE calcext2
		WITH thisform
		   .txtnExtension.Value = .txtnQuantity.Value * .txtnPrice.Value
		   .txtnExtension.Refresh()
		ENDWITH   
	ENDPROC

	PROCEDURE calctot		&& Calculates the Invoice Totals
		*
		*  Calculates the invoice totals
		*
		LOCAL lnSelect, lnRecno, lnTotal, lcBatch, lnSubTotal, lnBalance, lcFilter
		LOCAL lnCount
		LOCAL llReturn, loError
		
		llReturn = .T.
		
		TRY
		    SELECT appurchh
		
		    lcBatch = appurchh.cbatch
		
		    lnSelect = SELECT()
		    swselect('appurchd')
		    lnRecno  = RECNO()
		    lcFilter = FILTER()
		    SET FILTER TO
		
		    lnSubTotal = 0
		    swselect('appurchd')
		    SCAN
		        lnSubTotal = lnSubTotal + nExtension
		    ENDSCAN
		
		    IF lnRecno <= RECC()
		        GOTO lnRecno
		    ENDIF
		
		    lnBalance = lnSubTotal - appurchh.npayments
		
		    IF appurchh.nInvTot <> lnSubTotal
		        THIS.cmdatamanager.REPLACE('appurchh', 'nInvTot', lnSubTotal)
		        THIS.cmdatamanager.REPLACE('appurchh', 'nSubTotal', lnSubTotal)
		        THISFORM.txtnInvTot.REFRESH()
		    ENDIF
		
		
		    SELECT (lnSelect)
		
		    UNLOCK
		CATCH TO loError
		    llReturn = .F.
		    DO errorlog WITH 'CalcTot', loError.LINENO, 'Purchase Inventory', loError.ERRORNO, loError.MESSAGE, '', loError
		    MESSAGEBOX('Unable to save the items at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		          'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		RETURN llReturn
	ENDPROC

	PROCEDURE checkexp		&& Check to see if expenses entered for wells have been allocated and the production period closed.
		LPARA tcBatch
		
		*  Check to see if expenses entered for wells were allocated
		*  If so, and the period isn't closed, delete it.  Otherwise
		*  let the user know he can't delete this entry.
		swselect('expense')
		SCAN FOR cBatch = tcBatch
		   m.cYear   = cYear
		   m.cPeriod = cPeriod
		   m.cWellID = cWellID
		   swselect('wells')
		   SET ORDER TO cWellID
		   SEEK(m.cWellID)
		   m.cGroup = cGroup
		   swselect('sysctl')
		   SET ORDER TO yrprdgrp
		   IF THISFORM.lSepClose
		      IF SEEK(m.cYear+m.cPeriod+m.cGroup+'YJ')
		         RETURN .T.
		      ENDIF
		   ELSE
		      IF SEEK(m.cYear+m.cPeriod+m.cGroup+'YR')
		         RETURN .T.
		      ENDIF
		   ENDIF
		ENDSCAN
		
		RETURN .F.
		
	ENDPROC

	PROCEDURE checkhist		&& Checks to see if the production period is closed.
		LPARA tcYear, tcPeriod, tcGroup, tcWellID
		LOCAL llHist, llSepClose, lcDeleted
		LOCAL llJIB
		*
		*  Checks to see if the given period is closed
		*  Returns .T. if the period is closed
		*
		
		llReturn = .T.
		
		TRY
		    lcDeleted = SET('DELETED')
		    SET DELETED ON
		
		    llHist = .F.
		
		*
		*  Check to see if there are any JIB owners in the well. We need to check to see if the JIB period
		*  is closed if there are JIB owners. Otherwise, we check the revenue period 'cause it means we're
		*  netting expenses from revenue.
		*
		    swselect('wellinv')
		    LOCATE FOR cWellID = tcWellID AND lJIB = .T.
		    IF FOUND()
		        llJIB = .T.
		    ELSE
		        llJIB = .F.
		    ENDIF
		
		    swselect('sysctl')
		    SET ORDER TO yrprdgrp
		
		    IF llJIB
		        IF tcGroup = '**'
		            LOCATE FOR cyear + cperiod = tcYear + tcPeriod AND lDisbMan AND cTypeClose = 'J'
		            IF FOUND()
		                llHist = .T.
		            ENDIF
		        ELSE
		            IF SEEK(tcYear + tcPeriod + tcGroup + 'YJ')
		                llHist = .T.
		            ENDIF
		        ENDIF
		    ELSE
		        IF tcGroup = '**'
		            LOCATE FOR cyear + cperiod = tcYear + tcPeriod AND lDisbMan AND cTypeClose = 'R'
		            IF FOUND()
		                llHist = .T.
		            ENDIF
		        ELSE
		            IF SEEK(tcYear + tcPeriod + tcGroup + 'YR')
		                llHist = .T.
		            ENDIF
		        ENDIF
		
		    ENDIF
		    SET DELETED &lcDeleted
		CATCH TO loError
		    llReturn = .F.
		    DO errorlog WITH 'CheckHist', loError.LINENO, 'Purchase Inventory', loError.ERRORNO, loError.MESSAGE, '', loError
		    MESSAGEBOX('Unable to save the items at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		          'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		RETURN llReturn
		
	ENDPROC

	PROCEDURE Destroy
		* Cleanup by releasing the distproc object
		IF TYPE('thisform.oDist') = 'O'
		   oDist = THISFORM.oDist
		   RELEASE oDist
		   THISFORM.oDist = .NULL.
		ENDIF
		THISFORM.grouptran.UNLOAD()
		ON KEY LABEL F5 *
		ON KEY LABEL F2 *
		ON KEY LABEL TAB 
		ON KEY LABEL ENTER 
		
		DODEFAULT()
		
	ENDPROC

	PROCEDURE dmexpense		&& Disbursement Manager integration for expenses.
		LOCAL lcBatch, lcYear, lcPeriod, m.cOwnerID
		LOCAL lAPTran, lAllocated, lClosed, lFixed, lOneMan, lcWellID1, lcWellID2, llFound, llReturn
		LOCAL loError
		*:Global cBatch, cCateg, cExpClass, cMemo, cPaidByCk, cPayee, cPeriod, cPrdPaid, cWellID, cYear
		*:Global cidexpe, cidexph, cidexps, crefid, cvendorid, dExpDate, dPostDate, nAmount, nSaltWater
		
		*
		*  Adds the expense entries to the disbursement manager EXPSUSP or
		*  EXPENSE tables depending on whether the production year and
		*  period are specified.
		*
		
		llReturn = .T.
		
		TRY
		    SELECT wells
		    SET ORDER TO cWellID
		    GO TOP
		    lcWellID1 = cWellID
		    GO BOTT
		    lcWellID2 = cWellID
		
		*  Check to see if expenses entered for wells were allocated
		*  If so, and the period isn't closed, delete it.  Otherwise
		*  let the user know he can't delete this entry.
		    lcBatch = appurchh.cBatch
		
		    IF NOT checkexp(lcBatch)
		        llReturn = .F.
		        EXIT 
		    ENDIF
		
		    THISFORM.oDist = CREATEOBJECT('distproc', lcWellID1, lcWellID2, ;
		          '01', '1980', '00', 'W', DATE(), .T.)
		
		    SELECT expsusp
		    SCAN FOR cBatch == lcBatch
		        DELETE NEXT 1
		    ENDSCAN
		
		    SELECT expense
		    SCAN FOR cBatch == lcBatch
		        m.cidexph = cidexph
		        DELE NEXT 1
		        SELECT expense1
		        llFound = .F.
		        SCAN FOR cidexph == m.cidexph
		            llFound = .T.
		            EXIT
		        ENDSCAN
		    ENDSCAN
		
		    m.cvendorid  = appurchh.cvendorid
		    m.dExpDate   = appurchh.dinvdate
		    lcYear       = THISFORM.glmaint.getperiod(m.dExpDate, .T.)
		    lcPeriod     = THISFORM.glmaint.getperiod(m.dExpDate, .F.)
		    m.crefid     = appurchh.cinvnum
		    m.cPayee     = THISFORM.txtcVendName.VALUE
		    m.lAPTran    = .T.
		    m.cBatch     = lcBatch
		    m.dPostDate  = appurchh.dPostDate
		    m.cMemo      = ''
		    m.cPaidByCk  = ''
		    m.cPrdPaid   = ''
		    m.lFixed     = .F.
		    m.lClosed    = .F.
		    m.lAllocated = .F.
		
		    SELECT appurchd
		    SCAN FOR cBatch == lcBatch AND NOT lItemDetail AND NOT EMPTY(cUnitNo) AND NOT EMPTY(cCatCode)
		        SCATTER MEMVAR
		*  Don't process any non-well expenses
		        swselect('wells')
		        IF NOT SEEK(m.cUnitNo)
		            LOOP
		        ENDIF
		
		*  Don't process any expenses that aren't tied
		*  to a valid expense category or AFE category code
		        swselect('expcat')
		        SET ORDER TO cCatCode
		        IF NOT SEEK(m.cCatCode)
		            LOOP
		        ELSE
		            IF lAFEType
		                LOOP
		            ENDIF
		            m.cCateg    = cCateg
		            m.cExpClass = cExpClass
		        ENDIF
		
		        m.cWellID    = m.cUnitNo
		        m.nSaltWater = m.nSaltBBL
		
		        m.nAmount = swNetExp(m.nExtension, m.cWellID, .F., m.cExpClass, 'B')
		
		        IF EMPTY(m.cProdYear) OR EMPTY(m.cProdPeriod)
		            m.cYear   = lcYear
		            m.cPeriod = lcPeriod
		        ELSE
		            m.cYear   = m.cProdYear
		            m.cPeriod = m.cProdPeriod
		        ENDIF
		
		        IF NOT EMPTY(m.cOwnerID)
		            m.lOneMan = .T.
		        ELSE
		            m.lOneMan = .F.
		        ENDIF
		
		        IF NOT EMPTY(m.cProdYear) AND NOT EMPTY(m.cProdPeriod)
		            m.cidexpe = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Expense')
		            SET DELETED OFF
		            SELECT expense1
		            SET ORDER TO cidexpe
		            DO WHILE SEEK(m.cidexpe)
		                m.cidexpe = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Expense')
		            ENDDO
		            SET DELETED ON
		            swselect('expense')
		            INSERT INTO expense FROM MEMVAR
		        ELSE
		            m.cidexps    = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Expense')
		            SET DELETED OFF
		            swselect('expsusp')
		            SET ORDER TO cidexps
		            DO WHILE SEEK(m.cidexps)
		                m.cidexps    = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Expense')
		            ENDDO
		            SET DELETED ON
		            INSERT INTO expsusp FROM MEMVAR
		        ENDIF
		    ENDSCAN
		
		CATCH TO loError
		    llReturn = .F.
		    DO errorlog WITH 'DMExpense', loError.LINENO, 'Purchase Inventory', loError.ERRORNO, loError.MESSAGE, '', loError
		    MESSAGEBOX('Unable to save the items at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		          'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		RETURN llReturn
		
	ENDPROC

	PROCEDURE editdetail		&& Moves the detail line from the grid to the update area.
	ENDPROC

	PROCEDURE edititems
		LOCAL llReturn, loError
		llReturn = .T.
		
		TRY
		
		    WITH THISFORM
		
		        .txtcAcctNo.VALUE   = appurchd.cacctno
		        .txtcItemDesc.VALUE = appurchd.citemdesc
		        .txtcDeptNo.VALUE   = appurchd.cDeptNo
		        .txtcItemID.VALUE   = appurchd.citemid
		        .txtnQuantity.VALUE = appurchd.nquantity
		        .txtnprice.VALUE    = appurchd.nprice
		        .txtnExtension.setvalue(appurchd.nExtension)
		
		* Fill in the account description
		        swselect('coa')
		        SET ORDER TO acctno
		        IF SEEK(appurchd.cacctno)
		            .txtcAcctDesc.VALUE = coa.cacctdesc
		        ENDIF
		
		*  Fill in the Department Name
		        swselect('gldept')
		        SET ORDER TO cDeptNo
		        IF SEEK(appurchd.cDeptNo)
		            .txtcDeptDesc.VALUE = gldept.cDeptDesc
		        ENDIF
		
		        swselect('items')  &&  Update Inventory numbers to remove it from quantity available
		        LOCATE FOR citemid = appurchd.citemid
		        IF FOUND()
		            REPLACE nQtyOnHand WITH nQtyOnHand - appurchd.nquantity
		        ENDIF
		
		        .txtcItemID.SETFOCUS()
		        swselect('appurchd')
		        THISFORM.cmdatamanager.deleterecord('Appurchd')
		        THISFORM.calctot()
		        .lstItems.REQUERY()
		        THISFORM.REFRESH()
		    ENDWITH
		
		    swselect('appurchh')
		
		*
		*  Let the form know something changed
		*
		    THISFORM.setstate()
		CATCH TO loError
		    llReturn = .F.
		    DO errorlog WITH 'EditItems', loError.LINENO, 'Purchase Inventory', loError.ERRORNO, loError.MESSAGE, '', loError
		    MESSAGEBOX('Unable to process the report at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		          'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		RETURN llReturn
	ENDPROC

	PROCEDURE getprice		&& Gets the price for the item based upon the price code passed.
	ENDPROC

	PROCEDURE Init
		LOCAL lnItemPurchRecs
		
		IF DODEFAULT()
		   SELECT options
		   GO TOP
		   this.lSepClose = lSepClose
		   on key label F5 _screen.activeform.zerotot()
		   SELECT appurchh
		   COUNT FOR lItemPurch = .T. TO lnItemPurchRecs
		   SET FILTER TO lItemPurch = .t.
		   GO top
		   thisform.cmdatamanager.recordwasmoved('Appurchh')  &&  Re-sync the header/detail positions
		*!*	   thisform.next()
		*!*	   thisform.prior()
		*   thisform.Refresh()
		
		   IF lnItemPurchRecs = 0
		      IF THISFORM.omessage.CONFIRM("This file is empty. Do you want to add a New record? From now on, you'll need to click the New button in the toolbar to add a new record")
		         THISFORM.new(thisform.cworkarea)
		      ENDIF
		   ENDIF    
		   
		  
		ENDIF   
		   
	ENDPROC

	PROCEDURE list
		LPARAMETERS cworkarea
		
		LOCAL lcList
		LOCAL llReturn, loError
		PRIV llOK
		
		llReturn = .T.
		
		TRY
		   llOK = .T.
		
		   IF THIS.flushcontrolbuffer() AND THIS.beforenav('appurchh')
			  SELECT  appurchh.cvendorid, ;
					  appurchh.cInvNum, ;
					  appurchh.dinvdate, ;
					  appurchh.ninvtot, ;
					  vendor.csortfield AS cvendname, ;
					  appurchh.cbatch ;
				  FROM appurchh, vendor ;
				  WHERE appurchh.cvendorid = vendor.cvendorid ;
					  AND lItemPurch  ;  &&  No inventory purchases should show in the list
				  INTO CURSOR tempap1 ;
				  ORDER BY appurchh.cvendorid
		
		      IF _TALLY > 0
		         IF USED('tempap')
		            USE IN tempap
		         ENDIF
		         USE DBF('tempap1') AGAIN IN 0 ALIAS tempap EXCL
		         SET SAFETY OFF
		         SELECT tempap
		         INDEX ON cbatch     TAG cbatch
		         INDEX ON cvendorid + STR(YEAR(dinvdate)) + STR(MONTH(dinvdate)) + STR(DAY(dinvdate)) + cInvNum  TAG cvendorid
		         INDEX ON cInvNum + STR(YEAR(dinvdate)) + STR(MONTH(dinvdate)) + STR(DAY(dinvdate))    TAG cInvNum
		         INDEX ON dinvdate TAG dinvdate
		         INDEX ON UPPER(cvendname) + STR(YEAR(dinvdate)) + STR(MONTH(dinvdate)) + STR(DAY(dinvdate)) + cInvNum  TAG cvendname
		         INDEX ON ninvtot    TAG ninvtot
		
		         IF UPPER(m.goApp.cUser) = 'DEVELOPER'
		            lcList = 'cbatch\Batch,cinvnum\Invoice Number,dInvDate\Invoice Date,cvendorid\Vendor ID,cvendname\Vendor Name,ninvtot\Invoice Total'
		
		            DO FORM ..\CUSTOM\picklist WITH 'tempap', lcList, appurchh.cInvNum, 6, .T., .T.
		         ELSE
		            lcList = 'cinvnum\Invoice Number,dInvDate\Invoice Date,cvendorid\Vendor ID,cvendname\Vendor Name,ninvtot\Invoice Total'
		
		            DO FORM ..\CUSTOM\picklist WITH 'tempap', lcList, appurchh.cInvNum, 5, .T., .T.
		         ENDIF
		
		         IF llOK
		            SELECT appurchh
		            SET ORDER TO cbatch
		            SEEK(tempap.cbatch)
		            THISFORM.cmdatamanager.setrecordposition('Appurchh')
		            THISFORM.REFRESH()
		         ENDIF
		      ENDIF
		   ELSE
		      llReturn = .F.
		   ENDIF
		CATCH TO loError
		   llReturn = .F.
		   DO errorlog WITH 'List', loError.LINENO, 'Purchase Inventory', loError.ERRORNO, loError.MESSAGE, '', loError
		   MESSAGEBOX('Unable to process the list at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		        'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		RETURN llReturn
		
	ENDPROC

	PROCEDURE lookcoa
		LOCAL lcList
		PRIV llOK
		
		llOK = .F.
		lcList = 'cacctno/acctno,cacctdesc/acctdesc'
		
		DO FORM ..\custom\picklist WITH 'Coa', lcList, 'cacctno', 2
		
		IF llOK
		   thisform.grdPurchdet.column1.txtcAcctNo.value = coa.cacctno
		   thisform.cmdatamanager.replace('appurchd', 'cacctno', coa.cacctno)
		   thisform.grdPurchdet.column1.txtcAcctNo.refresh()
		ENDIF   
		
		thisform.grdPurchdet.column1.txtcAcctNo.SetFocus()
	ENDPROC

	PROCEDURE save
		LPARAMETERS cworkarealist
		
		THISFORM.txtcVendorID.SETFOCUS()
		THISFORM.setnextcontrol(THISFORM.txtcvendorid)
		thisform.activatenextcontrol()
		
		DODEFAULT(cworkarealist)
		
	ENDPROC

	PROCEDURE setstate		&& Resets the form state for non bound controls so that the save button still works.
		this.lChanged = .T.
		m.goStateManager.RefreshAll('Form Edit')
	ENDPROC

	PROCEDURE valterms		&& Validate Terms and Set Due Date and Disc Date based on the Terms
		*
		*  Validates the terms code in the appurchh record and
		*  calculates the due date and disc date based upon
		*  the terms settings and the appurchh.dinvdate
		*
		LOCAL lcidTerm, lnNetDueIn, lnDiscIn, ldInvDate
		LOCAL llReturn, lnDiscPct, loError
		
		llReturn = .T.
		
		TRY
		    swselect('appurchh')
		    ldInvDate = appurchh.dinvdate
		*
		*  If the invoice date is empty, don't try to calculate
		*  the due date or discount date
		*
		    IF EMPTY(ldInvDate)
		        llReturn = .T.
		        EXIT
		    ENDIF
		
		*  Get the terms table primary key from the purchase header
		*  record.  
		    lcidTerm  = appurchh.cidterm
		
		*  Lookup the terms code in the terms table to get the
		*  # of days the invoice is due in and the # of days
		*  set for discounts
		    swselect('terms')
		    SET ORDER TO cidterm
		    IF SEEK(lcidTerm)
		        lnNetDueIn = nNetDueIn
		        lnDiscIn   = nDiscIn
		        lnDiscPct  = nDiscPct
		    ELSE
		*  Terms have not been selected for this purchase so assume
		*  COD.
		        STORE 0 TO lnNetDueIn, lnDiscIn, lnDiscPct
		    ENDIF
		
		*  Calculate and set the values of the due date and
		*  discount date fields
		    IF THISFORM.txtdduedate.VALUE <> (ldInvDate + lnNetDueIn)
		        THISFORM.txtdduedate.setvalue(ldInvDate + lnNetDueIn)
		    ENDIF
		    IF THISFORM.txtdDiscDate.VALUE <> (ldInvDate + lnDiscIn)
		        THISFORM.txtdDiscDate.setvalue(ldInvDate + lnDiscIn)
		    ENDIF
		CATCH TO loError
		    llReturn = .F.
		    DO errorlog WITH 'ValTerms', loError.LINENO, 'Purchase Inventory', loError.ERRORNO, loError.MESSAGE, '', loError
		    MESSAGEBOX('Unable to process the bill at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		          'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		RETURN llReturn
	ENDPROC

	PROCEDURE zerotot
		LOCAL lcDate
		LOCAL llReturn, loError
		LOCAL cBatch, cBillToken, cacctno, cidAppmd, cinvnum, cvendorid, dDiscDate, dPmtDate, dbilldate
		LOCAL dduedate, nDiscTaken, nDiscTot, nInvBal, nTotDue, nTotPaid, nTotdisc, namtpaid
		
		llReturn = .T.
		
		TRY
		    IF THISFORM.oMessage.CONFIRM('Are you sure that you want to create a payment record for this bill?')
		        DO FORM SOURCE\csgetdate WITH 'AP' TO lcDate
		        WAIT WIND NOWAIT 'Creating Payment Record...'
		        m.cBatch = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Batch')
		
		        swselect('appmthdr')  &&  Create Payment Header Record
		        SET ORDER TO cBatch
		        DO WHILE SEEK(m.cBatch)
		            m.cBatch = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Batch')
		        ENDDO
		        m.dbilldate = lcDate
		        m.cacctno   = apopt.capcash
		        m.nTotdisc  = 0
		        swselect('appmtdet')
		        SUM(namtpaid) FOR cBillToken == appurchh.cBatch TO m.nTotPmts
		        swselect('appmthdr')
		        m.nTotPaid = appurchh.ninvtot - m.nTotPmts
		        m.nTotDue  = m.nTotPaid
		        m.dPmtDate = lcDate
		        IF m.nTotPaid <> 0
		            INSERT INTO appmthdr FROM MEMVAR
		        ENDIF
		
		        m.cidAppmd = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.AP Payment Detail')
		        swselect('appmtdet')  &&  Create Payment Detail Record
		        SET ORDER TO cidarpmd
		        DO WHILE SEEK(m.cidAppmd)
		            m.cidAppmd = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.AP Payment Detail')
		        ENDDO
		        m.cinvnum    = appurchh.cinvnum
		        m.cvendorid  = appurchh.cvendorid
		        m.dduedate   = appurchh.dduedate
		        m.nInvBal    = m.nTotDue
		        m.dDiscDate  = appurchh.dDiscDate
		        m.nDiscTot   = 0
		        m.namtpaid   = m.nTotPaid
		        m.cBillToken = appurchh.cBatch
		        m.nDiscTaken = 0
		        IF m.nTotPaid <> 0
		            INSERT INTO appmtdet FROM MEMVAR
		        ENDIF
		        swselect('appurchh')
		        REPLACE appurchh.nInvBal WITH 0, appurchh.npayments WITH appurchh.ninvtot
		        swselect('appurchh')
		        = TABLEUPDATE(.T.)
		        swselect('appmthdr')
		        = TABLEUPDATE(.T.)
		        swselect('appmtdet')
		        = TABLEUPDATE(.T.)
		        THISFORM.txtnInvBal.REFRESH()
		        THISFORM.setstate()
		        THISFORM.lF5 = .T.
		    ENDIF
		CATCH TO loError
		    llReturn = .F.
		    DO errorlog WITH 'ZeroTot', loError.LINENO, 'Purchase Inventory', loError.ERRORNO, loError.MESSAGE, '', loError
		    MESSAGEBOX('Unable to save the items at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		          'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		RETURN llReturn
		
	ENDPROC

	PROCEDURE cboTerms.afterchange
		thisform.valterms()
		DODEFAULT()
	ENDPROC

	PROCEDURE cboTerms.Init
		LOCAL lnCount
		*
		*  Builds the data displayed in the combo list box
		*
		
		SELECT cTermDesc, cidTerm FROM terms INTO ARRAY laTerms ORDER BY cTermDesc
		lnCount = _tally
		
		This.addlistitem('NONE',1,1)
		This.addlistitem('',1,2)
		
		IF lnCount > 0
		   FOR lnX = 1 TO ALEN(laTerms,1)
		      this.addlistitem(laTerms[lnX,1],lnX+1,1)
		      this.addlistitem(laTerms[lnX,2],lnX+1,2)
		   ENDFOR   
		ENDIF   
		
		DODEFAULT()
	ENDPROC

	PROCEDURE cmdatamanager.afterchange
		LPARAMETERS cworkarea,cfield
		
		DO CASE
			   CASE UPPER(m.cField) + ',' $ 'NQUANTITY,NPRICE,'
			      m.nExtension = appurchd.nQuantity * appurchd.nPrice
			      RETURN this.Replace('ApPurchd', 'nExtension', m.nExtension )
		      
		ENDCASE
		RETURN .T.      
	ENDPROC

	PROCEDURE cmdatamanager.afterdelete
		LPARAMETERS cworkarea
		
		DO CASE
		   CASE m.cWorkarea = 'Appurchh'
		      
		   CASE m.cWorkarea = 'Appurchd'
		      * Recalculate the invoice totals
		      thisform.calctot()
		ENDCASE
		
		DODEFAULT(cworkarea)
	ENDPROC

	PROCEDURE cmdatamanager.afternav
		LPARAMETERS cworkarea
		LOCAL lcBatch
		
		IF PROPER(m.cworkarea) = 'Appurchh'
		   SELECT appurchh
		   lcBatch = cBatch
		   
		   SELECT vendor
		   SET ORDER TO cvendorid
		   IF SEEK(appurchh.cvendorid)
		      THISFORM.txtcVendName.VALUE = cvendname
		   ELSE
		      THISFORM.txtcVendName.VALUE = ' '
		   ENDIF
		   THISFORM.calctot()
		   thisform.lF5 = .f.
		   SELECT appurchh
		   THISFORM.lstItems.Requery()
		   THISFORM.lstItems.Refresh()
		   THISFORM.txtnextension.VALUE = 0
		   thisform.txtnquantity.value = 0
		   thisform.txtnprice.value = 0
		   thisform.lnoclearext = .f.
		   
		   THISFORM.setnextcontrol(THISFORM.txtcvendorid)
		ENDIF
		
		RETURN(DODEFAULT(cworkarea))
		
	ENDPROC

	PROCEDURE cmdatamanager.afternew
		LPARAMETERS cworkarea
		LOCAL llFoundTerm, lcidTerm, lcBatch, lcidpurd
		m.nextension = 0
		
		DO CASE
		   CASE UPPER(m.cworkarea) = 'APPURCHH'    && Purchases Header
		      * Look for duplicates so no uniqueness errors occur
		      lcBatch = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Batch')
		      SET DELETED OFF
		      SELECT appurchh1
		      SET ORDER TO cBatch
		      DO WHILE SEEK(lcBatch)
		         lcBatch = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Batch')
		      ENDDO
		      SET DELETED ON
		      swselect('appurchh')
		      REPLACE cBatch  WITH lcBatch, ;
		         dPostDate WITH DATE(), ;
		         lItemPurch WITH .T.
		      *
		      *  Look for a default terms record so that we can set the terms
		      *  to that default
		      llFoundTerm = .F.
		      swselect('terms')
		      SCAN FOR lDefTerm = .T.
		         lcidTerm = cidTerm
		         llFoundTerm = .T.
		         EXIT
		      ENDSCAN
		      swselect('appurchh')
		      IF llFoundTerm
		         REPLACE cidTerm WITH lcidTerm
		      ENDIF
		
		      WITH THISFORM
		         .txtcItemDesc.VALUE = ' '
		         .txtcAcctNo.VALUE = ' '
		         .txtcItemId.VALUE = ' '
		         .txtcDeptNo.VALUE = ' '
		         .txtcAcctDesc.VALUE = ' '
		         .txtcDeptDesc.VALUE = ' '
		         .txtnExtension.SetValue(0)
		         .txtcAcctNo.SETFOCUS()
		      ENDWITH
		
		      THISFORM.txtcVendorId.SETFOCUS()
		
		   CASE UPPER(m.cworkarea) = 'APPURCHD'   &&  Purchase Detail
		      * Look for duplicates so no uniqueness errors occur
		      lcidpurd = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Purchase Detail')
		      SET DELETED OFF
		      SELECT appurchd1
		      SET ORDER TO cidPurd
		      DO WHILE SEEK(lcidpurd)
		         lcidpurd = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Purchase Detail')
		      ENDDO
		      SET DELETED ON
		      swselect('appurchd')
		      REPLACE appurchd.cidPurd WITH lcidpurd
		ENDCASE
		
		THISFORM.txtnExtension.SET('value',0)
		
	ENDPROC

	PROCEDURE cmdatamanager.beforedelete
		LPARAMETERS cworkarea
		
		IF m.cworkarea = 'Appurchh'
		   *  Make sure the period or year isn't closed
		   IF NOT THISFORM.glmaint.CheckPeriod(appurchh.dpostdate)
		      THISFORM.omessage.warning('Unable to delete this bill. Either the fiscal year or period represented by this date has been closed.')
		      RETURN .F.
		   ENDIF
		
		   lcBatch = appurchh.cBatch
		
		   IF thisform.checkexp(lcBatch)
		      thisform.omessage.warning('Expenses have been allocated to a production period and the period has been closed. ' + ;
		                                'You cannot delete this bill.')
		      RETURN .F.
		   ENDIF                             
		   
		   * Check to see if payments have been applied to this bill.
		   SELECT appmtdet
		   LOCATE FOR cBillToken = lcBatch AND nAmtPaid <> 0 AND cInvNum = appurchh.cinvnum
		   IF FOUND()
		      IF NOT thisform.omessage.confirm('There are payments that have been applied to this bill. ' + ;
		                                       'Deleting the bill will break the link between the payment and bill. ' + ;
		                                       'Are you sure you want to do this?')
		         RETURN .F.
		      ENDIF
		   ENDIF
		   
		   SELECT appurchd  &&  Scan the detail lines, and add the inventory back to the item quantity - BH 01/03/07
		   SCAN FOR cBatch == lcBatch
		      select items  &&  Update Inventory numbers
		      locate for cItemID = appurchd.cItemID
		      if found()
		         replace nQtyOnHand with nQtyOnHand - appurchd.nQuantity, nLastCost WITH appurchd.nPrice
		      ENDIF
		   endscan
		   
		   SELECT appurchd
		*   SET FILTER TO
		
		   THISFORM.glmaint.delbatch(lcBatch)
		
		   BEGIN TRANSACTION
		   SELECT glmaster
		   =TABLEUPDATE(.T.)
		   SELECT coabal
		   =TABLEUPDATE(.T.)
		   SELECT appurchh
		   =TABLEUPDATE(.T.)
		   SELECT appurchd
		   =TABLEUPDATE(.T.)
		   SELECT items
		   =TABLEUPDATE(.T.)
		   END TRANSACTION
		      
		   THISFORM.setchanged(.F.)
		
		ENDIF
		
		DODEFAULT(cworkarea)
		
	ENDPROC

	PROCEDURE cmdatamanager.beforenew
		LPARAMETERS cWorkarea
		
		* Save the entry if they haven't clicked save in between bills
		IF UPPER(cWorkarea) = 'APPURCHH'
		   IF THISFORM.lChanged = .T.
		      IF THISFORM.flushcontrolbuffer()
		         THISFORM.SAVE()
		      ENDIF
		   ENDIF
		ENDIF
		
		
	ENDPROC

	PROCEDURE cmdatamanager.beforeupdate
		LPARAMETERS cworkarealist
		LOCAL lcBatch, lcAPAcct, lcTaxAcct, llReturn, lcSelect, lnRecNo, lcFilter
		LOCAL lnBalance, loError
		
		llReturn = .T.
		
		TRY
		
		    IF NOT THISFORM.lChanged
		        llReturn = .F.
		        EXIT
		    ENDIF
		
		    lcBatch = appurchh.cbatch
		
		    lcSelect = SELECT()
		
		* set coverage to temp.log
		
		*  Make sure the period or year isn't closed
		    IF NOT THISFORM.glmaint.CheckPeriod(appurchh.dpostdate)
		        THISFORM.omessage.warning('Unable to save this bill. Either the fiscal year or period represented by this date has been closed.')
		        llReturn = .F.
		        EXIT 
		    ENDIF
		
		* Check to see if payments have been applied to this bill.
		    swselect('appmtdet')
		    LOCATE FOR cBillToken = lcBatch AND nAmtPaid <> 0 AND cInvNum = appurchh.cInvNum
		    IF FOUND()
		        IF NOT THISFORM.omessage.CONFIRM('There are payments that have been applied to this bill. ' + ;
		                  'Changing this bill may change the way the payments are applied. ' + ;
		                  'Are you sure you want to do this?')
		            llReturn = .F.
		            EXIT 
		        ENDIF
		    ENDIF
		
		    WAIT WINDOW NOWAIT 'Saving Changes, Please Wait.....'
		
		    lnBalance = appurchh.nInvTot - appurchh.npayments
		
		    IF appurchh.nInvBal <> lnBalance
		        IF NOT THIS.isnew('Appurchh') AND NOT THISFORM.lF5
		            IF appurchh.npayments <> 0
		                IF THISFORM.omessage.CONFIRM('Should the invoice balance be updated to reflect the changes?')
		                    THIS.REPLACE('appurchh', 'nInvBal', lnBalance)
		                    THISFORM.txtninvbal.REFRESH()
		                ENDIF
		            ELSE
		                THIS.REPLACE('appurchh', 'nInvBal', lnBalance)
		            ENDIF
		        ELSE
		            IF NOT THISFORM.lF5
		                THIS.REPLACE('appurchh', 'nInvBal', lnBalance)
		                THISFORM.txtninvbal.REFRESH()
		            ENDIF
		        ENDIF
		    ENDIF
		
		
		*
		*  Delete the G/L journal entries for this invoice
		*
		    THISFORM.glmaint.delbatch(lcBatch)
		
		*
		* Get the default A/P account
		*
		    swselect('apopt')
		    GO TOP
		    lcAPAcct   = cAPAcct
		
		*
		*  Create the G/L journal entries for this invoice
		*
		
		*  A/P entry
		    THISFORM.glmaint.cSource    = 'AP'
		    THISFORM.glmaint.cbatch     = lcBatch
		    THISFORM.glmaint.dGLDate    = appurchh.dpostdate
		    THISFORM.glmaint.cReference = 'Pur: ' + ALLTRIM(appurchh.cInvNum)
		    THISFORM.glmaint.cDesc      = THISFORM.txtcVendName.VALUE
		    THISFORM.glmaint.cAcctNo    = lcAPAcct
		    THISFORM.glmaint.cId        = appurchh.cVendorId
		    THISFORM.glmaint.nAmount    = appurchh.nInvTot * -1
		    THISFORM.glmaint.mNotes     = 'appurchh.mnotes'
		    THISFORM.glmaint.cBunch     = THISFORM.cBunch
		    THISFORM.glmaint.cUnitNo    = ''
		    THISFORM.glmaint.cdeptno    = ''
		
		    THISFORM.glmaint.updatebatch()
		
		*  Detail Lines
		    SELECT appurchd
		    lcFilter = FILTER()
		    SCAN FOR cbatch == lcBatch
		        THISFORM.glmaint.cbatch     = lcBatch
		        THISFORM.glmaint.dGLDate    = appurchh.dpostdate
		        THISFORM.glmaint.cReference = 'Pur: ' + ALLTRIM(appurchh.cInvNum)
		        THISFORM.glmaint.cDesc      = appurchd.citemdesc
		        THISFORM.glmaint.cAcctNo    = appurchd.cAcctNo
		        THISFORM.glmaint.cId        = appurchh.cVendorId
		        THISFORM.glmaint.cUnitNo    = appurchd.cUnitNo
		        THISFORM.glmaint.cCatCode   = appurchd.cCatCode
		        THISFORM.glmaint.nAmount    = appurchd.nExtension
		        THISFORM.glmaint.updatebatch()
		
		        swselect('items')
		        LOCATE FOR cItemid = appurchd.cItemid
		        IF FOUND()  &&  Replace last cost with the value of the item on this line
		            REPLACE nQtyOnHand WITH nQtyOnHand + appurchd.nQuantity, nLastCost WITH appurchd.nPrice
		*  If this is a re-save, there will be an oldval that can be accessed, and subtracted off of the
		*  quantity on hand after the new quantity has been added.
		            IF NOT ISNULL(OLDVAL('nQuantity', 'appurchd'))
		                REPLACE nQtyOnHand WITH nQtyOnHand - OLDVAL('nquantity', 'appurchd')
		            ENDIF
		        ENDIF
		    ENDSCAN
		
		*
		*  Check to make sure the batch balances
		*
		    llReturn = THISFORM.glmaint.chkBalance()
		
		    IF llReturn
		*
		*  Add the entries to the INCSUSP or INCOME tables
		*
		        THISFORM.setchanged(.F.)
		        WAIT WINDOW NOWAIT 'Changes Saved....' TIMEOUT 2
		    ELSE
		        WAIT WIND 'The Batch Was Not In Balance...Unable to save bill.'
		    ENDIF
		
		    SELECT items
		    = TABLEUPDATE(.T.)
		CATCH TO loError
		    llReturn = .F.
		    DO errorlog WITH 'BeforeUpdate', loError.LINENO, 'Purchase Inventory Items', loError.ERRORNO, loError.MESSAGE, '', loError
		    MESSAGEBOX('Unable to save the items at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		          'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		RETURN llReturn
		
		
		
		
		
		
	ENDPROC

	PROCEDURE Cmdcommandbuttoncustom1.Click
		do form memoedit NAME memoedit LINKED with 'Vendor Bill Comments', 'appurchh.mnotes'
		RELEASE memoedit
		thisform.lChanged = .T.
		ON KEY LABEL F10 _screen.activeform.Save()
		ON KEY LABEL CTRL+A _screen.activeform.New()
		ON KEY LABEL CTRL+D _screen.activeform.Delete()
		ON KEY LABEL CTRL+L _screen.activeform.List()
		
	ENDPROC

	PROCEDURE cmdLookCOA.Click
		LOCAL lcList
		PRIV llOK
		
		llOK = .T.
		
		lcList = 'cAcctNo/Acctno,cAcctDesc/AcctDesc'
		
		DO FORM ..\custom\picklist WITH 'Coa', lcList, thisform.txtcacctno.value, 2
		
		IF llOK
		   thisform.txtcAcctNo.value   = coa.cacctno
		   thisform.txtcAcctDesc.value = coa.cAcctDesc
		   thisform.txtcAcctNo.refresh()
		   thisform.txtcAcctDesc.refresh()
		ENDIF   
		
		thisform.setnextcontrol(thisform.txtcAcctNo)
	ENDPROC

	PROCEDURE cmdLookDept.Click
		LOCAL lcList
		PRIV llOK
		
		llOK = .T.
		
		lcList = 'cdeptno\Dept. No.,cdeptdesc\Description'
		
		DO FORM ..\custom\picklist WITH 'gldept', lcList, thisform.txtcdeptno.value, 2, .f., .t.
		
		IF llOK
		   thisform.txtcDeptNo.value   = gldept.cdeptno
		   thisform.txtcDeptDesc.value = gldept.cDeptDesc
		   thisform.txtcDeptNo.refresh()
		   thisform.txtcDeptDesc.refresh()
		ENDIF   
		
		thisform.setnextcontrol(thisform.txtcDeptNo)
	ENDPROC

	PROCEDURE cmdLookItem.Click
		LOCAL lcList
		PRIV llOK
		
		llOK = .T.
		
		lcList = 'citemid,citemdesc'
		
		DO FORM ..\custom\picklist WITH 'Items', lcList, 'citemid', 2
		
		IF llOK
		   thisform.txtcItemId.value   = items.citemid
		   thisform.txtcItemDesc.value = items.citemdesc
		   thisform.txtcItemId.refresh()
		   thisform.txtcItemDesc.refresh()
		ENDIF   
		
		thisform.setnextcontrol(thisform.txtcItemId)
	ENDPROC

	PROCEDURE cmdVendor.Click
		LOCAL lcList
		PRIV llOK
		
		llOK = .T.
		
		lcList = 'cVendorID,cSortfield'
		
		DO FORM ..\CUSTOM\picklist WITH 'Vendor', lcList, thisform.txtcvendorid.value, 2
		
		IF llOK
		   THISFORM.cmdatamanager.REPLACE('appurchh','cVendorId', Vendor.cVendorID)
		   THISFORM.txtcVendName.VALUE = vendor.cvendname
		   THISFORM.txtcVendName.REFRESH()
		   THISFORM.txtcVendorId.REFRESH
		   THISFORM.setstate()
		ENDIF
		
		THISFORM.setnextcontrol(THISFORM.txtcVendorId)
		
		ON KEY LABEL F10 _screen.activeform.Save()
		ON KEY LABEL CTRL+A _screen.activeform.New()
		ON KEY LABEL CTRL+D _screen.activeform.Delete()
		ON KEY LABEL CTRL+L _screen.activeform.List()
		
	ENDPROC

	PROCEDURE lstItems.DblClick
		thisform.edititems()
	ENDPROC

	PROCEDURE txtcAcctDesc.When
		RETURN .F.
	ENDPROC

	PROCEDURE txtcAcctNo.GotFocus
		ON KEY LABEL F2 _screen.activeform.cmdLookCOA.Click()
		DODEFAULT()
	ENDPROC

	PROCEDURE txtcAcctNo.InteractiveChange
		IF DODEFAULT()
		   SELECT coa
		   LOCATE FOR cacctno == this.Value
		   IF FOUND()
		      thisform.txtCACCTDESC.set('value',coa.cacctdesc)
		   ELSE
		      thisform.txtCACCTDESC.set('value','')
		   ENDIF    
		ENDIF    
		thisform.setstate()
	ENDPROC

	PROCEDURE txtcAcctNo.LostFocus
		ON KEY LABEL F2 *
		DODEFAULT()
		
	ENDPROC

	PROCEDURE txtcAcctNo.Valid
		IF NOT EMPTY(THIS.VALUE) AND THIS.VALUE <> '*'
		   SELECT coa
		   SET ORDER TO acctno
		   IF SEEK(THIS.VALUE)
		      IF lTitle OR lTotalAcct
		         THISFORM.omessage.warning('%msgAcctDetail')
		         RETURN 0
		      ENDIF
		      THISFORM.lWellRequired = lacctunit
		      THISFORM.lDeptRequired = lacctdept
		   ENDIF
		ENDIF
		DODEFAULT()
		
	ENDPROC

	PROCEDURE txtcDeptDesc.When
		Return .F.
	ENDPROC

	PROCEDURE txtcDeptNo.GotFocus
		ON KEY LABEL F2 _screen.activeform.cmdLookDept.Click()
		DODEFAULT()
	ENDPROC

	PROCEDURE txtcDeptNo.InteractiveChange
		IF DODEFAULT()
		   SELECT gldept
		   LOCATE FOR cdeptno == this.Value
		   IF FOUND()
		      thisform.txtcdeptdesc.set('value',gldept.cdeptdesc)
		   ELSE
		      thisform.txtcdeptdesc.set('value','')
		   ENDIF    
		ENDIF   
		thisform.setstate()
	ENDPROC

	PROCEDURE txtcDeptNo.LostFocus
		ON KEY LABEL F2 *
		DODEFAULT()
		
	ENDPROC

	PROCEDURE txtcDeptNo.Valid
		DODEFAULT()
		IF EMPTY(THIS.VALUE)
		   IF NOT MDOWN()
		      IF THISFORM.lDeptRequired
		         THISFORM.omessage.DISPLAY('%msgDeptRequired')
		         RETURN 0
		      ENDIF
		   ENDIF
		ENDIF
		
		
	ENDPROC

	PROCEDURE txtCinvnum.LostFocus
		*
		*  Check for duplicate invoice numbers
		*
		IF THISFORM.cmdatamanager.isnew('Appurchh')
		   SELECT appurchh1
		   SET ORDER TO vendinv
		   IF SEEK(THISFORM.txtcVendorID.VALUE+THISFORM.txtcInvNum.VALUE)
		      IF NOT THISFORM.oMessage.CONFIRM('%msgDupInvoice')
		         thisform.SetNextControl(thisform.txtcInvNum)
		      ENDIF
		   ENDIF
		ENDIF
		SELECT appurchh
		DODEFAULT()
	ENDPROC

	PROCEDURE txtcItemId.GotFocus
		ON KEY LABEL F2 _SCREEN.ACTIVEFORM.cmdLookItem.CLICK()
		DODEFAULT()
		
	ENDPROC

	PROCEDURE txtcItemId.InteractiveChange
		IF DODEFAULT()
		   SELECT items
		   LOCATE FOR citemid == this.Value
		   IF FOUND()
		      thisform.txtcitemDesc.set('value',items.citemdesc)
		   ELSE
		      thisform.txtcitemDesc.set('value','')
		   ENDIF
		ENDIF       
		thisform.setstate()
	ENDPROC

	PROCEDURE txtcItemId.LostFocus
		ON KEY LABEL F2 *
		DODEFAULT()
		
	ENDPROC

	PROCEDURE txtcItemId.Valid
		IF NOT EMPTY(THIS.VALUE) AND THIS.VALUE <> '*'
		   SELECT glopt
		   GO top
		   IF EMPTY(THISFORM.txtcAcctno.VALUE) AND NOT EMPTY(cinventory)
		         THISFORM.txtcAcctno.SET('VALUE',cinventory)
		         SELECT coa
		         LOCATE FOR cAcctNo = glopt.cinventory
		         IF FOUND()
		            thisform.txtcAcctDesc.set('value',coa.cAcctDesc)
		         endif
		      ENDIF
		      SELECT items
		      IF thisform.txtnPrice.value = 0  &&  Only replace if the value is zero, otherwise, leave the current value in there
		         THISFORM.txtnPrice.SET('value',nCurCost)  && Changed to use current cost value, instead of price1 - BH 01/03/07
		   ENDIF
		ENDIF
		DODEFAULT()
		
	ENDPROC

	PROCEDURE txtCvendname.When
		DODEFAULT()
		RETURN .F.    
	ENDPROC

	PROCEDURE txtcVendorID.GotFocus
		ON KEY LABEL F2 _screen.activeform.cmdVendor.Click()
	ENDPROC

	PROCEDURE txtcVendorID.InteractiveChange
		IF DODEFAULT()
		   SELECT vendor
		   LOCATE FOR cvendorid == this.Value
		   IF FOUND()
		      thisform.txtcvendName.set('value',vendor.cvendname)
		   ELSE
		      thisform.txtcvendName.set('value','')   
		   ENDIF
		ENDIF       
	ENDPROC

	PROCEDURE txtcVendorID.LostFocus
		ON KEY LABEL F2 *
		
		DODEFAULT()
	ENDPROC

	PROCEDURE txtcVendorID.Valid
		SELECT vendor
		SET ORDER TO cvendorid
		IF SEEK(THIS.VALUE) AND THISFORM.isnew('Appurchh')
		   IF lHold  &&  Don't let them continue with a vendor marked to be on hold
		      THISFORM.oMessage.Warning('This vendor is on hold.  No bills can be entered for them.')
		      THIS.SET('value','')
		      RETURN 0
		   ENDIF
		   THISFORM.txtcVendName.SET('value',vendor.cvendname)
		   SELECT terms
		   LOCATE FOR cidterm = vendor.cidterm
		   IF FOUND() AND terms.cidterm <> thisform.cboTerms.value
		      THISFORM.cboTerms.VALUE = terms.cidTerm
		   ENDIF
		ENDIF
		
	ENDPROC

	PROCEDURE txtdDiscDate.Valid
		IF DODEFAULT()
		*++
		*>>If value has changed, call the FieldValid() event, and store value to datasource on success.
		*--
		  IF THISFORM.cmBindingManager.ValidNeeded(THIS)
		    * Convert to proper capitalization if desired
		    IF THIS.lPropercase AND VARTYPE(THIS.Value) $ 'CM'
		      IF ISNULL(THISFORM.oString)
		        THIS.Value = PROPER(THIS.Value)
		      ELSE
		        THIS.Value = THISFORM.oString.ProperCase(THIS.Value)
		      ENDIF
		    ENDIF
		
		    * Call binding manager for the remaining common control valid() processing.
		    RETURN THISFORM.cmBindingManager.Valid(THIS)
		  ENDIF
		  RETURN .T.
		ENDIF 
	ENDPROC

	PROCEDURE txtdDueDate.Valid
		IF DODEFAULT()
		*++
		*>>If value has changed, call the FieldValid() event, and store value to datasource on success.
		*--
		  IF THISFORM.cmBindingManager.ValidNeeded(THIS)
		    * Convert to proper capitalization if desired
		    IF THIS.lPropercase AND VARTYPE(THIS.Value) $ 'CM'
		      IF ISNULL(THISFORM.oString)
		        THIS.Value = PROPER(THIS.Value)
		      ELSE
		        THIS.Value = THISFORM.oString.ProperCase(THIS.Value)
		      ENDIF
		    ENDIF
		
		    * Call binding manager for the remaining common control valid() processing.
		    RETURN THISFORM.cmBindingManager.Valid(THIS)
		  ENDIF
		  RETURN .T.
		ENDIF 
	ENDPROC

	PROCEDURE txtdInvDate.LostFocus
		
		IF DODEFAULT()
		   thisform.valterms()
		ENDIF 
	ENDPROC

	PROCEDURE txtdInvDate.Valid
		IF DODEFAULT()
		*++
		*>>If value has changed, call the FieldValid() event, and store value to datasource on success.
		*--
		  IF THISFORM.cmBindingManager.ValidNeeded(THIS)
		    * Convert to proper capitalization if desired
		    IF THIS.lPropercase AND VARTYPE(THIS.Value) $ 'CM'
		      IF ISNULL(THISFORM.oString)
		        THIS.Value = PROPER(THIS.Value)
		      ELSE
		        THIS.Value = THISFORM.oString.ProperCase(THIS.Value)
		      ENDIF
		    ENDIF
		
		    * Call binding manager for the remaining common control valid() processing.
		    RETURN THISFORM.cmBindingManager.Valid(THIS)
		  ENDIF
		  RETURN .T.
		ENDIF 
	ENDPROC

	PROCEDURE txtdPostDate.LostFocus
		
		IF DODEFAULT()
		   thisform.valterms()
		ENDIF 
	ENDPROC

	PROCEDURE txtdPostDate.Valid
		IF DODEFAULT()
		*++
		*>>If value has changed, call the FieldValid() event, and store value to datasource on success.
		*--
		  IF THISFORM.cmBindingManager.ValidNeeded(THIS)
		    * Convert to proper capitalization if desired
		    IF THIS.lPropercase AND VARTYPE(THIS.Value) $ 'CM'
		      IF ISNULL(THISFORM.oString)
		        THIS.Value = PROPER(THIS.Value)
		      ELSE
		        THIS.Value = THISFORM.oString.ProperCase(THIS.Value)
		      ENDIF
		    ENDIF
		
		    * Call binding manager for the remaining common control valid() processing.
		    RETURN THISFORM.cmBindingManager.Valid(THIS)
		  ENDIF
		  RETURN .T.
		ENDIF 
	ENDPROC

	PROCEDURE txtnExtension.LostFocus
		*  Check to make sure the following keys were not pressed
		*  F1 			= 28
		*  Backspace 	= 127
		*  Shift-Tab	= 15
		*  Left Arrow	= 19
		*  Up Arrow		= 5
		IF LASTKEY() <> 28 AND ;
		   LASTKEY() <> 127 AND ;
		   LASTKEY() <> 15 AND ;
		   LASTKEY() <> 19 AND ;
		   LASTKEY() <> 5
		   thisform.adddetail2()
		ENDIF
		
	ENDPROC

	PROCEDURE txtNinvbal.When
		DODEFAULT()
		RETURN .F.
	ENDPROC

	PROCEDURE txtNinvtot.When
		DODEFAULT()
		RETURN .F.
	ENDPROC

	PROCEDURE txtnPrice.LostFocus
		thisform.calcext2()
		RETURN (DODEFAULT())
	ENDPROC

	PROCEDURE txtnQuantity.LostFocus
		thisform.calcext2()
		RETURN (DODEFAULT())
	ENDPROC

ENDDEFINE
