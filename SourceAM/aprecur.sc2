*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="aprecur.scx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="2" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Cursor4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor7" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor8" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor9" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor12" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor13" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor6" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor14" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor16" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor17" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor22" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor27" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor29" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor15" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor18" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Relation1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor10" UniqueID="" Timestamp="" />

	AutoOpenTables = .F.
	DataSource = .NULL.
	Height = 552
	InitialSelectedAlias = "appurech"
	Left = 59
	Name = "Dataenvironment"
	Top = 84
	Width = 929

	ADD OBJECT 'Cursor1' AS cursor WITH ;
		Alias = "appurech", ;
		CursorSource = "appurech", ;
		Database = ..\amdata\appdata.dbc, ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor1", ;
		Order = "cbatch", ;
		Top = 380, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor10' AS cursor WITH ;
		Alias = "afeopt", ;
		CursorSource = "afeopt", ;
		Database = ..\amdata\appdata.dbc, ;
		Height = 90, ;
		Left = 150, ;
		Name = "Cursor10", ;
		Top = 380, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor12' AS cursor WITH ;
		Alias = "wells", ;
		BufferModeOverride = 3, ;
		CursorSource = "wells", ;
		Database = ..\amdata\appdata.dbc, ;
		Height = 90, ;
		Left = 453, ;
		Name = "Cursor12", ;
		Order = "cwellid", ;
		Top = 6, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor13' AS cursor WITH ;
		Alias = "glopt", ;
		CursorSource = "glopt", ;
		Database = ..\amdata\appdata.dbc, ;
		Height = 90, ;
		Left = 257, ;
		Name = "Cursor13", ;
		Top = 6, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor14' AS cursor WITH ;
		Alias = "expcat", ;
		CursorSource = "expcat", ;
		Database = ..\amdata\appdata.dbc, ;
		Height = 90, ;
		Left = 457, ;
		Name = "Cursor14", ;
		Order = "ccatcode", ;
		Top = 122, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor15' AS cursor WITH ;
		Alias = "appurecd", ;
		BufferModeOverride = 5, ;
		CursorSource = "appurecd", ;
		Database = ..\amdata\appdata.dbc, ;
		Height = 90, ;
		Left = 290, ;
		Name = "Cursor15", ;
		Order = "cbatch", ;
		Top = 380, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor16' AS cursor WITH ;
		Alias = "expsusp", ;
		BufferModeOverride = 5, ;
		CursorSource = "expsusp", ;
		Database = ..\amdata\appdata.dbc, ;
		Height = 90, ;
		Left = 47, ;
		Name = "Cursor16", ;
		Top = 243, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor17' AS cursor WITH ;
		Alias = "custownvend", ;
		CursorSource = "custownvend", ;
		Database = ..\amdata\appdata.dbc, ;
		Height = 90, ;
		Left = 557, ;
		Name = "Cursor17", ;
		Top = 238, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor18' AS cursor WITH ;
		Alias = "appurecd1", ;
		CursorSource = "appurecd", ;
		Database = ..\amdata\appdata.dbc, ;
		Height = 90, ;
		Left = 140, ;
		Name = "Cursor18", ;
		Top = 132, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor2' AS cursor WITH ;
		Alias = "appurech1", ;
		CursorSource = "appurech", ;
		Database = ..\amdata\appdata.dbc, ;
		Height = 90, ;
		Left = 24, ;
		Name = "Cursor2", ;
		Top = 122, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor22' AS cursor WITH ;
		Alias = "options", ;
		CursorSource = "options", ;
		Database = ..\amdata\appdata.dbc, ;
		Height = 90, ;
		Left = 418, ;
		Name = "Cursor22", ;
		Top = 364, ;
		Width = 97
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor27' AS cursor WITH ;
		Alias = "wellinv", ;
		CursorSource = "wellinv", ;
		Database = ..\amdata\appdata.dbc, ;
		Height = 90, ;
		Left = 676, ;
		Name = "Cursor27", ;
		Top = 165, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor29' AS cursor WITH ;
		Alias = "sysctl", ;
		CursorSource = "sysctl", ;
		Database = ..\amdata\appdata.dbc, ;
		Height = 90, ;
		Left = 677, ;
		Name = "Cursor29", ;
		Top = 37, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor3' AS cursor WITH ;
		Alias = "allunits", ;
		CursorSource = "allunits", ;
		Database = ..\amdata\appdata.dbc, ;
		Height = 90, ;
		Left = 595, ;
		Name = "Cursor3", ;
		Top = 363, ;
		Width = 91
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor4' AS cursor WITH ;
		Alias = "terms", ;
		BufferModeOverride = 3, ;
		CursorSource = "terms", ;
		Database = ..\amdata\appdata.dbc, ;
		Height = 90, ;
		Left = 161, ;
		Name = "Cursor4", ;
		Top = 7, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor5' AS cursor WITH ;
		Alias = "vendor", ;
		BufferModeOverride = 1, ;
		CursorSource = "vendor", ;
		Database = ..\amdata\appdata.dbc, ;
		Height = 90, ;
		Left = 554, ;
		Name = "Cursor5", ;
		Order = "cvendorid", ;
		Top = 6, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor6' AS cursor WITH ;
		Alias = "assets", ;
		CursorSource = "assets", ;
		Database = ..\amdata\appdata.dbc, ;
		Height = 90, ;
		Left = 458, ;
		Name = "Cursor6", ;
		Top = 237, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor7' AS cursor WITH ;
		Alias = "coa", ;
		BufferModeOverride = 3, ;
		CursorSource = "coa", ;
		Database = ..\amdata\appdata.dbc, ;
		Height = 90, ;
		Left = 557, ;
		Name = "Cursor7", ;
		Order = "acctno", ;
		Top = 123, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor8' AS cursor WITH ;
		Alias = "gldept", ;
		BufferModeOverride = 3, ;
		CursorSource = "gldept", ;
		Database = ..\amdata\appdata.dbc, ;
		Height = 90, ;
		Left = 357, ;
		Name = "Cursor8", ;
		Order = "cdeptno", ;
		Top = 121, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor9' AS cursor WITH ;
		Alias = "apopt", ;
		CursorSource = "apopt", ;
		Database = ..\amdata\appdata.dbc, ;
		Height = 90, ;
		Left = 259, ;
		Name = "Cursor9", ;
		Top = 120, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Relation1' AS relation WITH ;
		ChildAlias = "appurecd", ;
		ChildOrder = "cbatch", ;
		Name = "Relation1", ;
		ParentAlias = "appurech", ;
		RelationalExpr = "cbatch"
		*< END OBJECT: BaseClass="relation" />

ENDDEFINE

DEFINE CLASS formaprecur AS frmdatamanagerformcustom OF "..\custom\cforms.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Shape1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblCvendorid" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtCvendname" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtCinvnum" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblCinvnum" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtCreference" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblCreference" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblCidterm" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtNinvtot" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblNinvtot" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboTerms" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdVendor" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcVendorID" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtCitemdesc" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdLookUnit" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcDeptNo" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtCdeptdesc" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcCatCode" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtnExtension" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcCatDesc" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblCitemdesc" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblNextension" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdLookDept" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcWellName" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcUnitNo" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdLookCat" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lstWellBills" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdLookCOA" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label6" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdLookOwner" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcOwnName" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcOwnerID" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcAcctDesc" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdDelete" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboClass" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcAcctNo" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label7" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom5" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: adddetail1
		*m: adddetail2
		*m: calcext		&& Calculates the detail extension total
		*m: calcext1
		*m: calcext2
		*m: calctot		&& Calculates the Invoice Totals
		*m: checkexp		&& Check to see if expenses entered for wells have been allocated and the production period closed.
		*m: checkhist		&& Checks to see if the production period is closed.
		*m: dmexpense		&& Disbursement Manager integration for expenses.
		*m: editdetail		&& Moves the detail line from the grid to the update area.
		*m: edititems
		*m: getprice		&& Gets the price for the item based upon the price code passed.
		*m: lookcoa
		*m: setstate		&& Resets the form state for non bound controls so that the save button still works.
		*m: valterms		&& Validate Terms and Set Due Date and Disc Date based on the Terms
		*m: zerotot
		*p: ldeptrequired
		*p: lf5
		*p: linvestment
		*p: lnoclearext
		*p: lsepclose		&& Separate close for revenue and JIBs
		*p: lvalidwell		&& A valid well id was entered in the well detail field.
		*p: lwellrequired
		*p: nextension
		*p: nprice
		*p: nquantity
		*p: odist		&& Distproc object
	*</DefinedPropArrayMethod>

	Caption = "Recurring Bills"
	cdisplayname = 
	clistexpression = appurech.cbatch
	cnavworkarea = appurech
	cworkarea = appurech
	DoCreate = .T.
	Height = 428
	HelpContextID = 459
	lconfirmsave = .T.
	lexpliciteditmode = .F.
	linvestment = .F.
	lnoclearext = .F.
	Name = "FormAprecur"
	Visible = .T.
	Width = 630
	cmdatamanager.Name = "cmdatamanager"
	cmdatamanager.TabIndex = 1
	cmdatamanager.ZOrderSet = 0
	cmlookupmanager.Name = "cmlookupmanager"
	Mwresize1.lblHighLight.Name = "lblHighLight"
	Mwresize1.lblShading.Name = "lblShading"
	Mwresize1.Name = "Mwresize1"

	ADD OBJECT 'cboClass' AS cbocomboboxcustom WITH ;
		ColumnCount = 2, ;
		Height = 20, ;
		Left = 137, ;
		Name = "cboClass", ;
		TabIndex = 21, ;
		Top = 111, ;
		Width = 48, ;
		ZOrderSet = 41
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="combobox" />

	ADD OBJECT 'cboTerms' AS cbocomboboxcustom WITH ;
		BoundColumn = 2, ;
		ControlSource = "appurech.cidterm", ;
		Height = 20, ;
		Left = 456, ;
		Margin = 2, ;
		Name = "cboTerms", ;
		TabIndex = 8, ;
		Top = 51, ;
		Width = 144, ;
		ZOrderSet = 12
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="combobox" />

	ADD OBJECT 'cmdDelete' AS cmdcommandbuttoncustom WITH ;
		Caption = "Delete Line", ;
		Height = 23, ;
		Left = 9, ;
		Name = "cmdDelete", ;
		TabIndex = 57, ;
		Top = 403, ;
		Width = 80, ;
		ZOrderSet = 29
		*< END OBJECT: ClassLib="..\..\dmpro_rv\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdLookCat' AS cmdcommandbuttoncustom WITH ;
		Caption = "Exp Code", ;
		FontName = "Arial", ;
		FontSize = 8, ;
		Height = 20, ;
		Left = 87, ;
		Name = "cmdLookCat", ;
		TabIndex = 13, ;
		TabStop = .F., ;
		Top = 88, ;
		Width = 54, ;
		ZOrderSet = 27
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdLookCOA' AS cmdcommandbuttoncustom WITH ;
		Caption = "Account", ;
		FontName = "Arial", ;
		FontSize = 8, ;
		Height = 20, ;
		Left = 366, ;
		Name = "cmdLookCOA", ;
		TabIndex = 14, ;
		TabStop = .F., ;
		Top = 88, ;
		Width = 72, ;
		ZOrderSet = 33
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdLookDept' AS cmdcommandbuttoncustom WITH ;
		Caption = "Dept", ;
		FontName = "Arial", ;
		FontSize = 8, ;
		Height = 20, ;
		Left = 447, ;
		Name = "cmdLookDept", ;
		TabIndex = 15, ;
		TabStop = .F., ;
		Top = 88, ;
		Width = 53, ;
		ZOrderSet = 24
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdLookOwner' AS cmdcommandbuttoncustom WITH ;
		Caption = "Allocate All To", ;
		Height = 20, ;
		Left = 221, ;
		Name = "cmdLookOwner", ;
		TabIndex = 30, ;
		TabStop = .F., ;
		Top = 158, ;
		ZOrderSet = 36
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdLookUnit' AS cmdcommandbuttoncustom WITH ;
		Caption = " Well/Lease", ;
		FontName = "Arial", ;
		FontSize = 8, ;
		Height = 20, ;
		Left = 6, ;
		Name = "cmdLookUnit", ;
		TabIndex = 12, ;
		TabStop = .F., ;
		Top = 88, ;
		Width = 77, ;
		ZOrderSet = 16
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdVendor' AS swlookupbutton WITH ;
		Left = 172, ;
		Name = "cmdVendor", ;
		TabIndex = 3, ;
		Top = 7, ;
		ZOrderSet = 13
		*< END OBJECT: ClassLib="..\custom\swcontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'Label1' AS label WITH ;
		AutoSize = .T., ;
		Caption = "Account ", ;
		FontBold = .T., ;
		Height = 17, ;
		Left = 175, ;
		Name = "Label1", ;
		TabIndex = 33, ;
		Top = 187, ;
		Width = 52, ;
		ZOrderSet = 29
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Label2' AS label WITH ;
		AutoSize = .T., ;
		Caption = "Description", ;
		FontBold = .T., ;
		Height = 17, ;
		Left = 241, ;
		Name = "Label2", ;
		TabIndex = 34, ;
		Top = 187, ;
		Width = 67, ;
		ZOrderSet = 30
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Label3' AS label WITH ;
		Caption = "Well ID", ;
		FontBold = .T., ;
		Height = 17, ;
		Left = 9, ;
		Name = "Label3", ;
		TabIndex = 35, ;
		Top = 187, ;
		Width = 63, ;
		ZOrderSet = 31
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Label4' AS label WITH ;
		AutoSize = .T., ;
		Caption = "Exp Code", ;
		FontBold = .T., ;
		Height = 17, ;
		Left = 83, ;
		Name = "Label4", ;
		TabIndex = 36, ;
		Top = 187, ;
		Width = 55, ;
		ZOrderSet = 32
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Label5' AS label WITH ;
		AutoSize = .T., ;
		Caption = "Dept No", ;
		FontBold = .T., ;
		Height = 17, ;
		Left = 444, ;
		Name = "Label5", ;
		TabIndex = 37, ;
		Top = 187, ;
		Width = 46, ;
		ZOrderSet = 34
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Label6' AS label WITH ;
		AutoSize = .T., ;
		Caption = "Amount", ;
		FontBold = .T., ;
		Height = 17, ;
		Left = 552, ;
		Name = "Label6", ;
		TabIndex = 38, ;
		Top = 187, ;
		Width = 46, ;
		ZOrderSet = 35
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Label7' AS label WITH ;
		AutoSize = .T., ;
		Caption = "Cls", ;
		FontBold = .T., ;
		Height = 17, ;
		Left = 152, ;
		Name = "Label7", ;
		TabIndex = 36, ;
		Top = 187, ;
		Width = 20, ;
		ZOrderSet = 43
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'lblCidterm' AS lblfieldlabelcustom WITH ;
		AutoSize = .T., ;
		Caption = "Terms", ;
		Height = 16, ;
		Left = 413, ;
		Name = "lblCidterm", ;
		TabIndex = 11, ;
		Top = 53, ;
		Width = 32, ;
		ZOrderSet = 9
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblCinvnum' AS lblfieldlabelcustom WITH ;
		AutoSize = .T., ;
		Caption = "Invoice No", ;
		Height = 16, ;
		Left = 22, ;
		Name = "lblCinvnum", ;
		TabIndex = 9, ;
		Top = 53, ;
		Width = 52, ;
		ZOrderSet = 6
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblCitemdesc' AS lblfieldlabelcustom WITH ;
		Caption = "Description", ;
		Height = 16, ;
		Left = 190, ;
		Name = "lblCitemdesc", ;
		TabIndex = 17, ;
		Top = 90, ;
		Width = 56, ;
		ZOrderSet = 22
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblCreference' AS lblfieldlabelcustom WITH ;
		AutoSize = .T., ;
		Caption = "Reference", ;
		Height = 16, ;
		Left = 183, ;
		Name = "lblCreference", ;
		TabIndex = 10, ;
		Top = 53, ;
		Width = 53, ;
		ZOrderSet = 8
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblCvendorid' AS lblfieldlabelcustom WITH ;
		AutoSize = .T., ;
		Caption = "Vendor ID", ;
		Height = 16, ;
		Left = 22, ;
		Name = "lblCvendorid", ;
		TabIndex = 5, ;
		Top = 9, ;
		Width = 50, ;
		ZOrderSet = 3
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom5' AS lbllabelcustom WITH ;
		Alignment = 2, ;
		Caption = "DOI Class", ;
		FontBold = .F., ;
		FontSize = 8, ;
		Height = 30, ;
		Left = 147, ;
		Name = "Lbllabelcustom5", ;
		TabIndex = 60, ;
		Top = 82, ;
		Width = 29, ;
		WordWrap = .T., ;
		ZOrderSet = 60
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblNextension' AS lblfieldlabelcustom WITH ;
		AutoSize = .T., ;
		Caption = "Amount", ;
		Height = 16, ;
		Left = 574, ;
		Name = "lblNextension", ;
		TabIndex = 18, ;
		Top = 90, ;
		Width = 39, ;
		ZOrderSet = 23
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblNinvtot' AS lblfieldlabelcustom WITH ;
		Caption = "Invoice Total", ;
		Height = 16, ;
		Left = 425, ;
		Name = "lblNinvtot", ;
		TabIndex = 41, ;
		Top = 407, ;
		Width = 62, ;
		ZOrderSet = 11
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lstWellBills' AS lstlistboxcustom WITH ;
		ColumnCount = 7, ;
		ColumnWidths = "70,70,15,65,200,70,110", ;
		ControlSource = "", ;
		FontName = "Courier New", ;
		Height = 200, ;
		Left = 5, ;
		Name = "lstWellBills", ;
		RowSource = "appurecd.cUnitNo, cCatCode, cExpClass, cAcctNo, cItemDesc, cDeptNo, nExtension", ;
		RowSourceType = 6, ;
		TabIndex = 39, ;
		Top = 204, ;
		Width = 619, ;
		ZOrderSet = 28
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="listbox" />

	ADD OBJECT 'Shape1' AS shape WITH ;
		BackColor = 255,255,128, ;
		Height = 104, ;
		Left = 3, ;
		Name = "Shape1", ;
		Top = 79, ;
		Width = 624, ;
		ZOrderSet = 1
		*< END OBJECT: BaseClass="shape" />

	ADD OBJECT 'txtcAcctDesc' AS txttextboxcustom WITH ;
		BackColor = 212,208,200, ;
		FontName = "Courier New", ;
		FontSize = 8, ;
		Height = 20, ;
		Left = 284, ;
		lreadonly = .F., ;
		Name = "txtcAcctDesc", ;
		TabIndex = 28, ;
		TabStop = .F., ;
		Top = 133, ;
		Width = 189, ;
		ZOrderSet = 39
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcAcctNo' AS txtquickfill WITH ;
		clistexpression = cacctno, ;
		clistworkarea = coa, ;
		FontName = "Courier New", ;
		FontSize = 8, ;
		Height = 20, ;
		InputMask = "999999", ;
		Left = 366, ;
		MaxLength = 6, ;
		Name = "txtcAcctNo", ;
		SelectOnEntry = .T., ;
		TabIndex = 23, ;
		Top = 111, ;
		Width = 72, ;
		ZOrderSet = 42
		*< END OBJECT: ClassLib="..\custom\cgadget.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcCatCode' AS txtquickfill WITH ;
		clistexpression = ccatcode, ;
		clistworkarea = expcat, ;
		Enabled = .T., ;
		FontName = "Courier New", ;
		FontSize = 8, ;
		Height = 20, ;
		Left = 95, ;
		MaxLength = 4, ;
		Name = "txtcCatCode", ;
		SelectOnEntry = .T., ;
		TabIndex = 20, ;
		Top = 111, ;
		Width = 36, ;
		ZOrderSet = 19
		*< END OBJECT: ClassLib="..\custom\cgadget.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcCatDesc' AS txttextboxcustom WITH ;
		BackColor = 212,208,200, ;
		ControlSource = " ", ;
		FontName = "Courier New", ;
		FontSize = 8, ;
		Height = 20, ;
		Left = 166, ;
		MaxLength = 30, ;
		Name = "txtcCatDesc", ;
		TabIndex = 27, ;
		Top = 133, ;
		Width = 111, ;
		ZOrderSet = 21
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtCdeptdesc' AS txttextboxcustom WITH ;
		BackColor = 212,208,200, ;
		ControlSource = " ", ;
		FontName = "Courier New", ;
		FontSize = 8, ;
		Height = 20, ;
		Left = 477, ;
		MaxLength = 30, ;
		Name = "txtCdeptdesc", ;
		TabIndex = 29, ;
		Top = 133, ;
		Width = 140, ;
		ZOrderSet = 18
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcDeptNo' AS txtquickfill WITH ;
		clistexpression = cdeptno, ;
		clistworkarea = gldept, ;
		FontName = "Courier New", ;
		FontSize = 8, ;
		Height = 20, ;
		InputMask = "XXXXXXXXXX", ;
		Left = 439, ;
		MaxLength = 10, ;
		Name = "txtcDeptNo", ;
		SelectOnEntry = .T., ;
		TabIndex = 24, ;
		Top = 111, ;
		Width = 68, ;
		ZOrderSet = 17
		*< END OBJECT: ClassLib="..\custom\cgadget.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtCinvnum' AS txttextboxcustom WITH ;
		ControlSource = "appurech.cinvnum", ;
		Height = 20, ;
		Left = 87, ;
		Margin = 1, ;
		MaxLength = 20, ;
		Name = "txtCinvnum", ;
		TabIndex = 6, ;
		Top = 51, ;
		Width = 79, ;
		ZOrderSet = 5
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtCitemdesc' AS txttextboxcustom WITH ;
		ControlSource = " ", ;
		FontName = "Courier New", ;
		FontSize = 8, ;
		Height = 20, ;
		Left = 190, ;
		MaxLength = 40, ;
		Name = "txtCitemdesc", ;
		SelectOnEntry = .T., ;
		TabIndex = 22, ;
		Top = 111, ;
		Width = 173, ;
		ZOrderSet = 15
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcOwnerID' AS txtquickfill WITH ;
		clistexpression = investor.cownerid, ;
		clistworkarea = investor, ;
		Height = 20, ;
		Left = 299, ;
		MaxLength = 10, ;
		Name = "txtcOwnerID", ;
		TabIndex = 31, ;
		Top = 158, ;
		Width = 76, ;
		ZOrderSet = 38
		*< END OBJECT: ClassLib="..\custom\cgadget.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcOwnName' AS txttextboxcustom WITH ;
		BackColor = 212,208,200, ;
		Height = 20, ;
		Left = 377, ;
		Name = "txtcOwnName", ;
		TabIndex = 32, ;
		Top = 158, ;
		Width = 240, ;
		ZOrderSet = 37
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtCreference' AS txttextboxcustom WITH ;
		ControlSource = "appurech.creference", ;
		Height = 20, ;
		Left = 243, ;
		Margin = 1, ;
		MaxLength = 30, ;
		Name = "txtCreference", ;
		TabIndex = 7, ;
		Top = 51, ;
		Width = 165, ;
		ZOrderSet = 7
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcUnitNo' AS txtquickfill WITH ;
		clistexpression = wells.cwellid, ;
		clistworkarea = wells, ;
		FontName = "Courier New", ;
		FontSize = 8, ;
		Format = "K!", ;
		Height = 20, ;
		lallowexceptions = .T., ;
		Left = 6, ;
		MaxLength = 10, ;
		Name = "txtcUnitNo", ;
		SelectOnEntry = .T., ;
		TabIndex = 19, ;
		Top = 111, ;
		Width = 77, ;
		ZOrderSet = 26
		*< END OBJECT: ClassLib="..\custom\cgadget.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtCvendname' AS txttextboxcustom WITH ;
		BackColor = 212,208,200, ;
		ControlSource = "", ;
		Height = 20, ;
		Left = 204, ;
		Margin = 1, ;
		MaxLength = 40, ;
		Name = "txtCvendname", ;
		ReadOnly = .F., ;
		TabIndex = 4, ;
		Top = 7, ;
		Width = 240, ;
		ZOrderSet = 4
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcVendorID' AS txtquickfill WITH ;
		clistexpression = vendor.cvendorid, ;
		clistworkarea = vendor, ;
		ControlSource = "appurech.cvendorid", ;
		Format = "K!", ;
		Height = 20, ;
		InputMask = "XXXXXXXXXX", ;
		Left = 87, ;
		MaxLength = 10, ;
		Name = "txtcVendorID", ;
		TabIndex = 2, ;
		Top = 7, ;
		Width = 79, ;
		ZOrderSet = 14
		*< END OBJECT: ClassLib="..\custom\cgadget.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcWellName' AS txttextboxcustom WITH ;
		BackColor = 212,208,200, ;
		ControlSource = " ", ;
		FontName = "Courier New", ;
		FontSize = 8, ;
		Height = 20, ;
		Left = 6, ;
		MaxLength = 30, ;
		Name = "txtcWellName", ;
		TabIndex = 26, ;
		Top = 133, ;
		Width = 156, ;
		ZOrderSet = 25
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtnExtension' AS txttextboxcustom WITH ;
		Height = 20, ;
		InputMask = "99999999.99", ;
		Left = 512, ;
		MaxLength = 0, ;
		Name = "txtnExtension", ;
		SelectOnEntry = .T., ;
		TabIndex = 25, ;
		Top = 111, ;
		Width = 104, ;
		ZOrderSet = 20
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtNinvtot' AS txttextboxcustom WITH ;
		ControlSource = "appurech.ninvtot", ;
		Height = 20, ;
		InputMask = "999,999,999.99", ;
		Left = 492, ;
		Margin = 1, ;
		Name = "txtNinvtot", ;
		TabIndex = 40, ;
		Top = 405, ;
		Width = 115, ;
		ZOrderSet = 10
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />
	
	PROCEDURE Activate
		IF DODEFAULT()
		   SELECT vendor
		   SET ORDER TO cvendorid
		   IF SEEK(appurech.cvendorid)
		      THISFORM.txtcVendName.VALUE = cvendname
		   ELSE
		      THISFORM.txtcVendName.VALUE = ' '
		   ENDIF
		   IF NOT THISFORM.lnoclearext
		      THISFORM.txtnextension.VALUE = 0
		   ENDIF
		   thisform.lnoclearext = .f.
		ENDIF
		
	ENDPROC

	PROCEDURE adddetail1
		*
		*  Adds the detail line to the appurecd table
		*
		
		LOCAL m.cItemDesc, m.cAcctNo, m.cUnitno, m.cDeptNo, m.nExtension, m.cidpurd, m.cCatCode, lnCount, lnRec
		
		THISFORM.lnoclearext = .T.  &&  If any confirmation boxes popup, this will prevent the activate from wiping out the extension amount
		
		WITH THIS
		
		   IF EMPTY(THISFORM.txtcAcctNo.VALUE)
		      THISFORM.omessage.warning('The account cannot be left blank')
		      THISFORM.setnextcontrol(.txtcAcctNo)
		      RETURN
		   ENDIF
		
		   m.cItemDesc   = .txtcItemDesc.VALUE
		   m.cAcctNo     = .txtcAcctNo.VALUE
		   m.cUnitno     = .txtcUnitNo.VALUE
		   m.cDeptNo     = .txtcDeptNo.VALUE
		   m.cCatCode    = .txtcCatCode.VALUE
		   m.nExtension  = .txtnExtension.VALUE
		   m.cOwnerID    = .txtcOwnerID.VALUE
		   m.cExpClass   = .cboClass.Value
		   
		   IF EMPTY(m.cExpClass) AND NOT EMPTY(m.cUnitNo)  &&  If the expclass is somehow blank, but there's a well, make it default to class 0
		      m.cExpClass = '0'
		   endif
		
		   IF NOT EMPTY(m.cOwnerID)
		      SELECT wellinv
		      LOCA FOR cWellID = m.cUnitno AND cOwnerID = m.cOwnerID
		      IF NOT FOUND('wellinv')
		         THISFORM.omessage.DISPLAY('You cannot allocate a well expense to an owner that has no interests in that well.')
		         THISFORM.setnextcontrol(THISFORM.txtcOwnerID)
		         RETURN
		      ENDIF
		   ENDIF
		   *
		   *  Get the group for the well
		   *
		   SELE wells
		   LOCATE FOR cWellID = m.cUnitno
		   IF FOUND()
		      m.cGroup = cGroup
		   ELSE
		      m.cGroup = '00'
		   ENDIF
		
		
		   IF NOT EMPTY(m.cUnitno) AND EMPTY(m.cCatCode)
		      THISFORM.omessage.warning('This expense has a well ID associated with it but no expense category. The ' + ;
		         'expense will not go through distribution/JIB processing.')
		   ENDIF
		
		   IF NOT EMPTY(m.cUnitno) AND NOT EMPTY(m.cCatCode) AND m.cUnitNo <> 'ALLOC '
		      *  Make sure the well has owners, and it's not being split using the ALLOC function
		      SELECT cWellID FROM wellinv WHERE cWellID = m.cUnitno INTO ARRAY temp
		      IF _TALLY = 0
		         THISFORM.omessage.warning('Unable to allocate to well: ' + m.cUnitno + ' This well has no owners. Expenses will be sent to allocation file.')
		         STORE '' TO m.cProdYear, m.cProdPeriod
		      ENDIF
		   ENDIF
		
		   IF EMPTY(m.cDeptNo) AND THISFORM.lDeptRequired
		      THISFORM.omessage.DISPLAY('A valid department is required when using this account no.')
		      THISFORM.setnextcontrol(THISFORM.txtcDeptNo)
		      RETURN
		   ENDIF
		   IF EMPTY(m.cUnitno) AND THISFORM.lWellRequired
		      THISFORM.omessage.DISPLAY('A valid well ID is required when using this account no.')
		      THISFORM.setnextcontrol(THISFORM.txtcUnitNo)
		      RETURN
		   ENDIF
		
		   m.nSaltBBL = 0
		
		   m.nDiscPct   = 0
		   m.nItemTax   = 0
		   m.nInterest  = 0
		   m.cTaxCode   = ' '
		   m.dExpDate   = {}
		   m.nDiscount  = 0
		   m.cExtDesc   = 0
		
		   
		   IF m.cUnitno = 'ALLOC'
		      *  This expense is to be allocated among more than 1 well.
		      SELECT wellsel
		      lnCount = RECC()
		      lnRec   = 0
		      IF lnCount > 0
		         *  Calculate how much should go to each well.
		         lnAmount = ROUND((m.nExtension / lnCount),2)
		         *  Calculate the amount left over in case the amount didn't divide evenly among the wells
		         lnWellEnd = m.nExtension - (lnAmount * lnCount)
		         WAIT WIND NOWAIT 'Allocating Expenses Evenly Among The Chosen Wells...'
		         SCAN
		            m.cUnitno = cWellID
		            m.nExtension = lnAmount
		            lnRec = lnRec + 1
		            IF lnRec = lnCount
		               *  Adjust the last well so the total adds to the amount entered.
		               m.nExtension = m.nExtension + lnWellEnd
		            ENDIF
		            .cmdatamanager.new('appurecd')
		            .cmdatamanager.REPLACE('appurecd', 'Citemdesc', m.cItemDesc)
		            .cmdatamanager.REPLACE('appurecd', 'Cacctno', m.cAcctNo)
		            .cmdatamanager.REPLACE('appurecd', 'Cunitno', m.cUnitno)
		            .cmdatamanager.REPLACE('appurecd', 'Ccatcode', m.cCatCode)
		            .cmdatamanager.REPLACE('appurecd', 'Cdeptno', m.cDeptNo)
		            .cmdatamanager.REPLACE('appurecd', 'Nextension', m.nExtension)
		            .cmdatamanager.REPLACE('appurecd', 'Nsaltbbl', m.nSaltBBL)
		            .cmdatamanager.REPLACE('appurecd', 'Cownerid', m.cOwnerID)
		            .cmdatamanager.REPLACE('appurecd', 'Litemdetail',.F.)
		            .cmdatamanager.REPLACE('appurecd', 'cExpClass',m.cExpClass)
		
		         ENDSCAN
		         WAIT CLEAR
		      ELSE
		         THISFORM.omessage.warning('There were no wells selected. You must select at least 1 well when ALLOC is used.')
		         THISFORM.setnextcontrol(.txtcUnitNo)
		         RETURN
		      ENDIF
		   ELSE
		      .cmdatamanager.new('Appurecd')
		      .cmdatamanager.REPLACE('appurecd', 'Citemdesc', m.cItemDesc)
		      .cmdatamanager.REPLACE('appurecd', 'Cacctno', m.cAcctNo)
		      .cmdatamanager.REPLACE('appurecd', 'Cunitno', m.cUnitno)
		      .cmdatamanager.REPLACE('appurecd', 'Ccatcode', m.cCatCode)
		      .cmdatamanager.REPLACE('appurecd', 'Cdeptno', m.cDeptNo)
		      .cmdatamanager.REPLACE('appurecd', 'Nextension', m.nExtension)
		      .cmdatamanager.REPLACE('appurecd', 'Nsaltbbl', m.nSaltBBL)
		      .cmdatamanager.REPLACE('appurecd', 'Cownerid', m.cOwnerID)
		      .cmdatamanager.REPLACE('appurecd', 'Litemdetail',.F.)
		      .cmdatamanager.REPLACE('appurecd', 'cExpClass',m.cExpClass)
		   ENDIF
		   WITH THISFORM
		      .txtcItemDesc.VALUE = ' '
		      .txtcAcctNo.VALUE = ' '
		      .txtcUnitNo.VALUE = ' '
		      .txtcDeptNo.VALUE = ' '
		      .txtcAcctDesc.VALUE = ' '
		      .txtcWellName.VALUE = ' '
		      .txtcCatDesc.VALUE = ' '
		      .txtcDeptDesc.VALUE = ' '
		      .txtcCatCode.VALUE = ' '
		      .txtcOwnerID.VALUE = ' '
		      .txtcownname.VALUE = ' '
		      .txtnExtension.SetValue(0)
		      .lstWellBills.REQUERY()
		      .lstWellBills.LISTITEMID = .lstWellBills.LISTCOUNT
		      .lstWellBills.REFRESH()
		      .txtcacctno.set('enabled',.t.)
		      .txtcUnitNo.SETFOCUS()
		   ENDWITH
		   .CalcTot()
		   .lValidWell = .F.
		   .lWellRequired = .F.
		   .lDeptRequired = .F.
		   .setstate()
		   .REFRESH()
		ENDWITH
		
	ENDPROC

	PROCEDURE adddetail2
	ENDPROC

	PROCEDURE calcext		&& Calculates the detail extension total
	ENDPROC

	PROCEDURE calcext1
	ENDPROC

	PROCEDURE calcext2
	ENDPROC

	PROCEDURE calctot		&& Calculates the Invoice Totals
		*
		*  Calculates the invoice totals
		*
		LOCAL lnSelect, lnRecno, lnTotal, lcBatch, lnSubTotal, lnBalance, lcFilter
		LOCAL lnCount
		
		lcBatch = appurech.cbatch
		
		lnSelect = SELECT()
		SELECT appurecd
		lnRecno  = RECNO()
		lcFilter = FILTER()
		SET FILTER TO
		
		lnSubTotal = 0
		SELECT appurecd
		SCAN
		   lnSubTotal = lnSubTotal + nExtension
		ENDSCAN   
		
		*SET FILTER TO &lcFilter
		
		IF lnRecNo <= RECC()
		   GOTO lnRecno
		ENDIF   
		
		lnBalance = lnSubTotal - appurech.npayments
		
		IF appurech.nInvTot <> lnSubTotal
		   THIS.cmdatamanager.REPLACE('appurech', 'nInvTot', lnSubTotal)
		   THIS.cmdatamanager.REPLACE('appurech', 'nSubTotal', lnSubTotal)
		   THISFORM.txtnInvTot.REFRESH()
		ENDIF   
		
		
		SELECT (lnSelect)
		
		UNLOCK
	ENDPROC

	PROCEDURE checkexp		&& Check to see if expenses entered for wells have been allocated and the production period closed.
		LPARA tcBatch
		
		*  Check to see if expenses entered for wells were allocated
		*  If so, and the period isn't closed, delete it.  Otherwise
		*  let the user know he can't delete this entry.
		SELECT expense
		SCAN FOR cBatch = tcBatch
		   m.cYear   = cYear
		   m.cPeriod = cPeriod
		   m.cWellID = cWellID
		   SELECT wells
		   SET ORDER TO cWellID
		   SEEK(m.cWellID)
		   m.cGroup = cGroup
		   SELECT sysctl
		   SET ORDER TO yrprdgrp
		   IF THISFORM.lSepClose
		      IF SEEK(m.cYear+m.cPeriod+m.cGroup+'YJ')
		         RETURN .T.
		      ENDIF
		   ELSE
		      IF SEEK(m.cYear+m.cPeriod+m.cGroup+'YR')
		         RETURN .T.
		      ENDIF
		   ENDIF
		ENDSCAN
		
		RETURN .F.
		
	ENDPROC

	PROCEDURE checkhist		&& Checks to see if the production period is closed.
		Lpara tcYear, tcPeriod, tcGroup, tcWellID
		Local llHist, llSepClose, lcDeleted
		*
		*  Checks to see if the given period is closed
		*  Returns .T. if the period is closed
		*
		
		lcDeleted = SET('DELETED')
		Set DELETED ON
		
		llHist = .F.
		
		*
		*  Check to see if there are any JIB owners in the well. We need to check to see if the JIB period
		*  is closed if there are JIB owners. Otherwise, we check the revenue period 'cause it means we're
		*  netting expenses from revenue.
		*
		Sele wellinv
		Locate FOR cWellID = tcWellID AND lJIB = .T.
		If FOUND()
			llJIB = .T.
		Else
			llJIB = .F.
		Endif
		
		If llJIB
			If tcGroup = '**'
				Select sysctl
				Locate FOR cyear+cperiod = tcYear+tcPeriod AND lDisbMan AND cTypeClose = 'J'
				If FOUND()
					llHist = .T.
				Endif
			Else
				Select sysctl
				Set ORDER TO yrprdgrp
				If SEEK(tcYear+tcPeriod+tcGroup+'YJ')
					llHist = .T.
				Endif
			Endif
		Else
			If tcGroup = '**'
				Select sysctl
				Locate FOR cyear+cperiod = tcYear+tcPeriod AND lDisbMan AND cTypeClose = 'R'
				If FOUND()
					llHist = .T.
				Endif
			Else
				Select sysctl
				Set ORDER TO yrprdgrp
				If SEEK(tcYear+tcPeriod+tcGroup+'YR')
					llHist = .T.
				Endif
			Endif
		
		Endif
		Set DELETED &lcDeleted
		
		Return (llHist)
		
	ENDPROC

	PROCEDURE Destroy
		* Cleanup by releasing the distproc object
		IF TYPE('thisform.oDist') = 'O'
		   oDist = THISFORM.oDist
		   RELEASE oDist
		   THISFORM.oDist = .NULL.
		ENDIF
		ON KEY LABEL F5 *
		ON KEY LABEL F2 *
		ON KEY LABEL TAB 
		ON KEY LABEL ENTER 
		
		DODEFAULT()
		
	ENDPROC

	PROCEDURE dmexpense		&& Disbursement Manager integration for expenses.
		LOCAL lcBatch, lcYear, lcPeriod, m.cOwnerID
		
		*
		*  Adds the expense entries to the disbursement manager EXPSUSP or
		*  EXPENSE tables depending on whether the production year and
		*  period are specified.
		*
		
		*
		*  Call distproc to create the (invtmp) and (wellwork) cursors
		*
		SELECT wells
		SET ORDER TO cWellID
		GO TOP
		lcWellID1 = cWellID
		GO BOTT
		lcWellID2 = cWellID
		
		*  Check to see if expenses entered for wells were allocated
		*  If so, and the period isn't closed, delete it.  Otherwise
		*  let the user know he can't delete this entry.
		lcBatch = appurech.cBatch
		
		IF NOT checkexp(lcBatch)
		   RETURN .F.
		ENDIF
		
		THISFORM.oDist = CREATEOBJECT('distproc',lcWellID1, lcWellID2, ;
		   '01', '1980', '00', 'W', DATE(), .T.)
		
		SELECT expsusp
		SCAN FOR cBatch == lcBatch
		   DELETE NEXT 1
		ENDSCAN
		
		SELECT expense
		SCAN FOR cBatch == lcBatch
		   m.cidexph = cidexph
		   DELE NEXT 1
		   SELECT expense1
		   llFound = .F.
		   SCAN FOR cidexph == m.cidexph
		      llFound = .T.
		      EXIT
		   ENDSCAN
		ENDSCAN
		
		m.cvendorid  = appurech.cvendorid
		m.dExpDate   = appurech.dinvdate
		lcYear       = THISFORM.glmaint.getperiod(m.dExpDate,.T.)
		lcPeriod     = THISFORM.glmaint.getperiod(m.dExpDate,.F.)
		m.crefid     = appurech.cinvnum
		m.cPayee     = THISFORM.txtcVendName.VALUE
		m.lAPTran    = .T.
		m.cBatch     = lcBatch
		m.dPostDate  = {}
		m.cMemo      = ''
		m.cPaidByCk  = ''
		m.cPrdPaid   = ''
		m.lFixed     = .F.
		m.lClosed    = .F.
		m.lAllocated = .F.
		
		SELECT appurecd
		SCAN FOR cBatch == lcBatch AND NOT lItemDetail AND NOT EMPTY(cUnitNo) AND NOT EMPTY(cCatCode)
		   SCATTER MEMVAR
		
		*
		*  Don't process any non-well expenses
		*
		   SELECT wells
		   SET ORDER TO cWellID
		   IF NOT SEEK(m.cUnitNo)
		      LOOP
		   ENDIF
		
		*
		*  Don't process any expenses that aren't tied
		*  to a valid expense category or AFE category code
		*
		   SELECT expcat
		   SET ORDER TO cCatCode
		   IF NOT SEEK(m.cCatCode)
		      LOOP
		   ELSE
		      IF lAFEType
		         LOOP
		      ENDIF
		      m.cCateg = cCateg
		      m.cExpClass = cExpClass
		   ENDIF
		
		   m.cWellID    = m.cUnitNo
		   m.nSaltWater = m.nSaltBBL
		
		   m.nAmount = swNetExp(m.nExtension, m.cWellID, .F.,m.cExpClass, 'B')
		   
		   IF EMPTY(m.cProdYear) OR EMPTY(m.cProdPeriod)
		      m.cYear   = lcYear
		      m.cPeriod = lcPeriod
		   ELSE
		      m.cYear   = m.cProdYear
		      m.cPeriod = m.cProdPeriod
		   ENDIF
		
		   IF NOT EMPTY(m.cOwnerID)
		      m.lOneMan = .T.
		   ELSE
		      m.lOneMan = .F.
		   ENDIF
		
		   IF NOT EMPTY(m.cProdYear) AND NOT EMPTY(m.cProdPeriod)
		      m.cidexpe = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Expense')
		      SET DELETED OFF
		      SELECT expense1
		      SET ORDER TO cidexpe
		      DO WHILE SEEK(m.cidexpe)
		         m.cidexpe = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Expense')
		      ENDDO
		      SET DELETED ON
		      SELECT expense
		      INSERT INTO expense FROM MEMVAR
		   ELSE
		      m.cidexps    = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Expense')
		      SET DELETED OFF
		      SELECT expsusp
		      SET ORDER TO cidexps
		      DO WHILE SEEK(m.cidexps)
		         m.cidexps    = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Expense')
		      ENDDO
		      SET DELETED ON
		      INSERT INTO expsusp FROM MEMVAR
		   ENDIF
		ENDSCAN
		
		RETURN .T.
		
	ENDPROC

	PROCEDURE editdetail		&& Moves the detail line from the grid to the update area.
		
		WITH THISFORM
		   
		   .txtcAcctNo.VALUE     = appurecd.cacctno
		   .txtcItemDesc.VALUE   = appurecd.citemdesc
		   .txtcUnitNo.VALUE     = appurecd.cUnitNo
		   .txtcCatCode.VALUE    = appurecd.ccatcode
		   .txtcDeptNo.VALUE     = appurecd.cDeptNo
		   .txtcownerid.value    = appurecd.cOwnerID
		   .txtnExtension.setvalue(appurecd.nExtension)
		   .cboClass.value       = appurecd.cExpClass
		
		   IF NOT EMPTY(.txtccatcode.value)
		      thisform.txtcAcctNo.lEnabled = .f.
		   ELSE
		      thisform.txtcAcctNo.lEnabled = .t.
		   ENDIF 
		   .txtcacctno.REFRESH()
		    
		* Fill in the account description
		   SELECT coa
		   SET ORDER TO acctno
		   IF SEEK(appurecd.cacctno)
		      .txtcAcctDesc.VALUE = coa.cacctdesc
		   ENDIF
		
		*  Fill in the well name
		   SELECT wells
		   SET ORDER TO cwellid
		   IF SEEK(appurecd.cunitno)
		      .txtcWellName.VALUE = wells.cwellname
		   ENDIF
		
		*  Fill in the category name
		   SELECT expcat
		   SET ORDER TO ccatcode
		   IF SEEK(appurecd.ccatcode)
		      .txtcCatDesc.VALUE = expcat.ccateg
		      .lValidWell = .t.
		      IF EMPTY(.cboClass.value)  &&  No class on it, so fill it in
		         .cboClass.set('value',expcat.cExpClass)
		      endif
		   ENDIF
		
		*  Fill in the Department Name
		   SELECT gldept
		   SET ORDER TO cDeptNo
		   IF SEEK(appurecd.cDeptNo)
		      .txtcDeptDesc.VALUE = gldept.cDeptDesc
		   ENDIF
		   
		*  Fill in the Owner Name
		   IF NOT EMPTY(appurecd.cownerid)
		      SELECT investor
		      LOCATE FOR cOwnerID = appurecd.cownerid
		      IF FOUND()
		         .txtcownname.value = investor.cownname
		      ENDIF
		   ENDIF   
		
		   .txtcUnitNo.SETFOCUS()
		   SELECT appurecd
		   THISFORM.cmdatamanager.deleterecord('appurecd')
		   thisform.lstwellbills.requery()
		   THISFORM.calctot()
		   THISFORM.REFRESH()
		ENDWITH
		
		SELECT appurech
		
		*
		*  Let the form know something changed
		*
		THISFORM.setstate()
		
	ENDPROC

	PROCEDURE edititems
	ENDPROC

	PROCEDURE getprice		&& Gets the price for the item based upon the price code passed.
		LPARAMETERS tcPriceCode
	ENDPROC

	PROCEDURE KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		
		IF nKeyCode = 3 OR nKeyCode = 18
		      thisform.lstWellBills.SetFocus
		ENDIF 
		
		DODEFAULT(nKeyCode, nShiftAltCtrl)
	ENDPROC

	PROCEDURE list
		LPARAMETERS cworkarea
		
		LOCAL lcList
		PRIV llOK
		
		llOK = .T.
		
		IF THIS.FlushControlBuffer() AND THIS.beforenav('Appurech')
		
		   SELECT appurech.cvendorid, ;
		      appurech.cInvNum, ;
		      appurech.ninvtot, ;
		      vendor.csortfield AS cvendname, ;
		      appurech.cbatch ;
		      FROM appurech, vendor ;
		      WHERE appurech.cvendorid = vendor.cvendorid ;
		      INTO CURSOR tempap1 ;
		      ORDER BY appurech.cvendorid
		
		   IF _TALLY > 0
		      IF USED('tempap')
		         USE IN tempap
		      ENDIF
		      USE DBF('tempap1') AGAIN IN 0 ALIAS tempap EXCL
		      SET SAFETY OFF
		      SELECT tempap
		      INDEX ON cvendorid  TAG cvendorid
		      INDEX ON cInvNum    TAG cInvNum
		      INDEX ON cvendname  TAG cvendname
		      INDEX ON ninvtot TAG ninvtot
		
		      lcList = 'cinvnum\Invoice Number,cvendorid\Vendor ID,cvendname\Vendor Name,ninvtot\Invoice Total'
		
		      DO FORM ..\CUSTOM\picklist WITH 'tempap', lcList, 'cbatch', 4, .T., .T.
		
		      IF llOK
		         SELECT appurech
		         SET ORDER TO cbatch
		         SEEK(tempap.cbatch)
		         THISFORM.cmdatamanager.setrecordposition('appurech')
		         THISFORM.REFRESH()
		      ENDIF
		   ENDIF
		ELSE
		   RETURN
		ENDIF
		
	ENDPROC

	PROCEDURE lookcoa
		LOCAL lcList
		PRIV llOK
		
		llOK = .F.
		lcList = 'cacctno/acctno,cacctdesc/acctdesc'
		
		DO FORM ..\custom\picklist WITH 'Coa', lcList, 'cacctno', 2
		
		IF llOK
		   thisform.grdPurchdet.column1.txtcAcctNo.value = coa.cacctno
		   thisform.cmdatamanager.replace('appurecd', 'cacctno', coa.cacctno)
		   thisform.grdPurchdet.column1.txtcAcctNo.refresh()
		ENDIF   
		
		thisform.grdPurchdet.column1.txtcAcctNo.SetFocus()
	ENDPROC

	PROCEDURE setstate		&& Resets the form state for non bound controls so that the save button still works.
		this.lChanged = .T.
		m.goStateManager.RefreshAll('Form Edit')
	ENDPROC

	PROCEDURE valterms		&& Validate Terms and Set Due Date and Disc Date based on the Terms
		*
		*  Validates the terms code in the appurech record and
		*  calculates the due date and disc date based upon
		*  the terms settings and the appurech.dinvdate
		*
		LOCAL lcidTerm, lnNetDueIn, lnDiscIn, ldInvDate
		
		ldInvDate = appurech.dinvdate
		*
		*  If the invoice date is empty, don't try to calculate
		*  the due date or discount date
		*
		IF EMPTY(ldInvDate)
		   RETURN
		ENDIF
		*
		*  Get the terms table primary key from the purchase header
		*  record.  
		lcidTerm  = appurech.cidterm
		
		*
		*  Lookup the terms code in the terms table to get the
		*  # of days the invoice is due in and the # of days
		*  set for discounts
		*
		SELECT terms
		SET ORDER TO cidTerm
		IF SEEK(lcidTerm)
		   lnNetDueIn = nNetDueIn
		   lnDiscIn   = nDiscIn
		   lnDiscPct  = nDiscPct
		ELSE
		   *  Terms have not been selected for this purchase so assume
		   *  COD.
		   STORE 0 TO lnNetDueIn, lnDiscIn, lnDiscPct
		ENDIF
		
		*
		*  Calculate and set the values of the due date and
		*  discount date fields
		*
		thisform.txtdDueDate.setvalue(ldInvDate + lnNetDueIn)
		thisform.txtdDiscDate.setvalue(ldInvDate + lnDiscIn)
	ENDPROC

	PROCEDURE zerotot
		LOCAL lcDate
		
		IF THISFORM.oMessage.CONFIRM('Are you sure that you want to create a payment record for this bill?')
		   DO FORM SOURCE\csgetdate WITH 'AP' TO lcDate
		   WAIT WIND NOWAIT 'Creating Payment Record...'
		   m.cBatch = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Batch')
		
		   SELECT appmthdr  &&  Create Payment Header Record
		   SET ORDER TO cBatch
		   DO WHILE SEEK(m.cBatch)
		      m.cBatch = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Batch')
		   ENDDO
		   m.dbilldate = lcDate
		   m.cacctno = apopt.capcash
		   m.nTotdisc = 0
		   SELECT appmtdet
		   SUM(namtpaid) FOR cBillToken == appurech.cBatch TO m.nTotPmts
		   SELECT appmthdr
		   m.nTotPaid = appurech.ninvtot - m.nTotPmts
		   m.nTotDue = m.nTotPaid
		   m.dPmtDate = lcDate
		   IF m.nTotPaid <> 0
		      INSERT INTO appmthdr FROM MEMVAR
		   ENDIF
		
		   m.cidAppmd = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.AP Payment Detail')
		   SELECT appmtdet  &&  Create Payment Detail Record
		   SET ORDER TO cidarpmd
		   DO WHILE SEEK(m.cidAppmd)
		      m.cidAppmd = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.AP Payment Detail')
		   ENDDO
		   m.cinvnum = appurech.cinvnum
		   m.cvendorid = appurech.cvendorid
		   m.dduedate = appurech.dduedate
		   m.nInvBal = m.nTotDue
		   m.dDiscDate = appurech.dDiscDate
		   m.nDiscTot = 0
		   m.namtpaid = m.nTotPaid
		   m.cBillToken = appurech.cBatch
		   m.nDiscTaken = 0
		   IF m.nTotPaid <> 0
		      INSERT INTO appmtdet FROM MEMVAR
		   ENDIF
		   SELE appurech
		   REPLACE appurech.nInvBal WITH 0, appurech.npayments WITH appurech.ninvtot
		   SELE appurech
		   =tableupdate(.t.)
		   SELE appmthdr
		   =tableupdate(.t.)
		   SELE appmtdet
		   =tableupdate(.t.)
		   THISFORM.txtnInvBal.REFRESH()
		   THISFORM.setstate()
		   THISFORM.lF5 = .T.
		ENDIF
		
	ENDPROC

	PROCEDURE cboClass.Init
		IF DODEFAULT()
		   this.addlistitem('0',1,1)
		   this.addlistitem('Working Interest',1,2)
		   this.addlistitem('1',2,1)
		   this.addlistitem('Class 1',2,2)
		   this.addlistitem('2',3,1)
		   this.addlistitem('Class 2',3,2)
		   this.addlistitem('3',4,1)
		   this.addlistitem('Class 3',4,2)
		   this.addlistitem('4',5,1)
		   this.addlistitem('Class 4',5,2)
		   this.addlistitem('5',6,1)
		   this.addlistitem('Class 5',6,2)
		   this.addlistitem('A',7,1)
		   this.addlistitem('After Casing Point',7,2)
		   this.addlistitem('B',8,1)
		   this.addlistitem('Before Casing Point',8,2)
		ENDIF   
	ENDPROC

	PROCEDURE cboClass.When
		RETURN thisform.lValidWell
	ENDPROC

	PROCEDURE cboTerms.Init
		LOCAL lnCount
		*
		*  Builds the data displayed in the combo list box
		*
		
		SELECT cTermDesc, cidTerm FROM terms INTO ARRAY laTerms ORDER BY cTermDesc
		lnCount = _tally
		
		This.addlistitem('NONE',1,1)
		This.addlistitem('',1,2)
		
		IF lnCount > 0
		   FOR lnX = 1 TO ALEN(laTerms,1)
		      this.addlistitem(laTerms[lnX,1],lnX+1,1)
		      this.addlistitem(laTerms[lnX,2],lnX+1,2)
		   ENDFOR   
		ENDIF   
		
		DODEFAULT()
	ENDPROC

	PROCEDURE cmdatamanager.afterchange
		LPARAMETERS cworkarea,cfield
		
		DO CASE
			   CASE UPPER(m.cField) + ',' $ 'NQUANTITY,NPRICE,'
			      m.nExtension = appurecd.nQuantity * appurecd.nPrice
			      RETURN this.Replace('appurecd', 'nExtension', m.nExtension )
		      
		ENDCASE
		RETURN .T.      
	ENDPROC

	PROCEDURE cmdatamanager.afterdelete
		LPARAMETERS cworkarea
		
		DO CASE
		   CASE m.cWorkarea = 'Appurech'
		      
		   CASE m.cWorkarea = 'Appurecd'
		      * Recalculate the invoice totals
		      thisform.calctot()
		ENDCASE
		
		DODEFAULT(cworkarea)
	ENDPROC

	PROCEDURE cmdatamanager.afternav
		LPARAMETERS cworkarea
		LOCAL lcBatch
		
		IF upper(m.cworkarea) = 'APPURECH'
		   
		   SELECT appurech
		   lcBatch = cBatch
		   
		   SELECT vendor
		   SET ORDER TO cvendorid
		   IF SEEK(appurech.cvendorid)
		      THISFORM.txtcVendName.VALUE = cvendname
		   ELSE
		      THISFORM.txtcVendName.VALUE = ' '
		   ENDIF
		   THISFORM.calctot()
		   thisform.lF5 = .f.
		
		   THISFORM.lstWellBills.Requery()
		   THISFORM.lstWellBills.Refresh()
		   
		   THISFORM.setnextcontrol(THISFORM.txtcvendorid)
		ENDIF
		
		RETURN(DODEFAULT(cworkarea))
		
	ENDPROC

	PROCEDURE cmdatamanager.afternew
		LPARAMETERS cworkarea
		LOCAL llFoundTerm, lcidTerm, lcBatch, lcidpurd
		m.nextension = 0
		
		DO CASE
		   CASE m.cworkarea = 'Appurech'    && Purchases Header
		      * Look for duplicates so no uniqueness errors occur
		      lcBatch = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Batch')
		      SET DELETED OFF
		      SELECT appurech1
		      SET ORDER TO cBatch
		      DO WHILE SEEK(lcBatch)
		         lcBatch = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Batch')
		      ENDDO
		      SET DELETED ON
		      SELECT appurech
		      REPLACE cBatch  WITH lcBatch
		      *
		      *  Look for a default terms record so that we can set the terms
		      *  to that default
		      llFoundTerm = .F.
		      SELECT terms
		      SCAN FOR lDefTerm = .T.
		         lcidTerm = cidTerm
		         llFoundTerm = .T.
		         EXIT
		      ENDSCAN
		      SELECT appurech
		      IF llFoundTerm
		         REPLACE cidTerm WITH lcidTerm
		      ENDIF
		
		      WITH THISFORM
		         .txtcItemDesc.VALUE = ' '
		         .txtcAcctNo.VALUE = ' '
		         .txtcUnitNo.VALUE = ' '
		         .txtcDeptNo.VALUE = ' '
		         .txtcAcctDesc.VALUE = ' '
		         .txtcWellName.VALUE = ' '
		         .txtcCatDesc.VALUE = ' '
		         .txtcDeptDesc.VALUE = ' '
		         .txtcCatCode.VALUE = ' '
		         .txtnExtension.SetValue(0)
		      ENDWITH
		       
		      SELECT appurecd
		      THISFORM.txtcVendorId.SETFOCUS()
		
		   CASE m.cworkarea = 'Appurecd'   &&  Purchase Detail
		      * Look for duplicates so no uniqueness errors occur
		      lcidpurd = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Purchase Detail')
		      SET DELETED OFF
		      SELECT appurecd1
		      SET ORDER TO cidPurd
		      DO WHILE SEEK(lcidpurd)
		         lcidpurd = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Purchase Detail')
		      ENDDO
		      SET DELETED ON
		      SELECT appurecd
		      REPLACE appurecd.cidPurd WITH lcidpurd
		ENDCASE
		
		THISFORM.txtnExtension.SET('value',0)
		
	ENDPROC

	PROCEDURE cmdDelete.Click
		IF THISFORM.oMessage.CONFIRM('Are you sure you want to delete this detail line?')
		   THISFORM.cmdatamanager.DELETE('Appurecd')
		   THISFORM.lstWellBills.REQUERY()
		   thisform.lstWellBills.LISTITEMID = thisform.lstWellBills.LISTCOUNT
		   thisform.lstWellBills.REFRESH()
		   thisform.setstate()
		ENDIF
		
		DODEFAULT()
		
	ENDPROC

	PROCEDURE cmdLookCat.Click
		LOCAL lcList
		PRIV llOK
		
		THISFORM.lnoclearext = .T.  &&  This will prevent the activate from wiping out the extension amount
		
		IF THISFORM.flushcontrolbuffer()
		    swselect('wells')
		    IF NOT SEEK(thisform.txtcUnitNo.Value) AND thisform.txtcUnitNo.Value <> 'ALLOC '
		        RETURN .F.
		    ENDIF
		
		    llOK = .T.
		
		    SELECT cCatCode,cCateg,cExpClass,IIF(lAFEType,'A','') AS cAFEType, IIF(lJIBOnly,'J','') AS cJIBOnly  ;
		        FROM expcat INTO CURSOR exptmp READWRITE 
		
		    SELECT exptmp
		    INDEX ON cCatCode           TAG cCatCode
		    INDEX ON cCateg             TAG cCateg
		    INDEX ON cExpClass+cCatCode TAG cExpClass
		    INDEX ON cAFEType           TAG cAFEType
		    INDEX ON cJIBOnly           TAG cJIBOnly
		
		    lcList = 'ccatcode\Code,ccateg\Category,cexpclass\Cls,cAFEType\AFE,cJIBOnly\JIB'
		
		    DO FORM '..\custom\picklist' WITH 'exptmp', lcList, THISFORM.txtcCatCode.VALUE, 5, .T., .T.
		
		    IF llOK
		        THISFORM.txtcCatCode.SET('VALUE',exptmp.cCatCode)
		        THISFORM.txtcCatDesc.SET('value',exptmp.cCateg)
		        THISFORM.cboclass.VALUE = exptmp.cExpClass
		        THISFORM.cboclass.REFRESH()
		    ENDIF
		
		    THISFORM.setnextcontrol(THISFORM.txtcCatCode)
		
		    ON KEY LABEL F10 _SCREEN.ACTIVEFORM.SAVE()
		    ON KEY LABEL CTRL+A _SCREEN.ACTIVEFORM.New()
		    ON KEY LABEL CTRL+D _SCREEN.ACTIVEFORM.DELETE()
		    ON KEY LABEL CTRL+L _SCREEN.ACTIVEFORM.LIST()
		ENDIF
		
	ENDPROC

	PROCEDURE cmdLookCOA.Click
		LOCAL lcList
		PRIV llOK
		
		llOK = .T.
		
		THISFORM.lnoclearext = .T.  &&  This will prevent the activate from wiping out the extension amount
		
		lcList = 'cAcctNo/acctno,cAcctDesc/acctdesc'
		
		DO FORM ..\custom\picklist WITH 'Coa', lcList, thisform.txtcacctno.value, 2
		
		IF llOK
		   thisform.txtcAcctNo.value = coa.cacctno
		   thisform.txtcAcctDesc.value = coa.cAcctDesc
		   thisform.txtcAcctNo.refresh()
		   thisform.txtcAcctDesc.refresh()
		ENDIF   
		
		thisform.setnextcontrol(This.Parent.txtcAcctNo)
		
		ON KEY LABEL F10 _screen.activeform.Save()
		ON KEY LABEL CTRL+A _screen.activeform.New()
		ON KEY LABEL CTRL+D _screen.activeform.Delete()
		ON KEY LABEL CTRL+L _screen.activeform.List()
		
	ENDPROC

	PROCEDURE cmdLookCOA.When
		RETURN (thisform.txtcacctno.lenabled)
	ENDPROC

	PROCEDURE cmdLookDept.Click
		LOCAL lcList
		PRIV llOK
		
		llOK = .T.
		
		THISFORM.lnoclearext = .T.  &&  This will prevent the activate from wiping out the extension amount
		
		lcList = 'cdeptno\Dept. No.,cdeptdesc\Description'
		
		DO FORM ..\custom\picklist WITH 'gldept', lcList, thisform.txtcdeptno.value, 2, .f., .t.
		
		IF llOK
		   thisform.txtcDeptNo.value = gldept.cdeptno
		   thisform.txtcDeptDesc.value = gldept.cDeptDesc
		   thisform.txtcDeptNo.refresh()
		   thisform.txtcDeptDesc.refresh()
		ENDIF   
		
		thisform.txtcDeptNo.SetFocus()
		
		ON KEY LABEL F10 _screen.activeform.Save()
		ON KEY LABEL CTRL+A _screen.activeform.New()
		ON KEY LABEL CTRL+D _screen.activeform.Delete()
		ON KEY LABEL CTRL+L _screen.activeform.List()
		
	ENDPROC

	PROCEDURE cmdLookOwner.Click
		LOCAL lcList
		PRIV llOK
		
		llOK = .T.
		
		THISFORM.lnoclearext = .T.  &&  This will prevent the activate from wiping out the extension amount
		
		lcList = 'cOwnerID\Owner ID,csortfield\Owner Name'
		
		IF USED('tempown')
		   USE IN tempown
		ENDIF
		IF USED('tempown1')
		   USE IN tempown1
		ENDIF
		
		IF NOT EMPTY(THISFORM.txtcunitno.VALUE)
		   SET SAFETY OFF
		   SELECT cOwnerID, cSortField, cOwnName FROM investor ;
		      WHERE cOwnerID IN (SELECT cOwnerID FROM wellinv WHERE cWellID = THISFORM.txtcunitno.VALUE) ;
		      INTO CURSOR tempown1 ;
		      ORDER BY cOwnerID
		
		   IF _TALLY > 0
		
		      USE DBF('tempown1') AGAIN IN 0 ALIAS tempown
		      SELECT tempown
		      INDEX ON cOwnerID TAG cOwnerID
		      INDEX ON cSortField TAG cSortField
		
		      DO FORM ..\CUSTOM\Picklist WITH 'tempown', lcList, THISFORM.txtcownerid.VALUE, 2, .T.,.t.
		
		      IF llOK
		         THISFORM.txtcownerid.VALUE = tempown.cOwnerID
		         THISFORM.txtcOwnName.VALUE = tempown.cOwnName
		         THISFORM.txtcownerid.REFRESH()
		         THISFORM.txtcOwnName.REFRESH()
		      ENDIF
		
		      THISFORM.setnextcontrol(THIS.PARENT.txtcownerid)
		   ENDIF
		ENDIF
		
	ENDPROC

	PROCEDURE cmdLookOwner.When
		RETURN MDOWN()
	ENDPROC

	PROCEDURE cmdLookUnit.Click
		LOCAL lcList
		PRIV llOK
		
		llOK = .T.
		
		THISFORM.lnoclearext = .T.  &&  This will prevent the activate from wiping out the extension amount
		
		lcList = 'cunitno\Unit No,cname\Name,ctype\Type'
		set safety off
		sele allunits
		index on cunitno tag cunitno
		index on cname tag cname
		set safety on
		
		DO FORM ..\Custom\PickList WITH 'Allunits', lcList, thisform.txtcunitno.value, 3, .f., .t.
		
		IF llOK
		   thisform.txtcUnitNo.value   = allunits.cunitno
		   thisform.txtcWellName.value = allunits.cname
		   thisform.txtcUnitNo.refresh()
		   thisform.txtcWellName.refresh()
		ENDIF   
		
		thisform.setnextcontrol(This.Parent.txtcUnitNo)
		
		ON KEY LABEL F10 _screen.activeform.Save()
		ON KEY LABEL CTRL+A _screen.activeform.New()
		ON KEY LABEL CTRL+D _screen.activeform.Delete()
		ON KEY LABEL CTRL+L _screen.activeform.List()
		
	ENDPROC

	PROCEDURE cmdVendor.Click
		LOCAL lcList
		PRIV llOK
		
		llOK = .T.
		
		lcList = 'cVendorID,cSortfield'
		
		DO FORM ..\CUSTOM\picklist WITH 'Vendor', lcList, thisform.txtcvendorid.value, 2
		
		IF llOK
		   THISFORM.cmdatamanager.REPLACE('appurech','cVendorId', Vendor.cVendorID)
		   THISFORM.txtcVendName.VALUE = vendor.cvendname
		   THISFORM.txtcVendName.REFRESH()
		   THISFORM.txtcVendorId.REFRESH
		   THISFORM.setstate()
		ENDIF
		
		THISFORM.setnextcontrol(THISFORM.txtcVendorId)
		
		ON KEY LABEL F10 _screen.activeform.Save()
		ON KEY LABEL CTRL+A _screen.activeform.New()
		ON KEY LABEL CTRL+D _screen.activeform.Delete()
		ON KEY LABEL CTRL+L _screen.activeform.List()
		
	ENDPROC

	PROCEDURE lstWellBills.DblClick
		THISFORM.editdetail()
	ENDPROC

	PROCEDURE txtcAcctDesc.When
		RETURN .F.
	ENDPROC

	PROCEDURE txtcAcctNo.GotFocus
		ON KEY LABEL F2 _screen.activeform.cmdLookCOA.Click()
		DODEFAULT()
	ENDPROC

	PROCEDURE txtcAcctNo.InteractiveChange
		IF DODEFAULT()
		   SELECT coa
		   LOCATE FOR cacctno == this.Value
		   IF FOUND()
		      this.Parent.txtcAcctDesc.set('value',coa.cacctdesc)
		   ELSE
		      this.Parent.txtcAcctDesc.set('value','')
		   ENDIF
		ENDIF
		      
		
	ENDPROC

	PROCEDURE txtcAcctNo.LostFocus
		ON KEY LABEL F2 *
		DODEFAULT()
		
	ENDPROC

	PROCEDURE txtcAcctNo.Valid
		IF NOT EMPTY(THIS.VALUE)
		   SELECT coa
		   SET ORDER TO acctno
		   IF SEEK(THIS.VALUE)
		      IF NOT lTitle AND NOT lTotalAcct
		         IF EMPTY(THISFORM.txtcitemdesc.VALUE)
		            THISFORM.txtcItemDesc.VALUE = cAcctDesc
		            THISFORM.txtcItemDesc.REFRESH()
		         ENDIF
		         THISFORM.txtcAcctDesc.SET('value',coa.cAcctDesc)
		         THISFORM.lWellRequired = lAcctUnit
		         THISFORM.lDeptRequired = lAcctDept
		      ELSE
		         THISFORM.omessage.warning('You must use a detail account number. It cannot be a title or totaling account.')
		         RETURN 0
		      ENDIF
		   ENDIF
		ENDIF
		DODEFAULT()
		
	ENDPROC

	PROCEDURE txtcCatCode.GotFocus
		ON KEY LABEL F2 _screen.activeform.cmdLookCat.Click()
		DODEFAULT()
	ENDPROC

	PROCEDURE txtcCatCode.InteractiveChange
		IF DODEFAULT()
		   SELECT expcat
		   LOCATE FOR ccatcode == this.Value
		   IF FOUND()
		      this.Parent.txtccatDesc.set('value',expcat.ccateg)
		   ELSE
		      this.Parent.txtccatDesc.set('value','')
		   ENDIF
		ENDIF       
		    
	ENDPROC

	PROCEDURE txtcCatCode.LostFocus
		ON KEY LABEL F2 *
		
		WITH THISFORM
		
		*!*	IF 'SALT'  $ UPPER(.txtcCatDesc.value) OR ;
		*!*	   'BRINE' $ UPPER(.txtcCatDesc.value) OR ;
		*!*	   'WATER' $ UPPER(.txtcCatDesc.value)
		*!*	   .txtnSaltBBL.VALUE = thisform.oMessage.GetText('Enter the number of BBLs of water.  (4 digits max)','Amount of Water in BBL')
		*!*	   IF TYPE('.txtnSaltBBL.value') = 'C'
		*!*	      IF LEN(ALLTRIM(.txtnSaltBBL.VALUE)) > 4
		*!*	         WAIT WIND NOWAIT 'The value entered for BBL is too large.'
		*!*	         this.setfocus()
		*!*	      ENDIF   
		*!*	      IF ISDIGIT(LEFT(.txtnSaltBBL.VALUE,1))
		*!*	         .txtnSaltBBL.VALUE = VAL(.txtnSaltBBL.VALUE)
		*!*	      ELSE
		*!*	         WAIT WIND NOWAIT 'The value entered for BBL is not a number.'
		*!*	         this.setfocus()
		*!*	         .txtnSaltBBL.VALUE = 0
		*!*	      ENDIF
		*!*	   ELSE
		*!*	      .txtnSaltBBL.VALUE = 0
		*!*	   ENDIF      
		*!*	ENDIF         
		ENDWITH
		
		DODEFAULT()
		
	ENDPROC

	PROCEDURE txtcCatCode.Valid
		DODEFAULT()
		
		SELE afeopt
		GO TOP
		llAllocexp = lAllocExp
		
		IF NOT EMPTY(THIS.VALUE)
		   SELECT expcat
		   SET ORDER TO ccatcode
		   IF SEEK(THIS.VALUE)
		      THISFORM.txtcitemdesc.VALUE = expcat.ccateg
		      THISFORM.txtcitemdesc.REFRESH()
		      thisform.cboclass.value = expcat.cexpclass
		      IF NOT lafetype OR llAllocExp
		         IF NOT EMPTY(glopt.cexpclear)
		            THISFORM.txtcacctno.VALUE = glopt.cexpclear
		         ELSE
		            thisform.omessage.warning('The expense clearing account must be chosen in G/L Preferences before allocating expenses to wells.')
		            RETURN 
		         ENDIF
		         
		         thisform.txtcacctno.lenabled = .f.
		                  
		         SELE coa
		         LOCATE FOR cacctno = THISFORM.txtcacctno.VALUE
		         IF FOUND()
		            THISFORM.txtcacctdesc.SET('value',coa.cacctdesc)
		         ELSE
		            THISFORM.txtcacctdesc.SET('value','Unknown')
		         ENDIF
		      ELSE  &&  Check to see whether there's an AFE account we need to fill in.
		         thisform.txtcacctno.lenabled = .t.
		         IF EMPTY(ALLT(THISFORM.txtcacctno.VALUE))
		            THISFORM.txtcacctno.SET('value',expcat.cdraccto)
		            SELE coa
		            LOCATE FOR cacctno = THISFORM.txtcacctno.VALUE
		            IF FOUND()
		               THISFORM.txtcacctdesc.SET('value',coa.cacctdesc)
		            ELSE
		               THISFORM.txtcacctdesc.SET('value','Unknown')
		            ENDIF
		            RETURN .T.
		         ENDIF
		      ENDIF
		   ENDIF
		ELSE
		   thisform.txtccatDesc.Value = ''
		   thisform.txtcacctno.lenabled = .t.
		   IF NOT MDOWN() AND LASTKEY() <> -1  &&  F2 
		      thisform.lValidWell = .f.
		   ENDIF 
		ENDIF
		
		THISFORM.txtcacctno.REFRESH()
		
		
	ENDPROC

	PROCEDURE txtcCatCode.When
		RETURN thisform.lValidWell
	ENDPROC

	PROCEDURE txtcCatDesc.When
		DODEFAULT()
		RETURN .F. 
	ENDPROC

	PROCEDURE txtCdeptdesc.When
		DODEFAULT()
		RETURN .F. 
	ENDPROC

	PROCEDURE txtcDeptNo.GotFocus
		ON KEY LABEL F2 _screen.activeform.cmdLookDept.Click()
		DODEFAULT()
	ENDPROC

	PROCEDURE txtcDeptNo.InteractiveChange
		IF DODEFAULT()
		   SELECT gldept
		   LOCATE FOR cdeptno == this.value
		   IF FOUND()
		      this.Parent.txtcDeptDesc.set('value',gldept.cdeptdesc)
		   ELSE
		      this.Parent.txtcDeptDesc.set('value','')
		   ENDIF
		ENDIF
		      
		
	ENDPROC

	PROCEDURE txtcDeptNo.LostFocus
		ON KEY LABEL F2 *
		DODEFAULT()
		
	ENDPROC

	PROCEDURE txtcDeptNo.Valid
		DODEFAULT()
		IF EMPTY(THIS.VALUE)
		   IF NOT MDOWN()
		      IF THISFORM.lDeptRequired
		         THISFORM.omessage.DISPLAY('A valid department code is required when using this account no.')
		         RETURN 0
		      ENDIF
		   ENDIF
		ENDIF
		
		
	ENDPROC

	PROCEDURE txtCinvnum.LostFocus
		*
		*  Check for duplicate invoice numbers
		*
		IF THISFORM.cmdatamanager.isnew('appurech')
		   SELECT appurech1
		   SET ORDER TO vendinv
		   IF SEEK(THISFORM.txtcVendorID.VALUE+THISFORM.txtcInvNum.VALUE)
		      IF NOT THISFORM.oMessage.CONFIRM('This appears to be a duplicate invoice.  Do you want to continue?')
		         thisform.SetNextControl(thisform.txtcInvNum)
		      ENDIF
		   ENDIF
		ENDIF
		SELECT appurech
		DODEFAULT()
	ENDPROC

	PROCEDURE txtcOwnerID.GotFocus
		ON KEY LABEL F2 _SCREEN.ACTIVEFORM.cmdLookOwner.CLICK()
		
		DODEFAULT()
		
	ENDPROC

	PROCEDURE txtcOwnerID.InteractiveChange
		IF DODEFAULT()
		   SELECT investor
		   LOCATE FOR cownerid == this.Value
		   IF FOUND()
		      this.Parent.txtcownName.set('value',investor.cownname)
		   ELSE
		      this.Parent.txtcownName.set('value','')
		   ENDIF
		ENDIF       
		      
		      
	ENDPROC

	PROCEDURE txtcOwnerID.LostFocus
		ON KEY LABEL F2 *
		IF (LASTKEY() = 13 OR LASTKEY() = 9) AND not mDown()  &&  Tab or enter, but not a mouseclick
		   thisform.adddetail1()
		ENDIF
		
	ENDPROC

	PROCEDURE txtcOwnerID.Valid
		IF EMPTY(THIS.VALUE)
		   THIS.PARENT.txtcOwnName.SET('value','')
		ENDIF
		
	ENDPROC

	PROCEDURE txtcOwnerID.When
		RETURN thisform.lValidWell
	ENDPROC

	PROCEDURE txtcOwnName.When
		RETURN .F.
		
	ENDPROC

	PROCEDURE txtcUnitNo.GotFocus
		ON KEY LABEL F2 _screen.activeform.cmdLookUnit.Click()
		DODEFAULT()
	ENDPROC

	PROCEDURE txtcUnitNo.InteractiveChange
		IF DODEFAULT()
		   SELECT allunits
		   LOCATE FOR cunitno == this.Value
		   IF FOUND()
		      this.Parent.txtcwellName.set('value',allunits.cname)
		   ELSE
		      this.Parent.txtcwellName.set('value','')
		   ENDIF
		ENDIF       
		    
	ENDPROC

	PROCEDURE txtcUnitNo.LostFocus
		ON KEY LABEL F2 *
		DODEFAULT()
		
	ENDPROC

	PROCEDURE txtcUnitNo.Valid
		LOCAL lnCount
		
		IF NOT EMPTY(THIS.VALUE)
		   IF THIS.VALUE = 'ALLOC'
		      DO FORM dmselwells WITH '**'
		      SELECT wellsel
		      COUNT FOR NOT DELETED() TO lnCount
		      IF lnCount > 0
		         THISFORM.lValidWell = .T.
		      ELSE
		         THISFORM.lValidWell = .F.
		      ENDIF
		   ELSE
		      SELECT wells
		      SET ORDER TO cwellid
		      IF SEEK(THIS.VALUE)
		         IF INLIST(wells.cWellStat,'I','S','P')  &&  All non-active statuses except investment
		            THISFORM.lValidWell = .T.
		            THISFORM.omessage.warning('This well is not an active well. Its expenses will be sent to the allocation file.')
		         ELSE
		            THISFORM.lValidWell = .T.
		            IF wells.cWellStat = 'V'  &&  Investment well, so turn on the investment flag
		               THISFORM.lInvestment = .T.
		            ELSE
		               THISFORM.lInvestment = .F.
		            ENDIF
		         ENDIF
		      ELSE
		         SELE land
		         LOCATE FOR cleaseid = THIS.VALUE
		         IF FOUND()
		            THISFORM.lValidWell = .F.
		         ELSE
		            THISFORM.omessage.warning('The Well/Lease ID entered is not valid.  Please reenter.')
		            RETURN 0
		         ENDIF
		      ENDIF
		   ENDIF
		ELSE
		   IF NOT MDOWN()
		      IF THISFORM.lWellRequired
		         THISFORM.omessage.DISPLAY('A valid well id is required when using this account no.')
		         RETURN 0
		      ENDIF
		   ENDIF
		   THISFORM.lValidWell = .F.
		   THIS.PARENT.txtcWellName.SET('value','')
		   THIS.PARENT.txtccatCode.SET('value','')  &&  No well, so blank out the category and description
		   THIS.PARENT.txtccatdesc.SET('value','')  &&  No well, so blank out the category and description
		ENDIF
		DODEFAULT()
		
	ENDPROC

	PROCEDURE txtCvendname.When
		DODEFAULT()
		RETURN .F.    
	ENDPROC

	PROCEDURE txtcVendorID.GotFocus
		ON KEY LABEL F2 _screen.activeform.cmdVendor.Click()
	ENDPROC

	PROCEDURE txtcVendorID.InteractiveChange
		IF DODEFAULT()
		   SELECT vendor
		   LOCATE FOR cvendorid == this.value
		   IF FOUND() 
		      THISFORM.txtcVendName.SET('value',vendor.cvendname)
		   ELSE
		      THISFORM.txtcVendName.SET('value','')
		   ENDIF 
		ENDIF       
		   
		         
		
	ENDPROC

	PROCEDURE txtcVendorID.LostFocus
		ON KEY LABEL F2 *
		
		SELECT vendor
		SET ORDER TO cvendorid
		IF SEEK(THIS.VALUE)
		   THISFORM.txtcVendName.SET('value',vendor.cvendname)
		   IF THISFORM.IsNew() AND EMPTY(THISFORM.cboTerms.VALUE)
		      THISFORM.cboTerms.SET('value',vendor.cidterm)
		   ENDIF
		ENDIF
		
	ENDPROC

	PROCEDURE txtcWellName.When
		RETURN .F.
	ENDPROC

	PROCEDURE txtnExtension.LostFocus
		IF NOT THISFORM.lvalidwell
		   *  Check to make sure the following keys were not pressed
		   *  F1 			= 28
		   *  Backspace 	= 127
		   *  Shift-Tab		= 15
		   *  Left Arrow	= 19
		   *  Up Arrow		= 5
		   IF LASTKEY() <> 28 AND ;
		         LASTKEY() <> 127 AND ;
		         LASTKEY() <> 15 AND ;
		         LASTKEY() <> 19 AND ;
		         LASTKEY() <> 5
		      THISFORM.adddetail1()
		   ENDIF
		ENDIF
	ENDPROC

	PROCEDURE txtNinvtot.When
		DODEFAULT()
		RETURN .F.
	ENDPROC

ENDDEFINE
