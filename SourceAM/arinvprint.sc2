*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="arinvprint.scx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="2" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Cursor1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor6" UniqueID="" Timestamp="" />

	AutoOpenTables = .F.
	DataSource = .NULL.
	Height = 389
	Left = 40
	Name = "Dataenvironment"
	Top = 235
	Width = 531

	ADD OBJECT 'Cursor1' AS cursor WITH ;
		Alias = "custs", ;
		CursorSource = "custs", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor1", ;
		Top = 20, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor2' AS cursor WITH ;
		Alias = "invhdr", ;
		CursorSource = "invhdr", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Filter = "NOT DELETED()", ;
		Height = 90, ;
		Left = 150, ;
		Name = "Cursor2", ;
		Top = 20, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor3' AS cursor WITH ;
		Alias = "aropt", ;
		CursorSource = "aropt", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 290, ;
		Name = "Cursor3", ;
		Top = 20, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor4' AS cursor WITH ;
		Alias = "invdet", ;
		CursorSource = "invdet", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor4", ;
		Top = 140, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor5' AS cursor WITH ;
		Alias = "custown", ;
		CursorSource = "custown", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 150, ;
		Name = "Cursor5", ;
		Top = 140, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor6' AS cursor WITH ;
		Alias = "wells", ;
		CursorSource = "wells", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 290, ;
		Name = "Cursor6", ;
		Top = 140, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

ENDDEFINE

DEFINE CLASS formarinvprint AS frmformcustom OF "..\custom\cforms.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Cntmoverlistpair" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdOK" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdCancel" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: printinvoice		&& Prints the selected invoices
		*a: aselected[1,0]
	*</DefinedPropArrayMethod>

	Caption = "Print Invoices"
	DataSession = 2
	DoCreate = .T.
	Height = 401
	HelpContextID = 579
	Name = "FormArinvprint"
	Width = 557
	Mwresize1.LBLHIGHLIGHT.Name = "LBLHIGHLIGHT"
	Mwresize1.LBLSHADING.Name = "LBLSHADING"
	Mwresize1.Name = "Mwresize1"

	ADD OBJECT 'cmdCancel' AS cmdcommandbuttoncustom WITH ;
		Caption = "\<Cancel", ;
		FontBold = .T., ;
		Height = 36, ;
		Left = 284, ;
		Name = "cmdCancel", ;
		Top = 363, ;
		Width = 75
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdOK' AS cmdcommandbuttoncustom WITH ;
		Caption = "\<OK", ;
		FontBold = .T., ;
		Height = 36, ;
		Left = 200, ;
		Name = "cmdOK", ;
		Top = 363, ;
		Width = 75
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'Cntmoverlistpair' AS cntmoverlistpair WITH ;
		Height = 349, ;
		Left = 0, ;
		Name = "Cntmoverlistpair", ;
		Top = 11, ;
		Width = 552, ;
		cmdDeselect.Caption = "De-Select", ;
		cmdDeselect.FontBold = .F., ;
		cmdDeselect.Height = 23, ;
		cmdDeselect.Left = 276, ;
		cmdDeselect.Name = "cmdDeselect", ;
		cmdDeselect.Top = 156, ;
		cmdDeselect.Width = 84, ;
		cmdDeselectAll.Caption = "De-Select All", ;
		cmdDeselectAll.FontBold = .F., ;
		cmdDeselectAll.Height = 23, ;
		cmdDeselectAll.Left = 360, ;
		cmdDeselectAll.Name = "cmdDeselectAll", ;
		cmdDeselectAll.Top = 156, ;
		cmdDeselectAll.Width = 84, ;
		cmdSelect.Caption = "Select", ;
		cmdSelect.FontBold = .F., ;
		cmdSelect.Height = 23, ;
		cmdSelect.Left = 108, ;
		cmdSelect.Name = "cmdSelect", ;
		cmdSelect.Top = 156, ;
		cmdSelect.Width = 84, ;
		cmdSelectAll.Caption = "Select All", ;
		cmdSelectAll.FontBold = .F., ;
		cmdSelectAll.Height = 23, ;
		cmdSelectAll.Left = 192, ;
		cmdSelectAll.Name = "cmdSelectAll", ;
		cmdSelectAll.Top = 156, ;
		cmdSelectAll.Width = 84, ;
		lstSelected.FontName = "Courier New", ;
		lstSelected.FontSize = 8, ;
		lstSelected.Height = 132, ;
		lstSelected.Left = 12, ;
		lstSelected.Name = "lstSelected", ;
		lstSelected.Top = 209, ;
		lstSelected.Width = 528, ;
		lstSource.FontName = "Courier New", ;
		lstSource.FontSize = 8, ;
		lstSource.Height = 138, ;
		lstSource.Left = 12, ;
		lstSource.Name = "lstSource", ;
		lstSource.Top = 12, ;
		lstSource.Width = 528
		*< END OBJECT: ClassLib="..\custom\cgadget.vcx" BaseClass="container" />

	ADD OBJECT 'Lbllabelcustom1' AS lbllabelcustom WITH ;
		Caption = "Available Invoices", ;
		FontBold = .T., ;
		Left = 12, ;
		Name = "Lbllabelcustom1", ;
		Top = 6
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom2' AS lbllabelcustom WITH ;
		Caption = "Invoices To Print", ;
		FontBold = .T., ;
		Left = 12, ;
		Name = "Lbllabelcustom2", ;
		Top = 201
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />
	
	PROCEDURE Init
		DODEFAULT()
		*
		*  Initialize the arrays
		*
		LOCAL laSelected[1]
		
		*  Initialize the selected array
		laSelected[1] = ''
		
		SET DELETED ON
		
		*  Initialize the available array
		SELECT cInvnum+'  '+ DTOC(dInvDate) + '  ' + invhdr.ccustid + ' ' + LEFT(cCustname,25) + '  ' + STR(ninvtot,9,2) ;
		   FROM invhdr, custown ;
		   WHERE invhdr.ccustid = custown.ccustid ;
		   AND invhdr.lBrine   = .F. ;
		   AND invhdr.lPrinted = .F. ;
		   AND LEFT(invhdr.cInvnum,2) <> 'FC' ;
		   INTO ARRAY laAvailable ;
		   ORDER BY cInvnum
		
		IF _TALLY > 0
		   *  Initialize the aSelected array property
		   THISFORM.aSelected = ""
		
		   *  Call the setvalue method to initialze the listboxes
		   THISFORM.cntMoverListPair.SetValue(@laAvailable,@laSelected)
		ELSE
		   THISFORM.oMessage.DISPLAY('There are no invoices to print.')
		   RETURN .F.
		ENDIF
		
	ENDPROC

	PROCEDURE printinvoice		&& Prints the selected invoices
		LOCAL m.caddr1, m.caddr2, m.caddr3, m.ccustname, m.shipln1, m.shipln2
		LOCAL m.shipln3, m.shipln4, m.paddr1, m.paddr2, m.paddr3, m.message
		LOCAL lnCount, lnX
		
		* Check on the existence of the application object
		* if it doesn't exist, we're running in development
		* mode and need to initialize the company address info.
		
		IF TYPE('m.goApp') = 'O'
		    m.cProducer = m.goApp.cCompanyName
		    m.paddr1 = m.goApp.cAddress1
		    m.paddr2 = m.goApp.cAddress2
		    m.paddr3 = m.goApp.cAddress3
		ELSE
		    m.cProducer = 'SherWare, Inc.'
		    m.paddr1 = 'PO Box 209'
		    m.paddr2 = 'Apple Creek, OH  44606'
		    m.paddr3 = ''
		ENDIF
		
		CREATE CURSOR tempinv ;
		    (cBatch     C(8), ;
		    cCustID    C(10), ;
		    ccustname  C(40), ;
		    caddr1     C(40), ;
		    caddr2     C(40), ;
		    caddr3     C(40), ;
		    cShipAddr1     C(40), ;
		    cShipAddr2     C(40), ;
		    cShipAddr3     C(40), ;
		    cInvNum    C(15), ;
		    dInvDate   D, ;
		    dDueDate   D, ;
		    dDiscDate  D, ;
		    cTermDesc  c(30), ;
		    nSubTotal  N(12,2), ;
		    nInvBal    N(12,2), ;
		    nInvTot    N(12,2), ;
		    nPayments  N(12,2), ;
		    mshiprem   M, ;
		    mnotes     M, ;
		    cmessage   M, ;
		    dpostdate  D, ;
		    cinvtype   C(1), ;
		    creference C(15), ;
		    nsalestax  N(12,2), ;
		    lprinted   L, ;
		    lprintnotes L, ;
		    cprodprd   C(2), ;
		    cprodyear  C(4), ;
		    cgroup     C(2), ;
		    lnetjib    L, ;
		    cSelected  C(1))
		INDEX ON cInvNum TAG inv
		INDEX ON cCustID TAG CUST
		INDEX ON DTOS(dInvDate) TAG invdate
		
		*
		*  Get the invoice message
		*
		
		DO setstep
		
		SELECT aropt
		GO TOP
		m.cmessage = mInvMsg
		lnInvType  = nInvType
		* Get the count of invoices to be printed
		lnCount = ALEN(THISFORM.aSelected,1)
		IF lnCount = 0
		    THISFORM.omessage.warning('No invoices have been selected....')
		    RETURN
		ENDIF
		
		FOR lnX = 1 TO lnCount
		    m.cCustID = SUBSTR(THISFORM.aSelected[lnX],30,10)
		    m.cInvNum = LEFT(THISFORM.aSelected[lnX],15)
		    IF EMPTY(m.cCustID)
		        THISFORM.omessage.warning('No invoices have been selected....')
		        RETURN
		    ENDIF
		    SELECT invhdr
		    SCAN FOR cCustID == m.cCustID AND cInvNum == m.cInvNum AND NOT lprinted
		        SCATTER MEMVAR MEMO
		        swSELECT('custs')
		        SET ORDER TO cCustID
		        IF SEEK (m.cCustID)
		            m.ccustname = ccustname
		            m.caddr1   = cbaddr1
		            IF EMPTY(cbaddr2)
		                m.caddr2 = ALLTRIM(cbcity) + ', ' + cbstate + '  ' + cbzip
		                m.caddr3 = ' '
		            ELSE
		                m.caddr2 = cbaddr2
		                m.caddr3 = ALLTRIM(cbcity) + ', ' + cbstate + '  ' + cbzip
		            ENDIF
		            IF EMPTY(cAddress1)
		                m.cShipAddr1 = m.caddr1
		                m.cShipAddr2 = m.caddr2
		                m.cShipAddr3 = m.caddr3
		            ELSE
		                m.cShipAddr1 = cAddress1
		                IF EMPTY(cAddress2)
		                    m.cShipAddr2 = ALLTRIM(ccity) + ', ' + cstate + '  ' + czip
		                    m.cShipAddr3 = ''
		                ELSE
		                    m.cShipAddr2 = cAddress2
		                    m.cShipAddr3 = ALLTRIM(ccity) + ', ' + cstate + '  ' + czip
		                ENDIF
		            ENDIF
		        ELSE
		            SELECT investor
		            SET ORDER TO cownerid
		            IF SEEK(m.cCustID)
		                m.ccustname = cownname
		                m.caddr1    = caddress1a
		                IF EMPTY(caddress1b)
		                    m.caddr2 = ALLTRIM(ccity1) + ', ' + cstate1 + '  ' + czip1
		                    m.caddr3 = ' '
		                ELSE
		                    m.caddr2 = caddress1b
		                    m.caddr3 = ALLTRIM(ccity1) + ', ' + cstate1 + '  ' + czip1
		                ENDIF
		                m.cShipAddr1 = m.caddr1
		                m.cShipAddr2 = m.caddr2
		                m.cShipAddr3 = m.caddr3
		            ENDIF
		        ENDIF
		        
		        swselect('terms')
		        LOCATE FOR cidterm == m.cidterm
		        m.ctermdesc = ctermdesc
		
		        INSERT INTO tempinv FROM MEMVAR
		    ENDSCAN
		ENDFOR
		
		IF USED('tempdet1')
		    USE IN tempdet1
		ENDIF
		IF USED('tempdet')
		    USE IN tempdet
		ENDIF
		SELECT invdet.*, SPACE(30) AS cWellName FROM invdet ;
		    WHERE invdet.cBatch IN (SELECT cBatch FROM tempinv) ;
		    INTO CURSOR tempdet1
		
		USE DBF('tempdet1') AGAIN ALIAS tempdet IN 0
		SELECT tempdet
		SCAN
		    m.cwellid = cunitno
		    SELECT wells
		    SET ORDER TO cwellid
		    IF SEEK(m.cwellid)
		        m.cWellName = cWellName
		        SELECT tempdet
		        REPL cWellName WITH m.cWellName
		    ENDIF
		ENDSCAN
		
		SELECT tempdet
		INDEX ON cBatch TAG cBatch
		
		SELECT tempinv
		SET RELATION TO cBatch INTO tempdet
		SET SKIP TO tempdet
		
		DO CASE
		    CASE lnInvType = 1
		        REPORT FORM (m.goapp.cRptsFolder+'arinv1.frx') TO PRINTER PROMPT NOCONSOLE NOEJECT
		    CASE lnInvType = 2
		        REPORT FORM (m.goapp.cRptsFolder+'arinv2.frx') TO PRINTER PROMPT NOCONSOLE NOEJECT
		    OTHERWISE
		        THISFORM.omessage.severe('The invoice type has not been set in the A/R options. No invoices were printed.')
		        RETURN
		ENDCASE
		
		IF THISFORM.omessage.CONFIRM('Did the invoices print OK?')
		    FOR lnX = 1 TO lnCount
		        m.cCustID = SUBSTR(THISFORM.aSelected[lnX],30,10)
		        m.cInvNum = LEFT(THISFORM.aSelected[lnX],15)
		        SELECT invhdr
		        SET ORDER TO custinv
		        IF SEEK(m.cCustID+m.cInvNum)
		            REPLACE lprinted WITH .T.
		        ENDIF
		    ENDFOR
		    SELECT invhdr
		    TABLEUPDATE(.T.)
		    THISFORM.RELEASE()
		ENDIF
		
	ENDPROC

	PROCEDURE cmdCancel.Click
		*
		*  Empty the selected array so that nothing is selected
		*
		thisform.aSelected = ""
		thisform.release()
	ENDPROC

	PROCEDURE cmdOK.Click
		LOCAL lnX, lnCount, laSelected[100]
		
		*  Get the selected array
		lnCount = thisform.cntMoverListPair.GetValue(@laSelected)
		
		IF lnCount > 0
		   *  Set the aSelected property to the selected array
		   DIME thisform.aSelected[lnCount]
		   FOR lnX = 1 TO lnCount
		       thisform.aSelected[lnX] = laSelected[lnX]
		   ENDFOR
		ELSE
		   thisform.aSelected = ""   
		ENDIF
		
		*  Print the invoices
		thisform.printinvoice()    
		
	ENDPROC

ENDDEFINE
