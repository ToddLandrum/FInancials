*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="csreceipt.scx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="2" />

	AutoOpenTables = .F.
	DataSource = .NULL.
	Height = 798
	InitialSelectedAlias = "csrcthdr"
	Left = 0
	Name = "Dataenvironment"
	Top = 0
	Width = 949

ENDDEFINE

DEFINE CLASS formcsreceiptd AS frmdatamanagerformcustom OF "..\custom\cforms.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="txtcDispCode" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtwastecode" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcdisperm" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcName" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboAcct" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtCcheckno" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblDpostdate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblCcheckno" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblDentdate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtNcashamt" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblNcashamt" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="opgDeposits" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pageframe" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pageframe.Page1.Shpshapecustom1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pageframe.Page1.cboInttype" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pageframe.Page1.txtcOwnerID" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pageframe.Page1.cmdLookOwner" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pageframe.Page1.cmdLookWell" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pageframe.Page1.txtcWellID" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pageframe.Page1.txtcWellName" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pageframe.Page1.Lbllabelcustom2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pageframe.Page1.lblSource" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pageframe.Page1.Lbllabelcustom3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pageframe.Page1.txtcProdYear" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pageframe.Page1.txtnUnits" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pageframe.Page1.lblUnits" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pageframe.Page1.txtnPrice" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pageframe.Page1.lblAmount" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pageframe.Page1.Lbllabelcustom4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pageframe.Page1.txtcProdPeriod" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pageframe.Page1.txtnTotal" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pageframe.Page1.lblIntType" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pageframe.Page1.chkGross" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pageframe.Page1.txtCbegrange" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pageframe.Page1.txtcBegRange1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pageframe.Page1.txtcEndRange1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pageframe.Page1.txtCendrange" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pageframe.Page1.lblProdPeriod" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pageframe.Page1.txtcProdYear1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pageframe.Page1.lblSlash" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pageframe.Page1.txtcProdPeriod1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pageframe.Page1.txtcOwnerID1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pageframe.Page1.Lbltextcustom4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pageframe.Page1.lblDash" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pageframe.Page1.Lbltextcustom6" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pageframe.Page1.lblAllocate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pageframe.Page1.lblDaysOn" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pageframe.Page1.txtnDaysOn" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pageframe.Page1.txtnDaysOn1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pageframe.Page1.Lbltextcustom7" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pageframe.Page1.lblPeriodRange" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pageframe.Page1.lblInfo" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pageframe.Page1.lstWellRcpt" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pageframe.Page1.Lbllabelcustom6" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pageframe.Page1.cboType" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pageframe.Page1.cboDeck" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pageframe.Page1.Lbllabelcustom1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pageframe.Page2.Shape1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pageframe.Page2.txtCitemdesc" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pageframe.Page2.lblCitemdesc" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pageframe.Page2.lblNextension" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pageframe.Page2.txtCdeptdesc" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pageframe.Page2.cmdLookDept" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pageframe.Page2.txtcAcctNo" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pageframe.Page2.txtcDeptNo" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pageframe.Page2.txtcAcctDesc" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pageframe.Page2.cmdLookCOA" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pageframe.Page2.cmdLookWell" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pageframe.Page2.txtcWellID" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pageframe.Page2.txtcWellName" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pageframe.Page2.txtnExtension" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pageframe.Page2.lstNonWell" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcID" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtdRecDate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grouptran" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtnSaltBBL" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtdpostdate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdDocument" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdLookID" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: addnonproddetail
		*m: addproddetail		&& Adds detail lines for page1
		*m: calcdays		&& Calculates the dayson from the period ranges entered.
		*m: calcext		&& Calculates the detail extension total
		*m: calctot		&& Calculates the Invoice Totals
		*m: checkhist		&& Returns .T. if the given production period is closed.
		*m: checkprice
		*m: daysonsave		&& Saves the number of days the well was on.
		*m: dmincome		&& Either places the income entries in the INCSUSP or INCOME tables depending on whether the production year and period were specified.
		*m: editdetail1		&& Edit a detail line
		*m: editdetail2
		*m: getaddr
		*m: getprice		&& Gets the price for the item based upon the price code passed.
		*m: lookcoa
		*m: refreshinfo
		*m: requery_namelookup
		*m: setstate		&& Resets the form state for non bound controls so that the save button still works.
		*m: valterms		&& Validate Terms and Set Due Date and Disc Date based on the Terms
		*m: viewdocument
		*p: ccashaccount
		*p: coldacctno
		*p: glmaint
		*p: ldeptrequired
		*p: linvestment		&& .T. if the well is an investment well
		*p: lnewdetail
		*p: lsendtoallocate
		*p: lwellrequired
		*p: ndetrecno
		*p: nextension
		*p: nprice
		*p: nquantity
		*p: nrcpttotal
		*p: odist		&& Distproc Object
	*</DefinedPropArrayMethod>

	Caption = "Cash/Production Revenue Receipts"
	ccashaccount = 
	cdataenvironment = ("Cash")
	cdisplayname = 
	clistexpression = csrcthdr.cbatch
	cnavworkarea = csrcthdr
	cworkarea = csrcthdr
	DoCreate = .T.
	glmaint = .F.
	Height = 619
	HelpContextID = 19
	lexpliciteditmode = .F.
	lrememberrecord = .T.
	lsendtoallocate = .F.
	Name = "formcsreceiptd"
	nrcpttotal = 0
	Visible = .T.
	Width = 780
	_memberdata = <VFPData>
		<memberdata name="lnodataentry" type="property" display="lNoDataEntry"/>
		<memberdata name="lsendtoallocate" type="property" display="lSendToAllocate"/>
		<memberdata name="viewdocument" display="ViewDocument"/>
		<memberdata name="addproddetail" display="AddProdDetail"/>
		<memberdata name="addnonproddetail" display="AddNonProdDetail"/>
		</VFPData>
	cmdatamanager.Name = "cmdatamanager"
	cmdatamanager.TabIndex = 2
	cmdatamanager.ZOrderSet = 1
	cmlookupmanager.Name = "cmlookupmanager"
	Mwresize1.lblHighLight.Name = "lblHighLight"
	Mwresize1.lblShading.Name = "lblShading"
	Mwresize1.Left = 744
	Mwresize1.Name = "Mwresize1"
	Mwresize1.TabIndex = 1
	Mwresize1.Top = 600

	ADD OBJECT 'cboAcct' AS cbocomboboxcustom WITH ;
		BoundColumn = 2, ;
		ColumnCount = 2, ;
		ControlSource = "csrcthdr.ccashacct", ;
		Height = 20, ;
		Left = 414, ;
		Name = "cboAcct", ;
		TabIndex = 7, ;
		Top = 3, ;
		Width = 324
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="combobox" />

	ADD OBJECT 'cmdDocument' AS cmdcommandbuttoncustom WITH ;
		Caption = "\<Document", ;
		Height = 43, ;
		Left = 708, ;
		Name = "cmdDocument", ;
		TabIndex = 17, ;
		TabStop = .F., ;
		Top = 33, ;
		Width = 60, ;
		ZOrderSet = 27
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdLookID' AS cmdcommandbuttoncustom WITH ;
		Caption = "Received From", ;
		Height = 20, ;
		Left = 16, ;
		Name = "cmdLookID", ;
		TabIndex = 3, ;
		TabStop = .F., ;
		Top = 3, ;
		Width = 79, ;
		ZOrderSet = 22
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'Grouptran' AS grouptran WITH ;
		Height = 21, ;
		Left = 348, ;
		Name = "Grouptran", ;
		Top = 24, ;
		Width = 20
		*< END OBJECT: ClassLib="..\custom\swgl.vcx" BaseClass="custom" />

	ADD OBJECT 'lblCcheckno' AS lblfieldlabelcustom WITH ;
		Alignment = 0, ;
		AutoSize = .F., ;
		Caption = "Check Number", ;
		Height = 16, ;
		Left = 346, ;
		Name = "lblCcheckno", ;
		TabIndex = 13, ;
		Top = 57, ;
		Width = 72
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblDentdate' AS lblfieldlabelcustom WITH ;
		AutoSize = .T., ;
		Caption = "Receipt Date", ;
		Height = 16, ;
		Left = 15, ;
		Name = "lblDentdate", ;
		TabIndex = 14, ;
		Top = 57, ;
		Width = 63
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblDpostdate' AS lblfieldlabelcustom WITH ;
		Alignment = 0, ;
		Caption = "Post Date", ;
		Height = 16, ;
		Left = 187, ;
		Name = "lblDpostdate", ;
		TabIndex = 10, ;
		Top = 57, ;
		Width = 48, ;
		ZOrderSet = 10
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblNcashamt' AS lblfieldlabelcustom WITH ;
		AutoSize = .T., ;
		Caption = "Total Amount", ;
		Height = 16, ;
		Left = 516, ;
		Name = "lblNcashamt", ;
		TabIndex = 15, ;
		Top = 57, ;
		Width = 65
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'opgDeposits' AS opgoptiongroupcustom WITH ;
		ButtonCount = 2, ;
		Height = 24, ;
		Left = 204, ;
		Name = "opgDeposits", ;
		TabIndex = 6, ;
		Top = 1, ;
		Width = 204, ;
		Option1.Caption = "Group Deposits", ;
		Option1.FontSize = 8, ;
		Option1.Height = 17, ;
		Option1.Left = 7, ;
		Option1.Name = "optGroup", ;
		Option1.Top = 5, ;
		Option1.Width = 107, ;
		Option2.Caption = "Deposit To", ;
		Option2.FontSize = 8, ;
		Option2.Height = 19, ;
		Option2.Left = 118, ;
		Option2.Name = "optDepositTo", ;
		Option2.Top = 3, ;
		Option2.Width = 83
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="optiongroup" />

	ADD OBJECT 'pageframe' AS pgfpageframecustom WITH ;
		ErasePage = .T., ;
		Height = 529, ;
		Left = 3, ;
		Name = "pageframe", ;
		PageCount = 2, ;
		TabIndex = 16, ;
		Top = 83, ;
		Width = 777, ;
		Page1.Caption = "Production Revenue Receipts", ;
		Page1.FontSize = 8, ;
		Page1.Name = "Page1", ;
		Page2.Caption = "Non Production Receipts", ;
		Page2.FontSize = 8, ;
		Page2.Name = "Page2"
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="pageframe" />

	ADD OBJECT 'pageframe.Page1.cboDeck' AS cbocomboboxcustom WITH ;
		BoundColumn = 2, ;
		ControlSource = "", ;
		Height = 20, ;
		Left = 313, ;
		Name = "cboDeck", ;
		Style = 0, ;
		TabIndex = 9, ;
		Top = 33, ;
		ZOrderSet = 55
		*< END OBJECT: ClassLib="..\..\..\codeminenew\ampro_rv\custom\ccontrol.vcx" BaseClass="combobox" />

	ADD OBJECT 'pageframe.Page1.cboInttype' AS cbocomboboxcustom WITH ;
		Height = 20, ;
		Left = 636, ;
		Name = "cboInttype", ;
		RowSource = "Royalty,Override,Work Int", ;
		RowSourceType = 1, ;
		TabIndex = 19, ;
		Top = 57, ;
		Visible = .F.
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="combobox" />

	ADD OBJECT 'pageframe.Page1.cboType' AS cbocomboboxcustom WITH ;
		ColumnCount = 2, ;
		ControlSource = "", ;
		Format = "", ;
		Height = 20, ;
		InputMask = "", ;
		Left = 248, ;
		Name = "cboType", ;
		SelectOnEntry = .T., ;
		Style = 2, ;
		TabIndex = 8, ;
		Top = 33, ;
		Width = 60, ;
		ZOrderSet = 42
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="combobox" />

	ADD OBJECT 'pageframe.Page1.chkGross' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		BackStyle = 0, ;
		Caption = "Gross", ;
		FontSize = 7, ;
		Left = 438, ;
		Name = "chkGross", ;
		TabIndex = 10, ;
		TabStop = .F., ;
		Top = 14, ;
		Value = .F.
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'pageframe.Page1.cmdLookOwner' AS cmdcommandbuttoncustom WITH ;
		Caption = "Allocate All To", ;
		Height = 20, ;
		Left = 579, ;
		Name = "cmdLookOwner", ;
		TabIndex = 20, ;
		TabStop = .F., ;
		Top = 57, ;
		ZOrderSet = 47
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'pageframe.Page1.cmdLookWell' AS cmdcommandbuttoncustom WITH ;
		Caption = " Well ID ", ;
		Height = 20, ;
		Left = 13, ;
		Name = "cmdLookWell", ;
		TabIndex = 5, ;
		TabStop = .F., ;
		Top = 10, ;
		Width = 79
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'pageframe.Page1.lblAllocate' AS lbltextcustom WITH ;
		Caption = "Allocate All To", ;
		FontSize = 8, ;
		Height = 16, ;
		Left = 568, ;
		Name = "lblAllocate", ;
		TabIndex = 39, ;
		Top = 437, ;
		Visible = .F., ;
		Width = 71, ;
		ZOrderSet = 34
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'pageframe.Page1.lblAmount' AS lblfieldlabelcustom WITH ;
		BackStyle = 0, ;
		Caption = "Total", ;
		FontSize = 8, ;
		Height = 16, ;
		Left = 709, ;
		Name = "lblAmount", ;
		TabIndex = 4, ;
		Top = 14, ;
		Width = 25, ;
		ZOrderSet = 15
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'pageframe.Page1.lblDash' AS lbltextcustom WITH ;
		Caption = "-", ;
		FontBold = .T., ;
		FontSize = 8, ;
		Height = 16, ;
		Left = 407, ;
		Name = "lblDash", ;
		TabIndex = 41, ;
		Top = 457, ;
		Visible = .F., ;
		Width = 6, ;
		ZOrderSet = 31
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'pageframe.Page1.lblDaysOn' AS lbltextcustom WITH ;
		Caption = "Days On", ;
		FontSize = 8, ;
		Height = 16, ;
		Left = 490, ;
		Name = "lblDaysOn", ;
		TabIndex = 38, ;
		Top = 437, ;
		Visible = .F., ;
		Width = 44, ;
		ZOrderSet = 34
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'pageframe.Page1.lblInfo' AS lbllabelcustom WITH ;
		Caption = "Additional Info:", ;
		FontBold = .T., ;
		FontSize = 10, ;
		Left = 144, ;
		Name = "lblInfo", ;
		TabIndex = 42, ;
		Top = 456, ;
		Visible = .F.
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'pageframe.Page1.lblIntType' AS lbllabelcustom WITH ;
		Caption = "Int Type:", ;
		Left = 586, ;
		Name = "lblIntType", ;
		TabIndex = 33, ;
		Top = 59, ;
		Visible = .F.
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'pageframe.Page1.Lbllabelcustom1' AS lbllabelcustom WITH ;
		BackStyle = 0, ;
		Caption = "Price", ;
		Comment = "P", ;
		Left = 593, ;
		Name = "Lbllabelcustom1", ;
		TabIndex = 3, ;
		Top = 14, ;
		ZOrderSet = 43
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'pageframe.Page1.Lbllabelcustom2' AS lbllabelcustom WITH ;
		BackStyle = 0, ;
		Caption = " Well Name ", ;
		Left = 95, ;
		Name = "Lbllabelcustom2", ;
		TabIndex = 27, ;
		Top = 14
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'pageframe.Page1.Lbllabelcustom3' AS lbllabelcustom WITH ;
		Caption = "Prod Period", ;
		Left = 15, ;
		Name = "Lbllabelcustom3", ;
		TabIndex = 28, ;
		Top = 59
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'pageframe.Page1.Lbllabelcustom4' AS lbllabelcustom WITH ;
		Caption = "/", ;
		FontBold = .T., ;
		FontSize = 10, ;
		Left = 104, ;
		Name = "Lbllabelcustom4", ;
		TabIndex = 31, ;
		Top = 59
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'pageframe.Page1.Lbllabelcustom6' AS lbllabelcustom WITH ;
		Caption = "Deck:", ;
		Left = 335, ;
		Name = "Lbllabelcustom6", ;
		TabIndex = 24, ;
		Top = 14, ;
		ZOrderSet = 54
		*< END OBJECT: ClassLib="..\..\..\codeminenew\ampro_rv\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'pageframe.Page1.lblPeriodRange' AS lbltextcustom WITH ;
		Caption = "Period Range", ;
		Left = 379, ;
		Name = "lblPeriodRange", ;
		TabIndex = 37, ;
		Top = 437, ;
		Visible = .F., ;
		ZOrderSet = 38
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'pageframe.Page1.lblProdPeriod' AS lbllabelcustom WITH ;
		Caption = "Prod Period", ;
		Left = 270, ;
		Name = "lblProdPeriod", ;
		TabIndex = 36, ;
		Top = 437, ;
		Visible = .F.
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'pageframe.Page1.lblSlash' AS lbllabelcustom WITH ;
		Caption = "/", ;
		FontBold = .T., ;
		FontSize = 10, ;
		Left = 290, ;
		Name = "lblSlash", ;
		TabIndex = 40, ;
		Top = 456, ;
		Visible = .F.
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'pageframe.Page1.lblSource' AS lblfieldlabelcustom WITH ;
		BackStyle = 0, ;
		Caption = "Type", ;
		FontSize = 8, ;
		Height = 16, ;
		Left = 267, ;
		Name = "lblSource", ;
		TabIndex = 1, ;
		Top = 14, ;
		Width = 26, ;
		ZOrderSet = 9
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'pageframe.Page1.Lbltextcustom4' AS lbltextcustom WITH ;
		Caption = "-", ;
		FontBold = .T., ;
		FontSize = 8, ;
		Height = 16, ;
		Left = 329, ;
		Name = "Lbltextcustom4", ;
		TabIndex = 22, ;
		Top = 59, ;
		Width = 6, ;
		ZOrderSet = 31
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'pageframe.Page1.Lbltextcustom6' AS lbltextcustom WITH ;
		Caption = "Days On:", ;
		FontSize = 8, ;
		Height = 16, ;
		Left = 437, ;
		Name = "Lbltextcustom6", ;
		TabIndex = 25, ;
		Top = 59, ;
		Width = 47, ;
		ZOrderSet = 34
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'pageframe.Page1.Lbltextcustom7' AS lbltextcustom WITH ;
		Caption = "Period Range", ;
		Left = 213, ;
		Name = "Lbltextcustom7", ;
		TabIndex = 23, ;
		Top = 59, ;
		ZOrderSet = 38
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'pageframe.Page1.lblUnits' AS lblfieldlabelcustom WITH ;
		BackStyle = 0, ;
		Caption = "# Units", ;
		FontSize = 8, ;
		Height = 16, ;
		Left = 492, ;
		Name = "lblUnits", ;
		TabIndex = 2, ;
		Top = 14, ;
		Width = 35, ;
		ZOrderSet = 13
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'pageframe.Page1.lstWellRcpt' AS lstlistboxcustom WITH ;
		ColumnCount = 7, ;
		ColumnWidths = "100,180,45,75,110,100,100", ;
		FontName = "Courier New", ;
		Height = 337, ;
		Left = 4, ;
		Name = "lstWellRcpt", ;
		RowSource = "csrctdet.cwellid, cdesc, ctype, cdeck, nunits, nprice, namount", ;
		RowSourceType = 6, ;
		TabIndex = 43, ;
		Top = 94, ;
		Width = 760
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="listbox" />

	ADD OBJECT 'pageframe.Page1.Shpshapecustom1' AS shpshapecustom WITH ;
		BackColor = 255,255,128, ;
		Height = 82, ;
		Left = 4, ;
		Name = "Shpshapecustom1", ;
		Top = 6, ;
		Width = 760, ;
		ZOrderSet = 0
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="shape" />

	ADD OBJECT 'pageframe.Page1.txtCbegrange' AS txttextboxcustom WITH ;
		ControlSource = "", ;
		FontName = "Segoe UI", ;
		FontSize = 8, ;
		Height = 20, ;
		InputMask = "XX/XX", ;
		Left = 282, ;
		MaxLength = 5, ;
		Name = "txtCbegrange", ;
		TabIndex = 16, ;
		Top = 57, ;
		Width = 42, ;
		ZOrderSet = 23
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'pageframe.Page1.txtcBegRange1' AS txttextboxcustom WITH ;
		ControlSource = "csrctdet.cbegrange", ;
		DisabledForeColor = 0,0,255, ;
		Enabled = .F., ;
		FontBold = .F., ;
		FontSize = 8, ;
		Height = 20, ;
		InputMask = "XX/XX", ;
		Left = 360, ;
		lenabled = .F., ;
		MaxLength = 5, ;
		Name = "txtcBegRange1", ;
		TabIndex = 30, ;
		Top = 455, ;
		Visible = .F., ;
		Width = 42, ;
		ZOrderSet = 23
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'pageframe.Page1.txtCendrange' AS txttextboxcustom WITH ;
		ControlSource = "", ;
		FontName = "Segoe UI", ;
		FontSize = 8, ;
		Height = 20, ;
		InputMask = "XX/XX", ;
		Left = 337, ;
		MaxLength = 5, ;
		Name = "txtCendrange", ;
		TabIndex = 17, ;
		Top = 57, ;
		Width = 44, ;
		ZOrderSet = 24
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'pageframe.Page1.txtcEndRange1' AS txttextboxcustom WITH ;
		ControlSource = "csrctdet.cendrange", ;
		DisabledForeColor = 0,0,255, ;
		Enabled = .F., ;
		FontBold = .F., ;
		FontSize = 8, ;
		Height = 20, ;
		InputMask = "XX/XX", ;
		Left = 415, ;
		lenabled = .F., ;
		MaxLength = 5, ;
		Name = "txtcEndRange1", ;
		TabIndex = 32, ;
		Top = 455, ;
		Visible = .F., ;
		Width = 44, ;
		ZOrderSet = 24
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'pageframe.Page1.txtcOwnerID' AS txtquickfill WITH ;
		clistexpression = investor.cownerid, ;
		clistworkarea = investor, ;
		FontName = "Segoe UI", ;
		FontSize = 8, ;
		Left = 663, ;
		MaxLength = 10, ;
		Name = "txtcOwnerID", ;
		TabIndex = 21, ;
		Top = 57, ;
		Width = 76
		*< END OBJECT: ClassLib="..\common\cmgadget.vcx" BaseClass="textbox" />

	ADD OBJECT 'pageframe.Page1.txtcOwnerID1' AS txtquickfill WITH ;
		clistexpression = investor.cownerid, ;
		clistworkarea = investor, ;
		ControlSource = "csrctdet.cownerid", ;
		DisabledForeColor = 0,0,255, ;
		Enabled = .F., ;
		FontBold = .F., ;
		Height = 20, ;
		Left = 565, ;
		lenabled = .F., ;
		MaxLength = 10, ;
		Name = "txtcOwnerID1", ;
		TabIndex = 35, ;
		Top = 455, ;
		Visible = .F., ;
		Width = 76
		*< END OBJECT: ClassLib="..\common\cmgadget.vcx" BaseClass="textbox" />

	ADD OBJECT 'pageframe.Page1.txtcProdPeriod' AS txttextboxcustom WITH ;
		FontName = "Segoe UI", ;
		FontSize = 8, ;
		Height = 20, ;
		Left = 78, ;
		Name = "txtcProdPeriod", ;
		TabIndex = 14, ;
		Top = 57, ;
		Width = 24
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'pageframe.Page1.txtcProdPeriod1' AS txttextboxcustom WITH ;
		ControlSource = "csrctdet.cprodperiod", ;
		DisabledForeColor = 0,0,255, ;
		Enabled = .F., ;
		FontBold = .F., ;
		Height = 20, ;
		Left = 263, ;
		lenabled = .F., ;
		Name = "txtcProdPeriod1", ;
		TabIndex = 26, ;
		Top = 455, ;
		Visible = .F., ;
		Width = 24
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'pageframe.Page1.txtcProdYear' AS txttextboxcustom WITH ;
		FontName = "Segoe UI", ;
		FontSize = 8, ;
		Format = "XXXX", ;
		Height = 20, ;
		Left = 111, ;
		MaxLength = 4, ;
		Name = "txtcProdYear", ;
		TabIndex = 15, ;
		Top = 57, ;
		Width = 36
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'pageframe.Page1.txtcProdYear1' AS txttextboxcustom WITH ;
		ControlSource = "csrctdet.cprodyear", ;
		DisabledForeColor = 0,0,255, ;
		Enabled = .F., ;
		FontBold = .F., ;
		Format = "XXXX", ;
		Height = 20, ;
		Left = 296, ;
		lenabled = .F., ;
		MaxLength = 4, ;
		Name = "txtcProdYear1", ;
		TabIndex = 29, ;
		Top = 455, ;
		Visible = .F., ;
		Width = 36
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'pageframe.Page1.txtcWellID' AS txtquickfill WITH ;
		clistexpression = cwellid, ;
		clistworkarea = wells, ;
		FontName = "Segoe UI", ;
		FontSize = 8, ;
		Height = 20, ;
		Left = 13, ;
		MaxLength = 10, ;
		Name = "txtcWellID", ;
		TabIndex = 6, ;
		Top = 33, ;
		Width = 79
		*< END OBJECT: ClassLib="..\common\cmgadget.vcx" BaseClass="textbox" />

	ADD OBJECT 'pageframe.Page1.txtcWellName' AS txttextboxcustom WITH ;
		FontName = "Segoe UI", ;
		FontSize = 8, ;
		Height = 20, ;
		Left = 94, ;
		Name = "txtcWellName", ;
		TabIndex = 7, ;
		Top = 33, ;
		Width = 152
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'pageframe.Page1.txtnDaysOn' AS txttextboxcustom WITH ;
		Alignment = 3, ;
		ControlSource = "", ;
		FontName = "Segoe UI", ;
		FontSize = 8, ;
		Height = 20, ;
		Left = 485, ;
		Name = "txtnDaysOn", ;
		TabIndex = 18, ;
		Top = 57, ;
		Value = 0, ;
		Width = 48, ;
		ZOrderSet = 36
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'pageframe.Page1.txtnDaysOn1' AS txttextboxcustom WITH ;
		Alignment = 3, ;
		ControlSource = "csrctdet.ndayson", ;
		DisabledForeColor = 0,0,255, ;
		Enabled = .F., ;
		FontBold = .F., ;
		FontSize = 8, ;
		Height = 20, ;
		Left = 488, ;
		lenabled = .F., ;
		Name = "txtnDaysOn1", ;
		TabIndex = 34, ;
		Top = 455, ;
		Value = 0, ;
		Visible = .F., ;
		Width = 48, ;
		ZOrderSet = 36
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'pageframe.Page1.txtnPrice' AS txttextboxcustom WITH ;
		Alignment = 3, ;
		ControlSource = "", ;
		FontName = "Segoe UI", ;
		FontSize = 8, ;
		Format = "", ;
		Height = 20, ;
		InputMask = "999.999999", ;
		Left = 547, ;
		Name = "txtnPrice", ;
		TabIndex = 12, ;
		Top = 33, ;
		Value = 0, ;
		Width = 81, ;
		ZOrderSet = 14
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'pageframe.Page1.txtnTotal' AS txttextboxcustom WITH ;
		Alignment = 3, ;
		ControlSource = "", ;
		FontName = "Segoe UI", ;
		FontSize = 8, ;
		Format = "", ;
		Height = 20, ;
		InputMask = "999999999.99", ;
		Left = 645, ;
		Name = "txtnTotal", ;
		TabIndex = 13, ;
		Top = 33, ;
		Value = 0.00, ;
		Width = 94, ;
		ZOrderSet = 18
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'pageframe.Page1.txtnUnits' AS txttextboxcustom WITH ;
		Alignment = 3, ;
		ControlSource = "", ;
		FontName = "Segoe UI", ;
		FontSize = 8, ;
		Format = "", ;
		Height = 20, ;
		InputMask = "999999999999.99", ;
		Left = 421, ;
		Name = "txtnUnits", ;
		TabIndex = 11, ;
		Top = 33, ;
		Value = 0, ;
		Width = 109, ;
		ZOrderSet = 12
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'pageframe.Page2.cmdLookCOA' AS cmdcommandbuttoncustom WITH ;
		Caption = "Account", ;
		Height = 20, ;
		Left = 11, ;
		Name = "cmdLookCOA", ;
		TabIndex = 9, ;
		TabStop = .F., ;
		Top = 26, ;
		Width = 72, ;
		ZOrderSet = 33
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'pageframe.Page2.cmdLookDept' AS cmdcommandbuttoncustom WITH ;
		Caption = "Dept", ;
		Height = 20, ;
		Left = 500, ;
		Name = "cmdLookDept", ;
		TabIndex = 13, ;
		TabStop = .F., ;
		Top = 26, ;
		Width = 68
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'pageframe.Page2.cmdLookWell' AS cmdcommandbuttoncustom WITH ;
		Caption = " Well/Lease", ;
		Height = 20, ;
		Left = 379, ;
		Name = "cmdLookWell", ;
		TabIndex = 7, ;
		TabStop = .F., ;
		Top = 26, ;
		Width = 79
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'pageframe.Page2.lblCitemdesc' AS lblfieldlabelcustom WITH ;
		Caption = "Description", ;
		Height = 16, ;
		Left = 89, ;
		Name = "lblCitemdesc", ;
		TabIndex = 11, ;
		Top = 29, ;
		Width = 56
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'pageframe.Page2.lblNextension' AS lblfieldlabelcustom WITH ;
		AutoSize = .T., ;
		Caption = "Amount", ;
		Height = 16, ;
		Left = 690, ;
		Name = "lblNextension", ;
		TabIndex = 12, ;
		Top = 29, ;
		Width = 39
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'pageframe.Page2.lstNonWell' AS lstlistboxcustom WITH ;
		ColumnCount = 5, ;
		ColumnWidths = "70,245,80,80,120", ;
		FontName = "Courier New", ;
		Height = 385, ;
		Left = 4, ;
		Name = "lstNonWell", ;
		RowSource = "csrctdet.cacctno,cdesc,cwellid,cdeptno,namount", ;
		RowSourceType = 6, ;
		Top = 106, ;
		Width = 760
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="listbox" />

	ADD OBJECT 'pageframe.Page2.Shape1' AS shape WITH ;
		BackColor = 255,255,128, ;
		BorderStyle = 1, ;
		Height = 87, ;
		Left = 4, ;
		Name = "Shape1", ;
		SpecialEffect = 0, ;
		Top = 14, ;
		Width = 760, ;
		ZOrderSet = 0
		*< END OBJECT: BaseClass="shape" />

	ADD OBJECT 'pageframe.Page2.txtcAcctDesc' AS txttextboxcustom WITH ;
		BackColor = 212,208,200, ;
		Height = 20, ;
		Left = 11, ;
		lreadonly = .T., ;
		Name = "txtcAcctDesc", ;
		TabIndex = 6, ;
		TabStop = .F., ;
		Top = 71, ;
		Width = 239, ;
		ZOrderSet = 39
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'pageframe.Page2.txtcAcctNo' AS txtquickfill WITH ;
		clistexpression = cacctno, ;
		clistworkarea = coa, ;
		Height = 20, ;
		InputMask = "XXXXXX", ;
		Left = 11, ;
		MaxLength = 6, ;
		Name = "txtcAcctNo", ;
		TabIndex = 1, ;
		Top = 48, ;
		Width = 72, ;
		ZOrderSet = 41
		*< END OBJECT: ClassLib="..\common\cmgadget.vcx" BaseClass="textbox" />

	ADD OBJECT 'pageframe.Page2.txtCdeptdesc' AS txttextboxcustom WITH ;
		BackColor = 212,208,200, ;
		ControlSource = " ", ;
		Height = 20, ;
		Left = 500, ;
		lreadonly = .T., ;
		MaxLength = 30, ;
		Name = "txtCdeptdesc", ;
		TabIndex = 8, ;
		TabStop = .F., ;
		Top = 71, ;
		Width = 237
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'pageframe.Page2.txtcDeptNo' AS txtquickfill WITH ;
		clistexpression = cdeptno, ;
		clistworkarea = gldept, ;
		Height = 20, ;
		InputMask = "XXXXXXXX", ;
		Left = 500, ;
		MaxLength = 8, ;
		Name = "txtcDeptNo", ;
		TabIndex = 4, ;
		Top = 48, ;
		Width = 68
		*< END OBJECT: ClassLib="..\common\cmgadget.vcx" BaseClass="textbox" />

	ADD OBJECT 'pageframe.Page2.txtCitemdesc' AS txttextboxcustom WITH ;
		Comment = "", ;
		ControlSource = " ", ;
		Height = 20, ;
		Left = 87, ;
		MaxLength = 40, ;
		Name = "txtCitemdesc", ;
		TabIndex = 2, ;
		Top = 48, ;
		Width = 281
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'pageframe.Page2.txtcWellID' AS txtquickfill WITH ;
		clistexpression = cwellid, ;
		clistworkarea = wells, ;
		Height = 20, ;
		Left = 379, ;
		MaxLength = 10, ;
		Name = "txtcWellID", ;
		TabIndex = 3, ;
		Top = 48, ;
		Width = 79
		*< END OBJECT: ClassLib="..\common\cmgadget.vcx" BaseClass="textbox" />

	ADD OBJECT 'pageframe.Page2.txtcWellName' AS txttextboxcustom WITH ;
		BackColor = 212,208,200, ;
		Height = 20, ;
		Left = 253, ;
		Name = "txtcWellName", ;
		TabIndex = 10, ;
		Top = 71, ;
		Width = 235
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'pageframe.Page2.txtnExtension' AS txttextboxcustom WITH ;
		Alignment = 3, ;
		Height = 20, ;
		InputMask = "99999999.99", ;
		Left = 640, ;
		Name = "txtnExtension", ;
		TabIndex = 5, ;
		Top = 48, ;
		Value = 0.00, ;
		Width = 97
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtCcheckno' AS txttextboxcustom WITH ;
		ControlSource = "csrcthdr.ccheckno", ;
		Height = 20, ;
		Left = 420, ;
		MaxLength = 10, ;
		Name = "txtCcheckno", ;
		TabIndex = 11, ;
		Top = 55, ;
		Width = 89
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcDispCode' AS txttextboxcustom WITH ;
		Left = 444, ;
		Name = "txtcDispCode", ;
		TabIndex = 21, ;
		Top = 240, ;
		Visible = .F., ;
		ZOrderSet = 3
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcdisperm' AS txttextboxcustom WITH ;
		Left = 444, ;
		Name = "txtcdisperm", ;
		TabIndex = 20, ;
		Top = 276, ;
		Visible = .F., ;
		ZOrderSet = 5
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcID' AS txtquickfill WITH ;
		clistexpression = custvend.cid, ;
		clistworkarea = custvend, ;
		ControlSource = "csrcthdr.cid", ;
		Format = "K!", ;
		Height = 20, ;
		InputMask = "XXXXXXXXXX", ;
		Left = 16, ;
		lrequired = .T., ;
		MaxLength = 10, ;
		Name = "txtcID", ;
		TabIndex = 4, ;
		Top = 27, ;
		Width = 79
		*< END OBJECT: ClassLib="..\common\cmgadget.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcName' AS txttextboxcustom WITH ;
		BackColor = 212,208,200, ;
		ControlSource = "csrcthdr.cname", ;
		Height = 20, ;
		Left = 102, ;
		lreadonly = .T., ;
		MaxLength = 40, ;
		Name = "txtcName", ;
		TabIndex = 5, ;
		Top = 27, ;
		Width = 240
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtdpostdate' AS dpk WITH ;
		ControlSource = "csrcthdr.dpostdate", ;
		Height = 20, ;
		lcheckdate = .T., ;
		Left = 241, ;
		lmorethan90 = .T., ;
		Name = "txtdpostdate", ;
		TabIndex = 9, ;
		Top = 55, ;
		Width = 75, ;
		ZOrderSet = 21
		*< END OBJECT: ClassLib="..\custom\swdate.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtdRecDate' AS dpk WITH ;
		ControlSource = "csrcthdr.ddate", ;
		Height = 20, ;
		lcheckdate = .T., ;
		Left = 84, ;
		Name = "txtdRecDate", ;
		TabIndex = 8, ;
		Top = 55, ;
		Width = 75
		*< END OBJECT: ClassLib="..\custom\swdate.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtNcashamt' AS txttextboxcustom WITH ;
		BackColor = 212,208,200, ;
		ControlSource = "csrcthdr.ncashamt", ;
		Height = 20, ;
		InputMask = "$$$,$$$,$$$.99", ;
		Left = 585, ;
		Name = "txtNcashamt", ;
		ReadOnly = .F., ;
		TabIndex = 12, ;
		TabStop = .F., ;
		Top = 55, ;
		Width = 110
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtnSaltBBL' AS txttextboxcustom WITH ;
		Alignment = 3, ;
		Height = 20, ;
		Left = 36, ;
		Name = "txtnSaltBBL", ;
		SelectOnEntry = .T., ;
		TabIndex = 18, ;
		Top = 576, ;
		Value = 0, ;
		Visible = .F., ;
		Width = 36, ;
		ZOrderSet = 51
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtwastecode' AS txttextboxcustom WITH ;
		Left = 439, ;
		Name = "txtwastecode", ;
		TabIndex = 19, ;
		Top = 261, ;
		Visible = .F., ;
		ZOrderSet = 4
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />
	
	PROCEDURE addnonproddetail
		*
		*  Adds the detail line to the csrctdet table
		*
		
		LOCAL m.cItemDesc, m.cAcctNo, m.cUnitno, m.cDeptNo, m.nExtension, m.cidpurd
		LOCAL llReturn, loError, m.nAMount
		LOCAL m.cAcctNo, m.cBatch, m.cDeptNo, m.cDesc, m.cWellID
		
		llReturn = .T.
		
		TRY
		
		   m.cBatch = csrcthdr.cBatch
		
		   WITH THISFORM.PAGEFRAME.PAGE2
		      m.cDesc   = .txtcItemDesc.VALUE
		      m.nAmount = .txtnExtension.VALUE
		      m.cAcctNo = .txtcAcctno.VALUE
		      m.cDeptNo = .txtcDeptno.VALUE
		      m.cWellID = .txtcWellID.VALUE
		
		      IF m.nAmount = 0
		         llReturn = .F.
		         EXIT
		      ENDIF
		
		      IF EMPTY(m.cAcctNo)
		         THISFORM.oMessage.DISPLAY('An account number is required.')
		         THISFORM.setnextcontrol(THISFORM.PAGEFRAME.PAGE2.txtcAcctno)
		         llReturn = .F.
		         EXIT
		      ENDIF
		      IF EMPTY(m.cDeptNo) AND THISFORM.lDeptRequired
		         THISFORM.oMessage.DISPLAY('%msgDeptRequired')
		         THISFORM.setnextcontrol(THISFORM.PAGEFRAME.PAGE2.txtcDeptno)
		         llReturn = .F.
		         EXIT
		      ENDIF
		      IF EMPTY(m.cWellID) AND THISFORM.lWellRequired
		         THISFORM.oMessage.DISPLAY('%msgWellRequired')
		         THISFORM.setnextcontrol(THISFORM.PAGEFRAME.PAGE2.txtcWellID)
		         llReturn = .F.
		         EXIT
		      ENDIF
		
		      swselect('csrctdet')
		      SET FILTER TO
		
		      THISFORM.new('CSRCTDET')
		      THISFORM.cmdatamanager.REPLACE('CSRCTDET', 'cBatch', m.cBatch)
		      THISFORM.cmdatamanager.REPLACE('CSRCTDET', 'cDesc', m.cDesc)
		      THISFORM.cmdatamanager.REPLACE('CSRCTDET', 'nAmount', m.nAmount)
		      THISFORM.cmdatamanager.REPLACE('CSRCTDET', 'cAcctno', m.cAcctNo)
		      THISFORM.cmdatamanager.REPLACE('CSRCTDET', 'cDeptno', m.cDeptNo)
		      THISFORM.cmdatamanager.REPLACE('CSRCTDET', 'cWellID', m.cWellID)
		      THISFORM.cmdatamanager.REPLACE('CSRCTDET', 'lWellRcpt', .F.)
		      swselect('csrctdet')
		      SET FILTER TO lWellRcpt = .F.
		*.txtcItemDesc.VALUE = ' '
		      .txtnExtension.VALUE = 0
		*.txtcAcctno.VALUE = ' '  &&  Don't re-set the account number, since it may be used for the next detail line - BH 10/03/2008
		      .txtcDeptno.VALUE = ' '
		*.txtcAcctDesc.VALUE = ' '
		      .txtcDeptDesc.VALUE = ' '
		      .lstnonwell.REQUERY()
		      .lstnonwell.REFRESH()
		      .lstnonwell.LISTITEMID = .lstnonwell.LISTCOUNT
		      .txtcAcctno.SETFOCUS()
		      THISFORM.CalcTot()
		      THISFORM.lInvestment = .F.
		      THISFORM.setstate()
		      .REFRESH()
		   ENDWITH
		CATCH TO loError
		   llReturn = .F.
		   DO errorlog WITH 'AddNonProdDetail', loError.LINENO, 'Production Receipts_D', loError.ERRORNO, loError.MESSAGE, '', loError
		   MESSAGEBOX('Unable to process the detail line at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		        'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		RETURN llReturn
		
		
		 
	ENDPROC

	PROCEDURE addproddetail		&& Adds detail lines for page1
		*
		*  Adds the detail line to the csdisdet table
		*
		LOCAL m.cItemDesc, m.cAcctNo, m.cUnitno, m.cDeptNo, m.nExtension, m.cidpurd, llExpenseEntry
		LOCAL lcAcctNo, lcID, llCloseRun, m.cProdPeriod, m.cProdYear, m.cUnits, m.nPrice, m.cDesc
		LOCAL m.cIntType, m.nAmount, m.cBegRange, m.cEndRange, m.lGrossUnits, m.nDaysOn, m.cWellName
		LOCAL lcAcctRev, lcAcctExp, lcSuspense, m.cBatch, m.cWellID, m.cOwnerID, m.cType, lcClearing
		LOCAL m.cidRctD, lcType
		LOCAL lGrossUnits, lWellRcpt, lcDeptNo, lcidrctd, llNoGo, llReturn, llTaxError, loError
		LOCAL cAcctNo, cBatch, cBegRange, cDeptNo, cDesc, cDisperm, cEndRange, cGroup, cIntType, cOwnerID
		LOCAL cProdPeriod, cProdYear, cWasteCode, cWellID, cWellName, cdispcode, cidRctD, cwellstat
		LOCAL nAmount, nDaysOn, nPrice, nSaltBBL, nUnits, temp[1]
		
		llReturn = .T.
		 
		
		TRY
		
		    lcID           = csrcthdr.cid
		    m.cBatch       = csrcthdr.cBatch
		    llExpenseEntry = .F.
		
		    * Set the default for property lSendToAllocate
		    THISFORM.lSendToAllocate = m.goApp.lSendToAllocate
		    
		   * Get the processing options for JV posting if the
		   * partnership module is active - pws 10/18/20
		   IF m.goapp.lPartnershipMod
		      swselect('progopt')
		      GO TOP
		      llJVPosting = progopt.lJVPosting
		   ELSE
		      llJVPosting = .F.
		   ENDIF
		   
		    swselect('revsrc')
		    SET ORDER TO crevkey
		    IF NOT SEEK(lcID)
		        THISFORM.omessage.Warning('The ID entered in the received from field is not a purchaser ID.  Please enter a purchaser ID when receiving revenue for wells.')
		        THISFORM.setnextcontrol(THISFORM.txtcid)
		        llReturn = .F.
		        EXIT
		    ENDIF
		
		    * Get the department for distributions
		    swselect('options')
		    lcDeptNo = cDeptNo
		
		    swselect('glopt')
		    GO TOP
		    lcAcctRev  = cRevClear
		    lcAcctExp  = cExpClear
		    lcSuspense = cSuspense
		    IF EMPTY(lcSuspense)
		        lcSuspense = '999999'
		    ENDIF
		    THISFORM.lNewDetail = .T.
		 
		    WITH THIS.PAGEFRAME.PAGE1
		        m.cWellID = .txtcWellID.VALUE
		        lcType    = ALLTRIM(.cboType.VALUE)
		        IF EMPTY(lcType)
		           thisform.oMessage.Warning('The TYPE(BBL, MCF, etc) Must be specified when entering Production Revenue')
		           thisform.setnextcontrol(thisform.pageFrame.page1.cbotype)
		           llReturn = .f.
		           EXIT
		        ENDIF 
		        IF EMPTY(m.cWellID)  &&  No well specified
		            THISFORM.omessage.Warning('You must specify a well for a production receipt.')
		            THISFORM.setnextcontrol(.txtcWellID)
		            llReturn = .F.
		            EXIT
		        ENDIF
		
		        IF 'TAX' $ lcType
		            swselect('wells')
		            LOCATE FOR cWellID == m.cWellID
		            IF FOUND()
		                DO CASE
		                    CASE NOT wells.lsev1o AND lcType = 'OTAX1'
		                        IF THISFORM.omessage.CONFIRM('The purchaser has not been set to withhold Oil Tax 1 for this well. ' + ;
		                                  'Do you want to set this option in the well record for this well?')
		                            swselect('wells')
		                            REPLACE lsev1o WITH .T., ;
		                                ldiroilpurch WITH .T.
		                            TABLEUPDATE()
		                        ELSE
		                            llReturn = .F.
		                            EXIT
		                        ENDIF
		                    CASE NOT wells.lsev2o AND lcType = 'OTAX2'
		                        IF THISFORM.omessage.CONFIRM('The purchaser has not been set to withhold Oil Tax 2 for this well. ' + ;
		                                  'Do you want to set this option in the well record for this well?')
		                            swselect('wells')
		                            REPLACE lsev2o WITH .T., ;
		                                ldiroilpurch WITH .T.
		                            TABLEUPDATE()
		                        ELSE
		                            llReturn = .F.
		                            EXIT
		                        ENDIF
		                    CASE NOT wells.lsev3o AND lcType = 'OTAX3'
		                        IF THISFORM.omessage.CONFIRM('The purchaser has not been set to withhold Oil Tax 3 for this well. ' + ;
		                                  'Do you want to set this option in the well record for this well?')
		                            swselect('wells')
		                            REPLACE lsev3o WITH .T., ;
		                                ldiroilpurch WITH .T.
		                            TABLEUPDATE()
		                        ELSE
		                            llReturn = .F.
		                            EXIT
		                        ENDIF
		                    CASE NOT wells.lsev4o AND lcType = 'OTAX4'
		                        IF THISFORM.omessage.CONFIRM('The purchaser has not been set to withhold Oil Tax 4 for this well. ' + ;
		                                  'Do you want to set this option in the well record for this well?')
		                            swselect('wells')
		                            REPLACE lsev4o WITH .T., ;
		                                ldiroilpurch WITH .T.
		                            TABLEUPDATE()
		                        ELSE
		                            llReturn = .F.
		                            EXIT
		                        ENDIF
		                    CASE NOT wells.lsev1g AND lcType = 'GTAX1'
		                        IF THISFORM.omessage.CONFIRM('The purchaser has not been set to withhold Gas Tax 1 for this well. ' + ;
		                                  'Do you want to set this option in the well record for this well?')
		                            swselect('wells')
		                            REPLACE lsev1g WITH .T., ;
		                                ldirgaspurch WITH .T.
		                            TABLEUPDATE()
		                        ELSE
		                            llReturn = .F.
		                            EXIT
		                        ENDIF
		                    CASE NOT wells.lsev2g AND lcType = 'GTAX2'
		                        IF THISFORM.omessage.CONFIRM('The purchaser has not been set to withhold Gas Tax 2 for this well. ' + ;
		                                  'Do you want to set this option in the well record for this well?')
		                            swselect('wells')
		                            REPLACE lsev2g WITH .T., ;
		                                ldirgaspurch WITH .T.
		                            TABLEUPDATE()
		                        ELSE
		                            llReturn = .F.
		                            EXIT
		                        ENDIF
		                    CASE NOT wells.lsev3g AND lcType = 'GTAX3'
		                        IF THISFORM.omessage.CONFIRM('The purchaser has not been set to withhold Gas Tax 3 for this well. ' + ;
		                                  'Do you want to set this option in the well record for this well?')
		                            swselect('wells')
		                            REPLACE lsev3g WITH .T., ;
		                                ldirgaspurch WITH .T.
		                            TABLEUPDATE()
		                        ELSE
		                            llReturn = .F.
		                            EXIT
		                        ENDIF
		                    CASE NOT wells.lsev4g AND lcType = 'GTAX4'
		                        IF THISFORM.omessage.CONFIRM('The purchaser has not been set to withhold Gas Tax 4 for this well. ' + ;
		                                  'Do you want to set this option in the well record for this well?')
		                            swselect('wells')
		                            REPLACE lsev4g WITH .T., ;
		                                ldirgaspurch WITH .T.
		                            TABLEUPDATE()
		                        ELSE
		                            llReturn = .F.
		                            EXIT
		                        ENDIF
		                    CASE NOT wells.lsev1P AND lcType = 'PTAX1'
		                        IF THISFORM.omessage.CONFIRM('The purchaser has not been set to withhold Other Tax 1 for this well. ' + ;
		                                  'Do you want to set this option in the well record for this well?')
		                            swselect('wells')
		                            REPLACE lsev1P WITH .T.
		                        ELSE
		                            llTaxError = .T.
		                        ENDIF
		                    CASE NOT wells.lsev2P AND lcType = 'PTAX2'
		                        IF THISFORM.omessage.CONFIRM('The purchaser has not been set to withhold Other Tax 2 for this well. ' + ;
		                                  'Do you want to set this option in the well record for this well?')
		                            swselect('wells')
		                            REPLACE lsev2P WITH .T.
		                        ELSE
		                            llTaxError = .T.
		                        ENDIF
		                    CASE NOT wells.lsev3P AND lcType = 'PTAX3'
		                        IF THISFORM.omessage.CONFIRM('The purchaser has not been set to withhold Other Tax 3 for this well. ' + ;
		                                  'Do you want to set this option in the well record for this well?')
		                            swselect('wells')
		                            REPLACE lsev3P WITH .T.
		                        ELSE
		                            llTaxError = .T.
		                        ENDIF
		                    CASE NOT wells.lsev4P AND lcType = 'PTAX4'
		                        IF THISFORM.omessage.CONFIRM('The purchaser has not been set to withhold Other Tax 4 for this well. ' + ;
		                                  'Do you want to set this option in the well record for this well?')
		                            swselect('wells')
		                            REPLACE lsev4P WITH .T.
		                        ELSE
		                            llTaxError = .T.
		                        ENDIF
		
		                ENDCASE
		            ENDIF
		        ENDIF
		        m.cDesc       = .txtcWellName.VALUE
		        m.nUnits      = .txtnUnits.VALUE
		        m.nPrice      = .txtnPrice.VALUE
		        m.nAmount     = .txtnTotal.VALUE
		        m.cBegRange   = .txtcBegRange.VALUE
		        m.cEndRange   = .txtcEndRange.VALUE
		        m.nDaysOn     = .txtnDaysOn.VALUE
		        m.cWellName   = .txtcWellName.VALUE
		        m.cProdPeriod = .txtcProdPeriod.VALUE
		        m.cProdYear   = .txtcProdYear.VALUE
		        m.cIntType    = LEFT(.cboIntType.VALUE, 1)
		        m.cDeptNo     = lcDeptNo
		        m.lGrossUnits = .chkgross.VALUE
		        m.cDisperm    = THISFORM.txtcDisperm.VALUE
		        m.cdispcode   = THISFORM.txtcdispCode.VALUE
		        m.cWasteCode  = THISFORM.txtwastecode.VALUE
		        m.nSaltBBL    = THISFORM.txtnSaltBBL.VALUE
		        m.cDeck       = .cbodeck.Value 
		
		        * Check Water hauling variables for NULL
		        IF ISNULL(m.nSaltBBL)
		            m.nSaltBBL = 0
		        ENDIF
		        IF ISNULL(m.cDisperm)
		            m.cDisperm = ''
		        ENDIF
		        IF ISNULL(m.cdispcode)
		            m.cdispcode = ''
		        ENDIF
		        IF ISNULL(m.cWasteCode)
		            m.cWasteCode = ''
		        ENDIF
		
		        IF m.cIntType = 'R'
		            m.cIntType = 'L'
		        ENDIF
		
		        *  Get the group associated with the well
		        swselect('wells')
		        LOCATE FOR cWellID = m.cWellID
		        IF FOUND()
		            m.cGroup    = cGroup
		            m.cwellstat = cwellstat
		        ELSE
		            m.cGroup    = '00'
		            m.cwellstat = 'A'
		        ENDIF
		
		        * Check to make sure the period is not closed. Don't allow expense to be allocated to a closed period.
		        swselect('income')
		        LOCATE FOR cWellID = m.cWellID AND cBatch = m.cBatch
		        IF FOUND() AND nRunNo # 0
		            THIS.omessage.Warning('The revenue in this receipt has already been processed. It cannot be modified.')
		            llReturn = .F.
		            EXIT
		        ENDIF
		
		
		        m.cOwnerID = .txtcOwnerID.VALUE
		
		        *  Check to see if its a one man item.  If so check to see
		        *  if the type of income is directly paid.  If so, don't let
		        *  this allocation happen.
		        IF NOT THISFORM.lInvestment AND NOT llJVPosting
		            swselect('wellinv')
		            LOCATE FOR cOwnerID == m.cOwnerID AND cWellID == m.cWellID
		            IF FOUND()
		                llNoGo = .F.
		                DO CASE
		                    CASE lcType = 'BBL'
		                        IF wellinv.cdirect = 'O' OR wellinv.cdirect = 'B'
		                            llNoGo = .T.
		                        ENDIF
		                    CASE lcType = 'MCF'
		                        IF wellinv.cdirect = 'G' OR wellinv.cdirect = 'B'
		                            llNoGo = .T.
		                        ENDIF
		                ENDCASE
		                IF llNoGo
		                    THISFORM.omessage.Warning('This type of income cannot be allocated all to this owner. ' + ;
		                                              'The owner is directly paid this type of income.')
		                    THISFORM.setnextcontrol(.txtcWellID)
		                    llReturn = .F.
		                    EXIT
		                ENDIF
		            ENDIF
		        ENDIF
		
		        *  Make sure the owner type is specified if the well is an investment well.
		        IF EMPTY(m.cIntType) AND THISFORM.lInvestment
		            THISFORM.omessage.Warning('For posting purposes, the interest type must be specified for investment wells.')
		            THISFORM.setnextcontrol(.cboIntType)
		            llReturn = .F.
		            EXIT
		        ENDIF
		
		        IF NOT EMPTY(m.cWellID) AND NOT EMPTY(m.cProdYear) AND NOT EMPTY(m.cProdPeriod) AND NOT THISFORM.lInvestment AND NOT llJVPosting
		            *  If we're sending everything to the allocation file it doesn't matter if it has owners
		            IF NOT THISFORM.lSendToAllocate
		                *  Make sure the well has owners
		                SELECT cWellID FROM wellinv WHERE cWellID = m.cWellID INTO ARRAY temp
		                IF _TALLY = 0
		                    THISFORM.omessage.Warning('Unable to allocate to this period for well: ' + m.cWellID + ' This well has no owners. Revenue will be sent to unallocated file.')
		                    THISFORM.lSendToAllocate = .T.
		                ENDIF
		            ENDIF
		        ENDIF
		
		
		        IF TYPE('m.nDaysOn') # 'N'
		            m.nDaysOn = VAL(m.nDaysOn)
		        ENDIF
		
		        IF NOT EMPTY(m.cOwnerID)
		            swselect('wellinv')
		            LOCATE FOR wellinv.cWellID = m.cWellID AND wellinv.cOwnerID = m.cOwnerID
		            IF NOT FOUND('wellinv')
		                THISFORM.omessage.DISPLAY('You cannot allocate a well revenue entry to an owner that has no interests in that well.')
		                THISFORM.setnextcontrol(.txtcOwnerID)
		                llReturn = .F.
		                EXIT
		            ENDIF
		        ENDIF
		
		        IF m.nAmount = 0
		            llReturn = .F.
		            EXIT
		        ENDIF
		
		        swselect('wells')
		        SET ORDER TO cWellID
		        IF SEEK(m.cWellID)
		            m.cDesc = cWellName
		            IF cwellstat = 'V' OR llJVPosting
		                swselect('revcat')
		                LOCATE FOR cRevType = lcType
		                IF FOUND()
		                    DO CASE
		                        CASE m.cIntType = 'L'
		                            lcClearing = ccracctnol
		                        CASE m.cIntType = 'O'
		                            lcClearing = ccracctnoo
		                        CASE m.cIntType = 'W'
		                            lcClearing = ccracctnow
		                    ENDCASE
		                ELSE
		                    swselect('expcat')
		                    LOCATE FOR ccatcode = lcType
		                    IF FOUND()
		                        lcClearing     = cdraccto
		                        llExpenseEntry = .T.
		                        m.nAmount      = m.nAmount * -1
		                    ELSE
		                        THISFORM.omessage.Warning('The entered revenue type is not valid. Please correct.')
		                        THISFORM.setnextcontrol(.cboType)
		                        llReturn = .F.
		                        EXIT
		                    ENDIF
		                ENDIF
		
		                IF EMPTY(lcClearing) AND llExpenseEntry  &&  No account specified, and it's an expense entry
		                    THISFORM.omessage.Warning('The account for posting this expense entry has not been defined on the AFE/Expense Category screen, so it will be posted to account 999999.')
		                    m.cAcctNo  = lcSuspense
		                    lcClearing = m.cAcctNo
		                ENDIF
		                IF EMPTY(lcClearing) AND NOT llExpenseEntry  &&  No account specified on the revenue category
		                    THISFORM.omessage.Warning('The account for posting this type of revenue has not been defined on the Revenue Categories screen, so it will be posted to account 999999.')
		                    m.cAcctNo  = lcSuspense
		                    lcClearing = m.cAcctNo
		                ENDIF
		            ELSE
		                swselect('revcat')
		                LOCATE FOR cRevType = lcType
		                IF NOT FOUND()
		                    swselect('expcat')
		                    LOCATE FOR ccatcode = lcType
		                    IF NOT FOUND()
		                        THISFORM.omessage.Warning('The entered revenue type is not valid. Please correct.')
		                        THISFORM.setnextcontrol(.cboType.VALUE)
		                        llReturn = .F.
		                        EXIT
		                    ELSE
		                        m.nAmount = m.nAmount * -1
		                    ENDIF
		                    lcClearing = lcAcctExp
		                ELSE
		                    lcClearing = lcAcctRev
		                ENDIF
		            ENDIF
		        ELSE
		            lcClearing = lcAcctRev
		        ENDIF
		
		        IF 'TAX' $ lcType 
		            m.nAmount = m.nAmount * -1
		        ENDIF
		
		        m.cAcctNo = lcClearing
		
		        IF EMPTY(m.cAcctNo)
		            m.cAcctNo  = '999999'
		            lcClearing = m.cAcctNo
		            THISFORM.omessage.Warning('The Revenue Clearing account has not been specified in G/L preferences. Defaulting to account 999999')
		        ENDIF
		        m.lWellRcpt = .T.
		
		        WITH THISFORM
		            swselect('csrctdet')
		            SET FILTER TO
		            lcidrctd = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Cash Receipt Detail')
		            SET DELETED OFF
		            SELECT csrctdet1
		            SET ORDER TO cidpurd
		            DO WHILE SEEK(lcidrctd)
		                lcidrctd = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Cash Receipt Detail')
		            ENDDO
		            SET DELETED ON
		            m.cidRctD = lcidrctd
		            *      INSERT INTO csrctdet FROM MEMVAR
		
		            .New('CSRCTDET')
		            .cmdatamanager.REPLACE('CSRCTDET', 'cWellID', m.cWellID)
		            .cmdatamanager.REPLACE('CSRCTDET', 'cDeck', m.cDeck)
		            .cmdatamanager.REPLACE('CSRCTDET', 'cDesc', m.cWellName)
		            .cmdatamanager.REPLACE('CSRCTDET', 'nAmount', m.nAmount)
		            .cmdatamanager.REPLACE('CSRCTDET', 'cAcctno', lcClearing)
		            .cmdatamanager.REPLACE('CSRCTDET', 'cDeptNo', lcDeptNo)
		            .cmdatamanager.REPLACE('CSRCTDET', 'cBegRange', m.cBegRange)
		            .cmdatamanager.REPLACE('CSRCTDET', 'cEndRange', m.cEndRange)
		            .cmdatamanager.REPLACE('CSRCTDET', 'cOwnerID', m.cOwnerID)
		            .cmdatamanager.REPLACE('CSRCTDET', 'nUnits', m.nUnits)
		            .cmdatamanager.REPLACE('CSRCTDET', 'nPrice', m.nPrice)
		            .cmdatamanager.REPLACE('CSRCTDET', 'nDaysOn', m.nDaysOn)
		            .cmdatamanager.REPLACE('CSRCTDET', 'cType', lcType)
		            .cmdatamanager.REPLACE('CSRCTDET', 'lWellRcpt', .T.)
		            .cmdatamanager.REPLACE('CSRCTDET', 'cProdPeriod', m.cProdPeriod)
		            .cmdatamanager.REPLACE('CSRCTDET', 'cProdYear', m.cProdYear)
		            .cmdatamanager.REPLACE('CSRCTDET', 'lGrossUnits', m.lGrossUnits)
		            .cmdatamanager.REPLACE('CSRCTDET', 'cdisperm', m.cDisperm)
		            .cmdatamanager.REPLACE('CSRCTDET', 'cdispcode', m.cdispcode)
		            .cmdatamanager.REPLACE('CSRCTDET', 'cwastecode', m.cWasteCode)
		            .cmdatamanager.REPLACE('CSRCTDET', 'nsaltbbl', m.nSaltBBL)
		            swselect('csrctdet')
		            SET FILTER TO lWellRcpt = .T.
		        ENDWITH
		
		        *   .txtcWellName.VALUE = ' '
		        .txtnTotal.VALUE = 0
		        *   .txtcWellID.VALUE = ' '
		        .txtnUnits.VALUE = 0
		        *   .txtnPrice.VALUE = 0
		        *   .txtcProdPeriod.VALUE = ' '
		        *   .txtcProdYear.VALUE = ' '
		        .txtcOwnerID.VALUE          = ''
		        THISFORM.txtcdispCode.VALUE = ' '
		        THISFORM.txtcDisperm.VALUE  = ' '
		        THISFORM.txtwastecode.VALUE = ' '
		        THISFORM.txtnSaltBBL.SetValue(0)
		        .lstWellRcpt.REQUERY()
		        .lstWellRcpt.LISTITEMID = .lstWellRcpt.LISTCOUNT
		        .lstWellRcpt.REFRESH()
		        .txtcWellID.SETFOCUS()
		        THISFORM.lInvestment = .F.
		        THISFORM.lNewDetail  = .F.
		        THISFORM.CalcTot()
		        THISFORM.setstate()
		        THISFORM.refreshinfo()
		        .REFRESH()
		        THISFORM.PAGEFRAME.PAGE1.cboType.VALID()
		    ENDWITH
		CATCH TO loError
		    llReturn = .F.
		    DO errorlog WITH 'AddProdDetail', loError.LINENO, 'Production Receipt_D', loError.ERRORNO, loError.MESSAGE, '', loError
		    MESSAGEBOX('Unable to process the detail line at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		          'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		RETURN llReturn
		
		
		
		
	ENDPROC

	PROCEDURE calcdays		&& Calculates the dayson from the period ranges entered.
		LOCAL ldDate1, ldDate2, lnDays, lcYear, lcRange1, lcRange2
		
		*
		*  Get the current year to use to build the date.
		*
		lcYear   = STR(YEAR(DATE()),4)
		
		*
		*  Put the period ranges in variables to make them easier
		*  to work with.
		*
		lcRange1 = THISFORM.PAGEFRAME.page1.txtcBegRange.VALUE
		lcRange2 = THISFORM.PAGEFRAME.page1.txtcEndRange.VALUE
		
		*
		*  Check to see if we're supposed to calculate the dayson
		*
		swselect('options')
		GO TOP
		glCalcDays = lCalcDays
		
		*
		*  Calculate the number of days between the ranges
		*
		IF glCalcDays and lcRange1 <> '  /  ' AND lcRange2 <> '  /  '
		   IF LEFT(lcRange1,2) > LEFT(lcRange2,2)
		      lcYear1 = STR(VAL(lcYear)+1,4)
		   ELSE
		      IF LEFT(lcRange1,2) = LEFT(lcRange2,2)
		         IF RIGHT(lcRange1,2) > RIGHT(lcRange2,2)
		            lcYear1 = STR(VAL(lcYear)+1,4)
		         ELSE
		            lcYear1 = lcYear
		         ENDIF
		      ELSE
		         lcYear1 = lcYear
		      ENDIF
		   ENDIF
		   ldDate1 = CTOD(lcRange1+'/'+lcYear)
		   ldDate2 = CTOD(lcRange2+'/'+lcYear1)
		   lnDays  = (ldDate2 - ldDate1) + 1
		   RETURN (lnDays)
		ELSE
		   RETURN (0)
		ENDIF
		
	ENDPROC

	PROCEDURE calcext		&& Calculates the detail extension total
	ENDPROC

	PROCEDURE calctot		&& Calculates the Invoice Totals
		*
		*  Calculates the invoice totals
		*
		LOCAL lnSelect, lnRecno, lnTotal, lcBatch, lcFilter
		
		IF thisform.lNewDetail
		   RETURN
		ENDIF   
		
		lcBatch = CSRCTHDR.cbatch
		
		lnSelect = SELECT()
		swselect('csrctdet')
		lnRecNo = RECNO()
		lcFilter = FILTER()
		SET FILTER TO
		lnTotal = 0
		SCAN FOR cBatch == lcBatch
		   lnTotal = lnTotal + nAmount
		ENDSCAN   
		
		swselect('csrctdet')
		SET FILTER TO &lcFilter
		IF lnRecNo <= RECC()
		   GOTO lnRecNo
		ELSE
		   GO TOP    
		ENDIF   
		
		SELECT (lnSelect)
		
		* Save the receipt total for later comparison
		*thisform.nrcpttotal = lnTotal
		
		IF csrcthdr.nCashAmt <> lnTotal
		   THIS.cmdatamanager.REPLACE('CSRCThdr', 'nCashAmt', lnTotal)
		   THISFORM.txtnCashamt.REFRESH()
		ENDIF
		
		
		
	ENDPROC

	PROCEDURE checkhist		&& Returns .T. if the given production period is closed.
		LPARA tcYear, tcPeriod, tcGroup
		LOCAL llHist, llSepClose, lcDeleted
		*
		*  Checks to see if the given period is closed
		*  Returns .T. if the period is closed
		*
		
		lcDeleted = SET('DELETED')
		SET DELETED ON
		
		llHist = .F.
		
		IF tcGroup = '**'
		   swselect('sysctl')
		   LOCATE FOR cyear+cperiod = tcYear+tcPeriod AND lDisbMan AND cTypeClose = 'R'
		   IF FOUND()
		      llHist = .T.
		   ENDIF   
		ELSE
		   swselect('sysctl')
		   SET ORDER TO yrprdgrp
		   IF SEEK(tcYear+tcPeriod+tcGroup+'YR')
		      llHist = .T.
		   ENDIF
		ENDIF
		
		SET DELETED &lcDeleted
		
		RETURN (llHist)
		
	ENDPROC

	PROCEDURE checkprice
		**  Check for default prices, and fill them in, if there's not already a price specified on the screen.
		**  Check the well record for this purchaser and the appropriate revenue type, and if that's not filled in
		**  check the purchaser record to see if they have a default price specified.  If neither, leave alone.
		
		LOCAL lcWellID, lcType, lcRevKey
		
		lcWellID = THISFORM.PAGEFRAME.Page1.txtcWellID.VALUE
		lcType   = THISFORM.PAGEFRAME.Page1.cboType.VALUE
		lcRevKey = allt(THISFORM.txtcID.VALUE)
		
		IF THISFORM.PAGEFRAME.Page1.txtnPrice.VALUE = 0 AND INLIST(lcType,'MCF','BBL')
		   swselect('wells')
		   SET ORDER TO cwellid
		   IF SEEK(lcWellID)
		      IF lcType = 'MCF'
		         IF allt(wells.cRevMCF) == lcRevKey AND wells.nMCFPrice <> 0
		            THISFORM.PAGEFRAME.Page1.txtnPrice.SET('value',wells.nMCFPrice)
		         ENDIF
		      ENDIF
		      IF lcType = 'BBL'
		         IF allt(wells.cRevBBL) == lcRevKey AND wells.nBBLPrice <> 0
		            THISFORM.PAGEFRAME.Page1.txtnPrice.SET('value',wells.nBBLPrice)
		         ENDIF
		      ENDIF
		   ENDIF
		
		   IF THISFORM.PAGEFRAME.Page1.txtnPrice.value = 0  &&  Still zero, which means that it wasn't filled in above, so check the purchaser record for a default price
		      swselect('revsrc')
		      SET ORDER TO cRevKey
		      IF SEEK(lcRevKey) AND nDefPrice <> 0
		         THISFORM.PAGEFRAME.Page1.txtnPrice.SET('value',revsrc.nDefPrice)
		      ENDIF
		   ENDIF
		ENDIF
		
	ENDPROC

	PROCEDURE daysonsave		&& Saves the number of days the well was on.
		LPARA tcWellID, tcYear, tcPeriod, tnDaysOn
		
		* pws - 2010/10/05  No longer using table welldays
		RETURN
		
		
	ENDPROC

	PROCEDURE Destroy
		thisform.grouptran.unload()
		DODEFAULT()
	ENDPROC

	PROCEDURE dmincome		&& Either places the income entries in the INCSUSP or INCOME tables depending on whether the production year and period were specified.
		LOCAL lcBatch, llReturn
		
		llReturn = .T.
		
		lcBatch = csrcthdr.cbatch
		
		* Post the revenue from this receipt to the income and expense tables
		llReturn = PostIncome(lcBatch)
		
		IF !llReturn
		    MESSAGEBOX('Unable to process the receipt at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		         'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDIF 
	ENDPROC

	PROCEDURE editdetail1		&& Edit a detail line
		WITH THISFORM.PAGEFRAME.PAGE1
		
		    IF NOT INLIST(csrctdet.ctype,'BBL','MCF','OTH','MISC1','MISC2','TRANS')
		       .txtnTotal.VALUE      = csrctdet.nAmount * -1
		    ELSE
		       .txtnTotal.VALUE      = csrctdet.nAmount
		    ENDIF    
		    
		   .txtcWellID.VALUE     = csrctdet.cWellID
		   .txtnUnits.VALUE      = csrctdet.nunits
		   .txtnPrice.VALUE      = csrctdet.nPrice
		   .cboType.VALUE        = csrctdet.cType 
		   .txtcOwnerID.SET('value',csrctdet.cownerid)
		   .txtcProdYear.VALUE   = csrctdet.cProdYear
		   .txtcProdPeriod.VALUE = csrctdet.cProdPeriod
		   .txtnDaysOn.VALUE     = csrctdet.nDaysOn
		   .txtcBegRange.VALUE   = csrctdet.cbegrange
		   .txtcEndRange.VALUE   = csrctdet.cendrange
		   .chkgross.value       = csrctdet.lgrossunits
		
		   *  Fill in the well name
		   swselect('wells')
		   SET ORDER TO cWellID
		   IF SEEK(csrctdet.cWellID)
		      .txtcWellName.set('VALUE',wells.cwellname)
		      THISFORM.lInvestment = IIF(wells.cwellstat='V',.T.,.F.)
		
		      IF THISFORM.lInvestment
		         THISFORM.PAGEFRAME.PAGE1.cmdlookowner.VISIBLE = .F.
		         THISFORM.PAGEFRAME.PAGE1.txtcOwnerID.VISIBLE  = .F.
		         THISFORM.PAGEFRAME.PAGE1.lblIntType.VISIBLE = .T.
		         THISFORM.PAGEFRAME.PAGE1.cboIntType.VISIBLE = .T.
		      ELSE
		         THISFORM.PAGEFRAME.PAGE1.lblIntType.VISIBLE = .F.
		         THISFORM.PAGEFRAME.PAGE1.cboIntType.VISIBLE = .F.
		         THISFORM.PAGEFRAME.PAGE1.cmdlookowner.VISIBLE = .T.
		         THISFORM.PAGEFRAME.PAGE1.txtcOwnerID.VISIBLE  = .T.
		      ENDIF
		
		   ENDIF
		
		   .txtcWellID.SETFOCUS()
		
		   swselect('csrctdet')
		   THISFORM.cmdatamanager.deleterecord('Csrctdet')
		   THISFORM.cmdatamanager.setrecordposition('Csrcthdr')
		   .lstwellrcpt.requery()
		   .lstwellrcpt.refresh()
		   THISFORM.calctot()
		   THISFORM.setstate()
		   THISFORM.REFRESH()
		ENDWITH
		
	ENDPROC

	PROCEDURE editdetail2
		*
		*  Let the form know something changed
		*
		THISFORM.setstate()
		WITH THISFORM.PAGEFRAME.PAGE2
		   .txtnExtension.VALUE      = csrctdet.nAmount
		   .txtcAcctNo.VALUE         = csrctdet.cacctno
		   .txtcitemdesc.VALUE       = csrctdet.cdesc
		   .txtcwellid.VALUE         = csrctdet.cwellid
		   .txtcdeptno.VALUE         = csrctdet.cdeptno
		   
		   *  Fill in the well name
		   swselect('wells')
		   SET ORDER TO cWellID
		   IF SEEK(csrctdet.cWellID)
		      .txtcWellName.VALUE = wells.cwellname
		   ENDIF
		   
		   *  Fill in the account name
		   swselect('coa')
		   SET ORDER TO acctno
		   IF SEEK(csrctdet.cacctno)
		      .txtcAcctDesc.set('VALUE',coa.cAcctDesc)
		   ENDIF
		   
		   *  Fill in the department name
		   swselect('gldept')
		   SET ORDER TO cdeptno
		   IF SEEK(csrctdet.cdeptno)
		      .txtcDeptDesc.set('VALUE',gldept.cDeptDesc)
		   ENDIF
		
		   swselect('csrctdet')
		   THISFORM.cmdatamanager.deleterecord('Csrctdet')
		   THISFORM.cmdatamanager.setrecordposition('Csrcthdr')
		   
		   thisform.pageFrame.ActivePage = 2
		   .txtcacctno.SETFOCUS()
		
		   .lstnonwell.requery()
		   .lstnonwell.refresh()
		   THISFORM.calctot()
		   THISFORM.REFRESH()
		ENDWITH
		
		*
		*  Let the form know something changed
		*
		THISFORM.setstate()
		
	ENDPROC

	PROCEDURE getaddr
		LOCAL lnSelect
		
		lnSelect = SELECT()
		swselect('vendor')
		
		LOCATE FOR vendor.cvendorid == THISFORM.txtcVendorID.VALUE
		IF FOUND()
			WITH THISFORM
				.txtcVendName.VALUE = vendor.cvendname
				.txtcAddr1.VALUE = vendor.cAddress1
				IF vendor.cAddress2 = ""
					.txtcAddr2.VALUE = vendor.cCity + " " + vendor.cState + " " + vendor.cZip
					.txtcCityStZip.VALUE = ""
				ELSE
					.txtcAddr2.VALUE = vendor.cAddress2
					.txtcCityStZip.VALUE = vendor.cCity + ", " + vendor.cState + " " + vendor.cZip
				ENDIF
			ENDWITH
		ELSE
			WITH THISFORM
				.cboAcct.VALUE = ""
				.txtcVendName.VALUE = ""
				.txtcAddr1.VALUE = ""
				.txtcCityStZip.VALUE = ""
				.txtcAddr2.VALUE = ""
			ENDWITH
		
		ENDIF
		
		SELECT (lnSelect)
		
		WITH THISFORM
			.txtcVendName.REFRESH()
			.txtcAddr1.REFRESH()
			.txtcAddr2.REFRESH()
			.txtcCityStZip.REFRESH()
		ENDWITH
		
		
	ENDPROC

	PROCEDURE getprice		&& Gets the price for the item based upon the price code passed.
	ENDPROC

	PROCEDURE Init
		
		IF DODEFAULT()
		   swselect('wells')
		   SET ORDER TO cwellid
		   GO TOP
		   lcwellid1 = cwellid
		   GO BOTT
		   lcwellid2 = cwellid
		   
		   THISFORM.odist = CREATEOBJECT('distproc',lcwellid1, lcwellid2, ;
		   '01', '1980', '00', 'W', DATE(), .F.,0)
		
		   thisform.pageFrame.page1.lstWellRcpt.Visible = .t.
		   thisform.pageFrame.page2.lstNonWell.Top = 600
		   
		   IF NOT thisform.isnew('Csrcthdr')
		      swselect('csrcthdr')
		      SET ORDER to DATEORD   && DTOS(DDATE)+CID
		      thisform.last('Csrcthdr')
		   ENDIF    
		   
		   IF m.goApp.lDocuments
		      thisform.AddObject('oFileDialog','sffiledialog')
		      thisform.cmdDocument.visible = .t.
		   ELSE
		      thisform.cmdDocument.visible = .f.
		   ENDIF 
		
		ENDIF   
	ENDPROC

	PROCEDURE KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		
		IF nKeyCode = 3 OR nKeyCode = 18
		      thisform.PageFrame.Page1.lstWellRcpt.SetFocus
		ENDIF 
		
		DODEFAULT(nKeyCode, nShiftAltCtrl)
		
	ENDPROC

	PROCEDURE list
		LPARAMETERS cworkarea
		LOCAL lcList, lnRecNo
		PRIV llOK
		
		IF thisform.cmdatamanager.isnew('Csrcthdr')
		   RETURN
		ENDIF
		
		IF USED('lookuptmp')
		   USE IN lookuptmp
		ENDIF
		IF USED('lookuptmp1')
		   USE IN lookuptmp1
		ENDIF
		
		   llOK = .T.
		   lcList = 'ddate\Date,cid\ID,cname\Name,ncashamt\Amount'
		
		   SELECT cbatch, cid,cname,dDate,nCashAmt,.F. AS junk FROM csrcthdr INTO CURSOR lookuptmp READWRITE 
		   SET SAFETY OFF
		   INDEX ON cid TAG cid
		   INDEX ON cname TAG cname
		   INDEX ON dDate TAG dDate
		   INDEX ON nCashAmt TAG nCashAmt
		   DO FORM ..\CUSTOM\picklist WITH 'lookuptmp', lcList, csrcthdr.ddate, 4,.T.,.T.
		
		IF llOK
		   swselect('csrcthdr')
		   LOCATE FOR cBatch = lookuptmp.cBatch
		   THISFORM.cmdatamanager.setrecordposition('Csrcthdr')
		   THISFORM.REFRESH()
		ENDIF
		
		
	ENDPROC

	PROCEDURE Load
		IF DODEFAULT()
		   thisform.glmaint   = CREATEOBJECT('glmaint')  
		ENDIF    
		
	ENDPROC

	PROCEDURE lookcoa
		LOCAL lcList
		PRIV llOK
		
		llOK = .F.
		lcList = 'cacctno/acctno,cacctdesc/acctdesc'
		
		DO FORM ..\custom\picklist WITH 'Coa', lcList, 'cacctno', 2
		
		IF llOK
		   thisform.pageframe.page2.grdCashrct.column1.txtcAcctNo.value = coa.cacctno
		   thisform.cmdatamanager.replace('CSRCTdet', 'cacctno', coa.cacctno)
		   thisform.pageframe.page2.grdCashrct.column1.txtcAcctNo.refresh()
		ENDIF   
		
		thisform.pageframe.page2.grdCashrct.column1.txtcAcctNo.SetFocus()
	ENDPROC

	PROCEDURE refreshinfo
		
		swselect('csrctdet')
		IF NOT EOF()
		   THISFORM.pageframe.Page1.lblProdPeriod.VISIBLE   = .T.
		   THISFORM.pageframe.Page1.txtcProdPeriod1.VISIBLE = .T.
		   THISFORM.pageframe.Page1.txtcProdYear1.VISIBLE   = .T.
		   THISFORM.pageframe.Page1.lblSlash.VISIBLE        = .T.
		   THISFORM.pageframe.Page1.lblPeriodRange.VISIBLE  = .T.
		   THISFORM.pageframe.Page1.txtcBegRange1.VISIBLE   = .T.
		   THISFORM.pageframe.Page1.txtcEndRange1.VISIBLE   = .T.
		   THISFORM.pageframe.Page1.lblDash.VISIBLE         = .T.
		   THISFORM.pageframe.Page1.lblDaysOn.VISIBLE       = .T.
		   THISFORM.pageframe.Page1.txtnDaysOn1.VISIBLE     = .T.
		   THISFORM.pageframe.Page1.txtcOwnerID1.VISIBLE    = .T.
		   THISFORM.pageframe.Page1.lblAllocate.VISIBLE     = .T.
		   THISFORM.pageframe.Page1.lblInfo.VISIBLE         = .T.
		ELSE
		   THISFORM.pageframe.Page1.lblProdPeriod.VISIBLE   = .F.
		   THISFORM.pageframe.Page1.txtcProdPeriod1.VISIBLE = .F.
		   THISFORM.pageframe.Page1.txtcProdYear1.VISIBLE   = .F.
		   THISFORM.pageframe.Page1.lblSlash.VISIBLE        = .F.
		   THISFORM.pageframe.Page1.lblPeriodRange.VISIBLE  = .F.
		   THISFORM.pageframe.Page1.txtcBegRange1.VISIBLE   = .F.
		   THISFORM.pageframe.Page1.txtcEndRange1.VISIBLE   = .F.
		   THISFORM.pageframe.Page1.lblDash.VISIBLE         = .F.
		   THISFORM.pageframe.Page1.lblDaysOn.VISIBLE       = .F.
		   THISFORM.pageframe.Page1.txtnDaysOn1.VISIBLE     = .F.
		   THISFORM.pageframe.Page1.txtcOwnerID1.VISIBLE    = .F.
		   THISFORM.pageframe.Page1.lblAllocate.VISIBLE     = .F.
		   THISFORM.pageframe.Page1.lblInfo.VISIBLE         = .F.
		ENDIF
		
		THISFORM.pageframe.Page1.txtcProdPeriod1.REFRESH()
		THISFORM.pageframe.Page1.txtcProdYear1.REFRESH()
		THISFORM.pageframe.Page1.txtcBegRange1.REFRESH()
		THISFORM.pageframe.Page1.txtcEndRange1.REFRESH()
		THISFORM.pageframe.Page1.txtnDaysOn1.REFRESH()
		THISFORM.pageframe.Page1.txtcOwnerID1.REFRESH()
		
	ENDPROC

	PROCEDURE Release
		ON KEY LABEL F2
		DODEFAULT()
		
	ENDPROC

	PROCEDURE requery_namelookup
		=REQUERY('namelookup')
	ENDPROC

	PROCEDURE save
		LPARAMETERS cworkarealist
		
		THISFORM.txtcid.SETFOCUS()
		THISFORM.SetNextControl(THISFORM.txtcid)
		THISFORM.ActivateNextControl()
		
		DODEFAULT(cworkarealist)
		
	ENDPROC

	PROCEDURE setstate		&& Resets the form state for non bound controls so that the save button still works.
		this.lChanged = .T.
		m.goStateManager.RefreshAll('Form Edit')
	ENDPROC

	PROCEDURE valterms		&& Validate Terms and Set Due Date and Disc Date based on the Terms
	ENDPROC

	PROCEDURE viewdocument
		LPARAMETERS tcBatch
		
		LOCAL lnReturn, llReturn, lcOutputFile
		LOCAL liKey, lcPath
		
		
		swselect('documents')
		SET ORDER TO cFK
		IF SEEK(tcBatch)
		   lcOutputFile = cPath
		
		   llReturn = .T.
		
		   IF NOT FILE(lcOutputFile)
		      llReturn = .F.
		   ENDIF
		
		   TRY
		      IF llReturn
		         DECLARE INTEGER ShellExecute IN "Shell32.dll" ;
		            INTEGER HWND, ;
		            STRING lpVerb, ;
		            STRING lpFile, ;
		            STRING lpParameters, ;
		            STRING lpDirectory, ;
		            LONG nShowCmd
		
		         lnReturn = ShellExecute(0, "Open", lcOutputFile, "", "", 1)
		      ENDIF
		
		      THIS.nReturnValue = lnReturn
		
		      IF lnReturn > 32
		         llReturn = .T.
		      ELSE
		         llReturn = .F.
		      ENDIF
		   CATCH TO loError
		   ENDTRY
		
		   RETURN (llReturn)
		
		ENDIF
	ENDPROC

	PROCEDURE cboAcct.Init
		*
		*  Builds the data displayed in the combo list box
		*
		
		SELECT  cAcctNo + '-'+ cacctdesc, cAcctNo ;
		   FROM coa INTO ARRAY laAcct ;
		   WHERE lBankacct = .T. ;
		      OR ((naccttype = 4 AND 'PAYABLE' $ UPPER(cacctdesc) ;
		      OR  (naccttype = 4 AND 'A/P' $ UPPER(cacctdesc))))  ;
		   ORDER BY cAcctNo
		
		IF _TALLY > 0
		   FOR lnX = 1 TO ALEN(laAcct,1)
		      THIS.ADDLISTITEM(laAcct[lnX,1],lnX,1)
		      THIS.ADDLISTITEM(laAcct[lnX,2],lnX,2)
		   ENDFOR
		ENDIF
		
		DODEFAULT()
	ENDPROC

	PROCEDURE cmdatamanager.afterchange
		LPARAMETERS cworkarea,cfield
		
		IF UPPER(m.cWorkarea) == 'CSRCTDET'
		   * Recalculate the invoice totals
		   IF NOT thisform.cmdatamanager.isnew('csrctdet')
		      thisform.calctot()
		   ENDIF   
		ENDIF   
		
		RETURN (DODEFAULT(m.cworkArea, m.cField))
	ENDPROC

	PROCEDURE cmdatamanager.afterdelete
		LPARAMETERS cworkarea
		
		DO CASE
		   CASE m.cWorkarea = 'Csrcthdr'
		      swselect('csrcthdr')
		   CASE m.cWorkarea = 'Csrctdet'
		      swselect('csrctdet')
		      IF thisform.pageframe.activepage = 1
		         SET FILTER TO lWellRcpt = .T.
		      ELSE
		         SET FILTER TO lWellRcpt = .F.
		      ENDIF      
		      * Recalculate the invoice totals
		      thisform.calctot()
		      thisform.refresh()
		ENDCASE
		
		RETURN (DODEFAULT(cWorkArea))
	ENDPROC

	PROCEDURE cmdatamanager.afternav
		LPARAMETERS cworkarea
		LOCAL lnCount, lcFilter
		
		IF m.cworkarea = 'Csrcthdr'
		
		   THISFORM.PAGEFRAME.INIT()
		   
		   * Save the cash account for comparison
		   thisform.ccashaccount = csrcthdr.ccashacct
		   
		   IF EMPTY(csrcthdr.dpostdate)
		      THIS.REPLACE('Csrcthdr','dPostDate',csrcthdr.ddate)
		      IF NOT THISFORM.cmdatamanager.isnew('Csrcthdr')
		         swselect('csrcthdr')
		         =TABLEUPDATE(.T.)
		      ENDIF
		   ENDIF
		
		   swselect('glopt')
		   IF csrcthdr.ccashacct = cundepfund AND NOT EMPTY(cundepfund)
		      THISFORM.opgDeposits.VALUE = 1
		      THISFORM.cboAcct.SET('enabled',.F.)
		   ELSE
		      THISFORM.opgDeposits.VALUE = 2
		*      THISFORM.cboAcct.LISTITEMID = 1
		      THISFORM.cboAcct.REFRESH()
		      THISFORM.cboAcct.SET('enabled',.T.)
		   ENDIF
		   
		   * Save the receipt total for later comparison
		   thisform.nrcpttotal = csrcthdr.nCashAmt
		
		   lcBatch = csrcthdr.cbatch
		   swselect('csrctdet')
		   lcFilter = FILTER()
		   SET FILTER TO
		   *  Removed Count statement because Count may not see
		   *  changed records in a buffer.
		   lnCount = 0
		   SCAN FOR cbatch = lcBatch AND lWellRcpt = .T.
		      lnCount = lnCount + 1
		   ENDSCAN
		   IF lnCount > 0
		      THISFORM.setnextcontrol(THISFORM.txtcID)
		      THISFORM.PAGEFRAME.page1.FORECOLOR = RGB(255,0,0)
		      swselect('csrctdet')
		      lnCount = 0
		      SCAN FOR cbatch = lcBatch AND lWellRcpt = .F.
		         lnCount = lnCount + 1
		      ENDSCAN
		      swselect('csrctdet')
		      SET FILTER TO &lcFilter
		      GO TOP
		      IF lnCount > 0
		         THISFORM.PAGEFRAME.page2.FORECOLOR = RGB(255,0,0)
		      ELSE
		         THISFORM.PAGEFRAME.page2.FORECOLOR = RGB(0,0,0)
		      ENDIF
		      THISFORM.PAGEFRAME.page1.lstwellrcpt.REQUERY()
		      THISFORM.PAGEFRAME.page1.lstwellrcpt.REFRESH()
		      THISFORM.PAGEFRAME.ACTIVEPAGE = 1
		      *THISFORM.PAGEFRAME.setPAGE(1,'',0)
		   ELSE
		      swselect('csrctdet')
		      lcFilter = FILTER()
		      SET FILTER TO
		      lnCount = 0
		      SCAN FOR cbatch = lcBatch AND lWellRcpt = .F.
		         lnCount = lnCount + 1
		      ENDSCAN
		      swselect('csrctdet')
		      SET FILTER TO &lcFilter
		      GO TOP
		      IF lnCount > 0
		         THISFORM.setnextcontrol(THISFORM.txtcID)
		         *THISFORM.PAGEFRAME.setPAGE(2)
		         THISFORM.PAGEFRAME.page2.FORECOLOR = RGB(255,0,0)
		         THISFORM.PAGEFRAME.page1.FORECOLOR = RGB(0,0,0)
		         THISFORM.PAGEFRAME.page2.lstnonwell.REQUERY()
		         THISFORM.PAGEFRAME.page2.lstnonwell.REFRESH()
		         THISFORM.PAGEFRAME.ACTIVEPAGE = 2
		         THISFORM.PAGEFRAME.page2.INIT()
		         THISFORM.PAGEFRAME.page2.ACTIVATE()
		      ELSE
		         THISFORM.setnextcontrol(THISFORM.txtcID)
		         *THISFORM.PAGEFRAME.setPAGE(1)
		         THISFORM.PAGEFRAME.page1.FORECOLOR = RGB(0,0,0)
		         THISFORM.PAGEFRAME.page2.FORECOLOR = RGB(0,0,0)
		         THISFORM.PAGEFRAME.page1.lstwellrcpt.REQUERY()
		         THISFORM.PAGEFRAME.page1.lstwellrcpt.REFRESH()
		         THISFORM.PAGEFRAME.ACTIVEPAGE = 1
		      ENDIF
		   ENDIF
		
		   swselect('csrcthdr')
		   IF THISFORM.PAGEFRAME.ACTIVEPAGE = 2
		      THISFORM.PAGEFRAME.page2.lstnonwell.REQUERY()
		      THISFORM.PAGEFRAME.page2.lstnonwell.REFRESH()
		      THISFORM.PAGEFRAME.page2.lstnonwell.VISIBLE = .T.
		   ENDIF
		
		ENDIF
		
		RETURN(DODEFAULT(cworkarea))
		
		
	ENDPROC

	PROCEDURE cmdatamanager.afternew
		LPARAMETERS cworkarea
		
		LOCAL lcidrctd, lcBatch
		
		DO CASE
		   CASE UPPER(m.cworkarea) = 'CSRCTHDR'    && Cash Header
		      lcBatch = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Batch')
		      SET DELETED OFF
		      SELECT csrcthdr1
		      SET ORDER TO cbatch
		      DO WHILE SEEK(lcBatch)
		         lcBatch = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Batch')
		      ENDDO
		      SET DELETED ON
		      
		      swselect('csrcthdr')
		      REPLACE cbatch  WITH lcBatch
		
		      WITH THISFORM.PAGEFRAME.page1
		         .txtnDaysOn.VALUE = 0
		         .txtnUnits.VALUE  = 0
		         .txtnPrice.VALUE  = 0
		         .txtnTotal.VALUE  = 0
		      ENDWITH
		
		      THISFORM.opgDeposits.VALUE = 2
		      IF EMPTY(THISFORM.coldacctno)
		         THISFORM.cboAcct.LISTITEMID = 1
		      ELSE
		         THISFORM.cboAcct.SET('value',THISFORM.coldacctno)
		      ENDIF
		      swselect('csrcthdr')
		      REPL ccashacct WITH THISFORM.cboAcct.VALUE, ;
		           dentdate  WITH DATE()
		      THISFORM.cboAcct.REFRESH()
		      
		      * Reinitialize the detail area fields for page1
		      thisform.pageFrame.page1.txtcwellID.set('value','')
		      thisform.pageFrame.page1.txtcwellName.set('value','')
		      thisform.pageframe.page1.txtCbegrange.set('value','')
		      thisform.pageframe.page1.txtCendrange.set('value','')
		      thisform.pageFrame.page1.txtcOwnerID.set('value','')
		      thisform.pageFrame.page1.txtcProdPeriod.set('value','')
		      thisform.pageFrame.page1.txtcprodyear.set('value','')
		      thisform.pageFrame.page1.txtnPrice.set('value',0)
		      thisform.pageFrame.page1.txtnTotal.set('value',0)
		      thisform.pageframe.page1.txtnUnits.set('value',0)
		
		      * Reinitialize the detail area fields for page2
		      thisform.pageframe.page2.txtcAcctDesc.set('value','')
		      thisform.pageframe.page2.txtcAcctNo.set('value','')
		      thisform.pageFrame.page2.txtCdeptdesc.set('value','')
		      thisform.pageFrame.page2.txtcDeptNo.set('value','')
		      thisform.pageFrame.page2.txtcitemdesc.set('value','')
		      thisform.pageFrame.page2.txtcWellID.set('value','')
		      thisform.pageFrame.page2.txtcWellName.set('value','')
		      thisform.pageFrame.page2.txtnExtension.set('value',0)
		      
		      THISFORM.PAGEFRAME.ACTIVEPAGE = 1
		      THISFORM.setnextcontrol(THISFORM.txtcID)
		
		   CASE UPPER(m.cworkarea) = 'CSRCTDET'    && Cash Detail                
		      lcidrctd = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Cash Receipt Detail')
		      SET DELETED OFF
		      SELECT csrctdet1
		      SET ORDER TO cidpurd
		      DO WHILE SEEK(lcidrctd)
		         lcidrctd = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Cash Receipt Detail')
		      ENDDO
		      SET DELETED ON
		      swselect('csrcthdr')
		      lcBatch = csrcthdr.cbatch
		      swselect('csrctdet')
		      IF THISFORM.PAGEFRAME.ACTIVEPAGE = 1
		         REPLACE csrctdet.cidrctd WITH lcidrctd,  ;
		            csrctdet.lWellRcpt    WITH .T., ;
		            csrctdet.cbatch       WITH lcBatch
		      ELSE
		         REPLACE csrctdet.cidrctd WITH lcidrctd,  ;
		            csrctdet.lWellRcpt    WITH .t., ;
		            csrctdet.cbatch       WITH lcBatch
		      ENDIF     
		ENDCASE
		
		RETURN (DODEFAULT(cworkarea))
		
	ENDPROC

	PROCEDURE cmdatamanager.beforedelete
		LPARAMETERS cworkarea
		LOCAL lcBatch
		
		*  Check to see if the fiscal period is closed
		IF m.cworkarea = 'Csrcthdr'
		   swselect('csrctdet')
		   SET FILTER TO
		   swselect('csrcthdr')
		   IF NOT THISFORM.glmaint.checkperiod(csrcthdr.ddate)
		      THISFORM.omessage.warning('Unable to delete this receipt. Either the fiscal year or period represented by this date has been closed.')
		      RETURN .F.
		   ENDIF
		
		   lcBatch  = csrcthdr.cbatch
		   lcidchec = csrcthdr.cidchec
		
		   swselect('depositd')
		   LOCATE FOR cidchec = lcidchec
		   IF FOUND()
		      THISFORM.oMessage.Warning('This receipt was grouped with other entries and deposited.  ' + ;
		         'The deposit must be deleted from the Tasks >> Make Deposits screen before deleting the receipt.')
		      RETURN .F.
		   ENDIF
		
		   *  Check to see if revenue entered for wells was allocated
		   *  If so, and the run isn't closed, delete it.  Otherwise
		   *  let the user know he can't delete this entry.
		   swselect('income')
		   SCAN FOR cbatch == lcBatch and nrunno <> 0
		     THISFORM.oMessage.Warning('%msgProdClosedInc')
		     RETURN .F.
		  ENDSCAN
		
		   swselect('checks')
		   SET ORDER TO cidchec
		   IF SEEK(lcidchec) AND checks.lcleared
		      thisform.oMessage.warning('This receipt is marked as cleared in the check register. It cannot be deleted.')
		      RETURN .F.
		   ENDIF
		
		   * Remove journal entries
		   THISFORM.glmaint.delbatch(lcBatch,'CS')
		
		   * Remove Income entries
		   swselect('income')
		   SCAN FOR cbatch == lcBatch
		      DELE NEXT 1
		   ENDSCAN
		
		   * Remove Expense entries
		   swselect('expense')
		   SCAN FOR cbatch == lcBatch
		      DELE NEXT 1
		   ENDSCAN
		
		   * Remove unallocated income entries
		   swselect('incsusp')
		   SCAN FOR cbatch = lcBatch
		      DELETE NEXT 1
		   ENDSCAN
		
		   * Remove unallocated expense entries
		   swselect('expsusp')
		   SCAN FOR cbatch = lcBatch
		      DELETE NEXT 1
		   ENDSCAN
		
		   *  Delete the deposit entry from the check register
		   THISFORM.glmaint.delcheck(lcBatch,.T.)
		
		   swselect('glmaster')
		   =TABLEUPDATE(.T.)
		   swselect('income')
		   =TABLEUPDATE(.T.)
		   swselect('incsusp')
		   =TABLEUPDATE(.T.)
		   swselect('coabal')
		   =TABLEUPDATE(.T.)
		   swselect('csrctdet')
		   =TABLEUPDATE(.T.)
		   swselect('csrcthdr')
		   =TABLEUPDATE(.T.)
		   swselect('checks')
		   =TABLEUPDATE(.T.)
		   swselect('expense')
		   =TABLEUPDATE(.T.)
		   swselect('expsusp')
		   =TABLEUPDATE(.T.)
		   THISFORM.setchanged(.F.)
		
		ENDIF
		
		DODEFAULT(cworkarea)
	ENDPROC

	PROCEDURE cmdatamanager.beforenew
		LPARAMETERS cworkarea
		
		IF m.cworkarea == 'Csrcthdr'
		    THISFORM.coldacctno = csrcthdr.ccashacct
		
		* Save the entry if they haven't clicked save in between receipts
		    IF THISFORM.lChanged = .T.
		        IF THISFORM.flushcontrolbuffer()
		            THISFORM.SAVE()
		        ENDIF
		    ENDIF
		ENDIF
	ENDPROC

	PROCEDURE cmdatamanager.beforeupdate
		LPARA cworkarealist
		LOCAL lcBatch, lcAPAcct,  llReturn, lcSelect, lnRecNo, lcFilter, lcidchec
		LOCAL lcYear, lcRun, llDiffAmount, llCleared, llDiffAccount
		LOCAL lcRevClear, lcWellName, loError
		*:Global cGroup, cWellStat, cperiod, cyear
		
		llReturn = .T.
		
		TRY
		   IF NOT THISFORM.lChanged
		      llReturn = .F.
		      EXIT
		   ENDIF
		
		   * Check for required fields
		   IF EMPTY(csrcthdr.cCashAcct)
		      THISFORM.oMessage.Warning('A cash account must be specified.  Please choose the cash account.')
		      THISFORM.setnextcontrol(THISFORM.cboacct)
		      llReturn = .F.
		      EXIT
		   ENDIF
		
		   IF EMPTY(csrcthdr.dpostdate)
		      THISFORM.oMessage.Warning('Please enter a posting date for this receipt.')
		      THISFORM.setnextcontrol(THISFORM.txtdpostdate)
		      llReturn = .F.
		      EXIT
		   ENDIF
		
		   IF EMPTY(csrcthdr.ddate)
		      THISFORM.oMessage.Warning('Please enter a receipt date for this receipt.')
		      THISFORM.setnextcontrol(THISFORM.txtdrecdate)
		      llReturn = .F.
		      EXIT
		   ENDIF
		
		   * Check to make sure the account chosen is not a bank
		   * account if the total of the receipt is negative.
		   IF csrcthdr.nCashAmt < 0
		      swselect('coa')
		      SET ORDER TO acctno
		      IF SEEK(csrcthdr.cCashAcct)
		         IF lbankacct
		            THISFORM.oMessage.Warning('Negative receipts cannot be posted to a bank account. Please choose an A/P account instead.')
		            llReturn = .F.
		            EXIT
		         ENDIF
		      ENDIF
		   ENDIF
		
		   IF NOT llReturn
		      EXIT
		   ENDIF
		
		   lcBatch = csrcthdr.cbatch
		
		   *  Check to see if the fiscal period is closed
		   IF NOT THISFORM.glmaint.checkperiod(csrcthdr.dpostdate)
		      *THISFORM.oMessage.Warning('Unable to save this receipt. Either the fiscal year or period represented by this date has been closed.')  &&  CheckPeriod returns a message, so a second one is redundant. - BH 12/19/2008
		      llReturn = .F.
		      EXIT
		   ENDIF
		
		   *  Check to see if any income from this receipt is in a period that has been closed.
		   SELECT income
		   SCAN FOR cbatch == lcBatch
		      swselect('wells')
		      SET ORDER TO cwellid
		      IF SEEK(income.cwellid)
		         m.cGroup    = cGroup
		         m.cWellStat = cWellStat
		      ELSE
		         LOOP
		      ENDIF
		      swselect('income')
		      m.cyear   = cyear
		      m.cperiod = cperiod
		      IF m.cWellStat # 'V' AND income.nrunno # 0
		         lcRun  = PADL(ALLT(STR(income.nrunno)), 3, '0')
		         lcYear = income.crunyear
		         THISFORM.oMessage.Warning('Revenue from this receipt has already been allocated ' + ;
		            'and processed during run: ' + lcYear + '/' + lcRun + '. ' + ;
		            'This receipt cannot be changed.')
		         llReturn = .F.
		         EXIT
		      ENDIF
		   ENDSCAN
		
		   IF NOT llReturn
		      EXIT
		   ENDIF
		
		   lcidchec = csrcthdr.cidchec
		
		   *
		   * If the total has changed and it's not a new receipt,
		   * don't allow the receipt to be changed if it has been
		   * deposited or cleared
		   *
		   llDiffAmount = .F.
		   llDeposited  = .F.
		   llCleared    = .F.
		
		   *  Look to see if this receipt has been deposited
		   swselect('depositd')
		   LOCATE FOR cidchec = lcidchec
		   IF FOUND()
		      llDeposited = .T.
		   ENDIF
		
		   *  Look to see if the check register entry has been cleared.
		   swselect('checks')
		   SET ORDER TO cidchec
		   IF SEEK(lcidchec)
		      llCleared = checks.lcleared
		   ENDIF
		
		
		   IF NOT THISFORM.cmdatamanager.isnew('csrcthdr')
		
		      llDiffAmount = THISFORM.nrcpttotal # csrcthdr.nCashAmt
		
		      *  Look to see if this receipt has been deposited
		      IF llDeposited
		         THISFORM.oMessage.Warning('This receipt has been grouped with other receipts and deposited.  ' + ;
		            'The deposit must be deleted from the Make Deposits screen before any changes can be made.')
		         llReturn = .F.
		         EXIT
		      ENDIF
		
		      *  Look to see if the check register entry has been cleared.
		      IF llCleared
		         THISFORM.oMessage.Warning('This receipt is marked as cleared in the check register. It cannot be modified.')
		         llReturn = .F.
		         EXIT
		      ENDIF
		   ENDIF
		
		   * Check to see if the cash account has been changed
		   llDiffAccount = .F.
		   IF THISFORM.ccashaccount # csrcthdr.cCashAcct
		      IF NOT THISFORM.cmdatamanager.isnew('csrcthdr')
		         llDiffAccount = .T.
		      ENDIF
		   ENDIF
		
		   lcSelect = SELECT()
		   lcBatch  = csrcthdr.cbatch
		   lcidchec = csrcthdr.cidchec
		
		   * Look for checks in the detail area that are cleared or deposited.
		   SELECT csrctdet
		   SCAN FOR cbatch == lcBatch AND NOT EMPTY(cidchec)
		      lcChkKey = cidchec
		      *  Look to see if this receipt has been deposited
		      swselect('depositd')
		      LOCATE FOR cidchec = lcChkKey
		      IF FOUND()
		         llDeposited = .T.
		      ENDIF
		
		      *  Look to see if the check register entry has been cleared.
		      swselect('checks')
		      SET ORDER TO cidchec
		      IF SEEK(lcChkKey)
		         llCleared = checks.lcleared
		      ENDIF
		
		      IF llDeposited
		         THISFORM.oMessage.Warning('A detail line on this receipt has been grouped with other receipts and deposited.  ' + ;
		            'The deposit must be deleted from the Make Deposits screen before any changes can be made.')
		         llReturn = .F.
		         EXIT
		      ENDIF
		
		      *  Look to see if the check register entry has been cleared.
		      IF llCleared
		         THISFORM.oMessage.Warning('A detail line on this receipt is marked as cleared in the check register. It cannot be modified.')
		         llReturn = .F.
		         EXIT
		      ENDIF
		   ENDSCAN
		
		   IF llReturn = .F.
		      EXIT
		   ENDIF
		
		   WAIT WINDOW NOWAIT 'Saving Changes, Please Wait.....'
		
		   lcBatch = csrcthdr.cbatch
		
		   *  Delete the G/L journal entries for this invoice
		   THISFORM.glmaint.delbatch(lcBatch, 'CS')
		
		   *  Delete any checks created by a detail line in this receipt
		   IF llDiffAmount
		      THISFORM.glmaint.delcheck(lcBatch, .T.)
		   ELSE
		      IF NOT llDiffAccount
		         swselect('checks')
		         DELETE FOR cbatch == lcBatch AND cacctno # csrcthdr.cCashAcct
		      ELSE
		         swselect('checks')
		         DELETE FOR cbatch == lcBatch AND namount # csrcthdr.nCashAmt
		      ENDIF
		   ENDIF
		
		   *  Create the G/L journal entries for this invoice
		   swselect('csrcthdr')
		   = TABLEUPDATE(.T.)
		
		   *  Cash entry
		   THISFORM.glmaint.cSource    = 'CS'
		   THISFORM.glmaint.cbatch     = lcBatch
		   THISFORM.glmaint.dGLDate    = csrcthdr.dpostdate
		   THISFORM.glmaint.cReference = ALLTRIM(csrcthdr.ccheckno)
		   THISFORM.glmaint.cDesc      = THISFORM.txtcName.VALUE
		   THISFORM.glmaint.cacctno    = csrcthdr.cCashAcct
		   THISFORM.glmaint.cId        = csrcthdr.cId
		   THISFORM.glmaint.namount    = csrcthdr.nCashAmt
		   THISFORM.glmaint.cBunch     = THISFORM.cBunch
		   THISFORM.glmaint.dCheckDate = csrcthdr.dpostdate
		   THISFORM.glmaint.dpostdate  = csrcthdr.dpostdate
		   THISFORM.glmaint.cpayee     = csrcthdr.cname
		   THISFORM.glmaint.cidchec    = ''
		   THISFORM.glmaint.centrytype = 'D'
		   THISFORM.glmaint.cidtype    = 'D'
		   THISFORM.glmaint.cyear      = ' '
		   THISFORM.glmaint.cperiod    = ' '
		   THISFORM.glmaint.lcleared   = llCleared
		   THISFORM.glmaint.ccheckno   = csrcthdr.ccheckno
		
		   * Only delete the original register entry if the amount hasn't changed and the original
		   * hasn't been marked as cleared.
		   IF NOT llDiffAmount AND NOT llCleared AND NOT llDeposited
		      THISFORM.glmaint.delcheck(csrcthdr.cidchec)
		   ENDIF
		   THISFORM.glmaint.cUnitNo  = ''
		   THISFORM.glmaint.lPrinted = .T.
		
		   * Only add a register entry if the receipt is positive
		   IF csrcthdr.nCashAmt > 0
		      THISFORM.glmaint.addcheck()
		      lcidchec = THISFORM.glmaint.GETKEY()
		      swselect('csrcthdr')
		      REPL cidchec WITH lcidchec
		      THISFORM.glmaint.cidchec    = lcidchec
		   ENDIF
		
		   *  Detail Lines
		   swselect('csrctdet')
		   lnRecNo  = RECNO()
		   lcFilter = FILTER()
		   SET FILTER TO
		   SCAN FOR cbatch == lcBatch
		      lcRevClear = csrctdet.cacctno
		      IF NOT EMPTY(csrctdet.cidchec)
		         THISFORM.glmaint.delcheck(csrctdet.cidchec)
		      ENDIF
		      swselect('coa')
		      SET ORDER TO acctno
		      IF SEEK(lcRevClear) AND lbankacct
		         THISFORM.glmaint.centrytype = 'C'
		         THISFORM.glmaint.cidtype    = 'P'
		
		         THISFORM.glmaint.cbatch     = lcBatch
		         THISFORM.glmaint.dGLDate    = csrcthdr.dpostdate
		         THISFORM.glmaint.cReference = ALLTRIM(csrcthdr.ccheckno)
		         THISFORM.glmaint.cDesc      = csrctdet.cDesc
		         THISFORM.glmaint.cacctno    = csrctdet.cacctno
		         THISFORM.glmaint.cId        = csrcthdr.cId
		         THISFORM.glmaint.cDeptNo    = csrctdet.cDeptNo
		         THISFORM.glmaint.namount    = csrctdet.namount
		         THISFORM.glmaint.addcheck()
		      ELSE
		         THISFORM.glmaint.cbatch     = lcBatch
		         THISFORM.glmaint.dGLDate    = csrcthdr.dpostdate
		         THISFORM.glmaint.cReference = ALLTRIM(csrcthdr.ccheckno)
		         IF csrctdet.lWellRcpt
		            swselect('wells')
		            SET ORDER TO cwellid
		            IF SEEK(csrctdet.cwellid)
		               lcWellName               = wells.cWellName
		               THISFORM.glmaint.cDesc   = lcWellName
		               THISFORM.glmaint.cacctno = lcRevClear
		            ELSE
		               lcWellName = 'Unknown'
		            ENDIF
		         ELSE
		            THISFORM.glmaint.cDesc   = csrctdet.cDesc
		            THISFORM.glmaint.cacctno = csrctdet.cacctno
		         ENDIF
		      ENDIF
		
		      THISFORM.glmaint.cId     = csrcthdr.cId
		      THISFORM.glmaint.namount = csrctdet.namount * -1
		      THISFORM.glmaint.cUnitNo = csrctdet.cwellid
		      THISFORM.glmaint.cDeptNo = csrctdet.cDeptNo
		      THISFORM.glmaint.updatebatch()
		   ENDSCAN
		
		   CREATE CURSOR tempdept ;
		      (cDeptNo  C(8), ;
		      namount  N(12, 2))
		
		   swselect('csrctdet')
		   SCAN FOR cbatch = lcBatch
		      SCATTER MEMVAR
		      INSERT INTO tempdept FROM MEMVAR
		   ENDSCAN
		
		   SELECT  cDeptNo,;
		      SUM(namount) AS namount ;
		      FROM tempdept ;
		      INTO CURSOR temp ;
		      ORDER BY cDeptNo ;
		      GROUP BY cDeptNo
		
		   *  Cash entry
		   THISFORM.glmaint.cSource    = 'CS'
		   THISFORM.glmaint.cbatch     = lcBatch
		   THISFORM.glmaint.dGLDate    = csrcthdr.dpostdate
		   THISFORM.glmaint.cReference = ALLTRIM(csrcthdr.ccheckno)
		   THISFORM.glmaint.cDesc      = THISFORM.txtcName.VALUE
		   THISFORM.glmaint.cacctno    = csrcthdr.cCashAcct
		   THISFORM.glmaint.cId        = csrcthdr.cId
		   THISFORM.glmaint.cBunch     = THISFORM.cBunch
		   THISFORM.glmaint.dCheckDate = csrcthdr.dpostdate
		   THISFORM.glmaint.dpostdate  = csrcthdr.dpostdate
		   THISFORM.glmaint.cpayee     = csrcthdr.cname
		   THISFORM.glmaint.cidchec    = ''
		   THISFORM.glmaint.centrytype = 'D'
		   THISFORM.glmaint.cidtype    = 'D'
		   THISFORM.glmaint.cyear      = ' '
		   THISFORM.glmaint.cperiod    = ' '
		   THISFORM.glmaint.lcleared   = llCleared
		   THISFORM.glmaint.ccheckno   = csrcthdr.ccheckno
		   THISFORM.glmaint.cUnitNo    = ''
		   THISFORM.glmaint.lPrinted   = .T.
		
		   SELECT temp
		   SCAN
		      SCATTER MEMVAR
		      THISFORM.glmaint.cDeptNo = m.cDeptNo
		      THISFORM.glmaint.namount = m.namount
		      THISFORM.glmaint.updatebatch()
		   ENDSCAN
		
		   * Save the amount for future comparison
		   THISFORM.nrcpttotal = csrcthdr.nCashAmt
		
		   SELECT csrctdet
		   SET FILTER TO &lcFilter
		
		   *
		   *  Check to make sure the batch balances
		   *
		   llReturn = THISFORM.glmaint.chkBalance()
		
		   IF llReturn
		      *  Add the entries to the INCSUSP or INCOME tables
		      THISFORM.dmincome()
		
		      SELECT glmaster
		      = TABLEUPDATE(.T.)
		      SELECT income
		      TABLEUPDATE(.T.)
		      SELECT incsusp
		      TABLEUPDATE(.T.)
		      SELECT expense
		      TABLEUPDATE(.t.)
		      SELECT expsusp
		      TABLEUPDATE(.T.)
		
		      THISFORM.setchanged(.F.)
		
		      WAIT WINDOW NOWAIT 'Changes Saved....' TIMEOUT 2
		   ELSE
		      WAIT WIND 'The Batch Was Not In Balance...Unable to save receipt.'
		   ENDIF
		
		   SELECT (lcSelect)
		
		   THISFORM.lChanged = .F.
		
		CATCH TO loError
		   llReturn = .F.
		   DO errorlog WITH 'BeforeUpdate', loError.LINENO, 'Csreceipt', loError.ERRORNO, loError.MESSAGE, '', loError
		   MESSAGEBOX('Unable to process the receipt at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		      'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		RETURN llReturn
		
	ENDPROC

	PROCEDURE cmdatamanager.delete
		LPARAMETERS cworkarea
		
		IF Proper(m.cworkarea) = 'Csrctdet'
		   swselect('csrctdet')
		   set filter to
		ENDIF
		
		DODEFAULT(cworkarea)   
	ENDPROC

	PROCEDURE cmdatamanager.new
		LPARAMETERS cworkarea
		
		IF UPPER(m.cworkarea) == 'CSRCTHDR'    && Cash Header
		      WITH THISFORM
		         .txtcId.VALUE = ""
		         .txtcName.VALUE = ""
		      ENDWITH
		      
		ENDIF
		
		RETURN (DODEFAULT(m.cworkarea))
		
		
		
	ENDPROC

	PROCEDURE cmdDocument.Click
		LOCAL llNewDoc
		LOCAL llReturn
		*:Global cDocLink, cfk, cpath
		
		llNewDoc = .T.
		TRY
		   swSELECT('documents')
		   SET ORDER TO cFK
		   m.cFK      = 'CS' + csrcthdr.cbatch
		   IF SEEK(m.cFK)
		      IF MESSAGEBOX('There is a document attached to this receipt. Do you want to view the document? Choosing No will allow you to attach a new document.', 36, 'Attached Document') = 6
		         THISFORM.viewdocument(m.cFK)
		         llNewDoc = .F.
		      ELSE
		         llNewDoc = .t.
		         DELETE FOR cFK == m.cFK
		      ENDIF
		   ENDIF 
		   IF llNewDoc
		      LOCAL lnx
		      THISFORM.oFileDialog.FileName = ''
		      llReturn                      = THISFORM.oFileDialog.openfile()
		      IF llReturn
		         m.cDocLink = 'CS'
		         m.cpath    = UPPER(THISFORM.oFileDialog.aFiles[1])
		         swSELECT('documents')
		         LOCATE FOR cFK == m.cFK
		         IF NOT FOUND()
		            INSERT INTO documents FROM MEMVAR
		         ELSE
		            REPLACE cpath WITH m.cpath
		         ENDIF
		         thisform.setstate()
		         THISFORM.setchanged(.T., 'Documents')
		         m.gostatemanager.refreshall('Form')
		      ENDIF
		   ENDIF
		CATCH TO loError
		   MESSAGEBOX('Error: ' + loError.MESSAGE, 48, 'View Document',2)
		ENDTRY
	ENDPROC

	PROCEDURE cmdLookID.Click
		LOCAL lcList
		PRIV llOK
		
		llOK = .T.
		lcList = 'cid\ID,cname\Name,ctype\Type'
		
		IF THISFORM.omessage.CONFIRM('Include owners in the lookup list?')
		   thisform.requery_namelookup()
		   SELECT namelookup
		   SET SAFETY OFF
		   INDEX ON cid TAG cid
		   INDEX ON cname TAG cname
		   INDEX ON ctype TAG ctype
		
		   DO FORM ..\CUSTOM\picklist WITH 'namelookup', lcList, THISFORM.txtcid.VALUE, 3,.T.,.T.
		
		   IF llOK
		      THISFORM.cmdatamanager.REPLACE('Csrcthdr','cId', namelookup.cid)
		      THISFORM.txtcid.REFRESH()
		      THISFORM.cmdatamanager.REPLACE('Csrcthdr','cName',namelookup.cname)
		      THISFORM.txtcName.REFRESH()
		      THISFORM.lChanged = .T.
		      IF namelookup.ctype <> 'Purchaser'
		         THISFORM.PAGEFRAME.ACTIVEPAGE = 2
		      ENDIF
		   ENDIF
		ELSE
		*!*	   SELECT crevkey AS cid, crevname AS cname, 'Purchaser' AS ctype FROM revsrc INTO CURSOR temppurch READWRITE ORDER BY crevkey
		
		*!*	   SELECT temppurch
		*!*	   INDEX ON cid TAG cid
		*!*	   INDEX ON cname TAG cname
		   SELECT custvend
		   SET SAFETY OFF 
		   INDEX on cid TAG cid
		   INDEX on cname TAG cname
		   INDEX on ctype TAG ctype
		   DO FORM ..\CUSTOM\picklist WITH 'custvend', lcList, THISFORM.txtcid.VALUE, 3,.T.,.T.
		
		   IF llOK
		      THISFORM.cmdatamanager.REPLACE('Csrcthdr','cId', custvend.cid)
		      THISFORM.txtcid.REFRESH()
		      THISFORM.cmdatamanager.REPLACE('Csrcthdr','cName',custvend.cname)
		      THISFORM.txtcName.REFRESH()
		      THISFORM.lChanged = .T.
		   ENDIF
		ENDIF
		
		THISFORM.setnextcontrol(THISFORM.txtcid)
		
		DODEFAULT()
		
	ENDPROC

	PROCEDURE opgDeposits.optDepositTo.Click
		THISFORM.cboAcct.SET('enabled',.T.)
		
		DODEFAULT()
		
	ENDPROC

	PROCEDURE opgDeposits.optGroup.Click
		
		lnSelect = SELECT()
		swselect('glopt')
		IF NOT EMPTY(glopt.cundepfund)
		   swselect('coa')
		   SET ORDER TO acctno
		   SEEK(glopt.cundepfund)
		   IF lbankacct
		      THISFORM.cboAcct.VALUE = glopt.cundepfund
		      THISFORM.cmdatamanager.REPLACE('csrcthdr','Ccashacct',glopt.cundepfund)
		      THISFORM.cboAcct.REFRESH()
		      THISFORM.cboAcct.afterchange()
		      thisform.cboAcct.set('enabled',.f.)
		   ELSE  &&  Not a bank account, so don't let them continue
		      THISFORM.oMessage.DISPLAY('Your undeposited funds account is not defined as a bank account.  This must be corrected before any deposits can be grouped.')
		      THIS.PARENT.VALUE = 2
		      THISFORM.cboAcct.LISTITEMID = 1
		      THISFORM.cboAcct.afterchange()
		      THISFORM.setnextcontrol(THISFORM.cboAcct)
		   ENDIF
		ELSE
		   THISFORM.omessage.warning('The undeposited funds account is not defined in the G/L options. Deposits cannot be grouped.')
		   THISFORM.opgDeposits.VALUE = 2
		ENDIF
		
		SELECT(lnselect)
		
		DODEFAULT()
		
	ENDPROC

	PROCEDURE pageframe.Page1.Activate
		LOCAL lcAlias
		
		lcAlias = ALIAS()
		
		IF NOT EMPTY(THISFORM.txtcid.VALUE)
		   * Force page 2 to activate if we don't have a purchaser id
		   swselect('revsrc')
		   LOCATE FOR crevkey == THISFORM.txtcid.VALUE
		   IF NOT FOUND()
		      THISFORM.PAGEFRAME.ACTIVEPAGE = 2
		      RETURN
		   ENDIF
		ENDIF
		
		swselect('csrctdet')
		SET FILTER TO lWellRcpt
		THIS.lstwellrcpt.REQUERY()
		THIS.lstwellrcpt.REFRESH()
		
		SELECT (lcAlias)
		* thisform.setnextcontrol(thisform.pageFrame.page1.txtcWellID)
		RETURN(DODEFAULT())
		
	ENDPROC

	PROCEDURE pageframe.Page1.cboDeck.Init
		IF DODEFAULT()
		   this.Requery()
		ENDIF    
	ENDPROC

	PROCEDURE pageframe.Page1.cboDeck.Requery
		LPARAMETERS tcDeck, tcYear, tcPeriod
		
		IF DODEFAULT()
			THIS.Clear()
			this.Value = ''
			this.DisplayValue = ''
			IF VARTYPE(tcYear) # 'C'
			   tcYear = ''
			ENDIF 
			IF VARTYPE(tcPeriod) # 'C'
			   tcPeriod = ''
			ENDIF 
		
		    IF VARTYPE(tcDeck) # 'C'
		       tcDeck = ''
		    ENDIF 
		       
		    lcWellID = thisform.pageFrame.page1.txtcwellID.Value 
		    IF EMPTY(lcWellID)
		       RETURN
		    ENDIF 
		    
		    lnIndex = 1
		    
		    * Get a list of decks for the given well
			SELECT cdeck, ldefault, effstartyr, effstartprd FROM doidecks ;
				INTO CURSOR temp ;
				WHERE cwellid = lcwellid ;
				ORDER BY cdeck DESC  ;
				GROUP BY cdeck
		
		    * Add the decks to the dropdown
			lnx = 1
			IF _TALLY > 0
				SELECT temp
				SCAN
					SCATTER MEMVAR
					IF EMPTY(m.cdeck)
					   m.cdeck = '(blank)'
					ENDIF 
					THIS.ADDLISTITEM(m.cdeck,lnx,1)
					THIS.ADDLISTITEM(m.cdeck,lnx,2)
					
					* If we passed the deck or production period
					* set the deck to the given deck or the one
					* that has an effective date for the production period.
					IF NOT EMPTY(tcDeck)
						IF m.cDeck = tcDeck
					  	 	lnIndex = lnx
						ENDIF 
					ELSE
					   IF tcYear = m.effstartyr AND tcPeriod = m.effstartprd
					      lnIndex = lnX
					   ENDIF 
					ENDIF 	
					lnx = lnx + 1 
				ENDSCAN
			    this.ListItemId = lnIndex
			ELSE 		
			    this.ListItemId = 1
			ENDIF
		ENDIF
		
	ENDPROC

	PROCEDURE pageframe.Page1.cboDeck.Valid
		RETURN .t.
	ENDPROC

	PROCEDURE pageframe.Page1.cboInttype.GotFocus
		ON KEY LABEL TAB _SCREEN.ACTIVEFORM.AddProdDetail()
		ON KEY LABEL ENTER _SCREEN.ACTIVEFORM.AddProdDetail()
		
	ENDPROC

	PROCEDURE pageframe.Page1.cboInttype.LostFocus
		ON KEY LABEL TAB
		ON KEY LABEL ENTER
	ENDPROC

	PROCEDURE pageframe.Page1.cboType.Init
		LOCAL llAllocExp, lnCount
		
		
		swselect('revcat')
		lnCount = 5
		
		THIS.ADDLISTITEM('     ', 1, 1)
		THIS.ADDLISTITEM('              ', 1, 2)
		
		this.AddListItem('BBL  ', 2, 1)
		this.AddListItem('Oil Revenue', 2, 2)
		
		this.AddListItem('MCF  ', 3, 1)
		this.AddListItem('Gas Revenue', 3, 2)
		
		this.AddListItem('OTH  ', 4, 1)
		this.AddListItem('Other Revenue', 4, 2)
		
		SCAN FOR NOT INLIST(crevtype,'BBL','MCF','OTH')
		   SCATTER MEMVAR
		   THIS.ADDLISTITEM(revcat.crevtype, lnCount, 1)
		   THIS.ADDLISTITEM(revcat.crevdesc, lnCount, 2)
		   lnCount = lnCount + 1
		ENDSCAN
		
		swselect('afeopt')
		GO TOP
		llAllocExp = lAllocExp
		
		IF llAllocExp
		   SELE ccatcode, ccateg FROM expcat where ccatcode # 'PLUG' INTO ARRAY lacats ORDER BY ccatcode
		ELSE
		   SELE ccatcode, ccateg FROM expcat WHERE NOT lafetype and ccatcode # 'PLUG' INTO ARRAY lacats ORDER BY ccatcode
		ENDIF
		
		IF _TALLY > 0
		   FOR lnx = 1 TO _TALLY
		      THIS.ADDLISTITEM(lacats[lnx, 1] + ' ', lnx + lnCount, 1)
		      THIS.ADDLISTITEM(lacats[lnx, 2], lnx + lnCount, 2)
		   ENDFOR
		ENDIF
		
		THIS.LISTITEMID = 1
		DODEFAULT()
	ENDPROC

	PROCEDURE pageframe.Page1.cboType.LostFocus
		IF INLIST(LEFT(THIS.VALUE, 4), 'OTAX', 'GTAX', 'PTAX')
		    THISFORM.PAGEFRAME.page1.txtnunits.ENABLED = .F.
		    THISFORM.PAGEFRAME.page1.txtnprice.ENABLED = .F.
		    THISFORM.setnextcontrol(THISFORM.PAGEFRAME.page1.txtnTotal)
		ENDIF
		
		swselect('revcat')
		LOCATE FOR cRevType = ALLTRIM(THIS.VALUE)
		IF FOUND()
		    *  If a tax is chosen, check to see if the well is marked as exempt from any of the tax types.
		    *  If it is, don't let them enter it.   
		    IF 'TAX' $ THIS.VALUE
		        swselect('wells')
		        LOCATE FOR cWellID == THIS.PARENT.txtcwellID.VALUE
		        IF FOUND()
		            IF lTaxExempt1 OR lTaxExempt2 OR lTaxExempt3 OR lTaxExempt4
		                IF ('1' $ THIS.VALUE AND lTaxExempt1) OR ('2' $ THIS.VALUE AND lTaxExempt2);
		                        OR ('3' $ THIS.VALUE AND lTaxExempt3) OR ('4' $ THIS.VALUE AND lTaxExempt4)
		                    THISFORM.oMessage.Warning('Well ' + ALLTRIM(THIS.PARENT.txtcwellID.VALUE) + ' is marked as exempt from this type of tax, so it cannot be entered.')
		                    THIS.PARENT.txtcwellID.SET('value', '')
		                    THIS.PARENT.txtcwellName.SET('value', '')
		                    THISFORM.setnextcontrol(THIS.PARENT.txtcwellID)
		                ENDIF
		            ENDIF
		        ENDIF
		    ENDIF
		    THIS.PARENT.chkGross.VISIBLE = .T.
		ELSE
		    THIS.PARENT.chkGross.VISIBLE = .F.
		    ON KEY LABEL f2 *
		    lnLastKey = LASTKEY()  &&  Store the last key, so if it's a tab or enter, we can set the cursor to the right field after returning from the brine lookup
		
		    WITH THISFORM
		        swselect('expcat')
		        LOCATE FOR ccatcode = ALLTRIM(THIS.VALUE)
		        IF FOUND()
		            IF 'SALT'  $ UPPER(expcat.ccateg) OR ;
		                    'BRINE' $ UPPER(expcat.ccateg) OR ;
		                    'WATER' $ UPPER(expcat.ccateg)
		
		                IF FILE(m.goapp.cRptsFolder + 'paprod.frx')
		                    m.odialog = CREATEOBJECT('frmWaterDialog', .txtnsaltbbl.VALUE, .txtcdisperm.VALUE, .txtcdispcode.VALUE, .txtWasteCode.VALUE)
		                    m.odialog.SHOW()
		                    lnbbl   = m.odialog.txtwaterbbl.VALUE
		                    lcperm  = m.odialog.cbodisposal.VALUE
		                    lcdisp  = m.odialog.cbodispcode.VALUE
		                    lcWaste = m.odialog.cbowastecode.VALUE
		                    m.odialog.RELEASE()
		                    .txtnsaltbbl.VALUE  = lnbbl
		                    .txtcdisperm.VALUE  = lcperm
		                    .txtWasteCode.VALUE = lcWaste
		                    .txtcdispcode.VALUE = lcdisp
		                ELSE
		                    .txtnsaltbbl.VALUE = THISFORM.oMessage.GetText('Enter the number of BBLs of water.  (5 digits max)', 'Amount of Water in BBL')
		                    IF VARTYPE(.txtnsaltbbl.VALUE) # 'N'
		                        .txtnsaltbbl.SET('value', VAL(.txtnsaltbbl.VALUE))
		                    ENDIF
		                    .txtcdispcode.VALUE = ''
		                    .txtcdisperm.VALUE  = ''
		                    .txtWasteCode.VALUE = ''
		                ENDIF
		
		            ENDIF
		        ENDIF
		    ENDWITH
		ENDIF
		
		
		
		
		
		
		
	ENDPROC

	PROCEDURE pageframe.Page1.cboType.Valid
		IF DODEFAULT()
		  THIS.PARENT.txtnunits.ENABLED = .T.
		  THIS.PARENT.txtnprice.ENABLED = .T.
		  swselect('revcat')
		  LOCATE FOR cRevType = ALLTRIM(this.Value)
		  IF NOT FOUND()
		      swselect('expcat')
		      SET ORDER TO ccatcode
		      IF NOT SEEK(LEFT(THIS.VALUE,4))
		         WAIT WIND NOWAIT 'An invalid revenue type was entered. Please correct'
		         THISFORM.setnextcontrol(THIS)
		         RETURN 0
		      ENDIF
		      THIS.PARENT.txtnunits.VALUE   = 0
		      THIS.PARENT.txtnprice.VALUE   = 0
		      THIS.PARENT.txtnunits.ENABLED = .F.
		      THIS.PARENT.txtnprice.ENABLED = .F.
		      THIS.PARENT.chkGross.VISIBLE = .f.
		  ELSE
		     THIS.PARENT.chkGross.VISIBLE = .T.
		     THISFORM.checkprice()  &&  Try and fill in default price, if applicable
		  ENDIF
		ENDIF
		
	ENDPROC

	PROCEDURE pageframe.Page1.Click
		IF NOT EMPTY(THISFORM.txtcid.VALUE)
		   * Force page 2 to activate if we don't have a purchaser id
		   swselect('revsrc')
		   LOCATE FOR crevkey == THISFORM.txtcid.VALUE
		   IF NOT FOUND()
		      thisform.oMessage.Warning('This receipt is not being received from a purchaser, so the Production Revenue Receipts tab cannot be accessed.')
		      RETURN
		   ELSE
		      DODEFAULT()
		   ENDIF   
		ENDIF
	ENDPROC

	PROCEDURE pageframe.Page1.cmdLookOwner.Click
		LOCAL lcList
		PRIV llOK
		
		llOK = .T.
		lcList = 'cownerid,csortfield'
		
		SELECT investor.cownerid, investor.csortfield FROM investor WHERE cownerid in (SELECT cownerid FROM wellinv WHERE cwellid == thisform.pageFrame.page1.txtcWellID.Value) ;
		   INTO CURSOR tempalloc READWRITE 
		
		SELECT tempalloc
		INDEX on cownerid TAG cownerid
		INDEX on csortfield TAG csortfield
		
		DO FORM ..\custom\picklist WITH 'Tempalloc', lcList, thisform.pageframe.page1.txtcownerid.value, 2, .t.
		
		IF llOK
		   thisform.pageframe.page1.txtcOwnerID.value = tempalloc.cownerid
		   thisform.pageframe.page1.txtcOwnerID.refresh()
		ENDIF   
		
		thisform.setnextcontrol(this.parent.txtcOwnerID)
	ENDPROC

	PROCEDURE pageframe.Page1.cmdLookOwner.When
		RETURN MDOWN()
	ENDPROC

	PROCEDURE pageframe.Page1.cmdLookWell.Click
		LOCAL lcList
		PRIV llOK
		
		llOK = .T.
		lcList = 'cwellid,cwellname,cgroup,cwellstat'
		
		DO FORM ..\CUSTOM\picklist WITH 'Wells', lcList, THISFORM.PAGEFRAME.page1.txtcwellid.VALUE, 4
		
		IF llOK
		   THISFORM.PAGEFRAME.page1.txtcwellid.VALUE = wells.cwellid
		   THISFORM.PAGEFRAME.page1.txtcwellid.REFRESH()
		   THISFORM.PAGEFRAME.page1.txtcWellName.VALUE = wells.cwellname
		   THISFORM.PAGEFRAME.page1.txtcWellName.REFRESH()
		   THISFORM.lInvestment = IIF(wells.cwellstat='V',.T.,.F.)
		   IF THISFORM.lInvestment
		      THISFORM.PAGEFRAME.page1.cmdlookowner.VISIBLE = .F.
		      THISFORM.PAGEFRAME.page1.txtcownerid.VISIBLE  = .F.
		      THISFORM.PAGEFRAME.page1.lblIntType.VISIBLE = .T.
		      THISFORM.PAGEFRAME.page1.cboIntType.VISIBLE = .T.
		   ELSE
		      THISFORM.PAGEFRAME.page1.lblIntType.VISIBLE = .F.
		      THISFORM.PAGEFRAME.page1.cboIntType.VISIBLE = .F.
		      THISFORM.PAGEFRAME.page1.cmdlookowner.VISIBLE = .T.
		      THISFORM.PAGEFRAME.page1.txtcownerid.VISIBLE  = .T.
		   ENDIF
		
		ENDIF
		
		THISFORM.setnextcontrol(THISFORM.PAGEFRAME.page1.txtcwellid)
		
	ENDPROC

	PROCEDURE pageframe.Page1.lstWellRcpt.Click
		dodefault()
		
		thisform.refreshinfo()
	ENDPROC

	PROCEDURE pageframe.Page1.lstWellRcpt.DblClick
		thisform.editdetail1()
		thisform.pageFrame.ActivePage = 1
		*!*	select csrctdet
		*!*	go top
		*!*	this.refresh()
		*!*	thisform.refreshinfo()
	ENDPROC

	PROCEDURE pageframe.Page1.txtCbegrange.Valid
		LOCAL lcmonth, lcDay
		
		lcMonth = SUBSTR(this.Value,1,2)
		lcDay   = SUBSTR(this.Value,4,2)
		
		IF EMPTY(lcMonth) AND EMPTY(lcDay)
		   RETURN (DODEFAULT())
		ENDIF
		   
		IF NOT BETWEEN(lcMonth,'01','12')
		   thisform.omessage.warning('An invalid month was entered. The month must be between 01 and 12')
		   RETURN 0
		ENDIF
		
		IF NOT BETWEEN(lcDay,'01','31')
		   thisform.omessage.warning('An invalid day was entered. The day must be between 01 and 31')
		   RETURN 0
		ENDIF
		   
		RETURN (DODEFAULT())
	ENDPROC

	PROCEDURE pageframe.Page1.txtcBegRange1.fieldvalid
		LOCAL lcmonth, lcDay
		
		lcMonth = SUBSTR(this.Value,1,2)
		lcDay   = SUBSTR(this.Value,4,2)
		
		IF EMPTY(lcMonth) AND EMPTY(lcDay)
		   RETURN (DODEFAULT())
		ENDIF
		   
		IF NOT BETWEEN(lcMonth,'01','12')
		   RETURN .f.
		ENDIF
		
		IF NOT BETWEEN(lcDay,'01','31')
		   RETURN .f.
		ENDIF
		   
		RETURN (DODEFAULT())
	ENDPROC

	PROCEDURE pageframe.Page1.txtcBegRange1.When
		return .f.
	ENDPROC

	PROCEDURE pageframe.Page1.txtCendrange.LostFocus
		*
		*  Recalculate days on
		*
		lnDays = thisform.calcdays()
		if this.parent.txtndayson.value <> lndays
		   this.parent.txtndayson.value = lndays
		   this.parent.txtndayson.refresh()
		endif   
		
	ENDPROC

	PROCEDURE pageframe.Page1.txtCendrange.Valid
		LOCAL lcmonth, lcDay
		
		lcMonth = SUBSTR(this.Value,1,2)
		lcDay   = SUBSTR(this.Value,4,2)
		
		IF EMPTY(lcMonth) AND EMPTY(lcDay)
		   RETURN (DODEFAULT())
		ENDIF
		   
		IF NOT BETWEEN(lcMonth,'01','12')
		   thisform.omessage.warning('An invalid month was entered. The month must be between 01 and 12')
		   RETURN 0
		ENDIF
		
		IF NOT BETWEEN(lcDay,'01','31')
		   thisform.omessage.warning('An invalid day was entered. The day must be between 01 and 31')
		   RETURN 0
		ENDIF
		   
		RETURN (DODEFAULT())
	ENDPROC

	PROCEDURE pageframe.Page1.txtcEndRange1.fieldvalid
		LOCAL lcmonth, lcDay
		
		lcMonth = SUBSTR(this.Value,1,2)
		lcDay   = SUBSTR(this.Value,4,2)
		
		IF EMPTY(lcMonth) AND EMPTY(lcDay)
		   RETURN (DODEFAULT())
		ENDIF
		   
		IF NOT BETWEEN(lcMonth,'01','12')
		   RETURN .f.
		ENDIF
		
		IF NOT BETWEEN(lcDay,'01','31')
		   RETURN .f.
		ENDIF
		   
		RETURN (DODEFAULT())
	ENDPROC

	PROCEDURE pageframe.Page1.txtcEndRange1.When
		return .f.
	ENDPROC

	PROCEDURE pageframe.Page1.txtcOwnerID.GotFocus
		ON KEY LABEL F2 _SCREEN.ACTIVEFORM.PAGEFRAME.page1.cmdLookOwner.CLICK()
		DODEFAULT()
		
	ENDPROC

	PROCEDURE pageframe.Page1.txtcOwnerID.LostFocus
		*ON KEY LABEL F2 *
		*ON KEY LABEL TAB 
		*ON KEY LABEL ENTER 
		
		IF (LASTKEY() = 13 OR LASTKEY() = 9) AND not mDown()  &&  Tab or enter, but not a mouseclick
		   IF this.Parent.txtntotal.Value <> 0
		      thisform.AddProdDetail()
		   ELSE
		      thisform.oMessage.Warning('You cannot save a zero amount detail line.  Please correct.')
		      thisform.setnextcontrol(this.Parent.txtntotal)
		      RETURN .f.
		   endif
		ENDIF   
		
	ENDPROC

	PROCEDURE pageframe.Page1.txtcOwnerID.Valid
		
		IF NOT EMPTY(THIS.VALUE)
		   IF 'TAX' $ THISFORM.PAGEFRAME.pAGE1.cboType.VALUE
		      swselect('investor')
		      SET ORDER TO cownerid
		      IF SEEK(THIS.VALUE)
		         IF lexempt
		            THISFORM.omessage.warning('Tax Exempt owners cannot be assigned taxes.  Please enter a non-exempt owner.')
		            THIS.SET('value','')
		            RETURN 0
		         ENDIF
		      ENDIF
		   ENDIF
		   
		   swselect('wellinv')
		   LOCATE FOR cWellID+cOwnerID = THISFORM.pageFrame.pAGE1.txtcWellID.value+THIS.VALUE
		   IF NOT FOUND()
		      THISFORM.omessage.warning('The owner entered is not an owner in the given well. Please choose another.')
		      THIS.SET('value','')
		      THISFORM.setnextcontrol(THISFORM.pageFrame.paGE1.txtcownerID)
		      RETURN 0
		   ENDIF
		ENDIF
		
	ENDPROC

	PROCEDURE pageframe.Page1.txtcOwnerID1.When
		return .f.
	ENDPROC

	PROCEDURE pageframe.Page1.txtcProdPeriod.Valid
		IF EMPTY(THIS.VALUE)
		   IF THISFORM.linvestment
		      THISFORM.oMessage.Warning('The given well is an investment well.  You must provide the production period for investment wells.')
		      RETURN 0
		   ENDIF
		ELSE
		   THIS.SET('value',PADL(ALLTRIM(THIS.VALUE),2,'0'))
		   IF NOT BETWEEN(this.value,'01','12')
		      thisform.omessage.warning('Please enter a valid production period. The period must be between 01 and 12')
		      return 0
		   ENDIF 
		   if empty(this.parent.txtcprodyear.value)
		      this.parent.txtcProdYear.set('value',allt(str(year(date()))))
		   endif   
		ENDIF
		
		
	ENDPROC

	PROCEDURE pageframe.Page1.txtcProdPeriod1.When
		return .f.
	ENDPROC

	PROCEDURE pageframe.Page1.txtcProdYear.Valid
		DODEFAULT()
		
		IF EMPTY(THIS.VALUE)
		   IF THISFORM.linvestment
		      THISFORM.oMessage.Warning('The given well is an investment well.  You must provide the production period for investment wells.')
		      RETURN 0
		   ENDIF
		ELSE
		   IF NOT BETWEEN(THIS.VALUE,'1900','2999')   
		      THISFORM.oMessage.Warning('Please enter a valid 4 digit production year.')
		      RETURN 0
		   ENDIF   
		ENDIF
		
		IF EMPTY(THIS.VALUE) AND NOT EMPTY(THIS.PARENT.txtcProdPeriod.VALUE)
		   THIS.SET('value',ALLTRIM(STR(YEAR(DATE()))))
		ENDIF
		
	ENDPROC

	PROCEDURE pageframe.Page1.txtcProdYear1.When
		return .f.
	ENDPROC

	PROCEDURE pageframe.Page1.txtcWellID.GotFocus
		ON KEY LABEL F2 _SCREEN.ACTIVEFORM.PAGEFRAME.page1.cmdLookWell.CLICK()
		DODEFAULT()
		
	ENDPROC

	PROCEDURE pageframe.Page1.txtcWellID.InteractiveChange
		IF DODEFAULT()
		   swselect('wells')
		   LOCATE FOR cwellid == this.Value
		   IF FOUND()
		      this.Parent.txtcwellName.set('value',wells.cwellname)
		   ELSE
		      this.Parent.txtcwellName.set('value','')
		   ENDIF
		ENDIF       
		    
	ENDPROC

	PROCEDURE pageframe.Page1.txtcWellID.LostFocus
		ON KEY LABEL F2 *
		
		IF THISFORM.lInvestment
		   THISFORM.PAGEFRAME.page1.cmdlookowner.VISIBLE = .F.
		   THISFORM.PAGEFRAME.page1.txtcownerid.VISIBLE  = .F.
		   THISFORM.PAGEFRAME.page1.lblIntType.VISIBLE = .T.
		   THISFORM.PAGEFRAME.page1.cboIntType.VISIBLE = .T.
		ELSE
		   THISFORM.PAGEFRAME.page1.lblIntType.VISIBLE = .F.
		   THISFORM.PAGEFRAME.page1.cboIntType.VISIBLE = .F.
		   THISFORM.PAGEFRAME.page1.cmdlookowner.VISIBLE = .T.
		   THISFORM.PAGEFRAME.page1.txtcownerid.VISIBLE  = .T.
		ENDIF
		
		thisform.pageFrame.page1.cboDeck.Requery()
		
		DODEFAULT()
		
	ENDPROC

	PROCEDURE pageframe.Page1.txtcWellID.Valid
		IF DODEFAULT()
		   IF NOT EMPTY(THIS.VALUE)
		      swselect('wells')
		      SET ORDER TO cwellid
		      IF SEEK(THIS.VALUE)
		         IF INLIST(wells.cwellstat,'I','S','P')
		            THISFORM.omessage.warning('This well is not an active well. Its entries will be sent to the allocation file.')
		         ENDIF
		         THIS.PARENT.txtcWellName.SET('value',wells.cWellName)
		         thisform.checkprice()  &&  Try and fill in default price, if applicable
		         THISFORM.lInvestment = IIF(wells.cwellstat='V',.T.,.F.)
		      ENDIF
		   ELSE
		      THISFORM.lInvestment = .F.
		      THIS.PARENT.txtcWellName.SET('value','')
		      THISFORM.PAGEFRAME.Page1.lblIntType.VISIBLE = .F.
		      THISFORM.PAGEFRAME.Page1.cboIntType.VISIBLE = .F.
		      THISFORM.PAGEFRAME.Page1.cmdlookowner.VISIBLE = .T.
		      THISFORM.PAGEFRAME.Page1.txtcownerid.VISIBLE  = .T.
		   ENDIF
		ENDIF
		
	ENDPROC

	PROCEDURE pageframe.Page1.txtcWellName.When
		return .f.
	ENDPROC

	PROCEDURE pageframe.Page1.txtnDaysOn.Valid
		IF DODEFAULT()
		   m.nDaysOn = this.Value
		   IF VARTYPE(m.nDayson) # 'N'
		      m.nDaysOn = INT(VAL(m.nDaysOn))
		   ENDIF 
		   IF NOT BETWEEN(m.nDaysOn,0,365)
		      MESSAGEBOX('An invalid value for Days On was entered. The value must be between 0 and 365.',16,'Invalid Days On Value')
		      RETURN 0
		   ENDIF
		ENDIF 
	ENDPROC

	PROCEDURE pageframe.Page1.txtnDaysOn1.When
		return .f.
	ENDPROC

	PROCEDURE pageframe.Page1.txtnPrice.Init
		this.value = 0
		
		DODEFAULT()
	ENDPROC

	PROCEDURE pageframe.Page1.txtnPrice.LostFocus
		WITH thisform.pageframe.page1
		  IF .chkgross.value = .f.
		     .txtnTotal.value = ROUND(.txtnUnits.value * .txtnPrice.value,2)
		     .txtnTotal.refresh()
		  ENDIF    
		ENDWITH  
	ENDPROC

	PROCEDURE pageframe.Page1.txtnTotal.Init
		this.value = 0
		
		DODEFAULT()
	ENDPROC

	PROCEDURE pageframe.Page1.txtnTotal.Valid
		DODEFAULT()
		LOCAL lcValue, lcUnits
		
		lnPrice    = THIS.PARENT.txtnPrice.VALUE
		lnUnits    = THIS.PARENT.txtnUnits.VALUE
		lnTotalInc = THIS.PARENT.txtnTotal.VALUE
		m.cwellid  = THIS.PARENT.txtcwellid.VALUE
		
		swselect('revcat')
		LOCATE FOR crevtype = ALLTRIM(this.Parent.cbotype.value)
		IF NOT FOUND()
		   swselect('expcat')
		   SET ORDER TO ccatcode
		   IF NOT SEEK(LEFT(THIS.PARENT.cbotype.VALUE,4))
		      WAIT WIND NOWAIT 'An invalid revenue type was entered. Please correct'
		      THISFORM.setnextcontrol(THIS.PARENT.cbotype)
		      RETURN 0
		   ENDIF
		   IF THIS.VALUE < 0
		      IF NOT THISFORM.omessage.CONFIRM("Expenses don't have to be entered as a negative. You are entering this as an expense credit. Is that what you want to do?")
		         THIS.VALUE = ABS(THIS.VALUE)
		      ENDIF
		   ENDIF
		ELSE
		   IF NOT 'TAX' $ THIS.PARENT.cbotype.VALUE AND NOT INLIST(ALLTRIM(this.Parent.cbotype.Value),'COMP','GATH')
		      IF lnPrice = 0
		         IF lnUnits > 0 AND lnTotalInc > 0
		            IF THIS.PARENT.chkGross.VALUE = .F.
		*!*	               IF THISFORM.omessage.CONFIRM('Should the price be calculated?')
		*!*	                  IF THIS.PARENT.chkGross.VALUE
		*!*	                     DO CASE
		*!*	                        CASE THIS.PARENT.cbotype.VALUE = 'BBL'
		*!*	                           lnUnits = swNetRevenue(m.cwellid, lnUnits, 'O', .F.,.T.)
		*!*	                        CASE THIS.PARENT.cbotype.VALUE = 'MCF'
		*!*	                           lnUnits = swNetRevenue(m.cwellid, lnUnits, 'G', .F.,.T.)
		*!*	                     ENDCASE
		*!*	                  ENDIF
		                  THIS.PARENT.txtnPrice.VALUE = ROUND(lnTotalInc/lnUnits,6)
		                  THIS.PARENT.txtnPrice.REFRESH()
		*!*	               ENDIF
		            ENDIF
		         ENDIF
		         THISFORM.setnextcontrol(THIS.PARENT.txtcProdPeriod)
		      ENDIF
		      IF lnUnits = 0
		         IF lnPrice > 0 AND lnTotalInc > 0
		            IF THIS.PARENT.chkGross.VALUE = .F.
		               IF THISFORM.omessage.CONFIRM('Should the units be calculated?')
		                  THIS.PARENT.txtnUnits.VALUE = ROUND(lnTotalInc/lnPrice,2)
		                  THIS.PARENT.txtnUnits.REFRESH()
		               ENDIF
		            ENDIF
		            THISFORM.setnextcontrol(THIS.PARENT.txtcProdPeriod)
		         ENDIF
		      ENDIF
		   ELSE
		      IF 'TAX' $ this.parent.cbotype.value AND THIS.VALUE < 0
		         IF NOT THISFORM.omessage.CONFIRM("Taxes don't have to be entered as a negative. You are entering this as a tax credit. Is that what you want to do?")
		            THIS.VALUE = ABS(THIS.VALUE)
		         ENDIF
		      ENDIF
		      IF INLIST(ALLTRIM(this.parent.cbotype.value),'COMP','GATH') AND this.value < 0
		         IF NOT THISFORM.omessage.CONFIRM("Compression/Gathering don't have to be entered as a negative. You are entering this as a credit. Is that what you want to do?")
		            THIS.VALUE = ABS(THIS.VALUE)
		         ENDIF
		      ENDIF
		   ENDIF
		ENDIF
		
	ENDPROC

	PROCEDURE pageframe.Page1.txtnUnits.Init
		this.value = 0000000.00
		
		DODEFAULT()
	ENDPROC

	PROCEDURE pageframe.Page1.txtnUnits.LostFocus
		WITH thisform.pageframe.page1
		  IF .chkgross.value = .f.
		     .txtnTotal.value = ROUND(.txtnUnits.value * .txtnPrice.value,2)
		     .txtnTotal.refresh()
		  ENDIF    
		ENDWITH  
	ENDPROC

	PROCEDURE pageframe.Page2.Activate
		LOCAL lcAlias
		
		lcAlias = ALIAS()
		this.lstNonWell.Top = 106
		SELECT csrctdet
		SET FILTER TO NOT lWellRcpt
		this.lstnonwell.requery()
		this.lstnonwell.refresh()
		
		SELECT (lcAlias)
		
		RETURN(DODEFAULT())
	ENDPROC

	PROCEDURE pageframe.Page2.cmdLookCOA.Click
		LOCAL lcList
		PRIV llOK
		
		llOK = .T.
		lcList = 'cacctno/acctno,cacctdesc/acctdesc'
		
		DO FORM ..\CUSTOM\picklist WITH 'Coa', lcList, thisform.pageframe.page2.txtcacctno.value, 2
		
		IF llOK
		   THISFORM.PAGEFRAME.page2.txtcAcctNo.VALUE = coa.cacctno
		   THISFORM.PAGEFRAME.page2.txtcAcctDesc.VALUE = coa.cAcctDesc
		   THISFORM.PAGEFRAME.page2.txtcAcctNo.REFRESH()
		   THISFORM.PAGEFRAME.page2.txtcAcctDesc.REFRESH()
		   thisform.ldeptrequired = lacctdept
		   thisform.lwellrequired = lacctunit
		ENDIF
		
		THISFORM.setnextcontrol(THISFORM.PAGEFRAME.page2.txtcAcctNo)
		
	ENDPROC

	PROCEDURE pageframe.Page2.cmdLookDept.Click
		LOCAL lcList
		PRIV llOK
		
		llOK   = .T.
		lcList = 'cdeptno\Dept No,cdeptdesc\Department Description'
		
		DO FORM ..\custom\picklist WITH 'Gldept', lcList, thisform.pageframe.page2.txtcdeptno.value, 2,.f.,.t.
		
		IF llOK
		   thisform.pageframe.page2.txtcDeptNo.value   = gldept.cdeptno
		   thisform.pageframe.page2.txtcDeptDesc.value = gldept.cDeptDesc
		   thisform.pageframe.page2.txtcDeptNo.refresh()
		   thisform.pageframe.page2.txtcDeptDesc.refresh()
		ENDIF   
		
		thisform.setnextcontrol(thisform.pageframe.page2.txtcDeptNo)
		
		dodefault()
		
	ENDPROC

	PROCEDURE pageframe.Page2.cmdLookWell.Click
		LOCAL lcList
		PRIV llOK
		
		llOK = .T.
		
		lcList = 'cunitno\Unit No,cname\Name,ctype\Type'
		set safety off
		sele allunits
		index on cunitno tag cunitno
		index on cname tag cname
		set safety on
		
		DO FORM ..\Custom\PickList WITH 'Allunits', lcList, this.parent.txtcwellid.value, 3, .f., .t.
		
		IF llOK
		   this.parent.txtcwellid.value   = allunits.cunitno
		   this.parent.txtcwellname.value = allunits.cname
		   this.parent.txtcwellid.refresh()
		   this.parent.txtcWellName.refresh()
		ENDIF   
		
		thisform.setnextcontrol(This.Parent.txtcwellid)
		
		ON KEY LABEL F10 _screen.activeform.Save()
		ON KEY LABEL CTRL+A _screen.activeform.New()
		ON KEY LABEL CTRL+D _screen.activeform.Delete()
		ON KEY LABEL CTRL+L _screen.activeform.List()
		
	ENDPROC

	PROCEDURE pageframe.Page2.lstNonWell.DblClick
		THISFORM.editdetail2()
		thisform.pageFrame.ActivePage = 2
	ENDPROC

	PROCEDURE pageframe.Page2.txtcAcctDesc.When
		RETURN .F.
	ENDPROC

	PROCEDURE pageframe.Page2.txtcAcctNo.GotFocus
		ON KEY LABEL F2 _SCREEN.ACTIVEFORM.PAGEFRAME.page2.cmdLookCOA.CLICK()
		DODEFAULT()
		
	ENDPROC

	PROCEDURE pageframe.Page2.txtcAcctNo.InteractiveChange
		IF DODEFAULT()
		   swselect('coa')
		   LOCATE FOR cacctno = this.Value
		   IF FOUND()
		      thisform.pageframe.page2.txtcAcctDesc.value = coa.cacctdesc
		      thisform.pageframe.page2.txtcAcctDesc.Refresh()
		   ELSE
		      thisform.pageframe.page2.txtcAcctDesc.value = ''
		      thisform.pageframe.page2.txtcAcctDesc.Refresh()
		   ENDIF 
		ENDIF        
	ENDPROC

	PROCEDURE pageframe.Page2.txtcAcctNo.LostFocus
		ON KEY LABEL F2 *
		DODEFAULT()
		
	ENDPROC

	PROCEDURE pageframe.Page2.txtcAcctNo.Valid
		IF NOT EMPTY(THIS.VALUE) AND THIS.VALUE <> '*'
		   swselect('coa')
		   SET ORDER TO acctno
		   IF SEEK(THIS.VALUE)
		      IF lTitle OR lTotalAcct
		         THISFORM.omessage.DISPLAY('%msgAcctDetail')
		         RETURN 0
		      ENDIF
		      thisform.lwellrequired = lacctunit
		      thisform.ldeptrequired = lacctdept
		   ENDIF
		ENDIF
		DODEFAULT()
		
	ENDPROC

	PROCEDURE pageframe.Page2.txtCdeptdesc.When
		RETURN .F. 
	ENDPROC

	PROCEDURE pageframe.Page2.txtcDeptNo.GotFocus
		ON KEY LABEL F2 _screen.activeform.pageframe.page2.cmdLookDept.Click()
		DODEFAULT()
	ENDPROC

	PROCEDURE pageframe.Page2.txtcDeptNo.InteractiveChange
		IF DODEFAULT()
		   swselect('gldept')
		   LOCATE FOR cdeptno == this.Value
		   IF FOUND()
		      thisform.pageFrame.page2.txtCdeptdesc.Value = gldept.cdeptdesc
		      thisform.pageFrame.page2.txtCdeptdesc.Refresh()
		   ELSE
		      thisform.pageFrame.page2.txtCdeptdesc.Value = ''
		      thisform.pageFrame.page2.txtCdeptdesc.Refresh()
		   ENDIF    
		ENDIF    
	ENDPROC

	PROCEDURE pageframe.Page2.txtcDeptNo.LostFocus
		ON KEY LABEL F2 *
		DODEFAULT()
		
		
	ENDPROC

	PROCEDURE pageframe.Page2.txtcDeptNo.Valid
		DODEFAULT()
		
		IF EMPTY(THIS.VALUE)
		   IF NOT MDOWN()
		      IF THISFORM.lDeptRequired
		         THISFORM.omessage.DISPLAY('%msgDeptRequired')
		         RETURN 0
		      ENDIF
		   ENDIF
		ENDIF
		
		
	ENDPROC

	PROCEDURE pageframe.Page2.txtcWellID.GotFocus
		ON KEY LABEL F2 _SCREEN.ACTIVEFORM.PAGEFRAME.page2.cmdLookWell.CLICK()
		DODEFAULT()
		
	ENDPROC

	PROCEDURE pageframe.Page2.txtcWellID.InteractiveChange
		IF DODEFAULT()
		   swselect('wells')
		   LOCATE FOR cwellid == this.Value
		   IF FOUND()
		      thisform.pageFrame.page2.txtcWellName.Value = wells.cwellname
		      thisform.pageFrame.page2.txtcWellName.Refresh()
		   ELSE
		      thisform.pageFrame.page2.txtcWellName.Value = ''
		      thisform.pageFrame.page2.txtcWellName.Refresh()
		   ENDIF
		ENDIF       
		      
		   
	ENDPROC

	PROCEDURE pageframe.Page2.txtcWellID.LostFocus
		ON KEY LABEL F2 *
		DODEFAULT()
		
		
		
		
	ENDPROC

	PROCEDURE pageframe.Page2.txtcWellID.Valid
		DODEFAULT()
		
		IF EMPTY(THIS.VALUE)
		   IF NOT MDOWN()
		      IF THISFORM.lWellRequired
		         THISFORM.omessage.DISPLAY('%msgWellRequired')
		         RETURN 0
		      ENDIF
		   ENDIF
		   this.Parent.txtcwellname.set('value','')
		ENDIF
		
	ENDPROC

	PROCEDURE pageframe.Page2.txtcWellName.When
		RETURN .F.
	ENDPROC

	PROCEDURE pageframe.Page2.txtnExtension.LostFocus
		thisform.AddNonProdDetail()
	ENDPROC

	PROCEDURE txtcID.GotFocus
		ON KEY LABEL F2 _SCREEN.ACTIVEFORM.cmdLookID.CLICK()
		DODEFAULT()
		
	ENDPROC

	PROCEDURE txtcID.InteractiveChange
		IF DODEFAULT()
		   SELECT custvend
		   LOCATE FOR cid = this.Value
		   IF FOUND()
		      IF allt(custvend.cName) <> ALLTRIM(csrcthdr.cName) OR EMPTY(csrcthdr.cName)
		         thisform.txtcname.set('value',custvend.cname)
		      endif
		   ELSE
		      thisform.txtcname.set('value','')
		   ENDIF
		ENDIF          
	ENDPROC

	PROCEDURE txtcID.LostFocus
		ON KEY LABEL F2 *
		IF NOT EMPTY(THIS.VALUE)
		    SELECT custvend
		    LOCATE FOR cid == THISFORM.txtciD.VALUE
		    IF NOT FOUND()
		        THISFORM.PAGEFRAME.ACTIVEPAGE = 2
		    ENDIF
		ENDIF
		DODEFAULT()
		
	ENDPROC

	PROCEDURE txtcName.When
		RETURN .F.    
	ENDPROC

	PROCEDURE txtdpostdate.Valid
		DODEFAULT()
		
		IF NOT EMPTY(this.Value) AND EMPTY(this.Parent.txtdrecdate.Value)  &&  Fill in the acct date with this date, if it's empty
		   this.Parent.txtdrecdate.set('value',this.Value)
		ENDIF
		
		
	ENDPROC

	PROCEDURE txtdRecDate.Valid
		IF DODEFAULT()
		   IF this.Value <> csrcthdr.ddate
		      thisform.cmdatamanager.replace('Csrcthdr','Ddate',this.Value)
		   ENDIF
		   
		   IF NOT EMPTY(this.Value) AND EMPTY(this.Parent.txtdPostDate.Value)  &&  Fill in the post date with this date, if it's empty
		      this.Parent.txtdPostDate.set('value',this.Value)
		   ENDIF
		ENDIF 
	ENDPROC

	PROCEDURE txtNcashamt.When
		RETURN .F.
	ENDPROC

ENDDEFINE
