*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="gltrialbcon.scx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="2" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Cursor1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor6" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor7" UniqueID="" Timestamp="" />

	AutoOpenTables = .F.
	DataSource = .NULL.
	Height = 617
	Left = 40
	Name = "Dataenvironment"
	Top = 235
	Width = 981

	ADD OBJECT 'Cursor1' AS cursor WITH ;
		Alias = "coa", ;
		BufferModeOverride = 5, ;
		CursorSource = "coa", ;
		Database = ..\amdata\appdata.dbc, ;
		Height = 90, ;
		Name = "Cursor1", ;
		Order = "acctno", ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor2' AS cursor WITH ;
		Alias = "coabal", ;
		BufferModeOverride = 5, ;
		CursorSource = "coabal", ;
		Database = ..\amdata\appdata.dbc, ;
		Height = 90, ;
		Left = 295, ;
		Name = "Cursor2", ;
		Top = 6, ;
		Width = 97
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor3' AS cursor WITH ;
		Alias = "glmaster", ;
		CursorSource = "glmaster", ;
		Database = ..\amdata\appdata.dbc, ;
		Height = 90, ;
		Left = 154, ;
		Name = "Cursor3", ;
		Top = 12, ;
		Width = 97
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor4' AS cursor WITH ;
		Alias = "wells", ;
		CursorSource = "wells", ;
		Database = ..\amdata\appdata.dbc, ;
		Height = 90, ;
		Left = 570, ;
		Name = "Cursor4", ;
		Top = 20, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor5' AS cursor WITH ;
		Alias = "sysctl", ;
		CursorSource = "sysctl", ;
		Database = ..\amdata\appdata.dbc, ;
		Height = 90, ;
		Left = 710, ;
		Name = "Cursor5", ;
		Top = 20, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor6' AS cursor WITH ;
		Alias = "coabalu", ;
		CursorSource = "coabalu", ;
		Database = ..\amdata\appdata.dbc, ;
		Height = 90, ;
		Left = 290, ;
		Name = "Cursor6", ;
		Top = 140, ;
		Width = 97
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor7' AS cursor WITH ;
		Alias = "glopt", ;
		CursorSource = "glopt", ;
		Database = ..\amdata\appdata.dbc, ;
		Height = 90, ;
		Left = 850, ;
		Name = "Cursor7", ;
		Top = 20, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

ENDDEFINE

DEFINE CLASS formgltrialblist AS frmrptcriteria OF "appforms.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Glmaint" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdChoose" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cmdcommandbuttoncustom1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtYear" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Swrptlook1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblFrom" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblTo" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cmdcommandbuttoncustom2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblYear" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cntgetfile1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkViewDocument" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: calcbalances
		*p: oglmaint
		*p: _memberdata		&& XML Metadata for customizable properties
	*</DefinedPropArrayMethod>

	Caption = "Trial Balance"
	DataSession = 2
	DoCreate = .T.
	Height = 415
	HelpContextID = 413
	Name = "FormGltrialblist"
	Visible = .T.
	Width = 538
	_memberdata = <VFPData>
		<memberdata name="calcbalances" display="CalcBalances"/>
		</VFPData>		&& XML Metadata for customizable properties
	Swrptcriteriabuttons1.chkSendFile.Alignment = 0
	Swrptcriteriabuttons1.chkSendFile.Name = "chkSendFile"
	Swrptcriteriabuttons1.cmdclose.Name = "cmdclose"
	Swrptcriteriabuttons1.cmdPreview.Name = "cmdPreview"
	Swrptcriteriabuttons1.cmdPrint.Name = "cmdPrint"
	Swrptcriteriabuttons1.Left = 132
	Swrptcriteriabuttons1.Name = "Swrptcriteriabuttons1"
	Swrptcriteriabuttons1.TabIndex = 11
	Swrptcriteriabuttons1.Top = 352
	Swrptcriteriabuttons1.Visible = .F.
	Swrptcriteriabuttons1.ZOrderSet = 0

	ADD OBJECT 'chkViewDocument' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "Open File After It's Created", ;
		Left = 195, ;
		Name = "chkViewDocument", ;
		Top = 310, ;
		Value = .T.
		*< END OBJECT: ClassLib="..\..\dmie_rv\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'cmdChoose' AS cmdcommandbuttoncustom WITH ;
		Caption = "Choose Companies", ;
		Height = 36, ;
		Left = 215, ;
		Name = "cmdChoose", ;
		TabIndex = 5, ;
		Top = 204, ;
		Width = 108
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'Cmdcommandbuttoncustom1' AS cmdcommandbuttoncustom WITH ;
		Caption = "Create File", ;
		Height = 48, ;
		Left = 156, ;
		Name = "Cmdcommandbuttoncustom1", ;
		TabIndex = 9, ;
		Top = 348, ;
		Width = 96
		*< END OBJECT: ClassLib="..\..\dmie_rv\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'Cmdcommandbuttoncustom2' AS cmdcommandbuttoncustom WITH ;
		Caption = "E\<xit", ;
		Height = 48, ;
		Left = 264, ;
		Name = "Cmdcommandbuttoncustom2", ;
		TabIndex = 10, ;
		Top = 348, ;
		Width = 96
		*< END OBJECT: ClassLib="..\..\dmie_rv\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'Cntgetfile1' AS cntgetfile WITH ;
		cextensionlist = csv, ;
		Height = 24, ;
		Left = 29, ;
		lfullpath = .T., ;
		lmustexist = .F., ;
		lpathonly = .F., ;
		Name = "Cntgetfile1", ;
		TabIndex = 6, ;
		Top = 264, ;
		Width = 479, ;
		cmdPath.Height = 22, ;
		cmdPath.Left = 450, ;
		cmdPath.Name = "cmdPath", ;
		cmdPath.Top = 0, ;
		cmdPath.Width = 23, ;
		edtPath.Height = 23, ;
		edtPath.Left = 0, ;
		edtPath.Name = "edtPath", ;
		edtPath.SelectOnEntry = .T., ;
		edtPath.Top = 0, ;
		edtPath.Width = 443
		*< END OBJECT: ClassLib="..\custom\cgadget.vcx" BaseClass="container" />

	ADD OBJECT 'Glmaint' AS glmaint WITH ;
		Height = 16, ;
		Left = 324, ;
		Name = "Glmaint", ;
		Top = 12, ;
		Width = 21
		*< END OBJECT: ClassLib="..\custom\swgl.vcx" BaseClass="custom" />

	ADD OBJECT 'lblFrom' AS lblfieldlabelcustom WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "From Account Number:", ;
		Height = 16, ;
		Left = 78, ;
		Name = "lblFrom", ;
		TabIndex = 7, ;
		Top = 93, ;
		Width = 113, ;
		ZOrderSet = 7
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom2' AS lbllabelcustom WITH ;
		Caption = "File Location", ;
		FontBold = .T., ;
		Left = 25, ;
		Name = "Lbllabelcustom2", ;
		TabIndex = 3, ;
		Top = 249
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblTo' AS lblfieldlabelcustom WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "To Account Number:", ;
		Height = 16, ;
		Left = 90, ;
		Name = "lblTo", ;
		TabIndex = 8, ;
		Top = 144, ;
		Width = 101, ;
		ZOrderSet = 8
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblYear' AS lblfieldlabelcustom WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "Fiscal Year:", ;
		Height = 16, ;
		Left = 130, ;
		Name = "lblYear", ;
		TabIndex = 2, ;
		Top = 40, ;
		Width = 60, ;
		ZOrderSet = 9
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Swrptlook1' AS swrptlook WITH ;
		Left = 208, ;
		Name = "Swrptlook1", ;
		TabIndex = 4, ;
		Top = 84, ;
		ZOrderSet = 6, ;
		Swlookupbutton1.Left = 60, ;
		Swlookupbutton1.Name = "Swlookupbutton1", ;
		Swlookupbutton1.Top = 0, ;
		Swlookupbutton2.Left = 60, ;
		Swlookupbutton2.Name = "Swlookupbutton2", ;
		Swlookupbutton2.Top = 52, ;
		txtBegID.clistexpression = coa.cacctno, ;
		txtBegID.clistworkarea = coa, ;
		txtBegID.Height = 20, ;
		txtBegID.InputMask = "999999", ;
		txtBegID.Left = 0, ;
		txtBegID.MaxLength = 6, ;
		txtBegID.Name = "txtBegID", ;
		txtBegID.Top = 0, ;
		txtBegID.Width = 53, ;
		TxtBegName.Name = "TxtBegName", ;
		txtEndID.clistexpression = coa.cacctno, ;
		txtEndID.clistworkarea = coa, ;
		txtEndID.Height = 20, ;
		txtEndID.InputMask = "999999", ;
		txtEndID.Left = 0, ;
		txtEndID.MaxLength = 6, ;
		txtEndID.Name = "txtEndID", ;
		txtEndID.Top = 51, ;
		txtEndID.Width = 53, ;
		TxtEndName.Name = "TxtEndName"
		*< END OBJECT: ClassLib="..\custom\swcontrol.vcx" BaseClass="container" />

	ADD OBJECT 'txtYear' AS swyear WITH ;
		Left = 208, ;
		Name = "txtYear", ;
		TabIndex = 1, ;
		Top = 38, ;
		ZOrderSet = 5
		*< END OBJECT: ClassLib="..\custom\swcontrol.vcx" BaseClass="textbox" />
	
	PROCEDURE builddata
		LOCAL tcYear, tcPeriod, tcAcct1, tcAcct2, llWellSub, lcYear
		LOCAL lcLastYr, lcLevel, lcParent, lcPeriod1, lcPeriod2, lcWell1, lcWell2, llLastYrClosed, llReturn
		LOCAL llWellPage, llZeroAcct, lnBegBal, lnCurrentLevel, lnEndBal, lnLevel, lnQtr, lnRecNo
		LOCAL lnReportBy, lncount, loError
		LOCAL cRetEarn, cyear, nRetEarn
		
		llReturn = .T.
		
		TRY
		   tcYear     = THISFORM.txtYear.VALUE
		   tcAcct1    = THISFORM.swrptlook1.txtBegID.VALUE
		   tcAcct2    = THISFORM.swrptlook1.txtEndID.VALUE
		   llWellSub  = .F.
		   lcLastYr   = STR(VAL(tcYear) - 1, 4)
		   llZeroAcct = .F.
		
		   THISFORM.creportname = 'source\gltrialb'
		
		*  Check to see if the previous year was closed
		   swselect('sysctl')
		   SET ORDER TO yearclose
		   IF SEEK(lcLastYr + 'YA')
		      llLastYrClosed = .T.
		   ELSE
		      llLastYrClosed = .F.
		   ENDIF
		
		   THISFORM.oglmaint = CREATEOBJECT('glmaint')
		
		*
		*  Get the retained earnings account number.
		*
		   swselect('glopt')
		   GO TOP
		   m.cRetEarn = cRetEarn
		   m.cCurEarn = cCurEarn
		
		*
		*  Recalculate account balances
		*
		   WAIT WIND NOWAIT 'Calculating the account balances...'
		   THISFORM.calcbalances(tcYear)
		   WAIT CLEAR
		
		
		   CREATE CURSOR trialbal1 ;
		      ( ccompany    c(8), ;
		        cAcctNo     c(6), ;
		        cAcctDesc   c(30), ;
		        cFiscalYr   c(4), ;
		        cFiscalPrd  c(2), ;
		        nAcctType   N(2), ;
		        nBegBal     N(13, 2), ;
		        nDebits     N(13, 2), ;
		        nCredits    N(13, 2), ;
		        nEndBal     N(13, 2))
		   INDEX ON ccompany + cAcctNo TAG AcctNo
		
		   CREATE CURSOR trialbal ;
		      ( company    c(8), ;
		        Account     c(6), ;
		        YEAR       c(4), ;
		        period1    N(13, 2), ;
		        period2    N(13, 2), ;
		        period3    N(13, 2), ;
		        period4    N(13, 2), ;
		        period5    N(13, 2), ;
		        period6    N(13, 2), ;
		        period7    N(13, 2), ;
		        period8    N(13, 2), ;
		        period9    N(13, 2), ;
		        period10   N(13, 2), ;
		        period11   N(13, 2), ;
		        period12   N(13, 2))
		   INDEX on company+account TAG pk
		   
		   CREATE CURSOR tempbeg ;
		      (ccompany     c(8), ;
		        nperiod      I, ;
		        cAcctNo    c(6), ;
		        nDebits    N(12, 2), ;
		        nCredits   N(12, 2))
		
		*  Get the activity for each balance sheet account in the range.
		   FOR lnMonth = 1 TO 12
		
			  SELECT  coabalnew.ccompany, ;
					  coabalnew.cAcctNo, ;
					  newcoa.nAcctType, ;
					  INT(VAL(coabalnew.cperiod)) AS nperiod, ;
					  coabalnew.cyear, ;
					  SUM(nDebits) AS nDebits, ;
					  SUM(nCredits) AS nCredits ;
				  FROM coabalnew ;
				  JOIN newcoa ;
					  ON coabalnew.ccompany + coabalnew.cAcctNo = newcoa.ccompany + newcoa.cAcctNo ;
				  WHERE BETWEEN(coabalnew.cAcctNo, tcAcct1, tcAcct2) ;
					  AND coabalnew.cyear = tcYear ;
					  AND INT(VAL(coabalnew.cperiod)) = lnMonth ;
					  AND newcoa.nAcctType < 8 ;
					  AND NOT DELETED() ;
				  INTO CURSOR tempbeg1 ;
				  ORDER BY coabalnew.ccompany, coabalnew.cAcctNo ;
				  GROUP BY coabalnew.ccompany, coabalnew.cAcctNo
		
		      SELECT tempbeg
		      APPEND FROM DBF('tempbeg1')
		
		   ENDFOR
		
		   lncount = _TALLY
		
		*  Get the activity for each income stmt sheet account in the range.
		   FOR lnMonth = 1 TO 12
			  SELECT  coabalnew.ccompany, ;
					  coabalnew.cAcctNo, ;
					  INT(VAL(coabalnew.cperiod)) AS nperiod, ;
					  coabalnew.cyear, ;
					  newcoa.nAcctType, ;
					  SUM(nDebits) AS nDebits, ;
					  SUM(nCredits) AS nCredits ;
				  FROM coabalnew ;
				  JOIN newcoa ;
					  ON coabalnew.ccompany + coabalnew.cAcctNo = newcoa.ccompany + newcoa.cAcctNo ;
				  WHERE BETWEEN(coabalnew.cAcctNo, tcAcct1, tcAcct2) ;
					  AND coabalnew.cyear = tcYear ;
					  AND INT(VAL(coabalnew.cperiod)) = lnMonth ;
					  AND newcoa.nAcctType > 7 ;
					  AND NOT DELETED() ;
				  INTO CURSOR tempbeg2 ;
				  ORDER BY coabalnew.ccompany, coabalnew.cAcctNo ;
				  GROUP BY coabalnew.ccompany, coabalnew.cAcctNo
		
		      SELECT tempbeg
		      APPEND FROM DBF('tempbeg2')
		   ENDFOR
		
		* Put the balances in the trialbal table
		
		
		   FOR lnMonth = 1 TO 12
		      STORE 0 TO m.period1, m.period2, m.period3, m.period4, m.period5, m.period6, ;
		         m.period7, m.period8, m.period9, m.period10, m.period11, m.period12
		      SELECT tempbeg
		      SCAN FOR nperiod = lnMonth
		         SCATTER MEMVAR
		         m.year    = tcYear
		         lcMemvar  = 'm.period' + TRANSFORM(lnMonth)
		         lcField   = 'period'  + TRANSFORM(lnMonth)
		         &lcMemvar = m.nDebits - m.nCredits
		         m.company = m.ccompany
		         m.Account = m.cAcctNo
		
		         SELECT trialbal
		         LOCATE FOR company = m.company ;
		            AND Account  = m.Account
		         IF FOUND()
		            REPLACE &lcField WITH &lcMemvar
		         ELSE
		            INSERT INTO trialbal FROM MEMVAR
		         ENDIF
		      ENDSCAN
		   ENDFOR
		
		   FOR lnMonth = 1 TO 12
		      STORE 0 TO m.period1, m.period2, m.period3, m.period4, m.period5, m.period6, ;
		         m.period7, m.period8, m.period9, m.period10, m.period11, m.period12
		      lnMonthPrior = lnMonth - 1
			  SELECT  m.cretearn as cacctno, ;
					  coabalnew.ccompany, ;
					  SUM(nDebits - nCredits)  AS nRetEarn ;
				  FROM coabalnew join newcoa ON coabalnew.ccompany+coabalnew.cacctno = newcoa.ccompany+newcoa.cacctno ;
				  WHERE coabalnew.cyear = tcYear ;
					  AND INT(VAL(coabalnew.cperiod)) = lnMonth ;
					  AND BETWEEN(newcoa.nAcctType, 8, 16) ;
					  AND NOT DELETED() ;
				  INTO CURSOR tempbeg ;
				  ORDER BY coabalnew.ccompany ;
				  GROUP BY coabalnew.ccompany
		
		      SELECT tempbeg
		      SCAN
		         SCATTER MEMVAR
		         lcCompany  = m.ccompany
		         m.nRetEarn = nRetEarn
		         m.year     = tcYear
		         lcMemvar   = 'm.period' + TRANSFORM(lnMonth)
		         lcField    = 'period'  + TRANSFORM(lnMonth)
		         m.company  = m.ccompany
		         m.Account  = m.cCurEarn
		         &lcField   = m.nRetEarn
		
		         SELECT trialbal
		         LOCATE FOR company = m.company ;
		            AND Account  = m.cCurEarn
		         IF FOUND()
		            REPLACE &lcField WITH &lcField + m.nRetEarn
		         ELSE
		            INSERT INTO trialbal FROM MEMVAR
		         ENDIF
		      ENDSCAN
		   ENDFOR
		
		
		   SELECT  ccompany AS company, ;
				   cAcctNo AS Account, ;
				   tcYear AS YEAR ;
			   FROM newcoa ;
			   WHERE ccompany + cAcctNo NOT IN (SELECT  company + Account ;
													FROM trialbal) ;
			   INTO CURSOR tempmissing
		
		   SELECT trialbal
		   APPEND FROM DBF('tempmissing')
		
		* Get the balance sheet accounts balances at the beginning of the year
		   SELECT  coabalnew.ccompany, ;
				   coabalnew.cAcctNo, ;
				   newcoa.nAcctType, ;
				   coabalnew.cyear, ;
				   SUM(nDebits) AS nDebits, ;
				   SUM(nCredits) AS nCredits ;
			   FROM coabalnew ;
			   JOIN newcoa ;
				   ON coabalnew.ccompany + coabalnew.cAcctNo = newcoa.ccompany + newcoa.cAcctNo ;
			   WHERE BETWEEN(coabalnew.cAcctNo, tcAcct1, tcAcct2) ;
				   AND coabalnew.cyear < tcYear ;
				   AND newcoa.nAcctType < 8 ;
				   AND NOT DELETED() ;
			   INTO CURSOR tempbal READWRITE  ;
			   ORDER BY coabalnew.ccompany, newcoa.cAcctNo ;
			   GROUP BY coabalnew.ccompany, newcoa .cAcctNo
		
		   SELECT newcoa.ccompany, ;
		          newcoa.cacctno, ;
		          0 as ndebits, ;
		          0 as ncredits ;
		     FROM newcoa ;
		     WHERE newcoa.naccttype < 8 AND ;
		           newcoa.ccompany+newcoa.cacctno NOT in ;
		           (SELECT tempbal.ccompany+tempbal.cacctno FROM tempbal) ;
		     INTO CURSOR balmissing ;
		     ORDER BY ccompany, cacctno
		     
		   SELECT tempbal
		   APPEND FROM DBF('balmissing')
		   
		   SELECT closedyears
		   LOCATE FOR NOT lclosed
		   IF FOUND()
		      SELECT closedyears
		      SCAN FOR NOT lclosed
		         lcYear    = cyear
		         lcCompany = ccompany
		
				 SELECT  coabalnew.cAcctNo, ;
						 newcoa.nAcctType, ;
						 SUM(nDebits - nCredits)  AS nRetEarn ;
					 FROM coabalnew, newcoa ;
					 WHERE coabalnew.cyear = lcYear ;
						 AND coabalnew.ccompany == lcCompany ;
						 AND coabalnew.cAcctNo = newcoa.cAcctNo ;
						 AND BETWEEN(newcoa.nAcctType, 8, 16) ;
						 AND NOT DELETED() ;
					 INTO CURSOR tempbeg
		
		         IF _TALLY > 0
		            SELECT tempbeg
		            GO TOP
		            m.nRetEarn = nRetEarn
		         ELSE
		            m.nRetEarn = 0
		         ENDIF
		
		         SELECT trialbal
		         LOCATE FOR company = lcCompany AND Account = m.cRetEarn
		         IF FOUND()
		            REPLACE period1 WITH period1 + m.nRetEarn
		         ENDIF
		      ENDSCAN
		   ENDIF
		
		   SELECT tempbal
		   SCAN
		      SCATTER MEMVAR
		
		      SELECT trialbal
		      LOCATE FOR company = m.ccompany ;
		         AND Account  = m.cAcctNo
		      IF FOUND()
		         REPLACE period1 WITH period1 + m.nDebits - m.nCredits
		         REPLACE period2 WITH period1 + period2
		         REPLACE period3 WITH period2 + period3
		         REPLACE period4 WITH period3 + period4
		         REPLACE period5 WITH period4 + period5
		         REPLACE period6 WITH period5 + period6
		         REPLACE period7 WITH period6 + period7
		         REPLACE period8 WITH period7 + period8
		         REPLACE period9 WITH period8 + period9
		         REPLACE period10 WITH period9 + period10
		         REPLACE period11 WITH period10 + period11
		         REPLACE period12 WITH period11 + period12
		      ENDIF
		   ENDSCAN
		
		   SET SAFETY OFF
		   SELECT trialbal
		   COUNT FOR NOT DELETED() TO lncount
		
		   llerror = .F.
		   TRY
		      SELECT trialbal
		      SET ORDER TO pk
		      COPY TO (THISFORM.cntgetfile1.edtPath.VALUE) TYPE CSV
		   CATCH TO loError
		      llerror = .T.
		      IF loError.ERRORNO = 1705
		         MESSAGEBOX('The ' + THISFORM.cntgetfile1.edtPath.VALUE + ' is already open. Either close the file or choose a new name.', 16, 'Error')
		      ELSE
		         MESSAGEBOX('Error: ' + loError.MESSAGE, 16, 'Error')
		      ENDIF
		   ENDTRY
		   llReturn = .F.
		
		   IF NOT llerror
		      MESSAGEBOX('Created the ' + THISFORM.cntgetfile1.edtPath.VALUE + ' file with ' + TRANSFORM(lncount) + ' records.', 48, 'Consolidated Trial Balance')
		   ENDIF
		
		   IF THISFORM.chkViewDocument.VALUE
		      viewdocument(THISFORM.cntgetfile1.edtPath.VALUE)
		   ENDIF
		
		CATCH TO loError
		   llReturn = .F.
		   DO errorlog WITH 'BuildData', loError.LINENO, 'GLTrialbCon', loError.ERRORNO, loError.MESSAGE, '', loError
		   MESSAGEBOX('Unable to process the report at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		        'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		RETURN llReturn
		
		
		
		
		
		
		
	ENDPROC

	PROCEDURE calcbalances
		LPARA tcYear
		
		tlFinancial = .F.
		
		*
		*  Calculates the balances for each account in the chart of accounts
		*  for each company that is to be consolidated
		*
		LOCAL lcPeriod, lcYear, lnDebits, lnCredits, lnAccttype, m.ccompany
		
		STORE 0 TO lnCredits, lnDebits, lnAccttype
		
		swclose('temp')
		swclose('coa')
		swclose('coabal')
		swclose('compgl')
		swclose('compcoa')
		swclose('compsys')
		swclose('closedyears')
		
		IF NOT USED('compmast')
		   USE datafiles\compmast IN 0
		ENDIF
		
		SWSELECT('coabal', .T.)
		
		CREATE CURSOR tempcoa ;
		   (ccompany   c(8), ;
		     cacctno    c(6), ;
		     cAcctdesc  c(30), ;
		     nAccttype  I, ;
		     cparent    c(6), ;
		     lTitle     L, ;
		     lTotalAcct L)
		
		
		CREATE CURSOR tempbal ;
		   (ccompany  c(8), ;
		     cacctno    c(6), ;
		     nAccttype  N(2), ;
		     cYear      c(4), ;
		     cPeriod    c(2), ;
		     nDebits    N(12, 2), ;
		     nCredits   N(12, 2), ;
		     lTitle     L, ;
		     lTotalAcct L)
		INDEX ON cYear + cPeriod + cacctno TAG acctprd
		
		CREATE CURSOR closedyears ;
		   (ccompany   c(8), ;
		     cYear      c(4), ;
		     lclosed    L)
		
		
		*  Scan through the consolidated companies and add their balances
		
		SELE compmast
		SCAN FOR RIGHT(xflag, 1) = 'C'
		   m.cDataPath = ALLT(cDataPath)
		   m.ccompany  = cidcomp
		   WAIT WIND NOWAIT 'Adding balances for ' + ALLT(cproducer)
		
		* Close the tables if already in use
		   swclose('compcoa')
		   swclose('compgl')
		   swclose('compsys')
		
		   USE (m.cDataPath + 'coa') IN 0 AGAIN ALIAS compcoa
		   USE (m.cDataPath + 'glmaster') IN 0 AGAIN ALIAS compgl
		   USE (m.cDataPath + 'sysctl') IN 0 AGAIN ALIAS compsys
		
		   SELE compcoa
		   SCAN
		      SCATTER MEMVAR
		      INSERT INTO tempcoa FROM MEMVAR
		   ENDSCAN
		
		   IF tlFinancial
			  SELECT  m.cCompany AS ccompany, ;
					  compgl.cacctno,          ;
					  cYear,                     ;
					  cPeriod,                   ;
					  SUM(nDebits) AS nDebits,   ;
					  SUM(nCredits) AS nCredits ;
				  FROM compgl ;
				  WHERE compgl.csource # 'YE' ;
				  INTO CURSOR temp READWRITE ;
				  ORDER BY compgl.cacctno, cYear, cPeriod ;
				  GROUP BY compgl.cacctno, cYear, cPeriod
		   ELSE
			  SELECT  m.cCompany AS ccompany, ;
					  compgl.cacctno,          ;
					  cYear,                     ;
					  cPeriod,                   ;
					  SUM(nDebits) AS nDebits,   ;
					  SUM(nCredits) AS nCredits  ;
				  FROM compgl ;
				  INTO CURSOR temp READWRITE ;
				  ORDER BY compgl.cacctno, cYear, cPeriod ;
				  GROUP BY compgl.cacctno, cYear, cPeriod
		   ENDIF
		
		   IF _TALLY > 0
		      lnMax   = _TALLY
		      lnCount = 1
		      SELECT temp
		      REPLACE ccompany WITH m.ccompany ALL
		      SELECT tempbal
		      APPEND FROM DBF('temp')
		       
		   ENDIF
		
		* Get list of years so we can check if they've been closed
		   SELECT  ccompany, ;
				   tempbal.cYear, ;
				   .F. AS lclosed ;
			   FROM tempbal ;
			   WHERE cYear < tcYear AND NOT EMPTY(cyear) ;
			    AND ccompany == m.ccompany ;
			   INTO CURSOR tempyears READWRITE ;
			   ORDER BY ccompany, cYear ;
			   GROUP BY ccompany, cYear
		
		   SELECT tempyears
		   SCAN
		      m.cYear = cYear
		      SWSELECT('sysctl')
		      SCAN FOR cYear == m.cYear AND ctypeclose = 'A'
		         IF sysctl.lyearclose
		            SELECT tempyears
		            REPLACE lclosed WITH .T.
		         ENDIF
		      ENDSCAN
		   ENDSCAN
		
		   SELECT closedyears
		   LOCATE FOR ccompany = m.ccompany
		   IF NOT FOUND()
		      APPEND FROM DBF('tempyears')
		   ENDIF    
		ENDSCAN
		
		
		SELE ccompany, cacctno, cYear, cPeriod, ;
		   SUM(nDebits) AS nDebits, ;
		   SUM(nCredits) AS nCredits ;
		   FROM tempbal ;
		   INTO CURSOR coabalnew READWRITE  ;
		   ORDER BY ccompany, cacctno, cYear, cPeriod ;
		   GROUP BY ccompany, cacctno, cYear, cPeriod
		SELECT coabalnew
		INDEX ON ccompany + cacctno TAG cacctno
		INDEX ON ccompany + cYear + cPeriod TAG cyearprd
		*
		*  Combine chart of accounts
		*
		SELE * FROM tempcoa ;
		   INTO CURSOR newcoa READWRITE;
		   ORDER BY ccompany, cacctno ;
		   GROUP BY ccompany, cacctno
		INDEX ON ccompany + cacctno TAG acctno
		
		SELECT coabalnew
		
		
		
		
		
	ENDPROC

	PROCEDURE Init
		IF DODEFAULT()
		   SELECT coa
		   SET DELETED ON
		   GO TOP
		   THISFORM.swrptlook1.txtBegID.VALUE = cacctno
		   THISFORM.swrptlook1.txtBegName.VALUE = cacctdesc
		   GO BOTTOM
		   THISFORM.swrptlook1.txtEndID.VALUE = cacctno
		   THISFORM.swrptlook1.txtEndName.VALUE = cacctdesc
		  
		   THISFORM.txtYear.VALUE = GetFiscalYear(DATE())
		   
		   THISFORM.cntgetfile1.edtpath.VALUE = specialfolders('CommonDocuments') + 'pbcs.csv'
		ENDIF
		
		
	ENDPROC

	PROCEDURE cmdChoose.Click
		DO FORM source\glConsolidate
	ENDPROC

	PROCEDURE Cmdcommandbuttoncustom1.Click
		thisform.builddata()
	ENDPROC

	PROCEDURE Cmdcommandbuttoncustom2.Click
		thisform.Release()
	ENDPROC

	PROCEDURE Cntgetfile1.cmdPath.Click
		LOCAL cPath
		LOCAL llReturn, loError, llError
		#INCLUDE vfp2c.h
		llReturn = .T.
		
		TRY
		   IF THIS.PARENT.lPathOnly
		      llError = .F.
		      TRY 
		      IF NOT FILE('datafiles\vfp2c32.fll')
		         GetVFPc32()
		      ENDIF
		
		      SET LIBRARY TO datafiles\vfp2c32.fll ADDITIVE
		      INITVFP2C32(VFP2C_INIT_ALL)
		
		      LOCAL lcFolder
		
		      SHBROWSEFOLDER('Choose a Folder', BIF_NEWDIALOGSTYLE, @cPath)
		      CATCH TO loError
		*         DO errorlog WITH 'cmdPath.click', loError.LINENO, 'FileBackup', loError.ERRORNO, loError.MESSAGE, '', loError
		         llError = .T.
		      ENDTRY
		      IF llError
		         m.cPath = GETFILE(THIS.PARENT.cExtensionList)
		      ENDIF    
		   ELSE
		      m.cPath = GETFILE(THIS.PARENT.cExtensionList)
		   ENDIF
		   IF NOT EMPTY(m.cPath)
		      THIS.PARENT.SetValue(m.cPath)
		   ENDIF
		
		
		   IF LEN(THISFORM.cntgetfile1.edtpath.VALUE) > 120  &&  Greater than the max, so don't let them choose it.
		      THISFORM.oMessage.Warning('The chosen path contains more than the maximum of 120 characters.  Please choose a different path, or use a relative path to shorten the length.')
		      THISFORM.cntgetfile1.edtpath.SET('value', '')
		   ENDIF
		CATCH TO loError
		   llReturn = .F.
		   DO errorlog WITH 'cmdPath.click', loError.LINENO, 'FileBackup', loError.ERRORNO, loError.MESSAGE, '', loError
		   MESSAGEBOX('Unable to process the backup at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		        'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		RETURN llReturn
		
		
	ENDPROC

	PROCEDURE Swrptlook1.Swlookupbutton1.Click
		LOCAL lcList
		PRIV llOK
		
		llOK = .F.
		lcList = 'cacctno/acctno,cacctdesc/acctdesc'
		
		DO FORM ..\CUSTOM\picklist WITH 'coa', lcList, THISFORM.swrptlook1.txtBegID.VALUE, 2
		
		IF llOK
		   THISFORM.swrptlook1.txtBegName.VALUE = coa.cacctdesc
		   THISFORM.swrptlook1.txtBegID.VALUE = coa.cacctno
		   THISFORM.REFRESH()
		ENDIF
		
		
		
	ENDPROC

	PROCEDURE Swrptlook1.Swlookupbutton2.Click
		LOCAL lcList
		PRIV llOK
		
		llOK = .F.
		lcList = 'cacctno/acctno,cacctdesc/acctdesc'
		
		DO FORM ..\CUSTOM\picklist WITH 'coa', lcList, THISFORM.swrptlook1.txtEndID.VALUE, 2
		
		IF llOK
		   THISFORM.swrptlook1.txtEndName.VALUE = coa.cacctdesc
		   THISFORM.swrptlook1.txtEndID.VALUE = coa.cacctno
		   THISFORM.REFRESH()
		ENDIF
		
		
		
	ENDPROC

ENDDEFINE
