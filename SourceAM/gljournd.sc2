*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="gljournd.scx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="2" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Cursor1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Relation1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor6" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor7" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor8" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor9" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor10" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor11" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor12" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor13" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor14" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor15" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Relation2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor16" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor17" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor18" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor19" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor20" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor21" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor23" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor22" UniqueID="" Timestamp="" />

	AutoOpenTables = .F.
	DataSource = .NULL.
	Height = 619
	InitialSelectedAlias = "gljourn"
	Left = -8
	Name = "Dataenvironment"
	Top = 0
	Width = 1016

	ADD OBJECT 'Cursor1' AS cursor WITH ;
		Alias = "gljourn", ;
		CursorSource = "gljourn", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 388, ;
		Name = "Cursor1", ;
		Top = 14, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor10' AS cursor WITH ;
		Alias = "expsusp", ;
		BufferModeOverride = 5, ;
		CursorSource = "expsusp", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 13, ;
		Name = "Cursor10", ;
		Top = 269, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor11' AS cursor WITH ;
		Alias = "gldept", ;
		CursorSource = "gldept", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 374, ;
		Name = "Cursor11", ;
		Top = 291, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor12' AS cursor WITH ;
		Alias = "options", ;
		CursorSource = "options", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 121, ;
		Name = "Cursor12", ;
		Top = 152, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor13' AS cursor WITH ;
		Alias = "expense", ;
		BufferModeOverride = 5, ;
		CursorSource = "expense", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 374, ;
		Name = "Cursor13", ;
		Top = 414, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor14' AS cursor WITH ;
		Alias = "glrecur", ;
		CursorSource = "glrecur", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 517, ;
		Name = "Cursor14", ;
		Top = 15, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor15' AS cursor WITH ;
		Alias = "glredet", ;
		CursorSource = "glredet", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 518, ;
		Name = "Cursor15", ;
		Top = 145, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor16' AS cursor WITH ;
		Alias = "glrecur1", ;
		CursorSource = "glrecur", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 498, ;
		Name = "Cursor16", ;
		Top = 287, ;
		Width = 97
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor17' AS cursor WITH ;
		Alias = "expense1", ;
		CursorSource = "expense", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 129, ;
		Name = "Cursor17", ;
		Top = 279, ;
		Width = 97
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor18' AS cursor WITH ;
		Alias = "expsusp1", ;
		CursorSource = "expsusp", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 7, ;
		Name = "Cursor18", ;
		Top = 390, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor19' AS cursor WITH ;
		Alias = "gljourn1", ;
		CursorSource = "gljourn", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 126, ;
		Name = "Cursor19", ;
		Top = 394, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor2' AS cursor WITH ;
		Alias = "gljndet", ;
		BufferModeOverride = 5, ;
		CursorSource = "gljndet", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 384, ;
		Name = "Cursor2", ;
		Top = 142, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor20' AS cursor WITH ;
		Alias = "gljndet1", ;
		CursorSource = "gljndet", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 247, ;
		Name = "Cursor20", ;
		Top = 394, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor21' AS cursor WITH ;
		Alias = "trangroup", ;
		CursorSource = "trangroup", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor21", ;
		Top = 620, ;
		Width = 101
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor22' AS cursor WITH ;
		Alias = "afeopt", ;
		CursorSource = "afeopt", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 379, ;
		Name = "Cursor22", ;
		Top = 424, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor23' AS cursor WITH ;
		Alias = "allunits", ;
		CursorSource = "allunits", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 690, ;
		Name = "Cursor23", ;
		Top = 244, ;
		Width = 91
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor3' AS cursor WITH ;
		Alias = "glmaster", ;
		BufferModeOverride = 5, ;
		CursorSource = "glmaster", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 9, ;
		Name = "Cursor3", ;
		Order = "glbatch", ;
		Top = 147, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor4' AS cursor WITH ;
		Alias = "coa", ;
		CursorSource = "coa", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 88, ;
		Left = 114, ;
		Name = "Cursor4", ;
		Order = "acctno", ;
		Top = 21, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor5' AS cursor WITH ;
		Alias = "glopt", ;
		CursorSource = "glopt", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 10, ;
		Name = "Cursor5", ;
		Top = 20, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor6' AS cursor WITH ;
		Alias = "coabal", ;
		BufferModeOverride = 5, ;
		CursorSource = "coabal", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 89, ;
		Left = 224, ;
		Name = "Cursor6", ;
		Order = "acctprd", ;
		Top = 21, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor7' AS cursor WITH ;
		Alias = "checks", ;
		BufferModeOverride = 5, ;
		CursorSource = "checks", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 249, ;
		Name = "Cursor7", ;
		Top = 145, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor8' AS cursor WITH ;
		Alias = "wells", ;
		CursorSource = "wells", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 238, ;
		Name = "Cursor8", ;
		Top = 270, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor9' AS cursor WITH ;
		Alias = "expcat", ;
		CursorSource = "expcat", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 374, ;
		Name = "Cursor9", ;
		Top = 292, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Relation1' AS relation WITH ;
		ChildAlias = "gljndet", ;
		ChildOrder = "batch", ;
		Name = "Relation1", ;
		ParentAlias = "gljourn", ;
		RelationalExpr = "cbatch"
		*< END OBJECT: BaseClass="relation" />

	ADD OBJECT 'Relation2' AS relation WITH ;
		ChildAlias = "glredet", ;
		ChildOrder = "batch", ;
		Name = "Relation2", ;
		ParentAlias = "glrecur", ;
		RelationalExpr = "cbatch"
		*< END OBJECT: BaseClass="relation" />

ENDDEFINE

DEFINE CLASS formgljourn AS frmdatamanagerformcustom OF "..\custom\cforms.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="txtCbatch" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblCbatch" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtCglref" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblCglref" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblDgldate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdGljndet" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdGljndet.Column1.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdGljndet.Column1.txtcDesc" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdGljndet.Column2.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdGljndet.Column2.txtcAcctNo" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdGljndet.Column3.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdGljndet.Column3.txtcUnitNo" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdGljndet.Column4.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdGljndet.Column4.txtcDeptNo" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdGljndet.Column5.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdGljndet.Column5.txtnDebits" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdGljndet.Column6.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdGljndet.Column6.txtnCredits" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdGljndet.Column7.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdGljndet.Column7.txtcCatCode" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtNtotaldr" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtNtotalcr" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdComments" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtnBalance" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdRecur" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdNewDetail" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcDesc" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Glmaint" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grouptran" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cmdcommandbuttoncustom1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtdgldate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdDocument" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: calctots
		*m: catlookup
		*m: coalookup
		*m: deptlookup
		*m: dmexpense
		*m: lookcoa
		*m: welllookup
		*p: ccurrentobj
		*p: cexpclear		&& Expense Clearing Account No
		*p: lbankacct		&& At least 1 bank account is specified in the details
		*p: lconfirm
		*p: ldeldetail
		*p: ldeptrequired
		*p: lregentry		&& Check Registry Entry Required
		*p: lsepclose
		*p: lwellrequired
		*p: ntotalcr
		*p: ntotaldr
		*p: odist		&& Distribution Proc object (used by Disb Mgr)
	*</DefinedPropArrayMethod>

	Caption = "General Journal Entries"
	clistexpression = gljourn.cbatch
	cworkarea = gljourn
	DoCreate = .T.
	Height = 413
	HelpContextID = 345
	ldeldetail = .F.
	lexpliciteditmode = .F.
	Name = "FormGljourn"
	ShowTips = .T.
	Visible = .T.
	Width = 639
	WindowState = 0
	cmdatamanager.Name = "cmdatamanager"
	cmdatamanager.TabIndex = 1
	cmlookupmanager.Left = 20
	cmlookupmanager.Name = "cmlookupmanager"
	cmlookupmanager.Top = 3
	Mwresize1.lblHighLight.Name = "lblHighLight"
	Mwresize1.lblShading.Name = "lblShading"
	Mwresize1.Name = "Mwresize1"

	ADD OBJECT 'Cmdcommandbuttoncustom1' AS cmdcommandbuttoncustom WITH ;
		Caption = "Delete Line", ;
		Height = 20, ;
		Left = 160, ;
		Name = "Cmdcommandbuttoncustom1", ;
		TabIndex = 15, ;
		Top = 387, ;
		Width = 68
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdComments' AS cmdcommandbuttoncustom WITH ;
		Caption = "Comments", ;
		Height = 29, ;
		Left = 531, ;
		Name = "cmdComments", ;
		TabIndex = 8, ;
		TabStop = .F., ;
		Top = 43, ;
		Width = 75
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdDocument' AS cmdcommandbuttoncustom WITH ;
		Caption = "\<Document", ;
		Height = 29, ;
		Left = 532, ;
		Name = "cmdDocument", ;
		TabIndex = 17, ;
		TabStop = .F., ;
		Top = 8, ;
		Width = 75, ;
		ZOrderSet = 27
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdNewDetail' AS cmdcommandbuttoncustom WITH ;
		Caption = "Add Line", ;
		Height = 20, ;
		Left = 108, ;
		Name = "cmdNewDetail", ;
		TabIndex = 15, ;
		Top = 387, ;
		Width = 50
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdRecur' AS cmdcommandbuttoncustom WITH ;
		Caption = "\<Recurring Entries", ;
		Height = 20, ;
		Left = 9, ;
		Name = "cmdRecur", ;
		TabIndex = 14, ;
		Top = 387, ;
		Width = 97
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'Glmaint' AS glmaint WITH ;
		Left = 13, ;
		Name = "Glmaint", ;
		Top = 35
		*< END OBJECT: ClassLib="..\custom\swgl.vcx" BaseClass="custom" />

	ADD OBJECT 'grdGljndet' AS grdgridcustom WITH ;
		ColumnCount = 7, ;
		cworkarea = gljndet, ;
		Height = 295, ;
		lallowautoappend = .T., ;
		lcolumnmemory = .F., ;
		Left = 10, ;
		LinkMaster = "", ;
		lrefreshonrowchange = .T., ;
		Name = "grdGljndet", ;
		Panel = 1, ;
		RecordSource = "gljndet", ;
		RecordSourceType = 1, ;
		TabIndex = 11, ;
		Top = 84, ;
		Width = 626, ;
		Column1.ControlSource = "gljndet.cdesc", ;
		Column1.FontSize = 8, ;
		Column1.Name = "Column1", ;
		Column1.Width = 178, ;
		Column2.ControlSource = "gljndet.cacctno", ;
		Column2.FontSize = 8, ;
		Column2.Name = "Column2", ;
		Column2.Width = 57, ;
		Column3.ControlSource = "gljndet.cunitno", ;
		Column3.FontSize = 8, ;
		Column3.Name = "Column3", ;
		Column3.Width = 72, ;
		Column4.ColumnOrder = 5, ;
		Column4.ControlSource = "gljndet.cdeptno", ;
		Column4.FontSize = 8, ;
		Column4.Name = "Column4", ;
		Column4.Width = 61, ;
		Column5.ColumnOrder = 6, ;
		Column5.ControlSource = "gljndet.ndebits", ;
		Column5.FontSize = 8, ;
		Column5.Name = "Column5", ;
		Column5.Width = 77, ;
		Column6.ColumnOrder = 7, ;
		Column6.ControlSource = "gljndet.ncredits", ;
		Column6.FontSize = 8, ;
		Column6.Name = "Column6", ;
		Column6.Width = 84, ;
		Column7.ColumnOrder = 4, ;
		Column7.ControlSource = "gljndet.ccatcode", ;
		Column7.FontSize = 8, ;
		Column7.Name = "Column7", ;
		Column7.Width = 48
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="grid" />

	ADD OBJECT 'grdGljndet.Column1.Header1' AS header WITH ;
		Caption = "Description", ;
		FontSize = 8, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'grdGljndet.Column1.txtcDesc' AS txttextboxcustom WITH ;
		BackColor = 255,255,255, ;
		BorderStyle = 0, ;
		FontName = "Arial", ;
		FontSize = 8, ;
		ForeColor = 0,0,0, ;
		Margin = 0, ;
		Name = "txtcDesc"
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'grdGljndet.Column2.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "Account", ;
		FontSize = 8, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'grdGljndet.Column2.txtcAcctNo' AS txtquickfill WITH ;
		clistexpression = cAcctNo, ;
		clistworkarea = coa, ;
		ControlSource = "gljndet.cacctno", ;
		FontName = "Arial", ;
		FontSize = 8, ;
		InputMask = "XXXXXX", ;
		Left = 32, ;
		MaxLength = 6, ;
		Name = "txtcAcctNo", ;
		Top = 33
		*< END OBJECT: ClassLib="..\custom\cgadget.vcx" BaseClass="textbox" />

	ADD OBJECT 'grdGljndet.Column3.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = " Well/Lease", ;
		FontSize = 8, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'grdGljndet.Column3.txtcUnitNo' AS txtquickfill WITH ;
		clistexpression = cunitno, ;
		clistworkarea = allunits, ;
		FontName = "Arial", ;
		Left = 34, ;
		Name = "txtcUnitNo", ;
		Top = 33
		*< END OBJECT: ClassLib="..\custom\cgadget.vcx" BaseClass="textbox" />

	ADD OBJECT 'grdGljndet.Column4.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "Dept", ;
		FontSize = 8, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'grdGljndet.Column4.txtcDeptNo' AS txtquickfill WITH ;
		clistexpression = cdeptno, ;
		clistworkarea = gldept, ;
		FontName = "Arial", ;
		Left = 38, ;
		Name = "txtcDeptNo", ;
		Top = 33
		*< END OBJECT: ClassLib="..\custom\cgadget.vcx" BaseClass="textbox" />

	ADD OBJECT 'grdGljndet.Column5.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "Debit", ;
		FontSize = 8, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'grdGljndet.Column5.txtnDebits' AS txttextboxcustom WITH ;
		BackColor = 255,255,255, ;
		BorderStyle = 0, ;
		FontName = "Arial", ;
		FontSize = 8, ;
		ForeColor = 0,0,0, ;
		InputMask = "999999999.99", ;
		Margin = 0, ;
		Name = "txtnDebits"
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'grdGljndet.Column6.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "Credit", ;
		FontSize = 8, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'grdGljndet.Column6.txtnCredits' AS txttextboxcustom WITH ;
		BackColor = 255,255,255, ;
		BorderStyle = 0, ;
		FontName = "Arial", ;
		FontSize = 8, ;
		ForeColor = 0,0,0, ;
		InputMask = "999999999.99", ;
		Margin = 0, ;
		Name = "txtnCredits"
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'grdGljndet.Column7.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "Exp Code", ;
		FontSize = 8, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'grdGljndet.Column7.txtcCatCode' AS txtquickfill WITH ;
		clistexpression = ccatcode, ;
		clistworkarea = expcat, ;
		ControlSource = "gljndet.ccatcode", ;
		FontName = "Arial", ;
		FontSize = 8, ;
		Left = 33, ;
		MaxLength = 4, ;
		Name = "txtcCatCode", ;
		Top = 33
		*< END OBJECT: ClassLib="..\custom\cgadget.vcx" BaseClass="textbox" />

	ADD OBJECT 'Grouptran' AS grouptran WITH ;
		Height = 24, ;
		Left = 528, ;
		Name = "Grouptran", ;
		Top = 0, ;
		Width = 24
		*< END OBJECT: ClassLib="..\custom\swgl.vcx" BaseClass="custom" />

	ADD OBJECT 'lblCbatch' AS lblfieldlabelcustom WITH ;
		Caption = "Batch Number", ;
		Height = 16, ;
		Left = 43, ;
		Name = "lblCbatch", ;
		TabIndex = 4, ;
		Top = 15, ;
		Width = 70
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblCglref' AS lblfieldlabelcustom WITH ;
		Caption = "Reference ID", ;
		Height = 16, ;
		Left = 236, ;
		Name = "lblCglref", ;
		TabIndex = 10, ;
		Top = 49, ;
		Width = 65
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblDgldate' AS lblfieldlabelcustom WITH ;
		Caption = "Transaction Date", ;
		Height = 16, ;
		Left = 29, ;
		Name = "lblDgldate", ;
		TabIndex = 9, ;
		Top = 49, ;
		Width = 84
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom1' AS lbllabelcustom WITH ;
		Caption = "Totals", ;
		Left = 406, ;
		Name = "Lbllabelcustom1", ;
		TabIndex = 17, ;
		Top = 390
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom2' AS lbllabelcustom WITH ;
		Caption = "Transaction Balance", ;
		Height = 16, ;
		Left = 236, ;
		Name = "Lbllabelcustom2", ;
		TabIndex = 5, ;
		Top = 15, ;
		Width = 101
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'txtCbatch' AS txttextboxcustom WITH ;
		ControlSource = "gljourn.cbatch", ;
		Height = 20, ;
		InputMask = "NNNNNNNN", ;
		Left = 119, ;
		MaxLength = 8, ;
		Name = "txtCbatch", ;
		ReadOnly = .T., ;
		TabIndex = 2, ;
		Top = 13, ;
		Width = 77
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcDesc' AS txttextboxcustom WITH ;
		BackColor = 255,255,0, ;
		Enabled = .T., ;
		Height = 20, ;
		Left = 238, ;
		Name = "txtcDesc", ;
		TabIndex = 16, ;
		Top = 387, ;
		Visible = .F., ;
		Width = 163
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtCglref' AS txttextboxcustom WITH ;
		ControlSource = "gljourn.cglref", ;
		Height = 20, ;
		Left = 307, ;
		MaxLength = 20, ;
		Name = "txtCglref", ;
		TabIndex = 7, ;
		Top = 47, ;
		Width = 185
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtdgldate' AS dpk WITH ;
		ControlSource = "gljourn.dgldate", ;
		Height = 20, ;
		lcheckdate = .T., ;
		Left = 119, ;
		lmorethan90 = .F., ;
		Name = "txtdgldate", ;
		TabIndex = 5, ;
		Top = 47, ;
		Visible = .T., ;
		Width = 77
		*< END OBJECT: ClassLib="..\custom\swdate.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtnBalance' AS txttextboxcustom WITH ;
		Height = 20, ;
		Left = 372, ;
		lreadonly = .T., ;
		Name = "txtnBalance", ;
		TabIndex = 3, ;
		TabStop = .F., ;
		Top = 13, ;
		Width = 120
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtNtotalcr' AS txttextboxcustom WITH ;
		BackColor = 212,208,200, ;
		ControlSource = "gljourn.ntotalcr", ;
		FontSize = 8, ;
		Height = 20, ;
		Left = 527, ;
		Name = "txtNtotalcr", ;
		TabIndex = 13, ;
		Top = 386, ;
		Width = 80
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtNtotaldr' AS txttextboxcustom WITH ;
		BackColor = 212,208,200, ;
		ControlSource = "gljourn.ntotaldr", ;
		FontSize = 8, ;
		Height = 20, ;
		Left = 441, ;
		Name = "txtNtotaldr", ;
		TabIndex = 12, ;
		Top = 386, ;
		Width = 80
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />
	
	PROCEDURE Activate
		IF DODEFAULT()
		*   THISFORM.REFRESH()
		*   THISFORM.calctots()
		   SWSELECT('glopt')
		   THISFORM.cExpClear = cExpClear
		   IF EMPTY(cExpClear)
		      THISFORM.cExpClear = cSuspense
		   ENDIF
		   SWSELECT('gljndet')
		ENDIF
		
	ENDPROC

	PROCEDURE calctots
		LOCAL lnSelect, lnTotalDr, lnTotalCr, lnRecNo, lcBatch
		
		lcBatch = gljourn.cBatch
		lnSelect = SELECT()
		
		SELECT gljndet
		lnRecNo = RECNO()
		
		STORE 0 TO lnTotalDr, lnTotalCr
		
		SCAN FOR cBatch == lcBatch
		   lnTotalDr = lnTotalDr + nDebits
		   lnTotalCr = lnTotalCr + nCredits
		ENDSCAN
		   
		SELECT (lnSelect)
		IF gljourn.ntotaldr <> lntotaldr
		   thisform.cmdatamanager.Replace('Gljourn', 'nTotalDr', lnTotalDr)
		ENDIF
		IF gljourn.ntotalcr <> lntotalcr   
		   thisform.cmdatamanager.Replace('Gljourn', 'nTotalCr', lnTotalCr)
		ENDIF
		   
		thisform.txtnBalance.value = lnTotalDr - lnTotalCr
		thisform.refresh()
		
		UNLOCK IN gljndet
		
		SELE (lnSelect)
	ENDPROC

	PROCEDURE catlookup
		LOCAL lcList
		PRIV llOK
		
		llOK = .T.
		
		SELECT cCatCode,cCateg,cExpClass,IIF(lAFEType,'A','') AS cAFEType, IIF(lJIBOnly,'J','') as cJIBOnly  ;
		   FROM expcat INTO CURSOR exptmp readwrite
		
		SELECT exptmp
		INDEX ON cCatCode           TAG cCatCode
		INDEX ON cCateg             TAG cCateg
		INDEX ON cExpClass+cCatCode TAG cExpClass
		INDEX on cafetype           TAG cafetype
		INDEX on cjibonly           TAG cjibonly
		
		lcList = 'ccatcode\Code,ccateg\Category,cexpclass\Cls,cAFEType\AFE,cJIBOnly\JIB'
		
		DO FORM '..\custom\picklist' WITH 'exptmp', lcList, thisform.grdGljndet.coLUMN7.txtcCatCode.value, 5, .T., .T.
		
		IF llOK
		   thisform.cmdatamanager.replace('Gljndet', 'cCatCode', exptmp.ccatcode)
		ENDIF
		
		
		
	ENDPROC

	PROCEDURE coalookup
		LOCAL lcSelect, lcList
		PRIV llOK
		
		llOK = .F.
		lcList = 'cacctno/acctno,cacctdesc/acctdesc'
		
		lcSelect = SELECT()
		
		DO FORM ..\custom\picklist WITH 'Coa', lcList, 'cacctno', 2
		
		IF llOK
		   thisform.cmdatamanager.replace('Gljndet', 'cAcctNo', coa.cacctno)
		   SELECT coa 
		   thisform.ldeptrequired = lacctdept
		   thisform.lwellrequired = lacctunit
		ENDIF   
		
		
	ENDPROC

	PROCEDURE deptlookup
		LOCAL lcSelect, lcList
		PRIV llOK
		
		llOK = .F.
		lcList = 'cdeptno\Dept No,cdeptdesc\Department Description'
		
		lcSelect = SELECT()
		
		DO FORM ..\custom\picklist WITH 'Gldept', lcList, gljndet.cdeptno, 2,.f.,.t.
		
		IF llOK
		   thisform.cmdatamanager.replace('Gljndet', 'cDeptNo', gldept.cdeptno)
		ENDIF   
		
		SELECT (lcSelect)
		
		
	ENDPROC

	PROCEDURE Destroy
		THISFORM.grouptran.UNLOAD()
		DODEFAULT()
	ENDPROC

	PROCEDURE dmexpense
		LOCAL lcBatch, lcYear, lcPeriod, llAllocExp
		*
		*  Adds the expense entries to the disbursement manager EXPSUSP
		*
		
		*
		*  Call distproc to create the (invtmp) and (wellwork) cursors
		*
		SELECT wells
		SET ORDER TO cWellID
		GO TOP
		lcWellID1 = cWellID
		GO BOTT
		lcWellID2 = cWellID
		
		*  Check to see if expenses entered for wells were allocated
		*  If so, and the period isn't closed, delete it.  Otherwise
		*  let the user know he can't delete this entry.
		lcBatch = gljourn.cBatch
		
		IF NOT checkexp(lcBatch)
		   RETURN .F.
		ENDIF
		
		SELECT afeopt  &&  Whether to allocate AFE expenses or not
		llAllocExp = lAllocExp
		
		SELECT expsusp
		SCAN FOR cBatch == lcBatch
		   DELE NEXT 1
		ENDSCAN
		
		* Remove Expense entries
		SELECT expense
		SCAN FOR cBatch == lcBatch
		   DELE NEXT 1
		ENDSCAN
		
		m.cvendorid  = ''
		m.dExpDate   = gljourn.dgldate
		lcYear       = THISFORM.glmaint.getperiod(m.dExpDate,.T.)
		lcPeriod     = THISFORM.glmaint.getperiod(m.dExpDate,.F.)
		m.crefid     = gljourn.cglref
		m.lAPTran    = .T.
		m.cBatch     = lcBatch
		m.dPostDate  = gljourn.dgldate
		m.cMemo      = ''
		m.cPaidByCk  = ''
		m.cPrdPaid   = ''
		m.lFixed     = .F.
		m.lClosed    = .F.
		m.lAllocated = .F.
		m.nRunNoRev = 0
		m.nRunNoJIB = 0
		m.cRunYearRev = ''
		m.cRunYearJIB = ''
		
		SELECT gljndet
		SCAN FOR cBatch == lcBatch AND NOT EMPTY(cUnitNo) AND NOT EMPTY(cCatCode)
		   SCATTER MEMVAR
		   m.cPayee     = m.cdesc
		
		*
		*  Don't process any non-well expenses
		*
		   SELECT wells
		   SET ORDER TO cWellID
		   IF NOT SEEK(m.cUnitNo)
		      LOOP
		   ENDIF
		
		*
		*  Don't process any expenses that aren't tied
		*  to a valid expense category code
		*
		   SELECT expcat
		   SET ORDER TO cCatCode
		   IF NOT SEEK(m.cCatCode)
		      LOOP
		   ELSE
		      IF m.goapp.lAFEOpt and lAFEType AND NOT llAllocExp  &&  Only loop if they've got the AFE mod and it's not set to allocate to AFE expenses
		         LOOP
		      ENDIF
		      m.cCateg = cCateg
		      m.cExpClass = cExpClass
		   ENDIF
		
		   m.cMemo      = gljndet.cdesc
		   m.cYear      = ''
		   m.cPeriod    = ''
		   m.cWellID    = m.cUnitNo
		   m.nSaltWater = 0
		
		   IF m.nDebits > 0
		      m.nAmount = m.nDebits
		   ENDIF
		
		   IF m.nCredits > 0
		      m.nAmount = m.nCredits * -1
		   ENDIF
		
		   * Adjust amount to account for dummy owners
		   m.nAmount = swNetExp(m.nAmount, m.cWellID, .F., m.cExpClass, 'B')
		   
		   m.lOneMan = .F.
		   m.cidexps    = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Expense')
		
		   SELECT expsusp1
		   SET DELE OFF
		   SET ORDER TO cidexps
		   DO WHILE SEEK(m.cidexps)
		      m.cidexps    = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Expense')
		   ENDDO
		   SET DELE ON
		
		   SELECT expsusp
		   INSERT INTO expsusp FROM MEMVAR
		ENDSCAN
		
		RETURN .T.
		
	ENDPROC

	PROCEDURE Init
		IF DODEFAULT()
		   swselect('options')
		   GO TOP
		   this.lSepClose = lSepClose
		   
		   IF m.goApp.lDocuments
		      thisform.AddObject('oFileDialog','sffiledialog')
		      thisform.cmdDocument.visible = .t.
		   ELSE
		      thisform.cmdDocument.visible = .f.
		   ENDIF 
		
		ENDIF   
	ENDPROC

	PROCEDURE list
		LPARAMETERS cworkarea
		LOCAL lcList
		PRIV llOK
		
		IF USED('lookuptmp')
		   USE IN lookuptmp
		ENDIF
		IF USED('lookuptmp1')
		   USE IN lookuptmp1
		ENDIF
		
		llOK = .F.
		
		IF THIS.flushcontrolbuffer() AND THIS.beforenav('Gljourn')
		   lcList = 'cBatch\Batch,dgldate\Date,cglref\Reference,ntotaldr\Debits,ntotalcr\Credits'
		
		   SELECT cBatch,dgldate,cglref,ntotaldr,ntotalcr,.F. AS junk FROM gljourn INTO CURSOR lookuptmp1
		   USE DBF('lookuptmp1') AGAIN IN 0 ALIAS lookuptmp EXCL
		   SELECT lookuptmp
		   INDEX ON cBatch TAG cBatch
		   INDEX ON dgldate TAG dgldate
		   INDEX ON cglref TAG cglref
		   INDEX ON ntotaldr TAG ntotaldr
		   INDEX ON ntotalcr TAG ntotalcr
		
		   DO FORM ..\CUSTOM\picklist WITH 'lookuptmp', lcList, gljourn.cBatch, 5, .T.,.T.
		
		   IF llOK
		      SELE gljourn
		      LOCATE FOR cBatch == lookuptmp.cBatch
		      THISFORM.cmdatamanager.setrecordposition('Gljourn')
		      THISFORM.REFRESH()
		   ENDIF
		ELSE
		   RETURN
		ENDIF
		
	ENDPROC

	PROCEDURE lookcoa
		LOCAL lcList
		PRIV llOK
		
		llOK = .F.
		lcList = 'cacctno/acctno,cacctdesc/acctdesc'
		
		DO FORM ..\custom\picklist WITH 'Coa', lcList, 'cacctno', 2
		
		IF llOK
		   thisform.cmdatamanager.replace('gljndet','cacctno',coa.cactno)
		   thisform.refresh()
		ENDIF   
	ENDPROC

	PROCEDURE save
		LPARAMETERS cworkarealist
		
		thisform.txtdgldate.lmorethan90 = .f.  &&  Turn off the date nag until a new record gets added
		
		thisform.txtdgldate.setfocus()
		thisform.setnextcontrol(thisform.txtdgldate)
		thisform.activatenextcontrol()
		
		DODEFAULT(cworkarealist)
	ENDPROC

	PROCEDURE welllookup
		LOCAL lcSelect, lcList
		PRIV llOK
		
		llOK = .F.
		lcList = 'cunitno\Unit No,cname\Name,ctype\Type'
		
		set safety off
		sele allunits
		index on cunitno tag cunitno
		index on cname tag cname
		set safety on
		
		lcSelect = SELECT()
		
		DO FORM ..\custom\picklist WITH 'allunits', lcList, 'cwellid', 3, .f.,.t.
		
		IF llOK
		   thisform.cmdatamanager.replace('Gljndet', 'cUnitNo', allunits.cunitno)
		ENDIF   
		
		SELECT (lcSelect)
		
		
	ENDPROC

	PROCEDURE cmdatamanager.afterchange
		LPARAMETERS cworkarea,cfield
		
		IF UPPER(m.cworkarea) == 'GLJNDET'
		   DO CASE
		      CASE UPPER(m.cfield) == 'NDEBITS'
		         thisform.calctots()
		      CASE UPPER(m.cfield) == 'NCREDITS'
		         thisform.calctots()   
		   ENDCASE
		ENDIF
		
		
	ENDPROC

	PROCEDURE cmdatamanager.afterdelete
		LPARAMETERS cworkarea
		LOCAL lcBatch
		
		lcBatch = gljourn.cBatch
		
		SELECT coabal
		=TABLEUPDATE(.T.,.T.)
		
		IF NOT THISFORM.lDeldetail
		   IF m.cworkarea == 'Gljourn'
		      THISFORM.glmaint.delbatch(lcBatch,'GJ')
		      SELECT glmaster
		      =TABLEUPDATE(.T.,.T.)
		      SELECT checks
		      =TABLEUPDATE(.T.,.T.)
		      SELECT gljourn
		      =TABLEUPDATE(.T.,.T.)
		      SELECT gljndet
		      =TABLEUPDATE(.T.,.T.)
		      SELECT expense
		      =TABLEUPDATE(.T.,.T.)
		      SELECT expsusp
		      =TABLEUPDATE(.T.,.T.)
		   ENDIF
		ENDIF
		
	ENDPROC

	PROCEDURE cmdatamanager.afternew
		LPARAMETERS cworkarea
		LOCAL lcBatch, lcidgljo
		
		IF UPPER(m.cworkarea) == 'GLJOURN'
		   lcBatch = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Batch')
		
		   SELECT glmaster
		   SET DELE OFF
		   SET ORDER TO GLBATCH
		   DO WHILE SEEK(lcBatch)
		      lcBatch = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Batch')
		   ENDDO
		   SET DELE ON
		
		   SELECT gljourn
		   REPLACE cBatch WITH lcBatch
		   thisform.txtdgldate.set('value',date())   
		   thisform.setnextcontrol(THISFORM.txtdglDate)
		        
		   SELECT gljourn  &&  Why clear the relation and then re-set it?  Good question, but if you don't, it doesn't clear the grid correctly after saving an entry and adding a new one - BH 07/08/2008
		   SET RELATION to
		   SET RELATION TO cbatch INTO gljndet 
		   thisform.txtdgldate.lmorethan90 = .t.  &&  Turn on the date nag for a new entry.  
		ENDIF
		
		IF UPPER(m.cworkarea) == 'GLJNDET'
		   lcidgljo = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Gljndet')
		
		   SELECT gljndet1
		   SET DELE OFF
		   SET ORDER TO cidgljn
		   DO WHILE SEEK(lcidgljo)
		      lcidgljo = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Gljndet')
		   ENDDO
		   SET DELE ON
		
		   SELECT gljndet
		   REPLACE cidgljo WITH lcidgljo       
		   
		   thisform.Refresh()
		ENDIF
		
		RETURN(DODEFAULT(cWorkarea))
	ENDPROC

	PROCEDURE cmdatamanager.afterupdate
		LPARAMETERS cworkarealist
		LOCAL lcBatch, lcSelect, llReturn, lnNotes
		
		llReturn = .T.
		llRegEntry = .F.
		
		lcSelect = SELECT()
		
		lcBatch = gljourn.cBatch
		
		*
		*  Delete any check entries
		*
		SWSELECT('glmaster')
		SCAN FOR cBatch == lcBatch
		   lcidchec = glmaster.cidchec
		   THISFORM.glmaint.delcheck(lcidchec)
		ENDSCAN
		
		*
		*  Delete any existing glmaster entries for this batch
		*
		THISFORM.glmaint.delbatch(lcBatch,'GJ')
		
		*
		*  Create G/L Master entries for this journal entry
		*
		WITH THISFORM.glmaint
		   .cBatch     = lcBatch
		   .cReference = gljourn.cglref
		   .cSource    = 'GJ'
		   .dgldate    = gljourn.dgldate
		   .DMBatch    = gljourn.cDMBatch
		   .cBunch     = THISFORM.cBunch
		   .mNotes     = 'gljourn.mnotes'
		   .cid        = ''
		   lnNotes     = 1
		   .cYear      = .getperiod(gljourn.dgldate,.T.)
		   .cPeriod    = .getperiod(gljourn.dgldate,.F.)
		
		   SWSELECT('gljndet')
		   SCAN FOR cBatch == lcBatch
		      IF nDebits = 0 AND nCredits = 0
		         DELETE NEXT 1
		         LOOP
		      ENDIF
		      .cDesc   = gljndet.cDesc
		      .cAcctNo = gljndet.cAcctNo
		      .cUnitNo = gljndet.cUnitNo
		      .cDeptNo = gljndet.cDeptNo
		      .cCatCode = gljndet.cCatCode
		      .cidchec = ''
		
		* Check for bank accounts
		      SWSELECT('coa')
		      SET ORDER TO acctno
		      IF SEEK(gljndet.cAcctNo)
		         IF lBankAcct
		            IF gljndet.nDebits > 0
		               lcidchec = gljndet.cidchec
		               .delcheck(lcidchec)
		               .cEntryType = 'D'
		               .cIdType    = 'D'
		               .nAmount    = gljndet.nDebits
		               .dCheckDate = gljourn.dgldate
		               .dPostDate  = gljourn.dgldate
		               .cCheckNo   = 'GL' + lcBatch
		               .cPayee     = .cDesc
		               .lPrinted   = .T.
		               IF THISFORM.lRegEntry
		                  .addcheck()
		                  lcidchec = .getkey()
		                  .cidchec = lcidchec
		               ENDIF
		            ELSE
		               lcidchec = gljndet.cidchec
		               .delcheck(lcidchec)
		               .cEntryType = 'C'
		               .cIdType    = 'M'
		               .nAmount    = gljndet.nCredits
		               .dCheckDate = gljourn.dgldate
		               .dPostDate  = gljourn.dgldate
		               .cCheckNo   = 'GL' + lcBatch
		               .cPayee     = .cDesc
		               .lPrinted   = .T.
		               IF THISFORm.lRegEntry
		                  .addcheck()
		                  lcidchec = .getkey()
		                  .cidchec = lcidchec
		               ENDIF
		            ENDIF
		         ENDIF
		      ENDIF
		
		      SWSELECT('gljndet')
		      replace cidchec WITH .cidchec
		
		      IF gljndet.nDebits <> 0
		         .nAmount = gljndet.nDebits
		      ENDIF
		      IF gljndet.nCredits <> 0
		         .nAmount = gljndet.nCredits * -1
		      ENDIF
		
		      .updatebatch()
		
		   ENDSCAN
		
		   llReturn = .chkBalance()
		
		   IF NOT llReturn
		      THISFORM.oMessage.DISPLAY('%msgOutofBalance','G/L Master Out of Balance')
		   ELSE
		      * Create the Disb Mgr expenses to allocate (if any)
		      llReturn = THISFORM.dmexpense()
		   ENDIF
		
		ENDWITH
		
		SWSELECT('glmaster')
		=TABLEUPDATE(.T.,.T.)
		SWSELECT('expense')
		=TABLEUPDATE(.T.,.T.)
		SWSELECT('expsusp')
		=TABLEUPDATE(.T.,.T.)
		SWSELECT('checks')
		=TABLEUPDATE(.T.,.T.)
		SWSELECT('gljourn')
		=TABLEUPDATE(.T.,.T.)
		SWSELECT('gljndet')
		=TABLEUPDATE(.T.,.T.)
		SWSELECT('coabal')
		=TABLEUPDATE(.T.,.T.)
		
		SELECT (lcSelect)
		
		RETURN (llReturn)
		
		
	ENDPROC

	PROCEDURE cmdatamanager.beforedelete
		LPARAMETERS cworkarea
		
		* Check for the fiscal period being closed.
		IF NOT THISFORM.glmaint.checkperiod(gljourn.dgldate)
		   RETURN .F.
		ENDIF
		
		lcBatch = gljourn.cbatch
		
		SELECT expense
		SCAN FOR cbatch == lcBatch
		   m.cYear   = cYear
		   m.cPeriod = cPeriod
		   m.cWellID = cWellID
		   SELECT wells
		   SET ORDER TO cWellID
		   SEEK(m.cWellID)
		   m.cGroup = cGroup
		   SELECT sysctl
		   SET ORDER TO yrprdgrp
		   IF THISFORM.lSepClose
		      IF SEEK(m.cYear+m.cPeriod+m.cGroup+'YJ')
		         THISFORM.oMessage.Warning('%msgProdClosed')
		         RETURN .F.
		      ENDIF
		   ELSE
		      IF SEEK(m.cYear+m.cPeriod+m.cGroup+'YR')
		         THISFORM.oMessage.Warning('%msgProdClosed')
		         RETURN .F.
		      ENDIF
		   ENDIF
		ENDSCAN
		
		* Check for cleared entries in check register
		SELECT gljndet
		lnrecno = RECNO()
		SCAN FOR cbatch = lcBatch
		   lcidchec = gljndet.cidchec
		   SELECT checks
		   LOCATE FOR cidchec = lcidchec AND NOT lVoid
		   IF FOUND() AND checks.lCleared
		      THISFORM.oMessage.Warning('This check is marked as cleared in the check register. It cannot be deleted.')
		      RETURN .F.
		   ENDIF
		ENDSCAN
		
		SELECT gljndet
		GO lnrecno
		
		IF NOT THISFORM.lDelDetail
		   * Remove Expense entries
		   SELECT expense
		   SCAN FOR cbatch == lcBatch
		      DELE NEXT 1
		   ENDSCAN
		
		   SELECT expsusp
		   SCAN FOR cbatch == lcBatch
		      DELE NEXT 1
		   ENDSCAN
		   SELECT checks
		   SCAN FOR cbatch == lcBatch
		      DELE NEXT 1
		   ENDSCAN
		ELSE
		   SELECT expense
		   SCAN FOR cbatch == lcBatch AND ccatcode == gljndet.ccatcode AND namount == gljndet.ndebits
		      DELE NEXT 1
		   ENDSCAN
		
		   SELECT expsusp
		   SCAN FOR cbatch == lcBatch AND ccatcode == gljndet.ccatcode AND namount == gljndet.ndebits
		      DELE NEXT 1
		   ENDSCAN
		   SELECT checks
		   SCAN FOR cbatch == lcBatch AND cacctno == gljndet.cacctno AND namount == IIF(gljndet.ndebits <> 0,gljndet.ndebits,gljndet.ncredits)
		      DELE NEXT 1
		   ENDSCAN
		
		ENDIF
		
		SELE gljndet
		RETURN .T.
		
	ENDPROC

	PROCEDURE cmdatamanager.beforeupdate
		LPARAMETERS cworkarealist
		LOCAL lcBatch, lcSelect, llReturn, lnNotes, llRegEntry, llBankAcct, llRegEntry
		
		llReturn = .T.
		THISFORM.lRegEntry = .T.
		llBankAcct = .F.
		
		lcSelect = SELECT()
		
		* Check for the fiscal period being closed.
		IF NOT THISFORM.glmaint.checkperiod(gljourn.dgldate)
		   THISFORM.omessage.warning('Unable to save this journal entry. Either the fiscal year or period represented by this date has been closed.')
		   RETURN .F.
		ENDIF
		
		*
		*  Check to make sure the entry is in balance
		*
		IF gljourn.nTotalDr - gljourn.nTotalCr <>  0
		   THISFORM.omessage.DISPLAY('This batch is out of balance.  Unable to save the entry until this is corrected.','Out of Balance')
		   RETURN .F.
		ENDIF
		
		IF gljourn.nTotalDr = 0 AND gljourn.nTotalCr =  0
		   THISFORM.omessage.DISPLAY('You must add detail to this journal entry.','Problem Saving')
		   RETURN .F.
		ENDIF
		
		lcBatch = gljourn.cBatch
		
		*  Look to see if check is marked as cleared
		SELECT gljndet
		SCAN FOR cBatch = lcBatch AND NOT EMPTY(cidchec)
		   lcidchec = gljndet.cidchec
		   SELECT checks
		   SET ORDER TO cidchec
		   IF SEEK(lcidchec)
		      IF checks.lCleared AND NOT lVoid
		         THISFORM.omessage.warning('An entry created by this journal entry is marked as cleared in the check register. It cannot be modified.')
		         RETURN .F.
		      ENDIF
		   ENDIF
		ENDSCAN
		
		
		* Check to see if the expenses have already been processed
		SELE expense
		LOCATE FOR cBatch = lcBatch AND (nrunnoRev <> 0 OR nRunNoJIB <> 0)
		IF FOUND()
		   THISFORM.omessage.warning('These well expenses have already been processed.  They cannot be modified.')
		   RETURN .F.
		ENDIF
		
		* Check to see if any wells or depts are required or if bank accounts were used
		SELECT gljndet
		SCAN FOR cBatch == lcBatch AND ndebits + ncredits > 0
		   m.cAcctNo = cAcctNo
		   m.cWellID = cUnitNo
		   m.cDeptNo = cDeptNo
		   SELECT coa
		   SET ORDER TO acctno
		   IF SEEK(m.cAcctNo)
		      llDeptReq = lacctdept
		      llWellReq = lacctunit
		      THISFORM.lRegEntry = .T.
		      IF lBankAcct
		         llBankAcct = .T.
		         lcidchec = gljndet.cidchec
		         IF NOT EMPTY(lcidchec)
		            SELECT checks
		            LOCATE FOR cidchec = lcidchec
		            IF FOUND() AND lCleared
		               THISFORM.omessage.severe('A check register entry associated with this journal entry has been cleared. The entry cannot be modified.')
		               RETURN .F.
		            ENDIF
		            THISFORM.lRegEntry = .T.
		         ENDIF
		      ENDIF
		   ELSE
		      THISFORM.omessage.warning('All journal entries must be associated with a valid account.  Please correct.','Problem Saving')
		      RETURN .F.
		   ENDIF
		
		   IF llDeptReq AND EMPTY(m.cDeptNo)
		      THISFORM.omessage.DISPLAY('%msgDeptRequired')
		      RETURN .F.
		   ENDIF
		   IF llWellReq AND EMPTY(m.cWellID)
		      THISFORM.omessage.DISPLAY('%msgWellRequired')
		      RETURN .F.
		   ENDIF
		ENDSCAN
		
		IF llBankAcct  &&  Don't give them the option to add check register entries anymore; do it automatically - BH 1/3/07
		   THISFORM.lRegEntry = .T.
		ENDIF
		
		SELECT (lcSelect)
		
		DODEFAULT(cworkarealist)
		
		
	ENDPROC

	PROCEDURE cmdatamanager.new
		LPARAMETERS cworkarea
		
		IF DODEFAULT(m.cWorkArea)
		   *  Add 1st detail record when an header is created.
		   IF UPPER(m.cWorkarea) = 'GLJOURN'
		      RETURN this.new('Gljndet')
		   ENDIF
		   RETURN .T.
		ENDIF
		RETURN .T.      
	ENDPROC

	PROCEDURE Cmdcommandbuttoncustom1.Click
		thisform.ldeldetail = .t.
		thisform.cmdatamanager.delete('gljndet')
		thisform.lchanged = .t.
		thisform.ldeldetail = .f.
		thisform.calctots()
		thisform.Refresh()
	ENDPROC

	PROCEDURE cmdComments.Click
		DO FORM memoedit LINKED NAME memoedit WITH 'Journal Entry Comments', 'gljourn.mnotes'
		
		RELE memoedit
		
	ENDPROC

	PROCEDURE cmdComments.When
		RETURN MDOWN()
	ENDPROC

	PROCEDURE cmdDocument.Click
		LOCAL lnx, llReturn, llNewDoc
		
		llNewDoc = .T.
		
		swSELECT('documents')
		m.cfk      = 'GL'+gljourn.cbatch
		LOCATE FOR cfk == m.cfk
		IF FOUND()
		   IF MESSAGEBOX('There is a document attached to this journal entry. Do you want to view the document? Choosing No will allow you to attach a new document.', 36, 'Attached Document') = 6
		      DO viewdocument WITH documents.cpath
		      llNewDoc = .F.
		   ELSE
		      llNewDoc = .T.
		   ENDIF
		ENDIF
		IF llNewDoc
		    THISFORM.oFileDialog.FileName = ''
		   llReturn = THISFORM.oFileDialog.openfile()
		   IF NOT THISFORM.oFileDialog.lcancelled
		      m.cDesc    = THISFORM.omessage.gettext('Enter a description for this file.','Get File Description')
		      m.cpath    = THISFORM.ofilEDIALOG.aFiles[1]
		      IF EMPTY(m.cDesc) OR ISNULL(m.cDesc)
		         m.cDesc = ALLTRIM(m.cpath)
		      ENDIF
		
		      m.cDocLink = 'GL'
		      swSELECT('documents')
		      LOCATE FOR cfk == m.cfk
		      IF NOT FOUND()
		         INSERT INTO documents FROM MEMVAR
		      ELSE
		         REPLACE cpath WITH m.cpath, ;
		                 cdesc WITH m.cdesc
		      ENDIF
		      THISFORM.setchanged(.T., 'Documents')
		      m.gostatemanager.refreshall('Form')
		   ENDIF
		ENDIF
		
	ENDPROC

	PROCEDURE cmdNewDetail.Click
		lcDesc = gljndet.cDesc
		thisform.new('Gljndet')
		SELECT gljndet
		GO BOTT
		replace gljndet.cDesc with lcDesc
		thisform.grdgljndet.Column1.txtcDesc.setfocus()
	ENDPROC

	PROCEDURE cmdRecur.Click
		LOCAL lcList, ldDate
		PRIV llOK
		
		ldDate = THISFORM.txtdgldate.value
		
		llOK = .T.
		
		IF USED('gltmp')
		   USE IN gltmp
		ENDIF
		IF USED('gltmp1')
		   USE IN gltmp1
		ENDIF
		
		SET SAFETY OFF
		SELECT cbatch,cglref,ntotaldr,ntotalcr,.T. AS Filler FROM glrecur INTO CURSOR gltmp1
		USE DBF('gltmp1') AGAIN IN 0 ALIAS gltmp EXCL
		SELECT gltmp
		INDEX ON cglref TAG cglref
		
		lcList = 'cglref\Reference,ntotaldr\Debits,ntotalcr\Credits'
		
		DO FORM ..\CUSTOM\picklist WITH 'gltmp', lcList, 'cbatch', 3, .T., .t.
		
		IF llOK
		   SELECT glrecur
		   SET ORDER TO BATCH
		   LOCATE FOR glrecur.cglref = gltmp.cglref
		   THISFORM.cmdatamanager.setrecordposition('glrecur')
		
		   lcBatch = glrecur.cbatch
		   jcBatch = gljourn.cbatch
		   SCATTER MEMVAR
		   m.cbatch  = jcBatch
		   m.dgldate = ldDate
		   m.dEntDate = DATE()
		   m.cEntTime = TIME()
		   m.cgltype  = 'GE'
		   m.cYear    = THISFORM.glmaint.getperiod(gljourn.dgldate,.T.)
		   m.cPeriod  = THISFORM.glmaint.getperiod(gljourn.dgldate,.F.)
		   SELECT gljourn
		   GATHER MEMVAR MEMO
		   SELECT gljndet
		   SCAN FOR cbatch == jcBatch
		      DELE NEXT 1
		   ENDSCAN
		
		   SELECT glredet
		   SCAN FOR cbatch = lcBatch AND (ndebits <> 0 OR nCredits <> 0)
		      SCATTER MEMVAR
		      IF EMPTY(cAcctNo)
		         LOOP
		      ENDIF   
		      m.cidgljo = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Gljndet')
		      SELECT gljndet1
		      SET DELE OFF
		      SET ORDER TO cidgljn
		      DO WHILE SEEK(m.cidgljo)
		         m.cidgljo = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Gljndet')
		      ENDDO
		      SET DELE ON
		      m.cBatch = jcBatch
		      INSERT INTO gljndet FROM MEMVAR
		   ENDSCAN
		   SELECT gljndet
		   GO TOP
		   THISFORM.REFRESH()
		   THISFORM.calctots()
		   THISFORM.setnextcontrol(THISFORM.txtdgldate)
		ENDIF
		
	ENDPROC

	PROCEDURE cmdRecur.When
		RETURN thisform.cmdatamanager.isnew('Gljourn')
	ENDPROC

	PROCEDURE grdGljndet.AfterRowColChange
		LPARAMETERS ncol
		
		this.column2.txtcAcctNo.tooltiptext = TRIM(coa.cAcctDesc)
		
		
	ENDPROC

	PROCEDURE grdGljndet.autoappend
		lcDesc = gljndet.cDesc
		
		dodefault()
		
		replace gljndet.cDesc with lcDesc
		This.Column1.txtcDesc.refresh()
	ENDPROC

	PROCEDURE grdGljndet.beforeautoappend
		DODEFAULT()
		IF gljndet.ncredits = 0 AND gljndet.ndebits = 0
		   RETURN .F.
		ELSE
		   RETURN .T.
		ENDIF      
		
	ENDPROC

	PROCEDURE grdGljndet.Column1.txtcDesc.GotFocus
		THISFORM.txtcDesc.VISIBLE = .F.
		
		DODEFAULT()
		
	ENDPROC

	PROCEDURE grdGljndet.Column2.txtcAcctNo.GotFocus
		ON KEY LABEL F2 _SCREEN.ACTIVEFORM.coalookup()
		THISFORM.txtcDesc.VISIBLE = .T.
		DODEFAULT()
		IF EMPTY(gljndet.cacctno)
		   THISFORM.txtcDesc.SET('value','')
		ELSE
		   SELECT coa
		   LOCATE FOR cacctno = gljndet.cacctno
		   IF FOUND()
		      THISFORM.txtcDesc.SET('value',coa.cacctdesc)
		   ELSE
		      THISFORM.txtcDesc.SET('value','')
		   ENDIF
		ENDIF
		
		
	ENDPROC

	PROCEDURE grdGljndet.Column2.txtcAcctNo.InteractiveChange
		IF DODEFAULT()
		   SELECT coa
		   LOCATE FOR cacctno = THIS.VALUE
		   IF FOUND()
		      THISFORM.txtcDesc.SET('value',coa.cacctdesc)
		   ELSE
		      THISFORM.txtcDesc.SET('value','')
		   ENDIF
		ENDIF    
	ENDPROC

	PROCEDURE grdGljndet.Column2.txtcAcctNo.LostFocus
		ON KEY LABEL F2
		THISFORM.txtcDesc.SET('value','')
		DODEFAULT()
		
	ENDPROC

	PROCEDURE grdGljndet.Column2.txtcAcctNo.Valid
		IF NOT EMPTY(THIS.VALUE)
		   SELECT coa
		   SET ORDER TO acctno
		   SEEK(THIS.VALUE)
		   IF coa.ltitle OR coa.ltotalacct
		      THISFORM.omessage.warning('%msgAcctDetail')
		      RETURN 0
		   ENDIF
		   thisform.ldeptrequired = lacctdept
		   thisform.lwellrequired = lacctunit
		ENDIF
		
		DODEFAULT()
		
	ENDPROC

	PROCEDURE grdGljndet.Column3.txtcUnitNo.GotFocus
		ON KEY LABEL F2 _screen.activeform.welllookup()
		DODEFAULT()
		THISFORM.txtcDesc.VISIBLE = .t.
		IF EMPTY(THIS.VALUE)
		   THISFORM.txtcDesc.SET('value','')
		ELSE
		   SELECT wells
		   LOCATE FOR cwellid = THIS.VALUE
		   IF FOUND()
		      THISFORM.txtcDesc.SET('value',wells.cwellname)
		   ELSE
		      THISFORM.txtcDesc.SET('value','')
		   ENDIF
		ENDIF
		
		
	ENDPROC

	PROCEDURE grdGljndet.Column3.txtcUnitNo.InteractiveChange
		
		IF DODEFAULT()
		   SELECT wells
		   LOCATE FOR cwellid = THIS.VALUE
		   IF FOUND()
		      THISFORM.txtcDesc.SET('value',wells.cwellname)
		   ELSE
		      THISFORM.txtcDesc.SET('value','')
		   ENDIF
		ENDIF    
	ENDPROC

	PROCEDURE grdGljndet.Column3.txtcUnitNo.LostFocus
		ON KEY LABEL F2
		THISFORM.txtcDesc.SET('value','')
		DODEFAULT()
	ENDPROC

	PROCEDURE grdGljndet.Column3.txtcUnitNo.Valid
		DODEFAULT()
		
		IF EMPTY(THIS.VALUE) AND NOT MDOWN() AND THISFORM.lwellrequired
		   THISFORM.omessage.DISPLAY('%msgWellRequired')
		   RETURN 0
		ELSE
		   IF NOT EMPTY(THIS.VALUE)
		      SELECT wells
		      SET ORDER TO cwellid
		      IF SEEK(THIS.VALUE)
		         IF INLIST(wells.cwellstat,'I','S','P')
		            THISFORM.omessage.warning('This well is not an active well. Its expenses will be sent to the allocation file.')
		            RETURN .T.
		         ENDIF
		      ELSE
		         SELE land
		         LOCATE FOR cleaseid = THIS.VALUE
		         IF NOT FOUND()
		            WAIT WIND NOWAIT 'The Well/Lease ID entered is not valid.  Please correct.'
		            RETURN .T.
		         ENDIF
		      ENDIF
		   ENDIF
		ENDIF
		
	ENDPROC

	PROCEDURE grdGljndet.Column4.txtcDeptNo.GotFocus
		ON KEY LABEL F2 _screen.activeform.deptlookup()
		THISFORM.txtcDesc.VISIBLE = .t.
		DODEFAULT()
		IF EMPTY(THIS.VALUE)
		   THISFORM.txtcDesc.SET('value','')
		ELSE
		   SELECT gldept
		   LOCATE FOR cdeptno = THIS.VALUE
		   IF FOUND()
		      THISFORM.txtcDesc.SET('value',gldept.cdeptdesc)
		   ELSE
		      THISFORM.txtcDesc.SET('value','')
		   ENDIF
		ENDIF
		
		
	ENDPROC

	PROCEDURE grdGljndet.Column4.txtcDeptNo.InteractiveChange
		IF DODEFAULT()
		   SELECT gldept
		   LOCATE FOR cdeptno = THIS.VALUE
		   IF FOUND()
		      THISFORM.txtcDesc.SET('value',gldept.cdeptdesc)
		   ELSE
		      THISFORM.txtcDesc.SET('value','')
		   ENDIF
		ENDIF    
	ENDPROC

	PROCEDURE grdGljndet.Column4.txtcDeptNo.LostFocus
		ON KEY LABEL F2
		THISFORM.txtcDesc.SET('value','')
		DODEFAULT()
	ENDPROC

	PROCEDURE grdGljndet.Column4.txtcDeptNo.Valid
		DODEFAULT()
		
		IF EMPTY(this.value) AND NOT MDOWN() AND thisform.ldeptrequired
		   thisform.omessage.display('%msgDeptRequired')
		   RETURN 0
		ENDIF   
	ENDPROC

	PROCEDURE grdGljndet.Column5.txtnDebits.fieldvalid
		this.value = ABS(this.value)
		DODEFAULT()
	ENDPROC

	PROCEDURE grdGljndet.Column5.txtnDebits.GotFocus
		THISFORM.lConfirm = SET('confirm')
		SET CONFIRM ON
		THISFORM.txtcDesc.VISIBLE = .F.
		
		DODEFAULT()
		
	ENDPROC

	PROCEDURE grdGljndet.Column5.txtnDebits.LostFocus
		local lcconfirm
		lcConfirm = thisform.lConfirm
		
		set confirm &lcConfirm
	ENDPROC

	PROCEDURE grdGljndet.Column5.txtnDebits.Valid
		DODEFAULT()
		IF gljndet.ndebits = 0
		   RETURN .T.
		ENDIF
		
		IF LASTKEY() =  13 OR LASTKEY() = 9
		   KEYBOARD '{DNARROW}'
		ENDIF   
		
		
	ENDPROC

	PROCEDURE grdGljndet.Column5.txtnDebits.When
		RETURN gljndet.nCredits = 0
		
	ENDPROC

	PROCEDURE grdGljndet.Column6.txtnCredits.fieldvalid
		this.value = ABS(this.value)
		DODEFAULT()
	ENDPROC

	PROCEDURE grdGljndet.Column6.txtnCredits.GotFocus
		THISFORM.lConfirm = SET('confirm')
		SET CONFIRM ON
		THISFORM.txtcDesc.VISIBLE = .F.
		
		DODEFAULT()
		
	ENDPROC

	PROCEDURE grdGljndet.Column6.txtnCredits.LostFocus
		local lcConfirm
		lcConfirm = thisform.lConfirm
		
		set confirm &lcConfirm
	ENDPROC

	PROCEDURE grdGljndet.Column6.txtnCredits.Valid
		DODEFAULT()
		
		IF LASTKEY() =  13 OR LASTKEY() = 9
		   KEYBOARD '{DNARROW}'
		ENDIF   
	ENDPROC

	PROCEDURE grdGljndet.Column6.txtnCredits.When
		RETURN gljndet.nDebits = 0
	ENDPROC

	PROCEDURE grdGljndet.Column7.txtcCatCode.GotFocus
		ON KEY LABEL F2 _screen.activeform.catlookup()
		THISFORM.txtcDesc.VISIBLE = .t.
		DODEFAULT()
		IF EMPTY(THIS.VALUE)
		   THISFORM.txtcDesc.SET('value','')
		ELSE
		   SELECT expcat
		   LOCATE FOR ccatcode = THIS.VALUE
		   IF FOUND()
		      THISFORM.txtcDesc.SET('value',expcat.ccateg)
		   ELSE
		      THISFORM.txtcDesc.SET('value','')
		   ENDIF
		ENDIF
		
		
	ENDPROC

	PROCEDURE grdGljndet.Column7.txtcCatCode.InteractiveChange
		IF DODEFAULT()
		   SELECT expcat
		   LOCATE FOR ccatcode = THIS.VALUE
		   IF FOUND()
		      THISFORM.txtcDesc.SET('value',expcat.ccateg)
		   ELSE
		      THISFORM.txtcDesc.SET('value','')
		   ENDIF
		ENDIF    
	ENDPROC

	PROCEDURE grdGljndet.Column7.txtcCatCode.LostFocus
		ON KEY LABEL F2
		SELECT wells
		SET ORDER TO cwellid
		IF SEEK(gljndet.cunitno)
		   IF wells.cwellstat <> 'V'
		      SELECT expcat
		      SET ORDER TO ccatcode
		      IF SEEK(THIS.VALUE) and not expcat.lafetype
		         THISFORM.cmdatamanager.REPLACE('Gljndet','Cacctno',THISFORM.cExpClear)
		         THISFORM.grdgljndet.REFRESH()
		      ENDIF
		   ENDIF
		ENDIF
		SELECT gljndet
		THISFORM.txtcDesc.SET('value','')
		DODEFAULT()
		
	ENDPROC

	PROCEDURE txtcDesc.When
		return .f.
	ENDPROC

	PROCEDURE txtNtotalcr.When
		RETURN .F.
	ENDPROC

	PROCEDURE txtNtotaldr.When
		RETURN .F.
	ENDPROC

ENDDEFINE
