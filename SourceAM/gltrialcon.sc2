*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="gltrialcon.scx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="2" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Cursor2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor6" UniqueID="" Timestamp="" />

	AutoOpenTables = .F.
	DataSource = .NULL.
	Height = 617
	Left = 40
	Name = "Dataenvironment"
	Top = 235
	Width = 981

	ADD OBJECT 'Cursor2' AS cursor WITH ;
		Alias = "coabal", ;
		BufferModeOverride = 5, ;
		CursorSource = "coabal", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 295, ;
		Name = "Cursor2", ;
		Top = 6, ;
		Width = 97
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor6' AS cursor WITH ;
		Alias = "coabalu", ;
		CursorSource = "coabalu", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 290, ;
		Name = "Cursor6", ;
		Top = 140, ;
		Width = 97
		*< END OBJECT: BaseClass="cursor" />

ENDDEFINE

DEFINE CLASS formgltrialcon AS frmrptcriteria OF "appforms.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Glmaint" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblPeriod" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdChoose" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtPeriod" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtYear" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="opgreportby" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblYear" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="OpgQuarters" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom2" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: calcbalance
		*p: lerror
		*p: _memberdata		&& XML Metadata for customizable properties
	*</DefinedPropArrayMethod>

	Caption = "G/L Consolidated Trial Balance Report"
	DataSession = 2
	DoCreate = .T.
	Height = 310
	HelpContextID = 388
	Name = "FormGLTrialCon"
	Visible = .T.
	Width = 473
	_memberdata = <VFPData>
		<memberdata name="calcbalance" display="CalcBalance"/>
		</VFPData>		&& XML Metadata for customizable properties
	Swrptcriteriabuttons1.chkSendFile.Alignment = 0
	Swrptcriteriabuttons1.chkSendFile.Name = "chkSendFile"
	Swrptcriteriabuttons1.cmdclose.Name = "cmdclose"
	Swrptcriteriabuttons1.cmdPreview.Name = "cmdPreview"
	Swrptcriteriabuttons1.cmdPrint.Name = "cmdPrint"
	Swrptcriteriabuttons1.Left = 120
	Swrptcriteriabuttons1.Name = "Swrptcriteriabuttons1"
	Swrptcriteriabuttons1.TabIndex = 10
	Swrptcriteriabuttons1.Top = 228
	Swrptcriteriabuttons1.ZOrderSet = 0

	ADD OBJECT 'cmdChoose' AS cmdcommandbuttoncustom WITH ;
		Caption = "Choose Companies", ;
		Height = 36, ;
		Left = 183, ;
		Name = "cmdChoose", ;
		TabIndex = 6, ;
		Top = 146, ;
		Width = 108
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'Glmaint' AS glmaint WITH ;
		Left = 61, ;
		Name = "Glmaint", ;
		Top = 240
		*< END OBJECT: ClassLib="..\custom\swgl.vcx" BaseClass="custom" />

	ADD OBJECT 'Lbllabelcustom1' AS lbllabelcustom WITH ;
		Caption = "Report By", ;
		Left = 80, ;
		Name = "Lbllabelcustom1", ;
		TabIndex = 11, ;
		Top = 19
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom2' AS lbllabelcustom WITH ;
		BackStyle = 1, ;
		Caption = "Quarter", ;
		Left = 61, ;
		Name = "Lbllabelcustom2", ;
		TabIndex = 9, ;
		Top = 76
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblPeriod' AS lblfieldlabelcustom WITH ;
		AutoSize = .T., ;
		Caption = "Fiscal Period:", ;
		Height = 16, ;
		Left = 248, ;
		Name = "lblPeriod", ;
		TabIndex = 8, ;
		Top = 48, ;
		Width = 66, ;
		ZOrderSet = 2
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblYear' AS lblfieldlabelcustom WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "Fiscal Year:", ;
		Height = 16, ;
		Left = 110, ;
		Name = "lblYear", ;
		TabIndex = 3, ;
		Top = 48, ;
		Width = 60, ;
		ZOrderSet = 9
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'OpgQuarters' AS opgoptiongroupcustom WITH ;
		BorderStyle = 1, ;
		ButtonCount = 4, ;
		Enabled = .T., ;
		Height = 35, ;
		Left = 54, ;
		Name = "OpgQuarters", ;
		TabIndex = 5, ;
		Top = 82, ;
		Width = 373, ;
		Option1.AutoSize = .T., ;
		Option1.Caption = "1st (Jan - Mar)", ;
		Option1.Enabled = .F., ;
		Option1.FontSize = 8, ;
		Option1.Height = 16, ;
		Option1.Left = 5, ;
		Option1.Name = "Q1", ;
		Option1.Top = 11, ;
		Option1.Width = 89, ;
		Option2.AutoSize = .T., ;
		Option2.Caption = "2nd (Apr - Jun)", ;
		Option2.Enabled = .F., ;
		Option2.FontSize = 8, ;
		Option2.Height = 16, ;
		Option2.Left = 96, ;
		Option2.Name = "Q2", ;
		Option2.Top = 11, ;
		Option2.Width = 92, ;
		Option3.AutoSize = .T., ;
		Option3.Caption = "3rd (Jul - Sep)", ;
		Option3.Enabled = .F., ;
		Option3.FontSize = 8, ;
		Option3.Height = 16, ;
		Option3.Left = 192, ;
		Option3.Name = "Q3", ;
		Option3.Top = 11, ;
		Option3.Width = 87, ;
		Option4.AutoSize = .T., ;
		Option4.Caption = "4th (Oct - Dec)", ;
		Option4.Enabled = .F., ;
		Option4.FontSize = 8, ;
		Option4.Height = 16, ;
		Option4.Left = 281, ;
		Option4.Name = "Q4", ;
		Option4.Top = 11, ;
		Option4.Width = 90
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="optiongroup" />

	ADD OBJECT 'opgreportby' AS opgoptiongroupcustom WITH ;
		AutoSize = .T., ;
		BorderStyle = 0, ;
		ButtonCount = 2, ;
		Height = 26, ;
		Left = 140, ;
		Name = "opgreportby", ;
		TabIndex = 1, ;
		Top = 14, ;
		Value = 1, ;
		Width = 194, ;
		Option1.AutoSize = .T., ;
		Option1.Caption = "Fiscal Period", ;
		Option1.FontSize = 8, ;
		Option1.Height = 16, ;
		Option1.Left = 5, ;
		Option1.Name = "Option1", ;
		Option1.Top = 5, ;
		Option1.Value = 1, ;
		Option1.Width = 79, ;
		Option2.AutoSize = .T., ;
		Option2.Caption = "Fiscal Quarter", ;
		Option2.FontSize = 8, ;
		Option2.Height = 16, ;
		Option2.Left = 103, ;
		Option2.Name = "Option2", ;
		Option2.Top = 5, ;
		Option2.Width = 86
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="optiongroup" />

	ADD OBJECT 'txtPeriod' AS swperiod WITH ;
		Left = 332, ;
		Name = "txtPeriod", ;
		TabIndex = 4, ;
		Top = 46, ;
		ZOrderSet = 4
		*< END OBJECT: ClassLib="..\custom\swcontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtYear' AS swyear WITH ;
		Left = 188, ;
		Name = "txtYear", ;
		TabIndex = 2, ;
		Top = 46, ;
		ZOrderSet = 5
		*< END OBJECT: ClassLib="..\custom\swcontrol.vcx" BaseClass="textbox" />
	
	PROCEDURE builddata
		LOCAL tcYear, tcPeriod, tcAcct1, tcAcct2
		LOCAL lcPeriod1, lcPeriod2, lcYear, llReturn, lnBegBal, lnCompanies, lnEndBal, lnQtr, lnReportBy
		LOCAL lncount, loError
		*:Global cRetEarn, cyear, nRetEarn
		
		llReturn = .T.
		
		TRY
		   tcYear     = THISFORM.txtYear.VALUE
		   tcPeriod   = THISFORM.txtPeriod.VALUE
		   lnReportBy = THISFORM.opgReportBy.VALUE
		   lnQtr      = THISFORM.opgQuarters.VALUE
		
		   DO CASE
		      CASE lnReportBy = 1
		         lcPeriod1 = tcPeriod
		         lcPeriod2 = tcPeriod
		      CASE lnQtr = 1
		         lcPeriod1 = '01'
		         lcPeriod2 = '03'
		      CASE lnQtr = 2
		         lcPeriod1 = '04'
		         lcPeriod2 = '06'
		      CASE lnQtr = 3
		         lcPeriod1 = '07'
		         lcPeriod2 = '09'
		      CASE lnQtr = 4
		         lcPeriod1 = '10'
		         lcPeriod2 = '12'
		   ENDCASE
		
		   IF NOT USED('compmast')
		      USE datafiles\compmast IN 0
		   ENDIF
		   SELE cProducer, cDataPath FROM compmast WHERE RIGHT(xflag, 1) = 'C' INTO CURSOR compsel
		
		*  Check to see if any companies were selected.
		   SELECT compsel
		   IF RECC() = 0
		      THISFORM.omessage.Warning('No companies have been selected to be consolidated. Please choose the companies to consolidate.')
		      THISFORM.lerror = .T.
		      llReturn        = .F.
		      EXIT
		   ELSE
		      lnCompanies = RECC()
		   ENDIF
		
		*
		*  Get the retained earnings account number.
		*
		   swselect('glopt')
		   GO TOP
		   m.cRetEarn = cRetEarn
		
		*
		*  Check to make sure the currently open company is one of the consolidated companies
		*
		   SELE compsel
		   LOCATE FOR ALLT(m.goApp.cCompanyName) $ cProducer
		   IF NOT FOUND()
		      THISFORM.omessage.Warning('The currently open company MUST be one of the consolidated companies.  Please choose this company.')
		      THISFORM.lerror = .T.
		      llReturn        = .F.
		      EXIT
		   ENDIF
		
		*
		*  Recalculate account balances
		*
		   WAIT WIND NOWAIT 'Calculating the account balances...'
		   THISFORM.glmaint.calcconbalance()
		
		
		*
		*  Set the report title and select criteria
		*
		   THISFORM.cTitle1  = 'Consolidated'
		   IF lnReportBy = 1
		      THISFORM.cTitle2  = 'For Period ' + THISFORM.txtPeriod.VALUE + '/' + THISFORM.txtYear.VALUE
		   ELSE
		      THISFORM.cTitle2  = 'For Quarter ' + PADL(ALLT(STR(lnQtr)), 2, '0') + ' - ' + THISFORM.txtYear.VALUE
		   ENDIF
		   THISFORM.cSelectCriteria = ''
		   THISFORM.cSortOrder      = 'Account Number'
		
		   CREATE CURSOR trialbal   ;
		      (cAcctNo     C(6),    ;
		        cAcctDesc   C(30),   ;
		        cFiscalYr   C(4),    ;
		        cFiscalPrd  C(2),    ;
		        cWellID     C(10),   ;
		        cWellName   C(30),   ;
		        nAcctType   N(2),    ;
		        nBegBal     N(12, 2), ;
		        nDebits     N(12, 2), ;
		        nCredits    N(12, 2), ;
		        nEndBal     N(12, 2))
		   INDEX ON cAcctNo TAG AcctNo
		   INDEX ON cWellID + cAcctNo TAG cWellID
		
		*
		*  Get the periods activity for each account in the range.
		*
		   SELECT  newcoa.cAcctNo,       ;
				   newcoa.cAcctDesc,     ;
				   newcoa.nAcctType,     ;
				   coabalnew.cyear AS cFiscalYr,  ;
				   coabalnew.cPeriod AS cFiscalPrd, ;
				   SUM(coabalnew.nDebits) AS nDebits,    ;
				   SUM(coabalnew.nCredits) AS nCredits    ;
			   FROM coabalnew, newcoa ;
			   WHERE coabalnew.cAcctNo = newcoa.cAcctNo ;
				   AND BETWEEN(coabalnew.cyear + coabalnew.cPeriod, tcYear + lcPeriod1, tcYear + lcPeriod2) ;
				   AND NOT newcoa.lTitle  ;
				   AND NOT newcoa.lTotalAcct ;
				   AND NOT DELETED() ;
			   INTO CURSOR tempbal1 ;
			   ORDER BY 1 ;
			   GROUP BY 1
		
		   lncount = _TALLY
		
		   SELECT  newcoa.cAcctNo,            ;
				   newcoa.cAcctDesc,          ;
				   newcoa.nAcctType,          ;
				   tcYear AS cFiscalYr,    ;
				   tcPeriod AS cFiscalPrd, ;
				   0 AS nDebits,           ;
				   0 AS nCredits           ;
			   FROM newcoa ;
			   WHERE newcoa.cAcctNo NOT IN (SELECT  cAcctNo ;
												FROM coabalnew ;
												WHERE BETWEEN(coabalnew.cyear + coabalnew.cPeriod, tcYear + lcPeriod1, tcYear + lcPeriod2)) ;
				   AND NOT lTitle  ;
				   AND NOT lTotalAcct ;
			   INTO CURSOR tempbal2 ;
			   ORDER BY 1 ;
			   GROUP BY 1
		
		   lncount = lncount + _TALLY
		
		*
		*  If there were no records found, bail out.
		*
		   IF lncount = 0
		      llReturn = .F.
		      EXIT
		   ENDIF
		
		*
		*  Append the records to the trialbal table
		*
		   SELECT trialbal
		   APPEND FROM DBF('tempbal1')
		   APPEND FROM DBF('tempbal2')
		   SET ORDER TO AcctNo
		   SELECT tempbal1
		   USE
		   SELECT tempbal2
		   USE
		
		   CREATE CURSOR tempbeg ;
		      (cAcctNo    C(6), ;
		        nDebits    N(12, 2), ;
		        nCredits   N(12, 2))
		
		*
		*  Get the beginning balances for each balance sheet account in the range.
		*
		   SELECT  coabalnew.cAcctNo, ;
				   newcoa.nAcctType, ;
				   SUM(nDebits) AS nDebits, ;
				   SUM(nCredits) AS nCredits ;
			   FROM coabalnew, newcoa ;
			   WHERE coabalnew.cyear + coabalnew.cPeriod < tcYear + lcPeriod1 ;
				   AND coabalnew.cAcctNo = newcoa.cAcctNo ;
				   AND newcoa.nAcctType < 8 ;
				   AND newcoa.lTitle = .F. ;
				   AND newcoa.lTotalAcct = .F. ;
				   AND NOT DELETED() ;
			   INTO CURSOR tempbeg1 ;
			   ORDER BY coabalnew.cAcctNo ;
			   GROUP BY coabalnew.cAcctNo
		
		   lncount = _TALLY
		
		*
		*  Get the beginning balances for each income stmt sheet account in the range.
		*
		   SELECT  coabalnew.cAcctNo, ;
				   newcoa.nAcctType, ;
				   SUM(nDebits) AS nDebits, ;
				   SUM(nCredits) AS nCredits ;
			   FROM coabalnew, newcoa ;
			   WHERE coabalnew.cyear = tcYear ;
				   AND coabalnew.cPeriod < lcPeriod1 ;
				   AND coabalnew.cAcctNo = newcoa.cAcctNo ;
				   AND newcoa.nAcctType > 7 ;
				   AND newcoa.lTitle = .F. ;
				   AND newcoa.lTotalAcct = .F. ;
				   AND NOT DELETED() ;
			   INTO CURSOR tempbeg2 ;
			   ORDER BY coabalnew.cAcctNo ;
			   GROUP BY coabalnew.cAcctNo
		
		*    AND CoaBalNew.cFiscalYr = tcYear ;
		
		   lncount = lncount + _TALLY
		
		
		   thisform.CalcBalance(tcYear)
		
		*  If there are any beginning balances, update the trialbal table.
		*  Otherwise, the beginning balances are assumed to be zero.
		   IF lncount > 0
		      SELECT tempbeg
		      APPEND FROM DBF('tempbeg1')
		      APPEND FROM DBF('tempbeg2')
		      SCAN
		         SCATTER MEMVAR
		         lnBegBal = m.nDebits - m.nCredits
		         SELECT trialbal
		         IF SEEK(m.cAcctNo)
		            IF tcPeriod = '01' AND trialbal.nAcctType > 7
		               LOOP
		            ELSE
		               lnEndBal = nBegBal + lnBegBal + nDebits - nCredits
		               REPLACE nBegBal WITH nBegBal + lnBegBal, ;
		                  nEndBal WITH lnEndBal
		            ENDIF
		         ENDIF
		      ENDSCAN
		   ENDIF
		  
		
		   SELECT trialbal
		   SCAN FOR nBegBal = 0
		      REPLACE nEndBal WITH nDebits - nCredits
		   ENDSCAN
		
		
		   COUNT FOR NOT DELETED() TO lncount
		   GO TOP
		
		   WAIT CLEAR
		
		   IF lncount > 0
		      llReturn = .T.
		   ELSE
		      llReturn = .F.
		   ENDIF
		CATCH TO loError
		   llReturn = .F.
		   DO errorlog WITH 'BuildData', loError.LINENO, 'Consolidated Trial Balance', loError.ERRORNO, loError.MESSAGE
		   MESSAGEBOX('Unable to process the report at this time. Check the System Log found under Other Reports for more information.' + CHR(10) + CHR(10) + ;
		        'Contact SherWare Support for help at support@sherware.com', 16, 'Problem Encountered')
		ENDTRY
		
		RETURN llReturn
		
	ENDPROC

	PROCEDURE calcbalance
		LPARA tcYear
		
		tlFinancial = .F.
		
		*
		*  Calculates the balances for each account in the chart of accounts
		*  for each company that is to be consolidated
		*
		LOCAL lcPeriod, lcYear, lnDebits, lnCredits, lnAccttype, m.ccompany
		
		STORE 0 TO lnCredits, lnDebits, lnAccttype
		
		swclose('temp')
		swclose('coa')
		swclose('coabal')
		swclose('compgl')
		swclose('compcoa')
		swclose('compsys')
		swclose('closedyears')
		
		IF NOT USED('compmast')
		   USE datafiles\compmast IN 0
		ENDIF
		
		*
		*  Get the retained earnings account number.
		*
		swselect('glopt')
		GO TOP
		m.cRetEarn = cRetEarn
		
		swselect('coabal', .T.)
		
		CREATE CURSOR tempcoa ;
		   (ccompany   c(8), ;
		     cacctno    c(6), ;
		     cAcctdesc  c(30), ;
		     nAccttype  I, ;
		     cparent    c(6), ;
		     lTitle     L, ;
		     lTotalAcct L)
		
		
		CREATE CURSOR tempbal ;
		   (ccompany  c(8), ;
		     cacctno    c(6), ;
		     nAccttype  N(2), ;
		     cYear      c(4), ;
		     cPeriod    c(2), ;
		     nDebits    N(12, 2), ;
		     nCredits   N(12, 2), ;
		     lTitle     L, ;
		     lTotalAcct L)
		INDEX ON cYear + cPeriod + cacctno TAG acctprd
		
		CREATE CURSOR closedyears ;
		   (ccompany   c(8), ;
		     cYear      c(4), ;
		     lclosed    L)
		
		
		*  Scan through the consolidated companies and add their balances
		
		SELE compmast
		SCAN FOR RIGHT(xflag, 1) = 'C'
		   m.cDataPath = ALLT(cDataPath)
		   m.ccompany  = cidcomp
		   WAIT WIND NOWAIT 'Adding balances for ' + ALLT(cproducer)
		
		* Close the tables if already in use
		   swclose('compcoa')
		   swclose('compgl')
		   swclose('compsys')
		
		   USE (m.cDataPath + 'coa') IN 0 AGAIN ALIAS compcoa
		   USE (m.cDataPath + 'glmaster') IN 0 AGAIN ALIAS compgl
		   USE (m.cDataPath + 'sysctl') IN 0 AGAIN ALIAS compsys
		
		   SELE compcoa
		   SCAN
		      SCATTER MEMVAR
		      INSERT INTO tempcoa FROM MEMVAR
		   ENDSCAN
		
		   IF tlFinancial
			  SELECT  m.ccompany AS ccompany, ;
					  compgl.cacctno,          ;
					  cYear,                     ;
					  cPeriod,                   ;
					  SUM(nDebits) AS nDebits,   ;
					  SUM(nCredits) AS nCredits ;
				  FROM compgl ;
				  WHERE compgl.csource # 'YE' ;
				  INTO CURSOR temp READWRITE ;
				  ORDER BY compgl.cacctno, cYear, cPeriod ;
				  GROUP BY compgl.cacctno, cYear, cPeriod
		   ELSE
			  SELECT  m.ccompany AS ccompany, ;
					  compgl.cacctno,          ;
					  cYear,                     ;
					  cPeriod,                   ;
					  SUM(nDebits) AS nDebits,   ;
					  SUM(nCredits) AS nCredits  ;
				  FROM compgl ;
				  INTO CURSOR temp READWRITE ;
				  ORDER BY compgl.cacctno, cYear, cPeriod ;
				  GROUP BY compgl.cacctno, cYear, cPeriod
		   ENDIF
		
		   IF _TALLY > 0
		      lnMax   = _TALLY
		      lnCount = 1
		      SELECT temp
		      REPLACE ccompany WITH m.ccompany ALL
		      SELECT tempbal
		      APPEND FROM DBF('temp')
		
		   ENDIF
		
		* Get list of years so we can check if they've been closed
		   SELECT  ccompany, ;
				   tempbal.cYear, ;
				   .F. AS lclosed ;
			   FROM tempbal ;
			   WHERE cYear < tcYear ;
				   AND NOT EMPTY(cYear) ;
				   AND ccompany == m.ccompany ;
			   INTO CURSOR tempyears READWRITE ;
			   ORDER BY ccompany, cYear ;
			   GROUP BY ccompany, cYear
		
		   SELECT tempyears
		   SCAN
		      m.cYear = cYear
		      swselect('sysctl')
		      SCAN FOR cYear == m.cYear AND ctypeclose = 'A'
		         IF sysctl.lyearclose
		            SELECT tempyears
		            REPLACE lclosed WITH .T.
		         ENDIF
		      ENDSCAN
		   ENDSCAN
		
		   SELE ccompany, cacctno, cYear, cPeriod, ;
		      SUM(nDebits) AS nDebits, ;
		      SUM(nCredits) AS nCredits ;
		      FROM tempbal ;
		      INTO CURSOR coabalnew READWRITE  ;
		      ORDER BY ccompany, cacctno, cYear, cPeriod ;
		      GROUP BY ccompany, cacctno, cYear, cPeriod
		   SELECT coabalnew
		   INDEX ON ccompany + cacctno TAG cacctno
		   INDEX ON ccompany + cYear + cPeriod TAG cyearprd
		
		*
		*  Combine chart of accounts
		*
		   SELE * FROM tempcoa ;
		      INTO CURSOR newcoa READWRITE;
		      ORDER BY ccompany, cacctno ;
		      GROUP BY ccompany, cacctno
		   INDEX ON ccompany + cacctno TAG acctno
		
		   SELECT closedyears
		   LOCATE FOR ccompany = m.ccompany
		   IF NOT FOUND()
		      APPEND FROM DBF('tempyears')
		   ENDIF
		
		   SELECT closedyears
		   LOCATE FOR NOT lclosed
		   IF FOUND()
		      SELECT closedyears
		      SCAN FOR NOT lclosed
		         lcYear    = cYear
		         lcCompany = ccompany
		
				 SELECT  coabalnew.cacctno, ;
						 newcoa.nAccttype, ;
						 SUM(nDebits - nCredits)  AS nRetEarn ;
					 FROM coabalnew ;
					 JOIN newcoa ;
						 ON coabalnew.ccompany + coabalnew.cacctno = newcoa.ccompany + newcoa.cacctno ;
					 WHERE coabalnew.cYear = lcYear ;
						 AND coabalnew.ccompany == lcCompany ;
						 AND BETWEEN(newcoa.nAccttype, 8, 16) ;
						 AND NOT DELETED() ;
					 INTO CURSOR retearn
		
		         IF _TALLY > 0
		            SELECT retearn
		            GO TOP
		            m.nRetEarn = nRetEarn
		         ELSE
		            m.nRetEarn = 0
		         ENDIF
		
		         SELECT trialbal
		         LOCATE FOR cacctno = m.cRetEarn
		         IF FOUND()
		            REPLACE nbegbal WITH nbegbal + m.nRetEarn
		         ENDIF
		      ENDSCAN
		   ENDIF
		
		ENDSCAN
		
		
		
		
		
		
		
		
		
	ENDPROC

	PROCEDURE Init
		IF DODEFAULT()
		
		   THISFORM.txtPeriod.VALUE = GetFiscalPeriod(DATE())
		   THISFORM.txtYear.VALUE = GetFiscalYear(DATE())
		
		   THISFORM.cReportName = 'gltrialb'
		
		ENDIF
		
		
	ENDPROC

	PROCEDURE report
		LPARAMETERS cbutton
		
		if thisform.lerror
		   return
		endif
		
		dodefault(cbutton)   
	ENDPROC

	PROCEDURE cmdChoose.Click
		DO FORM glConsolidate
	ENDPROC

	PROCEDURE OpgQuarters.Init
		this.q1.value = 1
	ENDPROC

	PROCEDURE OpgQuarters.Q1.GotFocus
		THISFORM.opgQuarters.VALUE = 1
		
	ENDPROC

	PROCEDURE OpgQuarters.Q2.GotFocus
		THISFORM.opgQuarters.VALUE = 2
	ENDPROC

	PROCEDURE OpgQuarters.Q3.GotFocus
		THISFORM.opgQuarters.VALUE = 3
	ENDPROC

	PROCEDURE OpgQuarters.Q4.GotFocus
		THISFORM.opgQuarters.VALUE = 4
	ENDPROC

	PROCEDURE opgreportby.Valid
		
		DODEFAULT()
		
		IF this.value = 1
		   thisform.txtyear.enabled = .t.
		   thisform.txtperiod.enabled = .t.
		   thisform.opgquarters.q1.enabled = .f.
		   thisform.opgquarters.q2.enabled = .f.
		   thisform.opgquarters.q3.enabled = .f.
		   thisform.opgquarters.q4.enabled = .f.
		else
		   thisform.txtyear.enabled = .t.
		   thisform.txtperiod.enabled = .f.
		   thisform.opgquarters.q1.enabled = .t.
		   thisform.opgquarters.q2.enabled = .t.
		   thisform.opgquarters.q3.enabled = .t.
		   thisform.opgquarters.q4.enabled = .t.
		endif      
	ENDPROC

ENDDEFINE
