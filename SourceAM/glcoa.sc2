*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="glcoa.scx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="2" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Cursor1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor6" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor8" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor9" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor10" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor11" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor12" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor13" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor14" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cursor7" UniqueID="" Timestamp="" />

	AutoOpenTables = .F.
	DataSource = .NULL.
	Height = 580
	InitialSelectedAlias = "coa"
	Left = 83
	Name = "Dataenvironment"
	Top = 410
	Width = 1180

	ADD OBJECT 'Cursor1' AS cursor WITH ;
		Alias = "coa", ;
		BufferModeOverride = 3, ;
		CursorSource = "coa", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 11, ;
		Name = "Cursor1", ;
		Order = "acctno", ;
		Top = 20, ;
		Width = 127
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor10' AS cursor WITH ;
		Alias = "landopt", ;
		CursorSource = "landopt", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 732, ;
		Name = "Cursor10", ;
		Top = 18, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor11' AS cursor WITH ;
		Alias = "progopt", ;
		CursorSource = "progopt", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 849, ;
		Name = "Cursor11", ;
		Top = 143, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor12' AS cursor WITH ;
		Alias = "aropt", ;
		CursorSource = "aropt", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 730, ;
		Name = "Cursor12", ;
		Top = 138, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor13' AS cursor WITH ;
		Alias = "apopt", ;
		CursorSource = "apopt", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 846, ;
		Name = "Cursor13", ;
		Top = 266, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor14' AS cursor WITH ;
		Alias = "gasopt", ;
		CursorSource = "gasopt", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 964, ;
		Name = "Cursor14", ;
		Top = 269, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor2' AS cursor WITH ;
		Alias = "coabal", ;
		BufferModeOverride = 3, ;
		CursorSource = "coabal", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Name = "Cursor2", ;
		Order = "acctprd"
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor3' AS cursor WITH ;
		Alias = "coa1", ;
		BufferModeOverride = 3, ;
		CursorSource = "coa", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 9, ;
		Name = "Cursor3", ;
		Top = 137, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor4' AS cursor WITH ;
		Alias = "glacctyp", ;
		BufferModeOverride = 3, ;
		CursorSource = "glacctyp", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Name = "Cursor4"
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor5' AS cursor WITH ;
		Alias = "glopt", ;
		BufferModeOverride = 3, ;
		CursorSource = "glopt", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 197, ;
		Left = 729, ;
		Name = "Cursor5", ;
		Top = 252, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor6' AS cursor WITH ;
		Alias = "glmaster", ;
		CursorSource = "glmaster", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 311, ;
		Name = "Cursor6", ;
		Top = 143, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor7' AS cursor WITH ;
		Alias = "prsuta", ;
		BufferModeOverride = 5, ;
		CursorSource = "prsuta", ;
		Database = ..\amdata\appdata.dbc, ;
		Height = 90, ;
		Left = 583, ;
		Name = "Cursor7", ;
		Top = 128, ;
		Width = 90
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor8' AS cursor WITH ;
		Alias = "options", ;
		CursorSource = "options", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 990, ;
		Name = "Cursor8", ;
		Top = 20, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

	ADD OBJECT 'Cursor9' AS cursor WITH ;
		Alias = "propt", ;
		CursorSource = "propt", ;
		Database = ..\datafiles\data\appdata.dbc, ;
		Height = 90, ;
		Left = 970, ;
		Name = "Cursor9", ;
		Top = 143, ;
		Width = 95
		*< END OBJECT: BaseClass="cursor" />

ENDDEFINE

DEFINE CLASS frmcoa AS frmdatamanagerformcustom OF "..\custom\cforms.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="lblCacctno" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Shape1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtCacctdesc" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblCacctdesc" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkLacctunit" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkLacctdept" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkLbankacct" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblNaccttype" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboGLAcctType" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtAccountNumber" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblRDCheck" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cntgetfile3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblPRCheck" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cntgetfile4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblLMCheck" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdModRepo1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdModRepo2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdModRepo3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdModRepo4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcCheckNo" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblCheckNo" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboAcct" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkLrent1099" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cntgetfile1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblAPCheck" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Glmaint" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblsubaccount" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cntgetfile2" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: checkoptions
		*m: checksub		&& Checks to see what level this account is on, and refreshes the label accordingly.
		*m: getbal		&& Gets the current balance of the account for the fiscal year and period given.
		*m: hideshowchecks
		*p: coldacctno
		*p: llandopt
		*p: lwasbankacct
		*p: noldaccttype
		*a: aerrorinfo[1,1]
	*</DefinedPropArrayMethod>

	Caption = "Chart of Accounts"
	clistexpression = coa.cacctno
	cnavworkarea = coa
	coldacctno = ''
	cworkarea = coa
	DoCreate = .T.
	Height = 328
	HelpContextID = 317
	lremembersize = .F.
	lwasbankacct = .F.
	Name = "frmCOA"
	noldaccttype = 0
	Width = 514
	CMDATAMANAGER.Name = "CMDATAMANAGER"
	CMDATAMANAGER.TabIndex = 1
	CMDATAMANAGER.ZOrderSet = 1
	cmlookupmanager.Name = "cmlookupmanager"
	Mwresize1.lblHighLight.Name = "lblHighLight"
	Mwresize1.lblShading.Name = "lblShading"
	Mwresize1.Name = "Mwresize1"

	ADD OBJECT 'cboAcct' AS cbocomboboxcustom WITH ;
		BoundColumn = 2, ;
		ColumnCount = 1, ;
		ControlSource = "coa.cparent", ;
		FontName = "Courier New", ;
		Height = 20, ;
		Left = 384, ;
		Name = "cboAcct", ;
		TabIndex = 18, ;
		Top = 84, ;
		Width = 70, ;
		ZOrderSet = 26
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="combobox" />

	ADD OBJECT 'cboGLAcctType' AS cbocomboboxcustom WITH ;
		BoundColumn = 2, ;
		BoundTo = .T., ;
		ControlSource = "coa.naccttype", ;
		Height = 20, ;
		Left = 107, ;
		Margin = 2, ;
		Name = "cboGLAcctType", ;
		RowSource = "glacctyp.ctypedesc,naccttype", ;
		RowSourceType = 6, ;
		TabIndex = 4, ;
		Top = 40, ;
		Width = 237, ;
		ZOrderSet = 12
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="combobox" />

	ADD OBJECT 'chkLacctdept' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = " Department Required", ;
		ControlSource = "coa.lacctdept", ;
		Height = 16, ;
		Left = 28, ;
		Name = "chkLacctdept", ;
		TabIndex = 11, ;
		Top = 115, ;
		Width = 122, ;
		ZOrderSet = 7
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkLacctunit' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = " Well Required", ;
		ControlSource = "coa.lacctunit", ;
		Height = 16, ;
		Left = 28, ;
		Name = "chkLacctunit", ;
		TabIndex = 12, ;
		Top = 135, ;
		Width = 87, ;
		ZOrderSet = 6
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkLbankacct' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = " Bank Account", ;
		ControlSource = "coa.lbankacct", ;
		Height = 16, ;
		Left = 28, ;
		Name = "chkLbankacct", ;
		TabIndex = 10, ;
		Top = 95, ;
		Value = .F., ;
		Width = 89, ;
		ZOrderSet = 8
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkLrent1099' AS chkcheckboxcustom WITH ;
		Alignment = 0, ;
		Caption = "1099 Rental Account", ;
		ControlSource = "coa.lrent1099", ;
		Height = 16, ;
		Left = 28, ;
		Name = "chkLrent1099", ;
		TabIndex = 13, ;
		Top = 155, ;
		Width = 119, ;
		ZOrderSet = 28
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="checkbox" />

	ADD OBJECT 'cmdModRepo1' AS cmdcommandbuttoncustom WITH ;
		Caption = "", ;
		Height = 23, ;
		Left = 468, ;
		Name = "cmdModRepo1", ;
		Picture = ..\..\graphics\crdfle13.ico, ;
		TabIndex = 38, ;
		TabStop = .F., ;
		ToolTipText = "Modify Check Format", ;
		Top = 213, ;
		Width = 24, ;
		ZOrderSet = 20
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdModRepo2' AS cmdcommandbuttoncustom WITH ;
		Caption = "", ;
		Height = 23, ;
		Left = 468, ;
		Name = "cmdModRepo2", ;
		Picture = ..\..\graphics\crdfle13.ico, ;
		TabIndex = 39, ;
		TabStop = .F., ;
		ToolTipText = "Modify Check Format", ;
		Top = 241, ;
		Width = 24, ;
		ZOrderSet = 21
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdModRepo3' AS cmdcommandbuttoncustom WITH ;
		Caption = "", ;
		Height = 23, ;
		Left = 468, ;
		Name = "cmdModRepo3", ;
		Picture = ..\..\graphics\crdfle13.ico, ;
		TabIndex = 40, ;
		TabStop = .F., ;
		ToolTipText = "Modify Check Format", ;
		Top = 269, ;
		Width = 24, ;
		ZOrderSet = 22
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdModRepo4' AS cmdcommandbuttoncustom WITH ;
		Caption = "", ;
		Height = 23, ;
		Left = 468, ;
		Name = "cmdModRepo4", ;
		Picture = ..\..\graphics\crdfle13.ico, ;
		TabIndex = 41, ;
		TabStop = .F., ;
		ToolTipText = "Modify Check Format", ;
		Top = 297, ;
		Width = 24, ;
		ZOrderSet = 23
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'Cntgetfile1' AS cntgetfile WITH ;
		cdefaultextension = frx, ;
		cextensionlist = frx, ;
		Height = 23, ;
		Left = 175, ;
		lfullpath = .F., ;
		Name = "Cntgetfile1", ;
		TabIndex = 30, ;
		Top = 213, ;
		ZOrderSet = 29, ;
		cmdPath.FontBold = .T., ;
		cmdPath.FontSize = 10, ;
		cmdPath.Name = "cmdPath", ;
		cmdPath.TabStop = .F., ;
		edtPath.ControlSource = "coa.capcheckname", ;
		edtPath.Height = 23, ;
		edtPath.Name = "edtPath"
		*< END OBJECT: ClassLib="..\custom\cgadget.vcx" BaseClass="container" />

	ADD OBJECT 'Cntgetfile2' AS cntgetfile WITH ;
		cdefaultextension = frx, ;
		cextensionlist = frx, ;
		Height = 23, ;
		Left = 175, ;
		Name = "Cntgetfile2", ;
		TabIndex = 32, ;
		Top = 241, ;
		ZOrderSet = 32, ;
		cmdPath.FontBold = .T., ;
		cmdPath.FontSize = 10, ;
		cmdPath.Name = "cmdPath", ;
		cmdPath.TabStop = .F., ;
		edtPath.ControlSource = "coa.cdmcheckname", ;
		edtPath.Name = "edtPath"
		*< END OBJECT: ClassLib="..\custom\cgadget.vcx" BaseClass="container" />

	ADD OBJECT 'Cntgetfile3' AS cntgetfile WITH ;
		cdefaultextension = frx, ;
		cextensionlist = frx, ;
		Height = 23, ;
		Left = 175, ;
		Name = "Cntgetfile3", ;
		TabIndex = 34, ;
		Top = 269, ;
		ZOrderSet = 15, ;
		cmdPath.FontBold = .T., ;
		cmdPath.FontSize = 10, ;
		cmdPath.Name = "cmdPath", ;
		cmdPath.TabStop = .F., ;
		edtPath.ControlSource = "coa.cprcheckname", ;
		edtPath.Name = "edtPath"
		*< END OBJECT: ClassLib="..\custom\cgadget.vcx" BaseClass="container" />

	ADD OBJECT 'Cntgetfile4' AS cntgetfile WITH ;
		cdefaultextension = frx, ;
		cextensionlist = frx, ;
		Height = 23, ;
		Left = 175, ;
		Name = "Cntgetfile4", ;
		TabIndex = 36, ;
		Top = 297, ;
		ZOrderSet = 18, ;
		cmdPath.FontBold = .T., ;
		cmdPath.FontSize = 10, ;
		cmdPath.Name = "cmdPath", ;
		cmdPath.TabStop = .F., ;
		edtPath.ControlSource = "coa.clmcheckname", ;
		edtPath.Name = "edtPath"
		*< END OBJECT: ClassLib="..\custom\cgadget.vcx" BaseClass="container" />

	ADD OBJECT 'Glmaint' AS glmaint WITH ;
		Height = 16, ;
		Left = 456, ;
		Name = "Glmaint", ;
		Top = 132, ;
		Width = 20
		*< END OBJECT: ClassLib="..\custom\swgl.vcx" BaseClass="custom" />

	ADD OBJECT 'Label1' AS label WITH ;
		AutoSize = .T., ;
		Caption = "This account is a sub-account of:", ;
		FontSize = 8, ;
		Height = 16, ;
		Left = 207, ;
		Name = "Label1", ;
		TabIndex = 43, ;
		Top = 87, ;
		Width = 164, ;
		ZOrderSet = 27
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'lblAPCheck' AS lbllabelcustom WITH ;
		Caption = "A/P Check Format Name", ;
		Left = 28, ;
		Name = "lblAPCheck", ;
		TabIndex = 31, ;
		Top = 216, ;
		ZOrderSet = 30
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblCacctdesc' AS lblfieldlabelcustom WITH ;
		AutoSize = .T., ;
		Caption = "Description", ;
		Height = 16, ;
		Left = 216, ;
		Name = "lblCacctdesc", ;
		TabIndex = 6, ;
		Top = 9, ;
		Width = 56, ;
		ZOrderSet = 5
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblCacctno' AS lblfieldlabelcustom WITH ;
		Caption = "Account Number", ;
		Height = 16, ;
		Left = 21, ;
		Name = "lblCacctno", ;
		TabIndex = 5, ;
		Top = 9, ;
		Width = 83, ;
		ZOrderSet = 0
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblCheckNo' AS lbllabelcustom WITH ;
		Caption = "Next Check No", ;
		Left = 207, ;
		Name = "lblCheckNo", ;
		TabIndex = 42, ;
		Top = 149, ;
		ZOrderSet = 25
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom1' AS lbllabelcustom WITH ;
		BackStyle = 1, ;
		Caption = "Account Options", ;
		FontBold = .T., ;
		Left = 22, ;
		Name = "Lbllabelcustom1", ;
		TabIndex = 28, ;
		Top = 73, ;
		ZOrderSet = 16
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblLMCheck' AS lbllabelcustom WITH ;
		Caption = "Land Check Format Name", ;
		Left = 28, ;
		Name = "lblLMCheck", ;
		TabIndex = 37, ;
		Top = 300, ;
		ZOrderSet = 19
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblNaccttype' AS lblfieldlabelcustom WITH ;
		Caption = "Account Type", ;
		Height = 16, ;
		Left = 15, ;
		Name = "lblNaccttype", ;
		TabIndex = 7, ;
		Top = 42, ;
		Width = 70, ;
		ZOrderSet = 11
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblPRCheck' AS lbllabelcustom WITH ;
		Caption = "Payroll Check Format Name", ;
		Left = 28, ;
		Name = "lblPRCheck", ;
		TabIndex = 35, ;
		Top = 272, ;
		ZOrderSet = 17
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblRDCheck' AS lbllabelcustom WITH ;
		Caption = "Rev Dist Check Format Name", ;
		Left = 28, ;
		Name = "lblRDCheck", ;
		TabIndex = 33, ;
		Top = 244, ;
		ZOrderSet = 14
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblsubaccount' AS label WITH ;
		AutoSize = .T., ;
		Caption = "Label2", ;
		FontBold = .T., ;
		FontSize = 8, ;
		ForeColor = 255,0,0, ;
		Height = 16, ;
		Left = 252, ;
		Name = "lblsubaccount", ;
		Top = 112, ;
		Width = 38, ;
		ZOrderSet = 31
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Shape1' AS shape WITH ;
		Height = 104, ;
		Left = 12, ;
		Name = "Shape1", ;
		SpecialEffect = 0, ;
		Top = 80, ;
		Width = 156, ;
		ZOrderSet = 3
		*< END OBJECT: BaseClass="shape" />

	ADD OBJECT 'txtAccountNumber' AS txtaccountnumber WITH ;
		ControlSource = "coa.cacctno", ;
		Height = 20, ;
		InputMask = "XXXXXX", ;
		Left = 108, ;
		lrequired = .T., ;
		Margin = 1, ;
		MaxLength = 6, ;
		Name = "txtAccountNumber", ;
		TabIndex = 2, ;
		Top = 7, ;
		Width = 53, ;
		ZOrderSet = 13
		*< END OBJECT: ClassLib="..\custom\swgl.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtCacctdesc' AS txttextboxcustom WITH ;
		ControlSource = "coa.cacctdesc", ;
		Height = 20, ;
		InputMask = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", ;
		Left = 286, ;
		lrequired = .T., ;
		Margin = 1, ;
		MaxLength = 30, ;
		Name = "txtCacctdesc", ;
		TabIndex = 3, ;
		Top = 7, ;
		Width = 218, ;
		ZOrderSet = 4
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcCheckNo' AS txttextboxcustom WITH ;
		ControlSource = "coa.ccheckno", ;
		Height = 20, ;
		Left = 288, ;
		Name = "txtcCheckNo", ;
		TabIndex = 16, ;
		Top = 147, ;
		Width = 77, ;
		ZOrderSet = 24
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />
	
	PROCEDURE checkoptions
		**  Looks at all options tables to make sure this account isn't being used anywhere.  **
		**  If it is, delete it from the options table, so it won't orphan any settings that  **
		**  are using this account number.                                                    **
		
		LOCAL lcAcctNo
		lcAcctNo = coa.cAcctNo
		SET DELETED ON
		
		SELECT landopt
		GO TOP
		IF cCashAcct = lcAcctNo
		   REPLACE cCashAcct WITH ''
		ENDIF
		IF cRentAcct = lcAcctNo
		   REPLACE cRentAcct WITH ''
		ENDIF
		IF cBonusAcct = lcAcctNo
		   REPLACE cBonusAcct WITH ''
		ENDIF
		
		SELECT options
		GO TOP
		IF cDisbAcct = lcAcctNo
		   REPLACE cDisbAcct WITH ''
		ENDIF
		IF cDefAcct = lcAcctNo
		   REPLACE cDefAcct WITH ''
		ENDIF
		IF cMinAcct = lcAcctNo
		   REPLACE cMinAcct WITH ''
		ENDIF
		IF cTaxAcct1 = lcAcctNo
		   REPLACE cTaxAcct1 WITH ''
		ENDIF
		IF cTaxAcct2 = lcAcctNo
		   REPLACE cTaxAcct2 WITH ''
		ENDIF
		IF cTaxAcct3 = lcAcctNo
		   REPLACE cTaxAcct3 WITH ''
		ENDIF
		IF cTaxAcct4 = lcAcctNo
		   REPLACE cTaxAcct4 WITH ''
		ENDIF
		IF cJIBAcct = lcAcctNo
		   REPLACE cJIBAcct WITH ''
		ENDIF
		IF cBackAcct = lcAcctNo
		   REPLACE cBackAcct WITH ''
		ENDIF
		IF cTaxAcct = lcAcctNo
		   REPLACE cTaxAcct WITH ''
		ENDIF
		IF cGathAcct = lcAcctNo
		   REPLACE cGathAcct WITH ''
		ENDIF
		IF cFixedAcct = lcAcctNo
		   REPLACE cFixedAcct WITH ''
		ENDIF
		
		SELECT aropt
		GO TOP
		IF cCashAcct = lcAcctNo
		   REPLACE cCashAcct WITH ''
		ENDIF
		IF cARAcct = lcAcctNo
		   REPLACE cARAcct WITH ''
		ENDIF
		IF cDiscAcct = lcAcctNo
		   REPLACE cDiscAcct WITH ''
		ENDIF
		IF cTaxAcct = lcAcctNo
		   REPLACE cTaxAcct WITH ''
		ENDIF
		IF cIntAcct = lcAcctNo
		   REPLACE cIntAcct WITH ''
		ENDIF
		IF cCOGSAcct = lcAcctNo
		   REPLACE cCOGSAcct WITH ''
		ENDIF
		
		SELECT progopt
		GO TOP
		IF cCashAcct = lcAcctNo
		   REPLACE cCashAcct WITH ''
		ENDIF
		IF cExpAcct = lcAcctNo
		   REPLACE cExpAcct WITH ''
		ENDIF
		
		SELECT propt
		GO TOP
		IF cPRAcct = lcAcctNo
		   REPLACE cPRAcct WITH ''
		ENDIF
		IF cPRExpAcct = lcAcctNo
		   REPLACE cPRExpAcct WITH ''
		ENDIF
		IF cFUTALiab = lcAcctNo
		   REPLACE cFUTALiab WITH ''
		ENDIF
		IF cFUTAExp = lcAcctNo
		   REPLACE cFUTAExp WITH ''
		ENDIF
		IF cPRCheck = lcAcctNo
		   REPLACE cPRCheck WITH ''
		ENDIF
		IF cBonExpAcct = lcAcctNo
		   REPLACE cBonExpAcct WITH ''
		ENDIF
		
		SELECT glopt
		GO TOP
		IF cInventory = lcAcctNo
		   REPLACE cInventory WITH ''
		ENDIF
		IF cRetEarn = lcAcctNo
		   REPLACE cRetEarn WITH ''
		ENDIF
		IF cCurEarn = lcAcctNo
		   REPLACE cCurEarn WITH ''
		ENDIF
		IF cRevClear = lcAcctNo
		   REPLACE cRevClear WITH ''
		ENDIF
		IF cUndepFund = lcAcctNo
		   REPLACE cUndepFund WITH ''
		ENDIF
		IF cSuspense = lcAcctNo
		   REPLACE cSuspense WITH ''
		ENDIF
		IF cExpClear = lcAcctNo
		   REPLACE cExpClear WITH ''
		ENDIF
		
		SELECT apopt
		GO TOP
		IF cAPCash = lcAcctNo
		   REPLACE cAPCash WITH ''
		ENDIF
		IF cAPAcct = lcAcctNo
		   REPLACE cAPAcct WITH ''
		ENDIF
		IF cDiscAcct = lcAcctNo
		   REPLACE cDiscAcct WITH ''
		ENDIF
		
		SELECT gasopt
		GO TOP
		IF cARAcct = lcAcctNo
		   REPLACE cARAcct WITH ''
		ENDIF
		IF cSalesAcct = lcAcctNo
		   REPLACE cSalesAcct WITH ''
		ENDIF
		
		SWSELECT('prsuta')
		=CURSORSETPROP("Buffering",5)
		IF cSUTALiab = lcAcctNo
		   REPLACE cSUTALiab WITH ''
		ENDIF
		IF cSUTAExp = lcAcctNo
		   REPLACE cSUTAExp WITH ''
		ENDIF
		
		SELECT landopt
		=TABLEUPDATE(.T.)
		SELECT options
		=TABLEUPDATE(.T.)
		SELECT aropt
		=TABLEUPDATE(.T.)
		SELECT progopt
		=TABLEUPDATE(.T.)
		SELECT propt
		=TABLEUPDATE(.T.)
		SELECT glopt
		=TABLEUPDATE(.T.)
		SELECT apopt
		=TABLEUPDATE(.T.)
		SELECT gasopt
		=TABLEUPDATE(.T.)
		SELECT prsuta
		=TABLEUPDATE(.T.)
		
	ENDPROC

	PROCEDURE checksub		&& Checks to see what level this account is on, and refreshes the label accordingly.
		** Checks to see what level this account is on, and refreshes the label accordingly  **
		
		LOCAL lcAcctNo, lnLevel, lnLevelBelow, llParent, lnRecNo2, lnRecNo3, lnRecNo4, lcAcctNo2, lcAcctNo3, lcAcctNo4
		
		lcAcctNo     = coa.cparent
		lnLevel      = 1
		lnLevelBelow = 0
		
		
		**  Do a preliminary check to make sure that the account is not going to be getting set as a sub account of itself, through a circular route
		**  There are two checks to be made:  first, look downstream, then look upstream for matching accounts.  It can't be done in a single step due to buffering issues.
		llParent = .F.  &&  Flag for whether we find this account as a subaccount of itself
		SELECT coa1
		LOCATE FOR cacctno = coa.cParent  &&  Look through all subaccounts for this account - these would be level 2 accounts, at a minimum
		IF FOUND()
		   lnRecNo2 = RECNO()
		   lcAcctNo2 = coa1.cacctno
		   IF coa1.cparent = coa.cacctno  &&  The next level down sets it as a parent account
		      llParent = .T.
		   ELSE
		      SCAN FOR cparent = lcAcctNo2 AND cAcctNo <> coa.cAcctNo  &&  Level 3 accounts, and the first ones that could possibly be set back to the original account
		         IF cacctno = coa.cacctno  &&  The account is set as a parent of itself, so bail out
		            llParent = .T.
		         ENDIF
		         lnRecNo3 = RECNO()
		         lcAcctNo3 = coa1.cacctno
		         SCAN FOR cparent = lcAcctNo3 AND cAcctNo <> coa.cAcctNo  &&  Level 4 accounts
		            IF cacctno = coa.cacctno  &&  The account is set as a parent of itself, so bail out
		               llParent = .T.
		            ENDIF
		            lnRecNo4 = RECNO()
		            lcAcctNo4 = coa1.cacctno
		            SCAN FOR cparent = lcAcctNo4 AND cAcctNo <> coa.cAcctNo  &&  Level 5 accounts, and the deepest we'll check.  Even if it winds up being more than 5 levels deep, the validation below will catch it.
		               IF cacctno = coa.cacctno  &&  The account is set as a parent of itself, so bail out
		                  llParent = .T.
		               ENDIF
		            ENDSCAN
		            GOTO lnRecNo4
		         ENDSCAN
		         GOTO lnRecNo3
		      ENDSCAN
		   ENDIF
		   GOTO lnRecNo2
		ENDIF
		
		IF llParent = .T.  &&  It turned out to be a parent of itself, so don't let them proceed
		   THISFORM.oMessage.Warning('The selected account cannot be chosen as a parent account, as doing so will make this account a parent of itself.')
		   THISFORM.cboAcct.SET('value','')
		ENDIF
		
		
		IF NOT EMPTY(lcAcctNo)  &&  Is a subaccount, so automatically becomes a level 2, then checks further
		   SELECT coa1
		   SET ORDER TO acctno
		   IF SEEK(lcAcctNo)
		      lnLevel = 2
		      IF NOT EMPTY(coa1.cparent)  &&  Check to see if it's a level 3 account
		         lcAcctNo = coa1.cparent
		         SELECT coa1
		         IF SEEK(lcAcctNo)
		            lnLevel = 3  &&  Account exists, so it becomes a level 3
		            IF NOT EMPTY(coa1.cparent)  &&  Check to see if it's a level 4
		               lcAcctNo = coa1.cparent
		               SELECT coa1
		               IF SEEK(lcAcctNo)
		                  lnLevel = 4  &&  Account exists, so it becomes a level 4
		                  IF NOT EMPTY(coa1.cparent)  &&  Check to see if it's a level 5
		                     lcAcctNo = coa1.cparent
		                     SELECT coa1
		                     IF SEEK(lcAcctNo)
		                        lnLevel = 5
		                        IF NOT EMPTY(coa1.cparent)  &&  Check to see if it's more than 5 levels deep, and don't let them set it up this way
		                           lnLevel = 6
		                        ENDIF
		                     ENDIF
		                  ENDIF
		               ENDIF
		            ENDIF
		         ENDIF
		      ENDIF
		   ENDIF
		ENDIF
		
		IF lnLevel <> 6  &&  If the account itself isn't above a level 5, check to see how many levels are below it, to make sure it isn't crossing the 5 level limit
		   SELECT coa1
		   LOCATE FOR cparent = coa.cacctno
		   IF FOUND()
		      lnLevelBelow = 1
		      lcAcctNo = coa1.cacctno
		      LOCATE FOR cparent = lcAcctNo
		      IF FOUND()
		         lnLevelBelow = 2
		         lcAcctNo = coa1.cacctno
		         LOCATE FOR cparent = lcAcctNo
		         IF FOUND()
		            lnLevelBelow = 3
		            lcAcctNo = coa1.cacctno
		            LOCATE FOR cparent = lcAcctNo
		            IF FOUND()
		               lnLevelBelow = 4
		               lcAcctNo = coa1.cacctno
		               LOCATE FOR cparent = lcAcctNo
		               IF FOUND()
		                  lnLevelBelow = 5
		               ENDIF
		            ENDIF
		         ENDIF
		      ENDIF
		   ENDIF
		   IF lnLevel + lnLevelBelow > 5  &&  More than 5 levels deep, so don't let them do it
		      THISFORM.oMessage.Warning('The chosen account cannot be selected, since it will create a sublevel structure more than 5 levels deep.  Please choose a different account as the parent account.')
		      THISFORM.cboAcct.SET('value','')
		   ELSE
		      THISFORM.lblSubAccount.CAPTION = '**  This account is a level ' + ALLT(STR(lnLevel)) + ' account  **'
		   ENDIF
		ELSE
		   THISFORM.oMessage.Warning('There are a maximum of 5 account levels.  Selecting this account as a subaccount would make it more than 5 levels deep from the parent account.')
		   THISFORM.cboAcct.SET('value','')
		ENDIF
		
	ENDPROC

	PROCEDURE getbal		&& Gets the current balance of the account for the fiscal year and period given.
	ENDPROC

	PROCEDURE hideshowchecks
		LPARAMETERS tlBankAcct
		
		THISFORM.lLandOpt = m.goApp.lLandOpt
		*  Code for re-sizing/hiding/showing stuff for whether it's currently a bank account or not
		swselect('glopt')
		GO TOP
		llCheckName = lCheckNames
		
		IF tlBankAcct
		   THISFORM.lblCheckNo.VISIBLE	= .T.
		   THISFORM.txtcCheckNo.VISIBLE	= .T.
		   IF llCheckName
		      THISFORM.lblAPCheck.VISIBLE  = .T.
		      THISFORM.cntgetfile1.VISIBLE = .T.
		      THISFORM.cmdModRepo1.VISIBLE = .T.
		      THISFORM.lblRDCheck.VISIBLE  = .T.
		      THISFORM.cntgetfile2.VISIBLE = .T.
		      THISFORM.cmdModRepo2.VISIBLE = .T.
		      THISFORM.lblPRCheck.VISIBLE  = .T.
		      THISFORM.cntgetfile3.VISIBLE = .T.
		      THISFORM.cmdModRepo3.VISIBLE = .T.
		      THISFORM.lblLMCheck.VISIBLE  = THISFORM.lLandOpt
		      THISFORM.cntgetfile4.VISIBLE = THISFORM.lLandOpt
		      THISFORM.cmdmodrepo4.VISIBLE = THISFORM.lLandOpt
		   ELSE
		      THISFORM.lblAPCheck.VISIBLE  = .F.
		      THISFORM.cntgetfile1.VISIBLE = .F.
		      THISFORM.cmdModRepo1.VISIBLE = .F.
		      THISFORM.lblRDCheck.VISIBLE  = .F.
		      THISFORM.cntgetfile2.VISIBLE = .F.
		      THISFORM.cmdModRepo2.VISIBLE = .F.
		      THISFORM.lblPRCheck.VISIBLE  = .F.
		      THISFORM.cntgetfile3.VISIBLE = .F.
		      THISFORM.cmdModRepo3.VISIBLE = .F.
		      THISFORM.lblLMCheck.VISIBLE  = .F.
		      THISFORM.cntgetfile4.VISIBLE = .F.
		      THISFORM.cmdmodrepo4.VISIBLE = .F.
		   ENDIF
		ELSE
		   THISFORM.lblAPCheck.VISIBLE	= .F.
		   THISFORM.cntgetfile1.VISIBLE	= .F.
		   THISFORM.cmdModRepo1.VISIBLE	= .F.
		   THISFORM.lblRDCheck.VISIBLE	= .F.
		   THISFORM.cntgetfile2.VISIBLE	= .F.
		   THISFORM.cmdModRepo2.VISIBLE	= .F.
		   THISFORM.lblPRCheck.VISIBLE	= .F.
		   THISFORM.cntgetfile3.VISIBLE	= .F.
		   THISFORM.cmdModRepo3.VISIBLE	= .F.
		   THISFORM.lblLMCheck.VISIBLE	= .F.
		   THISFORM.cntgetfile4.VISIBLE	= .F.
		   THISFORM.cmdmodrepo4.VISIBLE	= .F.
		   THISFORM.lblCheckNo.VISIBLE	= .F.
		   THISFORM.txtcCheckNo.VISIBLE	= .F.
		ENDIF
	ENDPROC

	PROCEDURE list
		LPARAMETERS cworkarea
		LOCAL lcList, lnRecNo
		PRIV llOK
		WAIT WINDOW NOWAIT 'Building Lookup List'
		
		IF USED('coatemp')
		   USE IN coatemp
		ENDIF
		IF USED('coatemp1')
		   USE IN coatemp1
		ENDIF
		
		llOK = .F.
		lcList = 'cacctno\Acct No,cacctdesc\Account Description,cLevel\Level,naccttype\Type'
		
		IF THIS.flushcontrolbuffer() AND THIS.beforenav('Coa')
		
		   SELECT cAcctNo, cAcctDesc, '' AS cLevel, naccttype FROM coa INTO CURSOR coatemp1
		   USE DBF('coatemp1') AGAIN IN 0 ALIAS coatemp
		   SELECT coatemp
		   INDEX ON cAcctNo TAG cAcctNo
		   INDEX ON cAcctDesc TAG cAcctDesc
		   SCAN
		      REPLACE cLevel WITH ALLTRIM(STR(THISFORM.glmaint.calcsublevel(coatemp.cAcctNo)))
		   ENDSCAN
		
		   WAIT CLEAR
		
		   DO FORM ..\CUSTOM\picklist WITH 'coatemp', lcList, THISFORM.txtAccountNumber.VALUE, 4, .T., .T.
		
		   IF llOK
		      SELECT coa
		      LOCATE FOR ALLTRIM(cAcctNo) = ALLTRIM(coatemp.cAcctNo)
		      IF FOUND()
		         THISFORM.cmdatamanager.afternav('Coa')
		         THISFORM.REFRESH()
		      ENDIF
		   ENDIF
		
		ELSE
		   RETURN
		ENDIF
		
	ENDPROC

	PROCEDURE cboAcct.Init
		*
		*  Builds the data displayed in the combo list box
		*
		
		SELECT  cAcctNo + ' - ' +cAcctDesc, cAcctNo, cAcctDesc FROM coa INTO ARRAY laAcct ORDER BY cAcctNo
		
		this.addlistitem('',1,1)
		this.addlistitem('',1,2)
		this.addlistitem('',1,3)
		
		IF _TALLY > 0
		   FOR lnX = 1 TO ALEN(laAcct,1)
		      THIS.ADDLISTITEM(laAcct[lnX,1],lnX+1,1)
		      THIS.ADDLISTITEM(laAcct[lnX,2],lnX+1,2)
		   ENDFOR
		ENDIF
		
		DODEFAULT()
		
	ENDPROC

	PROCEDURE cboAcct.Valid
		IF THIS.VALUE = coa.cacctno  &&  Don't let them mark an account as a sub-account of itself
		   THISFORM.oMessage.Warning('An account cannot be a subaccount of itself.  Please choose a different parent account.')
		   THIS.SET('value','')
		   RETURN .F.
		ENDIF
		
		IF NOT EMPTY(THIS.VALUE)
		   SELECT coa1  &&  Make sure that the account type of the parent matches this one, or they can't do it
		   LOCATE FOR cacctno = THIS.VALUE
		   IF FOUND()
		      IF coa1.nAcctType <> coa.nAcctType
		         THISFORM.oMessage.Warning('The parent account chosen is a different account type than this account.  Please choose a different parent account, or change the account type on the current account before proceeding.')
		         THIS.SET('value','')
		         RETURN .F.
		      ENDIF
		   ELSE
		      WAIT WINDOW 'Problem finding parent account'
		   ENDIF
		ENDIF
		
		DODEFAULT()
		
		THISFORM.checksub()
		THISFORM.setnextcontrol(THISFORM.cboAcct)
		
		
	ENDPROC

	PROCEDURE cboGLAcctType.Valid
		IF this.Value <> coa.nAcctType AND NOT EMPTY(coa.cParent)  &&  User has changed the account type, so make sure this isn't set as a subaccount
		   thisform.oMessage.Warning('This account is a sub-account, so the account type cannot be changed.  Change the account type on the parent account, and it will ripple through all the sub accounts and change them.')
		   this.Refresh()   
		   RETURN 0
		endif
		
		IF coa.lbankacct
		   IF this.value <> 1
		      thisform.omessage.warning('The account type must be current asset for bank accounts.')
		      RETURN 0
		   ENDIF
		ENDIF
		
		DODEFAULT()      
	ENDPROC

	PROCEDURE chkLbankacct.Click
		thisform.HideShowChecks(this.Value)
		
	ENDPROC

	PROCEDURE chkLbankacct.Valid
		DODEFAULT()
		
		IF THIS.VALUE
		   IF coa.naccttype <> 1
		      THISFORM.omessage.warning('The account type must be current assets for bank accounts.')
		      THIS.SET('value',.F.)
		      RETURN 0
		   ENDIF
		ENDIF
		
		
	ENDPROC

	PROCEDURE CMDATAMANAGER.afternav
		LPARAMETERS cworkarea
		LOCAL lcYear, lcPeriod, lcAccount, llCheckName
		
		
		IF m.cWorkArea == 'Coa'
		   thisform.HideShowChecks(coa.lbankacct)
		   
		   thisform.lwasbankacct = coa.lbankacct
		   thisform.noldaccttype = coa.nAcctType
		   thisform.cOldacctno = coa.cAcctNo
		   thisform.txtAccountNumber.Refresh()
		      
		   thisform.checksub()
		ENDIF   
		
		SELE coa
		DODEFAULT(m.cWorkarea)
		
	ENDPROC

	PROCEDURE CMDATAMANAGER.afternew
		LPARAMETERS cworkarea
		
		THISFORM.SetNextControl(thisform.txtAccountNumber)
		
		thisform.cboAcct.Init()
		
		DODEFAULT(cworkarea)
		
	ENDPROC

	PROCEDURE CMDATAMANAGER.beforedelete
		LPARAMETERS cworkarea
		
		SELECT glmaster
		LOCATE FOR cacctno = THISFORM.txtAccountNumber.VALUE
		IF FOUND()
		   THISFORM.oMessage.warning('This account has been used in the general ledger.  It cannot be deleted.')
		   RETURN .F.
		ENDIF
		
		SELECT coa1
		LOCATE FOR cParent = THISFORM.txtAccountNumber.VALUE
		IF FOUND()  &&  Another account is a subaccount of this one, so don't let them delete it
		   THISFORM.oMessage.warning('There are other accounts which are subaccounts of this one.  It cannot be deleted.')
		   RETURN .F.
		ENDIF
		
		THISFORM.CheckOptions()  &&  See if it was used in any options tables, and blank the settings out before deleting - BH 03/05/2007
		
		DODEFAULT(cworkarea)
		
	ENDPROC

	PROCEDURE CMDATAMANAGER.beforeupdate
		LPARAMETERS cWorkareaList, lCurrentRecordOnly
		LOCAL lnRecNo, lcAcctNo, lnAcctType, lcAcctNo2, lcAcctNo3, lcAcctNo4, lnRecNo2, lnRecNo3, lnRecNo4
		
		*  If this was formerly a bank account, but not longer is, check for activity in the check register
		*  and don't let them change it if any exists
		IF THISFORM.lWasbankacct AND NOT coa.lbankacct
		   swselect('checks')
		   LOCATE FOR cAcctNo = coa.cAcctNo
		   IF FOUND()
		      THISFORM.oMessage.warning("This account was used as a bank account previously and has check register entries created for it. The 'Bank Account' option cannot be un-selected.")
		      THISFORM.chkLbankacct.SET('value',.T.)
		      RETURN .F.
		   ENDIF
		ENDIF
		
		*  If this account has activity, don't let the account type be changed
		IF THISFORM.noldaccttype <> 0 AND THISFORM.noldaccttype <> coa.nAcctType
		   swselect('glmaster')
		   LOCATE FOR cAcctNo = coa.cAcctNo AND (ndebits <> 0 OR ncredits <> 0)
		   IF FOUND()
		*!*	      THISFORM.oMessage.warning('This account has posting activity for it in the general ledger. The account type cannot be changed.')
		*!*	      THISFORM.cboGLAcctType.SET('value',THISFORM.noldaccttype)
		*!*	      RETURN .F.
		   ENDIF
		ENDIF
		
		SELECT coa1
		LOCATE FOR cParent = coa.cAcctNo
		IF FOUND()  &&  There is a subaccount, so see if they've changed the account type
		   SET ORDER TO acctno
		   IF SEEK(coa.cAcctNo) AND nAcctType <> coa.nAcctType  &&  They've changed the account type on this account, so ripple through its sub accounts and do the same
		      IF THISFORM.oMessage.CONFIRM('You have changed the account type for this account.  Since this account has subaccounts beneath it, those accounts will have their account types switched, too.  Continue?')
		         SELECT coa
		         lcAcctNo = coa.cAcctNo
		         lnAcctType = nAcctType
		         lnRecNo = RECNO()  &&  Store current record, so it can be returned to
		         SCAN FOR cParent = lcAcctNo  && Level 2 accounts
		            REPLACE nAcctType WITH lnAcctType
		            lcAcctNo2 = coa.cAcctNo
		            lnRecNo2 = RECNO()
		            SCAN FOR cParent = lcAcctNo2  &&  Level 3 accounts
		               REPLACE nAcctType WITH lnAcctType
		               lcAcctNo3 = coa.cAcctNo
		               lnRecNo3 = RECNO()
		               SCAN FOR cParent = lcAcctNo3  &&  Level 4 accounts
		                  REPLACE nAcctType WITH lnAcctType
		                  lcAcctNo4 = coa.cAcctNo
		                  lnRecNo4 = RECNO()
		                  SCAN FOR cParent = lcAcctNo4  &&  Level 5 accounts
		                     REPLACE nAcctType WITH lnAcctType
		                  ENDSCAN
		                  GOTO lnRecNo4
		               ENDSCAN
		               GOTO lnRecNo3
		            ENDSCAN
		            GOTO lnRecNo2
		         ENDSCAN
		         GOTO lnRecNo
		      ELSE
		         RETURN .F.
		      ENDIF
		   ENDIF
		ENDIF
		
		**  If they changed the account number, look at all options tables to ripple the new number to any of them
		IF THISFORM.coldacctno <> coa.cAcctNo AND NOT EMPTY(thisform.coldacctno)
		   lcAcctNo = thisform.coldacctno
		
		   SELECT landopt
		   GO TOP
		   IF cCashAcct = lcAcctNo
		      REPLACE cCashAcct WITH coa.cAcctNo
		   ENDIF
		   IF cRentAcct = lcAcctNo
		      REPLACE cRentAcct WITH coa.cAcctNo
		   ENDIF
		   IF cBonusAcct = lcAcctNo
		      REPLACE cBonusAcct WITH coa.cAcctNo
		   ENDIF
		
		   SELECT options
		   GO TOP
		   IF cDisbAcct = lcAcctNo
		      REPLACE cDisbAcct WITH coa.cAcctNo
		   ENDIF
		   IF cDefAcct = lcAcctNo
		      REPLACE cDefAcct WITH coa.cAcctNo
		   ENDIF
		   IF cMinAcct = lcAcctNo
		      REPLACE cMinAcct WITH coa.cAcctNo
		   ENDIF
		   IF cTaxAcct1 = lcAcctNo
		      REPLACE cTaxAcct1 WITH coa.cAcctNo
		   ENDIF
		   IF cTaxAcct2 = lcAcctNo
		      REPLACE cTaxAcct2 WITH coa.cAcctNo
		   ENDIF
		   IF cTaxAcct3 = lcAcctNo
		      REPLACE cTaxAcct3 WITH coa.cAcctNo
		   ENDIF
		   IF cTaxAcct4 = lcAcctNo
		      REPLACE cTaxAcct4 WITH coa.cAcctNo
		   ENDIF
		   IF cJIBAcct = lcAcctNo
		      REPLACE cJIBAcct WITH coa.cAcctNo
		   ENDIF
		   IF cBackAcct = lcAcctNo
		      REPLACE cBackAcct WITH coa.cAcctNo
		   ENDIF
		   IF cTaxAcct = lcAcctNo
		      REPLACE cTaxAcct WITH coa.cAcctNo
		   ENDIF
		   IF cGathAcct = lcAcctNo
		      REPLACE cGathAcct WITH coa.cAcctNo
		   ENDIF
		   IF cFixedAcct = lcAcctNo
		      REPLACE cFixedAcct WITH coa.cAcctNo
		   ENDIF
		
		   SELECT aropt
		   GO TOP
		   IF cCashAcct = lcAcctNo
		      REPLACE cCashAcct WITH coa.cAcctNo
		   ENDIF
		   IF cARAcct = lcAcctNo
		      REPLACE cARAcct WITH coa.cAcctNo
		   ENDIF
		   IF cDiscAcct = lcAcctNo
		      REPLACE cDiscAcct WITH coa.cAcctNo
		   ENDIF
		   IF cTaxAcct = lcAcctNo
		      REPLACE cTaxAcct WITH coa.cAcctNo
		   ENDIF
		   IF cIntAcct = lcAcctNo
		      REPLACE cIntAcct WITH coa.cAcctNo
		   ENDIF
		   IF cCOGSAcct = lcAcctNo
		      REPLACE cCOGSAcct WITH coa.cAcctNo
		   ENDIF
		
		   SELECT progopt
		   GO TOP
		   IF cCashAcct = lcAcctNo
		      REPLACE cCashAcct WITH coa.cAcctNo
		   ENDIF
		   IF cExpAcct = lcAcctNo
		      REPLACE cExpAcct WITH coa.cAcctNo
		   ENDIF
		
		   SELECT propt
		   GO TOP
		   IF cPRAcct = lcAcctNo
		      REPLACE cPRAcct WITH coa.cAcctNo
		   ENDIF
		   IF cPRExpAcct = lcAcctNo
		      REPLACE cPRExpAcct WITH coa.cAcctNo
		   ENDIF
		   IF cFUTALiab = lcAcctNo
		      REPLACE cFUTALiab WITH coa.cAcctNo
		   ENDIF
		   IF cFUTAExp = lcAcctNo
		      REPLACE cFUTAExp WITH coa.cAcctNo
		   ENDIF
		   IF cPRCheck = lcAcctNo
		      REPLACE cPRCheck WITH coa.cAcctNo
		   ENDIF
		   IF cBonExpAcct = lcAcctNo
		      REPLACE cBonExpAcct WITH coa.cAcctNo
		   ENDIF
		
		   SELECT glopt
		   GO TOP
		   IF cInventory = lcAcctNo
		      REPLACE cInventory WITH coa.cAcctNo
		   ENDIF
		   IF cRetEarn = lcAcctNo
		      REPLACE cRetEarn WITH coa.cAcctNo
		   ENDIF
		   IF cCurEarn = lcAcctNo
		      REPLACE cCurEarn WITH coa.cAcctNo
		   ENDIF
		   IF cRevClear = lcAcctNo
		      REPLACE cRevClear WITH coa.cAcctNo
		   ENDIF
		   IF cUndepFund = lcAcctNo
		      REPLACE cUndepFund WITH coa.cAcctNo
		   ENDIF
		   IF cSuspense = lcAcctNo
		      REPLACE cSuspense WITH coa.cAcctNo
		   ENDIF
		   IF cExpClear = lcAcctNo
		      REPLACE cExpClear WITH coa.cAcctNo
		   ENDIF
		
		   SELECT apopt
		   GO TOP
		   IF cAPCash = lcAcctNo
		      REPLACE cAPCash WITH coa.cAcctNo
		   ENDIF
		   IF cAPAcct = lcAcctNo
		      REPLACE cAPAcct WITH coa.cAcctNo
		   ENDIF
		   IF cDiscAcct = lcAcctNo
		      REPLACE cDiscAcct WITH coa.cAcctNo
		   ENDIF
		
		   SELECT gasopt
		   GO TOP
		   IF cARAcct = lcAcctNo
		      REPLACE cARAcct WITH coa.cAcctNo
		   ENDIF
		   IF cSalesAcct = lcAcctNo
		      REPLACE cSalesAcct WITH coa.cAcctNo
		   ENDIF
		
		   SWSELECT('prsuta')
		   =CURSORSETPROP("Buffering",5)
		   IF cSUTALiab = lcAcctNo
		      REPLACE cSUTALiab WITH coa.cAcctNo
		   ENDIF
		   IF cSUTAExp = lcAcctNo
		      REPLACE cSUTAExp WITH coa.cAcctNo
		   ENDIF
		
		   SELECT landopt
		   =TABLEUPDATE(.T.)
		   SELECT options
		   =TABLEUPDATE(.T.)
		   SELECT aropt
		   =TABLEUPDATE(.T.)
		   SELECT progopt
		   =TABLEUPDATE(.T.)
		   SELECT propt
		   =TABLEUPDATE(.T.)
		   SELECT glopt
		   =TABLEUPDATE(.T.)
		   SELECT apopt
		   =TABLEUPDATE(.T.)
		   SELECT gasopt
		   =TABLEUPDATE(.T.)
		   SELECT prsuta
		   =TABLEUPDATE(.T.)
		ENDIF
		
		
		DODEFAULT(cWorkareaList, lCurrentRecordOnly)
		
	ENDPROC

	PROCEDURE CMDATAMANAGER.Error
		LPARAMETERS nerror,cmethod,nline
		
		=AERROR(laerror)
		lnrows = ALEN(laerror,1)
		lncols = ALEN(laerror,2)
		DIME THISFORM.aerrorinfo[lnRows,lnCols]
		
		WITH THISFORM
		   FOR lnerror = 1 TO lnrows
		      FOR lni = 1 TO lncols
		         .aerrorinfo[lnerror,lni] = laerror[lnerror,lni]
		      NEXT lni
		   NEXT lnerror
		
		   IF m.nerror = 1539
		      DO CASE
		         CASE .aerrorinfo[1, 5] = 1
		            lcmessage = 'This record cannot be inserted.'
		         CASE .aerrorinfo[1, 5] = 2
		            lcmessage = 'This record cannot be updated.'
		         CASE .aerrorinfo[1, 5] = 3
		            lcmessage = 'This record cannot be deleted. Other records depend on its existence.'
		      ENDCASE
		      THISFORM.cmdatamanager.revertall()
		*      THISFORM.omessage.warning(lcmessage)
		      pnerror = 1539
		   ELSE
		      DODEFAULT(nerror,cmethod,nline)
		   ENDIF
		ENDWITH
		
		
	ENDPROC

	PROCEDURE cmdModRepo1.Click
		LOCAL lcReport
		m.goStateManager.CloseToolbar('tbrMainToolBar')
		PUSH MENU _msysmenu
		SET SYSMENU TO _mfile, _medit, _msm_text
		lcReport = ALLTRIM(thisform.cntgetfile1.edtpath.value)
		llError = .f.
		TRY 
		   MODI REPO (lcReport)
		CATCH 
		   llerror = .t.
		ENDTRY
		
		IF llerror
		   MESSAGEBOX('Unable to modify the check format. Make sure the path is valid.',16,'Invalid Check Format')
		ENDIF    
		POP MENU _msysmenu
		m.goStateManager.OpenToolbar('tbrMainToolBar')
	ENDPROC

	PROCEDURE cmdModRepo2.Click
		LOCAL lcReport
		
		m.goStateManager.CloseToolbar('tbrMainToolBar')
		PUSH MENU _msysmenu
		SET SYSMENU TO _mfile, _medit, _msm_text
		lcReport = ALLTRIM(thisform.cntgetfile2.edtpath.value)
		llError = .f.
		
		TRY 
		   MODI REPO (lcReport)
		CATCH 
		   llerror = .t.
		ENDTRY
		
		IF llerror
		   MESSAGEBOX('Unable to modify the check format. Make sure the path is valid.',16,'Invalid Check Format')
		ENDIF    
		POP MENU _msysmenu
		m.goStateManager.OpenToolbar('tbrMainToolBar')
		
	ENDPROC

	PROCEDURE cmdModRepo3.Click
		LOCAL lcReport
		m.goStateManager.CloseToolbar('tbrMainToolBar')
		PUSH MENU _msysmenu
		SET SYSMENU TO _mfile, _medit, _msm_text
		lcReport = ALLTRIM(thisform.cntgetfile3.edtpath.value)
		llError = .f.
		
		TRY 
		   MODI REPO (lcReport)
		CATCH 
		   llerror = .t.
		ENDTRY
		
		IF llerror
		   MESSAGEBOX('Unable to modify the check format. Make sure the path is valid.',16,'Invalid Check Format')
		ENDIF    
		POP MENU _msysmenu
		m.goStateManager.OpenToolbar('tbrMainToolBar')
		
	ENDPROC

	PROCEDURE cmdModRepo4.Click
		LOCAL lcReport
		
		m.goStateManager.CloseToolbar('tbrMainToolBar')
		PUSH MENU _msysmenu
		SET SYSMENU TO _mfile, _medit, _msm_text
		lcReport = ALLTRIM(thisform.cntgetfile4.edtpath.value)
		llError = .f.
		
		TRY 
		   MODI REPO (lcReport)
		CATCH 
		   llerror = .t.
		ENDTRY
		
		IF llerror
		   MESSAGEBOX('Unable to modify the check format. Make sure the path is valid.',16,'Invalid Check Format')
		ENDIF    
		POP MENU _msysmenu
		m.goStateManager.OpenToolbar('tbrMainToolBar')
		
	ENDPROC

	PROCEDURE txtAccountNumber.Valid
		IF EMPTY(THIS.VALUE)
		   RETURN
		ENDIF
		
		SELECT glopt
		GO TOP
		llCheckName = lCheckNames
		
		THIS.VALUE = PADR(ALLTRIM(THIS.VALUE),6,'0')
		lcAcctno = THIS.VALUE
		IF NOT EMPTY(lcAcctno) AND lcAcctno <> coa.cacctno
		   SET DELETED OFF
		   SELECT coa1
		   SET ORDER TO acctno
		   IF SEEK(lcAcctno)
		      IF NOT DELETED()
		         IF THISFORM.omessage.CONFIRM('There is already an account with this number.  Would you like to view the existing record?')
		            THISFORM.cmdatamanager.revertall()
		            SELECT coa
		            SET ORDER TO acctno
		            SEEK(lcAcctno)
		            IF coa.lbankacct
		               IF llCheckName
		                  THISFORM.cntgetfile4.VISIBLE = THISFORM.lLandOpt
		                  THISFORM.lblLMCheck.VISIBLE = THISFORM.lLandOpt
		                  IF NOT THISFORM.lLandOpt
		                     THISFORM.HEIGHT = 363
		                  ELSE
		                     THISFORM.HEIGHT = 403
		                  ENDIF
		               ELSE
		                  THISFORM.HEIGHT = 272
		               ENDIF
		            ELSE
		               THISFORM.HEIGHT = 236
		            ENDIF
		            THISFORM.REFRESH()
		         ELSE
		            THIS.VALUE = ''
		            RETURN 0
		         ENDIF
		      ELSE
		         SELECT coa
		         THISFORM.cmdatamanager.revertall()
		         SET ORDER TO acctno
		         LOCATE FOR cacctno = lcAcctno
		         RECALL
		         SCATTER MEMVAR BLANK
		         GATHER MEMVAR
		         REPLACE coa.cacctno WITH lcAcctno
		         THISFORM.REFRESH()
		      ENDIF
		   ENDIF
		   SET DELETED ON
		   SELECT coa
		ENDIF
		
		
		DODEFAULT()
		
	ENDPROC

	PROCEDURE txtcCheckNo.Valid
		this.value = PADL(ALLTRIM(this.value),10,' ')
		DODEFAULT()
	ENDPROC

ENDDEFINE
