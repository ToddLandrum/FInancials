*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="cmdialog.vcx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS cmenabletalkprogress AS cuscustom OF "..\common\codemine.vcx" 		&& Temporarily Enable SET TALK messages in the status bar. Useful for progress display during long query and reindex operations.
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "codemine.h"
	*<DefinedPropArrayMethod>
		*p: lshowinstatusbar
		*p: nodometer
	*</DefinedPropArrayMethod>

	lshowinstatusbar = .T.
	Name = "cmenabletalkprogress"
	nodometer = 100
	
	PROCEDURE destroy
		* Restore original settings when we are released
		  LOCAL m.cWindow
		  IF THIS.cSaveTalk = 'OFF'
		    SET TALK OFF
		  ENDIF
		
		  IF THIS.cSaveStatusbar = 'ON'
		    SET STATUS BAR ON
		  ELSE
		    SET STATUS BAR OFF
		  ENDIF
		
		  SET ODOMETER TO (THIS.nSaveOdometer)
		
		  m.cWindow = THIS.cSaveTalkWindow
		  SET TALK &cWindow
		
	ENDPROC

	PROCEDURE init
		*++
		* Temporarily Enable SET TALK messages in the status bar.
		* Useful for progress display during long query and reindex operations.
		*--
		  * Save original settings
		  THIS.AddProperty('cSaveTalk', SET('TALK'))
		  THIS.AddProperty('cSaveTalkWindow', SET('TALK', 1))
		  THIS.AddProperty('cSaveStatusbar', SET('STATUS BAR'))
		  THIS.AddProperty('nSaveOdometer', SET('ODOMETER'))
		
		  * Setting talk window to a non-existing window will let it show in a WAIT WINDOW display.
		  SET ODOMETER TO (THIS.nOdometer)
		  SET TALK NOWINDOW
		  SET TALK ON
		  IF THIS.lShowInStatusbar
		    SET STATUS BAR ON
		  ELSE
		    SET STATUS BAR OFF
		  ENDIF
		
	ENDPROC

ENDDEFINE

DEFINE CLASS cmhelpkeyeditor AS cmbinarykeyeditorabstract OF "cmregkey.vcx" 		&& External Binary key value editor class for "Help" keys
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "codemine.h"
	*<DefinedPropArrayMethod>
		*m: defaultkeyproperties		&& Establish default key properties when datatype is changed.
		*m: editvalue		&& Call editor form to edit key value.
		*p: crequiredcategory
		*p: lnoreplicate
	*</DefinedPropArrayMethod>

	crequiredcategory = Message.Help Messages
	lnoreplicate = .T.
	Name = "cmhelpkeyeditor"
	
	PROCEDURE defaultkeyproperties		&& Establish default key properties when datatype is changed.
		LPARAMETERS oProperties
		*++
		*>>Establish default key properties when datatype is changed.
		* Called from keyedit only.
		*--
		  * Default to administrator access for messages
		  m.oProperties.nAccess = KEY_ACCESS_ADMIN
		  IF EMPTY(m.oProperties.cDescription)
		    m.oProperties.cDescription = 'Help Message'
		  ENDIF
		
	ENDPROC

	PROCEDURE editvalue		&& Call editor form to edit key value.
		LPARAMETERS oProperties
		*++
		*>>Call editor form to edit key value.
		* Called from regedit only. Returns .T. if value changed.
		*--
		LOCAL oEditor
		
		  * The key value contains packed help text properties. Pass it along with the 
		  * key name and description to the editor form.
		  m.oEditor = CreateLocalized('frmHelpKeyEditor', ;
		                m.oProperties.cValue, m.oProperties.cLocName, m.oProperties.cDescription)
		  m.oEditor.Show(1)
		
		  * Retrieve modified properties from the editor form, and release it.
		  IF VARTYPE(m.oEditor) = 'O' AND m.oEditor.uValue
		    m.oProperties.cValue = m.oEditor.cKeyValue
		    m.oProperties.cDescription = m.oEditor.cDescription
		    m.oEditor.Release()
		    RETURN .T.
		  ENDIF
		  RETURN .F.
		
	ENDPROC

ENDDEFINE

DEFINE CLASS cmlanguagekeyeditor AS cmbinarykeyeditorabstract OF "cmregkey.vcx" 		&& External Binary key value editor class for Language keys
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "codemine.h"
	*<DefinedPropArrayMethod>
		*m: defaultkeyproperties		&& Establish default key properties when datatype is changed.
		*m: deletekey		&& Called before key is deleted. Return .T. if ok to delete.
		*m: deletetranslations		&& Delete the specified language translation for all message and help keys.
		*m: editvalue		&& Call editor form to edit key value.
		*p: crequiredcategory
		*p: lnoreplicate
	*</DefinedPropArrayMethod>

	crequiredcategory = Message.Languages
	lnoreplicate = .T.
	Name = "cmlanguagekeyeditor"
	
	PROCEDURE defaultkeyproperties		&& Establish default key properties when datatype is changed.
		LPARAMETERS oProperties
		*++
		*>>Establish default key properties when datatype is changed.
		* Called from keyedit only.
		*--
		  * Default to administratorr only access for languages
		  m.oProperties.nAccess = KEY_ACCESS_ADMIN
		
	ENDPROC

	PROCEDURE deletekey		&& Called before key is deleted. Return .T. if ok to delete.
		LPARAMETERS oProperties
		*++
		*>>Called before key is deleted. Return .T. if ok to delete.
		* Also called if key type or external type is changed.
		* Called from regedit and keyedit.
		*--
		LOCAL nSelect, lDeleteOK, cLangID, cLocName, nRecno, oLanguage, oMessage
		
		  * Delete all message translations along with the language.
		  m.oMessage = FindGlobalObject('cmMessage', '2.0', .T.)
		
		  * Dont't allow deletion of current language.
		  m.oLanguage = CreateNewObject('cmLanguageValue')
		  m.oLanguage.Scatter(m.oProperties.cValue)
		  m.cLangID = m.oLanguage.cLanguageID
		  IF NOT EMPTY(m.cLangID)
		    IF m.cLangID == m.oMessage.cLanguageID
		      RETURN m.oMessage.Warning('You cannot delete "\c" because it is the current language', m.oProperties.cLocName)
		    ENDIF
		
		    * Delete all message key translations for this language.
		    m.nSelect = SELECT()
		    m.nRecno = RECNO()
		    SELECT localRegistry
		
		    * Make sure no other language is based on this one.
		    m.lDeleteOK = .T.
		    SCAN FOR UPPER(LEFT(keyName,18)) == 'MESSAGE.LANGUAGES.' AND type = KEY_TYPE_BINARY AND TRIM(shortValue) == 'Language'
		      m.oLanguage.Scatter(Value)
		      IF m.oLanguage.cParentLanguageID == m.cLangID
		        m.cLocName = TRIM(SUBSTR(locname, RAT('.', locname, 2) + 1))
		        m.cLocName = LEFT(m.cLocName, LEN(m.cLocName) - 1)
		        m.oMessage.Warning('You cannot delete "\c" because "\c" is based on it.', ;
		              m.oProperties.cLocName, m.cLocName)
		        m.lDeleteOK = .F.
		        EXIT
		      ENDIF
		    ENDSCAN
		    
		    IF m.lDeleteOK
		      SELECT Registry
		      THIS.DeleteTranslations(m.cLangID)
		      SELECT localRegistry
		      THIS.DeleteTranslations(m.cLangID)
		    ENDIF
		
		    * Restore original workarea and record number.
		    SELECT (m.nSelect)
		    IF m.nRecno <= RECCOUNT()
		      GOTO (m.nRecno)
		    ENDIF
		  ENDIF
		  RETURN m.lDeleteOK
		
	ENDPROC

	PROCEDURE deletetranslations		&& Delete the specified language translation for all message and help keys.
		LPARAMETERS cLanguageID
		*++
		*>>Delete the specified language translation for all message and help keys.
		*--
		LOCAL oMsgValue, oHlpValue
		  * Process all message keys
		  m.oMsgValue = CreateNewObject('cmMessageValue')
		  SCAN FOR type = KEY_TYPE_BINARY AND PROPER(TRIM(shortValue)) == 'Message'
		    m.oMsgValue.Scatter(value)
		    m.oMsgValue.DeleteText(m.cLanguageID)
		    REPLACE value WITH m.oMsgValue.Gather()
		  ENDSCAN
		
		  * Process all Help keys
		  m.oHlpValue = CreateNewObject('cmHelpValue')
		  SCAN FOR type = KEY_TYPE_BINARY AND PROPER(TRIM(shortValue)) == 'Helptext'
		    m.oHlpValue.Scatter(value, .T.)
		    m.oHlpValue.DeleteText(m.cLanguageID)
		    REPLACE value WITH m.oHlpValue.Gather()
		  ENDSCAN
		
	ENDPROC

	PROCEDURE editvalue		&& Call editor form to edit key value.
		LPARAMETERS oProperties
		*++
		*>>Call editor form to edit key value.
		* Called from regedit only. Returns .T. if value changed.
		*--
		LOCAL oEditor
		
		  m.oEditor = CreateLocalized('frmLanguageKeyEditor', ;
		                                  m.oProperties.cValue, m.oProperties.cLocName)
		  m.oEditor.Show(1)
		
		  * Retrieve modified properties from the editor form, and release it.
		  IF VARTYPE(m.oEditor) = 'O' AND m.oEditor.uValue
		    m.oProperties.cValue = m.oEditor.cKeyValue
		    m.oEditor.Release()
		    RETURN .T.
		  ENDIF
		  RETURN .F.
		
	ENDPROC

ENDDEFINE

DEFINE CLASS cmmessagekeyeditor AS cmbinarykeyeditorabstract OF "cmregkey.vcx" 		&& External Binary key value editor class for Message keys
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "codemine.h"
	*<DefinedPropArrayMethod>
		*m: defaultkeyproperties		&& Establish default key properties when datatype is changed.
		*m: editvalue		&& Call editor form to edit a message key value.
		*p: crequiredcategory
		*p: lnoreplicate
	*</DefinedPropArrayMethod>

	crequiredcategory = Message.
	lnoreplicate = .T.
	Name = "cmmessagekeyeditor"
	
	PROCEDURE defaultkeyproperties		&& Establish default key properties when datatype is changed.
		LPARAMETERS oProperties
		*++
		*>>Establish default key properties when datatype is changed.
		* Called from keyedit only.
		*--
		  * Default to administrator access for messages
		  m.oProperties.nAccess = KEY_ACCESS_ADMIN
		
	ENDPROC

	PROCEDURE editvalue		&& Call editor form to edit a message key value.
		LPARAMETERS oProperties
		*++
		*>>Call editor form to edit a message key value.
		* Called from regedit only. Returns .T. if value changed.
		*--
		LOCAL oEditor
		
		  * The key value contains packed group properties. Pass it along with the 
		  * key name and description to the editor form.
		  m.oEditor = CreateLocalized('frmMessageKeyEditor', m.oProperties.cValue, ;
		                   m.oProperties.cLocName, m.oProperties.cDescription, m.oProperties.cCategory)
		  m.oEditor.Show(1)
		
		  * Retrieve modified properties from the editor form, and release it.
		  IF VARTYPE(m.oEditor) = 'O' AND m.oEditor.uValue
		    m.oProperties.cValue = m.oEditor.cKeyValue
		    m.oProperties.cDescription = m.oEditor.cDescription
		    m.oEditor.Release()
		    RETURN .T.
		  ENDIF
		  RETURN .F.
		
	ENDPROC

ENDDEFINE

DEFINE CLASS frmabout AS frmformcustom OF "..\custom\cforms.vcx" 		&& Common About dialog foundation class.
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="pgfPageframe" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfPageframe.Page1.lblOrg" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfPageframe.Page1.lblCopyright" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfPageframe.Page1.lblProductName" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfPageframe.Page1.Lbllabel8" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfPageframe.Page1.lblWinVersion" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfPageframe.Page1.Lbllabel9" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfPageframe.Page1.Lbllabel12" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfPageframe.Page2.lblCompany" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfPageframe.Page2.lblAddr1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfPageframe.Page2.lblAddr2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfPageframe.Page2.lblPhone" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfPageframe.Page2.lblWeb" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfPageframe.Page2.lblEmail" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfPageframe.Page3.lblDiskspace" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfPageframe.Page3.Shpshape1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfPageframe.Page3.lblFreeDisk" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfPageframe.Page3.Lbllabel1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfPageframe.Page3.Lbllabel2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfPageframe.Page3.Lbllabel4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfPageframe.Page3.lblRegpath" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfPageframe.Page3.Lbllabel3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfPageframe.Page3.Lbllabel5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfPageframe.Page3.Lbllabel6" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfPageframe.Page3.Lbllabel7" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfPageframe.Page3.lblMemPool" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfPageframe.Page3.lblFreeMem" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfPageframe.Page3.Lbllabel10" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfPageframe.Page3.Lbllabel11" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cmdcommandbutton1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cmdok" UniqueID="" Timestamp="" />

	#INCLUDE "codemine.h"
	*<DefinedPropArrayMethod>
		*p: cinfopath		&& Path to msinfo32.exe
	*</DefinedPropArrayMethod>

	Caption = "About"
	cinfopath = 		&& Path to msinfo32.exe
	Closable = .F.
	ControlBox = .F.
	Desktop = .T.
	DoCreate = .T.
	Height = 219
	MinButton = .F.
	MinHeight = (THIS.Height)
	MinWidth = (THIS.Width)
	Name = "frmabout"
	ShowWindow = 1
	Width = 434
	WindowType = 1
	ZoomBox = .T.

	ADD OBJECT 'Cmdcommandbutton1' AS cmdcommandbuttoncustom WITH ;
		Caption = "System Info...", ;
		creposition = vFollow,hFollow, ;
		Height = 23, ;
		Left = 342, ;
		Name = "Cmdcommandbutton1", ;
		TabIndex = 3, ;
		Top = 192, ;
		Width = 84
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'Cmdok' AS cmdokcustom WITH ;
		Cancel = .T., ;
		creposition = vFollow,hCenter, ;
		Left = 179, ;
		Name = "Cmdok", ;
		TabIndex = 2, ;
		Top = 192
		*< END OBJECT: ClassLib="..\custom\cbutton.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'pgfPageframe' AS pgfpageframecustom WITH ;
		creposition = vStretch,hStretch, ;
		ErasePage = .T., ;
		Height = 179, ;
		Left = 7, ;
		Name = "pgfPageframe", ;
		PageCount = 3, ;
		TabIndex = 1, ;
		TabStop = .F., ;
		TabStyle = 1, ;
		Top = 6, ;
		Width = 420, ;
		ZOrderSet = 0, ;
		Page1.Caption = "Registration", ;
		Page1.Name = "Page1", ;
		Page2.Caption = "Contact Info", ;
		Page2.Name = "Page2", ;
		Page3.Caption = "File Paths", ;
		Page3.Name = "Page3"
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="pageframe" />

	ADD OBJECT 'pgfPageframe.Page1.lblCopyright' AS lbltextcustom WITH ;
		Alignment = 2, ;
		AutoSize = .F., ;
		Caption = "©Copyright Notice", ;
		creposition = hCenter, ;
		FontBold = .F., ;
		FontSize = 7, ;
		Height = 12, ;
		Left = 43, ;
		Name = "lblCopyright", ;
		Top = 130, ;
		Width = 330
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'pgfPageframe.Page1.Lbllabel12' AS lbltextcustom WITH ;
		AutoSize = .F., ;
		Caption = "FoxPro Version", ;
		creposition = hStretch, ;
		FontSize = 8, ;
		Height = 27, ;
		Left = 81, ;
		Name = "Lbllabel12", ;
		Top = 98, ;
		Width = 334, ;
		WordWrap = .T.
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'pgfPageframe.Page1.Lbllabel8' AS lblfieldlabelcustom WITH ;
		Alignment = 1, ;
		AutoSize = .F., ;
		Caption = "OS Version:", ;
		FontBold = .F., ;
		FontItalic = .T., ;
		FontSize = 8, ;
		Height = 17, ;
		Left = 10, ;
		Name = "Lbllabel8", ;
		Top = 83, ;
		Width = 66
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'pgfPageframe.Page1.Lbllabel9' AS lblfieldlabelcustom WITH ;
		Alignment = 1, ;
		AutoSize = .F., ;
		Caption = "VFP Version:", ;
		FontBold = .F., ;
		FontItalic = .T., ;
		FontSize = 8, ;
		Height = 17, ;
		Left = 3, ;
		Name = "Lbllabel9", ;
		Top = 98, ;
		Width = 73
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'pgfPageframe.Page1.lblOrg' AS lbltextcustom WITH ;
		AutoSize = .F., ;
		Caption = "", ;
		creposition = hStretch, ;
		FontSize = 8, ;
		Height = 16, ;
		Left = 90, ;
		Name = "lblOrg", ;
		Top = 62, ;
		Width = 308
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'pgfPageframe.Page1.lblProductName' AS lbllabelcustom WITH ;
		Alignment = 2, ;
		AutoSize = .F., ;
		Caption = "Application Name (Version)", ;
		creposition = hCenter, ;
		FontBold = .T., ;
		FontItalic = .T., ;
		FontSize = 12, ;
		Height = 19, ;
		Left = 9, ;
		Name = "lblProductName", ;
		Top = 9, ;
		Width = 397
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'pgfPageframe.Page1.lblWinVersion' AS lbltextcustom WITH ;
		AutoSize = .F., ;
		Caption = "Windows Version", ;
		creposition = hStretch, ;
		FontSize = 8, ;
		Height = 18, ;
		Left = 81, ;
		Name = "lblWinVersion", ;
		Top = 83, ;
		Width = 311
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'pgfPageframe.Page2.lblAddr1' AS lbltextcustom WITH ;
		Alignment = 2, ;
		AutoSize = .F., ;
		Caption = "Address Line 1", ;
		creposition = hCenter, ;
		FontBold = .F., ;
		FontSize = 8, ;
		Height = 17, ;
		Left = 99, ;
		Name = "lblAddr1", ;
		Top = 42, ;
		Width = 218
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'pgfPageframe.Page2.lblAddr2' AS lbltextcustom WITH ;
		Alignment = 2, ;
		AutoSize = .F., ;
		Caption = "Address Line 2", ;
		creposition = hCenter, ;
		FontBold = .F., ;
		FontSize = 8, ;
		Height = 17, ;
		Left = 96, ;
		Name = "lblAddr2", ;
		Top = 56, ;
		Width = 224
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'pgfPageframe.Page2.lblCompany' AS lbllabelcustom WITH ;
		Alignment = 2, ;
		AutoSize = .F., ;
		Caption = "Company Name", ;
		creposition = hCenter, ;
		FontBold = .T., ;
		FontItalic = .T., ;
		FontName = "Times New Roman", ;
		FontSize = 16, ;
		Height = 25, ;
		Left = 92, ;
		Name = "lblCompany", ;
		Top = 15, ;
		Width = 232
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'pgfPageframe.Page2.lblEmail' AS lbltextcustom WITH ;
		Alignment = 2, ;
		AutoSize = .F., ;
		Caption = "Email Address", ;
		creposition = hCenter, ;
		FontBold = .F., ;
		FontSize = 9, ;
		Height = 17, ;
		Left = 63, ;
		Name = "lblEmail", ;
		Top = 123, ;
		Width = 285
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'pgfPageframe.Page2.lblPhone' AS lbltextcustom WITH ;
		Alignment = 2, ;
		AutoSize = .F., ;
		Caption = "Phone / Fax", ;
		creposition = hCenter, ;
		FontBold = .F., ;
		FontSize = 9, ;
		Height = 17, ;
		Left = 59, ;
		Name = "lblPhone", ;
		Top = 90, ;
		Width = 291
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'pgfPageframe.Page2.lblWeb' AS lbltextcustom WITH ;
		Alignment = 2, ;
		AutoSize = .F., ;
		Caption = "web Address", ;
		creposition = hCenter, ;
		FontBold = .F., ;
		FontSize = 9, ;
		Height = 17, ;
		Left = 62, ;
		Name = "lblWeb", ;
		Top = 107, ;
		Width = 285
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'pgfPageframe.Page3.lblDiskspace' AS lbltextcustom WITH ;
		AutoSize = .F., ;
		Caption = "Diskspace", ;
		FontSize = 8, ;
		Height = 17, ;
		Left = 127, ;
		Name = "lblDiskspace", ;
		Top = 101, ;
		Width = 73
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'pgfPageframe.Page3.lblFreeDisk' AS lbltextcustom WITH ;
		AutoSize = .F., ;
		Caption = "Freespace", ;
		FontSize = 8, ;
		Height = 17, ;
		Left = 127, ;
		Name = "lblFreeDisk", ;
		Top = 116, ;
		Width = 73
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'pgfPageframe.Page3.lblFreeMem' AS lbltextcustom WITH ;
		AutoSize = .F., ;
		Caption = "Freemem", ;
		creposition = hFollow, ;
		FontSize = 8, ;
		Height = 17, ;
		Left = 315, ;
		Name = "lblFreeMem", ;
		Top = 117, ;
		Width = 73
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'pgfPageframe.Page3.Lbllabel1' AS lbltextcustom WITH ;
		AutoSize = .F., ;
		Caption = "Path", ;
		creposition = hStretch, ;
		FontSize = 8, ;
		Height = 41, ;
		Left = 78, ;
		Name = "Lbllabel1", ;
		Top = 45, ;
		Width = 334, ;
		WordWrap = .T.
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'pgfPageframe.Page3.Lbllabel10' AS lblfieldlabelcustom WITH ;
		Caption = "Memory Pool:", ;
		creposition = hFollow, ;
		FontBold = .F., ;
		FontItalic = .T., ;
		FontSize = 8, ;
		Height = 17, ;
		Left = 227, ;
		Name = "Lbllabel10", ;
		Top = 101, ;
		Width = 83
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'pgfPageframe.Page3.Lbllabel11' AS lblfieldlabelcustom WITH ;
		Caption = "Free Memory:", ;
		creposition = hFollow, ;
		FontBold = .F., ;
		FontItalic = .T., ;
		FontSize = 8, ;
		Height = 17, ;
		Left = 227, ;
		Name = "Lbllabel11", ;
		Top = 116, ;
		Width = 83
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'pgfPageframe.Page3.Lbllabel2' AS lbltextcustom WITH ;
		AutoSize = .F., ;
		Caption = "DefaultDir", ;
		creposition = hStretch, ;
		FontSize = 8, ;
		Height = 16, ;
		Left = 78, ;
		Name = "Lbllabel2", ;
		Top = 29, ;
		Width = 334
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'pgfPageframe.Page3.Lbllabel3' AS lblfieldlabelcustom WITH ;
		Caption = "Search Path:", ;
		FontBold = .F., ;
		FontItalic = .T., ;
		FontSize = 8, ;
		Height = 17, ;
		Left = 5, ;
		Name = "Lbllabel3", ;
		Top = 45, ;
		Width = 67
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'pgfPageframe.Page3.Lbllabel4' AS lblfieldlabelcustom WITH ;
		Caption = "App Registry:", ;
		FontBold = .F., ;
		FontItalic = .T., ;
		FontSize = 8, ;
		Height = 17, ;
		Left = 5, ;
		Name = "Lbllabel4", ;
		Top = 13, ;
		Width = 67
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'pgfPageframe.Page3.Lbllabel5' AS lblfieldlabelcustom WITH ;
		Caption = "Default Path:", ;
		FontBold = .F., ;
		FontItalic = .T., ;
		FontSize = 8, ;
		Height = 17, ;
		Left = 5, ;
		Name = "Lbllabel5", ;
		Top = 29, ;
		Width = 67
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'pgfPageframe.Page3.Lbllabel6' AS lblfieldlabelcustom WITH ;
		Caption = "Total Disk Space:", ;
		FontBold = .F., ;
		FontItalic = .T., ;
		FontSize = 8, ;
		Height = 17, ;
		Left = 31, ;
		Name = "Lbllabel6", ;
		Top = 101, ;
		Width = 91
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'pgfPageframe.Page3.Lbllabel7' AS lblfieldlabelcustom WITH ;
		Caption = "Free Disk Space:", ;
		FontBold = .F., ;
		FontItalic = .T., ;
		FontSize = 8, ;
		Height = 17, ;
		Left = 31, ;
		Name = "Lbllabel7", ;
		Top = 116, ;
		Width = 91
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'pgfPageframe.Page3.lblMemPool' AS lbltextcustom WITH ;
		AutoSize = .F., ;
		Caption = "Mempool", ;
		creposition = hFollow, ;
		FontSize = 8, ;
		Height = 17, ;
		Left = 315, ;
		Name = "lblMemPool", ;
		Top = 101, ;
		Width = 73
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'pgfPageframe.Page3.lblRegpath' AS lbltextcustom WITH ;
		AutoSize = .F., ;
		Caption = "<None>", ;
		creposition = hStretch, ;
		FontSize = 8, ;
		Height = 17, ;
		Left = 79, ;
		Name = "lblRegpath", ;
		Top = 13, ;
		Width = 333
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'pgfPageframe.Page3.Shpshape1' AS shpshapecustom WITH ;
		BackStyle = 0, ;
		creposition = hStretch,vStretch, ;
		Height = 45, ;
		Left = 14, ;
		Name = "Shpshape1", ;
		Top = 94, ;
		Width = 388, ;
		ZOrderSet = 2
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="shape" />
	
	PROCEDURE Cmdcommandbutton1.Click
		LOCAL cPath
		
		IF NOT EMPTY(THISFORM.cInfoPath)
		  m.cPath = THISFORM.cInfoPath
		  RUN /n &cPath
		ENDIF
		
	ENDPROC

	PROCEDURE Cmdcommandbutton1.Init
		LOCAL cPath
		  DODEFAULT()
		  m.cPath = ''
		  IF cmRegGetValue(HKEY_LOCAL_MACHINE, 'Software\Microsoft\Windows\CurrentVersion\App Paths\MSInfo32.exe\Path', @m.cPath)
		    m.cPath = ALLTRIM(STRTRAN(m.cPath, '"', ''))
		    IF NOT UPPER(RIGHT(m.cPath, 4)) == '.EXE'
		      m.cPath = STRTRAN(m.cPath,';','') + '\msinfo32.exe'
		    ENDIF
		    THISFORM.cInfoPath = '"' + m.cPath + '"'
		  ENDIF
		  THIS.lEnabled = NOT EMPTY(THISFORM.cInfoPath) AND FILE(THISFORM.cInfoPath)
		
	ENDPROC

	PROCEDURE pgfPageframe.Page1.Lbllabel12.Init
		LOCAL nBreak, cValue
		
		  m.cValue = VERSION(1)
		  m.nBreak = AT(']', m.cValue)
		  IF m.nBreak > 0
		    m.cValue = LEFT(m.cValue, m.nBreak) + CR_LF + SUBSTR(m.cValue, m.nBreak + 1)
		  ENDIF
		  THIS.Caption = m.cValue
		  RETURN DODEFAULT()
		
	ENDPROC

	PROCEDURE pgfPageframe.Page1.lblOrg.Init
		LOCAL cValue
		IF cmRegGetValue(HKEY_LOCAL_MACHINE, THISFORM.cSysregRoot + '\RegisteredOrganization', @m.cValue)
		  THIS.Caption = m.cValue
		ENDIF
		
	ENDPROC

	PROCEDURE pgfPageframe.Page1.lblWinVersion.Init
		LOCAL cValue, cValue2
		IF cmRegGetValue(HKEY_LOCAL_MACHINE, 'Software\Microsoft\Windows\CurrentVersion\ProductName', @m.cValue)
		  cmRegGetValue(HKEY_LOCAL_MACHINE, 'Software\Microsoft\Windows\CurrentVersion\VersionNumber', @m.cValue2)
		ELSE
		  IF cmRegGetValue(HKEY_LOCAL_MACHINE, 'Software\Microsoft\Windows NT\CurrentVersion\ProductName', @m.cValue)
		    * CSDVersion is the latest Service Pack installed. This key may not exist if no service packs installed.
		    cmRegGetValue(HKEY_LOCAL_MACHINE, 'Software\Microsoft\Windows NT\CurrentVersion\CSDVersion', @m.cValue2)
		  ENDIF
		ENDIF
		
		IF NOT EMPTY(m.cValue)
		  THIS.Caption = m.cValue + IIF(EMPTY(m.cValue2), '', ' (' + m.cValue2 + ')')
		ENDIF
		RETURN DODEFAULT()
		
	ENDPROC

	PROCEDURE pgfPageframe.Page1.RightClick
		THIS.Parent.RightClick(.T.)    && Call parent method for context menu support
		
	ENDPROC

	PROCEDURE pgfPageframe.Page2.RightClick
		THIS.Parent.RightClick(.T.)    && Call parent method for context menu support
		
	ENDPROC

	PROCEDURE pgfPageframe.Page3.lblDiskspace.Init
		THIS.Caption = LTRIM(STR(ROUND(val(sys(2020))/(1024*1024), 1),6,1)) + ' MB'
		RETURN DODEFAULT()
		
	ENDPROC

	PROCEDURE pgfPageframe.Page3.lblFreeDisk.Init
		THIS.Caption = LTRIM(STR(ROUND(DISKSPACE()/1048576, 1),6,1)) + ' MB'
		RETURN DODEFAULT()
		
	ENDPROC

	PROCEDURE pgfPageframe.Page3.lblFreeMem.Init
		THIS.Caption = LTRIM(STR(ROUND((VAL(SYS(1001))-VAL(SYS(1016)))/(1024*1024), 1),6,1)) + ' MB'
		RETURN DODEFAULT()
		
	ENDPROC

	PROCEDURE pgfPageframe.Page3.Lbllabel1.Init
		THIS.Caption = LEFT(PROPER(STRTRAN(LOWER(SET('PATH')), ',', ', ')), 250)  && Don't exceed max length
		RETURN DODEFAULT()
		
	ENDPROC

	PROCEDURE pgfPageframe.Page3.Lbllabel2.Init
		THIS.Caption = PROPER(SYS(5)+SYS(2003))
		RETURN DODEFAULT()
		
	ENDPROC

	PROCEDURE pgfPageframe.Page3.lblMemPool.Init
		THIS.Caption = LTRIM(STR(ROUND(val(SYS(1001))/(1024*1024), 1),6,1)) + ' MB'
		RETURN DODEFAULT()
		
	ENDPROC

	PROCEDURE pgfPageframe.Page3.lblRegpath.Init
		LOCAL oRegistry
		m.oRegistry = FindGlobalObject('cmRegistry')
		IF NOT ISNULL(m.oRegistry)
		  THIS.Caption = PROPER(m.oRegistry.GetRegistryPath())
		ENDIF
		RETURN DODEFAULT()
		
	ENDPROC

	PROCEDURE pgfPageframe.Page3.RightClick
		THIS.Parent.RightClick(.T.)    && Call parent method for context menu support
		
	ENDPROC

ENDDEFINE

DEFINE CLASS frmconfirm AS frmmodaldialogcustom OF "..\custom\cforms.vcx" 		&& Confirmation dialog form.
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="lblText" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdMore" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="imgIcon" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="edtExplain" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdDebug" UniqueID="" Timestamp="" />

	#INCLUDE "codemine.h"
	*<DefinedPropArrayMethod>
		*m: centerbuttons		&& Center the visible buttons horizontaly in the display.
		*p: ndefault		&& Number of default button.
		*a: abuttons[1,0]		&& Array of control button objects.
	*</DefinedPropArrayMethod>

	Caption = "Confirm"
	cbindingmanagerclass = cmBindingManager
	Desktop = .T.
	DoCreate = .T.
	FontBold = .F.
	FontSize = 9
	Height = 94
	Icon = ..\ampro\
	lcloseonescape = .T.
	lreleaseonclose = .F.
	lrememberposition = .F.
	lremembersize = .F.
	lwindowmenu = .F.
	MinWidth = 300
	MousePointer = 1
	Name = "frmconfirm"
	ndefault = 1		&& Number of default button.
	oapp = .F.
	ostatemanager = .F.
	ShowWindow = 1
	uvalue = .F.
	Width = 506
	ZoomBox = .F.

	ADD OBJECT 'cmdDebug' AS commandbutton WITH ;
		Caption = "Debugger", ;
		FontSize = 8, ;
		Height = 23, ;
		Left = 7, ;
		Name = "cmdDebug", ;
		TabStop = .F., ;
		Top = 65, ;
		Visible = .F., ;
		Width = 80
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'cmdMore' AS cmdcommandbuttoncustom WITH ;
		Caption = "Explain >>", ;
		creposition = HFollow, ;
		Height = 23, ;
		Left = 417, ;
		llocalizecaption = .T., ;
		MousePointer = 1, ;
		Name = "cmdMore", ;
		TabIndex = 50, ;
		Top = 65, ;
		Visible = .F., ;
		Width = 80
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'edtExplain' AS editbox WITH ;
		Height = 68, ;
		Left = 7, ;
		Name = "edtExplain", ;
		ReadOnly = .T., ;
		TabStop = .F., ;
		Top = 96, ;
		Width = 491
		*< END OBJECT: BaseClass="editbox" />

	ADD OBJECT 'imgIcon' AS imgimagecustom WITH ;
		BackStyle = 0, ;
		Height = 32, ;
		Left = 9, ;
		MousePointer = 1, ;
		Name = "imgIcon", ;
		Top = 9, ;
		Width = 32
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="image" />

	ADD OBJECT 'lblText' AS lbltextcustom WITH ;
		AutoSize = .F., ;
		BackStyle = 0, ;
		Caption = "???", ;
		creposition = HSTRETCH, ;
		FontBold = .F., ;
		FontSize = 9, ;
		Height = 46, ;
		Left = 51, ;
		MousePointer = 1, ;
		Name = "lblText", ;
		TabIndex = 1, ;
		Top = 9, ;
		Width = 453, ;
		WordWrap = .T.
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />
	
	PROCEDURE beforeclose
		LPARAMETER nReason
		
		* Anything not handled here keeps default value set in init method.
		DO CASE
		  CASE m.nReason = CLOSE_BY_OK
		    THISFORM.uValue = .T.
		  CASE m.nReason = CLOSE_BY_NO
		    THISFORM.uValue = .F.
		ENDCASE
		
	ENDPROC

	PROCEDURE centerbuttons		&& Center the visible buttons horizontaly in the display.
		LOCAL ix, nSpace, nWidth
		
		IF TYPE('THISFORM.aButtons[1].Name') = 'C'
		  m.nSpace = 8
		  m.nWidth = 0
		  THIS.LockScreen = .T.
		
		  FOR ix = 1 TO ALEN(THIS.aButtons)
		    m.nWidth = m.nWidth + THIS.aButtons[m.ix].Width
		    THIS.aButtons[m.ix].Top = THIS.cmdMore.Top
		    THIS.aButtons[m.ix].Visible = .T.
		    IF m.ix = THIS.nDefault
		      THIS.aButtons[m.ix].Default = .T.
		    ENDIF
		  ENDFOR
		  m.nWidth = m.nWidth + (m.nSpace * ALEN(THIS.aButtons) - 1)
		
		  THIS.aButtons[1].Left = INT((THISFORM.Width - m.nWidth) / 2)
		  FOR ix = 2 TO ALEN(THIS.aButtons)
		    THIS.aButtons[m.ix].Left = THIS.aButtons[m.ix - 1].Left + THIS.aButtons[m.ix - 1].Width + m.nSpace
		  ENDFOR
		  THIS.LockScreen = .F.
		ENDIF
		
	ENDPROC

	PROCEDURE Destroy
		* Release references to buttons.
		THIS.aButtons = .F.
		DODEFAULT()
		
	ENDPROC

	PROCEDURE Init
		LPARAMETER cTitle, cText, cLongText, nType, nIcon, nDefault, lBeep
		LOCAL nSound
		#include ..\common\win32.h
		
		  * Generate Defaults for parameters
		  IF NOT EMPTY(m.cTitle) AND VARTYPE(m.cTitle) = 'C'
		    THIS.Caption = m.cTitle
		  ENDIF
		  IF NOT EMPTY(m.cText) AND VARTYPE(m.cText) = 'C'
		    THIS.lblText.Caption = m.cText
		  ENDIF
		  IF NOT EMPTY(m.cLongText) AND VARTYPE(m.cLongText) = 'C'
		    THIS.edtExplain.Value = m.cLongText
		  ENDIF
		  IF EMPTY(m.nType)
		    m.nType = MSG_DIALOG_CONFIRM_OK
		  ENDIF
		  IF EMPTY(m.nIcon)
		    m.nIcon = MSG_SEVERITY_INFORM
		  ENDIF
		  IF NOT EMPTY(m.nDefault)
		    THISFORM.nDefault = m.nDefault
		  ENDIF
		
		  DO CASE
		    CASE m.nType = MSG_DIALOG_CONFIRM_OKC
		      DIMENSION THIS.aButtons[2]
		      THIS.AddObject('cmdOK', 'cmdOKcustom')
		      THIS.AddObject('cmdCancel', 'cmdCancelCustom')
		      THIS.aButtons[1] = THIS.cmdOK
		      THIS.aButtons[2] = THIS.cmdCancel
		    CASE m.nType = MSG_DIALOG_CONFIRM_YN
		      DIMENSION THIS.aButtons[2]
		      THIS.AddObject('cmdYes', 'cmdYesCustom')
		      THIS.AddObject('cmdNo', 'cmdNoCustom')
		      THIS.aButtons[1] = THIS.cmdYes
		      THIS.aButtons[2] = THIS.cmdNo
		    CASE m.nType = MSG_DIALOG_CONFIRM_YNC
		      DIMENSION THIS.aButtons[3]
		      THIS.AddObject('cmdYes', 'cmdYesCustom')
		      THIS.AddObject('cmdNo', 'cmdNoCustom')
		      THIS.AddObject('cmdCancel', 'cmdCancelCustom')
		      THIS.aButtons[1] = THIS.cmdYes
		      THIS.aButtons[2] = THIS.cmdNo
		      THIS.aButtons[3] = THIS.cmdCancel
		      THISFORM.uValue = .NULL.
		    CASE m.nType = MSG_DIALOG_CONFIRM_RC
		      DIMENSION THIS.aButtons[2]
		      THIS.AddObject('cmdRetry', 'cmdRetryCustom')
		      THIS.AddObject('cmdCancel', 'cmdCancelCustom')
		      THIS.aButtons[1] = THIS.cmdRetry
		      THIS.aButtons[2] = THIS.cmdCancel
		    OTHERWISE                             && CONFIRM_OK and Inform
		      DIMENSION THIS.aButtons[1]
		      THIS.AddObject('cmdOK', 'cmdOkCustom')
		      THIS.aButtons[1] = THIS.cmdOK
		      THIS.cmdOK.Cancel = .T.    && If ok is the only button, mnake it the escape button too.
		  ENDCASE
		
		  * Keep the more button at end of tab order
		  THISFORM.cmdMore.TabIndex = THISFORM.ControlCount
		
		  * Display the desired Icon.
		  DO CASE
		    CASE m.nIcon = MSG_SEVERITY_WARNING
		      m.nSound = MB_ICONEXCLAMATION
		      THIS.imgIcon.Picture='..\graphics\w95mbx3.bmp'
		    CASE m.nIcon = MSG_SEVERITY_QUESTION
		      m.nSound = MB_ICONQUESTION
		      THIS.imgIcon.Picture='..\graphics\w95mbx2.bmp'
		    CASE m.nIcon = MSG_SEVERITY_ERROR
		      m.nSound = MB_ICONHAND
		      THIS.imgIcon.Picture='..\graphics\w95mbx1.bmp'
		    OTHERWISE
		      m.nSound = MB_OK
		      THIS.imgIcon.Picture='..\graphics\w95mbx4.bmp'
		  ENDCASE
		
		  IF m.lBeep
		    DECLARE INTEGER MessageBeep IN user32 INTEGER nType
		    MessageBeep(m.nSound)
		  ENDIF
		
		  DODEFAULT()
		
		  * Enable the help button if there is a longText associated with this message.
		  IF NOT EMPTY(m.cLongText)
		    THIS.cmdMore.Visible = .T.
		  ENDIF
		
		  THIS.CenterButtons()
		
		  THIS.MinHeight = THIS.Height
		  THIS.MaxHeight = THIS.Height
		  THIS.MinWidth = THIS.Width
		
		  * Set Taborder of buttons, starting with nDefault. We can't use Setfocus here due to VFP bug.
		  m.nButton = THIS.nDefault
		  FOR ix = 1 TO ALEN(THIS.aButtons)
		    THIS.aButtons[m.nButton].TabIndex = m.ix
		    m.nButton = m.nButton + 1
		    IF m.nButton > ALEN(THIS.aButtons)
		      m.nButton = 1
		    ENDIF
		  ENDFOR
		  THIS.cmdMore.TabIndex = THIS.aButtons[ALEN(THIS.aButtons)].TabIndex + 1
		  THIS.edtExplain.TabIndex = THIS.cmdMore.TabIndex + 1
		
	ENDPROC

	PROCEDURE Resize
		frmForm::Resize
		THIS.CenterButtons()
		
	ENDPROC

	PROCEDURE cmdDebug.Click
		* Reference oApp by Global variable only, so dialog will work without checking for full codemine environment.
		IF VARTYPE(m.goApp) = 'O'
		  m.goApp.oStateManager.EnableInterrupts(.F., .T.)
		ENDIF
		THISFORM.Close(CLOSE_BY_OK)
		
		KEYBOARD "{F8}" PLAIN
		SET STEP ON 
		
	ENDPROC

	PROCEDURE cmdDebug.Init
		DODEFAULT()
		THIS.Visible = (VERSION(2) != 0)
		
	ENDPROC

	PROCEDURE cmdMore.Click
		LOCAL nBottomOffset
		
		* Make new bottom offset the same as left edge offset.
		m.nBottomOffset = THISFORM.edtExplain.Left
		THISFORM.MaxHeight = 500
		THISFORM.Height = THISFORM.edtExplain.Top + THISFORM.edtExplain.Height + m.nBottomOffset
		THISFORM.MinHeight = THISFORM.Height
		THISFORM.nOriginalHeight = THISFORM.Height
		
		THISFORM.edtExplain.nBottom = m.nBottomOffset
		THISFORM.edtExplain.Visible = .T.
		THISFORM.edtExplain.cReposition = 'vStretch,hStretch'
		
		THIS.Enabled = .F.
		
	ENDPROC

	PROCEDURE edtExplain.Init
		* This edit box we need the cReposition features of the codemine clas, but nothing else,
		* since we must avoid recursive calls to message dialog methods.
		THIS.BackColor = THISFORM.BackColor
		THIS.AddProperty('cReposition', 'hStretch')
		
	ENDPROC

	PROCEDURE edtExplain.KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		
		IF m.nKeyCode % 128 >= ASC(' ') OR m.nKeyCode = 7
		  NODEFAULT
		ENDIF
		
	ENDPROC

	PROCEDURE edtExplain.RightClick
		* Deffer to form context menu.
		THISFORM.RightClick()
		
	ENDPROC

ENDDEFINE

DEFINE CLASS frmdisplayhelp AS frmformcustom OF "..\custom\cforms.vcx" 		&& Context help display form
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="oleRichHelp" UniqueID="" Timestamp="" />

	#INCLUDE "codemine.h"
	*<DefinedPropArrayMethod>
		*m: showhelp		&& Display the rich text from the specified help keys in the help window.
		*p: lautoclose		&& Close automatically when any other window is activated.
	*</DefinedPropArrayMethod>

	Caption = "Help"
	cbindingmanagerclass = cmBindingManager
	cformbackground = .NULL.
	ControlBox = .T.
	Desktop = .T.
	DoCreate = .T.
	Height = 189
	Icon = ..\graphics\help.ico
	lautoclose = .T.		&& Close automatically when any other window is activated.
	lrememberposition = .T.
	lremembersize = .T.
	lwindowmenu = .F.
	Name = "frmdisplayhelp"
	omessage = .NULL.
	ShowTips = .T.
	ShowWindow = 1
	WhatsThisHelp = .F.
	Width = 515

	ADD OBJECT 'oleRichHelp' AS olerichtextbox WITH ;
		creadonlydisplay = Normal, ;
		creposition = vStretch,hStretch, ;
		Height = 188, ;
		Left = -1, ;
		lreadonly = .T., ;
		Name = "oleRichHelp", ;
		Top = 1, ;
		Width = 516
		*< END OBJECT: ClassLib="cmactivx.vcx" BaseClass="olecontrol" OLEObject="c:\windows\system\richtx32.ocx" Value="0M8R4KGxGuEAAAAAAAAAAAAAAAAAAAAAPgADAP7/CQAGAAAAAAAAAAAAAAABAAAAAQAAAAAAAAAAEAAAAgvbwBvAHQAIABFAG4AdAByAHkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWAAUA//////////8BAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGBi3HPahsEBAwAAAIABAAAAAAAAAwBPAGwAZQBPAGIAagBlAGMAdABEAGEAdABhAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4AAgEDAAAAAgAAAP////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfAAAAAAAAAADAEEAYwBjAGUAcwBzAE8AYgBqAFMAaQB0AGUARABhAHQAYQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJgACAP///////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAABPAAAAAAAAAAMAQwBoAGEAbgBnAGUAZABQAHIAbwBwAHMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcAAIA////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwgiHw7j9cbELm1BAIcAJQCIUM0EggAAABVNQAAbhMAACFDNBIBAAYAMAAAAAAAAQAAAAEAAQAAAAAAtEQAgB1GTwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAABcAAAA4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgcWhqIFp0dVFoYTtqZGZuW2lhZXRyIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAACADQAAAE1vdXNlUG9pbnRlcgAJAAAASQoAAAABAAAADAAAAFJpZ2h0TWFyZ2luABEAAABODQAAAAcAAAAAAAAAAAUAAIAAAAAAAQABAAMAAQABAAIAAgAAAANS4wuRj84RneMAqgBLuFEBAAAAkAGQXwEABUFyaWFsAAAAAAAAAACww0ALAAAAU2Nyb2xsQmFycwAJAAAASQoAAAADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABcZnBycTIgU3lzdGVtO317XGYzXGZuaWwgQXJpYWw7fX0NCntcY29sb3J0YmxccmVkMFxncmVlbjBcYmx1ZTA7fQ0KXGRlZmxhbmcxMDMzXHBhcmRccGxhaW5cZjNcZnMxOCANClxwYXIgfQ0KAAEAAACQAZBfAQAFQXJpYWwAAA==" />
	
	PROCEDURE contextmenubuild
		DODEFAULT()
		
		THISFORM.ContextMenuBar(CTX_BAR_CUSTOM, '\-')
		THISFORM.ContextMenuBar(CTX_BAR_CUSTOM + 1, '%barAutoClose')
		THISFORM.ContextMenuBar(CTX_BAR_CUSTOM + 2, '%barAlwaysOnTop')
		IF THIS.lAutoClose
		  SET MARK OF BAR CTX_BAR_CUSTOM + 1 OF ctxMenu TO .T.
		  SET SKIP OF BAR CTX_BAR_CUSTOM + 2 OF ctxMenu .T.
		ENDIF
		IF THIS.AlwaysOnTop
		  SET MARK OF BAR CTX_BAR_CUSTOM + 2 OF ctxMenu TO .T.
		ENDIF
		
	ENDPROC

	PROCEDURE contextmenuexecute
		LPARAMETER cOption
		*++
		* Process custom context menu items for this form.
		*--
		  m.cOption = PROPER(m.cOption)
		  DO CASE
		    CASE m.cOption = '%baralwaysontop'
		      THIS.AlwaysOnTop = NOT THIS.AlwaysOnTop
		
		    CASE m.cOption = '%barautoclose'
		      THIS.lAutoclose = NOT THIS.lAutoClose
		
		    OTHERWISE
		      DODEFAULT(m.cOption)
		  ENDCASE
		  RETURN .T.
		
	ENDPROC

	PROCEDURE Deactivate
		DODEFAULT()
		
		* If autoclose, release the window as soon as it is deactivated.
		IF THIS.lAutoClose AND (THISFORM.Desktop OR NOT UPPER(THIS.Name) == WONTOP())
		  THIS.Release()
		ENDIF
		
	ENDPROC

	PROCEDURE Destroy
		DODEFAULT()
		
		* Save current option settings
		cmRegSetInteger(HKEY_CURRENT_USER, THISFORM.cSysRegFormRoot  + '\AutoClose', IIF(THIS.lAutoClose, 1, 0))
		cmRegSetInteger(HKEY_CURRENT_USER, THISFORM.cSysRegFormRoot  + '\AlwaysOntop', IIF(THIS.AlwaysOntop, 1, 0))
		
	ENDPROC

	PROCEDURE Init
		LOCAL nAutoClose, nOntop
		
		IF DODEFAULT()
		  * Restore last-saved option settings
		  IF cmRegGetValue(HKEY_CURRENT_USER, THISFORM.cSysRegFormRoot  + '\AutoClose', @m.nAutoClose)
		    THIS.lAutoClose = NOT EMPTY(m.nAutoClose)
		  ENDIF
		  IF cmRegGetValue(HKEY_CURRENT_USER, THISFORM.cSysRegFormRoot  + '\AlwaysOntop', @m.nOntop)
		    THIS.AlwaysOntop = NOT EMPTY(m.nOntop)
		  ENDIF
		ENDIF
		
	ENDPROC

	PROCEDURE RightClick
		* Disable form context menu to avoid VFP bug that prevents form from closing
		RETURN .T.
		
	ENDPROC

	PROCEDURE showhelp		&& Display the rich text from the specified help keys in the help window.
		LPARAMETER cRichText, cTitle
		*++
		* Display the rich text from the specified list of help keys in the help window.
		*--
		  IF NOT EMPTY(m.cTitle)
		    THIS.Caption = m.cTitle
		    IF NOT ISNULL(THIS.oApp)
		      THIS.lWindowMenu = .T.   && Initially off for optimization
		      THIS.oApp.RebuildWindowPopup()
		    ENDIF
		  ENDIF
		  THIS.WindowState = 0   && Make sure window is not minimized.
		  THIS.oleRichHelp.TextRtf = m.cRichText
		  RETURN .T.
		
	ENDPROC

	PROCEDURE oleRichHelp.contextmenubuild
		RETURN THISFORM.ContextMenuBuild()
		
	ENDPROC

	PROCEDURE oleRichHelp.contextmenuexecute
		LPARAMETER cOption
		
		  THISFORM.ContextMenuExecute(m.cOption)
		
	ENDPROC

	PROCEDURE oleRichHelp.KeyPress
		LPARAMETERS nKeyascii
		  IF m.nKeyAscii = 27
		    * Another VFP bug - calling form.Release() here can cause GPF, so use a round-about way of closing form.
		    IF THISFORM.Desktop
		      KEYBOARD '{ALT+F4}' PLAIN
		    ELSE
		      KEYBOARD '{CTRL+F4}' PLAIN
		    ENDIF
		  ELSE
		    DODEFAULT(m.nKeyAscii)
		  ENDIF
		
	ENDPROC

ENDDEFINE

DEFINE CLASS frmgettext AS frmmodaldialogcustom OF "..\custom\cforms.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Cntokcancel1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="edtText" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblText" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdMore" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="imgIcon" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="edtExplain" UniqueID="" Timestamp="" />

	#INCLUDE "codemine.h"
	*<DefinedPropArrayMethod>
		*p: cvalue		&& Text string to return to caller.
	*</DefinedPropArrayMethod>

	Caption = "Enter Text"
	cvalue = 		&& Text string to return to caller.
	Desktop = .T.
	DoCreate = .T.
	Height = 110
	lreleaseonclose = .F.
	lrememberposition = .F.
	lremembersize = .F.
	MaxHeight = 110
	MinHeight = 110
	MinWidth = (THIS.Width - 50)
	MousePointer = 1
	Name = "frmgettext"
	ShowWindow = 1
	uvalue = .NULL.
	Width = 391

	ADD OBJECT 'cmdMore' AS cmdcommandbuttoncustom WITH ;
		Caption = "Explain >>", ;
		creposition = HFollow, ;
		Height = 23, ;
		Left = 304, ;
		llocalizecaption = .T., ;
		MousePointer = 1, ;
		Name = "cmdMore", ;
		TabIndex = 50, ;
		Top = 82, ;
		Visible = .F., ;
		Width = 80
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'Cntokcancel1' AS cntokcancelcustom WITH ;
		creposition = hCenter, ;
		Height = 27, ;
		Left = 113, ;
		MousePointer = 1, ;
		Name = "Cntokcancel1", ;
		TabIndex = 4, ;
		Top = 79, ;
		Width = 164, ;
		cmdcancel.Name = "cmdcancel", ;
		cmdok.Name = "cmdok"
		*< END OBJECT: ClassLib="..\custom\cbutton.vcx" BaseClass="container" />

	ADD OBJECT 'edtExplain' AS editbox WITH ;
		Height = 68, ;
		Left = 6, ;
		Name = "edtExplain", ;
		ReadOnly = .T., ;
		TabStop = .F., ;
		Top = 115, ;
		Width = 379
		*< END OBJECT: BaseClass="editbox" />

	ADD OBJECT 'edtText' AS edteditboxcustom WITH ;
		creposition = hStretch, ;
		cvaluesource = THISFORM.cValue, ;
		Height = 22, ;
		IntegralHeight = .F., ;
		Left = 7, ;
		lnoinitdata = .T., ;
		Name = "edtText", ;
		SelectOnEntry = .T., ;
		TabIndex = 1, ;
		Top = 48, ;
		Width = 377
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="editbox" />

	ADD OBJECT 'imgIcon' AS imgimagecustom WITH ;
		BackStyle = 0, ;
		Height = 32, ;
		Left = 8, ;
		MousePointer = 1, ;
		Name = "imgIcon", ;
		Top = 7, ;
		Width = 32
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="image" />

	ADD OBJECT 'lblText' AS lbltextcustom WITH ;
		AutoSize = .F., ;
		Caption = "Value:", ;
		creposition = HSTRETCH, ;
		FontBold = .F., ;
		FontSize = 9, ;
		Height = 31, ;
		Left = 48, ;
		MousePointer = 1, ;
		Name = "lblText", ;
		TabIndex = 1, ;
		Top = 8, ;
		Width = 334, ;
		WordWrap = .T.
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />
	
	PROCEDURE confirmcancel
		RETURN .T.
		
	ENDPROC

	PROCEDURE Init
		LPARAMETER cTitle, cText, cLongText, uIcon, cDefault
		#include ..\common\win32.h
		
		* Generate Defaults for parameters
		IF NOT EMPTY(m.cTitle)
		  THIS.Caption = m.cTitle
		ENDIF
		IF NOT EMPTY(m.cText)
		  THIS.lblText.Caption = m.cText
		ENDIF
		IF NOT EMPTY(m.cLongText)
		  THIS.edtExplain.Value = m.cLongText
		ENDIF
		IF NOT EMPTY(m.cDefault)
		  THIS.cValue = m.cDefault
		ENDIF
		
		* Display the desired Icon.
		DO CASE
		  CASE EMPTY(m.uIcon)
		    THIS.imgIcon.Visible = .F.
		    THIS.lblText.Left = THIS.imgIcon.Left
		    THIS.lblText.Width = THIS.lblText.Width + THIS.imgIcon.Width + 5
		  CASE VARTYPE(m.uIcon) = 'C'
		    THIS.imgIcon.Picture = m.uIcon
		  CASE m.uIcon = MSG_SEVERITY_WARNING
		    THIS.imgIcon.Picture = '..\Graphics\w95mbx3.bmp'
		  CASE m.uIcon = MSG_SEVERITY_QUESTION
		    THIS.imgIcon.Picture = '..\Graphics\w95mbx2.bmp'
		  CASE m.uIcon = MSG_SEVERITY_ERROR
		    THIS.imgIcon.Picture = '..\Graphics\w95mbx1.bmp'
		  OTHERWISE
		    THIS.imgIcon.Picture = '..\Graphics\w95mbx4.bmp'
		ENDCASE
		
		frmForm::Init()
		
		* Enable the Explain button if there is a longText associated with this message.
		IF NOT EMPTY(m.cLongText)
		  THIS.cmdMore.Visible = .T.
		ENDIF
		
	ENDPROC

	PROCEDURE saveallchanges
		* Put return value where caller can get at it via form.ReturnValue().
		THIS.uValue = TRIM(THIS.cValue)
		
	ENDPROC

	PROCEDURE cmdMore.Click
		LOCAL nBottomOffset
		
		* Make new bottom offset the same as left edge offset.
		m.nBottomOffset = THISFORM.edtExplain.Left
		THISFORM.MaxHeight = 500
		THISFORM.Height = THISFORM.edtExplain.Top + THISFORM.edtExplain.Height + m.nBottomOffset
		THISFORM.MinHeight = THISFORM.Height
		THISFORM.nOriginalHeight = THISFORM.Height
		
		THISFORM.edtExplain.nBottom = m.nBottomOffset
		THISFORM.edtExplain.Visible = .T.
		THISFORM.edtExplain.cReposition = 'vStretch,hStretch'
		
		THIS.Enabled = .F.
		
	ENDPROC

	PROCEDURE edtExplain.Init
		* This edit box we need the cReposition features of the codemine clas, but nothing else,
		* since we must avoid recursive calls to message dialog methods.
		THIS.BackColor = THISFORM.BackColor
		THIS.AddProperty('cReposition', 'hStretch')
		
	ENDPROC

	PROCEDURE edtExplain.KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		
		IF m.nKeyCode % 128 >= ASC(' ') OR m.nKeyCode = 7
		  NODEFAULT
		ENDIF
		
	ENDPROC

	PROCEDURE edtExplain.RightClick
		* Deffer to form context menu.
		THISFORM.RightClick()
		
	ENDPROC

	PROCEDURE edtText.Refresh
		* Set title used for Zoom dialog.
		THIS.TooltipText = THISFORM.Caption
		DODEFAULT()
		
	ENDPROC

ENDDEFINE

DEFINE CLASS frmhelpkeyeditor AS frmmodaldialogcustom OF "..\custom\cforms.vcx" 		&& Help Key Editor form.
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Shpshape1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtTooltip" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="edtText" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboLanguage" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="edtComment" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblDescription" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblLinks" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntOkCancel" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblLongtext" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblStatusbar" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntRichText" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblTooltip" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtLinks" UniqueID="" Timestamp="" />

	#INCLUDE "codemine.h"
	*<DefinedPropArrayMethod>
		*p: cdescription		&& Comment field for message key.
		*p: ckeyname		&& Message key name, for display purposes only.
		*p: ckeyvalue		&& Packed message key value string.
		*p: clanguageid		&& REplication ID for current displayed language.
		*a: alanguages[1,2]		&& Array of defined languages.
	*</DefinedPropArrayMethod>

	Caption = "Help Message Properties"
	cdescription = 		&& Comment field for message key.
	ckeyname = 		&& Message key name, for display purposes only.
	clanguageid = 		&& REplication ID for current displayed language.
	Desktop = .T.
	DoCreate = .T.
	Height = 269
	lreleaseonclose = .F.
	lrememberposition = .T.
	lremembersize = .T.
	MinHeight = (THIS.Height)
	MinWidth = (THIS.Width)
	Name = "frmhelpkeyeditor"
	omessage = .NULL.
	oregistry = .NULL.
	osecurity = .NULL.
	ShowTips = .T.
	Width = 417

	ADD OBJECT 'cboLanguage' AS cbocomboboxcustom WITH ;
		FontBold = .F., ;
		FontSize = 8, ;
		Height = 20, ;
		Left = 13, ;
		lnoinitdata = .T., ;
		Name = "cboLanguage", ;
		RowSourceType = 5, ;
		Style = 2, ;
		TabIndex = 7, ;
		Top = 62, ;
		Width = 118, ;
		ZOrderSet = 18
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="combobox" />

	ADD OBJECT 'cntOkCancel' AS cntokcancelcustom WITH ;
		creposition = vFollow,hCenter, ;
		Height = 26, ;
		Left = 128, ;
		Name = "cntOkCancel", ;
		TabIndex = 4, ;
		Top = 239, ;
		Width = 164, ;
		ZOrderSet = 8, ;
		cmdcancel.Name = "cmdcancel", ;
		cmdok.Name = "cmdok"
		*< END OBJECT: ClassLib="..\custom\cbutton.vcx" BaseClass="container" />

	ADD OBJECT 'cntRichText' AS cntrichtexteditor WITH ;
		BackStyle = 0, ;
		creposition = vStretch,hStretch, ;
		Height = 99, ;
		Left = 12, ;
		Name = "cntRichText", ;
		TabIndex = 3, ;
		Top = 125, ;
		Width = 397, ;
		cboFont.Height = 21, ;
		cboFont.Left = 126, ;
		cboFont.Name = "cboFont", ;
		cboFont.Top = 0, ;
		cboFont.Width = 113, ;
		chkBold.Height = 19, ;
		chkBold.Left = 62, ;
		chkBold.Name = "chkBold", ;
		chkBold.Top = 1, ;
		chkBold.Width = 19, ;
		chkBullet.Left = 372, ;
		chkBullet.Name = "chkBullet", ;
		chkBullet.Top = 0, ;
		chkCenter.Left = 328, ;
		chkCenter.Name = "chkCenter", ;
		chkCenter.Top = 0, ;
		chkItalic.Height = 19, ;
		chkItalic.Left = 83, ;
		chkItalic.Name = "chkItalic", ;
		chkItalic.Top = 1, ;
		chkItalic.Width = 19, ;
		chkLeft.Left = 307, ;
		chkLeft.Name = "chkLeft", ;
		chkLeft.Top = 0, ;
		chkRight.Left = 349, ;
		chkRight.Name = "chkRight", ;
		chkRight.Top = 0, ;
		chkUnderline.Height = 19, ;
		chkUnderline.Left = 104, ;
		chkUnderline.Name = "chkUnderline", ;
		chkUnderline.Top = 1, ;
		chkUnderline.Width = 19, ;
		cmdColor.Height = 19, ;
		cmdColor.Left = 283, ;
		cmdColor.Name = "cmdColor", ;
		cmdColor.Top = 1, ;
		cmdColor.Width = 19, ;
		oleRichText.chelpkey = %hlpCodemineHelpStyles, ;
		oleRichText.cvaluesource = THISFORM.cVersion, ;
		oleRichText.Height = 75, ;
		oleRichText.Left = 0, ;
		oleRichText.lnoinitdata = .T., ;
		oleRichText.Name = "oleRichText", ;
		oleRichText.Top = 23, ;
		oleRichText.Width = 392, ;
		spnFontsize.Height = 20, ;
		spnFontsize.Left = 240, ;
		spnFontsize.Name = "spnFontsize", ;
		spnFontsize.Top = 0, ;
		spnFontsize.Width = 40
		*< END OBJECT: ClassLib="cmgadget.vcx" BaseClass="container" />

	ADD OBJECT 'edtComment' AS edteditboxcustom WITH ;
		creposition = hStretch, ;
		cvaluesource = THISFORM.cDescription, ;
		cwriteprivilege = Developer, ;
		FontBold = .F., ;
		FontSize = 8, ;
		Height = 20, ;
		IntegralHeight = .T., ;
		Left = 62, ;
		lnoinitdata = .T., ;
		Margin = 1, ;
		Name = "edtComment", ;
		ScrollBars = 0, ;
		TabIndex = 5, ;
		Top = 5, ;
		Width = 349, ;
		ZOrderSet = 6
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="editbox" />

	ADD OBJECT 'edtText' AS edteditboxcustom WITH ;
		creposition = hStretch, ;
		cvaluesource = THISFORM.cmHelpValue.cVersion, ;
		FontSize = 8, ;
		Height = 20, ;
		IntegralHeight = .F., ;
		Left = 13, ;
		lnoinitdata = .T., ;
		Margin = 1, ;
		MaxLength = 100, ;
		Name = "edtText", ;
		ScrollBars = 0, ;
		TabIndex = 2, ;
		Top = 100, ;
		Width = 391, ;
		ZOrderSet = 17
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="editbox" />

	ADD OBJECT 'lblDescription' AS lbltextcustom WITH ;
		Alignment = 1, ;
		Caption = "Description:", ;
		FontBold = .F., ;
		FontSize = 8, ;
		Height = 17, ;
		Left = 0, ;
		Name = "lblDescription", ;
		TabIndex = 12, ;
		Top = 7, ;
		Width = 60, ;
		ZOrderSet = 7
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblLinks' AS lbltextcustom WITH ;
		Alignment = 1, ;
		Caption = "Links:", ;
		FontBold = .F., ;
		FontSize = 8, ;
		Height = 17, ;
		Left = 27, ;
		Name = "lblLinks", ;
		TabIndex = 11, ;
		Top = 30, ;
		Width = 33, ;
		ZOrderSet = 7
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblLongtext' AS lbltextcustom WITH ;
		Caption = "Display Text:", ;
		FontBold = .F., ;
		FontSize = 8, ;
		Height = 13, ;
		Left = 10, ;
		Name = "lblLongtext", ;
		TabIndex = 13, ;
		Top = 129, ;
		Width = 61, ;
		ZOrderSet = 20
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblStatusbar' AS lbltextcustom WITH ;
		Caption = "Status Bar Text:", ;
		FontBold = .F., ;
		FontSize = 8, ;
		Height = 13, ;
		Left = 9, ;
		Name = "lblStatusbar", ;
		TabIndex = 10, ;
		Top = 84, ;
		Width = 88, ;
		ZOrderSet = 21
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblTooltip' AS lbltextcustom WITH ;
		Alignment = 1, ;
		AutoSize = .F., ;
		Caption = "Name/Tool Tip:", ;
		FontBold = .F., ;
		FontSize = 8, ;
		Height = 17, ;
		Left = 195, ;
		Name = "lblTooltip", ;
		TabIndex = 8, ;
		Top = 65, ;
		Width = 75, ;
		ZOrderSet = 22
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Shpshape1' AS shpshapecustom WITH ;
		BackStyle = 0, ;
		creposition = vStretch,Hstretch, ;
		Height = 176, ;
		Left = 4, ;
		Name = "Shpshape1", ;
		Top = 56, ;
		Width = 409, ;
		ZOrderSet = 0
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="shape" />

	ADD OBJECT 'txtLinks' AS txttextboxcustom WITH ;
		creposition = hStretch, ;
		cvaluesource = THISFORM.cmHelpValue.cLinks, ;
		FontSize = 8, ;
		Height = 20, ;
		IntegralHeight = .T., ;
		Left = 62, ;
		lnoinitdata = .T., ;
		Margin = 1, ;
		Name = "txtLinks", ;
		TabIndex = 6, ;
		Top = 29, ;
		Width = 350, ;
		ZOrderSet = 23
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtTooltip' AS txttextboxcustom WITH ;
		creposition = hStretch, ;
		cvaluesource = THISFORM.cmHelpValue.cVersion, ;
		FontSize = 8, ;
		Height = 20, ;
		IntegralHeight = .T., ;
		lallowzoom = .T., ;
		Left = 272, ;
		lnoinitdata = .T., ;
		Margin = 1, ;
		Name = "txtTooltip", ;
		TabIndex = 1, ;
		Top = 62, ;
		Width = 132, ;
		ZOrderSet = 23
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />
	
	PROCEDURE Init
		LPARAMETERS cKeyValue, cKeyname, cDescription
		* This and all framework modal dialogs has form.Desktop set to .T. so they will not be
		* clipped when called from an SDI or other Top-Level form, without the containing VFP window.
		
		  * Store parameters in form properties where they are accessible to all methods.
		  THISFORM.cKeyValue = m.cKeyValue
		  THISFORM.cKeyname = m.cKeyname
		  THISFORM.cDescription = m.cDescription
		  
		  THISFORM.cmHelpValue.Scatter(m.cKeyValue, .T.)
		
		  * Update title bar to include key name.
		  THISFORM.Caption = THISFORM.Caption + ' - ' + TRIM(m.cKeyname)
		
		  * Set initial display language to current message language.
		  THISFORM.cLanguageID = THISFORM.oMessage.cLanguageID
		
		  DODEFAULT()
		
		  * Rich Text ActiveX control is a little flakey and doesn't always resize properly.
		  * Temporarily set focus to it so it draws correctly. Maybe someday MS will fix it right.
		  THIS.cntRichText.oleRichText.setfocus()
		  THIS.txtTooltip.Setfocus()
		  RETURN .T.
		
	ENDPROC

	PROCEDURE Load
		* Add key value object before any controls.
		THISFORM.AddObject('cmHelpValue', 'cmHelpValue')
		RETURN DODEFAULT()
		
	ENDPROC

	PROCEDURE Resize
		LOCAL oFocus
		
		DODEFAULT()
		
		* Rich Text ActiveX control is a little flakey and doesn't always resize properly
		* Temporarily set focus on/off it so it draws correctly.
		IF TYPE('THIS.Activecontrol.Name') = 'C'
		  m.oFocus = THIS.Activecontrol
		ENDIF
		THIS.edtComment.SetFocus()
		THIS.cntRichText.oleRichText.SetFocus()
		IF TYPE('m.oFocus') = 'O'
		  m.oFocus.Setfocus()
		ENDIF
		
	ENDPROC

	PROCEDURE save
		* Store changed data back to original packed parameter string.
		THISFORM.uValue = THIS.lChanged
		THISFORM.cKeyValue = THISFORM.cmHelpValue.Gather()
		
	ENDPROC

	PROCEDURE cboLanguage.Init
		*++
		* Initialize list of defined languages.
		*--
		LOCAL nCount, nIndex, cLocName, cKeyValue
		
		  DODEFAULT()
		  m.nIndex = 0
		  m.nCount = 0
		  DO WHILE m.nIndex >= 0
		    IF THISFORM.oRegistry.EnumKeys('%Local.Message.Languages', 'Language', @m.nIndex,, @m.cLocName, @m.cKeyValue) > 0
		      m.nCount = m.nCount + 1
		      DIMENSION THISFORM.aLanguages[m.nCount, 2]
		      THISFORM.aLanguages[m.nCount, 1] = m.cLocName
		      THISFORM.aLanguages[m.nCount, 2] = MLINE(m.cKeyValue, 1, 0)  && Lang ID is first line in value
		    ENDIF
		  ENDDO
		  THIS.RowSource = 'THISFORM.aLanguages'
		  THIS.ListIndex = 1
		  RETURN .T.
		
	ENDPROC

	PROCEDURE cboLanguage.Refresh
		* Set combobox to current display language
		LOCAL ix
		  THIS.ListIndex = 0
		  FOR ix = 1 TO ALEN(THISFORM.aLanguages, 1)
		    IF THISFORM.aLanguages[m.ix, 2] = THISFORM.cLanguageID
		      THIS.ListIndex = m.ix
		      EXIT
		    ENDIF
		  ENDFOR
		
	ENDPROC

	PROCEDURE cboLanguage.Valid
		THISFORM.cLanguageID = THISFORM.aLanguages[THIS.ListIndex, 2]
		THIS.Parent.Refresh
		
	ENDPROC

	PROCEDURE cntRichText.oleRichText.loadvalue
		*++
		* Custom load-value() method. The value source for this field is accessed via
		* a method in the cmHelpValue object so we cannot use the standard
		* control cValuesource mechanism. We set cValuesource to the cVersion property
		* just so the control knows it is bound to some data.
		*--
		  THIS.lChanged = .T.
		  THIS.TextRTF = THISFORM.cmHelpValue.GetText(MSGVAL_FIELD_RICH,, THISFORM.cLanguageID)
		  THIS.lChanged = .F.
		  RETURN .T.
		
	ENDPROC

	PROCEDURE cntRichText.oleRichText.storevalue
		THIS.lChanged = .F.
		* If no actual display text, dont store RTF header info.
		THISFORM.cmHelpValue.SetText(THISFORM.cLanguageID, , , IIF(EMPTY(THIS.Text), '', THIS.TextRTF))
		
	ENDPROC

	PROCEDURE edtComment.Refresh
		THIS.ToolTipText = STRTRAN(THIS.Parent.lblDescription.Caption, ':', '')
		DODEFAULT()
		
	ENDPROC

	PROCEDURE edtText.loadvalue
		*++
		* Custom load-value() method. The value source for this field is accessed via
		* a method in the cmMessageValue object so we cannot use the standard
		* control cValuesource mechanism. We set cValuesource to the cVersion property
		* of the cmMessageValue object just so the control knows it is bound to some data.
		*--
		  THIS.lChanged = .F.
		  THIS.Value = THISFORM.cmHelpValue.GetText(MSGVAL_FIELD_SHORT,, THISFORM.cLanguageID)
		  RETURN .T.
		
	ENDPROC

	PROCEDURE edtText.Refresh
		* Tooltip is used by form.Nicename() for zoom dialog title, and default displayname
		THIS.ToolTipText = STRTRAN(THIS.Parent.lblStatusbar.Caption, ':', '')
		DODEFAULT()
		
	ENDPROC

	PROCEDURE edtText.showcontrol
		THIS.ForeColor = IIF(THISFORM.cmHelpValue.HasTranslation(THISFORM.cLanguageID, MSGVAL_FIELD_SHORT), 0, RGB(192,192,192))
		
	ENDPROC

	PROCEDURE edtText.storevalue
		THIS.lChanged = .F.
		THISFORM.cmHelpValue.SetText(THISFORM.cLanguageID, THIS.Value)
		
		* Redisplay in dim or normal to reflect new value inheritence level
		THIS.Refresh()
		
	ENDPROC

	PROCEDURE txtTooltip.loadvalue
		*++
		* Custom load-value() method. The value source for this field is accessed via
		* a method in the cmHelpValue object so we cannot use the standard
		* control cValuesource mechanism. We set cValuesource to the cVersion property
		* of the cmMessageValue object just so the control knows it is bound to some data.
		*--
		  THIS.lChanged = .F.
		  THIS.Value = THISFORM.cmHelpValue.GetText(MSGVAL_FIELD_TIP,, THISFORM.cLanguageID)
		  RETURN .T.
		
	ENDPROC

	PROCEDURE txtTooltip.showcontrol
		THIS.ForeColor = IIF(THISFORM.cmHelpValue.HasTranslation(THISFORM.cLanguageID, MSGVAL_FIELD_TIP), 0, RGB(192,192,192))
		
	ENDPROC

	PROCEDURE txtTooltip.storevalue
		THIS.lChanged = .F.
		THISFORM.cmHelpValue.SetText(THISFORM.cLanguageID, , ALLTRIM(THIS.Value))
		
		* Redisplay in dim or normal to reflect new value inheritence level
		THIS.Refresh()
		
	ENDPROC

ENDDEFINE

DEFINE CLASS frmlanguagekeyeditor AS frmmodaldialogcustom OF "..\custom\cforms.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Lbltextcustom2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Shpshape2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Shpshape1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabel1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblDecimals" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabel2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabel3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabel4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabel5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabel6" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabel7" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabel8" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboTimeFormat" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboDateFormat" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtMark" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtDecimal" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtSeparator" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtCurrency" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboCurrencyFormat" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabel9" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboParentLanguage" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabel10" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkSysformat" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabel11" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="edtShortMonth" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="edtLongMonth" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cntokcancel1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboCentury" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbltextcustom1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="spnDecimals" UniqueID="" Timestamp="" />

	#INCLUDE "codemine.h"
	*<DefinedPropArrayMethod>
		*m: subclasslevel		&& Determine the nesting level of language "subclasses"
		*p: ckeyname		&& Language name
		*p: ckeyvalue		&& Laguage key value string
		*p: cparentlanguageid		&& Parent Language ID
		*a: alanguages[1,2]		&& Array of available languages.
	*</DefinedPropArrayMethod>

	Caption = "Language Properties"
	ckeyname = 		&& Language name
	ckeyvalue = 		&& Laguage key value string
	Closable = .T.
	cparentlanguageid = 		&& Parent Language ID
	Desktop = .T.
	DoCreate = .T.
	Height = 281
	lreleaseonclose = .F.
	lrememberposition = .T.
	lremembersize = .T.
	MaxHeight = (THIS.Height)
	MinHeight = (THIS.Height)
	MinWidth = (THIS.Width)
	Name = "frmlanguagekeyeditor"
	omessage = .NULL.
	oregistry = .NULL.
	Width = 431

	ADD OBJECT 'cboCentury' AS cbocomboboxcustom WITH ;
		cvaluesource = THISFORM.oLanguage.lCentury, ;
		FontBold = .F., ;
		FontSize = 9, ;
		Height = 22, ;
		Left = 126, ;
		lnoinitdata = .T., ;
		Name = "cboCentury", ;
		RowSource = "Century,No Century", ;
		RowSourceType = 1, ;
		Style = 2, ;
		TabIndex = 17, ;
		Top = 129, ;
		Width = 88, ;
		ZOrderSet = 26
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="combobox" />

	ADD OBJECT 'cboCurrencyFormat' AS cbocomboboxcustom WITH ;
		cvaluesource = THISFORM.oLanguage.cCurrencyFormat, ;
		FontBold = .F., ;
		FontSize = 9, ;
		Height = 22, ;
		Left = 71, ;
		lnoinitdata = .T., ;
		Name = "cboCurrencyFormat", ;
		RowSource = "Left,Right", ;
		RowSourceType = 1, ;
		Style = 2, ;
		TabIndex = 20, ;
		Top = 186, ;
		Width = 79, ;
		ZOrderSet = 17
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="combobox" />

	ADD OBJECT 'cboDateFormat' AS cbocomboboxcustom WITH ;
		cvaluesource = THISFORM.oLanguage.cDateFormat, ;
		FontBold = .F., ;
		FontSize = 9, ;
		Height = 22, ;
		Left = 64, ;
		lnoinitdata = .T., ;
		Name = "cboDateFormat", ;
		RowSource = "DMY,MDY,YMD", ;
		RowSourceType = 1, ;
		Style = 2, ;
		TabIndex = 16, ;
		Top = 129, ;
		Width = 52, ;
		ZOrderSet = 12
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="combobox" />

	ADD OBJECT 'cboParentLanguage' AS cbocomboboxcustom WITH ;
		FontBold = .F., ;
		FontSize = 9, ;
		Height = 21, ;
		Left = 66, ;
		lnoinitdata = .T., ;
		Name = "cboParentLanguage", ;
		RowSourceType = 5, ;
		Style = 2, ;
		TabIndex = 1, ;
		Top = 6, ;
		Width = 136, ;
		ZOrderSet = 19
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="combobox" />

	ADD OBJECT 'cboTimeFormat' AS cbocomboboxcustom WITH ;
		cvaluesource = THISFORM.oLanguage.nHourFormat, ;
		FontBold = .F., ;
		FontSize = 9, ;
		Height = 22, ;
		Left = 346, ;
		lnoinitdata = .T., ;
		Name = "cboTimeFormat", ;
		RowSource = "12 Hour,24 Hour", ;
		RowSourceType = 1, ;
		Style = 2, ;
		TabIndex = 19, ;
		Top = 129, ;
		Width = 72, ;
		ZOrderSet = 11
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="combobox" />

	ADD OBJECT 'chkSysformat' AS chkcheckbox WITH ;
		Caption = " Use Windows System Settings", ;
		creposition = hFollow, ;
		cvaluesource = THISFORM.oLanguage.lSysFormat, ;
		FontBold = .F., ;
		FontSize = 8, ;
		Height = 18, ;
		Left = 252, ;
		lnoinitdata = .T., ;
		Name = "chkSysformat", ;
		TabIndex = 2, ;
		Top = 4, ;
		Width = 171, ;
		ZOrderSet = 21
		*< END OBJECT: ClassLib="codemine.vcx" BaseClass="checkbox" />

	ADD OBJECT 'Cntokcancel1' AS cntokcancelcustom WITH ;
		creposition = hCenter, ;
		Left = 134, ;
		Name = "Cntokcancel1", ;
		TabIndex = 28, ;
		Top = 250, ;
		ZOrderSet = 25, ;
		cmdcancel.Name = "cmdcancel", ;
		cmdok.Name = "cmdok"
		*< END OBJECT: ClassLib="..\custom\cbutton.vcx" BaseClass="container" />

	ADD OBJECT 'edtLongMonth' AS edteditboxcustom WITH ;
		creposition = hStretch, ;
		cvaluesource = THISFORM.oLanguage.cLongMonth, ;
		FontBold = .F., ;
		FontSize = 9, ;
		Height = 38, ;
		lallowzoom = .F., ;
		Left = 126, ;
		lnoinitdata = .T., ;
		Name = "edtLongMonth", ;
		ScrollBars = 0, ;
		TabIndex = 4, ;
		Top = 83, ;
		Width = 292, ;
		ZOrderSet = 24
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="editbox" />

	ADD OBJECT 'edtShortMonth' AS edteditboxcustom WITH ;
		creposition = hStretch, ;
		cvaluesource = THISFORM.oLanguage.cShortMonth, ;
		FontBold = .F., ;
		FontSize = 9, ;
		Height = 23, ;
		lallowzoom = .F., ;
		Left = 126, ;
		lnoinitdata = .T., ;
		Name = "edtShortMonth", ;
		TabIndex = 3, ;
		Top = 57, ;
		Width = 292, ;
		ZOrderSet = 23
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="editbox" />

	ADD OBJECT 'lblDecimals' AS lbltextcustom WITH ;
		Alignment = 1, ;
		Caption = "Decimals:", ;
		FontBold = .F., ;
		FontSize = 8, ;
		Height = 17, ;
		Left = 310, ;
		Name = "lblDecimals", ;
		TabIndex = 8, ;
		Top = 189, ;
		Width = 59, ;
		ZOrderSet = 4
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabel1' AS lbltextcustom WITH ;
		Alignment = 1, ;
		Caption = "Short Month Names:", ;
		FontBold = .F., ;
		FontSize = 8, ;
		Height = 17, ;
		Left = 12, ;
		Name = "Lbllabel1", ;
		TabIndex = 5, ;
		Top = 59, ;
		Width = 112, ;
		ZOrderSet = 3
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabel10' AS lbltextcustom WITH ;
		BackStyle = 0, ;
		Caption = "Date and Time Display: ", ;
		ColorSource = 4, ;
		FontBold = .F., ;
		FontItalic = .T., ;
		FontSize = 8, ;
		Height = 13, ;
		Left = 7, ;
		Name = "Lbllabel10", ;
		TabIndex = 26, ;
		Top = 37, ;
		Width = 117, ;
		ZOrderSet = 20
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabel11' AS lbltextcustom WITH ;
		Alignment = 1, ;
		Caption = "Full Month Names:", ;
		FontBold = .F., ;
		FontSize = 8, ;
		Height = 17, ;
		Left = 22, ;
		Name = "Lbllabel11", ;
		TabIndex = 27, ;
		Top = 86, ;
		Width = 102, ;
		ZOrderSet = 22
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabel2' AS lbltextcustom WITH ;
		Alignment = 1, ;
		Caption = "Decimal Point:", ;
		FontBold = .F., ;
		FontSize = 8, ;
		Height = 17, ;
		Left = 173, ;
		Name = "Lbllabel2", ;
		TabIndex = 9, ;
		Top = 189, ;
		Width = 83, ;
		ZOrderSet = 4
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabel3' AS lbltextcustom WITH ;
		Alignment = 1, ;
		Caption = "1000 Separator:", ;
		FontBold = .F., ;
		FontSize = 8, ;
		Height = 17, ;
		Left = 173, ;
		Name = "Lbllabel3", ;
		TabIndex = 10, ;
		Top = 216, ;
		Width = 83, ;
		ZOrderSet = 5
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabel4' AS lbltextcustom WITH ;
		Alignment = 1, ;
		Caption = "Date:", ;
		FontBold = .F., ;
		FontSize = 8, ;
		Height = 17, ;
		Left = 26, ;
		Name = "Lbllabel4", ;
		TabIndex = 11, ;
		Top = 132, ;
		Width = 35, ;
		ZOrderSet = 6
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabel5' AS lbltextcustom WITH ;
		Alignment = 1, ;
		Caption = "Format:", ;
		FontBold = .F., ;
		FontSize = 8, ;
		Height = 17, ;
		Left = 23, ;
		Name = "Lbllabel5", ;
		TabIndex = 12, ;
		Top = 189, ;
		Width = 45, ;
		ZOrderSet = 7
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabel6' AS lbltextcustom WITH ;
		Alignment = 1, ;
		Caption = "Symbol:", ;
		FontBold = .F., ;
		FontSize = 8, ;
		Height = 17, ;
		Left = 23, ;
		Name = "Lbllabel6", ;
		TabIndex = 13, ;
		Top = 216, ;
		Width = 45, ;
		ZOrderSet = 8
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabel7' AS lbltextcustom WITH ;
		Alignment = 1, ;
		Caption = "Separator:", ;
		FontBold = .F., ;
		FontSize = 8, ;
		Height = 17, ;
		Left = 215, ;
		Name = "Lbllabel7", ;
		TabIndex = 14, ;
		Top = 132, ;
		Width = 62, ;
		ZOrderSet = 9
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabel8' AS lbltextcustom WITH ;
		Alignment = 1, ;
		Caption = "Time:", ;
		FontBold = .F., ;
		FontSize = 8, ;
		Height = 17, ;
		Left = 309, ;
		Name = "Lbllabel8", ;
		TabIndex = 15, ;
		Top = 132, ;
		Width = 35, ;
		ZOrderSet = 10
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabel9' AS lbltextcustom WITH ;
		BackStyle = 0, ;
		Caption = "Currency Display: ", ;
		ColorSource = 4, ;
		FontBold = .F., ;
		FontItalic = .T., ;
		FontSize = 8, ;
		Height = 13, ;
		Left = 5, ;
		Name = "Lbllabel9", ;
		TabIndex = 25, ;
		Top = 168, ;
		Width = 91, ;
		ZOrderSet = 18
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbltextcustom1' AS lbltextcustom WITH ;
		Alignment = 1, ;
		Caption = "Based on:", ;
		FontBold = .F., ;
		FontSize = 8, ;
		Height = 17, ;
		Left = 7, ;
		Name = "Lbltextcustom1", ;
		TabIndex = 7, ;
		Top = 8, ;
		Width = 56, ;
		ZOrderSet = 27
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbltextcustom2' AS lbltextcustom WITH ;
		Caption = "for Date and Currency Display", ;
		creposition = hFollow, ;
		FontBold = .F., ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 271, ;
		Name = "Lbltextcustom2", ;
		TabIndex = 6, ;
		Top = 20, ;
		Width = 153, ;
		ZOrderSet = 0
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Shpshape1' AS shpshapecustom WITH ;
		BackStyle = 0, ;
		creposition = hStretch, ;
		Height = 64, ;
		Left = 5, ;
		Name = "Shpshape1", ;
		Top = 180, ;
		Width = 421, ;
		ZOrderSet = 2
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="shape" />

	ADD OBJECT 'Shpshape2' AS shpshapecustom WITH ;
		BackStyle = 0, ;
		creposition = hStretch, ;
		Height = 110, ;
		Left = 5, ;
		Name = "Shpshape2", ;
		Top = 49, ;
		Width = 421, ;
		ZOrderSet = 1
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="shape" />

	ADD OBJECT 'spnDecimals' AS spnspinnercustom WITH ;
		cvaluesource = THISFORM.oLanguage.nDecimals, ;
		Height = 22, ;
		InputMask = "9", ;
		KeyboardHighValue = 9, ;
		KeyboardLowValue = 0, ;
		Left = 372, ;
		lnoinitdata = .T., ;
		Name = "spnDecimals", ;
		SpinnerHighValue = 9.00, ;
		SpinnerLowValue = 0.00, ;
		TabIndex = 24, ;
		Top = 186, ;
		Width = 36
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="spinner" />

	ADD OBJECT 'txtCurrency' AS txttextboxcustom WITH ;
		cvaluesource = THISFORM.oLanguage.cCurrencySymbol, ;
		FontBold = .F., ;
		FontSize = 9, ;
		Format = "K", ;
		Height = 22, ;
		InputMask = "XXXXX", ;
		Left = 71, ;
		lnoinitdata = .T., ;
		Name = "txtCurrency", ;
		TabIndex = 21, ;
		Top = 213, ;
		Width = 40, ;
		ZOrderSet = 16
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtDecimal' AS txttextboxcustom WITH ;
		cvaluesource = THISFORM.oLanguage.cDecimal, ;
		FontBold = .F., ;
		FontSize = 9, ;
		Format = "K", ;
		Height = 22, ;
		InputMask = "X", ;
		Left = 260, ;
		lnoinitdata = .T., ;
		Name = "txtDecimal", ;
		TabIndex = 22, ;
		Top = 186, ;
		Width = 18, ;
		ZOrderSet = 14
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtMark' AS txttextboxcustom WITH ;
		cvaluesource = THISFORM.oLanguage.cMark, ;
		FontBold = .F., ;
		FontSize = 9, ;
		Format = "K", ;
		Height = 22, ;
		InputMask = "X", ;
		Left = 281, ;
		lnoinitdata = .T., ;
		Name = "txtMark", ;
		TabIndex = 18, ;
		Top = 129, ;
		Width = 19, ;
		ZOrderSet = 13
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtSeparator' AS txttextboxcustom WITH ;
		cvaluesource = THISFORM.oLanguage.cSeparator, ;
		FontBold = .F., ;
		FontSize = 9, ;
		Format = "K", ;
		Height = 22, ;
		InputMask = "X", ;
		Left = 260, ;
		lnoinitdata = .T., ;
		Name = "txtSeparator", ;
		TabIndex = 23, ;
		Top = 213, ;
		Width = 18, ;
		ZOrderSet = 15
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />
	
	PROCEDURE Init
		LPARAMETERS cKeyValue, cKeyname
		*++
		* CodeMine Language Key Editor form.
		*
		* Copyright 1996-1998 Soft Classics, Ltd. All rights reserved.
		*--
		LOCAL nCount, nIndex, cLocName, cKeyValue, cLangID
		
		  * Store parameters in form properties where they are accessible to all methods.
		  THISFORM.cKeyValue = m.cKeyValue
		  THISFORM.cKeyname = m.cKeyname
		
		  THISFORM.AddObject('oLanguage', 'cmLanguageValue')
		  THISFORM.oLanguage.Scatter(m.cKeyValue, m.cKeyname)
		
		  * New language definition automatically sets change flag.
		  THIS.lChanged = EMPTY(m.cKeyValue)
		
		  * Update title bar to include username.
		  THISFORM.Caption = THISFORM.Caption + ' - ' + TRIM(m.cKeyname)
		
		  * Initialize list of defined languages.
		  m.nIndex = 0
		  m.nCount = 1
		  THISFORM.aLanguages[1, 1] = ''
		  THISFORM.aLanguages[1, 2] = ''
		  DO WHILE m.nIndex >= 0
		    IF THISFORM.oRegistry.EnumKeys('%Local.Message.Languages', 'Language', @m.nIndex,, @m.cLocName, @m.cKeyValue) > 0
		      m.cLangid = MLINE(m.cKeyValue, 1, 0)  && Lang ID is first line in value
		
		      * Do not include this language in the list of potential parents.
		      IF NOT m.cLangID == THISFORM.oLanguage.cLanguageID
		        m.nCount = m.nCount + 1
		        DIMENSION THISFORM.aLanguages[m.nCount, 2]
		        THISFORM.aLanguages[m.nCount, 1] = m.cLocName
		        THISFORM.aLanguages[m.nCount, 2] = m.cLangID
		      ENDIF
		    ENDIF
		  ENDDO
		  THISFORM.cboParentLanguage.RowSource = 'THISFORM.aLanguages'
		
		  RETURN frmForm::Init()
		
	ENDPROC

	PROCEDURE saveallchanges
		LOCAL nLevel
		
		  IF THIS.lChanged
		    m.nLevel = THIS.SubclassLevel()
		    IF m.nLevel > 5
		      RETURN THIS.oMessage.Warning('Language definitions are nested too deep. Change the "Based On" field.')
		    ENDIF
		    IF m.nLevel < 0
		      RETURN THIS.oMessage.Warning('Language definitions are cyclic. Change the "Based On" field.')
		    ENDIF
		  ENDIF
		
		  * Store changed data back to original packed parameter string.
		  THIS.uValue = THIS.lChanged
		  THIS.cKeyValue = THIS.oLanguage.Gather()
		  RETURN .T.
		
	ENDPROC

	PROCEDURE subclasslevel		&& Determine the nesting level of language "subclasses"
		*++
		* Determine the number of levels the specified language is subclassed from a root language.
		* Return the subclassing level. Return 0 if a root language, or -1 if cyclic definition.
		*--
		LOCAL ix, cValue, cParent, aLanguages[1,2], oLanguage
		
		  m.cParent = THIS.oLanguage.cParentLanguageID
		  IF EMPTY(m.cParent)
		    RETURN 0
		  ENDIF
		
		  * Build array of all languages, and their parents
		  m.nCount = 0
		
		  m.oLanguage = CREATEOBJECT('cmLanguageValue')
		  m.ix = 0
		  DO WHILE THIS.oRegistry.EnumKeys('%Local.Message.Languages', 'Language', @m.ix,,, @m.cValue) > 0
		    m.nCount = m.nCount + 1
		    DIMENSION aLanguages[m.nCount, 2]
		    m.oLanguage.Scatter(m.cValue)
		    aLanguages[m.nCount, LANGUAGE_ID] = m.oLanguage.cLanguageID
		
		    * Store the parent reference. If the language we are editing, use the new value, not the one in the buffer
		    IF m.oLanguage.cLanguageID == THIS.oLanguage.cLanguageID
		      aLanguages[m.nCount, LANGUAGE_PARENT] = THIS.oLanguage.cParentLanguageID
		    ELSE
		      aLanguages[m.nCount, LANGUAGE_PARENT] = m.oLanguage.cParentLanguageID
		    ENDIF
		  ENDDO
		
		  m.nLevel = 0
		  DO WHILE NOT EMPTY(m.cParent)
		    FOR ix = 1 TO m.nCount
		      IF aLanguages[m.ix, LANGUAGE_ID] == m.cParent
		        IF ISNULL(aLanguages[m.ix, LANGUAGE_PARENT])
		          RETURN -1
		        ELSE
		          m.nLevel = m.nLevel + 1
		          m.cParent = aLanguages[m.ix, LANGUAGE_PARENT]
		
		          * Mark this language, so if we get here again, we detect a loop.
		          aLanguages[m.ix, LANGUAGE_PARENT] = .NULL.
		        ENDIF
		        EXIT
		      ENDIF
		    ENDFOR
		  ENDDO
		  RETURN m.nLevel
		
	ENDPROC

	PROCEDURE cboCentury.loadtranslation
		LPARAMETER lValue
		
		* Our datasource is logical, convert to 1 for .T. or 2 for .F.
		RETURN IIF(m.lValue, 1, 2)
		
	ENDPROC

	PROCEDURE cboCentury.Refresh
		THIS.lEnabled = NOT THISFORM.oLanguage.lSysFormat
		cboCombobox::Refresh()
		
	ENDPROC

	PROCEDURE cboCentury.storetranslation
		LPARAMETER nValue
		
		* Our datasource is logical, convert to 1 for .T. or 2 for .F.
		RETURN (m.nValue == 1)
		
	ENDPROC

	PROCEDURE cboCurrencyFormat.loadtranslation
		LPARAMETERS uValue
		
		RETURN IIF(PROPER(m.uValue) == 'Left', 1, 2)
		
	ENDPROC

	PROCEDURE cboCurrencyFormat.Refresh
		THIS.lEnabled = NOT THISFORM.oLanguage.lSysFormat
		cboCombobox::Refresh()
		
	ENDPROC

	PROCEDURE cboCurrencyFormat.storetranslation
		LPARAMETERS uValue
		* Store as fixed english names, regardless of localized value displayed.
		RETURN IIF(m.uValue = 1, 'Left', 'Right')
		
	ENDPROC

	PROCEDURE cboDateFormat.Refresh
		THIS.lEnabled = NOT THISFORM.oLanguage.lSysFormat
		cboCombobox::Refresh()
		
	ENDPROC

	PROCEDURE cboParentLanguage.afterchange
		THISFORM.oLanguage.cParentLanguageID = THISFORM.aLanguages[THIS.ListIndex, 2]
		THIS.Parent.Refresh()
		THISFORM.lChanged = .T.
		
	ENDPROC

	PROCEDURE cboParentLanguage.Refresh
		* Set combobox to current display language
		LOCAL ix
		  THIS.ListIndex = 0
		  FOR ix = 1 TO ALEN(THISFORM.aLanguages, 1)
		    IF THISFORM.aLanguages[m.ix, 2] == THISFORM.oLanguage.cParentLanguageID
		      THIS.ListIndex = m.ix
		      EXIT
		    ENDIF
		  ENDFOR
		
	ENDPROC

	PROCEDURE cboTimeFormat.loadtranslation
		LPARAMETER nValue
		  * 12 hour is index 1, 24 hour is index 2
		  RETURN IIF(m.nValue = 12, 1, 2)
		
	ENDPROC

	PROCEDURE cboTimeFormat.Refresh
		THIS.lEnabled = NOT THISFORM.oLanguage.lSysFormat
		cboCombobox::Refresh()
		
	ENDPROC

	PROCEDURE cboTimeFormat.storetranslation
		LPARAMETER nValue
		  * Return 12 or 24 per selected index value
		  RETURN VAL(THIS.List[m.nValue])
		
	ENDPROC

	PROCEDURE chkSysformat.afterchange
		THISFORM.Refresh()
		
	ENDPROC

	PROCEDURE txtCurrency.Refresh
		THIS.lEnabled = NOT THISFORM.oLanguage.lSysFormat
		txtTextbox::Refresh()
		
	ENDPROC

	PROCEDURE txtDecimal.Refresh
		THIS.lEnabled = NOT THISFORM.oLanguage.lSysFormat
		txtTextbox::Refresh()
		
	ENDPROC

	PROCEDURE txtMark.Refresh
		THIS.lEnabled = NOT THISFORM.oLanguage.lSysFormat
		txtTextbox::Refresh()
		
	ENDPROC

	PROCEDURE txtSeparator.Refresh
		THIS.lEnabled = NOT THISFORM.oLanguage.lSysFormat
		txtTextbox::Refresh()
		
	ENDPROC

ENDDEFINE

DEFINE CLASS frmmessagekeyeditor AS frmmodaldialogcustom OF "..\custom\cforms.vcx" 		&& Message Key Editor form.
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Shpshape1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtTooltip" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtNumber" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblNumber" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="edtComment" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblDescription" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntOkCancel" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboIcon" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboDialog" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboDefault" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblIcon" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblDialog" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblDefault" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboType" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabel1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="edtText" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblTooltip" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboLanguage" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="edtLongText" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblText" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblLongtext" UniqueID="" Timestamp="" />

	#INCLUDE "codemine.h"
	*<DefinedPropArrayMethod>
		*p: cdescription		&& Comment field for message key.
		*p: ckeyname		&& Message key name, for display purposes only.
		*p: ckeyvalue		&& Packed message key value string.
		*p: clanguageid		&& REplication ID for current displayed language.
		*a: alanguages[1,2]		&& Array of defined languages.
	*</DefinedPropArrayMethod>

	Caption = "Message Properties"
	cdescription = 		&& Comment field for message key.
	ckeyname = 		&& Message key name, for display purposes only.
	clanguageid = 		&& REplication ID for current displayed language.
	Desktop = .T.
	DoCreate = .T.
	Height = 243
	lreleaseonclose = .F.
	lrememberposition = .T.
	lremembersize = .T.
	MinHeight = (THIS.Height - 20)
	MinWidth = (THIS.Width)
	Name = "frmmessagekeyeditor"
	omessage = .NULL.
	oregistry = .NULL.
	osecurity = .NULL.
	Width = 417

	ADD OBJECT 'cboDefault' AS cbocomboboxcustom WITH ;
		Comment = "/OK/OK,Cancel/Yes,No/Yes,No,Cancel/Retry,Cancel/OK/OK,Cancel/", ;
		creposition = hFollow, ;
		cvaluesource = THISFORM.cmMessageValue.nDefault, ;
		cwriteprivilege = Developer, ;
		FontBold = .F., ;
		FontSize = 8, ;
		Height = 20, ;
		Left = 303, ;
		lnoinitdata = .T., ;
		Name = "cboDefault", ;
		RowSourceType = 1, ;
		Style = 2, ;
		TabIndex = 11, ;
		Top = 30, ;
		Width = 107, ;
		ZOrderSet = 11
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="combobox" />

	ADD OBJECT 'cboDialog' AS cbocomboboxcustom WITH ;
		cvaluesource = THISFORM.cmMessageValue.nDialog, ;
		cwriteprivilege = Developer, ;
		FontBold = .F., ;
		FontSize = 8, ;
		Height = 20, ;
		Left = 61, ;
		lnoinitdata = .T., ;
		Margin = 2, ;
		Name = "cboDialog", ;
		RowSource = "Confirm - OK,Confirm - OK/Cancel,Confirm - Yes/No,Confirm - Yes/No/Cancel,Confirm - Retry/Cancel,Informational,Text Reply", ;
		RowSourceType = 1, ;
		Style = 2, ;
		TabIndex = 10, ;
		Top = 53, ;
		Width = 157, ;
		ZOrderSet = 10
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="combobox" />

	ADD OBJECT 'cboIcon' AS cbocomboboxcustom WITH ;
		creposition = hFollow, ;
		cvaluesource = THISFORM.cmMessageValue.nIcon, ;
		cwriteprivilege = Developer, ;
		FontBold = .F., ;
		FontSize = 8, ;
		Height = 20, ;
		Left = 303, ;
		lnoinitdata = .T., ;
		Name = "cboIcon", ;
		RowSource = "Informational,Warning,Question,Severe Error", ;
		RowSourceType = 1, ;
		Style = 2, ;
		TabIndex = 12, ;
		Top = 53, ;
		Width = 107, ;
		ZOrderSet = 9
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="combobox" />

	ADD OBJECT 'cboLanguage' AS cbocomboboxcustom WITH ;
		FontBold = .F., ;
		FontSize = 8, ;
		Height = 20, ;
		Left = 12, ;
		lnoinitdata = .T., ;
		Name = "cboLanguage", ;
		RowSourceType = 5, ;
		Style = 2, ;
		TabIndex = 17, ;
		Top = 86, ;
		Width = 120, ;
		ZOrderSet = 18
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="combobox" />

	ADD OBJECT 'cboType' AS cbocomboboxcustom WITH ;
		cvaluesource = THISFORM.cmMessageValue.nMsgType, ;
		cwriteprivilege = Developer, ;
		FontBold = .F., ;
		FontSize = 8, ;
		Height = 20, ;
		Left = 61, ;
		lnoinitdata = .T., ;
		Name = "cboType", ;
		RowSource = "Dialog Message,Text String,Menu Prompt", ;
		RowSourceType = 1, ;
		Style = 2, ;
		TabIndex = 9, ;
		Top = 30, ;
		Width = 157, ;
		ZOrderSet = 15
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="combobox" />

	ADD OBJECT 'cntOkCancel' AS cntokcancelcustom WITH ;
		creposition = vFollow,hCenter, ;
		Height = 26, ;
		Left = 126, ;
		Name = "cntOkCancel", ;
		TabIndex = 4, ;
		Top = 212, ;
		Width = 164, ;
		ZOrderSet = 8, ;
		cmdcancel.Name = "cmdcancel", ;
		cmdok.Name = "cmdok"
		*< END OBJECT: ClassLib="..\custom\cbutton.vcx" BaseClass="container" />

	ADD OBJECT 'edtComment' AS edteditboxcustom WITH ;
		creposition = hStretch, ;
		cvaluesource = THISFORM.cDescription, ;
		cwriteprivilege = Developer, ;
		FontBold = .F., ;
		FontSize = 8, ;
		Height = 20, ;
		IntegralHeight = .T., ;
		Left = 62, ;
		lnoinitdata = .T., ;
		Margin = 1, ;
		Name = "edtComment", ;
		ScrollBars = 0, ;
		TabIndex = 5, ;
		Top = 5, ;
		Width = 236, ;
		ZOrderSet = 6
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="editbox" />

	ADD OBJECT 'edtLongText' AS edteditboxcustom WITH ;
		ColorSource = 0, ;
		creposition = Vstretch,Hstretch, ;
		cvaluesource = THISFORM.cmMessageValue.cVersion, ;
		FontBold = .F., ;
		FontSize = 8, ;
		ForeColor = 0,0,0, ;
		Height = 36, ;
		IntegralHeight = .T., ;
		Left = 12, ;
		lnoinitdata = .T., ;
		Name = "edtLongText", ;
		TabIndex = 3, ;
		Top = 165, ;
		Width = 391, ;
		ZOrderSet = 19
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="editbox" />

	ADD OBJECT 'edtText' AS edteditboxcustom WITH ;
		ColorSource = 0, ;
		creposition = hStretch, ;
		cvaluesource = THISFORM.cmMessageValue.cVersion, ;
		FontBold = .F., ;
		FontSize = 8, ;
		ForeColor = 0,0,0, ;
		Height = 22, ;
		IntegralHeight = .T., ;
		Left = 12, ;
		lnoinitdata = .T., ;
		Name = "edtText", ;
		ScrollBars = 0, ;
		TabIndex = 2, ;
		Top = 126, ;
		Width = 391, ;
		ZOrderSet = 17
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="editbox" />

	ADD OBJECT 'lblDefault' AS lbltextcustom WITH ;
		Alignment = 1, ;
		Caption = "Default:", ;
		creposition = hFollow, ;
		FontBold = .F., ;
		FontSize = 8, ;
		Height = 17, ;
		Left = 249, ;
		Name = "lblDefault", ;
		TabIndex = 18, ;
		Top = 34, ;
		Width = 52, ;
		ZOrderSet = 14
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblDescription' AS lbltextcustom WITH ;
		Alignment = 1, ;
		Caption = "Description:", ;
		FontBold = .F., ;
		FontSize = 8, ;
		Height = 17, ;
		Left = 0, ;
		Name = "lblDescription", ;
		TabIndex = 19, ;
		Top = 7, ;
		Width = 60, ;
		ZOrderSet = 7
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblDialog' AS lbltextcustom WITH ;
		Alignment = 1, ;
		Caption = "Dialog:", ;
		FontBold = .F., ;
		FontSize = 8, ;
		Height = 17, ;
		Left = 15, ;
		Name = "lblDialog", ;
		TabIndex = 14, ;
		Top = 56, ;
		Width = 44, ;
		ZOrderSet = 13
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblIcon' AS lbltextcustom WITH ;
		Alignment = 1, ;
		Caption = "Icon:", ;
		creposition = hFollow, ;
		FontBold = .F., ;
		FontSize = 8, ;
		Height = 17, ;
		Left = 254, ;
		Name = "lblIcon", ;
		TabIndex = 21, ;
		Top = 56, ;
		Width = 47, ;
		ZOrderSet = 12
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabel1' AS lbltextcustom WITH ;
		Alignment = 1, ;
		Caption = "Type:", ;
		FontBold = .F., ;
		FontSize = 8, ;
		Height = 17, ;
		Left = 19, ;
		Name = "Lbllabel1", ;
		TabIndex = 6, ;
		Top = 32, ;
		Width = 40, ;
		ZOrderSet = 16
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblLongtext' AS lbltextcustom WITH ;
		Caption = "Explanation Text:", ;
		FontBold = .F., ;
		FontSize = 8, ;
		Height = 13, ;
		Left = 10, ;
		Name = "lblLongtext", ;
		TabIndex = 20, ;
		Top = 150, ;
		Width = 100, ;
		ZOrderSet = 20
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblNumber' AS lbltextcustom WITH ;
		Alignment = 1, ;
		Caption = "Msg#:", ;
		creposition = hFollow, ;
		FontBold = .F., ;
		FontSize = 8, ;
		Height = 17, ;
		Left = 300, ;
		Name = "lblNumber", ;
		TabIndex = 13, ;
		Top = 6, ;
		Width = 35, ;
		ZOrderSet = 5
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblText' AS lbltextcustom WITH ;
		Caption = "Text:", ;
		FontBold = .F., ;
		FontSize = 8, ;
		Height = 13, ;
		Left = 8, ;
		Name = "lblText", ;
		TabIndex = 16, ;
		Top = 111, ;
		Width = 35, ;
		ZOrderSet = 21
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblTooltip' AS lbltextcustom WITH ;
		Alignment = 1, ;
		AutoSize = .F., ;
		Caption = "Bar Prompt:", ;
		creposition = hFollow, ;
		FontBold = .F., ;
		FontSize = 8, ;
		Height = 17, ;
		Left = 198, ;
		Name = "lblTooltip", ;
		TabIndex = 8, ;
		Top = 103, ;
		Width = 63, ;
		ZOrderSet = 22
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Shpshape1' AS shpshapecustom WITH ;
		BackStyle = 0, ;
		creposition = vStretch,Hstretch, ;
		Height = 128, ;
		Left = 2, ;
		Name = "Shpshape1", ;
		Top = 80, ;
		Width = 412, ;
		ZOrderSet = 0
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="shape" />

	ADD OBJECT 'txtNumber' AS txttextboxcustom WITH ;
		creposition = hFollow, ;
		cvaluesource = THISFORM.cmMessageValue.cNumber, ;
		cwriteprivilege = Developer, ;
		FontBold = .F., ;
		FontSize = 8, ;
		Format = "K", ;
		Height = 20, ;
		InputMask = "XXXXXXXX", ;
		IntegralHeight = .T., ;
		Left = 339, ;
		lnoinitdata = .T., ;
		Margin = 1, ;
		Name = "txtNumber", ;
		TabIndex = 7, ;
		Top = 4, ;
		Width = 71, ;
		ZOrderSet = 3
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtTooltip' AS txttextboxcustom WITH ;
		ColorSource = 0, ;
		creposition = hfollow, ;
		cvaluesource = THISFORM.cmMessageValue.cVersion, ;
		FontSize = 8, ;
		ForeColor = 0,0,0, ;
		Height = 20, ;
		IntegralHeight = .T., ;
		Left = 264, ;
		lnoinitdata = .T., ;
		Margin = 1, ;
		MaxLength = 75, ;
		Name = "txtTooltip", ;
		TabIndex = 1, ;
		Top = 100, ;
		Width = 140, ;
		ZOrderSet = 23
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />
	
	PROCEDURE Init
		LPARAMETERS cKeyValue, cKeyname, cDescription, cCategory
		* This and all framework modal dialogs has form.Desktop set to .T. so they will not be
		* clipped when called from an SDI or other Top-Level form, without the containing VFP window.
		
		  * Store parameters in form properties where they are accessible to all methods.
		  THISFORM.cKeyValue = m.cKeyValue
		  THISFORM.cKeyname = m.cKeyname
		  THISFORM.cDescription = m.cDescription
		  
		  THISFORM.cmMessageValue.Scatter(m.cKeyValue)
		
		  * Update title bar to include key name.
		  THISFORM.Caption = THISFORM.Caption + ' - ' + TRIM(m.cKeyname)
		
		  * Generate some default values for new keys.
		  IF EMPTY(m.cKeyValue)
		    DO CASE
		      CASE '.captions' $ LOWER(m.cCategory)
		        THISFORM.cmMessageValue.nMsgType = MSG_TYPE_TEXT
		        IF EMPTY(THISFORM.cDescription)
		          THISFORM.cDescription = 'Caption'
		        ENDIF
		      CASE '.text strings' $ LOWER(m.cCategory)
		        THISFORM.cmMessageValue.nMsgType = MSG_TYPE_TEXT
		        IF EMPTY(THISFORM.cDescription)
		          THISFORM.cDescription = 'Text String'
		        ENDIF
		      CASE '.system messages' $ LOWER(m.cCategory)
		        THISFORM.cmMessageValue.nMsgType = MSG_TYPE_DIALOG
		        IF EMPTY(THISFORM.cDescription)
		          THISFORM.cDescription = 'System Dialog Message'
		        ENDIF
		      CASE '.context menu' $ LOWER(m.cCategory)
		        THISFORM.cmMessageValue.nMsgType = MSG_TYPE_PROMPT
		        IF EMPTY(THISFORM.cDescription)
		          THISFORM.cDescription = 'Context Menu Bar Prompt'
		        ENDIF
		    ENDCASE
		  ENDIF
		
		  * Set initial display language to current message language.
		  THISFORM.cLanguageID = THISFORM.oMessage.cLanguageID
		
		  frmForm::Init()
		
	ENDPROC

	PROCEDURE Load
		* Add message value object before any controls
		THISFORM.AddObject('cmMessageValue', 'cmMessageValue')
		RETURN DODEFAULT()
		
	ENDPROC

	PROCEDURE save
		  * Store changed data back to original packed parameter string.
		  THISFORM.uValue = THIS.lChanged
		  THISFORM.cKeyValue = THISFORM.cmMessageValue.Gather()
		
	ENDPROC

	PROCEDURE cboDefault.Refresh
		LOCAL nDialog, cRows
		IF THISFORM.cmMessageValue.nMsgType = MSG_TYPE_DIALOG
		  cboCombobox::Refresh()
		  * Set the rowsource based on current dialog type.
		  m.nDialog = THISFORM.cmMessageValue.nDialog
		
		  * We use the comment field of the control to store the list of button options
		  m.cRows = SUBSTR(THIS.Comment, AT('/', THIS.Comment, m.nDialog) + 1)
		  THIS.RowSource = LEFT(m.cRows, AT('/', m.cRows) - 1)
		  THIS.Visible = .T.
		  THIS.Parent.lblDefault.Visible = .T.
		ELSE
		  THIS.Visible = .F.
		  THIS.Parent.lblDefault.Visible = .F.
		ENDIF
		
	ENDPROC

	PROCEDURE cboDialog.afterchange
		* Generate new default values for default button and icon.
		THISFORM.cmMessageValue.nDefault = 1
		DO CASE
		  CASE INLIST(THIS.ListIndex, MSG_DIALOG_CONFIRM_YN, MSG_DIALOG_CONFIRM_YNC)
		    THISFORM.cmMessageValue.nIcon = MSG_SEVERITY_QUESTION
		  CASE THIS.ListIndex = MSG_DIALOG_CONFIRM_RC
		    THISFORM.cmMessageValue.nIcon = MSG_SEVERITY_WARNING
		  OTHERWISE
		    THISFORM.cmMessageValue.nIcon = MSG_SEVERITY_INFORM
		ENDCASE
		
		THIS.Parent.cboDefault.Refresh()
		THIS.Parent.cboIcon.Refresh()
		
	ENDPROC

	PROCEDURE cboDialog.Refresh
		IF THISFORM.cmMessageValue.nMsgType = MSG_TYPE_DIALOG
		  DODEFAULT()
		  THIS.Visible = .T.
		  THIS.Parent.lblDialog.Visible = .T.
		ELSE
		  THIS.Visible = .F.
		  THIS.Parent.lblDialog.Visible = .F.
		ENDIF
		
	ENDPROC

	PROCEDURE cboIcon.Refresh
		IF THISFORM.cmMessageValue.nMsgType = MSG_TYPE_DIALOG
		  * The order of rows for this combobox must match the numeric values of the ICON constants.
		  cboCombobox::Refresh()
		  THIS.Visible = .T.
		  THIS.Parent.lblIcon.Visible = .T.
		ELSE
		  THIS.Visible = .F.
		  THIS.Parent.lblIcon.Visible = .F.
		ENDIF
		
	ENDPROC

	PROCEDURE cboLanguage.Init
		*++
		* Initialize list of defined languages.
		*--
		LOCAL nCount, nIndex, cLocName, cKeyValue
		
		  DODEFAULT()
		  m.nIndex = 0
		  m.nCount = 0
		  DO WHILE m.nIndex >= 0
		    IF THISFORM.oRegistry.EnumKeys('%Local.Message.Languages', 'Language', @m.nIndex,, @m.cLocName, @m.cKeyValue) > 0
		      m.nCount = m.nCount + 1
		      DIMENSION THISFORM.aLanguages[m.nCount, 2]
		      THISFORM.aLanguages[m.nCount, 1] = m.cLocName
		      THISFORM.aLanguages[m.nCount, 2] = MLINE(m.cKeyValue, 1, 0)  && Lang ID is first line in value
		    ENDIF
		  ENDDO
		  THIS.RowSource = 'THISFORM.aLanguages'
		  THIS.ListIndex = 1
		  RETURN .T.
		
	ENDPROC

	PROCEDURE cboLanguage.Refresh
		* Set combobox to current display language
		LOCAL ix
		  THIS.ListIndex = 0
		  FOR ix = 1 TO ALEN(THISFORM.aLanguages, 1)
		    IF THISFORM.aLanguages[m.ix, 2] = THISFORM.cLanguageID
		      THIS.ListIndex = m.ix
		      EXIT
		    ENDIF
		  ENDFOR
		
	ENDPROC

	PROCEDURE cboLanguage.Valid
		THISFORM.cLanguageID = THISFORM.aLanguages[THIS.ListIndex, 2]
		THIS.Parent.Refresh
		
	ENDPROC

	PROCEDURE cboType.afterchange
		*++
		* Note that THIS.RowSource list order must match MSG_TYPE_xxx constants
		*--
		IF THIS.ListIndex = MSG_TYPE_DIALOG AND EMPTY(THISFORM.cmMessageValue.nDialog)
		  THISFORM.cmMessageValue.nDialog = MSG_DIALOG_CONFIRM_OK
		  THISFORM.cmMessageValue.nDefault = 1
		  THISFORM.cmMessageValue.nIcon = MSG_SEVERITY_INFORM
		ENDIF
		THISFORM.Refresh()
		
	ENDPROC

	PROCEDURE edtComment.Refresh
		THIS.ToolTipText = STRTRAN(THIS.Parent.lblDescription.Caption, ':', '')
		DODEFAULT()
		
	ENDPROC

	PROCEDURE edtLongText.loadvalue
		*++
		* Custom load-value() method. The value source for this field is accessed via
		* a method in the cmMessageValue object so we cannot use the standard
		* control cValuesource mechanism. We set cValuesource to the cVersion property
		* of the cmMessageValue object just so the control knows it is bound to some data.
		*--
		  THIS.lChanged = .F.
		  THIS.Value = THISFORM.cmMessageValue.GetText(MSGVAL_FIELD_LONG,, THISFORM.cLanguageID)
		  RETURN .T.
		
	ENDPROC

	PROCEDURE edtLongText.Refresh
		THIS.ToolTipText = STRTRAN(THIS.Parent.lblLongText.Caption, ':', '')  && used by Zoom dialog title
		IF THISFORM.cmMessageValue.nMsgType = MSG_TYPE_DIALOG
		  THIS.Visible = .T.
		  edtEditbox::Refresh()
		ELSE
		  THIS.Visible = .F.
		ENDIF
		THIS.Parent.lblLongtext.Refresh()
		
	ENDPROC

	PROCEDURE edtLongText.showcontrol
		THIS.ForeColor = IIF(THISFORM.cmMessageValue.HasTranslation(THISFORM.cLanguageID, MSGVAL_FIELD_LONG), 0, RGB(128,128,128))
		
	ENDPROC

	PROCEDURE edtLongText.storevalue
		THIS.lChanged = .F.
		THISFORM.cmMessageValue.SetText(THISFORM.cLanguageID, .F., THIS.Value)
		
		* Redisplay in dim or normal to reflect new value inheritence level
		THIS.Refresh()
		
	ENDPROC

	PROCEDURE edtText.loadvalue
		*++
		* Custom load-value() method. The value source for this field is accessed via
		* a method in the cmMessageValue object so we cannot use the standard
		* control cValuesource mechanism. We set cValuesource to the cVersion property
		* of the cmMessageValue object just so the control knows it is bound to some data.
		*--
		  THIS.lChanged = .F.
		  THIS.Value = THISFORM.cmMessageValue.GetText(MSGVAL_FIELD_SHORT,, THISFORM.cLanguageID)
		  RETURN .T.
		
	ENDPROC

	PROCEDURE edtText.Refresh
		* A bug in VFP causes internal corruption if statusbar text exceeds 100 characters
		IF THISFORM.cmMessageValue.nMsgType = MSG_TYPE_PROMPT
		  THIS.MaxLength = 100
		ELSE
		  THIS.MaxLength = 0
		ENDIF
		THIS.ToolTipText = STRTRAN(THIS.Parent.lblText.Caption, ':', '')
		DODEFAULT()
		
	ENDPROC

	PROCEDURE edtText.showcontrol
		THIS.ForeColor = IIF(THISFORM.cmMessageValue.HasTranslation(THISFORM.cLanguageID, MSGVAL_FIELD_SHORT), 0, RGB(128,128,128))
		
	ENDPROC

	PROCEDURE edtText.storevalue
		THIS.lChanged = .F.
		THISFORM.cmMessageValue.SetText(THISFORM.cLanguageID, THIS.Value)
		
		* Redisplay in dim or normal to reflect new value inheritence level
		THIS.Refresh()
		
	ENDPROC

	PROCEDURE lblLongtext.refresh
		THIS.Visible = (THISFORM.cmMessageValue.nMsgType = MSG_TYPE_DIALOG)
		
	ENDPROC

	PROCEDURE txtTooltip.loadvalue
		*++
		* Custom load-value() method. The value source for this field is accessed via
		* a method in the cmMessageValue object so we cannot use the standard
		* control cValuesource mechanism. We set cValuesource to the cVersion property
		* of the cmMessageValue object just so the control knows it is bound to some data.
		*--
		  THIS.lChanged = .F.
		  THIS.Value = THISFORM.cmMessageValue.GetText(MSGVAL_FIELD_PROMPT,, THISFORM.cLanguageID)
		  RETURN .T.
		
	ENDPROC

	PROCEDURE txtTooltip.Refresh
		IF THISFORM.cmMessageValue.nMsgType = MSG_TYPE_PROMPT
		  THIS.Visible = .T.
		  THIS.Parent.lbltooltip.Visible = .T.
		  DODEFAULT()
		ELSE
		  THIS.Visible = .F.
		  THIS.Parent.lbltooltip.Visible = .F.
		ENDIF
		
	ENDPROC

	PROCEDURE txtTooltip.showcontrol
		THIS.ForeColor = IIF(THISFORM.cmMessageValue.HasTranslation(THISFORM.cLanguageID, MSGVAL_FIELD_PROMPT), 0, RGB(128,128,128))
		
	ENDPROC

	PROCEDURE txtTooltip.storevalue
		THIS.lChanged = .F.
		THISFORM.cmMessageValue.SetText(THISFORM.cLanguageID,,, THIS.Value)
		
		* Redisplay in dim or normal to reflect new value inheritence level
		THIS.Refresh()
		
	ENDPROC

ENDDEFINE

DEFINE CLASS frmmultimessage AS frmformcustom OF "..\custom\cforms.vcx" 		&& Dialog for diplaying multiple messages in a single dialog.
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="lblText" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="imgIcon" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdMore" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cmdok1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lstText" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="edtExplain" UniqueID="" Timestamp="" />

	#INCLUDE "codemine.h"
	*<DefinedPropArrayMethod>
		*a: atext[1,2]		&& Array of message texts and explainations.
	*</DefinedPropArrayMethod>

	Caption = ""
	ControlBox = .F.
	Desktop = .T.
	DoCreate = .T.
	Height = 140
	Icon = ..\sw4\
	MaxHeight = (THIS.Height)
	MinHeight = (THIS.Height)
	MinWidth = (THIS.Width - 50)
	MousePointer = 1
	Name = "frmmultimessage"
	ShowWindow = 1
	Width = 477
	ZoomBox = .F.

	ADD OBJECT 'cmdMore' AS cmdcommandbuttoncustom WITH ;
		Caption = "Explain >>", ;
		creposition = Hfollow, ;
		Left = 396, ;
		MousePointer = 15, ;
		Name = "cmdMore", ;
		TabIndex = 2, ;
		Top = 112, ;
		Visible = .F.
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'Cmdok1' AS cmdokcustom WITH ;
		Cancel = .T., ;
		creposition = Hcenter, ;
		Left = 201, ;
		MousePointer = 15, ;
		Name = "Cmdok1", ;
		TabIndex = 1, ;
		Top = 112
		*< END OBJECT: ClassLib="..\custom\cbutton.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'edtExplain' AS edteditboxcustom WITH ;
		creposition = hStretch, ;
		Height = 62, ;
		IntegralHeight = .F., ;
		lallowzoom = .F., ;
		Left = 5, ;
		lreadonly = .T., ;
		Name = "edtExplain", ;
		ReadOnly = .T., ;
		TabIndex = 5, ;
		Top = 142, ;
		Visible = .F., ;
		Width = 466
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="editbox" />

	ADD OBJECT 'imgIcon' AS image WITH ;
		BackStyle = 0, ;
		Height = 32, ;
		Left = 11, ;
		MousePointer = 1, ;
		Name = "imgIcon", ;
		Picture = ..\graphics\w95mbx3.bmp, ;
		Top = 6, ;
		Width = 32
		*< END OBJECT: BaseClass="image" />

	ADD OBJECT 'lblText' AS lbltextcustom WITH ;
		AutoSize = .F., ;
		Caption = "", ;
		creposition = Hstretch, ;
		FontBold = .F., ;
		Height = 34, ;
		Left = 51, ;
		Name = "lblText", ;
		TabIndex = 3, ;
		Top = 8, ;
		Width = 374, ;
		WordWrap = .T.
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lstText' AS lstlistboxcustom WITH ;
		creposition = Hstretch, ;
		Height = 57, ;
		Left = 5, ;
		MousePointer = 1, ;
		Name = "lstText", ;
		RowSource = "THISFORM.aText", ;
		RowSourceType = 5, ;
		TabIndex = 4, ;
		Top = 48, ;
		Width = 466
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="listbox" />
	
	PROCEDURE Init
		LPARAMETER cTitle, cMessage
		*++
		* Display message object's array of multiple errors messages in a single dialog.
		* References the message manager's message array directly, since it is difficult
		* to pass array properties around by reference.
		*--
		LOCAL ix
		
		  IF NOT EMPTY(m.cTitle)
		    THIS.Caption = m.cTitle
		  ENDIF
		  IF NOT EMPTY(m.cMessage)
		    THIS.lblText.Caption = m.cMessage
		  ENDIF
		
		  * Show the explaination button at least one message has explaination text.
		  FOR ix = 1 TO ALEN(THISFORM.oMessage.aMessageText,1)
		    IF NOT EMPTY(THISFORM.oMessage.aMessageText[m.ix, 2])
		      THIS.cmdMore.Visible = .T.
		      EXIT
		    ENDIF
		  ENDFOR
		
		  THIS.lstText.RowSource = 'THISFORM.oMessage.aMessageText'
		  THIS.lstText.ListIndex = 1
		  RETURN DODEFAULT()
		
	ENDPROC

	PROCEDURE validateform
		* No form validation here to prevent recursion into this same dialog.
		RETURN .T.
		
	ENDPROC

	PROCEDURE cmdMore.Click
		LOCAL nBottomOffset
		
		* Make new bottom offset the same as left edge offset.
		m.nBottomOffset = THISFORM.edtExplain.Left
		THISFORM.MaxHeight = -1
		THISFORM.Height = THISFORM.edtExplain.Top + THISFORM.edtExplain.Height + m.nBottomOffset
		THISFORM.MinHeight = THISFORM.Height
		THISFORM.nOriginalHeight = THISFORM.Height
		
		THISFORM.edtExplain.nBottom = m.nBottomOffset
		THISFORM.edtExplain.Visible = .T.
		THISFORM.edtExplain.cReposition = 'vStretch,hStretch'
		
		THIS.Enabled = .F.
		
	ENDPROC

	PROCEDURE edtExplain.Init
		* This edit box we need the cReposition features of the codemine clas, but nothing else,
		* since we want to avoid recursive calls to message dialog methods.
		THIS.BackColor = THISFORM.BackColor
		
		* Bypass standard Codemine init code.
		RETURN .T.
		
	ENDPROC

	PROCEDURE edtExplain.KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		
		IF m.nKeyCode % 128 >= ASC(' ') OR m.nKeyCode = 7
		  NODEFAULT
		ENDIF
		
	ENDPROC

	PROCEDURE edtExplain.Refresh
		* Skip stanard codemine refresh code
		RETURN .T.
		
	ENDPROC

	PROCEDURE edtExplain.RightClick
		* Deffer to form context menu.
		THISFORM.RightClick()
		
	ENDPROC

	PROCEDURE lstText.DblClick
		* Double clicking on a line open explaination window if any.
		IF THISFORM.cmdMore.Visible AND THISFORM.cmdMore.Enabled
		  THISFORM.cmdMore.Click()
		ENDIF
		
	ENDPROC

	PROCEDURE lstText.RightClick
		RETURN THIS.Parent.RightClick()
		
	ENDPROC

	PROCEDURE lstText.When
		THISFORM.edtExplain.Value = IIF(THIS.ListIndex = 0, '', THISFORM.oMessage.aMessageText[THIS.ListIndex, 2])
		IF NOT THISFORM.edtExplain.Visible
		  THISFORM.cmdMore.Enabled = THIS.ListIndex > 0 AND NOT EMPTY(THISFORM.oMessage.aMessageText[THIS.ListIndex, 2])
		ENDIF
		RETURN .T.
		
	ENDPROC

ENDDEFINE

DEFINE CLASS frmnastyerror AS frmmodaldialog OF "cmforms.vcx" 		&& Fatal coding error message dialog with stack dump.
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Shape1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblSource" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblMessage" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblLocation" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cntcontainer1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cntcontainer1.cmdCancel" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cntcontainer1.cmdIgnore" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cntcontainer1.cmdDebug" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cntcontainer1.cmdSuspend" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cntcontainer1.cmdCopy" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cntcontainer1.Cmdcommandbuttoncustom1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbltext1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="edtStack" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Imgimage1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcEmail" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="edtBody" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cmdcommandbuttoncustom1" UniqueID="" Timestamp="" />

	#INCLUDE "codemine.h"
	*<DefinedPropArrayMethod>
		*m: sendemail
		*p: cerrmethod		&& Method or program where error occured
		*a: aerrinfo[7,0]		&& Error information array.
	*</DefinedPropArrayMethod>

	Caption = "Application Error"
	cbindingmanagerclass = cmBindingManager
	cerrmethod = 		&& Method or program where error occured
	cformbackground = .NULL.
	Closable = .F.
	Desktop = .T.
	DoCreate = .T.
	Height = 201
	lreleaseonclose = .F.
	lrememberposition = .F.
	lremembersize = .F.
	lwindowmenu = .F.
	MinHeight = (THIS.Height)
	MinWidth = (THIS.Width)
	Name = "frmnastyerror"
	oregistry = .NULL.
	osecurity = .NULL.
	ostring = .NULL.
	Width = 534
	WindowType = 1

	ADD OBJECT 'Cmdcommandbuttoncustom1' AS cmdcommandbuttoncustom WITH ;
		Caption = "\<Send Email To Support", ;
		Height = 23, ;
		Left = 195, ;
		Name = "Cmdcommandbuttoncustom1", ;
		TabIndex = 2, ;
		Top = 408, ;
		Width = 144
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'Cntcontainer1' AS cntcontainercustom WITH ;
		BackStyle = 0, ;
		BorderWidth = 0, ;
		creposition = vFollow,hCenter, ;
		Height = 27, ;
		Left = 12, ;
		Name = "Cntcontainer1", ;
		TabIndex = 1, ;
		Top = 168, ;
		Width = 523
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="container" />

	ADD OBJECT 'Cntcontainer1.cmdCancel' AS cmdcommandbuttoncustom WITH ;
		Caption = "\<Cancel", ;
		Height = 23, ;
		Left = 2, ;
		Name = "cmdCancel", ;
		TabIndex = 5, ;
		Top = 0, ;
		Width = 77
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'Cntcontainer1.Cmdcommandbuttoncustom1' AS cmdcommandbuttoncustom WITH ;
		Caption = "Report Error", ;
		Height = 23, ;
		Left = 441, ;
		Name = "Cmdcommandbuttoncustom1", ;
		TabIndex = 4, ;
		Top = 0, ;
		Width = 72
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'Cntcontainer1.cmdCopy' AS cmdcommandbuttoncustom WITH ;
		Caption = "Copy to Clipboard", ;
		Height = 23, ;
		Left = 338, ;
		Name = "cmdCopy", ;
		TabIndex = 4, ;
		Top = 0, ;
		Width = 96
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'Cntcontainer1.cmdDebug' AS cmdcommandbuttoncustom WITH ;
		Caption = "\<Debugger", ;
		Height = 23, ;
		Left = 254, ;
		Name = "cmdDebug", ;
		TabIndex = 3, ;
		Top = 0, ;
		Width = 77
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'Cntcontainer1.cmdIgnore' AS cmdcommandbuttoncustom WITH ;
		Cancel = .T., ;
		Caption = "\<Ignore", ;
		Default = .T., ;
		FontBold = .T., ;
		Height = 23, ;
		Left = 86, ;
		Name = "cmdIgnore", ;
		TabIndex = 1, ;
		Top = 0, ;
		Width = 77
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'Cntcontainer1.cmdSuspend' AS cmdcommandbuttoncustom WITH ;
		Caption = "\<Suspend", ;
		Height = 23, ;
		Left = 170, ;
		Name = "cmdSuspend", ;
		TabIndex = 2, ;
		Top = 0, ;
		Width = 77
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'edtBody' AS edteditboxcustom WITH ;
		Height = 106, ;
		Left = 36, ;
		Name = "edtBody", ;
		TabIndex = 9, ;
		Top = 288, ;
		Width = 444
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="editbox" />

	ADD OBJECT 'edtStack' AS edteditbox WITH ;
		Anchor = 0, ;
		creposition = hStretch,vStretch, ;
		Height = 53, ;
		Left = 9, ;
		Name = "edtStack", ;
		ReadOnly = .T., ;
		TabIndex = 7, ;
		Top = 104, ;
		Width = 519
		*< END OBJECT: ClassLib="codemine.vcx" BaseClass="editbox" />

	ADD OBJECT 'Imgimage1' AS imgimage WITH ;
		Height = 32, ;
		Left = 10, ;
		Name = "Imgimage1", ;
		Picture = ..\graphics\w95mbx1.bmp, ;
		Top = 9, ;
		Width = 32
		*< END OBJECT: ClassLib="codemine.vcx" BaseClass="image" />

	ADD OBJECT 'Lbllabelcustom1' AS lbllabelcustom WITH ;
		Caption = "From:", ;
		Left = 48, ;
		Name = "Lbllabelcustom1", ;
		Top = 228
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom3' AS lbllabelcustom WITH ;
		Caption = "Describe what you were doing when this error occurrred:", ;
		FontBold = .T., ;
		Left = 37, ;
		Name = "Lbllabelcustom3", ;
		Top = 270
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblLocation' AS lbltextcustom WITH ;
		AutoSize = .F., ;
		Caption = "Location", ;
		creposition = hStretch, ;
		FontBold = .F., ;
		FontSize = 9, ;
		Height = 15, ;
		Left = 54, ;
		Name = "lblLocation", ;
		TabIndex = 4, ;
		Top = 6, ;
		Width = 385
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblMessage' AS lbltextcustom WITH ;
		AutoSize = .F., ;
		Caption = "Error Message", ;
		creposition = hStretch, ;
		FontBold = .F., ;
		FontSize = 9, ;
		Height = 30, ;
		Left = 13, ;
		Name = "lblMessage", ;
		TabIndex = 4, ;
		Top = 56, ;
		Width = 426, ;
		WordWrap = .T.
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblSource' AS lbltextcustom WITH ;
		AutoSize = .F., ;
		Caption = "An unexpected system error has occurred. Please make a note of the error message details and report it to your system administrator.", ;
		creposition = hStretch, ;
		FontBold = .F., ;
		FontSize = 8, ;
		Height = 28, ;
		Left = 54, ;
		Name = "lblSource", ;
		TabIndex = 3, ;
		Top = 24, ;
		Width = 385, ;
		WordWrap = .T.
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbltext1' AS lbltextcustom WITH ;
		Caption = "Call Stack:", ;
		FontItalic = .T., ;
		FontSize = 8, ;
		Height = 16, ;
		Left = 7, ;
		Name = "Lbltext1", ;
		TabIndex = 5, ;
		Top = 88, ;
		Width = 56
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Shape1' AS shape WITH ;
		BorderStyle = 0, ;
		ColorSource = 0, ;
		Height = 16, ;
		Left = 12, ;
		Name = "Shape1", ;
		Top = 17, ;
		Width = 28
		*< END OBJECT: BaseClass="shape" />

	ADD OBJECT 'txtcEmail' AS txttextboxcustom WITH ;
		Height = 20, ;
		Left = 92, ;
		Name = "txtcEmail", ;
		TabIndex = 8, ;
		Top = 228, ;
		Width = 388
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />
	
	PROCEDURE contextmenubuild
		  * Special option to copy error info to clipboard
		  THISFORM.ContextMenuBar(CTX_BAR_CUSTOM + 1, 'Copy Error Details to Clipboard')
		  THISFORM.ContextMenuSeparator(CTX_BAR_CTL_SEP3)
		
		  * Add these 2 standard bars, but no other default form bars.
		  THISFORM.ContextMenuBar(CTX_BAR_FRM_CENTER, '%barCenter')
		  THISFORM.ContextMenuBar(CTX_BAR_FRM_RESTORE, '%barRestoreSize')
		  IF THIS.Width = THIS.nOriginalWidth AND THIS.Height = THIS.nOriginalHeight
		    SET SKIP OF BAR CTX_BAR_FRM_RESTORE OF ctxMenu .T.
		  ENDIF
		
	ENDPROC

	PROCEDURE contextmenuexecute
		LPARAMETERS cOption
		
		  IF 'Copy' $ PROPER(m.cOption)
		    _CLIPTEXT = VERSION(1) + CR_LF ;
		              + 'CodeMine ' + CODEMINE_FOUNDATION_VERSION + CR_LF ;
		              + THISFORM.lblLocation.Caption + CR_LF ;
		              + THISFORM.lblSource.Caption + CR_LF ;
		              + THISFORM.lblMessage.Caption + CR_LF + CR_LF ;
		              + THISFORM.lblText1.Caption + CR_LF ;
		              + THISFORM.edtStack.Value
		    RETURN .T.
		  ENDIF
		  RETURN DODEFAULT(m.cOption)
		
	ENDPROC

	PROCEDURE Init
		LPARAMETER cMessage, cMethod, nLine
		* This (and most framework modal dialogs) has form.Desktop set to .T. so they will not be
		* clipped when called from an SDI or other Top-Level form, without the containing VFP window.
		
		  DODEFAULT()
		
		  =AERROR(THISFORM.aErrInfo)
		
		  * If a grid column.ControlSource is undefined, we get an odd message from VFP.
		  * We try to provide a more descriptive message here.
		  IF THISFORM.aErrInfo[1] = 2005 AND EMPTY(m.cMessage)
		    m.cMessage = 'A Grid Column ControlSource property is set to an undefined value'
		  ENDIF
		
		  * AERROR doesn't return an accurate msg parameter once this form is created,
		  * so we pass in the original error message text.
		  IF NOT EMPTY(m.cMessage)
		    THISFORM.aErrInfo[2] = m.cMessage
		  ENDIF
		
		  THISFORM.cErrMethod = IIF(EMPTY(m.cMethod), '', PROPER(m.cMethod)) ;
		                      + IIF(EMPTY(m.nLine), '', ' line ' + LTRIM(STR(m.nLine)))
		
		  THIS.lblLocation.Refresh()
		  THIS.lblMessage.Refresh()
		  THIS.edtStack.SetValue(THIS.oMessage.cErrorCallStack)
		
		  * Play the special Codemine error sound
		  IF NOT ISNULL(THIS.oMessage) AND NOT EMPTY(THIS.oMessage.cFatalErrorSound)
		    IF NOT PROPER(THIS.oMessage.cFatalErrorSound) == 'Default'
		      SET BELL TO (FULLPATH(THIS.oMessage.cFatalErrorSound)),1
		    ELSE
		      SET BELL TO
		    ENDIF
		    ??CHR(7)
		    SET BELL TO
		  ENDIF
		
	ENDPROC

	PROCEDURE loadglobalreferences
		* Dont load any global service object references, or check for Codemine env.
		RETURN .T.
		
	ENDPROC

	PROCEDURE Resize
		* Nothing
	ENDPROC

	PROCEDURE sendemail
		LOCAL lcSender, lcMailServer, lcSenderName, llDirectDepOnly
		
		* If wwipstuff.dll doesn't exist on the pc, tell them to send an email themselves
		IF NOT FILE('wwipstuff.dll')
		   THISFORM.omessage.DISPLAY('Missing critical file for sending email. Please contact SherWare support.')
		   RETURN
		ENDIF
		
		lcClient  = m.goApp.cClient
		lcCompany = m.goApp.cRegCompany
		lcRegCode = m.goApp.cCode
		lcVersion = m.goApp.cFileVersion
		lcDate    = DTOC(FDATE(ALLTRIM(m.goApp.cexecutable)))
		lcTime    = FTIME(ALLTRIM(m.goApp.cexecutable))
		lcSender  = THISFORM.txtcEmail.VALUE
		lcSubject = 'Error: ' + TRANSFORM(thisform.aerrinfo[1]) + ' in ' + thisform.cerrmethod
		lcBody    = 'Client:  ' + lcClient + CHR(10) + ;
		   'Company:  ' + lcCompany + CHR(10) + ;
		   'Software: ' + ALLTRIM(UPPER(m.goapp.cexecutable)) + CHR(10) + ;
		   'RegCode:  ' + lcRegCode + CHR(10) + ;
		   'Version:  ' + lcVersion + ' Date: ' + lcDate + ' Time: ' + lcTime + CHR(10) + chr(10) + ;
		   THISFORM.edtBody.VALUE + CHR(10) + CHR(10) + ;
		   thisform.lblmessage.Caption + CHR(10) + CHR(10) + ;
		   thisform.edtstack.value
		IF NOT '@' $ lcSender
		   THISFORM.omessage.DISPLAY('Invalid company email address. Cannot send emails.')
		   RETURN
		ENDIF
		
		*  Here, we'll send an email automatically to let us know the backup is there
		o=CREATEOBJECT("wwIPStuff","C:\Develop\Wconnect\")
		SET MEMOWIDTH TO 8192
		
		*** Sending SMTP Mail
		o.cMailServer  = 'mail.sherware.com'
		o.cSenderEmail = ALLT(lcSender)
		o.cSenderName  = ALLT(lcCompany)
		
		
		o.cRecipient   = 'supporttrk@sherware.com'
		o.cCCList      = ""
		o.cBCCList     = ""
		o.cSubject     = lcSubject
		o.cMessage     = lcBody
		
		WAIT WIND NOWAIT "Sending Email To SherWare Support"
		llResult = o.SendMail()       && Send again - wait for completion
		
		IF !llResult
		   THISFORM.omessage.warning('Unable to Send Email. Try Again Later.')
		ELSE
		   thisform.omessage.display('Email Sent to Support')
		   thisform.Height = 200
		ENDIF
		
		RETURN
		
	ENDPROC

	PROCEDURE Cmdcommandbuttoncustom1.Click
		thisform.sendemail()
	ENDPROC

	PROCEDURE Cntcontainer1.cmdCancel.Click
		THISFORM.uValue = 'CANCEL'
		THISFORM.Release()
		
	ENDPROC

	PROCEDURE Cntcontainer1.Cmdcommandbuttoncustom1.Click
		thisform.Height = 441
		thisform.txtcEmail.SetFocus()
		
	ENDPROC

	PROCEDURE Cntcontainer1.cmdCopy.Click
		THISFORM.ContextmenuExecute('Copy')
		
	ENDPROC

	PROCEDURE Cntcontainer1.cmdDebug.Click
		THISFORM.uValue = 'DEBUG'
		THISFORM.Release()
		
	ENDPROC

	PROCEDURE Cntcontainer1.cmdDebug.Init
		THIS.Visible = VERSION(2) != 0
		DODEFAULT()
		
	ENDPROC

	PROCEDURE Cntcontainer1.cmdIgnore.Click
		THISFORM.uValue = 'IGNORE'
		THISFORM.Release()
		
	ENDPROC

	PROCEDURE Cntcontainer1.cmdSuspend.Click
		THISFORM.uValue = 'SUSPEND'
		THISFORM.Release()
		
	ENDPROC

	PROCEDURE Cntcontainer1.cmdSuspend.Init
		THIS.Visible = VERSION(2) != 0
		DODEFAULT()
		
	ENDPROC

	PROCEDURE edtStack.contextmenubuild
		* Don't add default editbox menu items
		
	ENDPROC

	PROCEDURE lblLocation.Refresh
		LOCAL cText
		m.cText = 'Error #' + LTRIM(STR(THISFORM.aErrInfo[1])) ;
		             + ' in ' + THISFORM.cErrMethod
		
		IF NOT INLIST(THISFORM.aErrInfo[1], 1427, 1429, 1526) AND NOT ISNULL(THISFORM.aErrInfo[4]) 
		  m.cText = m.cText + ', workarea '+ LTRIM(STR(THISFORM.aErrInfo[4]))
		  IF NOT EMPTY(THISFORM.aErrInfo[4]) AND USED(THISFORM.aErrInfo[4])
		    m.cText = m.cText + '(' + ALIAS(THISFORM.aErrInfo[4]) + ')'
		  ENDIF
		  IF THISFORM.aErrInfo[1] = 1539 AND NOT ISNULL(THISFORM.aErrInfo[5])
		    DO CASE
		      CASE THISFORM.aErrInfo[5] = 1
		        m.cText = m.cText + ' Insert Trigger'
		      CASE THISFORM.aErrInfo[5] = 2
		        m.cText = m.cText + ' Update Trigger'
		      CASE THISFORM.aErrInfo[5] = 3
		        m.cText = m.cText + ' Delete Trigger'
		    ENDCASE
		  ENDIF
		ENDIF
		THIS.Caption = m.cText
		
	ENDPROC

	PROCEDURE lblMessage.Refresh
		THIS.Caption = LEFT(THISFORM.aErrInfo[2], 254)
		
	ENDPROC

	PROCEDURE lblSource.Init
		IF VERSION(2) != 0 AND NOT EMPTY(MESSAGE(1))
		  THIS.Caption = LEFT('"' + MESSAGE(1) + '"', 250)
		ENDIF
		DODEFAULT()
		
	ENDPROC

ENDDEFINE

DEFINE CLASS frmprogress AS frmformcustom OF "..\custom\cforms.vcx" 
	*<ClassComment>
		*Progress indicator
		*bar
	*</ClassComment>
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="lblCaption" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntProgressBar" UniqueID="" Timestamp="" />

	#INCLUDE "codemine.h"
	*<DefinedPropArrayMethod>
		*m: closeprogress
		*m: setprogressmessage		&& Set message text displayed in progress window.
		*m: setprogressrange		&& Sets maximum and minimum values for progress bar.
		*m: updateprogress		&& Update progress display.
		*p: lneedrefresh		&& Need to redraw beveled boxes.
		*p: nstarttime		&& Time progress window initialized.
		*p: nthreshold		&& Seconds to wait before displaying progress.
	*</DefinedPropArrayMethod>

	BorderStyle = 2
	Caption = ""
	Closable = .F.
	ControlBox = .F.
	Desktop = .T.
	DoCreate = .T.
	Height = 64
	lwindowmenu = .F.
	MaxButton = .F.
	MinButton = .F.
	MousePointer = 11
	Movable = .F.
	Name = "frmprogress"
	nstarttime = 0		&& Time progress window initialized.
	nthreshold = 2		&& Seconds to wait before displaying progress.
	omessage = .F.
	oregistry = .F.
	ShowWindow = 1
	Width = 450

	ADD OBJECT 'cntProgressBar' AS cntprogressbar WITH ;
		creposition = Vfollow, ;
		Height = 17, ;
		Left = 10, ;
		Name = "cntProgressBar", ;
		Top = 31, ;
		Width = 429, ;
		lblPercent.Name = "lblPercent", ;
		shpprogress.Name = "shpprogress"
		*< END OBJECT: ClassLib="cmgadget.vcx" BaseClass="container" />

	ADD OBJECT 'lblCaption' AS lbltextcustom WITH ;
		AutoSize = .F., ;
		Caption = "Message 1", ;
		FontBold = .T., ;
		FontItalic = .F., ;
		FontSize = 9, ;
		Height = 16, ;
		Left = 9, ;
		MousePointer = 11, ;
		Name = "lblCaption", ;
		Top = 8, ;
		Width = 431, ;
		ZOrderSet = 4
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />
	
	PROCEDURE afterload
		* Save autoYield setting, and force it on while progress bar exists.
		* This is necessary during long loops so that the screen & forms 
		* will be able to paint and respond to Windows while the loop runs.
		* Original setting is restored on destroy().
		THIS.AddProperty('lOldAutoYield', _VFP.AutoYield)
		_VFP.AutoYield = .T.
		
	ENDPROC

	PROCEDURE closeprogress
		THIS.Release()
		
	ENDPROC

	PROCEDURE Destroy
		_VFP.AutoYield = THIS.lOldAutoYield
		
		* There is no need to call the default Desroy code here.
		RETURN .T.
		
	ENDPROC

	PROCEDURE Init
		LPARAMETERS cMessage, nMinCount, nMaxCount
		
		  THIS.nStartTime = SECONDS()
		  THIS.lblCaption.Caption = IIF(EMPTY(m.cMessage), '', m.cMessage)
		  IF PCOUNT() > 1
		    THIS.cntProgressBar.SetRange(m.nMinCount, m.nMaxCount)
		  ENDIF
		  RETURN DODEFAULT()
		
	ENDPROC

	PROCEDURE Paint
		* Redraw beveled lines if window was minimized the first time.
		IF THISFORM.lNeedRefresh AND (_SCREEN.WindowState != 1)
		  THISFORM.lNeedRefresh = .F.
		  THISFORM.Refresh()
		ENDIF
		
	ENDPROC

	PROCEDURE Refresh
		THISFORM.Draw()
		THISFORM.BeveledBox(2, 2, THISFORM.Width - 2, THISFORM.Height - 2)
		
		* If the main window is minimized, boxes won't show up, so we must repaint them.
		THISFORM.lNeedRefresh = (_SCREEN.WindowState = 1)
		
	ENDPROC

	PROCEDURE setprogressmessage		&& Set message text displayed in progress window.
		LPARAMETER cMsg
		
		IF THIS.lblCaption.Visible
		  THIS.lblCaption.Caption = IIF(EMPTY(m.cMsg), '', m.cMsg)
		  IF THIS.Visible
		    THIS.Draw()
		  ENDIF
		ENDIF
		
	ENDPROC

	PROCEDURE setprogressrange		&& Sets maximum and minimum values for progress bar.
		LPARAMETER nMinCount, nMaxCount
		
		  THIS.cntProgressBar.SetRange(m.nMinCount, m.nMaxCount)
		
	ENDPROC

	PROCEDURE Show
		LPARAMETERS nStyle
		
		* Form is not displayed until Threshold time is exceeded.
		IF THIS.nThreshold > 0
		  NODEFAULT
		ENDIF
		
	ENDPROC

	PROCEDURE updateprogress		&& Update progress display.
		LPARAMETER nValue
		LOCAL lUpdated, nTime
		
		m.lUpdated = THISFORM.cntProgressBar.Update(m.nValue)
		
		IF NOT THIS.Visible
		  m.nTime = ABS(SECONDS() - THIS.nStartTime)
		  IF (m.nTime > THIS.nThreshold / 2 AND THISFORM.cntProgressBar.Percent() < 50) ;
		  OR m.nTime > THIS.nThreshold AND (THISFORM.cntProgressBar.Percent() < 90 OR m.nTime > THIS.nThreshold * 1.5)
		    m.lUpdated = .T.
		    THISFORM.Visible = .T.
		    THISFORM.Refresh()
		  ENDIF
		ENDIF
		
		IF THIS.Visible AND m.lUpdated
		  THISFORM.Draw()
		ENDIF
		
	ENDPROC

ENDDEFINE

DEFINE CLASS frmprogressex AS frmprogress OF "cmdialog.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="lblCaption2" UniqueID="" Timestamp="" />

	#INCLUDE "codemine.h"
	DoCreate = .T.
	Height = 79
	Name = "frmprogressex"
	cntprogressbar.lblPercent.Name = "lblPercent"
	cntprogressbar.Left = 10
	cntprogressbar.Name = "cntprogressbar"
	cntprogressbar.SHPPROGRESS.Name = "SHPPROGRESS"
	cntprogressbar.Top = 50
	lblCaption.Left = 10
	lblCaption.Name = "lblCaption"
	lblCaption.Top = 7

	ADD OBJECT 'lblCaption2' AS lbltextcustom WITH ;
		Caption = "", ;
		Height = 16, ;
		Left = 13, ;
		Name = "lblCaption2", ;
		Top = 27, ;
		Width = 2
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />
	
	PROCEDURE Init
		LPARAMETER cTitle, cMessage, nMin, nMax
		
		  DODEFAULT(m.cTitle, m.nMin, m.nMax)
		  IF NOT EMPTY(m.cMessage)
		    THIS.lblCaption2.Caption = m.cMessage
		  ENDIF
		
	ENDPROC

	PROCEDURE setprogressmessage		&& Set message text displayed in progress window.
		LPARAMETER cMessage
		
		IF NOT EMPTY(m.cMessage)
		  THIS.lblCaption2.Caption = m.cMessage
		  IF THIS.Visible
		    THIS.Draw()
		  ENDIF
		ENDIF
		
	ENDPROC

ENDDEFINE

DEFINE CLASS frmviewtoolbars AS frmformcustom OF "..\custom\cforms.vcx" 		&& Toolbar view dialog
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="lstToolbars" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cntokcancelapplycustom1" UniqueID="" Timestamp="" />

	#INCLUDE "codemine.h"
	Caption = ""
	chelpkey = hlpViewToolbars
	DoCreate = .T.
	Height = 156
	lrememberposition = .T.
	lremembersize = .T.
	MinButton = .F.
	MinHeight = (THIS.Height-50)
	MinWidth = (THIS.Width)
	Name = "frmviewtoolbars"
	Width = 244

	ADD OBJECT 'Cntokcancelapplycustom1' AS cntokcancelapplycustom WITH ;
		BackStyle = 0, ;
		creposition = vFollow,hCenter, ;
		Height = 27, ;
		Left = 3, ;
		Name = "Cntokcancelapplycustom1", ;
		Top = 126, ;
		Width = 239, ;
		cmdapply.Name = "cmdapply", ;
		cmdcancel.Name = "cmdcancel", ;
		cmdok.Name = "cmdok"
		*< END OBJECT: ClassLib="..\custom\cbutton.vcx" BaseClass="container" />

	ADD OBJECT 'lstToolbars' AS lstchecklist WITH ;
		chelpkey = hlpViewToolbars, ;
		creposition = vStretch,hStretch, ;
		FontSize = 8, ;
		Height = 116, ;
		Left = 6, ;
		Name = "lstToolbars", ;
		Top = 5, ;
		Width = 232
		*< END OBJECT: ClassLib="cmgadget.vcx" BaseClass="listbox" />
	
	PROCEDURE confirmcancel
		RETURN .T.
		
	ENDPROC

	PROCEDURE saveallchanges
		LOCAL ix, cToolName
		
		* Loop thru each toolbar and open or close it as appropriate.
		FOR ix = 1 TO THIS.lstToolbars.Listcount
		  m.cToolName = THISFORM.oStateManager.aToolbars[m.ix, TOOL_NAME]
		  IF THIS.lstToolbars.GetChecked(m.ix)
		    IF NOT THISFORM.oStateManager.IsToolbarOpen(m.cToolName)
		      THISFORM.oStateManager.OpenToolbar(m.cToolName)
		    ENDIF
		  ELSE
		    THISFORM.oStateManager.CloseToolbar(m.cToolName)
		  ENDIF
		ENDFOR
		
	ENDPROC

	PROCEDURE lstToolbars.Init
		LOCAL ix, cName
		
		DODEFAULT()
		
		FOR ix = 1 TO ALEN(THISFORM.oStateManager.aToolbars, 1)
		  m.cName = THISFORM.oStateManager.aToolbars[m.ix, TOOL_NAME]
		  IF NOT EMPTY(m.cName)
		    THIS.AddItem(' ' + THISFORM.oMessage.TranslateString('%' + m.cName))
		    THIS.SetChecked(THIS.ListCount, THISFORM.oStateManager.IsToolbarOpen(m.cName))
		  ENDIF
		ENDFOR
		
	ENDPROC

ENDDEFINE

DEFINE CLASS frmzoomedit AS frmmodaldialogcustom OF "..\custom\cforms.vcx" 		&& Zoom edit dialog for textbox and editbox controls.
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="edtText" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntOkCancel" UniqueID="" Timestamp="" />

	#INCLUDE "codemine.h"
	*<DefinedPropArrayMethod>
		*p: cvalue		&& Edited string return value.
	*</DefinedPropArrayMethod>

	Caption = "Zoom Edit"
	cbindingmanagerclass = cmBindingManager
	Comment = "Use base BindMan so form works ok without dev env open"
	cvalue = 		&& Edited string return value.
	Desktop = .T.
	DoCreate = .T.
	Height = 118
	lreleaseonclose = .F.
	lrememberposition = .T.
	lremembersize = .T.
	MinHeight = (THIS.Height-20)
	MinWidth = (THIS.Width-50)
	Name = "frmzoomedit"
	oapp = .F.
	Width = 380

	ADD OBJECT 'cntOkCancel' AS cntokcancelcustom WITH ;
		creposition = vFollow,hCenter, ;
		Height = 26, ;
		Left = 108, ;
		Name = "cntOkCancel", ;
		Top = 87, ;
		Width = 164, ;
		cmdCancel.Name = "cmdCancel", ;
		cmdOK.Name = "cmdOK"
		*< END OBJECT: ClassLib="..\custom\cbutton.vcx" BaseClass="container" />

	ADD OBJECT 'edtText' AS edteditboxcustom WITH ;
		creposition = vStretch,hStretch, ;
		Height = 68, ;
		lallowzoom = .F., ;
		Left = 6, ;
		Name = "edtText", ;
		Top = 7, ;
		Width = 368
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="editbox" />
	
	PROCEDURE beforeclose
		LPARAMETER nReason
		  * Return true if user did not cancel, and the edit box value was changed.
		  IF (m.nReason != SAVE_BY_CANCEL) AND NOT THIS.cValue == THIS.edtText.Value
		    THIS.uValue = .T.
		    THIS.cValue = THIS.edtText.Value
		  ENDIF
		  RETURN .T.
		
	ENDPROC

	PROCEDURE Init
		LPARAMETER cValue, cTitle, lReadonly, lTabs, lEnter
		
		IF NOT EMPTY(m.cTitle)
		  THIS.Caption = m.cTitle
		ENDIF
		
		THIS.cValue = m.cValue
		WITH THIS.edtText
		  .lReadOnly = m.lReadOnly
		  .AllowTabs = m.lTabs
		  .lAllowEnter = m.lEnter
		  .SetValue(m.cValue)
		  .Refresh()
		ENDWITH
		
		* Hide the cancel button if it is read-only.
		IF m.lReadOnly
		  THIS.cntOkCancel.cmdCancel.Tabstop = .F.
		  THIS.cntOkCancel.Width = THIS.cntOkCancel.Width / 2
		ENDIF
		
		RETURN DODEFAULT()
		
	ENDPROC

ENDDEFINE
