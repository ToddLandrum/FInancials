*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="cmbutton.vcx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
*< LIBCOMMENT: CodeMine common dialog interface button classes />
*
DEFINE CLASS cmdapply AS cmdcommandbuttoncustom OF "..\custom\ccontrol.vcx" 		&& Apply button
 	*< CLASSDATA: Baseclass="commandbutton" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "codemine.h"
	*<DefinedPropArrayMethod>
		*p: lusestatemanager		&& Set to .T. to enable/disable Apply button using the State Manager "Form Edit Save" state.
	*</DefinedPropArrayMethod>

	Caption = "\<Apply"
	llocalizecaption = .T.
	Name = "cmdapply"
	
	PROCEDURE Click
		THISFORM.Save()
		DODEFAULT()
		
	ENDPROC

	PROCEDURE Init
		IF THIS.lUseStateManager AND NOT ISNULL(THISFORM.oStateManager)
		  THISFORM.oStateManager.RequestRefresh('Form Edit Save', THIS)
		ENDIF
		RETURN DODEFAULT()
		
	ENDPROC

	PROCEDURE Refresh
		IF THIS.lUseStateManager AND NOT ISNULL(THISFORM.oStateManager)
		  THIS.lEnabled = NOT EMPTY(THISFORM.oStateManager.GetValue('Form Edit Save', THISFORM))
		ENDIF
		RETURN DODEFAULT()
		
	ENDPROC

ENDDEFINE

DEFINE CLASS cmdcancel AS cmdcommandbuttoncustom OF "..\custom\ccontrol.vcx" 		&& Cancel button
 	*< CLASSDATA: Baseclass="commandbutton" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "codemine.h"
	Cancel = .T.
	Caption = "\<Cancel"
	llocalizecaption = .T.
	lskipvalid = .T.
	Name = "cmdcancel"
	
	PROCEDURE Click
		IF THISFORM.BeforeClose(CLOSE_BY_CANCEL)
		  THISFORM.Release()
		ELSE
		  DODEFAULT()  && Restore focus to original control if cancel was cancelled
		ENDIF
		
	ENDPROC

ENDDEFINE

DEFINE CLASS cmdclose AS cmdcommandbuttoncustom OF "..\custom\ccontrol.vcx" 
 	*< CLASSDATA: Baseclass="commandbutton" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "codemine.h"
	Cancel = .T.
	Caption = "Close"
	llocalizecaption = .T.
	Name = "cmdclose"
	StatusBarText = " "
	
	PROCEDURE Click
		IF NOT THISFORM.Close(CLOSE_BY_CONTROL)  && Same code as clicking window's closebox
		  DODEFAULT()
		ENDIF
		
	ENDPROC

ENDDEFINE

DEFINE CLASS cmdno AS cmdcommandbuttoncustom OF "..\custom\ccontrol.vcx" 		&& No button
 	*< CLASSDATA: Baseclass="commandbutton" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "codemine.h"
	Caption = "\<No"
	llocalizecaption = .T.
	Name = "cmdno"
	StatusBarText = " "
	
	PROCEDURE Click
		IF NOT THISFORM.Close(CLOSE_BY_NO)
		  DODEFAULT()
		ENDIF
		
	ENDPROC

ENDDEFINE

DEFINE CLASS cmdok AS cmdcommandbuttoncustom OF "..\custom\ccontrol.vcx" 		&& OK button
 	*< CLASSDATA: Baseclass="commandbutton" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "codemine.h"
	Caption = "\<OK"
	Default = .T.
	Name = "cmdok"
	
	PROCEDURE Click
		IF NOT THISFORM.Close(CLOSE_BY_OK)
		  DODEFAULT()
		ENDIF
		
	ENDPROC

ENDDEFINE

DEFINE CLASS cmdretry AS cmdcommandbuttoncustom OF "..\custom\ccontrol.vcx" 		&& Retry button
 	*< CLASSDATA: Baseclass="commandbutton" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "codemine.h"
	Caption = "\<Retry"
	Default = .T.
	llocalizecaption = .T.
	Name = "cmdretry"
	StatusBarText = " "
	
	PROCEDURE Click
		IF NOT THISFORM.Close(CLOSE_BY_OK)
		  DODEFAULT()
		ENDIF
		
	ENDPROC

ENDDEFINE

DEFINE CLASS cmdyes AS cmdcommandbuttoncustom OF "..\custom\ccontrol.vcx" 		&& Yes button
 	*< CLASSDATA: Baseclass="commandbutton" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "codemine.h"
	Caption = "\<Yes"
	Default = .T.
	llocalizecaption = .T.
	Name = "cmdyes"
	StatusBarText = " "
	
	PROCEDURE Click
		IF NOT THISFORM.Close(CLOSE_BY_OK)
		  DODEFAULT()
		ENDIF
		
	ENDPROC

ENDDEFINE

DEFINE CLASS cntnextbackhistory AS cntcontainercustom OF "..\custom\ccontrol.vcx" 		&& A set of Back and Next buttons for changing pages sequentially in a pageframe.
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="cmdBack" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdNext" UniqueID="" Timestamp="" />

	#INCLUDE "codemine.h"
	*<DefinedPropArrayMethod>
		*m: backstep		&& Go back to the previous step, without validating the current step.
		*m: nextstep		&& Proceed to the next step.
		*m: onfinish		&& Custom Developer code executed when the "Next" (finish) button is pressed on the last page in the series.
		*p: cpageframe		&& Name of the pageframe object these buttons will control.
		*p: cpromptfinish		&& "Next" button caption for the last step.
		*p: cpromptnext		&& "Next" button caption for all but the last step
		*p: nnextstep		&& Step (page index) that the "Next" button will go to.
	*</DefinedPropArrayMethod>

	BackStyle = 0
	BorderWidth = 0
	cpageframe = 		&& Name of the pageframe object these buttons will control.
	cpromptfinish = \<Finish		&& "Next" button caption for the last step.
	cpromptnext = \<Next >>		&& "Next" button caption for all but the last step
	Height = 25
	Name = "cntnextbackhistory"
	nnextstep = 2		&& Step (page index) that the "Next" button will go to.
	Width = 158

	ADD OBJECT 'cmdBack' AS cmdcommandbuttoncustom WITH ;
		Caption = "<< \<Back", ;
		Left = 2, ;
		lkeepfocus = .T., ;
		Name = "cmdBack", ;
		TabIndex = 7, ;
		Top = 2
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdNext' AS cmdcommandbuttoncustom WITH ;
		Caption = "Next/Finish", ;
		Left = 82, ;
		lkeepfocus = .T., ;
		Name = "cmdNext", ;
		TabIndex = 8, ;
		Top = 2
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />
	
	PROCEDURE backstep		&& Go back to the previous step, without validating the current step.
		LOCAL oPageFrame
		
		  * Load object ref to pageframe (must be in same container as our parent)
		  m.oPageFrame = EVALUATE('THIS.Parent.' + THIS.cPageFrame)
		  IF THIS.nHistoryIndex > 0
		    * Default new "Next" step is the historical step plus one.
		    * Non-default nNextStep values can be set by the pageframe AfterChange() event.
		    THIS.nNextStep = THIS.aHistory[THIS.nHistoryIndex] + 1
		    m.oPageFrame.SetPage(THIS.aHistory[THIS.nHistoryIndex], 0, PAGEMASK_SKIP_VALID)
		    THIS.nHistoryIndex = THIS.nHistoryIndex - 1
		  ENDIF
		  THIS.Refresh()
		
	ENDPROC

	PROCEDURE Init
		LOCAL oPageFrame
		
		ASSERT NOT EMPTY(THIS.cPageFrame) MESSAGE THIS.Name + ' a value for cPageFrame is required'
		IF PEMSTATUS(THIS.Parent, THIS.cPageFrame, 5)
		  m.oPageFrame = EVALUATE('THIS.Parent.' + THIS.cPageFrame)
		  THIS.AddProperty('nMaxStep', m.oPageFrame.PageCount)
		  THIS.AddProperty('aHistory[' + LTRIM(STR(m.oPageFrame.PageCount)) + ']')
		  THIS.AddProperty('nHistoryIndex', 0)
		  RETURN DODEFAULT()
		ENDIF
		
		ASSERT .F. MESSAGE THIS.Name + ': A Pageframe named ' + THIS.cPageFrame + ' does not exist'
		RETURN .F.
		
	ENDPROC

	PROCEDURE nextstep		&& Proceed to the next step.
		LOCAL oPageFrame, lStatus, nLastStep
		
		  * Load object ref to pageframe (must be in same container as our parent)
		  m.oPageFrame = EVALUATE('THIS.Parent.' + THIS.cPageFrame)
		
		  m.nLastStep = m.oPageFrame.PageOrderToIndex(m.oPageFrame.Activepage)
		  IF THIS.nNextStep > THIS.nMaxStep
		    IF m.oPageFrame.ValidatePage()  && Also triggers BeforePageChange()
		      RETURN THIS.OnFinish()
		    ENDIF
		  ELSE
		    * Note that Pageframe.BeforePageChange() may alter the page we end up on.
		    m.lStatus = m.oPageFrame.SetPage(THIS.nNextStep)
		    IF m.lStatus
		      * Page change was successful. Update history array.
		      THIS.nHistoryIndex = THIS.nHistoryIndex + 1
		      THIS.aHistory[THIS.nHistoryIndex] = m.nLastStep
		
		      * Calculate default next step. Remeber BeforePageChange() may have put us
		      * on a different page than we expected when we called SetPage().
		      THIS.nNextStep = m.oPageFrame.PageOrderToIndex(m.oPageFrame.Activepage) + 1
		    ENDIF
		  ENDIF
		  THIS.Refresh()
		  RETURN m.lStatus
		
	ENDPROC

	PROCEDURE onfinish		&& Custom Developer code executed when the "Next" (finish) button is pressed on the last page in the series.
		RETURN THISFORM.Close(CLOSE_BY_OK)
		
	ENDPROC

	PROCEDURE cmdBack.Click
		THIS.Parent.BackStep()
		
	ENDPROC

	PROCEDURE cmdBack.Refresh
		* Check for property, in case refreshed before all controls init.
		IF PEMSTATUS(THIS.Parent, 'nHistoryIndex', 5)
		  THIS.lEnabled = THIS.Parent.nHistoryIndex > 0
		ENDIF
		DODEFAULT()
		
	ENDPROC

	PROCEDURE cmdNext.Click
		IF NOT THIS.Parent.NextStep()
		  DODEFAULT()
		ENDIF
		
	ENDPROC

	PROCEDURE cmdNext.Refresh
		* Check for property, in case refreshed before all controls init.
		IF PEMSTATUS(THIS.Parent, 'nMaxStep', 5)
		  WITH THIS.Parent
		    IF .nNextStep > .nMaxStep
		      THIS.Caption = .cPromptFinish
		    ELSE
		      THIS.Caption = .cPromptNext
		    ENDIF
		  ENDWITH
		ENDIF
		DODEFAULT()
		
	ENDPROC

ENDDEFINE

DEFINE CLASS cntokcancel AS cntcontainer OF "codemine.vcx" 		&& OK/Cancel button set
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="cmdOK" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdCancel" UniqueID="" Timestamp="" />

	BackStyle = 0
	BorderWidth = 0
	Height = 29
	Name = "cntokcancel"
	Width = 164

	ADD OBJECT 'cmdCancel' AS cmdcancel WITH ;
		Left = 85, ;
		Name = "cmdCancel", ;
		Top = 3
		*< END OBJECT: ClassLib="cmbutton.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdOK' AS cmdok WITH ;
		Left = 1, ;
		Name = "cmdOK", ;
		Top = 3
		*< END OBJECT: ClassLib="cmbutton.vcx" BaseClass="commandbutton" />

ENDDEFINE

DEFINE CLASS cntokcancelapply AS cntcontainer OF "codemine.vcx" 		&& OK/Cancel/Apply button set
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="cmdOK" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdCancel" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdApply" UniqueID="" Timestamp="" />

	BackStyle = 0
	BorderWidth = 0
	Height = 28
	Name = "cntokcancelapply"
	Width = 248

	ADD OBJECT 'cmdApply' AS cmdapply WITH ;
		Left = 168, ;
		Name = "cmdApply", ;
		Top = 3
		*< END OBJECT: ClassLib="cmbutton.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdCancel' AS cmdcancel WITH ;
		Left = 85, ;
		Name = "cmdCancel", ;
		Top = 3
		*< END OBJECT: ClassLib="cmbutton.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdOK' AS cmdok WITH ;
		Left = 2, ;
		Name = "cmdOK", ;
		Top = 3
		*< END OBJECT: ClassLib="cmbutton.vcx" BaseClass="commandbutton" />

ENDDEFINE
