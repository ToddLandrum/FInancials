*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="cmcredit.vcx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
*< LIBCOMMENT: Credit card Entry and validation classes. />
*
DEFINE CLASS cmcreditcard AS cmserviceabstract OF "cmdataa.vcx" 		&& Codemine credit card validation utility class
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: cardtype		&& Return the credit card type as a string.
		*m: checkdigit		&& Calculate the correct checkdigit for a credit card number.
		*m: formatcreditcard		&& Format and verify a credit card number.
		*m: validcreditcard		&& Validate correct format for a credit card number.
	*</DefinedPropArrayMethod>

	Name = "cmcreditcard"
	
	PROCEDURE cardtype		&& Return the credit card type as a string.
		LPARAMETERS cCardNumber
		*++
		*>>Return the credit card type as a string.
		*--
		  DO CASE
		    CASE LEFT(m.cCardNumber,1) = '3'    && Amex
		      RETURN 'American Express'
		    CASE LEFT(m.cCardNumber,1) = '4'    && Visa
		      RETURN 'Visa'
		    CASE LEFT(m.cCardNumber,1) = '5'    && MasterCard 
		      RETURN 'MasterCard'
		    CASE LEFT(m.cCardNumber,1) = '6'    && Discover
		      RETURN 'Discover'
		  ENDCASE
		  RETURN ''
		
	ENDPROC

	PROTECTED PROCEDURE checkdigit		&& Calculate the correct checkdigit for a credit card number.
		LPARAMETERS cValue
		*++
		*>>Calculate the correct checkdigit for a credit card number.
		* The last digit in all credit card numbers is a check digit.
		*--
		LOCAL nChecksum, nIndex
		  m.nChecksum = 0
		
		  FOR nIndex = 1 TO LEN(m.cValue)
		    m.nDigit = VAL(SUBSTR(m.cValue, LEN(m.cValue) - m.nIndex + 1, 1))
		    IF m.nIndex % 2 > 0
		      m.nDigit = m.nDigit * 2
		    ENDIF
		    m.nChecksum = m.nChecksum + INT(m.nDigit / 10) + (m.nDigit % 10)
		  ENDFOR
		  m.nChecksum = 10 - (m.nChecksum % 10)
		  RETURN STR(m.nChecksum % 10, 1)
		
	ENDPROC

	PROCEDURE formatcreditcard		&& Format and verify a credit card number.
		LPARAMETERS cInNumber, cOutNumber, cType
		*++
		*>>Format and verify a credit card number.
		*--
		LOCAL cNumber, nIndex, nLen
		  IF THIS.ValidCreditCard((m.cInNumber))
		    m.cOutNumber = CHRTRAN(m.cInNumber, ' -', '' )
		
		    * Return the card type if desired
		    IF PCOUNT() > 2
		      m.cType = THIS.CardType(m.cOutNumber)
		    ENDIF
		
		    * Format the string with dashes as appropriate.
		    DO CASE
		      CASE LEN(m.cOutNumber) = 13   && Some Visa numbers
		        m.cOutNumber = LEFT(m.cOutNumber,4) + '-' + SUBSTR(m.cOutNumber,5,3) + '-' ;
		                       + SUBSTR(m.cOutNumber,8,3) + '-' + SUBSTR(m.cOutNumber,11)
		      CASE LEN(m.cOutNumber) = 16   && MC, Visa & Discover
		        m.cOutNumber = LEFT(m.cOutNumber,4) + '-' + SUBSTR(m.cOutNumber,5,4) + '-' ;
		                       + SUBSTR(m.cOutNumber,9,4) + '-' + SUBSTR(m.cOutNumber,13)
		      CASE LEN(m.cOutNumber) = 15   && AmEx
		        m.cOutNumber = LEFT(m.cOutNumber,4) + '-' + SUBSTR(m.cOutNumber,5,4) + '-' ;
		                       + SUBSTR(m.cOutNumber,9,4) + '-' + SUBSTR(m.cOutNumber,13)
		    ENDCASE
		    RETURN .T.
		  ENDIF
		  RETURN .F.
		
	ENDPROC

	PROCEDURE validcreditcard		&& Validate correct format for a credit card number.
		LPARAMETERS cNumber
		*++
		*>>Validate correct format for a credit card number.
		* Returns .T. if number is valid, .F. if not.
		*--
		LOCAL nIndex
		  m.cNumber = CHRTRAN(m.cNumber, ' -', '' )
		
		  FOR nIndex = 1 to LEN(m.cNumber)
		    IF NOT ISDIGIT(SUBSTR(m.cNumber, m.nIndex, 1))
		      RETURN .F.
		    ENDIF
		  ENDFOR
		
		  * Check for correct length based on initial digit.
		  DO CASE
		    CASE LEFT(m.cNumber,1) = '3'    && Amex
		      IF LEN(m.cNumber) != 15 OR NOT INLIST(LEFT(m.cNumber,2), '37', '34')
		        RETURN .F.
		      ENDIF
		    CASE LEFT(m.cNumber,1) = '4'    && Visa
		      IF NOT INLIST(LEN(m.cNumber), 13, 16)
		        RETURN .F.
		      ENDIF
		    CASE LEFT(m.cNumber,1) $ '56'    && MasterCard or Discover
		      IF LEN(m.cNumber) != 16
		        RETURN .F.
		      ENDIF
		    OTHERWISE
		      RETURN LEN(m.cNumber) = 0      && Treat empty string as valid
		  ENDCASE
		
		  * Number of digits is correct for this card type.
		  * Now make sure the check digit (last digit) is also correct.
		  RETURN RIGHT(m.cNumber,1) == THIS.CheckDigit(LEFT(m.cNumber, LEN(m.cNumber)-1))
		
	ENDPROC

ENDDEFINE

DEFINE CLASS txtcreditcard AS txttextboxcustom OF "..\custom\ccontrol.vcx" 		&& CodeMine credit card entry textbox class
 	*< CLASSDATA: Baseclass="textbox" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "codemine.h"
	chelpclasskey = %hlpCreditcard,%hlpTextbox,%hlpValueMemory
	Height = 22
	InputMask = "XXXXXXXXXXXXXXXXXXX"
	Name = "txtcreditcard"
	Width = 159
	
	PROCEDURE Init
		* Get a reference to the credit card number utilites object
		THIS.AddProperty('oCredit', CreateGlobalObject('cmCreditCard'))
		RETURN DODEFAULT()
		
	ENDPROC

	PROCEDURE Valid
		LOCAL cCardNumber
		IF THIS.lChanged
		  IF NOT EMPTY(THIS.Value)
		    IF NOT THIS.oCredit.FormatCreditCard(THIS.Value, @m.cCardNumber)
		      THISFORM.DisplayMessage('%msgBadCreditCard', THIS.Value)
		      RETURN 0
		    ENDIF
		
		    * Keep the string length the same - especialy important for encrypted values.
		    THIS.Value = PADR(m.cCardNumber, LEN(THIS.Value))
		  ENDIF
		
		  * Continue with validation and valuesource update.
		  RETURN DODEFAULT()
		ENDIF
		RETURN .T.
		
	ENDPROC

ENDDEFINE
