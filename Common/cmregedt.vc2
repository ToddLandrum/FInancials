*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="cmregedt.vcx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS frmkeyeditor AS frmmodaldialog OF "cmforms.vcx" 		&& Registry Key Editor.
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="lblReplication" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboDataType" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="edtDescription" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblDesc" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboKeyAccess" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfEditPage" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfEditPage.pagCategory.Shpshape1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfEditPage.pagCategory.cboDataType" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfEditPage.pagCategory.lblType" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfEditPage.pagTextbox.txtPicture" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfEditPage.pagTextbox.Lbllabel2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfEditPage.pagTextbox.chkNull" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfEditPage.pagTextbox.chkUppercase" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfEditPage.pagTextbox.chkAlpha" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfEditPage.pagEditbox.spnMaxLength" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfEditPage.pagEditbox.Lbllabel1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfEditPage.pagEditbox.chkNull" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfEditPage.pagEditbox.chkLineBreaks" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfEditPage.pagPopup.edtPopupValues" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfEditPage.pagPopup.Lbllabel1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfEditPage.pagNumeric.Lbllabel2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfEditPage.pagNumeric.txtPicture" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfEditPage.pagNumeric.spnLowest" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfEditPage.pagNumeric.spnHighest" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfEditPage.pagNumeric.spnIncrement" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfEditPage.pagNumeric.Lbllabel1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfEditPage.pagNumeric.Lbllabel3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfEditPage.pagNumeric.Lbllabel4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfEditPage.pagNumeric.chkNull" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfEditPage.PagLogical.lblTrue" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfEditPage.PagLogical.chkNull" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfEditPage.PagLogical.lblFalse" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfEditPage.PagLogical.lblNull" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfEditPage.PagLogical.txtTrue" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfEditPage.PagLogical.txtFalse" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfEditPage.PagLogical.txtNull" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfEditPage.pagPath.lblExtension" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfEditPage.pagPath.txtExtension" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfEditPage.pagPath.chkAllowBrowse" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfEditPage.pagPath.chkAllowEdit" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfEditPage.pagPath.chkAllowDelete" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfEditPage.pagPath.chkAllowAppend" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfEditPage.pagPath.cboPathType" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfEditPage.pagPath.Lbllabel1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfEditPage.pagPath.chkFullPath" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfEditPage.pagEnum.Shape1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfEditPage.pagEnum.Lbllabel1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfEditPage.pagEnum.txtEnumCategory" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfEditPage.pagEnum.cboDataType" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfEditPage.pagEnum.lblType" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfEditPage.pagEnum.Lbllabel2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfEditPage.pagCounter.cboFormat" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfEditPage.pagCounter.cboReset" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfEditPage.pagCounter.spnLength" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfEditPage.pagCounter.Lbllabel2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfEditPage.pagCounter.Lbllabel3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfEditPage.pagCounter.Lbllabel4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfEditPage.pagCounter.spnIncr" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfEditPage.pagCounter.Lblfieldlabelcustom1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblName" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblType" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblAccess" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="edtKeyName" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblDisplayName" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="edtLocName" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntOkCancel" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboReplication" UniqueID="" Timestamp="" />

	#INCLUDE "codemine.h"
	*<DefinedPropArrayMethod>
		*m: setcaption		&& Set the window caption to reflect current key name.
		*p: oparams		&& Holds reference to parameters object.
		*p: oproperties		&& Key properties object reference for current registry record.
	*</DefinedPropArrayMethod>

	BorderStyle = 2
	Caption = "Key Properties"
	Comment = "Not localized, this form is for developer use only."
	DoCreate = .T.
	Height = 218
	Icon = ..\graphics\crdfle13.ico
	lreleaseonclose = .F.
	lrememberposition = .T.
	MinButton = .F.
	Name = "frmkeyeditor"
	omessage = .NULL.
	oproperties = .NULL.		&& Key properties object reference for current registry record.
	oregistry = .NULL.
	osecurity = .NULL.
	Width = 502
	WindowState = 0
	WindowType = 1

	ADD OBJECT 'cboDataType' AS cbocomboboxcustom WITH ;
		BoundColumn = 1, ;
		BoundTo = .T., ;
		cdisplayname = Key Type, ;
		clinkedlabel = lblType, ;
		cvaluesource = THISFORM.oProperties.cType, ;
		FontSize = 8, ;
		Height = 22, ;
		Left = 67, ;
		lrequired = .T., ;
		Margin = 2, ;
		Name = "cboDataType", ;
		RowSource = "THISFORM.aDataTypes", ;
		RowSourceType = 5, ;
		Style = 2, ;
		TabIndex = 3, ;
		Top = 65, ;
		Width = 152, ;
		ZOrderSet = 1
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="combobox" />

	ADD OBJECT 'cboKeyAccess' AS cbocomboboxcustom WITH ;
		cvaluesource = THISFORM.oProperties.nAccess, ;
		FontSize = 8, ;
		Height = 22, ;
		Left = 67, ;
		Margin = 2, ;
		Name = "cboKeyAccess", ;
		Style = 2, ;
		TabIndex = 4, ;
		Top = 96, ;
		Width = 152, ;
		ZOrderSet = 4
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="combobox" />

	ADD OBJECT 'cboReplication' AS cbocomboboxcustom WITH ;
		clinkedlabel = lblReplication, ;
		cvaluesource = THISFORM.oProperties.nReplicationType, ;
		FontSize = 8, ;
		Height = 22, ;
		Left = 338, ;
		Margin = 2, ;
		Name = "cboReplication", ;
		Style = 2, ;
		TabIndex = 5, ;
		Top = 9, ;
		Width = 150, ;
		ZOrderSet = 13
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="combobox" />

	ADD OBJECT 'cntOkCancel' AS cntokcancelcustom WITH ;
		BackStyle = 0, ;
		creposition = vFollow,hCenter, ;
		Left = 169, ;
		Name = "cntOkCancel", ;
		TabIndex = 8, ;
		Top = 186, ;
		ZOrderSet = 12, ;
		cmdcancel.Name = "cmdcancel", ;
		cmdok.Name = "cmdok"
		*< END OBJECT: ClassLib="..\custom\cbutton.vcx" BaseClass="container" />

	ADD OBJECT 'edtDescription' AS edteditboxcustom WITH ;
		cvaluesource = THISFORM.oProperties.cDescription, ;
		FontSize = 8, ;
		Height = 36, ;
		lallowenter = .F., ;
		lallowzoom = .F., ;
		Left = 8, ;
		lnoinitdata = .T., ;
		MaxLength = 0, ;
		Name = "edtDescription", ;
		TabIndex = 7, ;
		Top = 144, ;
		Width = 485, ;
		ZOrderSet = 2
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="editbox" />

	ADD OBJECT 'edtKeyName' AS edteditboxcustom WITH ;
		cdisplayname = Key Name, ;
		cvaluesource = THISFORM.oProperties.cName, ;
		FontSize = 8, ;
		Height = 22, ;
		lallowzoom = .F., ;
		Left = 67, ;
		lnoinitdata = .T., ;
		lrequired = .T., ;
		MaxLength = 40, ;
		Name = "edtKeyName", ;
		TabIndex = 1, ;
		Top = 9, ;
		Width = 151, ;
		ZOrderSet = 9
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="editbox" />

	ADD OBJECT 'edtLocName' AS edteditboxcustom WITH ;
		cdisplayname = Localized Name, ;
		ControlSource = "", ;
		cvaluesource = THISFORM.oProperties.cLocName, ;
		FontSize = 8, ;
		Height = 22, ;
		lallowzoom = .F., ;
		Left = 67, ;
		lnoinitdata = .T., ;
		lrequired = .T., ;
		Name = "edtLocName", ;
		TabIndex = 2, ;
		Top = 37, ;
		Width = 151, ;
		ZOrderSet = 11
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="editbox" />

	ADD OBJECT 'lblAccess' AS lblfieldlabelcustom WITH ;
		Alignment = 1, ;
		Caption = "Access:", ;
		FontBold = .F., ;
		FontSize = 8, ;
		Height = 16, ;
		Left = 20, ;
		Name = "lblAccess", ;
		TabIndex = 12, ;
		Top = 99, ;
		Width = 43, ;
		ZOrderSet = 8
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblDesc' AS lblfieldlabelcustom WITH ;
		Alignment = 0, ;
		AutoSize = .T., ;
		Caption = "Description:", ;
		FontBold = .F., ;
		FontSize = 8, ;
		Height = 16, ;
		Left = 5, ;
		Name = "lblDesc", ;
		TabIndex = 14, ;
		Top = 126, ;
		Width = 59, ;
		ZOrderSet = 3
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblDisplayName' AS lblfieldlabelcustom WITH ;
		Alignment = 1, ;
		Caption = "Localized:", ;
		FontBold = .F., ;
		FontSize = 8, ;
		Height = 16, ;
		Left = 12, ;
		Name = "lblDisplayName", ;
		TabIndex = 10, ;
		Top = 41, ;
		Width = 51, ;
		ZOrderSet = 10
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblName' AS lblfieldlabelcustom WITH ;
		Alignment = 1, ;
		Caption = "Name:", ;
		FontBold = .F., ;
		FontSize = 8, ;
		Height = 16, ;
		Left = 31, ;
		Name = "lblName", ;
		TabIndex = 9, ;
		Top = 12, ;
		Width = 32, ;
		ZOrderSet = 6
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblReplication' AS lblfieldlabelcustom WITH ;
		Alignment = 1, ;
		Caption = "Replication:", ;
		FontBold = .F., ;
		FontSize = 8, ;
		Height = 16, ;
		Left = 277, ;
		Name = "lblReplication", ;
		TabIndex = 13, ;
		Top = 13, ;
		Width = 57, ;
		ZOrderSet = 0
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblType' AS lblfieldlabelcustom WITH ;
		Alignment = 1, ;
		Caption = "Type:", ;
		FontBold = .F., ;
		FontSize = 8, ;
		Height = 16, ;
		Left = 34, ;
		Name = "lblType", ;
		TabIndex = 11, ;
		Top = 69, ;
		Width = 29, ;
		ZOrderSet = 7
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'pgfEditPage' AS pgfpageframecustom WITH ;
		BorderWidth = 0, ;
		ErasePage = .T., ;
		Height = 92, ;
		Left = 232, ;
		lvalidateallpages = .F., ;
		Name = "pgfEditPage", ;
		PageCount = 10, ;
		SpecialEffect = 2, ;
		TabIndex = 6, ;
		Tabs = .F., ;
		Top = 37, ;
		Width = 262, ;
		ZOrderSet = 5, ;
		Page1.BackStyle = 0, ;
		Page1.Caption = "Category", ;
		Page1.Name = "pagCategory", ;
		Page10.BackStyle = 0, ;
		Page10.Caption = "Page10", ;
		Page10.Name = "pagCounter", ;
		Page2.BackStyle = 0, ;
		Page2.Caption = "TextBox", ;
		Page2.Name = "pagTextbox", ;
		Page3.BackStyle = 0, ;
		Page3.Caption = "EditBox", ;
		Page3.Name = "pagEditbox", ;
		Page4.BackStyle = 0, ;
		Page4.Caption = "Popup", ;
		Page4.Name = "pagPopup", ;
		Page5.BackStyle = 0, ;
		Page5.Caption = "Spinner", ;
		Page5.FontSize = 9, ;
		Page5.Name = "pagNumeric", ;
		Page6.BackStyle = 0, ;
		Page6.Caption = "Logical", ;
		Page6.Name = "PagLogical", ;
		Page7.BackStyle = 0, ;
		Page7.Caption = "Path", ;
		Page7.Name = "pagPath", ;
		Page8.BackStyle = 0, ;
		Page8.Caption = "Binary", ;
		Page8.Name = "pagBinary", ;
		Page9.BackStyle = 0, ;
		Page9.Caption = "", ;
		Page9.Name = "pagEnum"
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="pageframe" />

	ADD OBJECT 'pgfEditPage.pagCategory.cboDataType' AS cbocomboboxcustom WITH ;
		BoundTo = .T., ;
		cvaluesource = THISFORM.oProperties.cValue, ;
		FontSize = 8, ;
		Height = 22, ;
		Left = 43, ;
		lnoinitdata = .T., ;
		Margin = 2, ;
		Name = "cboDataType", ;
		RowSource = "THISFORM.aDataTypes", ;
		RowSourceType = 5, ;
		Style = 2, ;
		TabIndex = 6, ;
		Top = 39, ;
		Value = , ;
		Width = 177
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="combobox" />

	ADD OBJECT 'pgfEditPage.pagCategory.lblType' AS lbltextcustom WITH ;
		Alignment = 2, ;
		BackColor = 128,128,128, ;
		BackStyle = 1, ;
		Caption = " Default type for keys added to this category ", ;
		FontBold = .F., ;
		FontItalic = .T., ;
		FontSize = 8, ;
		ForeColor = 255,255,255, ;
		Height = 15, ;
		Left = 13, ;
		Name = "lblType", ;
		TabIndex = 5, ;
		Top = 17, ;
		Width = 238
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'pgfEditPage.pagCategory.Shpshape1' AS shpshapecustom WITH ;
		BackStyle = 0, ;
		Height = 58, ;
		Left = 10, ;
		Name = "Shpshape1", ;
		Top = 15, ;
		Width = 243
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="shape" />

	ADD OBJECT 'pgfEditPage.pagCounter.cboFormat' AS cbocomboboxcustom WITH ;
		cvaluesource = THISFORM.oProperties.nCounterFormat, ;
		Height = 22, ;
		Left = 67, ;
		lnoinitdata = .T., ;
		Name = "cboFormat", ;
		Style = 2, ;
		TabIndex = 3, ;
		Top = 30, ;
		Width = 177
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="combobox" />

	ADD OBJECT 'pgfEditPage.pagCounter.cboReset' AS cbocomboboxcustom WITH ;
		cvaluesource = THISFORM.oProperties.nCounterReset, ;
		Height = 22, ;
		Left = 67, ;
		lnoinitdata = .T., ;
		Name = "cboReset", ;
		Style = 2, ;
		TabIndex = 4, ;
		Top = 59, ;
		Width = 177
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="combobox" />

	ADD OBJECT 'pgfEditPage.pagCounter.Lblfieldlabelcustom1' AS lblfieldlabelcustom WITH ;
		AutoSize = .F., ;
		Caption = "Increment:", ;
		FontSize = 8, ;
		Height = 17, ;
		Left = 133, ;
		Name = "Lblfieldlabelcustom1", ;
		TabIndex = 6, ;
		Top = 6, ;
		Width = 52
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'pgfEditPage.pagCounter.Lbllabel2' AS lblfieldlabelcustom WITH ;
		AutoSize = .F., ;
		Caption = "Length:", ;
		FontSize = 8, ;
		Height = 17, ;
		Left = 22, ;
		Name = "Lbllabel2", ;
		TabIndex = 5, ;
		Top = 6, ;
		Width = 44
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'pgfEditPage.pagCounter.Lbllabel3' AS lblfieldlabelcustom WITH ;
		Caption = "Format:", ;
		FontSize = 8, ;
		Height = 17, ;
		Left = 24, ;
		Name = "Lbllabel3", ;
		TabIndex = 7, ;
		Top = 34, ;
		Width = 42
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'pgfEditPage.pagCounter.Lbllabel4' AS lblfieldlabelcustom WITH ;
		Caption = "Reset:", ;
		FontSize = 8, ;
		Height = 17, ;
		Left = 24, ;
		Name = "Lbllabel4", ;
		TabIndex = 8, ;
		Top = 63, ;
		Width = 42
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'pgfEditPage.pagCounter.spnIncr' AS spnspinnercustom WITH ;
		cvaluesource = THISFORM.oProperties.nCounterIncr, ;
		Height = 22, ;
		InputMask = "9999", ;
		KeyboardHighValue = 9999, ;
		KeyboardLowValue = 1, ;
		Left = 186, ;
		lnoinitdata = .T., ;
		Name = "spnIncr", ;
		SelectOnEntry = .T., ;
		SpinnerHighValue = 9999.00, ;
		SpinnerLowValue = 1.00, ;
		TabIndex = 2, ;
		Top = 3, ;
		Width = 58
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="spinner" />

	ADD OBJECT 'pgfEditPage.pagCounter.spnLength' AS spnspinnercustom WITH ;
		cvaluesource = THISFORM.oProperties.nCounterLength, ;
		Height = 22, ;
		InputMask = "999", ;
		KeyboardHighValue = 12, ;
		KeyboardLowValue = 1, ;
		Left = 67, ;
		lnoinitdata = .T., ;
		Name = "spnLength", ;
		SelectOnEntry = .T., ;
		SpinnerHighValue = 12.00, ;
		SpinnerLowValue = 1.00, ;
		TabIndex = 1, ;
		Top = 3, ;
		Width = 58
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="spinner" />

	ADD OBJECT 'pgfEditPage.pagEditbox.chkLineBreaks' AS chkcheckbox WITH ;
		Caption = "Allow Line Breaks", ;
		ControlSource = "", ;
		cvaluesource = THISFORM.oProperties.lAllowLineBreak, ;
		FontSize = 8, ;
		Height = 17, ;
		Left = 6, ;
		Name = "chkLineBreaks", ;
		Top = 60, ;
		Width = 120
		*< END OBJECT: ClassLib="codemine.vcx" BaseClass="checkbox" />

	ADD OBJECT 'pgfEditPage.pagEditbox.chkNull' AS chkcheckbox WITH ;
		Caption = "Allow NULL value", ;
		cvaluesource = THISFORM.oProperties.lAllowNull, ;
		FontSize = 8, ;
		Height = 17, ;
		Left = 6, ;
		Name = "chkNull", ;
		Top = 36, ;
		Width = 115
		*< END OBJECT: ClassLib="codemine.vcx" BaseClass="checkbox" />

	ADD OBJECT 'pgfEditPage.pagEditbox.Lbllabel1' AS lblfieldlabelcustom WITH ;
		Alignment = 1, ;
		Caption = "Maximum Length:", ;
		Comment = "", ;
		FontBold = .F., ;
		FontSize = 8, ;
		Height = 16, ;
		Left = 17, ;
		Name = "Lbllabel1", ;
		Top = 6, ;
		Width = 85
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'pgfEditPage.pagEditbox.spnMaxLength' AS spnspinnercustom WITH ;
		ControlSource = "", ;
		cvaluesource = THISFORM.oProperties.nMaxLength, ;
		FontSize = 8, ;
		InputMask = "99999", ;
		Left = 106, ;
		Name = "spnMaxLength", ;
		Top = 2, ;
		Width = 72
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="spinner" />

	ADD OBJECT 'pgfEditPage.pagEnum.cboDataType' AS cbocomboboxcustom WITH ;
		FontSize = 8, ;
		Left = 63, ;
		Margin = 2, ;
		Name = "cboDataType", ;
		RowSourceType = 0, ;
		Style = 2, ;
		TabIndex = 6, ;
		Top = 58, ;
		Width = 144
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="combobox" />

	ADD OBJECT 'pgfEditPage.pagEnum.Lbllabel1' AS lblfieldlabelcustom WITH ;
		Caption = "Category:", ;
		FontBold = .F., ;
		FontSize = 8, ;
		Height = 16, ;
		Left = 11, ;
		Name = "Lbllabel1", ;
		Top = 32, ;
		Width = 49
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'pgfEditPage.pagEnum.Lbllabel2' AS lblfieldlabelcustom WITH ;
		Alignment = 0, ;
		BackColor = 128,128,128, ;
		BackStyle = 1, ;
		Caption = "  Enumerate keys in", ;
		FontBold = .F., ;
		FontItalic = .T., ;
		FontSize = 8, ;
		ForeColor = 255,255,255, ;
		Height = 15, ;
		Left = 4, ;
		Name = "Lbllabel2", ;
		Top = 10, ;
		Width = 254
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'pgfEditPage.pagEnum.lblType' AS lblfieldlabelcustom WITH ;
		Caption = "of Type:", ;
		FontBold = .F., ;
		FontSize = 8, ;
		Height = 16, ;
		Left = 18, ;
		Name = "lblType", ;
		TabIndex = 5, ;
		Top = 62, ;
		Width = 42
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'pgfEditPage.pagEnum.Shape1' AS shape WITH ;
		BackStyle = 0, ;
		Height = 82, ;
		Left = 1, ;
		Name = "Shape1", ;
		SpecialEffect = 0, ;
		Top = 8, ;
		Width = 259
		*< END OBJECT: BaseClass="shape" />

	ADD OBJECT 'pgfEditPage.pagEnum.txtEnumCategory' AS txttextboxcustom WITH ;
		cvaluesource = THISFORM.oProperties.cEnumCategory, ;
		FontSize = 8, ;
		InputMask = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", ;
		IntegralHeight = .T., ;
		Left = 63, ;
		Name = "txtEnumCategory", ;
		TabIndex = 5, ;
		Top = 29, ;
		Width = 189
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'pgfEditPage.PagLogical.chkNull' AS chkcheckbox WITH ;
		Caption = "Allow NULL value", ;
		ControlSource = "", ;
		cvaluesource = THISFORM.oProperties.lAllowNull, ;
		FontSize = 8, ;
		Height = 17, ;
		Left = 73, ;
		Name = "chkNull", ;
		TabIndex = 7, ;
		Top = 72, ;
		Width = 114
		*< END OBJECT: ClassLib="codemine.vcx" BaseClass="checkbox" />

	ADD OBJECT 'pgfEditPage.PagLogical.lblFalse' AS lblfieldlabelcustom WITH ;
		Alignment = 1, ;
		Caption = "False String:", ;
		FontBold = .F., ;
		FontSize = 8, ;
		Height = 16, ;
		Left = 7, ;
		Name = "lblFalse", ;
		TabIndex = 2, ;
		Top = 26, ;
		Width = 63
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'pgfEditPage.PagLogical.lblNull' AS lblfieldlabelcustom WITH ;
		Alignment = 1, ;
		Caption = "NULL String:", ;
		FontBold = .F., ;
		FontSize = 8, ;
		Height = 16, ;
		Left = 7, ;
		Name = "lblNull", ;
		TabIndex = 3, ;
		Top = 49, ;
		Width = 63
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'pgfEditPage.PagLogical.lblTrue' AS lblfieldlabelcustom WITH ;
		Alignment = 1, ;
		Caption = "True String:", ;
		FontBold = .F., ;
		FontSize = 8, ;
		Height = 16, ;
		Left = 11, ;
		Name = "lblTrue", ;
		TabIndex = 1, ;
		Top = 3, ;
		Width = 59
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'pgfEditPage.PagLogical.txtFalse' AS txttextboxcustom WITH ;
		ControlSource = "", ;
		cvaluesource = THISFORM.oProperties.cLogFalse, ;
		FontSize = 8, ;
		InputMask = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", ;
		IntegralHeight = .T., ;
		Left = 73, ;
		lrequired = .T., ;
		Name = "txtFalse", ;
		TabIndex = 5, ;
		Top = 23, ;
		Width = 183
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'pgfEditPage.PagLogical.txtNull' AS txttextboxcustom WITH ;
		clinkedlabel = lblNull, ;
		ControlSource = "", ;
		cvaluesource = THISFORM.oProperties.cLogNull, ;
		FontSize = 8, ;
		InputMask = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", ;
		IntegralHeight = .T., ;
		Left = 73, ;
		lrequired = .T., ;
		Name = "txtNull", ;
		TabIndex = 6, ;
		Top = 46, ;
		Width = 183
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'pgfEditPage.PagLogical.txtTrue' AS txttextboxcustom WITH ;
		cdisplayname = True String, ;
		ControlSource = "", ;
		cvaluesource = THISFORM.oProperties.cLogTrue, ;
		FontSize = 8, ;
		InputMask = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", ;
		IntegralHeight = .T., ;
		Left = 73, ;
		lrequired = .T., ;
		Name = "txtTrue", ;
		TabIndex = 4, ;
		Top = 0, ;
		Width = 183
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'pgfEditPage.pagNumeric.chkNull' AS chkcheckbox WITH ;
		Caption = "Allow NULL", ;
		cvaluesource = THISFORM.oProperties.lAllowNull, ;
		FontSize = 8, ;
		Height = 17, ;
		Left = 171, ;
		Name = "chkNull", ;
		TabIndex = 9, ;
		Top = 66, ;
		Width = 82
		*< END OBJECT: ClassLib="codemine.vcx" BaseClass="checkbox" />

	ADD OBJECT 'pgfEditPage.pagNumeric.Lbllabel1' AS lblfieldlabelcustom WITH ;
		Alignment = 1, ;
		Caption = "Min:", ;
		FontBold = .F., ;
		FontSize = 8, ;
		Height = 16, ;
		Left = 8, ;
		Name = "Lbllabel1", ;
		TabIndex = 3, ;
		Top = 36, ;
		Width = 21
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'pgfEditPage.pagNumeric.Lbllabel2' AS lblfieldlabelcustom WITH ;
		Alignment = 1, ;
		Caption = "Input Mask:", ;
		FontBold = .F., ;
		FontSize = 8, ;
		Height = 14, ;
		Left = 4, ;
		Name = "Lbllabel2", ;
		TabIndex = 1, ;
		Top = 3, ;
		Width = 58
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'pgfEditPage.pagNumeric.Lbllabel3' AS lblfieldlabelcustom WITH ;
		Alignment = 1, ;
		Caption = "Max:", ;
		FontBold = .F., ;
		FontSize = 8, ;
		Height = 16, ;
		Left = 6, ;
		Name = "Lbllabel3", ;
		TabIndex = 5, ;
		Top = 63, ;
		Width = 25
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'pgfEditPage.pagNumeric.Lbllabel4' AS lblfieldlabelcustom WITH ;
		Alignment = 1, ;
		Caption = "Incr:", ;
		FontBold = .F., ;
		FontSize = 8, ;
		Height = 16, ;
		Left = 160, ;
		Name = "Lbllabel4", ;
		TabIndex = 7, ;
		Top = 36, ;
		Width = 23
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'pgfEditPage.pagNumeric.spnHighest' AS spnspinnercustom WITH ;
		cvaluesource = THISFORM.oProperties.nSpnHighValue, ;
		FontSize = 8, ;
		Format = "k", ;
		Left = 31, ;
		Name = "spnHighest", ;
		TabIndex = 6, ;
		Top = 60, ;
		Width = 116
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="spinner" />

	ADD OBJECT 'pgfEditPage.pagNumeric.spnIncrement' AS spnspinnercustom WITH ;
		cvaluesource = THISFORM.oProperties.nSpnIncrement, ;
		FontSize = 8, ;
		Format = "k", ;
		Increment = 1.00, ;
		Left = 185, ;
		Name = "spnIncrement", ;
		TabIndex = 8, ;
		Top = 33, ;
		Width = 70
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="spinner" />

	ADD OBJECT 'pgfEditPage.pagNumeric.spnLowest' AS spnspinnercustom WITH ;
		cvaluesource = THISFORM.oProperties.nSpnLowValue, ;
		FontSize = 8, ;
		Format = "k", ;
		InputMask = "99999999999.99", ;
		Left = 31, ;
		Name = "spnLowest", ;
		TabIndex = 4, ;
		Top = 33, ;
		Width = 116
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="spinner" />

	ADD OBJECT 'pgfEditPage.pagNumeric.txtPicture' AS txttextboxcustom WITH ;
		cvaluesource = THISFORM.oProperties.cPicture, ;
		FontSize = 8, ;
		Format = "!", ;
		Left = 64, ;
		Name = "txtPicture", ;
		TabIndex = 2, ;
		Top = 0, ;
		Width = 192
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'pgfEditPage.pagPath.cboPathType' AS cbocomboboxcustom WITH ;
		ControlSource = "", ;
		cvaluesource = THISFORM.oProperties.nTabPathType, ;
		DisplayValue = , ;
		FontSize = 8, ;
		Height = 22, ;
		Left = 89, ;
		Name = "cboPathType", ;
		RowSource = "", ;
		RowSourceType = 0, ;
		Style = 2, ;
		TabIndex = 1, ;
		Top = 5, ;
		Width = 167
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="combobox" />

	ADD OBJECT 'pgfEditPage.pagPath.chkAllowAppend' AS chkcheckbox WITH ;
		Caption = "Append", ;
		cvaluesource = THISFORM.oProperties.lTabAllowAppend, ;
		FontSize = 8, ;
		Height = 18, ;
		Left = 200, ;
		Name = "chkAllowAppend", ;
		TabIndex = 8, ;
		Top = 52, ;
		Width = 57
		*< END OBJECT: ClassLib="codemine.vcx" BaseClass="checkbox" />

	ADD OBJECT 'pgfEditPage.pagPath.chkAllowBrowse' AS chkcheckbox WITH ;
		AutoSize = .T., ;
		Caption = "Allow Browsing Table", ;
		cvaluesource = THISFORM.oProperties.lTabAllowBrowse, ;
		FontSize = 8, ;
		Height = 16, ;
		Left = 88, ;
		Name = "chkAllowBrowse", ;
		TabIndex = 5, ;
		Top = 34
		*< END OBJECT: ClassLib="codemine.vcx" BaseClass="checkbox" />

	ADD OBJECT 'pgfEditPage.pagPath.chkAllowDelete' AS chkcheckbox WITH ;
		Caption = "Delete", ;
		cvaluesource = THISFORM.oProperties.lTabAllowDelete, ;
		FontSize = 8, ;
		Height = 18, ;
		Left = 143, ;
		Name = "chkAllowDelete", ;
		TabIndex = 7, ;
		Top = 52, ;
		Width = 50
		*< END OBJECT: ClassLib="codemine.vcx" BaseClass="checkbox" />

	ADD OBJECT 'pgfEditPage.pagPath.chkAllowEdit' AS chkcheckbox WITH ;
		Caption = "Edit", ;
		cvaluesource = THISFORM.oProperties.lTabAllowEdit, ;
		FontSize = 8, ;
		Height = 18, ;
		Left = 100, ;
		Name = "chkAllowEdit", ;
		TabIndex = 6, ;
		Top = 52, ;
		Width = 36
		*< END OBJECT: ClassLib="codemine.vcx" BaseClass="checkbox" />

	ADD OBJECT 'pgfEditPage.pagPath.chkFullPath' AS chkcheckbox WITH ;
		AutoSize = .T., ;
		Caption = "Store full file path", ;
		cvaluesource = THISFORM.oProperties.lTabFullPath, ;
		FontSize = 8, ;
		Height = 16, ;
		Left = 88, ;
		Name = "chkFullPath", ;
		TabIndex = 9, ;
		Top = 73
		*< END OBJECT: ClassLib="codemine.vcx" BaseClass="checkbox" />

	ADD OBJECT 'pgfEditPage.pagPath.lblExtension' AS lblfieldlabelcustom WITH ;
		Alignment = 1, ;
		Caption = "Extensions:", ;
		FontBold = .F., ;
		FontSize = 8, ;
		Height = 16, ;
		Left = 26, ;
		Name = "lblExtension", ;
		TabIndex = 3, ;
		Top = 41, ;
		Visible = .F., ;
		Width = 58
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'pgfEditPage.pagPath.Lbllabel1' AS lblfieldlabelcustom WITH ;
		Alignment = 1, ;
		AutoSize = .F., ;
		Caption = "Path to:", ;
		FontSize = 8, ;
		Height = 16, ;
		Left = 49, ;
		Name = "Lbllabel1", ;
		TabIndex = 2, ;
		Top = 8, ;
		Visible = .T., ;
		Width = 38
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'pgfEditPage.pagPath.txtExtension' AS txttextboxcustom WITH ;
		clinkedlabel = lblExtension, ;
		ControlSource = "", ;
		cvaluesource = THISFORM.oProperties.cTabExtensionList, ;
		FontSize = 8, ;
		IntegralHeight = .T., ;
		Left = 88, ;
		Name = "txtExtension", ;
		TabIndex = 4, ;
		Top = 38, ;
		Visible = .F., ;
		Width = 168
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'pgfEditPage.pagPopup.edtPopupValues' AS edteditboxcustom WITH ;
		ControlSource = "", ;
		cvaluesource = THISFORM.oProperties.cPopupValues, ;
		FontSize = 8, ;
		Height = 64, ;
		lallowenter = .F., ;
		Left = 1, ;
		MaxLength = 0, ;
		Name = "edtPopupValues", ;
		Top = 25, ;
		Width = 255
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="editbox" />

	ADD OBJECT 'pgfEditPage.pagPopup.Lbllabel1' AS lblfieldlabelcustom WITH ;
		Alignment = 0, ;
		AutoSize = .T., ;
		Caption = "Comma seperated list of values:", ;
		FontBold = .F., ;
		FontSize = 8, ;
		Height = 16, ;
		Left = 0, ;
		Name = "Lbllabel1", ;
		Top = 6, ;
		Width = 156
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'pgfEditPage.pagTextbox.chkAlpha' AS chkcheckbox WITH ;
		Caption = "Alpha Only", ;
		ControlSource = "", ;
		cvaluesource = THISFORM.oProperties.lAlpha, ;
		FontSize = 8, ;
		Height = 17, ;
		Left = 59, ;
		Name = "chkAlpha", ;
		TabIndex = 4, ;
		Top = 46, ;
		Width = 78
		*< END OBJECT: ClassLib="codemine.vcx" BaseClass="checkbox" />

	ADD OBJECT 'pgfEditPage.pagTextbox.chkNull' AS chkcheckbox WITH ;
		Caption = "Allow NULL value", ;
		ControlSource = "", ;
		cvaluesource = THISFORM.oProperties.lAllowNull, ;
		FontSize = 8, ;
		Height = 17, ;
		Left = 59, ;
		Name = "chkNull", ;
		TabIndex = 3, ;
		Top = 27, ;
		Width = 115
		*< END OBJECT: ClassLib="codemine.vcx" BaseClass="checkbox" />

	ADD OBJECT 'pgfEditPage.pagTextbox.chkUppercase' AS chkcheckbox WITH ;
		Caption = "Uppercase Only", ;
		ControlSource = "", ;
		cvaluesource = THISFORM.oProperties.lUpperCase, ;
		FontSize = 8, ;
		Height = 17, ;
		Left = 59, ;
		Name = "chkUppercase", ;
		TabIndex = 5, ;
		Top = 66, ;
		Width = 108
		*< END OBJECT: ClassLib="codemine.vcx" BaseClass="checkbox" />

	ADD OBJECT 'pgfEditPage.pagTextbox.Lbllabel2' AS lblfieldlabelcustom WITH ;
		Alignment = 1, ;
		Caption = "Mask:", ;
		FontBold = .F., ;
		FontSize = 8, ;
		Height = 16, ;
		Left = 4, ;
		Name = "Lbllabel2", ;
		TabIndex = 1, ;
		Top = 4, ;
		Width = 30
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'pgfEditPage.pagTextbox.txtPicture' AS txttextboxcustom WITH ;
		ControlSource = "", ;
		cvaluesource = THISFORM.oProperties.cPicture, ;
		FontSize = 8, ;
		Format = "!", ;
		InputMask = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", ;
		IntegralHeight = .T., ;
		Left = 39, ;
		Name = "txtPicture", ;
		TabIndex = 2, ;
		Top = 0, ;
		Width = 217
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />
	
	PROCEDURE afterload
		LOCAL ix, nCount, aKeyTypes[1]
		
		  * Store a local reference to the caller's key properties object.
		  THIS.oProperties = THIS.oCaller.oProperties
		
		  * If key is read-only, dont allow any changes
		  THIS.lWriteLock = THIS.oProperties.lReadonly
		
		  * Create an array od available key types to use as rowsource for various type comboboxes.
		  THIS.AddProperty('aDataTypes[1, 2]')
		  m.nCount = THISFORM.oRegistry.EnumKeysToArray('%Local.External Key Types', KEY_TYPE_CHAR, @m.aKeyTypes)
		  DIMENSION THIS.aDataTypes[m.nCount + 9, 2]
		
		  THIS.aDataTypes[1,1] = 'Character'
		  THIS.aDataTypes[1,2] = KEY_TYPE_CHAR
		  THIS.aDataTypes[2,1] = 'Memo'
		  THIS.aDataTypes[2,2] = KEY_TYPE_MEMO
		  THIS.aDataTypes[3,1] = 'Dropdown List'
		  THIS.aDataTypes[3,2] = KEY_TYPE_POPUP
		  THIS.aDataTypes[4,1] = 'Enumerated Dropdown'
		  THIS.aDataTypes[4,2] = KEY_TYPE_ENUM
		  THIS.aDataTypes[5,1] = 'Logical'
		  THIS.aDataTypes[5,2] = KEY_TYPE_LOGICAL
		  THIS.aDataTypes[6,1] = 'Numeric'
		  THIS.aDataTypes[6,2] = KEY_TYPE_NUMERIC
		  THIS.aDataTypes[7,1] = 'Sequential Counter'
		  THIS.aDataTypes[7,2] = KEY_TYPE_COUNTER
		  THIS.aDataTypes[8,1] = 'File Path'
		  THIS.aDataTypes[8,2] = KEY_TYPE_PATH
		  THIS.aDataTypes[9,1] = 'Binary'
		  THIS.aDataTypes[9,2] = KEY_TYPE_BINARY
		
		  FOR ix = 1 to m.nCount
		    THIS.aDataTypes[m.ix + 9, 1] = TRIM(aKeyTypes[m.ix])
		    THIS.aDataTypes[m.ix + 9, 2] = KEY_TYPE_BINARY
		  ENDFOR
		
	ENDPROC

	PROCEDURE formvalid
		LOCAL cNewKeyName
		
		  WITH THISFORM.oProperties
		    * User wants to save changes. Enforce form level validation now.
		    m.cNewKeyName = .cCategory + IIF(EMPTY(.cCategory), '', '.') + .cName + '.'
		
		    * Make sure new key name is unique, if it has been modified. The reg object will also
		    * enforce this, but we do it here so we can catch the error while the dialog is still open.
		    IF NOT UPPER(m.cNewKeyName) == UPPER(.cKeyPath) ;
		    AND THIS.oRegistry.GetKeyValueEx('%%' + .cWorkarea + '.' + m.cNewKeyName)
		      THIS.oMessage.Warning('The key name "' + .cName + '" is not unique in this category.')
		      THIS.SetNextControl(THISFORM.edtKeyName)
		      RETURN .F.
		    ENDIF
		
		    * Key Type-specific validation
		    DO CASE
		      CASE .nType = KEY_TYPE_POPUP
		        IF EMPTY(.cPopupValues)
		          RETURN THISFORM.oMessage.Warning('A comma seperated list of allowable key values is required')
		        ENDIF
		
		        * Set initial value of new key to first element in popup value list.
		        IF EMPTY(.cValue) OR NOT TRIM(.cValue) $ .cPopupValues
		          .cValue = GetToken(.cPopupValues, ',')
		        ENDIF
		
		      CASE .nType = KEY_TYPE_NUMERIC
		        IF .nSpnLowValue > .nSpnHighValue
		          RETURN THISFORM.oMessage.Warning('The low limit must be less than the high limit.')
		        ENDIF
		
		      CASE .nType = KEY_TYPE_BINARY
		        LOCAL cExternalClass, oExternalEditor
		        m.cExternalClass = THISFORM.oRegistry.GetExternalEditorClass(.cExternalType)
		
		        * If there is an external class for this type, call its key validation method.
		        IF NOT EMPTY(m.cExternalClass)
		          m.oExternalEditor = CREATEOBJECT(m.cExternalClass)
		          IF NOT m.oExternalEditor.ValidateKeyProperties(THIS.oProperties)
		            RETURN .F.
		          ENDIF
		        ENDIF
		    ENDCASE
		  ENDWITH
		  RETURN .T.
		
	ENDPROC

	PROCEDURE Init
		*++
		* This form is called from the main registry editor form with the 
		* correct workarea selected and the current record set.
		*--
		  THIS.SetCaption()
		
		  * If the key field is empty, then this is a newly created key/category.
		  THIS.lChanged = EMPTY(THIS.oProperties.cKeyPath)
		  RETURN DODEFAULT()
		
	ENDPROC

	PROCEDURE saveallchanges
		* Dialog should Return True only if changes were made when OK is pressed.
		THIS.uValue = THIS.lChanged
		RETURN .T.
		
	ENDPROC

	PROCEDURE setcaption		&& Set the window caption to reflect current key name.
		WITH THIS.oProperties
		  THIS.Caption = IIF(EMPTY(.ckeyPath), 'New ', '') ;
		               + IIF(.nType = KEY_TYPE_CATEGORY, 'Category "', 'Key "') ;
		               + IIF(EMPTY(.cCategory), '', .cCategory + '.') ;
		               + .cName + '" Properties'
		ENDWITH
		
	ENDPROC

	PROCEDURE cboDataType.afterchange
		WITH THISFORM.oProperties
		  IF .nType = KEY_TYPE_COUNTER
		    * Set default access and replication properties for counter keys.
		    .nAccess = KEY_ACCESS_DEVELOPER
		    .nReplicationType = KEY_REPLICATE_NONE
		  ENDIF
		
		  * Blank picture out on data type change, so new default will be set on refresh
		  THISFORM.oProperties.cPicture = ''
		
		  IF .nType = KEY_TYPE_BINARY
		    LOCAL cExternalClass, oExternalEditor
		    .cExternalType = IIF(TRIM(THIS.DisplayValue) == 'Binary', '', THIS.DisplayValue)
		
		    * If there is an external class for this type, generate default key properties.
		    m.cExternalClass = THISFORM.oRegistry.GetExternalEditorClass(.cExternalType)
		    IF NOT EMPTY(m.cExternalClass)
		      m.oExternalEditor = CREATEOBJECT(m.cExternalClass)
		      IF PEMSTATUS(m.oExternalEditor, 'DefaultKeyProperties', 5)   && This method is optional
		        m.oExternalEditor.DefaultKeyProperties(THISFORM.oProperties)
		      ENDIF
		    ENDIF
		  ENDIF
		ENDWITH
		THISFORM.Refresh()
		
	ENDPROC

	PROCEDURE cboDataType.showcontrol
		THIS.Visible = NOT THISFORM.oProperties.nType = KEY_TYPE_CATEGORY
		RETURN DODEFAULT()
		
	ENDPROC

	PROCEDURE cboKeyAccess.Init
		THIS.AddItem('Developer Only')
		THIS.AddItem('Administrator Only')
		THIS.AddItem('User Read-Only')
		THIS.AddItem('User Read/Write')
		
		RETURN DODEFAULT()
		
	ENDPROC

	PROCEDURE cboKeyAccess.loadtranslation
		LPARAMETERS uValue
		  RETURN m.uValue + 1
		
	ENDPROC

	PROCEDURE cboKeyAccess.storetranslation
		LPARAMETERS uValue
		  RETURN m.uValue - 1
		
	ENDPROC

	PROCEDURE cboReplication.Init
		IF THISFORM.oProperties.nType != KEY_TYPE_CATEGORY
		  THIS.AddItem('<None>', 1)
		  IF NOT ISNULL(THISFORM.oSecurity)
		    THIS.AddItem('By User', 2)
		  ENDIF
		ENDIF
		RETURN DODEFAULT()
		
	ENDPROC

	PROCEDURE cboReplication.loadtranslation
		LPARAMETERS uValue
		  RETURN m.uValue + 1
		
	ENDPROC

	PROCEDURE cboReplication.showcontrol
		THIS.Visible = NOT INLIST(THISFORM.oProperties.nType, KEY_TYPE_CATEGORY, KEY_TYPE_COUNTER) AND THIS.ListCount > 1
		RETURN DODEFAULT()
		
	ENDPROC

	PROCEDURE cboReplication.storetranslation
		LPARAMETERS uValue
		  RETURN m.uValue - 1
		
	ENDPROC

	PROCEDURE edtDescription.Refresh
		THIS.Parent.lblDesc.Caption = IIF(THISFORM.oProperties.nType = KEY_TYPE_CATEGORY, ;
		         'Category Description:', 'Key description:')
		DODEFAULT()
		
	ENDPROC

	PROCEDURE edtKeyName.afterchange
		  IF EMPTY(THISFORM.oProperties.cLocName)
		    THIS.Parent.edtLocName.SetValue(THIS.Value)
		  ENDIF
		  THISFORM.SetCaption()
		
	ENDPROC

	PROCEDURE edtKeyName.fieldvalid
		* Note that the MaxLength property ensures that an individual key name will not exceed 40 characters,
		* although the full key path (including parent category names) can be over 40 characters.
		  THIS.Value = ALLTRIM(THIS.Value)
		  IF '.' $ THIS.Value OR ',' $ THIS.Value OR '"' $ THIS.Value
		    THISFORM.oMessage.Inform('Key and Category names may not contain periods, commas, or quotes')
		    RETURN 0
		  ENDIF
		  RETURN 2   && Skip over localized name field
		
	ENDPROC

	PROCEDURE edtKeyName.Init
		* Make sure total key length (category + name) fits in registry field.
		THIS.MaxLength = 75 - LEN(THISFORM.oProperties.cCategory) - 1
		RETURN DODEFAULT()
		
	ENDPROC

	PROCEDURE edtLocName.fieldvalid
		  THIS.Value = ALLTRIM(THIS.Value)
		  IF EMPTY(THIS.Value)
		    THIS.Value = THISFORM.oProperties.cName
		  ENDIF
		  IF '.' $ THIS.Value OR ',' $ THIS.Value
		    THISFORM.oMessage.Inform('Key and Category names may not contain periods or commas')
		    RETURN 0
		  ENDIF
		
	ENDPROC

	PROCEDURE edtLocName.Init
		* Make sure total key length (category + name) fits in registry field.
		THIS.MaxLength = 80 - LEN(THISFORM.oProperties.cLocCategory) - 1
		RETURN DODEFAULT()
		
	ENDPROC

	PROCEDURE pgfEditPage.pagBinary.RightClick
		THIS.Parent.RightClick(.T.)
		
	ENDPROC

	PROCEDURE pgfEditPage.pagCategory.Activate
		THIS.Parent.InitPage(THIS)
		
	ENDPROC

	PROCEDURE pgfEditPage.pagCategory.RightClick
		THIS.Parent.RightClick(.T.)
		
	ENDPROC

	PROCEDURE pgfEditPage.pagCounter.cboFormat.afterchange
		THIS.Parent.spnLength.Refresh()
		
	ENDPROC

	PROCEDURE pgfEditPage.pagCounter.cboFormat.Init
		  DODEFAULT()
		  THIS.AddItem('Decimal (Base 10)', 1)
		  THIS.ItemData[1] = COUNTER_TYPE_NUMERIC
		  THIS.AddItem('Hex (Base 16)', 2)
		  THIS.ItemData[2] = COUNTER_TYPE_HEX
		  THIS.AddItem('Alphanumeric (Base 36)', 3)
		  THIS.ItemData[3] = COUNTER_TYPE_CHAR
		  THIS.AddItem('CodeBook (Base 62)', 4)
		  THIS.ItemData[4] = COUNTER_TYPE_BASE62
		  THIS.AddItem('Printable ASCII (Base 95)', 5)
		  THIS.ItemData[5] = COUNTER_TYPE_ASCII
		  THIS.AddItem('Binary Char (Base 256)', 6)
		  THIS.ItemData[6] = COUNTER_TYPE_BIN
		  THIS.AddItem('Integer', 7)
		  THIS.ItemData[7] = COUNTER_TYPE_INT
		
	ENDPROC

	PROCEDURE pgfEditPage.pagCounter.cboFormat.loadtranslation
		LPARAMETER nValue
		LOCAL ix
		  * Scan Itemdata array for value matching current registry field value
		  * and set the combobox to display matching entry.
		  FOR ix = 1 TO THIS.ListCount
		    IF THIS.ItemData[m.ix] = m.nValue
		      RETURN m.ix
		    ENDIF
		  ENDFOR
		  RETURN 0
		
	ENDPROC

	PROCEDURE pgfEditPage.pagCounter.cboFormat.storetranslation
		LPARAMETER nValue
		  RETURN THIS.ItemData[m.nValue]
		
	ENDPROC

	PROCEDURE pgfEditPage.pagCounter.cboReset.Init
		  DODEFAULT()
		  THIS.AddItem('Never (Wrap on overflow)', 1)
		  THIS.ItemData[1] = COUNTER_RESET_WRAP
		  THIS.AddItem('First Day of each Year', 2)
		  THIS.ItemData[2] = COUNTER_RESET_YEAR
		  THIS.AddItem('First day of each Month', 3)
		  THIS.ItemData[3] = COUNTER_RESET_MONTH
		  THIS.AddItem('First day of each Week', 4)
		  THIS.ItemData[4] = COUNTER_RESET_WEEK
		  THIS.AddItem('Every Day', 5)
		  THIS.ItemData[5] = COUNTER_RESET_DAY
		
	ENDPROC

	PROCEDURE pgfEditPage.pagCounter.cboReset.loadtranslation
		LPARAMETER nValue
		LOCAL ix
		  * Scan Itemdata array for value matching current registry field value
		  * and set the combobox to display matching entry.
		  FOR ix = 1 TO THIS.ListCount
		    IF THIS.ItemData[m.ix] = m.nValue
		      RETURN m.ix
		    ENDIF
		  ENDFOR
		  RETURN 0
		
	ENDPROC

	PROCEDURE pgfEditPage.pagCounter.cboReset.storetranslation
		LPARAMETER nValue
		  RETURN THIS.ItemData[m.nValue]
		
	ENDPROC

	PROCEDURE pgfEditPage.pagCounter.spnIncr.Refresh
		LOCAL nMax
		
		  * Determine the maximum significant key length for the current format type.
		  DO CASE
		    CASE THISFORM.oProperties.nCounterFormat = COUNTER_TYPE_CHAR
		      m.nMax = 11
		    CASE THISFORM.oProperties.nCounterFormat = COUNTER_TYPE_BIN
		      m.nMax = 8
		    CASE THISFORM.oProperties.nCounterFormat = COUNTER_TYPE_ASCII
		      m.nMax = 9
		    CASE THISFORM.oProperties.nCounterFormat = COUNTER_TYPE_HEX
		      m.nMax = 13
		    OTHERWISE
		      m.nMax = 16
		  ENDCASE
		
		  THIS.KeyboardHighValue = m.nMax
		  THIS.SpinnerHighValue = m.nMax
		
		  spnSpinner::Refresh()
		
		  * Change the value if it is over the new max limit.
		  IF THIS.Value > m.nMax
		    THIS.SetValue(m.nMax)
		  ENDIF
		
	ENDPROC

	PROCEDURE pgfEditPage.pagCounter.spnLength.Refresh
		LOCAL nMax
		
		  * Determine the maximum significant key length for the current format type.
		  DO CASE
		    CASE THISFORM.oProperties.nCounterFormat = COUNTER_TYPE_CHAR
		      m.nMax = 11
		    CASE THISFORM.oProperties.nCounterFormat = COUNTER_TYPE_BIN
		      m.nMax = 8
		    CASE THISFORM.oProperties.nCounterFormat = COUNTER_TYPE_ASCII
		      m.nMax = 9
		    CASE THISFORM.oProperties.nCounterFormat = COUNTER_TYPE_HEX
		      m.nMax = 13
		    OTHERWISE
		      m.nMax = 16
		  ENDCASE
		
		  THIS.KeyboardHighValue = m.nMax
		  THIS.SpinnerHighValue = m.nMax
		
		  spnSpinner::Refresh()
		
		  * Change the value if it is over the new max limit.
		  IF THIS.Value > m.nMax
		    THIS.SetValue(m.nMax)
		  ENDIF
		
	ENDPROC

	PROCEDURE pgfEditPage.pagEditbox.Activate
		THIS.Parent.InitPage(THIS)
		
	ENDPROC

	PROCEDURE pgfEditPage.pagEditbox.RightClick
		THIS.Parent.RightClick(.T.)
		
	ENDPROC

	PROCEDURE pgfEditPage.pagEnum.cboDataType.Init
		LOCAL ix, nCount, aKeyTypes[1]
		
		  * Build a limited list of basic internal and external key types to use.
		  THIS.AddItem('Character')
		  THIS.ItemData[1] = KEY_TYPE_CHAR
		  THIS.AddItem('Logical')
		  THIS.ItemData[2] = KEY_TYPE_LOGICAL
		  THIS.AddItem('Numeric')
		  THIS.ItemData[3] = KEY_TYPE_NUMERIC
		  THIS.AddItem('File Path')
		  THIS.ItemData[4] = KEY_TYPE_PATH
		
		  m.nCount = THISFORM.oRegistry.EnumKeysToArray('%Local.External Key Types', KEY_TYPE_CHAR, @m.aKeyTypes)
		  FOR ix = 1 to m.nCount
		    THIS.AddItem(TRIM(aKeyTypes[m.ix]))
		    THIS.ItemData[4 + m.ix] = KEY_TYPE_BINARY
		  ENDFOR
		
		  RETURN DODEFAULT()
		
	ENDPROC

	PROCEDURE pgfEditPage.pagEnum.cboDataType.Refresh
		LOCAL ix
		
		IF VARTYPE(THISFORM.oProperties.uEnumType) = 'C'
		  THIS.Value = THISFORM.oProperties.uEnumType
		ELSE
		  * Scan Itemdata array for value matching current registry field value
		  * and set the combobox to display matching entry.
		  FOR ix = 1 TO THIS.ListCount
		    IF THIS.ItemData[m.ix] = THISFORM.oProperties.uEnumType
		      THIS.ListIndex = m.ix
		      EXIT
		    ENDIF
		  ENDFOR
		ENDIF
		
	ENDPROC

	PROCEDURE pgfEditPage.pagEnum.cboDataType.Valid
		THISFORM.lChanged = .T.
		WITH THISFORM.oProperties
		  .uEnumType = THIS.ItemData[THIS.ListIndex]
		  IF .uEnumType = KEY_TYPE_BINARY
		    .uEnumType = THIS.List[THIS.ListIndex]
		  ENDIF
		ENDWITH
		
	ENDPROC

	PROCEDURE pgfEditPage.pagEnum.RightClick
		THIS.Parent.RightClick(.T.)
		
	ENDPROC

	PROCEDURE pgfEditPage.PagLogical.Activate
		THIS.Parent.InitPage(THIS)
		
	ENDPROC

	PROCEDURE pgfEditPage.PagLogical.chkNull.afterchange
		THIS.Parent.txtNull.Refresh()
		
	ENDPROC

	PROCEDURE pgfEditPage.PagLogical.RightClick
		THIS.Parent.RightClick(.T.)
		
	ENDPROC

	PROCEDURE pgfEditPage.PagLogical.txtNull.showcontrol
		* Hide this box and its label if nulls are not allowed.
		THIS.Visible = THISFORM.oProperties.lAllowNull
		RETURN DODEFAULT()
		
	ENDPROC

	PROCEDURE pgfEditPage.pagNumeric.Activate
		THIS.Parent.InitPage(THIS)
		
	ENDPROC

	PROCEDURE pgfEditPage.pagNumeric.RightClick
		THIS.Parent.RightClick(.T.)
		
	ENDPROC

	PROCEDURE pgfEditPage.pagNumeric.spnHighest.Refresh
		THIS.InputMask = IIF(EMPTY(THISFORM.oProperties.cPicture), ;
		                     '9999999999', TRIM(THISFORM.oProperties.cPicture))
		THIS.Increment = THISFORM.oProperties.nSpnIncrement
		RETURN DODEFAULT()
		
	ENDPROC

	PROCEDURE pgfEditPage.pagNumeric.spnIncrement.afterchange
		THIS.Parent.Refresh()
		
	ENDPROC

	PROCEDURE pgfEditPage.pagNumeric.spnIncrement.Refresh
		LOCAL cMask
		
		  * Allow the same number of decimal places that the key value has.
		  IF NOT EMPTY(THISFORM.oProperties.cPicture) AND '.' $ THISFORM.oProperties.cPicture
		    m.cMask = LEFT(SUBSTR(THISFORM.oProperties.cPicture, ;
		                      RAT('.', THISFORM.oProperties.cPicture) + 1), 4)
		    THIS.InputMask = PADL('.' + TRIM(m.cMask), 6, '9')
		  ELSE
		    THIS.InputMask = '999999'
		  ENDIF
		  RETURN DODEFAULT()
		
	ENDPROC

	PROCEDURE pgfEditPage.pagNumeric.spnLowest.Refresh
		THIS.InputMask = IIF(EMPTY(THISFORM.oProperties.cPicture), ;
		                     '999999999999', TRIM(THISFORM.oProperties.cPicture))
		THIS.Increment = THISFORM.oProperties.nSpnIncrement
		RETURN DODEFAULT()
		
	ENDPROC

	PROCEDURE pgfEditPage.pagNumeric.txtPicture.afterchange
		THIS.Parent.Refresh()
		
	ENDPROC

	PROCEDURE pgfEditPage.pagNumeric.txtPicture.fieldvalid
		  IF LEN(TRIM(STRTRAN(THIS.Value, ',', ''))) > 13
		    THISFORM.oMessage.Inform('Input mask string is too long')
		    RETURN 0
		  ENDIF
		  RETURN .T.
		
	ENDPROC

	PROCEDURE pgfEditPage.pagNumeric.txtPicture.Refresh
		IF EMPTY(THISFORM.oProperties.cPicture) OR 'X' $ UPPER(THISFORM.oProperties.cPicture)
		  THISFORM.oProperties.cPicture = REPLICATE('9', 11)
		ENDIF
		RETURN DODEFAULT()
		
	ENDPROC

	PROCEDURE pgfEditPage.pagPath.Activate
		THIS.Parent.InitPage(THIS)
		
	ENDPROC

	PROCEDURE pgfEditPage.pagPath.cboPathType.afterchange
		IF THISFORM.oProperties.nTabPathType = KEY_PATH_TABLE
		  THISFORM.oProperties.cTabExtensionList = 'dbf'
		ENDIF
		THIS.Parent.Refresh()
		
	ENDPROC

	PROCEDURE pgfEditPage.pagPath.cboPathType.Init
		  THIS.AddItem('Table', 1)  && KEY_PATH_TABLE
		  THIS.AddItem('Path', 2)   && KEY_PATH_ONLY
		  THIS.AddItem('File', 3)   && KEY_PATH_FILE
		  RETURN DODEFAULT()
		
	ENDPROC

	PROCEDURE pgfEditPage.pagPath.chkAllowAppend.Refresh
		THIS.Visible = (THISFORM.oProperties.nTabPathType = KEY_PATH_TABLE)
		THIS.lEnabled = THISFORM.oProperties.lTabAllowBrowse
		RETURN DODEFAULT()
		
	ENDPROC

	PROCEDURE pgfEditPage.pagPath.chkAllowBrowse.afterchange
		THIS.Parent.Refresh()
		
	ENDPROC

	PROCEDURE pgfEditPage.pagPath.chkAllowBrowse.Refresh
		THIS.Visible = (THISFORM.oProperties.nTabPathType = KEY_PATH_TABLE)
		RETURN DODEFAULT()
		
	ENDPROC

	PROCEDURE pgfEditPage.pagPath.chkAllowDelete.Refresh
		THIS.Visible = (THISFORM.oProperties.nTabPathType = KEY_PATH_TABLE)
		THIS.lEnabled = THISFORM.oProperties.lTabAllowBrowse
		RETURN DODEFAULT()
		
	ENDPROC

	PROCEDURE pgfEditPage.pagPath.chkAllowEdit.Refresh
		THIS.Visible = (THISFORM.oProperties.nTabPathType = KEY_PATH_TABLE)
		THIS.lEnabled = THISFORM.oProperties.lTabAllowBrowse
		RETURN DODEFAULT()
		
	ENDPROC

	PROCEDURE pgfEditPage.pagPath.chkFullPath.Refresh
		THIS.Visible = (THISFORM.oProperties.nTabPathType != KEY_PATH_ONLY)
		RETURN DODEFAULT()
		
	ENDPROC

	PROCEDURE pgfEditPage.pagPath.RightClick
		THIS.Parent.RightClick(.T.)
		
	ENDPROC

	PROCEDURE pgfEditPage.pagPath.txtExtension.Refresh
		THIS.Visible = (THISFORM.oProperties.nTabPathType = KEY_PATH_FILE)
		RETURN DODEFAULT()
		
	ENDPROC

	PROCEDURE pgfEditPage.pagPopup.Activate
		THIS.Parent.InitPage(THIS)
		
	ENDPROC

	PROCEDURE pgfEditPage.pagPopup.edtPopupValues.Valid
		THIS.Value = ALLTRIM(THIS.Value)
		RETURN DODEFAULT()
		
	ENDPROC

	PROCEDURE pgfEditPage.pagPopup.RightClick
		THIS.Parent.RightClick(.T.)
		
	ENDPROC

	PROCEDURE pgfEditPage.pagTextbox.Activate
		THIS.Parent.InitPage(THIS)
		
	ENDPROC

	PROCEDURE pgfEditPage.pagTextbox.RightClick
		THIS.Parent.RightClick(.T.)
		
	ENDPROC

	PROCEDURE pgfEditPage.pagTextbox.txtPicture.Refresh
		IF EMPTY(THISFORM.oProperties.cPicture)
		  THISFORM.oProperties.cPicture = 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'
		ENDIF
		RETURN DODEFAULT()
		
	ENDPROC

	PROCEDURE pgfEditPage.Refresh
		THIS.SetPage(THISFORM.oProperties.nType, 0, PAGEMASK_NOFOCUS)
		DODEFAULT()
		NODEFAULT
		
	ENDPROC

ENDDEFINE

DEFINE CLASS frmregistryeditor AS frmformcustom OF "..\custom\cforms.vcx" 		&& CodeMine registry editor form.
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="cmBindingManager" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="PgfEditPages" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="PgfEditPages.pagCategory.lblExpandMsg" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="PgfEditPages.pagCategory.lblEmpty" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="PgfEditPages.pagTextbox.txtValue" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="PgfEditPages.pagTextbox.Lbllabel1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="PgfEditPages.pagTextbox.chkNull" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="PgfEditPages.pagEditbox.edtValue" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="PgfEditPages.pagEditbox.Lbllabel1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="PgfEditPages.pagEditbox.chkNull" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="PgfEditPages.pagPopup.cboValue" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="PgfEditPages.pagPopup.Lbllabel1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="PgfEditPages.pagNumeric.spnValue" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="PgfEditPages.pagNumeric.Lbllabel1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="PgfEditPages.pagNumeric.chkNull" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="PgfEditPages.pagLogical.Lbllabel1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="PgfEditPages.pagLogical.cboValue" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="PgfEditPages.pagPath.cmdPath" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="PgfEditPages.pagPath.edtPath" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="PgfEditPages.pagPath.cmdBrowse" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="PgfEditPages.pagBinary.lblBinary" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="PgfEditPages.pagBinary.cmdEditValue" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="PgfEditPages.pagEnumPopup.cboValue" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="PgfEditPages.pagEnumPopup.Lbllabel1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="PgfEditPages.pagCounter.spnValue" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="PgfEditPages.pagCounter.Lbllabel1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="PgfEditPages.pagCounter.lblLastReset" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="PgfEditPages.pagCounter.Lbllabel6" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="PgfEditPages.pagCounter.Lbltext1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblKeyDesc" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblKeyName" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntOkCancelApply" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblMenu" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="oleTree" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="oleImages" UniqueID="" Timestamp="" />

	#INCLUDE "codemine.h"
	*<DefinedPropArrayMethod>
		*m: deletekey		&& Delete the current registry key record in the current workarea.
		*m: displaykeydetails		&& Format key name for display
		*m: loadkey		&& Load a new key for display.
		*m: setnodeimage		&& Set the image bitmap for the specified node, based on the key datatype.
		*m: treeaddcategory		&& Add a category node to the treeview.
		*m: treeaddroot
		*m: treeinit
		*m: treeloadchildren		&& Load subordinate keys for specified category.
		*p: cclasskeyeditor		&& Class name of the Key Editor form.
		*p: clocalcategorydesc		&& Local key category description
		*p: clocalcategoryname		&& Category name for local keys
		*p: creadonly		&& Read-only designator appended to primary keynames in outline.
		*p: crootkeydesc		&& Description for Root key
		*p: crootkeyname		&& Specifies the text displayed in the Root Key position in the key outline.
		*p: csharedcategorydesc		&& Shared key category description
		*p: csharedcategoryname		&& Category name for shared keys
		*p: lbuildonexpand		&& Set to .T. to build each tree category as it is expanded, or .F. to build all on init.
		*p: ldevelopment		&& Set true to enable registry development options.
		*p: naccess		&& Key access level current user has.
	*</DefinedPropArrayMethod>

	Caption = "Application Registry Editor"
	cclasskeyeditor = frmKeyEditor		&& Class name of the Key Editor form.
	clocalcategorydesc = This category contains keys that may be shared or local, depnding on your instalation.		&& Local key category description
	clocalcategoryname = Local Keys		&& Category name for local keys
	creadonly = [Read Only]		&& Read-only designator appended to primary keynames in outline.
	crootkeydesc = 		&& Description for Root key
	crootkeyname = Application Registry		&& Specifies the text displayed in the Root Key position in the key outline.
	csharedcategorydesc = This category contains keys that are shared with other users if you are on a network.		&& Shared key category description
	csharedcategoryname = Shared Keys		&& Category name for shared keys
	cversion = 2.0.0
	DataSession = 2
	DoCreate = .T.
	Height = 270
	lbuildonexpand = .T.		&& Set to .T. to build each tree category as it is expanded, or .F. to build all on init.
	ldevelopment = .F.		&& Set true to enable registry development options.
	lrememberposition = .T.
	lremembersize = .T.
	MinButton = .F.
	MinHeight = (THIS.Height)
	MinWidth = (THIS.Width-50)
	naccess = 0		&& Key access level current user has.
	Name = "frmregistryeditor"
	oregistry = .NULL.
	osecurity = .NULL.
	Width = 616

	ADD OBJECT 'cmBindingManager' AS cmbindingmanagercustom WITH ;
		Left = 564, ;
		lnoinitdata = .T., ;
		Name = "cmBindingManager", ;
		Top = 236, ;
		ZOrderSet = 0
		*< END OBJECT: ClassLib="..\custom\cdata.vcx" BaseClass="container" />

	ADD OBJECT 'cntOkCancelApply' AS cntokcancelapplycustom WITH ;
		BackStyle = 0, ;
		creposition = vFollow,hFollow, ;
		Left = 319, ;
		Name = "cntOkCancelApply", ;
		TabIndex = 3, ;
		Top = 229, ;
		ZOrderSet = 4, ;
		cmdApply.Name = "cmdApply", ;
		cmdCancel.Name = "cmdCancel", ;
		cmdOK.Caption = "\<Close", ;
		cmdOK.llocalizecaption = .T., ;
		cmdOK.Name = "cmdOK"
		*< END OBJECT: ClassLib="..\custom\cbutton.vcx" BaseClass="container" />

	ADD OBJECT 'lblKeyDesc' AS lbltextcustom WITH ;
		Alignment = 0, ;
		AutoSize = .F., ;
		BackStyle = 0, ;
		Caption = "", ;
		creposition = Hfollow, ;
		FontItalic = .T., ;
		FontSize = 8, ;
		Height = 49, ;
		Left = 287, ;
		Name = "lblKeyDesc", ;
		TabIndex = 4, ;
		Top = 31, ;
		Width = 318, ;
		WordWrap = .T., ;
		ZOrderSet = 2
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblKeyName' AS lbltextcustom WITH ;
		Alignment = 0, ;
		AutoSize = .F., ;
		BackStyle = 0, ;
		Caption = "     ", ;
		creposition = Hfollow, ;
		FontBold = .T., ;
		FontSize = 8, ;
		Height = 17, ;
		Left = 284, ;
		Name = "lblKeyName", ;
		TabIndex = 5, ;
		Top = 12, ;
		Width = 327, ;
		ZOrderSet = 3
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblMenu' AS lbltextcustom WITH ;
		Alignment = 2, ;
		BackStyle = 0, ;
		Caption = ('Developer Mode Enabled' + CHR(13) + 'Right-Click outline to Add or Edit keys.'), ;
		creposition = Hfollow,Vfollow, ;
		FontItalic = .T., ;
		FontSize = 9, ;
		Height = 32, ;
		Left = 322, ;
		Name = "lblMenu", ;
		TabIndex = 6, ;
		Top = 184, ;
		Visible = .F., ;
		Width = 235, ;
		WordWrap = .T., ;
		ZOrderSet = 5
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'oleImages' AS oleimagelist6 WITH ;
		Height = 41, ;
		Left = 116, ;
		Name = "oleImages", ;
		Top = 200, ;
		Width = 40
		*< END OBJECT: ClassLib="cmactivx.vcx" BaseClass="olecontrol" OLEObject="c:\winnt\system32\mscomctl.ocx" Value="" />

	ADD OBJECT 'oleTree' AS oletreeview6 WITH ;
		creposition = hStretch,vStretch, ;
		DragIcon = ..\graphics\dragmove.cur, ;
		Height = 258, ;
		ldragcanstart = .NULL., ;
		Left = 5, ;
		Name = "oleTree", ;
		Top = 7, ;
		Width = 265
		*< END OBJECT: ClassLib="cmactivx.vcx" BaseClass="olecontrol" OLEObject="c:\winnt\system32\mscomctl.ocx" Value="0M8R4KGxGuEAAAAAAAAAAAAAAAAAAAAAPgADAP7/CQAGAAAAAAAAAAAAAAABAAAAAQAAAAAAAAAAEAAAAgv////7///8EAAAA/vbwBvAHQAIABFAG4AdAByAHkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWAAUA//////////8BAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGBblKGB78MBAwAAAEACAAAAAAAAAwBPAGwAZQBPAGIAagBlAGMAdABEAGEAdABhAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4AAgEDAAAAAgAAAP////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAagAAAAAAAAADAEEAYwBjAGUAcwBzAE8AYgBqAFMAaQB0AGUARABhAHQAYQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJgACAP///////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAABcAAAAAAAAAAMAQwBoAGEAbgBnAGUAZABQAHIAbwBwAHMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcAAIA////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAA0BAAAAAAAABAAAAAIAAAD+////BQAAAP7///8GAAAABwAAAAgkEHHiYXREbFqAMDwKDYoIUM0EggAAABjGwAAqhoAALE8wWoBAAYAIgAAAHxkAGSEAAAASGRpdJkkqgoB782rXAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAACQAAAA4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA5MzY4MjY1RS04NUZFLTExZDEtOEJFMy0wMDAwRjg3NTREQTEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAACADgAAAEhpZGVTZWxlY3Rpb24ABQAAAEwAAAAADAAAAEluZGVudGF0aW9uABEAAABODQAAAAcAAAAAAAAAAAAFAGgmqgoGIHIzAAAAAAUAAICc2RIAAQAAAFwAH97svQEABQCk2RIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFEAKAAAATGFiZWxFZGl0AAkAAABJCgAAAAEAAAAKAAAATGluZVN0eWxlAAkAAABJCgAAAAAAAAANAAAATW91c2VQb2ludGVyAAkAAABJCgAAAAAAAAAOAAAAUGF0aFNlcGFyYXRvcgAKAAAASAAAAAABAAAAXAwAAABPTEVEcmFnTW9kZQAJAAAASQoAAAAAAAAADAAAAE9MRURyb3BNb2RlAAkAAABJCgAAAAEAAAAOAAAARnVsbFJvd1NlbGVjd

	ADD OBJECT 'PgfEditPages' AS pgfpageframecustom WITH ;
		BorderWidth = 0, ;
		creposition = Hfollow, ;
		ErasePage = .T., ;
		Height = 81, ;
		Left = 286, ;
		Name = "PgfEditPages", ;
		PageCount = 10, ;
		SpecialEffect = 2, ;
		TabIndex = 2, ;
		Tabs = .F., ;
		Top = 90, ;
		Width = 314, ;
		ZOrderSet = 1, ;
		Page1.BackStyle = 0, ;
		Page1.Caption = "Page1", ;
		Page1.Name = "pagCategory", ;
		Page1.PageOrder = 1, ;
		Page10.BackStyle = 0, ;
		Page10.Caption = "Page10", ;
		Page10.Name = "pagCounter", ;
		Page10.PageOrder = 10, ;
		Page2.BackStyle = 0, ;
		Page2.Caption = "Textbox", ;
		Page2.Name = "pagTextbox", ;
		Page2.PageOrder = 2, ;
		Page3.BackStyle = 0, ;
		Page3.Caption = "Editbox", ;
		Page3.Name = "pagEditbox", ;
		Page3.PageOrder = 3, ;
		Page4.BackStyle = 0, ;
		Page4.Caption = "Popup", ;
		Page4.Name = "pagPopup", ;
		Page4.PageOrder = 4, ;
		Page5.BackStyle = 0, ;
		Page5.Caption = "Spinner", ;
		Page5.Name = "pagNumeric", ;
		Page5.PageOrder = 5, ;
		Page6.BackStyle = 0, ;
		Page6.Caption = "Logical", ;
		Page6.Name = "pagLogical", ;
		Page6.PageOrder = 6, ;
		Page7.BackStyle = 0, ;
		Page7.Caption = "Path", ;
		Page7.FontSize = 9, ;
		Page7.Name = "pagPath", ;
		Page7.PageOrder = 7, ;
		Page8.BackStyle = 0, ;
		Page8.Caption = "Binary", ;
		Page8.Name = "pagBinary", ;
		Page8.PageOrder = 8, ;
		Page9.BackStyle = 0, ;
		Page9.Caption = "Enum", ;
		Page9.Name = "pagEnumPopup", ;
		Page9.PageOrder = 9
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="pageframe" />

	ADD OBJECT 'PgfEditPages.pagBinary.cmdEditValue' AS cmdcommandbuttoncustom WITH ;
		AutoSize = .F., ;
		Caption = "Edit Value...", ;
		Comment = "", ;
		Height = 23, ;
		Left = 114, ;
		Name = "cmdEditValue", ;
		Tag = "", ;
		Top = 33, ;
		Width = 75
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'PgfEditPages.pagBinary.lblBinary' AS lbltextcustom WITH ;
		BackStyle = 0, ;
		Caption = "The value for this key may only be edited by an external application.", ;
		FontBold = .F., ;
		FontItalic = .T., ;
		Height = 32, ;
		Left = 0, ;
		Name = "lblBinary", ;
		Top = 1, ;
		Width = 260, ;
		WordWrap = .T.
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'PgfEditPages.pagCategory.lblEmpty' AS lbltextcustom WITH ;
		BackStyle = 0, ;
		Caption = "There are no Keys in this Category.", ;
		FontSize = 10, ;
		Height = 18, ;
		Left = 2, ;
		Name = "lblEmpty", ;
		Top = 10, ;
		Visible = .F., ;
		Width = 220, ;
		WordWrap = .T.
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'PgfEditPages.pagCategory.lblExpandMsg' AS lbltextcustom WITH ;
		BackStyle = 0, ;
		Caption = "Click the plus sign to see the items in this category", ;
		FontBold = .F., ;
		FontSize = 9, ;
		Height = 17, ;
		Left = 2, ;
		Name = "lblExpandMsg", ;
		Top = 4, ;
		Width = 279, ;
		WordWrap = .T.
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'PgfEditPages.pagCounter.Lbllabel1' AS lblfieldlabelcustom WITH ;
		AutoSize = .F., ;
		BackStyle = 0, ;
		Caption = "Value:", ;
		FontBold = .F., ;
		FontSize = 8, ;
		Height = 16, ;
		Left = 25, ;
		Name = "Lbllabel1", ;
		TabIndex = 5, ;
		Top = 4, ;
		Width = 32
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'PgfEditPages.pagCounter.Lbllabel6' AS lbltextcustom WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "Last Reset:", ;
		FontBold = .F., ;
		FontSize = 8, ;
		Height = 16, ;
		Left = 63, ;
		Name = "Lbllabel6", ;
		TabIndex = 11, ;
		Top = 31, ;
		Width = 57
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'PgfEditPages.pagCounter.lblLastReset' AS lbltextcustom WITH ;
		AutoSize = .F., ;
		BackStyle = 0, ;
		Caption = "Never", ;
		FontItalic = .T., ;
		Height = 18, ;
		Left = 121, ;
		Name = "lblLastReset", ;
		TabIndex = 8, ;
		Top = 30, ;
		Width = 179
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'PgfEditPages.pagCounter.Lbltext1' AS lbltextcustom WITH ;
		BackStyle = 0, ;
		Caption = "(Decimal)", ;
		FontSize = 8, ;
		Left = 224, ;
		Name = "Lbltext1", ;
		Top = 4, ;
		Width = 51
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'PgfEditPages.pagCounter.spnValue' AS spnspinnercustom WITH ;
		cvaluesource = THISFORM.oProperties.nValue, ;
		Height = 22, ;
		InputMask = "9,999,999,999,999,999", ;
		Left = 60, ;
		lnoinitdata = .T., ;
		Name = "spnValue", ;
		SelectOnEntry = .T., ;
		TabIndex = 1, ;
		Top = 1, ;
		Width = 159
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="spinner" />

	ADD OBJECT 'PgfEditPages.pagEditbox.chkNull' AS chkcheckbox WITH ;
		Caption = "Null", ;
		FontSize = 9, ;
		Left = 54, ;
		Name = "chkNull", ;
		TabIndex = 2, ;
		Top = 4
		*< END OBJECT: ClassLib="codemine.vcx" BaseClass="checkbox" />

	ADD OBJECT 'PgfEditPages.pagEditbox.edtValue' AS edteditboxcustom WITH ;
		ControlSource = "", ;
		cvaluesource = THISFORM.oProperties.cValue, ;
		FontSize = 9, ;
		Height = 53, ;
		Left = 5, ;
		Name = "edtValue", ;
		TabIndex = 3, ;
		ToolTipText = "Edit Key Value", ;
		Top = 24, ;
		Value = , ;
		Width = 297
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="editbox" />

	ADD OBJECT 'PgfEditPages.pagEditbox.Lbllabel1' AS lblfieldlabelcustom WITH ;
		BackStyle = 0, ;
		Caption = "Value:", ;
		FontBold = .F., ;
		FontSize = 9, ;
		Height = 17, ;
		Left = 2, ;
		Name = "Lbllabel1", ;
		TabIndex = 1, ;
		Top = 5, ;
		Width = 36
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'PgfEditPages.pagEnumPopup.cboValue' AS cbocomboboxcustom WITH ;
		cvaluesource = THISFORM.oProperties.cValue, ;
		FontSize = 9, ;
		Height = 24, ;
		Left = 40, ;
		lnoinitdata = .T., ;
		Name = "cboValue", ;
		RowSourceType = 1, ;
		Style = 2, ;
		Top = 2, ;
		Width = 240
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="combobox" />

	ADD OBJECT 'PgfEditPages.pagEnumPopup.Lbllabel1' AS lblfieldlabelcustom WITH ;
		Alignment = 1, ;
		BackStyle = 0, ;
		Caption = "Value:", ;
		FontBold = .F., ;
		FontSize = 9, ;
		Height = 17, ;
		Left = 2, ;
		Name = "Lbllabel1", ;
		Top = 5, ;
		Width = 36
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'PgfEditPages.pagLogical.cboValue' AS cbocomboboxcustom WITH ;
		cvaluesource = THISFORM.oProperties.lValue, ;
		FontSize = 9, ;
		Left = 40, ;
		Name = "cboValue", ;
		Style = 2, ;
		Top = 2, ;
		Width = 240
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="combobox" />

	ADD OBJECT 'PgfEditPages.pagLogical.Lbllabel1' AS lblfieldlabelcustom WITH ;
		Alignment = 1, ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "Value:", ;
		FontBold = .F., ;
		FontSize = 9, ;
		Height = 17, ;
		Left = 2, ;
		Name = "Lbllabel1", ;
		Top = 5, ;
		Width = 36
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'PgfEditPages.pagNumeric.chkNull' AS chkcheckbox WITH ;
		Caption = "Null", ;
		FontSize = 9, ;
		Left = 213, ;
		Name = "chkNull", ;
		TabIndex = 2, ;
		Top = 5
		*< END OBJECT: ClassLib="codemine.vcx" BaseClass="checkbox" />

	ADD OBJECT 'PgfEditPages.pagNumeric.Lbllabel1' AS lblfieldlabelcustom WITH ;
		Alignment = 1, ;
		BackStyle = 0, ;
		Caption = "Value:", ;
		FontBold = .F., ;
		FontSize = 9, ;
		Height = 17, ;
		Left = 2, ;
		Name = "Lbllabel1", ;
		Top = 5, ;
		Width = 36
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'PgfEditPages.pagNumeric.spnValue' AS spnspinnercustom WITH ;
		ControlSource = "", ;
		cvaluesource = THISFORM.oProperties.nValue, ;
		FontSize = 9, ;
		Height = 24, ;
		Left = 41, ;
		Name = "spnValue", ;
		SelectOnEntry = .T., ;
		Top = 2, ;
		Width = 158
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="spinner" />

	ADD OBJECT 'PgfEditPages.pagPath.cmdBrowse' AS cmdcommandbuttoncustom WITH ;
		AutoSize = .T., ;
		Caption = "Browse Table...", ;
		Left = 111, ;
		Name = "cmdBrowse", ;
		Top = 48
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'PgfEditPages.pagPath.cmdPath' AS cmdcommandbuttoncustom WITH ;
		Caption = "Path...", ;
		Height = 23, ;
		Left = 4, ;
		Name = "cmdPath", ;
		TabIndex = 1, ;
		Top = 7, ;
		Width = 62
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'PgfEditPages.pagPath.edtPath' AS edteditboxcustom WITH ;
		ControlSource = "", ;
		cvaluesource = THISFORM.oProperties.cValue, ;
		FontSize = 9, ;
		lallowzoom = .F., ;
		Left = 73, ;
		MaxLength = 0, ;
		Name = "edtPath", ;
		Top = 6, ;
		Width = 229
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="editbox" />

	ADD OBJECT 'PgfEditPages.pagPopup.cboValue' AS cbocomboboxcustom WITH ;
		ControlSource = "", ;
		cvaluesource = THISFORM.oProperties.cValue, ;
		FontSize = 9, ;
		Height = 22, ;
		Left = 40, ;
		Name = "cboValue", ;
		RowSourceType = 0, ;
		Style = 2, ;
		Top = 2, ;
		Width = 240
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="combobox" />

	ADD OBJECT 'PgfEditPages.pagPopup.Lbllabel1' AS lblfieldlabelcustom WITH ;
		Alignment = 1, ;
		BackStyle = 0, ;
		Caption = "Value:", ;
		FontBold = .F., ;
		FontSize = 9, ;
		Height = 17, ;
		Left = 2, ;
		Name = "Lbllabel1", ;
		Top = 5, ;
		Width = 36
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'PgfEditPages.pagTextbox.chkNull' AS chkcheckbox WITH ;
		Caption = "Null", ;
		FontSize = 9, ;
		Height = 16, ;
		Left = 39, ;
		Name = "chkNull", ;
		TabIndex = 2, ;
		Top = 34, ;
		Width = 100
		*< END OBJECT: ClassLib="codemine.vcx" BaseClass="checkbox" />

	ADD OBJECT 'PgfEditPages.pagTextbox.Lbllabel1' AS lblfieldlabelcustom WITH ;
		Alignment = 1, ;
		BackStyle = 0, ;
		Caption = "Value:", ;
		FontBold = .F., ;
		FontSize = 9, ;
		Height = 17, ;
		Left = 2, ;
		Name = "Lbllabel1", ;
		TabIndex = 1, ;
		Top = 5, ;
		Width = 36
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'PgfEditPages.pagTextbox.txtValue' AS txttextboxcustom WITH ;
		Alignment = 3, ;
		cvaluesource = THISFORM.oProperties.cValue, ;
		FontSize = 9, ;
		Left = 40, ;
		Name = "txtValue", ;
		TabIndex = 2, ;
		Top = 2, ;
		Width = 245
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />
	
	PROCEDURE afterload
		THIS.AddProperty('cCurrentKey', '')
		THIS.AddProperty('oProperties', CREATEOBJECT('cmRegProperties'))
		
	ENDPROC

	PROCEDURE beforechange
		LPARAMETER cWorkarea
		*++
		* Set form level change flags, and update button status.
		* Workarea parameter is ignored here.
		*--
		  THIS.lChanged = .T.      && Current key record is changed
		
		  * Refresh apply button. This also will refresh the "Form Edit" action states.
		  THIS.cntOkCancelApply.Refresh()
		
	ENDPROC

	PROCEDURE cancelallchanges
		LOCAL oNode
		
		  * Discard any outstanding changes, and reload current key
		  IF THIS.lChanged
		    THIS.lChanged = .F.
		    IF NOT EMPTY(THIS.cCurrentKey)
		      WITH THIS.oProperties
		        m.oNode = THIS.oleTree.Nodes[THIS.cCurrentKey]
		
		        * Re-Load the key pointed to by the currently selected tree node.
		        THIS.cCurrentKey = ''
		        THISFORM.LoadKey(m.oNode.Key)
		
		        * Update key and display name in the Node object, in case they were changed.
		        m.oNode.Text = .cLocName
		        THISFORM.SetNodeImage(m.oNode, .nType)
		      ENDWITH
		    ENDIF
		    RETURN .T.
		  ENDIF
		  RETURN .F.
		
	ENDPROC

	PROCEDURE deletekey		&& Delete the current registry key record in the current workarea.
	ENDPROC

	PROCEDURE displaykeydetails		&& Format key name for display
		*++
		* Format a key name for display in the right panel caption bar.
		*--
		LOCAL lUseLocalizedNames, oNode, cKey, cDisplayName
		
		  * For the top display, we don't follow the form level localized-name setting.
		  * Developer mode always uses English names, so they match what the code must use.
		  m.lUseLocalizedNames = NOT THIS.lDevelopment
		
		  * Format the key name from the current record for display in dialogs.
		  m.oNode = THISFORM.oleTree.SelectedItem
		  IF NOT ISNULL(m.oNode)
		    m.cKey = m.oNode.Key
		
		    DO CASE
		      CASE m.cKey == 'Root'
		        THIS.lblKeyName.Caption = THIS.cRootKeyName
		        THIS.lblKeyDesc.Caption = IIF(EMPTY(THIS.cRootKeyDesc), '(' + THIS.oRegistry.Get('DBCPath') + ')', THIS.cRootKeyDesc)
		
		      CASE m.cKey == '%Shared'
		        THIS.lblKeyName.Caption = THIS.cSharedCategoryName + ' (' + LOWER(THIS.oRegistry.Get('Shared')) + ')'
		        THIS.lblKeyDesc.Caption = THIS.cSharedCategoryDesc
		
		      CASE m.cKey == '%Local'
		        THIS.lblKeyName.Caption = THIS.cLocalCategoryName + ' (' + LOWER(THIS.oRegistry.Get('Local')) + ')'
		        THIS.lblKeyDesc.Caption = THIS.cLocalCategoryDesc
		
		      CASE NOT '.' $ m.cKey     && Some other root table item in treeview
		        THIS.lblKeyName.Caption = m.oNode.Text
		        THIS.lblKeyDesc.Caption = NVL('(' + LOWER(THIS.oRegistry.Get(m.cKey)) + ')', '')
		
		      OTHERWISE
		        WITH THIS.oProperties
		          IF m.lUseLocalizedNames
		            m.cDisplayName = .cLocCategory + IIF(EMPTY(.cLocCategory), '', '.') + .cLocName
		          ELSE
		            m.cDisplayName = .cCategory + IIF(EMPTY(.cCategory), '', '.') + .cName
		            m.cDisplayName = GetToken(m.cKey, '.') + '.' + m.cDisplayName
		          ENDIF
		        ENDWITH
		        THIS.lblKeyName.Caption = m.cDisplayName
		        THIS.lblKeyDesc.Caption = NVL(THIS.oProperties.cDescription, '')
		    ENDCASE
		  ENDIF
		  RETURN .T.
		
	ENDPROC

	PROCEDURE Init
		LPARAMETER cFilter
		*++
		* Apply development mode parameter to form property.
		*--
		  * Determine whether or not to enable developer-only features.
		  IF ISNULL(THIS.oSecurity)
		    THIS.lDevelopment = (PCOUNT() = 0)
		    THIS.nAccess = IIF(THIS.lDevelopment, KEY_ACCESS_DEVELOPER, KEY_ACCESS_VIEW)
		  ELSE
		    DO CASE
		      CASE THIS.oSecurity.HasPrivilege('Developer')
		        THIS.lDevelopment = .T.
		        THIS.nAccess = KEY_ACCESS_DEVELOPER
		      CASE THIS.oSecurity.HasPrivilege('Administrator')
		        THIS.nAccess = KEY_ACCESS_ADMIN
		      OTHERWISE
		        THIS.nAccess = KEY_ACCESS_VIEW
		    ENDCASE
		  ENDIF
		
		  * Only allow modeless operation if no filter is in effect.
		  * This setting may be overridden by a parameter to the SHOW method.
		  IF NOT EMPTY(m.cFilter)
		    THIS.WindowType = 1  && Modal
		  ENDIF
		
		  * Init the outline now, when we have the filter parameter.
		  THIS.TreeInit(m.cFilter)
		
		  * Display the Developer Mode indicator as appropriate.
		  THIS.lblMenu.Refresh()
		  RETURN DODEFAULT()
		
	ENDPROC

	PROCEDURE initsession
		* We have a private datasession, so no need to preserve old settings.
		SET EXACT OFF
		SET CENTURY ON
		RETURN DODEFAULT()
		
	ENDPROC

	PROCEDURE iseditallowed
		*++
		* Determine whether or not current key value may be edited.
		* Return .T. if read-only. Workarea parameter is ignored.
		*
		* Key is read-only if:
		*   We dont have write access to registry.
		*	Editor is running in user mode and key is marked read-only.
		*--
		  RETURN NOT THIS.oProperties.lReadonly ;
		     AND NOT (THISFORM.nAccess > KEY_ACCESS_ADMIN AND THIS.oProperties.nAccess = KEY_ACCESS_VIEW)
		
	ENDPROC

	PROCEDURE isenabled
		LPARAMETER cMethod, cWorkarea
		*++
		* Determine which toolbar options are enabled.
		*--
		  IF PROPER(m.cMethod) $ 'Save,Cancel'
		    RETURN THISFORM.lChanged
		  ENDIF
		  RETURN DODEFAULT(m.cMethod)
		
	ENDPROC

	PROCEDURE loadkey		&& Load a new key for display.
		LPARAMETERS cKeyName
		*++
		* Save any changes to current record, and move to new one specified
		* by the specified key name.
		*--
		  IF NOT UPPER(TRIM(THIS.cCurrentKey)) == UPPER(TRIM(m.cKeyName))
		    * If changes were made to oProperties members, write them back to the table.
		    IF THIS.lChanged
		      THIS.SaveAllChanges()
		    ENDIF
		
		    THIS.cCurrentKey = m.cKeyName
		
		    * Load details for the key pointed to by new outline item.
		    IF NOT '.' $ m.cKeyName OR NOT THIS.oRegistry.GetKey(m.cKeyName, THIS.oProperties)
		      * Usually occurs only at root or if all records are deleted.
		      THIS.oProperties.Clear()
		    ENDIF
		
		    * Refresh form, but not the treeview
		    THIS.pgfEditPages.Refresh()
		    THIS.cntOkCancelApply.Refresh()
		  ENDIF
		
	ENDPROC

	PROCEDURE registryupdate
		* Reload the value for the current key if the registry was changed
		* This keeps the display current if another object edits a key we are displaying.
		IF NOT THIS.lChanged AND NOT EMPTY(THIS.cCurrentKey)
		  THIS.oRegistry.GetKey(THIS.cCurrentKey, THIS.oProperties)
		  THIS.pgfEditPages.Refresh()
		ENDIF
		DODEFAULT()
		
	ENDPROC

	PROCEDURE save
		LPARAMETERS cWorkarea
		
		  * Only execute default code if change flag is set.
		  RETURN NOT THIS.lChanged OR DODEFAULT(m.cWorkarea)
		
	ENDPROC

	PROCEDURE saveallchanges
		LOCAL oNode
		
		  * Store memory copies back to current table record before moving pointer.
		  IF THIS.oRegistry.SetKey(THIS.oProperties, REGMASK_BROADCAST + REGMASK_LOG)
		    THIS.lChanged = .F.
		
		    * Update the keyName link in the tree after save, in case it was renamed.
		    IF NOT EMPTY(THIS.cCurrentKey)
		      WITH THIS.oProperties
		        m.oNode = THIS.oleTree.Nodes[THIS.cCurrentKey]
		        IF NOT ISNULL(m.oNode.Parent)
		          m.oNode.Key = m.oNode.Parent.Key + '.' + .cName
		        ENDIF
		      ENDWITH
		    ENDIF
		    THIS.cntOkCancelApply.Refresh()
		    RETURN .T.
		  ENDIF
		  RETURN .F.
		
	ENDPROC

	PROCEDURE setnodeimage		&& Set the image bitmap for the specified node, based on the key datatype.
		LPARAMETERS oNode, nType
		
		  DO CASE
		    CASE m.nType = KEY_TYPE_CATEGORY
		      m.oNode.Image = 1
		      m.oNode.ExpandedImage = 2
		    CASE m.nType = KEY_TYPE_NUMERIC
		      m.oNode.Image = 5
		    CASE m.nType = KEY_TYPE_LOGICAL
		      m.oNode.Image = 6
		    CASE m.nType = KEY_TYPE_BINARY
		      m.oNode.Image = 3
		    CASE m.nType = KEY_TYPE_COUNTER
		      m.oNode.Image = 7
		    OTHERWISE
		      m.oNode.Image = 4
		  ENDCASE
		
	ENDPROC

	PROCEDURE treeaddcategory		&& Add a category node to the treeview.
		LPARAMETERS cRoot, cKey, cText
		*++
		* Add the specified category node, with a default placeholder node 
		* under it to trigger subkey load on expansion.
		*--
		LOCAL oNode, oPlaceholder
		
		  WITH THIS.oleTree
		    IF EMPTY(m.cRoot)
		      m.oNode = .Nodes.Add(, 1, m.cKey, m.cText)
		    ELSE
		      m.oNode = .Nodes.Add(m.cRoot, 4, m.cKey, m.cText)
		    ENDIF
		    m.oNode.Image = 1
		    m.oNode.ExpandedImage = 2
		
		    IF THIS.lBuildOnExpand
		      m.oPlaceholder = .Nodes.Add(m.cKey, 4,, 'Loading Keys...')
		      m.oPlaceholder.Tag = 'Placeholder'
		    ENDIF
		  ENDWITH
		  RETURN m.oNode
		
	ENDPROC

	PROCEDURE treeaddroot
		LPARAMETERS cParentKey, oCursor, cRootCategory, cDisplayName
		LOCAL lStatus
		
		  IF EMPTY(m.cDisplayName)
		    m.cDisplayName = m.cRootCategory
		  ENDIF
		  m.cDisplayName = m.cDisplayName + IIF(m.oCursor.IsReadonly(), ' ' + THIS.cReadOnly, '')
		  m.lStatus = THIS.TreeAddCategory(m.cParentKey, m.cRootCategory, m.cDisplayName)
		
		  * Build the entire tree at once if lBuildOnExpand is not set.
		  IF NOT THIS.lBuildOnExpand
		    LOCAL cKey, cCategory, cText, nIndex, nDepth, nType, cKeyName, cLocName, nAccess
		    m.nDepth = 0
		    DO WHILE THISFORM.oRegistry.EnumKeys(m.cRootCategory + '**', @m.nType, @m.nIndex, @m.cKeyName, @cLocName,,, @m.nAccess) > 0
		      * If we hit a key at a lower depth, end current category, even if we end up 
		      * filtering out this key due to access level restrictions.
		      m.nDepth = MIN(m.nDepth, OCCURS('.', m.cKeyName))
		
		      * Check user security access to view this key.
		      IF NOT THISFORM.lDevelopment AND m.nAccess < THIS.nAccess
		        LOOP
		      ENDIF
		
		      * Count dots to determine key depth. Ignore keys with depth greater than current depth, 
		      * so if a category was skipped due to access, all its subordinates will also be skipped.
		      IF OCCURS('.', m.cKeyName) > m.nDepth
		        LOOP
		      ENDIF
		
		      m.cKey = m.cRootCategory + '.' + m.cKeyName
		      m.cText = SUBSTR(m.cLocName, RAT('.', m.cLocName) + 1)
		
		      * Increment Depth counter on each category.
		      IF m.nType = KEY_TYPE_CATEGORY
		        m.nDepth = OCCURS('.', m.cKeyName) + 1
		      ENDIF
		      m.oNode = THIS.oleTree.Nodes.Add(LEFT(m.cKey, RAT('.', m.cKey) -1), 4, m.cKey, m.cText)
		      THIS.SetNodeImage(m.oNode, m.nType)
		    ENDDO
		  ENDIF
		  RETURN m.lStatus
		
	ENDPROC

	PROCEDURE treeinit
		LPARAMETER cFilter
		*++
		* Initialize the navigation key TreeView control.
		*--
		LOCAL oRoot, oNode, oCursor, cInTree, cFilterRoot
		
		  WITH THIS.oleTree
		    .Nodes.Clear()
		    .Imagelist = THISFORM.oleImages.Object
		  ENDWITH
		
		  m.oRoot = .NULL.
		  IF NOT EMPTY(m.cFilter)
		    LOCAL cLocName, uType
		
		    * If a filter is specified, we only show the single category matching the filter category.
		    m.oCursor = THIS.oRegistry.GetRootCursor(m.cFilter)
		    IF NOT ISNULL(m.oCursor) AND THIS.oRegistry.GetKeyValueEx(m.cFilter, @m.cLocName, @m.uType) ;
		    AND VARTYPE(m.uType) = 'N' AND m.uType = KEY_TYPE_CATEGORY
		      m.oRoot = THIS.TreeAddRoot('', m.oCursor, m.cFilter, m.cLocName)
		      THIS.TreeLoadChildren(m.oRoot)
		    ENDIF
		  ELSE
		    m.oRoot = THIS.oleTree.Nodes.Add(, 1, 'Root', THISFORM.cRootKeyName)
		    m.oRoot.Image = 8  && 8 is Special root image bitmap
		
		    * Add shared and local appreg to the tree
		    m.cInTree = ''
		    m.oCursor = THIS.oRegistry.GetRootCursor('%Shared')
		    IF NOT ISNULL(m.oCursor)
		      THIS.TreeAddRoot('Root', m.oCursor, '%Shared', THIS.cSharedCategoryName)
		      m.cInTree = m.cInTree + PROPER(m.oCursor.cWorkarea) + ','
		    ENDIF
		    m.oCursor = THIS.oRegistry.GetRootCursor('%Local')
		    IF NOT ISNULL(m.oCursor)
		      THIS.TreeAddRoot('Root', m.oCursor, '%Local', THIS.cLocalCategoryName)
		      m.cInTree = m.cInTree + PROPER(m.oCursor.cWorkarea) + ','
		    ENDIF
		
		    * Then add any other additional registry tables at the end.
		    IF THISFORM.lDevelopment
		      m.nIndex = 0
		      DO WHILE THISFORM.oRegistry.EnumCursors(@m.nIndex, @m.oCursor) > 0
		        IF NOT PROPER(m.oCursor.cWorkarea) + ',' $ m.cInTree
		          THIS.TreeAddRoot('Root', m.oCursor, '%%' + m.oCursor.cWorkarea, m.oCursor.cWorkarea)
		        ENDIF
		      ENDDO
		    ENDIF
		  ENDIF
		
		  * Restore record pointer to top, and select first outline entry.
		  IF NOT ISNULL(m.oRoot)
		    m.oRoot.Expanded = .T.
		    m.oRoot.Selected = .T.
		    THIS.oleTree.Click()
		  ENDIF
		  RETURN .T.
		
	ENDPROC

	PROCEDURE treeloadchildren		&& Load subordinate keys for specified category.
		LPARAMETER oParentNode
		*++
		* Load the next level of subordinate keys into outline control.
		*--
		LOCAL nIndex, cCategory, cKey, cKeyName, cLocName, nAccess, nType
		
		  IF m.oParentNode.Children = 1 AND m.oParentNode.Child.Tag == 'Placeholder'
		    * Delete the original placeholder node.
		    THIS.oleTree.Nodes.Remove(m.oParentNode.Child.Index)
		
		    m.cCategory = m.oParentNode.Key
		    DO WHILE THISFORM.oRegistry.EnumKeys(m.cCategory, @m.nType, @m.nIndex, @m.cKeyName, @cLocName,,, @m.nAccess) > 0
		      * Check user security access to view this key.
		      IF NOT THISFORM.lDevelopment AND m.nAccess < THIS.nAccess
		        LOOP
		      ENDIF
		
		      m.cKey = m.cCategory + '.' + m.cKeyName
		      m.cText = TRIM(m.cLocName)
		      IF m.nType = KEY_TYPE_CATEGORY
		        m.oNode = THIS.TreeAddCategory(m.cCategory, m.cKey, m.cText)
		      ELSE
		        m.oNode = THIS.oleTree.Nodes.Add(m.cCategory, 4, m.cKey, m.cText)
		        THIS.SetNodeImage(m.oNode, m.nType)
		      ENDIF
		    ENDDO
		  ENDIF
		  RETURN .T.
		
	ENDPROC

	PROCEDURE cntOkCancelApply.cmdApply.Refresh
		THIS.Enabled = THISFORM.lChanged
		
	ENDPROC

	PROCEDURE cntOkCancelApply.cmdCancel.Refresh
		THIS.Enabled = THISFORM.lChanged
		THIS.Cancel = THISFORM.lChanged
		
	ENDPROC

	PROCEDURE cntOkCancelApply.cmdOK.Refresh
		THIS.Cancel = NOT THISFORM.lChanged
		
	ENDPROC

	PROCEDURE cntOkCancelApply.Refresh
		* Refresh Form edit states whenever our buttons get refreshed,
		* so we can use the toolbar "Save" as a synonym for Apply.
		IF NOT ISNULL(THISFORM.oStateManager)    && CLEAR ALL can clear state manager before us.
		  THISFORM.oStateManager.RefreshAll('Form Edit')
		ENDIF
		
	ENDPROC

	PROCEDURE lblMenu.Refresh
		THIS.Visible = THISFORM.lDevelopment AND NOT ISREADONLY()
		
	ENDPROC

	PROCEDURE oleTree.Click
		  * Move to the record associated with the current outline item.
		  IF NOT ISNULL(THIS.SelectedItem)
		    THISFORM.LoadKey(THIS.SelectedItem.Key)
		  ENDIF
		
	ENDPROC

	PROCEDURE oleTree.Collapse
		LPARAMETERS oNode
		
		  * Make sure the root node is always expanded
		  IF m.oNode.Key == 'Root'
		    m.oNode.Expanded = .T.
		  ENDIF
		  THISFORM.pgfEditPages.Refresh()
		
	ENDPROC

	PROCEDURE oleTree.contextmenubuild
		LOCAL lKey, oNode
		  IF THISFORM.lDevelopment
		    * These bars appear only in developer mode, so there is no need to use localizable bars.
		    IF NOT ISNULL(THIS.SelectedItem) AND NOT THIS.SelectedItem.Key == 'Root'
		      m.oNode = THIS.SelectedItem
		      THISFORM.ContextMenuSeparator(CTX_BAR_CUSTOM)
		
		      m.lKey = '.' $ m.oNode.Key   && Table root nodes have no period delimeters
		      IF m.lKey
		        IF m.oNode.Image = 1
		          THISFORM.ContextMenuBar(CTX_BAR_CUSTOM + 1, '%barEditCategory')
		        ELSE
		          THISFORM.ContextMenuBar(CTX_BAR_CUSTOM + 1, '%barEditKey')
		        ENDIF
		      ENDIF
		
		      IF THISFORM.IsEditAllowed()
		        THISFORM.ContextMenuSeparator(CTX_BAR_CUSTOM + 4)
		        THISFORM.ContextMenuBar(CTX_BAR_CUSTOM + 5, '%barAddKey')
		        THISFORM.ContextMenuBar(CTX_BAR_CUSTOM + 6, '%barAddCategory')
		        IF m.lKey
		          THISFORM.ContextMenuSeparator(CTX_BAR_CUSTOM + 7)
		          IF m.oNode.Image = 1
		            THISFORM.ContextMenuBar(CTX_BAR_CUSTOM + 8, '%barDelCategory')
		          ELSE
		            THISFORM.ContextMenuBar(CTX_BAR_CUSTOM + 8, '%barDelKey')
		          ENDIF
		        ENDIF
		      ENDIF
		    ENDIF
		    RETURN .T.
		  ENDIF
		  RETURN .F.
		
	ENDPROC

	PROCEDURE oleTree.contextmenuexecute
		LPARAMETER cOption
		LOCAL cAsk, oNewNode, oNode, oKeyEdit, oKeyEditor 
		
		  IF NOT DODEFAULT(m.cOption)
		    m.oNode = THIS.SelectedItem
		    m.cOption = LOWER(m.cOption)
		
		    DO CASE
		      CASE 'edit' $ m.cOption
		        m.oKeyEditor = CreateNewObject(THISFORM.cClassKeyEditor)
		        m.oKeyEditor.Show()
		        IF VARTYPE(m.oKeyEditor) = 'O' AND m.oKeyEditor.ReturnValue()
		          THISFORM.lChanged = .T.      && Tell interface that Current key is changed
		          WITH THISFORM.oProperties
		            IF .nType != .oOldVal.Type
		              * Clear any existing value when the key type changes. We do this at interface
		              * level, since the registry object assuems that a programatic key type change
		              * will also specify a new value that is valid for the new type.
		             .cValue = ''
		            ENDIF
		
		            * Update tree display with any changed items
		            m.oNode.Text = .cLocName
		            THISFORM.SetNodeImage(m.oNode, .nType)
		            THISFORM.Refresh()
		          ENDWITH
		        ELSE
		          THISFORM.oProperties.Load()   && Re-load original property values on cancel
		        ENDIF
		
		      CASE 'add' $ m.cOption
		        * Find the parent node for the new key.
		        * If adding to a category key, make sure it is expanded in the outline.
		        IF m.oNode.Image = 1
		          IF NOT m.oNode.Expanded
		            THISFORM.TreeLoadChildren(m.oNode)
		          ENDIF
		          m.oParentNode = m.oNode
		        ELSE
		          m.oParentNode = m.oNode.Parent
		        ENDIF
		
		        IF THISFORM.oRegistry.NewKey(m.oParentNode.Key + '.   .', THISFORM.oProperties)
		          * Set some default property values before calling property editor dialog.
		          WITH THISFORM.oProperties
		            IF ('category' $ m.cOption)
		              .nType = KEY_TYPE_CATEGORY
		            ENDIF
		          ENDWITH
		
		          m.oKeyEditor = CreateNewObject(THISFORM.cClassKeyEditor)
		          IF VARTYPE(m.oKeyEditor) = 'O'
		            m.oKeyEditor.Show()
		            IF VARTYPE(m.oKeyEditor) = 'O' AND m.oKeyEditor.ReturnValue()
		              * Add a node for the new key  to the tree view.
		              m.oNewNode = THIS.Nodes.Add(m.oNode.Key, IIF(m.oNode.Image = 1, 4, 2), ;
		                           m.oParentNode.Key + '.' + THISFORM.oProperties.cName, ;
		                           THISFORM.oProperties.cLocName)
		              THISFORM.SetNodeImage(m.oNewNode, THISFORM.oProperties.nType)
		              m.oNewNode.Selected = .T.
		              m.oNewNode.EnsureVisible()
		
		              * Save the new key, and Reload details for display.
		              THISFORM.lChanged = .T.      && New key is changed, and needs to be saved
		              THISFORM.cCurrentKey = ''    && Clear so new key will be saved on LoadKey() call.
		              THISFORM.LoadKey(m.oNewNode.Key)
		
		              * If there is an editor dialog class for a new extrnal binary key, call it now.
		              IF THISFORM.oProperties.nType = KEY_TYPE_BINARY ;
		              AND NOT EMPTY(THISFORM.oRegistry.GetExternalEditorClass(THISFORM.oProperties.cExternalType))
		                * ActiveX controls in editor dialog wont work correctly if called from inside
		                * a tree method, so stuffing the keyboard lets the button click call the dialog.
		                THISFORM.pgfEditPages.pagBinary.cmdEditValue.Setfocus()
		                KEYBOARD ' ' PLAIN
		              ENDIF
		              RETURN .T.
		            ENDIF
		          ENDIF
		        ENDIF
		
		        THISFORM.lChanged = .F.
		        THISFORM.cCurrentKey = ''
		        THISFORM.LoadKey(m.oNode.Key)   && Re-load original key on user cancel or other error.
		        RETURN .F.
		
		      CASE 'del' $ m.cOption
		        IF THISFORM.oProperties.nType = KEY_TYPE_CATEGORY
		          m.cAsk = '%msgRegConfrimDeleteCategory'
		        ELSE
		          m.cAsk = '%msgRegConfrimDeleteKey'
		        ENDIF
		        IF THISFORM.oMessage.Confirm(m.cAsk, THISFORM.lblKeyName.Caption)
		          m.oNewNode = m.oNode.Next
		          IF ISNULL(m.oNewNode)
		            m.oNewNode = m.oNode.Previous
		            IF ISNULL(m.oNewNode)
		              m.oNewNode = m.oNode.Parent
		            ENDIF
		          ENDIF
		
		          * Delete the key, and remove the node if successful.
		          IF THISFORM.oRegistry.DeleteGlobalKey(m.oNode.Key, REGMASK_LOG)
		            THIS.Nodes.Remove(m.oNode.Key)
		          ELSE
		            m.oNewNode = m.oNode
		          ENDIF
		
		          * And refresh the display with new current record.
		          m.oNewNode.Selected = .T.
		          THISFORM.LoadKey(m.oNewNode.Key)
		        ENDIF
		    ENDCASE
		  ENDIF
		
	ENDPROC

	PROCEDURE oleTree.DblClick
		  * For a binary key, double click means to edit the value.
		  IF THISFORM.oProperties.nType = KEY_TYPE_BINARY
		    THISFORM.pgfEditPages.pagBinary.cmdEditValue.Setfocus()
		    KEYBOARD ' ' PLAIN
		  ENDIF
		
	ENDPROC

	PROCEDURE oleTree.Expand
		LPARAMETERS oNode
		  * Make sure all children are loaded when the node is expanded.
		  THISFORM.TreeLoadChildren(m.oNode)
		  THISFORM.pgfEditPages.Refresh()
		
	ENDPROC

	PROCEDURE oleTree.KeyPress
		LPARAMETERS nKey
		  * Put test for <Escape> and <Enter> here, instead of in KeyUp(), to avoid false 
		  * triggers from the close of modal dialogs.
		  DO CASE
		    CASE m.nKey = 27
		      * Simulate the cancel button on escape pressed in outline control.
		      KEYBOARD "{CTRL+F4}" PLAIN
		    CASE INLIST(m.nKey, 13, ASC(' '))
		      THIS.DblClick()
		  ENDCASE
		
	ENDPROC

	PROCEDURE oleTree.KeyUp
		LPARAMETERS nKey, nShift
		
		  * Make sure display is updated after each possible tree state change.
		  THIS.Click()
		
	ENDPROC

	PROCEDURE oleTree.MouseUp
		LPARAMETERS nButton, nShift, x, y
		*++
		* Put up context menu if supported for this form.
		*--
		  IF m.nButton = 2 AND m.nShift = 0
		    THIS.Click()   && Select and display the new node, if changed.
		    DODEFAULT(m.nButton, m.nShift, m.x, m.y)
		  ENDIF
		
	ENDPROC

	PROCEDURE PgfEditPages.pagBinary.cmdEditValue.Click
		LOCAL oValueEditor
		
		  IF THIS.Enabled
		    m.oValueEditor = CreateNewObject(THIS.cEditorClass)
		    IF m.oValueEditor.EditValue(THISFORM.oProperties)
		      THISFORM.BeforeChange()
		
		      * Key value editors are allowed to modify description, so update the display.
		      THISFORM.lblKeyDesc.caption = THISFORM.oProperties.cDescription
		    ENDIF
		    THISFORM.oleTree.Setfocus()
		  ENDIF
		
	ENDPROC

	PROCEDURE PgfEditPages.pagBinary.cmdEditValue.Refresh
		LOCAL cEditorClass
		
		  * Enable the edit button if there is an external editor class associated with this key type.
		  m.cEditorClass = THISFORM.oRegistry.GetExternalEditorClass(THISFORM.oProperties.cExternalType)
		
		  * Store editor class name in our comment property for use by the click event code.
		  THIS.AddProperty('cEditorClass', m.cEditorClass)
		  THIS.Visible = NOT EMPTY(m.cEditorClass)
		  THIS.Enabled = THISFORM.IsEditAllowed()
		  THIS.Parent.lblBinary.Visible = NOT THIS.Visible
		
	ENDPROC

	PROCEDURE PgfEditPages.pagBinary.RightClick
		THIS.Parent.RightClick(.T.)
		
	ENDPROC

	PROCEDURE PgfEditPages.pagCategory.lblEmpty.Refresh
		WITH THISFORM.oleTree
		  THIS.Visible = ISNULL(.SelectedItem) OR .SelectedItem.Children = 0
		ENDWITH
		
	ENDPROC

	PROCEDURE PgfEditPages.pagCategory.lblExpandMsg.Refresh
		LOCAL oNode
		
		  IF TYPE('THISFORM.oleTree.SelectedItem') = 'O'
		    m.oNode = THISFORM.oleTree.SelectedItem
		    THIS.Visible = NOT ISNULL(m.oNode) AND m.oNode.Children > 0 AND NOT m.oNode.Expanded
		  ENDIF
		
	ENDPROC

	PROCEDURE PgfEditPages.pagCategory.Refresh
		THIS.lblEmpty.Refresh()
		THIS.lblExpandMsg.Refresh()
		
	ENDPROC

	PROCEDURE PgfEditPages.pagCategory.RightClick
		THIS.Parent.RightClick(.T.)
		
	ENDPROC

	PROCEDURE PgfEditPages.pagCounter.lblLastReset.Init
		THIS.Comment = THIS.Caption  && Original caption is the localized word "Never"
		RETURN DODEFAULT()
		
	ENDPROC

	PROCEDURE PgfEditPages.pagCounter.lblLastReset.Refresh
		IF EMPTY(THISFORM.oProperties.dValue)
		  THIS.Caption = THIS.Comment
		ELSE
		  THIS.Caption = THISFORM.oString.FormatDate(THISFORM.oProperties.dValue)
		ENDIF
		
	ENDPROC

	PROCEDURE PgfEditPages.pagCounter.spnValue.afterchange
		THISFORM.oProperties.dValue = DATE()
		THIS.Parent.lblLastReset.Refresh()
		
	ENDPROC

	PROCEDURE PgfEditPages.pagCounter.spnValue.Refresh
		THIS.Parent.lblLastReset.Refresh()
		RETURN DODEFAULT()
		
	ENDPROC

	PROCEDURE PgfEditPages.pagEditbox.chkNull.afterchange
		THIS.Parent.edtValue.SetValue(IIF(THIS.Value, .NULL., ''))
		THIS.Parent.edtValue.Refresh()
		
	ENDPROC

	PROCEDURE PgfEditPages.pagEditbox.chkNull.Refresh
		THIS.Visible = THISFORM.oProperties.lAllowNull
		THIS.Value = ISNULL(THISFORM.oProperties.cValue)
		
		* Only allow user to edit field if in development mode, or key is user editable.
		THIS.Enabled = THISFORM.IsEditAllowed()
		
	ENDPROC

	PROCEDURE PgfEditPages.pagEditbox.edtValue.Refresh
		THIS.lEnabled = NOT THISFORM.oProperties.lAllowNull OR NOT ISNULL(THISFORM.oProperties.cValue)
		THIS.MaxLength = THISFORM.oProperties.nMaxLength
		THIS.lAllowEnter = THISFORM.oProperties.lAllowLineBreak
		THIS.cDisplayName = THISFORM.lblKeyName.Caption   && picked up as zoom dialog title
		
		DODEFAULT()   && And dispatch to parent class method
		
	ENDPROC

	PROCEDURE PgfEditPages.pagEditbox.RightClick
		THIS.Parent.RightClick(.T.)
		
	ENDPROC

	PROCEDURE PgfEditPages.pagEnumPopup.cboValue.Refresh
		LOCAL cValues
		  m.cValues = ''
		  THISFORM.oRegistry.EnumKeysToString( ;
		                        THISFORM.oProperties.cEnumCategory, THISFORM.oProperties.uEnumType, @m.cValues)
		  THIS.RowSource = m.cValues
		  DODEFAULT()
		
	ENDPROC

	PROCEDURE PgfEditPages.pagEnumPopup.RightClick
		THIS.Parent.RightClick(.T.)
		
	ENDPROC

	PROCEDURE PgfEditPages.pagLogical.cboValue.loadtranslation
		LPARAMETER lValue
		* Convert logical value into combobox index, 1,2 or 3 for null.
		IF THISFORM.oProperties.lAllowNull AND ISNULL(m.lValue)
		  RETURN 3
		ENDIF
		RETURN IIF(THISFORM.oProperties.lValue, 1, 2)
		
	ENDPROC

	PROCEDURE PgfEditPages.pagLogical.cboValue.Refresh
		THIS.Clear()
		THIS.AddItem(THISFORM.oProperties.cLogTrue)
		THIS.AddItem(THISFORM.oProperties.cLogFalse)
		
		IF THISFORM.oProperties.lAllowNull
		  THIS.AddItem(THISFORM.oProperties.cLogNull)
		ENDIF
		
		DODEFAULT()
		
	ENDPROC

	PROCEDURE PgfEditPages.pagLogical.cboValue.storetranslation
		LPARAMETER nValue
		  RETURN IIF(m.nValue = 3, .NULL., m.nValue = 1)
		
	ENDPROC

	PROCEDURE PgfEditPages.pagLogical.RightClick
		THIS.Parent.RightClick(.T.)
		
	ENDPROC

	PROCEDURE PgfEditPages.pagNumeric.chkNull.afterchange
		THIS.Parent.spnValue.SetValue(IIF(THIS.Value, .NULL., 0))
		THIS.Parent.spnValue.Refresh()
		
	ENDPROC

	PROCEDURE PgfEditPages.pagNumeric.chkNull.Refresh
		THIS.Visible = THISFORM.oProperties.lAllowNull
		THIS.Value = ISNULL(THISFORM.oProperties.nValue)
		
		* Only allow user to edit field if in development mode, or key is user editable.
		THIS.Enabled = THISFORM.IsEditAllowed()
		
	ENDPROC

	PROCEDURE PgfEditPages.pagNumeric.RightClick
		THIS.Parent.RightClick(.T.)
		
	ENDPROC

	PROCEDURE PgfEditPages.pagNumeric.spnValue.loadtranslation
		LPARAMETER nValue
		  * If this is an integer value, convert to internal integer format.
		  IF NOT '.9' $ THIS.InputMask AND THIS.Increment % 1 = 0 AND THISFORM.oProperties.nValue % 1 = 0
		    RETURN INT(m.nValue)
		  ENDIF
		  RETURN m.nValue
		
	ENDPROC

	PROCEDURE PgfEditPages.pagNumeric.spnValue.Refresh
		THIS.InputMask = THISFORM.oProperties.cPicture
		THIS.SpinnerLowValue = THISFORM.oProperties.nSpnLowValue
		THIS.SpinnerHighValue = THISFORM.oProperties.nSpnHighValue
		THIS.Increment = THISFORM.oProperties.nSpnIncrement
		
		* Only allow user to edit field if in development mode, or key is user editable.
		THIS.lEnabled = NOT THISFORM.oProperties.lAllowNull OR NOT ISNULL(THISFORM.oProperties.nValue)
		
		DODEFAULT()
		
	ENDPROC

	PROCEDURE PgfEditPages.pagPath.cmdBrowse.Click
		LOCAL cPath, oCursor
		
		  m.cPath = ALLTRIM(THIS.Parent.edtPath.Value)
		  IF NOT EMPTY(m.cPath)
		    m.oCursor = CREATEOBJECT('cmCursor', m.cPath, 'cmBrowse')
		    IF VARTYPE(m.oCursor) = 'O'
		      LOCAL cFlags
		      m.cFlags = IIF(THISFORM.oProperties.lTabAllowEdit, '', 'NOMODIFY ')
		      m.cFlags = m.cFlags + IIF(THISFORM.oProperties.lTabAllowAppend , '', 'NOAPPEND ')
		      m.cFlags = m.cFlags + IIF(THISFORM.oProperties.lTabAllowDelete , '', 'NODELETE ')
		      BROWSE NORMAL &cFlags
		
		      * Clsoe the cursor when done browsing
		      m.oCursor.Close()
		    ENDIF
		  ENDIF
		  RETURN .T.
		
	ENDPROC

	PROCEDURE PgfEditPages.pagPath.cmdBrowse.Refresh
		* Only allow user to edit field if in development mode, or key is user editable.
		THIS.Visible = THISFORM.oProperties.nTabPathType = KEY_PATH_TABLE AND THISFORM.oProperties.lTabAllowBrowse
		THIS.Enabled = NOT EMPTY(THISFORM.oProperties.cValue)
		
	ENDPROC

	PROCEDURE PgfEditPages.pagPath.cmdPath.Click
		LOCAL cPath
		  IF THISFORM.oProperties.nTabPathType = KEY_PATH_ONLY
		    m.cPath = GETDIR(THIS.Parent.edtPath.Value)
		  ELSE
		    m.cPath = GETFILE(THISFORM.oProperties.cTabExtensionList)
		  ENDIF
		
		  IF NOT EMPTY(m.cPath)
		    IF THISFORM.oProperties.lTabFullPath OR THISFORM.oProperties.nTabPathType = KEY_PATH_ONLY
		      THIS.Parent.edtPath.SetValue(LOWER(m.cPath))
		    ELSE
		      THIS.Parent.edtPath.SetValue(LOWER(SYS(2014, m.cPath, '.')))
		    ENDIF
		  ENDIF
		
	ENDPROC

	PROCEDURE PgfEditPages.pagPath.cmdPath.Refresh
		* Only allow user to edit field if in development mode, or key is user editable.
		THIS.Enabled = THISFORM.IsEditAllowed()
		
	ENDPROC

	PROCEDURE PgfEditPages.pagPath.edtPath.afterchange
		THIS.Parent.cmdBrowse.Refresh()
		
	ENDPROC

	PROCEDURE PgfEditPages.pagPath.edtPath.fieldvalid
		LOCAL cPath
		IF NOT EMPTY(THIS.Value)
		  m.cPath = TRIM(THIS.Value)
		  IF THISFORM.oProperties.lTabFullPath
		    m.cPath = LOWER(FULLPATH(m.cPath, SYS(5)+SYS(2003)+'\'))
		  ENDIF
		  IF THISFORM.oProperties.nTabPathType = KEY_PATH_TABLE AND ;
		     RAT('.', m.cPath) < MAX(1, LEN(m.cPath) - 3)
		    m.cPath = m.cPath + '.dbf'
		  ENDIF
		  THIS.Value = m.cPath
		ENDIF
		RETURN .T.
		
	ENDPROC

	PROCEDURE PgfEditPages.pagPath.edtPath.InteractiveChange
		THIS.Parent.cmdBrowse.Refresh()
		DODEFAULT()
		
	ENDPROC

	PROCEDURE PgfEditPages.pagPath.RightClick
		THIS.Parent.RightClick(.T.)
		
	ENDPROC

	PROCEDURE PgfEditPages.pagPopup.cboValue.Refresh
		THIS.RowSourceType = 1
		THIS.RowSource = THISFORM.oProperties.cPopupValues
		
		DODEFAULT()
		
	ENDPROC

	PROCEDURE PgfEditPages.pagPopup.RightClick
		THIS.Parent.RightClick(.T.)
		
	ENDPROC

	PROCEDURE PgfEditPages.pagTextbox.chkNull.afterchange
		THIS.Parent.txtValue.SetValue(IIF(THIS.Value, .NULL., ''))
		THIS.Parent.txtValue.Refresh()
		
	ENDPROC

	PROCEDURE PgfEditPages.pagTextbox.chkNull.Refresh
		THIS.Visible = THISFORM.oProperties.lAllowNull
		THIS.Value = ISNULL(THISFORM.oProperties.cValue)
		
		* Only allow user to edit field if in development mode, or key is user editable.
		THIS.Enabled = THISFORM.IsEditAllowed()
		
	ENDPROC

	PROCEDURE PgfEditPages.pagTextbox.RightClick
		THIS.Parent.RightClick(.T.)
		
	ENDPROC

	PROCEDURE PgfEditPages.pagTextbox.txtValue.Refresh
		THIS.InputMask = THISFORM.oProperties.cPicture
		THIS.Format = THISFORM.oProperties.cFormat
		
		* Only allow user to edit field if in development mode, or key is user editable.
		THIS.lEnabled = NOT THISFORM.oProperties.lAllowNull OR NOT ISNULL(THISFORM.oProperties.cValue)
		
		DODEFAULT()
		
	ENDPROC

	PROCEDURE PgfEditPages.Refresh
		* Activate the correct editing page for the current key record
		* and update descriptive labels.
		THISFORM.DisplayKeyDetails()
		THIS.SetPage(MAX(1, THISFORM.oProperties.nType), 0, PAGEMASK_NOFOCUS)
		
	ENDPROC

ENDDEFINE
