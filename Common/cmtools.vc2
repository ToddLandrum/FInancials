*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="cmtools.vcx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS cboformnavigationorder AS cbotoolcombobox OF "cmtools.vcx" 
 	*< CLASSDATA: Baseclass="combobox" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*p: nactionindex		&& Index of associated action
	*</DefinedPropArrayMethod>

	chelpkey = hlpSetOrder
	Height = 22
	nactionindex = 0		&& Index of associated action
	Name = "cboformnavigationorder"
	RowSourceType = 1
	Width = 160
	
	PROCEDURE afterchange
		* Execute the associated action, if any.
		IF THIS.nActionIndex > 0
		  IF THISFORM.oStateManager.Execute(THIS.nActionIndex, THISFORM, THIS.Value, THIS.cWorkarea)
		    THIS.Refresh()
		  ENDIF
		ENDIF
		
	ENDPROC

	PROCEDURE Init
		THIS.nActionIndex = THISFORM.oStateManager.DefineAction('Form Order', 'SetOrder')
		
		THIS.Value = ''
		IF THISFORM.Baseclass == 'Toolbar'
		  THISFORM.oStateManager.RequestRefresh(THIS.nActionIndex, THIS)
		ENDIF
		DODEFAULT()
		
	ENDPROC

	PROCEDURE Refresh
		LOCAL cTags, cValue
		
		* Set desired enabled state according to the associated action state, if any.
		IF NOT ISNULL(THISFORM.oStateManager)
		  IF THIS.nActionIndex > 0
		    * If enabled for a form, state manager returns list of available tags, with current tag first
		    m.cTags = THISFORM.oStateManager.GetValue(THIS.nActionIndex, THISFORM, THIS.cWorkarea)
		    THIS.lEnabled = NOT EMPTY(m.cTags)
		    IF EMPTY(m.cTags)
		      THIS.Value = ''
		      THIS.RowSource = ''
		    ELSE
		      * First element in the list is the current value, followed by all possible values.
		      m.cValue = GetToken(@m.cTags, ',')
		      THIS.RowSource = m.cTags
		      THIS.Value = m.cValue
		    ENDIF
		  ENDIF
		ENDIF
		
		* lEnabled has the desired enable state, call foundation control refresh to implement.
		DODEFAULT()
		
	ENDPROC

ENDDEFINE

DEFINE CLASS cbotoolcombobox AS cbocomboboxcustom OF "..\custom\ccontrol.vcx" 
 	*< CLASSDATA: Baseclass="combobox" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*p: lhottrackintoolbar		&& If set to .T. then SpecialEffect will be set to 2 (hot tracking) when in a toolbar, and left at designtime setting in a form.
		*p: nmodalstateindex		&& SystemModal state index. Initialize to 0 to disable control when modal form is active, -1 to always leave enabled.
	*</DefinedPropArrayMethod>

	creadonlydisplay = Normal
	lhottrackintoolbar = .T.		&& If set to .T. then SpecialEffect will be set to 2 (hot tracking) when in a toolbar, and left at designtime setting in a form.
	Margin = 2
	Name = "cbotoolcombobox"
	nmodalstateindex = 0		&& SystemModal state index. Initialize to 0 to disable control when modal form is active, -1 to always leave enabled.
	Style = 2
	Width = 100
	
	PROCEDURE Init
		* The lDisableWhenModal flag only applies to buttons in a toolbar.
		IF THISFORM.Baseclass != 'Toolbar'
		  THIS.nModalStateIndex = -1
		ELSE
		  IF THIS.nModalStateIndex >= 0
		    THIS.nModalStateIndex = m.goStateManager.GetIndex('System Modal')
		  ENDIF
		ENDIF
		
		* Use the new hover style buttons in toolbars for VFP 7 and later.
		IF THIS.lHotTrackInToolbar AND VERSION(5) >= 700 AND THISFORM.BaseClass == 'Toolbar'
		  THIS.SpecialEffect = 2
		ENDIF
		
		* Toolbars have no Load() method, so we cant rely on the security reference being there.
		IF NOT EMPTY(THIS.cWritePrivilege) AND ISNULL(THISFORM.oSecurity)
		  THISFORM.oSecurity = FindGlobalObject('cmSecurity', '2.0')
		ENDIF
		
		RETURN DODEFAULT()
		
	ENDPROC

	PROCEDURE Refresh
		IF NOT ISNULL(THISFORM.oStateManager)
		  IF THIS.nModalStateIndex > 0 AND THISFORM.oStateManager.GetValue(THIS.nModalStateIndex)
		    THIS.Enabled = .F.
		  ELSE
		    DODEFAULT()
		  ENDIF
		ENDIF
		
	ENDPROC

ENDDEFINE

DEFINE CLASS chktoolindicatoractionbutton AS chktoolindicatorbutton OF "cmtools.vcx" 		&& Toolbar Up/Down Indicator Action Button class.
 	*< CLASSDATA: Baseclass="checkbox" Timestamp="" Scale="Pixels" Uniqueid="" ProjectClassIcon="..\graphics\cmpushed.bmp" ClassIcon="..\graphics\cmpushed.bmp" />

	*<DefinedPropArrayMethod>
		*p: caction		&& The name of the state manager action to associate with this button.
		*p: lrefreshinform		&& Set .T. if state manager refresh requests are required when button is placed in a form.
		*p: nactionindex		&& State index of the named action specified in cAtion.
	*</DefinedPropArrayMethod>

	caction = 		&& The name of the state manager action to associate with this button.
	lrefreshinform = .T.		&& Set .T. if state manager refresh requests are required when button is placed in a form.
	nactionindex = 0		&& State index of the named action specified in cAtion.
	Name = "chktoolindicatoractionbutton"
	nmodalstateindex = -1
	
	PROCEDURE Click
		* Execute the associated action, if any.
		IF THIS.nActionIndex > 0
		  IF EMPTY(THIS.cWorkarea)
		    m.goStateManager.Execute(THIS.nActionIndex, THISFORM)
		  ELSE
		    THIS.cWorkarea = PROPER(THIS.cWorkarea)  && Make sure it stays propercase, for comparisons.
		    m.goStateManager.Execute(THIS.nActionIndex, THISFORM, THIS.cWorkarea)
		  ENDIF
		ENDIF
		RETURN chkIndicatorButtonCustom::Click()
		
	ENDPROC

	PROCEDURE Init
		* We use cWorkarea property as parameter to send to bound action,
		* so we don't support data binding in this class.
		ASSERT EMPTY(THIS.ControlSource) AND EMPTY(THIS.cValueSource) MESSAGE THIS.Name + ' - Toolbar button cannot be bound to data'
		
		* Get the numeric index associated with the state, for faster refresh operation.
		IF NOT EMPTY(THIS.cAction)
		  THIS.nActionIndex = m.goStateManager.GetIndex(THIS.cAction)
		  ASSERT THIS.nActionIndex > 0 MESSAGE "Undefined state manager action: " + THIS.cAction
		
		  * If in a toolbar, or lRefreshInForm is set, request stateManager refreshes.
		  IF THIS.lRefreshInForm OR THISFORM.Baseclass == 'Toolbar'
		    m.goStateManager.RequestRefresh(THIS.nActionIndex, THIS)
		  ENDIF
		ENDIF
		RETURN DODEFAULT()
		
	ENDPROC

	PROCEDURE Refresh
		LOCAL uState
		
		IF NOT ISNULL(THISFORM.oStateManager)
		  IF THIS.nModalStateIndex > 0 AND THISFORM.oStateManager.GetValue(THIS.nModalStateIndex)
		    THIS.Enabled = .F.
		  ELSE
		    * Possible state values are:
		    * .F./0 - Up/Disable
		    * .T./1 - Up/Enabled 
		    *  2    - Dn/Disable
		    *  3    - Dn/Enabled 
		    m.uState = THISFORM.oStateManager.GetValue(THIS.nActionIndex, THISFORM)
		    DO CASE
		      CASE EMPTY(m.uState)
		        THIS.Value = .F.
		        THIS.lEnabled = .F.
		      CASE NOT TYPE('m.uState') $ 'NI' OR m.uState = 1
		        THIS.Value = .F.
		        THIS.lEnabled = .T.
		      CASE m.uState = 2
		        THIS.Value = .T.
		        THIS.lEnabled = .F.
		      OTHERWISE
		        THIS.Value = .T.
		        THIS.lEnabled = .T.
		    ENDCASE
		  ENDIF
		
		  * lEnabled has the desired enable state, call foundation control refresh to impliment.
		  * This will also take current privilege settings into account when deciding whether or
		  * not to actually enable the button.
		  DODEFAULT()
		ENDIF
		
	ENDPROC

ENDDEFINE

DEFINE CLASS chktoolindicatorbutton AS chkindicatorbuttoncustom OF "..\custom\ccontrol.vcx" 
 	*< CLASSDATA: Baseclass="checkbox" Timestamp="" Scale="Pixels" Uniqueid="" ProjectClassIcon="..\graphics\cmpushed.bmp" ClassIcon="..\graphics\cmpushed.bmp" />

	*<DefinedPropArrayMethod>
		*p: lhottrackintoolbar		&& If set to .T. then SpecialEffect will be set to 2 (hot tracking) when in a toolbar, and left at designtime setting in a form.
		*p: nmodalstateindex		&& SystemModal state index. Initialize to 0 to disable button when modal form is active, -1 to always leave enabled.
	*</DefinedPropArrayMethod>

	Caption = ""
	Height = 22
	lhottrackintoolbar = .T.		&& If set to .T. then SpecialEffect will be set to 2 (hot tracking) when in a toolbar, and left at designtime setting in a form.
	Name = "chktoolindicatorbutton"
	nmodalstateindex = 0		&& SystemModal state index. Initialize to 0 to disable button when modal form is active, -1 to always leave enabled.
	Width = 22
	
	PROCEDURE Init
		* The lDisableWhenModal flag only applies to buttons in a toolbar.
		IF NOT THISFORM.Baseclass == 'Toolbar'
		  THIS.nModalStateIndex = -1
		ELSE
		  IF THIS.nModalStateIndex >= 0
		    THIS.nModalStateIndex = m.goStateManager.GetIndex('System Modal')
		  ENDIF
		ENDIF
		
		* Use the new hover style buttons in toolbars for VFP 7 and later.
		IF THIS.lHotTrackInToolbar AND VERSION(5) >= 700 AND THISFORM.BaseClass == 'Toolbar'
		  THIS.SpecialEffect = 2
		ENDIF
		
		* Toolbars have no Load() method, so we can't rely on the security/message reference being there.
		IF NOT EMPTY(THIS.cWritePrivilege) AND ISNULL(THISFORM.oSecurity)
		  THISFORM.oSecurity = FindGlobalObject('cmSecurity', '2.0')
		ENDIF
		IF THIS.lLocalizeCaption AND ISNULL(THISFORM.oMessage)
		  THISFORM.oMessage = FindGlobalObject('cmMessage')
		ENDIF
		
		DODEFAULT()
		
	ENDPROC

	PROCEDURE Refresh
		IF NOT ISNULL(THISFORM.oStateManager)
		  IF THIS.Visible AND THIS.nModalStateIndex > 0 AND THISFORM.oStateManager.GetValue(THIS.nModalStateIndex)
		    THIS.Enabled = .F.
		  ELSE
		    * lEnabled has the desired enable state, call foundation control refresh to implement.
		    DODEFAULT()
		  ENDIF
		ENDIF
		
	ENDPROC

ENDDEFINE

DEFINE CLASS chktoolindicatorbuttoncapslock AS chktoolindicatorbutton OF "cmtools.vcx" 
 	*< CLASSDATA: Baseclass="checkbox" Timestamp="" Scale="Pixels" Uniqueid="" ProjectClassIcon="..\graphics\cmpushed.bmp" ClassIcon="..\graphics\cmpushed.bmp" />

	Caption = "CAPS"
	Name = "chktoolindicatorbuttoncapslock"
	nmodalstateindex = -1
	Width = 33
	
	PROCEDURE Click
		THIS.Value = NOT CAPSLOCK(NOT CAPSLOCK())
		
	ENDPROC

	PROCEDURE Init
		m.goStateManager.RequestRefresh('System Key Toggle', THIS)
		chkToolIndicatorButton::Init()
		
	ENDPROC

	PROCEDURE Refresh
		THIS.Value = CAPSLOCK()
		chkToolIndicatorButton::Refresh()
		
	ENDPROC

ENDDEFINE

DEFINE CLASS chktoolindicatorbuttondevmode AS chktoolindicatorbutton OF "cmtools.vcx" 		&& Enable developer mode privilege
 	*< CLASSDATA: Baseclass="checkbox" Timestamp="" Scale="Pixels" Uniqueid="" ProjectClassIcon="..\graphics\codemine.bmp" ClassIcon="..\graphics\codemine.bmp" />

	Caption = ""
	creadonlydisplay = Hide
	cwriteprivilege = Administrator
	Name = "chktoolindicatorbuttondevmode"
	Picture = ..\graphics\codemine.bmp
	StatusBarText = "Enables Developer privilege, and allows you to run the registry editor in developer mode."
	ToolTipText = "Developer Privilege"
	
	PROCEDURE Click
		IF THIS.Value
		  * Call the method, rather than setting the privilege directly. The EnableDeveloperMode()
		  * method will enforce the Developer Password stored in the app registry, if set.
		  THISFORM.oSecurity.EnableDeveloperMode()
		ELSE
		  THISFORM.oSecurity.SetPrivilege('Developer', .F.)
		ENDIF
		
	ENDPROC

	PROCEDURE Init
		DODEFAULT()
		m.goStateManager.RequestRefresh('System Privilege', THIS)
		
	ENDPROC

	PROCEDURE Refresh
		IF ISNULL(THISFORM.oSecurity)
		  THIS.Enabled = .F.
		ELSE
		  chkToolIndicatorButton::Refresh()
		  IF THIS.Enabled
		    THIS.Value = THISFORM.oSecurity.HasPrivilege('Developer')
		  ENDIF
		ENDIF
		
	ENDPROC

ENDDEFINE

DEFINE CLASS chktoolindicatorbuttonedit AS chktoolindicatoractionbutton OF "cmtools.vcx" 
 	*< CLASSDATA: Baseclass="checkbox" Timestamp="" Scale="Pixels" Uniqueid="" ProjectClassIcon="..\graphics\edit.bmp" ClassIcon="..\graphics\edit.bmp" />

	*<DefinedPropArrayMethod>
		*p: clockedpicture		&& Image to display when edit mode is locked on.
	*</DefinedPropArrayMethod>

	caction = Form Edit Start
	chelpkey = %hlpEditmode
	clockedpicture = ..\Graphics\EditLock.bmp		&& Image to display when edit mode is locked on.
	Name = "chktoolindicatorbuttonedit"
	Picture = ..\graphics\edit.bmp
	
	PROCEDURE DblClick
		* Double-click canbe used to enable editMode lock
		IF NOT EMPTY(THIS.Value) AND THIS.Enabled
		  THIS.Click()
		ENDIF
		
	ENDPROC

	PROCEDURE Init
		THIS.AddProperty('cOriginalPicture', THIS.Picture)
		RETURN DODEFAULT()
		
	ENDPROC

	PROCEDURE Refresh
		LOCAL uState
		
		IF THIS.nModalStateIndex > 0 AND m.goStateManager.GetValue(THIS.nModalStateIndex)
		  THIS.Enabled = .F.
		ELSE
		  * Possible state values are:
		  * .F./0 - Up/Disable
		  * .T./1 - Up/Enabled
		  *  2    - Dn/Disable
		  *  3    - Dn/Enabled
		  *  4    - Dn&lock/Disabled = Edit mode locked, changes in progress.
		  *  5    - Dn&lock/Enabled = Edit mode locked, but no changes made yet.
		  m.uState = m.goStateManager.GetValue(THIS.nActionIndex, THISFORM)
		
		  IF VARTYPE(m.uState) $ 'NI' AND m.uState > 3
		    m.uState = m.uState - 2
		    THIS.Picture = THIS.cLockedPicture
		  ELSE
		    IF PEMSTATUS(THIS, 'cOriginalPicture', 5)  && In case refresh called before init
		      THIS.Picture = THIS.cOriginalPicture
		    ENDIF
		  ENDIF
		
		  DO CASE
		    CASE EMPTY(m.uState)
		      THIS.Value = .F.
		      THIS.lEnabled = .F.
		    CASE NOT VARTYPE(m.uState) $ 'NI' OR m.uState = 1
		      THIS.Value = .F.
		      THIS.lEnabled = .T.
		    CASE m.uState = 2
		      THIS.Value = .T.
		      THIS.lEnabled = .F.
		    OTHERWISE
		      THIS.Value = .T.
		      THIS.lEnabled = .T.
		  ENDCASE
		
		  * lEnabled has the desired enable state, call foundation control refresh to impliment.
		  * This will also take current privilege settings into account when deciding whether or
		  * not to actually enable the button.
		  THIS.ShowControl()
		ENDIF
	ENDPROC

ENDDEFINE

DEFINE CLASS chktoolindicatorbuttoninsmode AS chktoolindicatorbutton OF "cmtools.vcx" 
 	*< CLASSDATA: Baseclass="checkbox" Timestamp="" Scale="Pixels" Uniqueid="" ProjectClassIcon="..\graphics\cmpushed.bmp" ClassIcon="..\graphics\cmpushed.bmp" />

	Caption = "Ins"
	Name = "chktoolindicatorbuttoninsmode"
	nmodalstateindex = -1
	Width = 33
	
	PROCEDURE Click
		* Toggle inser mode.
		THIS.Value = NOT INSMODE(NOT INSMODE())
		
		* The system cannot detect programatic changing of Insert mode,
		* so we manually trigger the key toggle state refresh.
		* This ensure other objects watching the key toggle state will
		* be notified of the change.
		m.goStateManager.Refresh('System Key Toggle')
		
	ENDPROC

	PROCEDURE Init
		m.goStateManager.RequestRefresh('System Key Toggle', THIS)
		chkToolIndicatorButton::Init()
		
	ENDPROC

	PROCEDURE Refresh
		THIS.Value = INSMODE()
		chkToolIndicatorButton::Refresh()
		
	ENDPROC

ENDDEFINE

DEFINE CLASS chktoolindicatorbuttonlogon AS chktoolindicatorbutton OF "cmtools.vcx" 
 	*< CLASSDATA: Baseclass="checkbox" Timestamp="" Scale="Pixels" Uniqueid="" ProjectClassIcon="..\graphics\logon.bmp" ClassIcon="..\graphics\logon.bmp" />

	chelpkey = %hlpLogon
	Name = "chktoolindicatorbuttonlogon"
	Picture = ..\graphics\logon.bmp
	
	PROCEDURE Click
		THIS.TooltipText = ''
		IF THISFORM.oSecurity.IsLoggedOn()
		  THISFORM.oSecurity.Logoff()
		ELSE
		  IF NOT THISFORM.oSecurity.AutoLogOnDialog() AND THISFORM.Baseclass == 'Form'
		    THIS.Refresh()   && Fix button state on cancel when we don't get privilege change event.
		  ENDIF
		ENDIF
		
	ENDPROC

	PROCEDURE Init
		* Refresh our display state whenever system privilege level changes.
		m.goStateManager.RequestRefresh('System Privilege', THIS)
		
		chkToolIndicatorButton::Init()
		
	ENDPROC

	PROCEDURE Refresh
		IF ISNULL(THISFORM.oSecurity)
		  THIS.Enabled = .F.
		ELSE
		  chkToolIndicatorButton::Refresh()
		
		  * Only update value when enabled.
		  IF THIS.Enabled
		    THIS.Value = THISFORM.oSecurity.IsLoggedOn()
		    IF EMPTY(THIS.TooltipText) AND NOT ISNULL(THISFORM.oMessage)
		      IF THIS.Value
		        THIS.TooltipText = THISFORM.oMessage.Format(THISFORM.oMessage.TranslateString('%txtLoggedOnAs'), ;
		                           THISFORM.oSecurity.GetUserProperty('User'))
		      ELSE
		        THIS.TooltipText = THISFORM.oMessage.Localize('Logon')
		      ENDIF
		    ENDIF
		  ENDIF
		ENDIF
		
	ENDPROC

ENDDEFINE

DEFINE CLASS chktoolindicatorbuttonnumlock AS chktoolindicatorbutton OF "cmtools.vcx" 
 	*< CLASSDATA: Baseclass="checkbox" Timestamp="" Scale="Pixels" Uniqueid="" ProjectClassIcon="..\graphics\cmpushed.bmp" ClassIcon="..\graphics\cmpushed.bmp" />

	Caption = "Num"
	Name = "chktoolindicatorbuttonnumlock"
	nmodalstateindex = -1
	Width = 33
	
	PROCEDURE Click
		THIS.Value = NOT NUMLOCK(NOT NUMLOCK())
		
	ENDPROC

	PROCEDURE Init
		m.goStateManager.RequestRefresh('System Key Toggle', THIS)
		chkToolIndicatorButton::Init()
		
	ENDPROC

	PROCEDURE Refresh
		THIS.Value = NUMLOCK()
		chkToolIndicatorButton::Refresh()
		
	ENDPROC

ENDDEFINE

DEFINE CLASS chktoolindicatorcalculator AS chktoolindicatorbutton OF "cmtools.vcx" 		&& Open/Close Calculator Utility
 	*< CLASSDATA: Baseclass="checkbox" Timestamp="" Scale="Pixels" Uniqueid="" ProjectClassIcon="..\graphics\calc.bmp" ClassIcon="..\graphics\calc.bmp" />

	Left = 114
	Name = "Chktoolindicatorbutton1"
	Picture = ..\graphics\calc.bmp
	ToolTipText = "Calculator"
	Top = 78
	ZOrderSet = 23
	
	PROCEDURE afterchange
		IF THIS.Value
		  ACTIVATE WINDOW Calculator
		ELSE
		  RELEASE WINDOW Calculator
		ENDIF
		
	ENDPROC

	PROCEDURE Destroy
		RELEASE WINDOW Calculator
		
	ENDPROC

	PROCEDURE Refresh
		THIS.Value = WEXIST('Calculator')
		DODEFAULT()
		
	ENDPROC

ENDDEFINE

DEFINE CLASS chktoollaunchbutton AS chktoolindicatorbutton OF "cmtools.vcx" 
 	*< CLASSDATA: Baseclass="checkbox" Timestamp="" Scale="Pixels" Uniqueid="" ProjectClassIcon="..\graphics\form.bmp" ClassIcon="..\graphics\form.bmp" />

	*<DefinedPropArrayMethod>
		*m: launchform		&& Contains the command to actually launch the form. Subclass to pass parameters to form.
		*p: cformname		&& Name of form to launch. Include .SCX extension if form is stored in an SCX file.
		*p: lcloseifopen		&& Applies to single instance forms only. When .T. button stays down when form is open. Press button again to close the form.
		*p: lhidewhendisabled		&& If true, and application.IsEnabled() returns .F. for this button, the button will be hidden.
		*p: lmultiinstance		&& Set to .T. to allow multiple instances of the form to be open at one time.
		*p: uparameter		&& Parameter to pass to the form when it is launched.
	*</DefinedPropArrayMethod>

	cformname = 		&& Name of form to launch. Include .SCX extension if form is stored in an SCX file.
	lcloseifopen = .T.		&& Applies to single instance forms only. When .T. button stays down when form is open. Press button again to close the form.
	lmultiinstance = .F.		&& Set to .T. to allow multiple instances of the form to be open at one time.
	Name = "chktoollaunchbutton"
	Picture = ..\graphics\form.bmp
	uparameter = .F.		&& Parameter to pass to the form when it is launched.
	
	PROCEDURE Click
		IF NOT EMPTY(THIS.cFormName)
		  * For a single instance form, close it if it is already open.
		  IF NOT THIS.lMultiInstance AND THIS.lCloseIfOpen AND m.goStateManager.IsFormOpen(THIS.cFormName)
		    m.goStateManager.CloseForm(THIS.cFormName)
		    THIS.Refresh()
		  ELSE
		    * Use a separate method to launch the form to make it easier for developer to subclass
		    THIS.LaunchForm()
		
		    * Make sure the button state is correct if the form load was aborted.
		    THIS.Refresh()
		  ENDIF
		ENDIF
		
	ENDPROC

	PROCEDURE Init
		* Refresh button whenever the active window changes, unless we are in a toolbar that alreay
		* requests refresh of the whole toolbar on window change.
		IF NOT PEMSTATUS(THISFORM, 'lRefreshOnWindowChange', 5) OR NOT THISFORM.lRefreshOnWindowChange
		  m.goStateManager.RequestRefresh('Window Change', THIS)
		ENDIF
		
		DODEFAULT()
		
	ENDPROC

	PROCEDURE launchform		&& Contains the command to actually launch the form. Subclass to pass parameters to form.
		* Default code to launch a single or multi-instance form.
		IF THIS.lMultiInstance
		  IF EMPTY(THIS.uParameter)
		    THISFORM.oStateManager.OpenFormMulti(THIS.cFormName)
		  ELSE
		    THISFORM.oStateManager.OpenFormMulti(THIS.cFormName, THIS.uParameter)
		  ENDIF
		ELSE
		  IF EMPTY(THIS.uParameter)
		    THISFORM.oStateManager.OpenForm(THIS.cFormName)
		  ELSE
		    THISFORM.oStateManager.OpenForm(THIS.cFormName, THIS.uParameter)
		  ENDIF
		ENDIF
		
	ENDPROC

	PROCEDURE showcontrol
		DODEFAULT()
		
		* If this is a single-instance form, indicate that it is already open by depressing button display.
		IF NOT EMPTY(THIS.cFormName)
		  IF THIS.lEnabled AND THIS.Enabled
		    THIS.Enabled = THISFORM.oApp.IsEnabled(THIS.cFormName)
		
		    * The lHideWhenDisabled property only effects visible state when the enable is
		    * set from the application.isEnabled() rule event.
		    IF THIS.lHideWhenDisabled
		      THIS.Visible = THIS.Enabled
		    ENDIF
		  ENDIF
		  THIS.Value = NOT THIS.lMultiInstance AND THIS.lCloseIfOpen ;
		               AND THISFORM.oStateManager.IsFormOpen(THIS.cFormName)
		ELSE
		  THIS.Enabled = .F.
		ENDIF
		
	ENDPROC

ENDDEFINE

DEFINE CLASS cmdtoolactionbutton AS cmdtoolbutton OF "cmtools.vcx" 
 	*< CLASSDATA: Baseclass="commandbutton" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*p: caction		&& Name of State Manager Action to bind to this button.
		*p: cworkarea		&& Workarea this button should operate on.
		*p: lrefreshinform		&& If set to .T., then request state manager refreshes when in a form, otherwise only when in a toolbar.
		*p: nactionindex		&& Index of action for this button. Set in Init() method of subclass when requesting state manager refresh for a form action.
		*p: uparam2		&& Optional 2nd parameter to pass to the state manager Execute() method for the action.
	*</DefinedPropArrayMethod>

	caction = 		&& Name of State Manager Action to bind to this button.
	cworkarea = 		&& Workarea this button should operate on.
	lrefreshinform = .T.		&& If set to .T., then request state manager refreshes when in a form, otherwise only when in a toolbar.
	nactionindex = 0		&& Index of action for this button. Set in Init() method of subclass when requesting state manager refresh for a form action.
	Name = "cmdtoolactionbutton"
	nmodalstateindex = -1
	
	PROCEDURE Click
		* Execute the associated action, if any.
		IF THIS.nActionIndex > 0
		  IF EMPTY(THIS.cWorkarea) AND EMPTY(THIS.uParam2) AND VARTYPE(THIS.uParam2) = 'L'
		    THISFORM.oStateManager.Execute(THIS.nActionIndex, THISFORM)
		  ELSE
		    THIS.cWorkarea = PROPER(THIS.cWorkarea)  && Make sure it stays propercase, for comparisons.
		    IF EMPTY(THIS.uParam2) AND VARTYPE(THIS.uParam2) = 'L'
		      THISFORM.oStateManager.Execute(THIS.nActionIndex, THISFORM, THIS.cWorkarea)
		    ELSE
		      THISFORM.oStateManager.Execute(THIS.nActionIndex, THISFORM, THIS.cWorkarea, THIS.uParam2)
		    ENDIF
		  ENDIF
		ENDIF
		
		RETURN DODEFAULT()
		
	ENDPROC

	PROCEDURE Init
		THIS.Enabled = .F.   && Assume disabled, until we get first refresh
		
		* Get the numeric index associated with the state, for faster refresh operation.
		THIS.nActionIndex = THISFORM.oStateManager.GetIndex(THIS.cAction)
		IF (THIS.nActionIndex > 0)
		  * If in a toolbar, or lRefreshInForm is set, request stateManager refreshes.
		  IF THIS.lRefreshInForm OR THISFORM.Baseclass == 'Toolbar'
		    THISFORM.oStateManager.RequestRefresh(THIS.nActionIndex, THIS)
		  ENDIF
		  RETURN DODEFAULT()
		ENDIF
		ERROR "Undefined state manager action: " + THIS.cAction
		
	ENDPROC

	PROCEDURE Refresh
		IF NOT ISNULL(THISFORM.oStateManager)
		  IF THIS.nModalStateIndex > 0 AND THISFORM.oStateManager.GetValue(THIS.nModalStateIndex)
		    THIS.Enabled = .F.
		  ELSE
		    * Set desired enabled state according to the associated action state, if any.
		    IF THIS.nActionIndex > 0
		      IF NOT EMPTY(THIS.cWorkarea)
		        THIS.lEnabled = NOT EMPTY(THISFORM.oStateManager.GetValue(THIS.nActionIndex, THISFORM, THIS.cWorkarea))
		      ELSE
		        THIS.lEnabled = NOT EMPTY(THISFORM.oStateManager.GetValue(THIS.nActionIndex, THISFORM))
		      ENDIF
		    ENDIF
		
		    * lEnabled has the desired enable state, call foundation control refresh to apply it.
		    DODEFAULT()
		  ENDIF
		ENDIF
		
	ENDPROC

ENDDEFINE

DEFINE CLASS cmdtoolactionbuttondelete AS cmdtoolactionbutton OF "cmtools.vcx" 
 	*< CLASSDATA: Baseclass="commandbutton" Timestamp="" Scale="Pixels" Uniqueid="" ProjectClassIcon="..\graphics\delete.bmp" ClassIcon="..\graphics\delete.bmp" />

	caction = Form Delete
	chelpkey = %hlpDelete
	lrefreshinform = .F.
	Name = "cmdtoolactionbuttondelete"
	Picture = ..\graphics\delete.bmp

ENDDEFINE

DEFINE CLASS cmdtoolactionbuttonedit AS cmdtoolactionbutton OF "cmtools.vcx" 
 	*< CLASSDATA: Baseclass="commandbutton" Timestamp="" Scale="Pixels" Uniqueid="" ProjectClassIcon="..\graphics\prop.bmp" ClassIcon="..\graphics\prop.bmp" />

	caction = Form Edit
	chelpkey = %hlpEdit
	Name = "cmdtoolactionbuttonedit"
	Picture = ..\graphics\prop.bmp

ENDDEFINE

DEFINE CLASS cmdtoolactionbuttonfind AS cmdtoolactionbutton OF "cmtools.vcx" 
 	*< CLASSDATA: Baseclass="commandbutton" Timestamp="" Scale="Pixels" Uniqueid="" ProjectClassIcon="..\graphics\findrec.bmp" ClassIcon="..\graphics\findrec.bmp" />

	caction = Form Find
	chelpkey = %hlpFindRecord
	lrefreshinform = .F.
	Name = "cmdtoolactionbuttonfind"
	Picture = ..\graphics\findrec.bmp

ENDDEFINE

DEFINE CLASS cmdtoolactionbuttonfirst AS cmdtoolactionbutton OF "cmtools.vcx" 
 	*< CLASSDATA: Baseclass="commandbutton" Timestamp="" Scale="Pixels" Uniqueid="" ProjectClassIcon="..\graphics\firstrec.bmp" ClassIcon="..\graphics\firstrec.bmp" />

	caction = Form Nav First
	chelpkey = %hlpFirstRecord
	lrefreshinform = .F.
	Name = "cmdtoolactionbuttonfirst"
	Picture = ..\graphics\firstrec.bmp

ENDDEFINE

DEFINE CLASS cmdtoolactionbuttonlast AS cmdtoolactionbutton OF "cmtools.vcx" 
 	*< CLASSDATA: Baseclass="commandbutton" Timestamp="" Scale="Pixels" Uniqueid="" ProjectClassIcon="..\graphics\lastrec.bmp" ClassIcon="..\graphics\lastrec.bmp" />

	caction = Form Nav Last
	chelpkey = %hlpLastRecord
	lrefreshinform = .F.
	Name = "cmdtoolactionbuttonlast"
	Picture = ..\graphics\lastrec.bmp

ENDDEFINE

DEFINE CLASS cmdtoolactionbuttonlist AS cmdtoolactionbutton OF "cmtools.vcx" 
 	*< CLASSDATA: Baseclass="commandbutton" Timestamp="" Scale="Pixels" Uniqueid="" ProjectClassIcon="..\graphics\listrec.bmp" ClassIcon="..\graphics\listrec.bmp" />

	caction = Form List
	chelpkey = %hlpListRecord
	lrefreshinform = .F.
	Name = "cmdtoolactionbuttonlist"
	Picture = ..\graphics\listrec.bmp

ENDDEFINE

DEFINE CLASS cmdtoolactionbuttonnew AS cmdtoolactionbutton OF "cmtools.vcx" 
 	*< CLASSDATA: Baseclass="commandbutton" Timestamp="" Scale="Pixels" Uniqueid="" ProjectClassIcon="..\graphics\newrec.bmp" ClassIcon="..\graphics\newrec.bmp" />

	caction = Form New
	chelpkey = %hlpNew
	lrefreshinform = .F.
	Name = "cmdtoolactionbuttonnew"
	Picture = ..\graphics\newrec.bmp

ENDDEFINE

DEFINE CLASS cmdtoolactionbuttonnext AS cmdtoolactionbutton OF "cmtools.vcx" 
 	*< CLASSDATA: Baseclass="commandbutton" Timestamp="" Scale="Pixels" Uniqueid="" ProjectClassIcon="..\graphics\nextrec.bmp" ClassIcon="..\graphics\nextrec.bmp" />

	caction = Form Nav Next
	chelpkey = %hlpNextRecord
	lrefreshinform = .F.
	Name = "cmdtoolactionbuttonnext"
	Picture = ..\graphics\nextrec.bmp

ENDDEFINE

DEFINE CLASS cmdtoolactionbuttonpreview AS cmdtoolactionbutton OF "cmtools.vcx" 
 	*< CLASSDATA: Baseclass="commandbutton" Timestamp="" Scale="Pixels" Uniqueid="" ProjectClassIcon="..\graphics\preview.bmp" ClassIcon="..\graphics\preview.bmp" />

	caction = Form Report Preview
	chelpkey = hlpPreviewButton
	Name = "cmdtoolactionbuttonpreview"
	Picture = ..\graphics\preview.bmp
	uparam2 = .T.

ENDDEFINE

DEFINE CLASS cmdtoolactionbuttonprint AS cmdtoolactionbutton OF "cmtools.vcx" 
 	*< CLASSDATA: Baseclass="commandbutton" Timestamp="" Scale="Pixels" Uniqueid="" ProjectClassIcon="..\graphics\print.bmp" ClassIcon="..\graphics\print.bmp" />

	caction = Form Report
	chelpkey = hlpPrintButton
	Name = "cmdtoolactionbuttonprint"
	Picture = ..\graphics\print.bmp

ENDDEFINE

DEFINE CLASS cmdtoolactionbuttonprior AS cmdtoolactionbutton OF "cmtools.vcx" 
 	*< CLASSDATA: Baseclass="commandbutton" Timestamp="" Scale="Pixels" Uniqueid="" ProjectClassIcon="..\graphics\prevrec.bmp" ClassIcon="..\graphics\prevrec.bmp" />

	caction = Form Nav Prior
	chelpkey = %hlpPriorRecord
	lrefreshinform = .F.
	Name = "cmdtoolactionbuttonprior"
	Picture = ..\graphics\prevrec.bmp

ENDDEFINE

DEFINE CLASS cmdtoolactionbuttonrefresh AS cmdtoolactionbutton OF "cmtools.vcx" 
 	*< CLASSDATA: Baseclass="commandbutton" Timestamp="" Scale="Pixels" Uniqueid="" ProjectClassIcon="..\graphics\refresh.bmp" ClassIcon="..\graphics\refresh.bmp" />

	caction = Form Refresh Data
	Name = "cmdtoolactionbuttonrefresh"
	nmodalstateindex = 0
	Picture = ..\graphics\refresh.bmp

ENDDEFINE

DEFINE CLASS cmdtoolactionbuttonrequery AS cmdtoolactionbutton OF "cmtools.vcx" 
 	*< CLASSDATA: Baseclass="commandbutton" Timestamp="" Scale="Pixels" Uniqueid="" ProjectClassIcon="..\graphics\requery.bmp" ClassIcon="..\graphics\requery.bmp" />

	caction = Form Requery
	chelpkey = hlpRequery
	lrefreshinform = .F.
	Name = "cmdtoolactionbuttonrequery"
	Picture = ..\graphics\requery.bmp

ENDDEFINE

DEFINE CLASS cmdtoolactionbuttonrevert AS cmdtoolactionbutton OF "cmtools.vcx" 
 	*< CLASSDATA: Baseclass="commandbutton" Timestamp="" Scale="Pixels" Uniqueid="" ProjectClassIcon="..\graphics\revert.bmp" ClassIcon="..\graphics\revert.bmp" />

	caction = Form Edit Cancel
	chelpkey = %hlpRevert
	lrefreshinform = .T.
	lskipvalid = .T.
	Name = "cmdtoolactionbuttonrevert"
	Picture = ..\graphics\revert2.bmp

ENDDEFINE

DEFINE CLASS cmdtoolactionbuttonsave AS cmdtoolactionbutton OF "cmtools.vcx" 
 	*< CLASSDATA: Baseclass="commandbutton" Timestamp="" Scale="Pixels" Uniqueid="" ProjectClassIcon="..\graphics\saveall.bmp" ClassIcon="..\graphics\saveall.bmp" />

	caction = Form Edit Save
	chelpkey = %hlpSave
	lrefreshinform = .T.
	Name = "cmdtoolactionbuttonsave"
	Picture = ..\graphics\saveall.bmp
	
	PROCEDURE Click
		* A VFP 7.0 bug causes crashes if Save is pressed while a Local View window is open.
		* So, we try to detect this case here, and stuff a ^S to use the menu save option instead.
		IF VERSION(2) != 0 AND TYPE('_SCREEN.ActiveForm.Name') != 'C' AND ' - ' $ WONTOP() AND NOT '.' $ WONTOP()
		  KEYBOARD '{CTRL+S}' PLAIN 
		ELSE
		  DODEFAULT()
		ENDIF
		
	ENDPROC

ENDDEFINE

DEFINE CLASS cmdtoolbutton AS cmdcommandbuttoncustom OF "..\custom\ccontrol.vcx" 		&& Toolbar button
 	*< CLASSDATA: Baseclass="commandbutton" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*p: lhottrackintoolbar		&& If set to .T. then SpecialEffect will be set to 2 (hot tracking) when in a toolbar, and left at designtime setting in a form.
		*p: nmodalstateindex		&& SystemModal state index. Initialize to 0 to disable button when modal form is active, -1 to always leave enabled.
	*</DefinedPropArrayMethod>

	Caption = ""
	FontName = "MS Sans Serif"
	Height = 22
	lhottrackintoolbar = .T.		&& If set to .T. then SpecialEffect will be set to 2 (hot tracking) when in a toolbar, and left at designtime setting in a form.
	Name = "cmdtoolbutton"
	nmodalstateindex = 0		&& SystemModal state index. Initialize to 0 to disable button when modal form is active, -1 to always leave enabled.
	Width = 22
	
	PROCEDURE Init
		* The lDisableWhenModal flag only applies to buttons in a toolbar.
		IF THISFORM.Baseclass != 'Toolbar'
		  THIS.nModalStateIndex = -1
		ELSE
		  IF THIS.nModalStateIndex >= 0
		    THIS.nModalStateIndex = THISFORM.oStateManager.GetIndex('System Modal')
		  ENDIF
		ENDIF
		
		* Toolbars have no Load() method, so we cant rely on the security/message reference being there.
		IF NOT EMPTY(THIS.cWritePrivilege) AND ISNULL(THISFORM.oSecurity)
		  THISFORM.oSecurity = FindGlobalObject('cmSecurity', '2.0')
		ENDIF
		IF THIS.lLocalizeCaption AND ISNULL(THISFORM.oMessage)
		  THISFORM.oMessage = FindGlobalObject('cmMessage')
		ENDIF
		
		* Use the new hover style buttons in toolbars for VFP 7 and later.
		IF THIS.lHotTrackInToolbar AND VERSION(5) >= 700 AND THISFORM.BaseClass == 'Toolbar'
		  THIS.SpecialEffect = 2
		ENDIF
		
		* And finish up with parent class init method.
		RETURN DODEFAULT()
		
	ENDPROC

	PROCEDURE Refresh
		IF NOT ISNULL(THISFORM.oStateManager)
		  IF THIS.nModalStateIndex > 0 AND THISFORM.oStateManager.GetValue(THIS.nModalStateIndex)
		    THIS.Enabled = .F.
		  ELSE
		    * lEnabled has the desired enable state, call foundation control refresh to impliment.
		    DODEFAULT()
		  ENDIF
		ENDIF
		
	ENDPROC

ENDDEFINE

DEFINE CLASS cmdtoolbuttoncopy AS cmdtoolbutton OF "cmtools.vcx" 
 	*< CLASSDATA: Baseclass="commandbutton" Timestamp="" Scale="Pixels" Uniqueid="" ProjectClassIcon="..\graphics\copy.bmp" ClassIcon="..\graphics\copy.bmp" />

	chelpkey = %hlpCopy
	Name = "cmdtoolbuttoncopy"
	nmodalstateindex = -1
	Picture = ..\graphics\copy.bmp
	
	PROCEDURE Click
		=SYS(1500, '_MED_COPY','_MEDIT')
		
	ENDPROC

	PROCEDURE Init
		m.goStateManager.RequestRefresh('System Edit State', THIS)
		cmdToolButton::Init()
		
	ENDPROC

	PROCEDURE Refresh
		THIS.Enabled = NOT SKPBAR('_MEDIT', _MED_COPY)
		
	ENDPROC

ENDDEFINE

DEFINE CLASS cmdtoolbuttoncut AS cmdtoolbutton OF "cmtools.vcx" 
 	*< CLASSDATA: Baseclass="commandbutton" Timestamp="" Scale="Pixels" Uniqueid="" ProjectClassIcon="..\graphics\cut.bmp" ClassIcon="..\graphics\cut.bmp" />

	chelpkey = %hlpCut
	Name = "cmdtoolbuttoncut"
	nmodalstateindex = -1
	Picture = ..\graphics\cut.bmp
	
	PROCEDURE Click
		=SYS(1500, '_MED_CUT','_MEDIT')
		
	ENDPROC

	PROCEDURE Init
		m.goStateManager.RequestRefresh('System Edit State', THIS)
		cmdToolButton::Init()
		
	ENDPROC

	PROCEDURE Refresh
		THIS.Enabled = NOT SKPBAR('_MEDIT', _MED_CUT)
		
	ENDPROC

ENDDEFINE

DEFINE CLASS cmdtoolbuttonpaste AS cmdtoolbutton OF "cmtools.vcx" 
 	*< CLASSDATA: Baseclass="commandbutton" Timestamp="" Scale="Pixels" Uniqueid="" ProjectClassIcon="..\graphics\paste.bmp" ClassIcon="..\graphics\paste.bmp" />

	chelpkey = %hlpPaste
	Name = "cmdtoolbuttonpaste"
	nmodalstateindex = -1
	Picture = ..\graphics\paste.bmp
	
	PROCEDURE Click
		=SYS(1500, '_MED_PASTE','_MEDIT')
		
	ENDPROC

	PROCEDURE Init
		m.goStateManager.RequestRefresh('System Edit State', THIS)
		cmdToolButton::Init()
		
	ENDPROC

	PROCEDURE Refresh
		THIS.Enabled = NOT SKPBAR('_MEDIT', _MED_PASTE)
		
	ENDPROC

ENDDEFINE

DEFINE CLASS cmdtoolbuttonredo AS cmdtoolbutton OF "cmtools.vcx" 
 	*< CLASSDATA: Baseclass="commandbutton" Timestamp="" Scale="Pixels" Uniqueid="" ProjectClassIcon="..\graphics\redoedit.bmp" ClassIcon="..\graphics\redoedit.bmp" />

	chelpkey = %hlpRedo
	Name = "cmdtoolbuttonredo"
	nmodalstateindex = -1
	Picture = ..\graphics\redoedit.bmp
	
	PROCEDURE Click
		=SYS(1500, '_MED_REDO','_MEDIT')
		
	ENDPROC

	PROCEDURE Init
		m.goStateManager.RequestRefresh('System Edit State', THIS)
		cmdToolButton::Init()
		
	ENDPROC

	PROCEDURE Refresh
		THIS.Enabled = NOT SKPBAR('_MEDIT', _MED_REDO)
		
	ENDPROC

ENDDEFINE

DEFINE CLASS cmdtoolbuttonundo AS cmdtoolbutton OF "cmtools.vcx" 
 	*< CLASSDATA: Baseclass="commandbutton" Timestamp="" Scale="Pixels" Uniqueid="" ProjectClassIcon="..\graphics\undoedit.bmp" ClassIcon="..\graphics\undoedit.bmp" />

	chelpkey = %hlpUndo
	Name = "cmdtoolbuttonundo"
	nmodalstateindex = -1
	Picture = ..\graphics\undoedit.bmp
	
	PROCEDURE Click
		=SYS(1500, '_MED_UNDO','_MEDIT')
		
	ENDPROC

	PROCEDURE Init
		m.goStateManager.RequestRefresh('System Edit State', THIS)
		cmdToolButton::Init()
		
	ENDPROC

	PROCEDURE Refresh
		THIS.Enabled = NOT SKPBAR('_MEDIT', _MED_UNDO)
		
	ENDPROC

ENDDEFINE

DEFINE CLASS cntnavbuttons AS cntcontainer OF "codemine.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" ProjectClassIcon="..\graphics\navset.bmp" ClassIcon="..\graphics\navset.bmp" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="cmdToolButtonFirst" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdToolbuttonNext" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdToolButtonPrior" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdToolButtonLast" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*p: cworkarea		&& Specifies the workarea to use for all contained buttons.
	*</DefinedPropArrayMethod>

	BackStyle = 0
	BorderWidth = 0
	cworkarea = 		&& Specifies the workarea to use for all contained buttons.
	Height = 28
	Name = "cntnavbuttons"
	Width = 100

	ADD OBJECT 'cmdToolButtonFirst' AS cmdtoolactionbuttonfirst WITH ;
		Left = 2, ;
		Name = "cmdToolButtonFirst", ;
		TabIndex = 1, ;
		Top = 3
		*< END OBJECT: ClassLib="cmtools.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdToolButtonLast' AS cmdtoolactionbuttonlast WITH ;
		Left = 74, ;
		Name = "cmdToolButtonLast", ;
		TabIndex = 4, ;
		Top = 3
		*< END OBJECT: ClassLib="cmtools.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdToolbuttonNext' AS cmdtoolactionbuttonnext WITH ;
		Left = 50, ;
		Name = "cmdToolbuttonNext", ;
		TabIndex = 3, ;
		Top = 3
		*< END OBJECT: ClassLib="cmtools.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdToolButtonPrior' AS cmdtoolactionbuttonprior WITH ;
		Left = 26, ;
		Name = "cmdToolButtonPrior", ;
		TabIndex = 2, ;
		Top = 3
		*< END OBJECT: ClassLib="cmtools.vcx" BaseClass="commandbutton" />
	
	PROCEDURE Init
		* Our cWorkarea property applies to all contained buttons.
		THIS.SetAll('cWorkarea', THIS.cWorkarea)
		cntContainer::Init()
		
	ENDPROC

ENDDEFINE

DEFINE CLASS sepseparator AS separator 
 	*< CLASSDATA: Baseclass="separator" Timestamp="" Scale="Pixels" Uniqueid="" />

	Height = 0
	Name = "sepseparator"
	Width = 0
	
	PROCEDURE Init
		* Default to Vertical bar seperator for VFP7 toolbars
		IF VERSION(5) >= 700
		  THIS.Style = 1
		ENDIF
		
	ENDPROC

ENDDEFINE
