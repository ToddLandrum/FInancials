*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="cmsecure.vcx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS cntlocalizedmover AS cntmoverlistpair OF "cmgadget.vcx" 		&& Special mover listbox for localized group and privilege names
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Lbllabel1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabel2" UniqueID="" Timestamp="" />

	#INCLUDE "codemine.h"
	*<DefinedPropArrayMethod>
		*m: getmovervalue		&& Return string of selected items.
		*m: setmovervalue		&& Set value of mover lists from localized key names.
		*a: aitems[1,0]		&& Actual name of selection items.
		*a: alocitems[1,0]		&& Localized name of selection items.
	*</DefinedPropArrayMethod>

	Height = 119
	Name = "cntlocalizedmover"
	Width = 469
	cmdDeselect.Left = 195
	cmdDeselect.Name = "cmdDeselect"
	cmdDeselect.Top = 71
	cmdDeselectAll.Left = 241
	cmdDeselectAll.Name = "cmdDeselectAll"
	cmdDeselectAll.Top = 128
	cmdDeselectAll.Visible = .F.
	cmdSelect.Left = 195
	cmdSelect.Name = "cmdSelect"
	cmdSelect.Top = 36
	cmdSelectAll.Left = 133
	cmdSelectAll.Name = "cmdSelectAll"
	cmdSelectAll.Top = 128
	cmdSelectAll.Visible = .F.
	lstSelected.FontSize = 9
	lstSelected.Height = 101
	lstSelected.Left = 288
	lstSelected.Name = "lstSelected"
	lstSelected.Top = 16
	lstSelected.Width = 180
	lstSource.FontSize = 9
	lstSource.Height = 101
	lstSource.Left = 1
	lstSource.Name = "lstSource"
	lstSource.Top = 16
	lstSource.Width = 181

	ADD OBJECT 'Lbllabel1' AS lbltextcustom WITH ;
		Caption = "Not Selected", ;
		FontBold = .F., ;
		FontSize = 9, ;
		Left = 1, ;
		Name = "Lbllabel1", ;
		Top = 0
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabel2' AS lblfieldlabelcustom WITH ;
		Caption = "Selected:", ;
		FontBold = .F., ;
		FontSize = 9, ;
		Left = 287, ;
		Name = "Lbllabel2", ;
		Top = 0
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />
	
	PROCEDURE deselectitem
		LPARAMETER nIndex
		
		IF THISFORM.BeforeChange()
		  cntMoverListPair::DeselectItem(m.nIndex)
		ENDIF
		
	ENDPROC

	PROCEDURE getmovervalue		&& Return string of selected items.
		*++
		* Build list of key names from selected localized names.
		*--
		LOCAL ix, nIndex, cItems, cExact, aSelected[1]
		
		  m.cExact = SET('EXACT')
		  SET EXACT ON
		
		  m.cItems = ''
		  m.aSelected = ''
		  IF THIS.GetValue(@aSelected) > 0
		    * Translate localized privilege names back to internal key names.
		    FOR m.nIndex = 1 TO ALEN(aSelected)
		      m.ix = ASCAN(THIS.aLocItems, aSelected[m.nIndex])
		      IF m.ix > 0
		        m.cItems = m.cItems + IIF(EMPTY(m.cItems), '', ',') + THIS.aItems[m.ix]
		      ENDIF
		    ENDFOR
		  ENDIF
		
		  IF m.cExact = 'OFF'
		    SET EXACT OFF
		  ENDIF
		  RETURN m.cItems
		
	ENDPROC

	PROCEDURE selectitem
		LPARAMETER nIndex
		
		IF THISFORM.BeforeChange()
		  cntMoverListPair::SelectItem(m.nIndex)
		ENDIF
		
	ENDPROC

	PROCEDURE setmovervalue		&& Set value of mover lists from localized key names.
		LPARAMETER cCategory, cType, cItems
		*++
		* Init mover listboxes with localized key names from specified category.
		*--
		LOCAL ix, cExact, aSelected[1], aItems[1], aLocItems[1], nAccess
		
		  m.cExact = SET('EXACT')
		  SET EXACT ON
		
		  m.nIndex = 0
		  STORE '' TO m.aSelected, m.aItems, m.aLocItems
		  m.nAccess = IIF(THISFORM.oSecurity.HasPrivilege('Developer'), KEY_ACCESS_DEVELOPER, KEY_ACCESS_ADMIN)
		  IF THISFORM.oRegistry.EnumKeysToArray(m.cCategory, m.cType, @m.aItems, @m.aLocItems, m.nAccess) > 0
		    DO WHILE NOT EMPTY(m.cItems)
		      m.ix = ASCAN(aItems, GetToken(@m.cItems, ','))
		      IF m.ix > 0
		        IF NOT EMPTY(aSelected[1])
		          DIMENSION aSelected[ALEN(aSelected) + 1]
		        ENDIF
		        aSelected[ALEN(aSelected)] = aLocItems[m.ix]
		      ENDIF
		    ENDDO
		
		    THIS.SetValue(@m.aLocItems, @m.aSelected)
		  ENDIF
		
		  * Copy arry results to static properties so other methods can access them.
		  =ACOPY(aItems, THIS.aItems)
		  =ACOPY(aLocItems, THIS.aLocItems)
		
		  IF m.cExact = 'OFF'
		    SET EXACT OFF
		  ENDIF
		  RETURN .T.
		
	ENDPROC

ENDDEFINE

DEFINE CLASS frmaccounteditor AS frmformcustom OF "..\custom\cforms.vcx" 		&& User account editor.
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="pgfPageFrame" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfPageFrame.pagUsers.cntUsers" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfPageFrame.pagGroups.cntGroups" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntButtons" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntButtons.cmdAdd" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntButtons.cmdDelete" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntButtons.cmdEdit" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntButtons.Cmdok1" UniqueID="" Timestamp="" />

	#INCLUDE "codemine.h"
	*<DefinedPropArrayMethod>
		*a: agroups[1,2]		&& Array of defined groups.
		*a: ausers[1,3]		&& Array of defined users.
	*</DefinedPropArrayMethod>

	Caption = "User Account Editor"
	cversion = 2.0.0
	DoCreate = .T.
	Height = 434
	Icon = ..\graphics\crdfle06.ico
	lrememberposition = .T.
	lremembersize = .T.
	MaxWidth = -1
	MinButton = .F.
	MinHeight = -1
	MinWidth = -1
	Name = "frmaccounteditor"
	omessage = .NULL.
	oregistry = .NULL.
	osecurity = .NULL.
	ostring = .NULL.
	ScaleMode = 3
	Width = 692
	Mwresize1.lblHighLight.Name = "lblHighLight"
	Mwresize1.lblShading.Name = "lblShading"
	Mwresize1.Left = 518
	Mwresize1.Name = "Mwresize1"
	Mwresize1.Top = 385
	Mwresize1.ZOrderSet = 1

	ADD OBJECT 'cntButtons' AS cntcontainercustom WITH ;
		BackStyle = 0, ;
		BorderWidth = 0, ;
		creposition = Vfollow,Hcenter, ;
		Height = 48, ;
		Left = 178, ;
		Name = "cntButtons", ;
		SpecialEffect = 2, ;
		Top = 384, ;
		Width = 335, ;
		ZOrderSet = 2
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="container" />

	ADD OBJECT 'cntButtons.cmdAdd' AS cmdcommandbuttoncustom WITH ;
		Caption = "\<Add...", ;
		Height = 33, ;
		Left = 3, ;
		Name = "cmdAdd", ;
		TabIndex = 2, ;
		Top = 3, ;
		Width = 75
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cntButtons.cmdDelete' AS cmdcommandbuttoncustom WITH ;
		Caption = "\<Delete...", ;
		Height = 33, ;
		Left = 171, ;
		Name = "cmdDelete", ;
		TabIndex = 4, ;
		Top = 3, ;
		Width = 75
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cntButtons.cmdEdit' AS cmdcommandbuttoncustom WITH ;
		Caption = "\<Edit...", ;
		Height = 33, ;
		Left = 87, ;
		Name = "cmdEdit", ;
		TabIndex = 3, ;
		Top = 3, ;
		Width = 75
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cntButtons.Cmdok1' AS cmdokcustom WITH ;
		Cancel = .T., ;
		Caption = "\<Close", ;
		Height = 33, ;
		Left = 255, ;
		Name = "Cmdok1", ;
		Top = 3, ;
		Width = 75
		*< END OBJECT: ClassLib="..\custom\cbutton.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'pgfPageFrame' AS pgfpageframecustom WITH ;
		creposition = Vstretch,Hstretch, ;
		ErasePage = .T., ;
		Height = 362, ;
		lapplyformbackground = .F., ;
		Left = 11, ;
		Name = "pgfPageFrame", ;
		PageCount = 2, ;
		TabIndex = 1, ;
		TabStyle = 1, ;
		Top = 10, ;
		Width = 673, ;
		ZOrderSet = 0, ;
		Page1.Caption = "\<Users", ;
		Page1.FontSize = 9, ;
		Page1.Name = "pagUsers", ;
		Page2.Caption = "\<Groups", ;
		Page2.FontSize = 9, ;
		Page2.Name = "pagGroups"
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="pageframe" />

	ADD OBJECT 'pgfPageFrame.pagGroups.cntGroups' AS cntadjustablelist WITH ;
		ccolumnheadings = Group Name,Description, ;
		creposition = Vstretch,Hstretch, ;
		Height = 314, ;
		Left = 7, ;
		Name = "cntGroups", ;
		Top = 8, ;
		Width = 653, ;
		lstColumnList.ColumnCount = 2, ;
		lstColumnList.ColumnWidths = "120,400", ;
		lstColumnList.FontBold = .F., ;
		lstColumnList.FontSize = 9, ;
		lstColumnList.Height = 314, ;
		lstColumnList.Left = 0, ;
		lstColumnList.Name = "lstColumnList", ;
		lstColumnList.RowSource = "", ;
		lstColumnList.RowSourceType = 5, ;
		lstColumnList.Top = 0, ;
		lstColumnList.Width = 653
		*< END OBJECT: ClassLib="cmgadget.vcx" BaseClass="container" />

	ADD OBJECT 'pgfPageFrame.pagUsers.cntUsers' AS cntadjustablelist WITH ;
		ccolumnheadings = Username,FullName,Description, ;
		creposition = Vstretch,Hstretch, ;
		Height = 314, ;
		Left = 7, ;
		Name = "cntUsers", ;
		Top = 8, ;
		Width = 653, ;
		lstColumnList.ColumnCount = 3, ;
		lstColumnList.ColumnWidths = "80,160,500", ;
		lstColumnList.creposition = Vstretch,Hstretch, ;
		lstColumnList.FontBold = .F., ;
		lstColumnList.FontSize = 9, ;
		lstColumnList.Height = 312, ;
		lstColumnList.Left = 5, ;
		lstColumnList.Name = "lstColumnList", ;
		lstColumnList.RowSource = "", ;
		lstColumnList.RowSourceType = 5, ;
		lstColumnList.Top = 2, ;
		lstColumnList.Width = 648
		*< END OBJECT: ClassLib="cmgadget.vcx" BaseClass="container" />
	
	PROCEDURE afterload
		  * Need administrator or developer privilege to edit secutiry keys.
		  IF ISNULL(THIS.oSecurity) OR (NOT THIS.oSecurity.HasPrivilege('Administrator') ;
		  AND NOT THIS.oSecurity.HasPrivilege('Developer'))
		    THIS.DisplayMessage('%msgNoPrivilege')
		    RETURN .F.
		  ENDIF
		  RETURN .T.
		
	ENDPROC

	PROCEDURE Init
		* Set minimum form dimensions based on initial size.
		*THIS.MinWidth = THISFORM.Width - 40
		*THIS.MinHeight = THISFORM.Height
		
		* Put the initial focus to the listbox
		THIS.SetNextControl(THIS.pgfPageFrame.pagUsers.cntUsers.lstColumnList)
		
		RETURN DODEFAULT()
		
	ENDPROC

	PROCEDURE cntButtons.cmdAdd.Click
		LOCAL oEditor, oList, oUser, cName, cValue, cDescription
		
		IF THISFORM.pgfPageFrame.Activepage = 1
		  m.oList = THISFORM.pgfPageFrame.pagUsers.cntUsers.lstColumnList
		  m.oEditor = CreateLocalized(THISFORM.oSecurity.cUserEditorClass, '', '', '')
		  IF VARTYPE(m.oEditor) = 'O'
		    m.oEditor.Show()
		
		    * If changes were accepted, create a new registry key for the user.
		    IF VARTYPE(m.oEditor) = 'O' AND m.oEditor.uValue
		      m.cName = m.oEditor.cUsername
		      THISFORM.oRegistry.SetKeyValueEx('Security.Users.' + m.cName,,,'Username', ;
		                                       m.oEditor.cUserKeyValue, m.oEditor.cDescription, KEY_ACCESS_ADMIN)
		
		      * Unpack user details so we can update the list display.
		      m.oUser = CREATEOBJECT('cmUsernameValue')
		      m.oUser.Scatter(m.oEditor.cUserKeyValue, m.cName)
		
		      * Add the new user to the display listbox.
		      IF NOT EMPTY(THISFORM.aUsers[1,1])
		        DIMENSION THISFORM.aUsers[ALEN(THISFORM.aUsers, 1) + 1, 3]
		      ENDIF
		      THISFORM.aUsers[ALEN(THISFORM.aUsers, 1), 1] = m.cName
		      THISFORM.aUsers[ALEN(THISFORM.aUsers, 1), 2] = m.oUser.cFullName
		      THISFORM.aUsers[ALEN(THISFORM.aUsers, 1), 3] = m.oEditor.cDescription
		      m.oList.RowSource = 'THISFORM.aUsers'
		      m.oList.ListIndex = ALEN(THISFORM.aUsers, 1)
		    ENDIF
		  ENDIF
		ELSE
		  m.oList = THISFORM.pgfPageFrame.pagGroups.cntGroups.lstColumnList
		  m.oEditor = CreateLocalized(THISFORM.oSecurity.cGroupEditorClass, '', '', '', '')
		  IF VARTYPE(m.oEditor) = 'O'
		    m.oEditor.Show()
		
		    * If changes were accepted, create a new registry key for the group.
		    IF VARTYPE(m.oEditor) = 'O' AND m.oEditor.uValue
		      THISFORM.oRegistry.SetKeyValueEx('Security.Groups.' + m.oEditor.cGroupName,,,'Group', ;
		                                       m.oEditor.cGroupKeyValue, m.oEditor.cDescription, KEY_ACCESS_ADMIN)
		
		      * Add the new group to the display listbox.
		      IF NOT EMPTY(THISFORM.aGroups[1,1])
		        DIMENSION THISFORM.aGroups[ALEN(THISFORM.aGroups, 1) + 1, 3]
		      ENDIF
		      THISFORM.aGroups[ALEN(THISFORM.aGroups, 1), 1] = m.oEditor.cGroupName
		      THISFORM.aGroups[ALEN(THISFORM.aGroups, 1), 2] = m.oEditor.cDescription
		      THISFORM.aGroups[ALEN(THISFORM.aGroups, 1), 3] = m.oEditor.cGroupName
		      m.oList.RowSource = 'THISFORM.aGroups'
		      m.oList.ListIndex = ALEN(THISFORM.aGroups, 1)
		    ENDIF
		  ENDIF
		ENDIF
		m.oList.SetFocus()
		
	ENDPROC

	PROCEDURE cntButtons.cmdDelete.Click
		LOCAL oList, oUser, cName, cValue
		
		IF THISFORM.pgfPageFrame.Activepage = 1
		  m.oList = THISFORM.pgfPageFrame.pagUsers.cntUsers.lstColumnList
		  IF m.oList.ListIndex > 0 AND NOT EMPTY(THISFORM.aUsers[1,1])
		    m.cName = THISFORM.aUsers[m.oList.ListIndex, 1]
		    IF  THISFORM.oMessage.Confirm('%MsgConfirmDeleteParam', m.cName)
		      * Delete all key replications for this user, and the user key itself.
		      THISFORM.oRegistry.DeleteGlobalKey('Security.Users.' + m.cName)
		
		      * Then remove the user from the list box display.
		      IF ALEN(THISFORM.aUsers, 1) > 1
		        =ADEL(THISFORM.aUsers, m.oList.ListIndex)
		        DIMENSION THISFORM.aUsers[ALEN(THISFORM.aUsers, 1) - 1, 3]
		        m.oList.ListIndex = MIN(m.oList.ListIndex, ALEN(THISFORM.aUsers, 1))
		      ELSE
		        THISFORM.aUsers = ''
		      ENDIF
		      m.oList.RowSource = 'THISFORM.aUsers'
		    ENDIF
		  ENDIF
		ELSE
		  m.oList = THISFORM.pgfPageFrame.pagGroups.cntGroups.lstColumnList
		  IF m.oList.ListIndex > 0 AND NOT EMPTY(THISFORM.aGroups[1,1])
		    m.cName = THISFORM.aGroups[m.oList.ListIndex, 3]
		    IF  THISFORM.oMessage.Confirm('%msgConfirmDeleteParam', THISFORM.aGroups[m.oList.ListIndex, 1]) ;
		    AND THISFORM.oRegistry.DeleteGlobalKey('Security.Groups.' + m.cName)
		      * Remove the group from the list box display.
		      IF ALEN(THISFORM.aGroups, 1) > 1
		        =ADEL(THISFORM.aGroups, m.oList.ListIndex)
		        DIMENSION THISFORM.aGroups[ALEN(THISFORM.aGroups, 1) - 1, 3]
		        m.oList.ListIndex = MIN(m.oList.ListIndex, ALEN(THISFORM.aGroups, 1))
		      ELSE
		        THISFORM.aGroups = ''
		      ENDIF
		      m.oList.RowSource = 'THISFORM.aGroups'
		    ENDIF
		  ENDIF
		ENDIF
		m.oList.SetFocus()
		
	ENDPROC

	PROCEDURE cntButtons.cmdDelete.Refresh
		IF THISFORM.pgfPageFrame.Activepage = 1
		  THIS.Enabled = NOT EMPTY(THISFORM.aUsers[1,1]) AND THISFORM.pgfPageFrame.pagUsers.cntUsers.lstColumnList.ListIndex > 0
		ELSE
		  THIS.Enabled = NOT EMPTY(THISFORM.aGroups[1,1]) AND THISFORM.pgfPageFrame.pagGroups.cntGroups.lstColumnList.ListIndex > 0
		ENDIF
		
	ENDPROC

	PROCEDURE cntButtons.cmdEdit.Click
		LOCAL oEditor, oList, oUser, cName, cValue, cDescription
		
		IF THISFORM.pgfPageFrame.Activepage = 1
		  m.oList = THISFORM.pgfPageFrame.pagUsers.cntUsers.lstColumnList
		  IF m.oList.ListIndex > 0 AND NOT EMPTY(THISFORM.aUsers[1,1])
		    m.cName = THISFORM.aUsers[m.oList.ListIndex, 1]
		    IF THISFORM.oRegistry.GetKeyValueEx('Security.Users.' + m.cName,,, @m.cValue, @m.cDescription)
		      m.oEditor = CreateLocalized(THISFORM.oSecurity.cUserEditorClass, m.cValue, m.cName, m.cDescription)
		      IF VARTYPE(m.oEditor) = 'O'
		        m.oEditor.Show()
		
		        * If changes were made, copy modified values back to registry key properties.
		        IF VARTYPE(m.oEditor) = 'O' AND m.oEditor.uValue
		          THISFORM.oRegistry.SetKeyValueEx('Security.Users.' + m.cName,,,'Username', m.oEditor.cUserKeyValue, m.oEditor.cDescription)
		          m.oUser = CREATEOBJECT('cmUsernameValue')
		          m.oUser.Scatter(m.oEditor.cUserKeyValue, m.cName)
		          THISFORM.aUsers[m.oList.ListIndex, 2] = m.oUser.cFullName
		          THISFORM.aUsers[m.oList.ListIndex, 3] = m.oEditor.cDescription
		        ENDIF
		      ENDIF
		    ENDIF
		  ENDIF
		ELSE
		  m.oList = THISFORM.pgfPageFrame.pagGroups.cntGroups.lstColumnList
		  IF m.oList.ListIndex > 0 AND NOT EMPTY(THISFORM.aGroups[1,1])
		    m.cName = THISFORM.aGroups[m.oList.ListIndex, 3]   && key name is in column 3
		    IF THISFORM.oRegistry.GetKeyValueEx('Security.Groups.' + m.cName,,, @m.cValue, @m.cDescription)
		      m.oEditor = CreateLocalized(THISFORM.oSecurity.cGroupEditorClass, ;
		                                m.cValue, THISFORM.aGroups[m.oList.ListIndex, 1], m.cDescription, m.cName)
		      IF VARTYPE(m.oEditor) = 'O'
		        m.oEditor.Show()
		
		        * If changes were made, copy modified values back to registry key properties.
		        IF VARTYPE(m.oEditor) = 'O' AND m.oEditor.uValue
		          THISFORM.oRegistry.SetKeyValueEx('Security.Groups.' + m.cName,,,'Group', m.oEditor.cGroupKeyValue, m.oEditor.cDescription)
		          THISFORM.aGroups[m.oList.ListIndex, 2] = m.oEditor.cDescription
		        ENDIF
		      ENDIF
		    ENDIF
		  ENDIF
		ENDIF
		m.oList.SetFocus()
		
	ENDPROC

	PROCEDURE cntButtons.cmdEdit.Refresh
		IF THISFORM.pgfPageFrame.Activepage = 1
		  THIS.Enabled = NOT EMPTY(THISFORM.aUsers[1,1]) AND THISFORM.pgfPageFrame.pagUsers.cntUsers.lstColumnList.ListIndex > 0
		ELSE
		  THIS.Enabled = NOT EMPTY(THISFORM.aGroups[1,1]) AND THISFORM.pgfPageFrame.pagGroups.cntGroups.lstColumnList.ListIndex > 0
		ENDIF
		
	ENDPROC

	PROCEDURE Mwresize1.Init
		IF DODEFAULT()
		   this.Visible = .f.
		endif
	ENDPROC

	PROCEDURE Mwresize1.resetsize
		LPARAMETERS tnPercent
		return
	ENDPROC

	PROCEDURE Mwresize1.Resize
		LPARAMETERS toContainer
		return
	ENDPROC

	PROCEDURE pgfPageFrame.pagGroups.Activate
		LOCAL nIndex, cName, cLocName, cValue, cDescription, nAccess
		
		IF VARTYPE(THISFORM.aGroups[1,1]) != 'C'
		  DIMENSION THISFORM.aGroups[1,3]
		  THISFORM.aGroups = ''
		  m.nIndex = 0
		  DO WHILE THISFORM.oRegistry.EnumKeys('Security.Groups', 'Group', @m.nIndex, @m.cName, @m.cLocName, @m.cValue, @m.cDescription, @m.nAccess) > 0
		    IF m.nAccess != KEY_ACCESS_DEVELOPER OR THISFORM.oSecurity.HasPrivilege('Developer')
		      m.cName = SUBSTR(m.cName, RAT('.', m.cName) + 1)
		      IF NOT EMPTY(THISFORM.aGroups[1,1])
		        DIMENSION THISFORM.aGroups[ALEN(THISFORM.aGroups, 1) + 1, 3]
		      ENDIF
		
		      * Group names can be localized. Display localized name, but keep real name for lookup.
		      THISFORM.aGroups[ALEN(THISFORM.aGroups, 1), 1] = m.cLocName
		      THISFORM.aGroups[ALEN(THISFORM.aGroups, 1), 2] = m.cDescription
		      THISFORM.aGroups[ALEN(THISFORM.aGroups, 1), 3] = m.cName
		    ENDIF
		  ENDDO
		  THIS.cntGroups.lstColumnList.RowSource = 'THISFORM.aGroups'
		ENDIF
		
	ENDPROC

	PROCEDURE pgfPageFrame.pagGroups.cntGroups.lstColumnList.Click
		THISFORM.cntButtons.Refresh()
		
	ENDPROC

	PROCEDURE pgfPageFrame.pagGroups.cntGroups.lstColumnList.contextmenubuild
		* Add default context menu bars first
		DODEFAULT()
		
		* Then bars specific to this instance
		THISFORM.ContextMenuBar(CTX_BAR_CUSTOM, '\-')
		THISFORM.ContextMenuBar(CTX_BAR_CUSTOM + 1, '%barAddGroup')
		IF THIS.ListIndex > 0
		  THISFORM.ContextMenuBar(CTX_BAR_CUSTOM + 2, '%barEditGroup', TRIM(THIS.list[THIS.ListIndex]))
		  THISFORM.ContextMenuBar(CTX_BAR_CUSTOM + 3, '%barDeleteGroup', TRIM(THIS.list[THIS.ListIndex]))
		ENDIF
		
	ENDPROC

	PROCEDURE pgfPageFrame.pagGroups.cntGroups.lstColumnList.contextmenuexecute
		LPARAMETER cOption
		  m.cOption = PROPER(m.cOption)
		
		  DO CASE
		    CASE m.cOption = '%baraddgroup'
		      THISFORM.cntButtons.cmdAdd.Click()
		    CASE m.cOption = '%bareditgroup'
		      THISFORM.cntButtons.cmdEdit.Click()
		    CASE m.cOption = '%bardeletegroup'
		      THISFORM.cntButtons.cmdDelete.Click()
		    OTHERWISE
		      * Process default context menu bars
		      DODEFAULT(m.cOption)
		  ENDCASE
		
	ENDPROC

	PROCEDURE pgfPageFrame.pagGroups.cntGroups.lstColumnList.DblClick
		THISFORM.cntButtons.cmdEdit.Click()
		
	ENDPROC

	PROCEDURE pgfPageFrame.pagGroups.cntGroups.lstColumnList.GotFocus
		THISFORM.cntButtons.Refresh()
		
	ENDPROC

	PROCEDURE pgfPageFrame.pagGroups.cntGroups.lstColumnList.MouseUp
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		THISFORM.cntButtons.Refresh()
		
	ENDPROC

	PROCEDURE pgfPageFrame.pagGroups.cntGroups.lstColumnList.When
		THISFORM.cntButtons.Refresh()
		
	ENDPROC

	PROCEDURE pgfPageFrame.pagGroups.RightClick
		THIS.Parent.RightClick(.T.)
		
	ENDPROC

	PROCEDURE pgfPageFrame.pagUsers.Activate
		LOCAL nIndex, cName, cValue, cDescription, oUser, nAccess
		
		IF VARTYPE(THISFORM.aUsers[1,1]) != 'C'
		  DIMENSION THISFORM.aUsers[1,3]
		  THISFORM.aUsers = ''
		  m.oUser = CREATEOBJECT('cmUsernameValue')
		
		  * We cannot access registry keys during the Enum call, so we need to 
		  * pre-load template value in case Scatter() method needs to access it.
		  m.oUser.LoadTemplateUser()
		
		  m.nIndex = 0
		  DO WHILE THISFORM.oRegistry.EnumKeys('Security.Users', 'Username', @m.nIndex, @m.cName, , @m.cValue, @m.cDescription, @m.nAccess) > 0
		    IF m.nAccess != KEY_ACCESS_DEVELOPER OR THISFORM.oSecurity.HasPrivilege('Developer')
		      IF m.oUser.Scatter(m.cValue, m.cName)
		        IF NOT EMPTY(THISFORM.aUsers[1,1])
		          DIMENSION THISFORM.aUsers[ALEN(THISFORM.aUsers, 1) + 1, 3]
		        ENDIF
		        THISFORM.aUsers[ALEN(THISFORM.aUsers, 1), 1] = SUBSTR(m.cName, RAT('.', m.cName) + 1)
		        THISFORM.aUsers[ALEN(THISFORM.aUsers, 1), 2] = m.oUser.cFullName
		        THISFORM.aUsers[ALEN(THISFORM.aUsers, 1), 3] = m.cDescription
		      ENDIF
		    ENDIF
		  ENDDO
		  THIS.cntUsers.lstColumnList.RowSource = 'THISFORM.aUsers'
		ENDIF
		
	ENDPROC

	PROCEDURE pgfPageFrame.pagUsers.cntUsers.lstColumnList.Click
		THISFORM.cntButtons.Refresh()
		
	ENDPROC

	PROCEDURE pgfPageFrame.pagUsers.cntUsers.lstColumnList.contextmenubuild
		* Add default context menu bars first
		DODEFAULT()
		
		* Then bars specific to this instance
		THISFORM.ContextMenuBar(CTX_BAR_CUSTOM, '\-')
		THISFORM.ContextMenuBar(CTX_BAR_CUSTOM + 1, '%barAddUser')
		IF THIS.ListIndex > 0
		  THISFORM.ContextMenuBar(CTX_BAR_CUSTOM + 2, '%barEditUser', TRIM(THIS.list[THIS.ListIndex]))
		  THISFORM.ContextMenuBar(CTX_BAR_CUSTOM + 3, '%barDeleteUser', TRIM(THIS.list[THIS.ListIndex]))
		ENDIF
		
	ENDPROC

	PROCEDURE pgfPageFrame.pagUsers.cntUsers.lstColumnList.contextmenuexecute
		LPARAMETER cOption
		  m.cOption = PROPER(m.cOption)
		
		  DO CASE
		    CASE m.cOption = '%baradduser'
		      THISFORM.cntButtons.cmdAdd.Click()
		    CASE m.cOption = '%baredituser'
		      THISFORM.cntButtons.cmdEdit.Click()
		    CASE m.cOption = '%bardeleteuser'
		      THISFORM.cntButtons.cmdDelete.Click()
		    OTHERWISE
		      * Process default context menu bars
		      DODEFAULT(m.cOption)
		  ENDCASE
		
	ENDPROC

	PROCEDURE pgfPageFrame.pagUsers.cntUsers.lstColumnList.DblClick
		THISFORM.cntButtons.cmdEdit.Click()
		
	ENDPROC

	PROCEDURE pgfPageFrame.pagUsers.cntUsers.lstColumnList.GotFocus
		THISFORM.cntButtons.Refresh()
		
	ENDPROC

	PROCEDURE pgfPageFrame.pagUsers.cntUsers.lstColumnList.MouseUp
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		THISFORM.cntButtons.Refresh()
		
	ENDPROC

	PROCEDURE pgfPageFrame.pagUsers.cntUsers.sortcolumn
		LPARAMETER nColumn
		
		  =ASORT(THISFORM.aUsers, m.nColumn)
		  THIS.lstColumnList.ListIndex = 1
		  THIS.lstColumnList.Refresh
		
	ENDPROC

	PROCEDURE pgfPageFrame.pagUsers.RightClick
		THIS.Parent.RightClick(.T.)
		
	ENDPROC

ENDDEFINE

DEFINE CLASS frmeventviewer AS frmformcustom OF "..\custom\cforms.vcx" 		&& CodeMine Event Log Viewer form.
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="cntButtons" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntButtons.cmdOK" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntButtons.cmdVerify" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Pgfpageframecustom1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgrid" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgrid.Column1.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgrid.Column1.Txttextbox1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgrid.Column2.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgrid.Column2.Txttextbox1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgrid.Column3.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgrid.Column3.Txttextbox1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgrid.Column4.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgrid.Column4.Txttextbox1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgrid.Column5.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgrid.Column5.Txttextbox1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgrid.Column6.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grdgrid.Column6.txtLocation" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="edtDetails" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Shpsplitterbar1" UniqueID="" Timestamp="" />

	#INCLUDE "codemine.h"
	*<DefinedPropArrayMethod>
		*m: refreshdata
		*m: verifylog		&& Verify event log entries
	*</DefinedPropArrayMethod>

	Caption = "Application Event log"
	cdataenvironment = cmDataEnvironment
	copenprivilege = Administrator,Developer,View Event Log
	cversion = 2.0.0
	DataSession = 2
	DoCreate = .T.
	Height = 303
	Icon = ..\graphics\crdfle07.ico
	lrememberposition = .T.
	lremembersize = .T.
	MinButton = .F.
	MinHeight = (THIS.Height)
	MinWidth = (THIS.Width)
	Name = "frmeventviewer"
	omessage = .NULL.
	oregistry = .NULL.
	osecurity = .NULL.
	Width = 615

	ADD OBJECT 'cntButtons' AS cntcontainercustom WITH ;
		BackStyle = 0, ;
		BorderWidth = 0, ;
		creposition = Hcenter,Vfollow, ;
		Height = 24, ;
		Left = 225, ;
		Name = "cntButtons", ;
		SpecialEffect = 2, ;
		Top = 271, ;
		Width = 165
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="container" />

	ADD OBJECT 'cntButtons.cmdOK' AS cmdcommandbuttoncustom WITH ;
		Cancel = .T., ;
		Caption = "Close", ;
		Left = 87, ;
		Name = "cmdOK", ;
		Top = 1
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cntButtons.cmdVerify' AS cmdcommandbuttoncustom WITH ;
		Caption = "Verify Log", ;
		Left = 3, ;
		Name = "cmdVerify", ;
		Top = 1
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'edtDetails' AS edteditboxcustom WITH ;
		ControlSource = "cmEventlog.comment", ;
		creposition = vStretch,hStretch, ;
		Height = 38, ;
		IntegralHeight = .F., ;
		Left = 20, ;
		Name = "edtDetails", ;
		ReadOnly = .T., ;
		Top = 212, ;
		Width = 574
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="editbox" />

	ADD OBJECT 'Grdgrid' AS grdgridcustom WITH ;
		ColumnCount = 6, ;
		creadonlydisplay = Normal, ;
		creposition = Hstretch, ;
		DeleteMark = .F., ;
		FontBold = .F., ;
		FontSize = 9, ;
		GridLineColor = 192,192,192, ;
		GridLines = 2, ;
		Height = 163, ;
		Left = 20, ;
		Name = "Grdgrid", ;
		Panel = 1, ;
		Partition = 0, ;
		ReadOnly = .T., ;
		RecordMark = .F., ;
		RecordSource = "cmEventlog", ;
		RecordSourceType = 1, ;
		RowHeight = 18, ;
		ScrollBars = 2, ;
		SplitBar = .F., ;
		Top = 46, ;
		Width = 574, ;
		Column1.ColumnOrder = 1, ;
		Column1.ControlSource = "serialno", ;
		Column1.FontBold = .F., ;
		Column1.FontSize = 9, ;
		Column1.Name = "Column1", ;
		Column1.ReadOnly = .T., ;
		Column1.Width = 34, ;
		Column2.ColumnOrder = 2, ;
		Column2.ControlSource = "eventtype", ;
		Column2.FontBold = .F., ;
		Column2.FontSize = 9, ;
		Column2.Name = "Column2", ;
		Column2.ReadOnly = .T., ;
		Column2.Width = 72, ;
		Column3.ColumnOrder = 3, ;
		Column3.ControlSource = "username", ;
		Column3.FontBold = .F., ;
		Column3.FontSize = 9, ;
		Column3.Name = "Column3", ;
		Column3.ReadOnly = .T., ;
		Column3.Width = 74, ;
		Column4.ColumnOrder = 4, ;
		Column4.ControlSource = "eventname", ;
		Column4.FontBold = .F., ;
		Column4.FontSize = 9, ;
		Column4.Name = "Column4", ;
		Column4.ReadOnly = .T., ;
		Column4.Width = 94, ;
		Column5.ColumnOrder = 5, ;
		Column5.ControlSource = "time", ;
		Column5.FontBold = .F., ;
		Column5.FontSize = 9, ;
		Column5.Name = "Column5", ;
		Column5.ReadOnly = .T., ;
		Column5.Width = 137, ;
		Column6.ColumnOrder = 6, ;
		Column6.ControlSource = '"<Unavailable>"', ;
		Column6.FontBold = .F., ;
		Column6.FontSize = 9, ;
		Column6.Name = "Column6", ;
		Column6.ReadOnly = .T., ;
		Column6.Width = 137
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="grid" />

	ADD OBJECT 'Grdgrid.Column1.Header1' AS header WITH ;
		Caption = "Seq #", ;
		FontBold = .F., ;
		FontSize = 9, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'Grdgrid.Column1.Txttextbox1' AS txttextboxcustom WITH ;
		Left = 18, ;
		Margin = 0, ;
		Name = "Txttextbox1", ;
		Top = 60
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'Grdgrid.Column2.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "Event Type", ;
		FontBold = .F., ;
		FontSize = 9, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'Grdgrid.Column2.Txttextbox1' AS txttextboxcustom WITH ;
		Left = 28, ;
		Margin = 0, ;
		Name = "Txttextbox1", ;
		ReadOnly = .T., ;
		Top = 72
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'Grdgrid.Column3.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "User", ;
		FontBold = .F., ;
		FontSize = 9, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'Grdgrid.Column3.Txttextbox1' AS txttextboxcustom WITH ;
		Left = 36, ;
		Margin = 0, ;
		Name = "Txttextbox1", ;
		ReadOnly = .T., ;
		Top = 75
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'Grdgrid.Column4.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "Event", ;
		FontBold = .F., ;
		FontSize = 9, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'Grdgrid.Column4.Txttextbox1' AS txttextboxcustom WITH ;
		Left = 30, ;
		Margin = 0, ;
		Name = "Txttextbox1", ;
		ReadOnly = .T., ;
		Top = 87
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'Grdgrid.Column5.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "Time", ;
		FontBold = .F., ;
		FontSize = 9, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'Grdgrid.Column5.Txttextbox1' AS txttextboxcustom WITH ;
		FontBold = .F., ;
		Left = 61, ;
		lnativebinding = .T., ;
		Margin = 0, ;
		Name = "Txttextbox1", ;
		ReadOnly = .T., ;
		Top = 87
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'Grdgrid.Column6.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "Location", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'Grdgrid.Column6.txtLocation' AS txttextboxcustom WITH ;
		FontBold = .F., ;
		Left = 50, ;
		Margin = 0, ;
		Name = "txtLocation", ;
		ReadOnly = .F., ;
		Top = 87
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'Pgfpageframecustom1' AS pgfpageframecustom WITH ;
		creposition = hStretch,vStretch, ;
		ErasePage = .T., ;
		Height = 256, ;
		Left = 6, ;
		Name = "Pgfpageframecustom1", ;
		PageCount = 5, ;
		TabStyle = 1, ;
		Top = 5, ;
		Width = 603, ;
		Page1.Caption = "All", ;
		Page1.Name = "Page1", ;
		Page2.Caption = "Security", ;
		Page2.Name = "Page2", ;
		Page3.Caption = "Registry", ;
		Page3.Name = "Page3", ;
		Page4.Caption = "Errors", ;
		Page4.Name = "Page4", ;
		Page5.Caption = "Other", ;
		Page5.Name = "Page5"
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="pageframe" />

	ADD OBJECT 'Shpsplitterbar1' AS shpsplitterbar WITH ;
		cleftpane = grdGrid, ;
		creposition = hStretch, ;
		crightpane = edtDetails, ;
		Height = 4, ;
		Left = 19, ;
		Name = "Shpsplitterbar1", ;
		nminleft = 60, ;
		nminright = 40, ;
		Top = 208, ;
		Width = 575
		*< END OBJECT: ClassLib="cmgadget.vcx" BaseClass="shape" />
	
	PROCEDURE Activate
		* Update the log display when our window is activated.
		THISFORM.grdGrid.Refresh()
		
	ENDPROC

	PROCEDURE afterload
		*++
		* Event log viewer form class.
		*--
		  THIS.oCDE.AddCursor('cmEventLog', 'cmEventLogCursor')
		  WITH THIS.oCDE.cmEventLog
		    .lNoDataOnLoad = .F.
		    IF NOT .Open()
		      THIS.DisplayMessage('%msgEventLogMissing')
		      RETURN .F.
		    ENDIF
		
		    * If there is an index tag for Time, use it.
		    IF TAGNO('SerialNo') > 0
		      .SetOrder('SerialNo', 'Desc')
		    ENDIF
		  ENDWITH
		
		  * Add an instance of the authentication object to validate the event records.
		  THIS.AddObject('cmAuthentication', 'cmAuthentication')
		
	ENDPROC

	PROCEDURE initsession
		* We have a private datasession, so no need to preserve old settings.
		  SET TALK OFF
		  SET MEMOWIDTH TO 256
		  SET DELETE ON
		  SET DECIMALS TO 6
		  SET CENTURY ON
		  RETURN DODEFAULT()
		
	ENDPROC

	PROCEDURE refreshdata
		LOCAL cFilter
		
		* Requery the local cursor if the eventlog is a remote view.
		WITH THIS.oCDE.cmEventlog
		  IF .cType != 'Table'
		    THIS.grdGrid.SaveLayout()
		    m.cFilter = .GetFilter()
		    .Requery()
		    .SetFilter(m.cFilter)
		    THIS.grdGrid.RestoreLayout()
		  ENDIF
		ENDWITH
		THIS.Refresh()
		
	ENDPROC

	PROCEDURE verifylog		&& Verify event log entries
		LOCAL nLastSerial, nErrors, nRecno, cFilter
		
		  SELECT cmEventLog
		  m.cFilter = FILTER()
		  SET FILTER TO
		  GO TOP
		
		  m.nErrors = 0
		  m.nLastSerial = serialno
		  SCAN FOR NOT DELETED()
		    IF serialNo != m.nLastSerial
		      m.nRecno = RECNO()
		      m.nErrors = m.nErrors + 1
		      IF NOT THISFORM.DisplayMessage('%MsgElogMissingRecord', m.nLastSerial + 1)
		        EXIT
		      ENDIF
		      m.nLastSerial = serialNo
		    ENDIF
		
		    IF checksum != THISFORM.cmAuthentication.AuthenticateEvent()
		      m.nRecno = RECNO()
		      m.nErrors = m.nErrors + 1
		      IF NOT THISFORM.DisplayMessage('%MsgElogTampered', serialNo)
		        EXIT
		      ENDIF
		    ENDIF
		    m.nLastSerial = m.nLastSerial - 1
		  ENDSCAN
		
		  IF m.nErrors = 0
		    THISFORM.DisplayMessage('%MsgElogNoError')
		  ELSE
		    THISFORM.DisplayMessage('%MsgElogErrors', m.nErrors)
		  ENDIF
		
		  SET FILTER TO &cFilter
		  IF EMPTY(m.nRecno)
		    GOTO TOP
		  ELSE
		    GOTO m.nRecno
		  ENDIF
		  THISFORM.grdGrid.Setfocus()
		  RETURN .T.
		
	ENDPROC

	PROCEDURE cntButtons.cmdOK.Click
		THISFORM.Release()
		
	ENDPROC

	PROCEDURE cntButtons.cmdVerify.Click
		THISFORM.VerifyLog()
		DODEFAULT()
		
	ENDPROC

	PROCEDURE Grdgrid.afterrowchange
		THISFORM.edtDetails.Refresh()
		
	ENDPROC

	PROCEDURE Grdgrid.Column1.Header1.Click
		THIS.Parent.Parent.HeaderClick(THIS.Parent, 'SerialNo')
		
	ENDPROC

	PROCEDURE Grdgrid.Column2.Header1.Click
		THIS.Parent.Parent.HeaderClick(THIS.Parent, 'EventType')
		
	ENDPROC

	PROCEDURE Grdgrid.Column3.Header1.Click
		THIS.Parent.Parent.HeaderClick(THIS.Parent, 'Username')
		
	ENDPROC

	PROCEDURE Grdgrid.Column4.Header1.Click
		THIS.Parent.Parent.HeaderClick(THIS.Parent, 'EventName')
		
	ENDPROC

	PROCEDURE Grdgrid.Column5.Header1.Click
		THIS.Parent.Parent.HeaderClick(THIS.Parent, 'SerialNo')
		
	ENDPROC

	PROCEDURE Grdgrid.Column6.Header1.Click
		IF TYPE('cmEventLog.EventWhere') = 'C'
		  THIS.Parent.Parent.HeaderClick(THIS.Parent, 'EventWhere')
		ELSE
		  THIS.Parent.Parent.HeaderClick(THIS.Parent, 'Where')
		ENDIF
		
	ENDPROC

	PROCEDURE Grdgrid.headerclick
		LPARAMETERS oColumn, cField
		LOCAL ix, nRecno
		
		  * Change the display order of the local cursor in the grid
		  IF THISFORM.FlushControlBuffer()
		    SELECT (THIS.RecordSource)
		    nRecno = RECNO()
		    IF TAGNO(m.cField) = 0
		      INDEX ON &cField TAG (m.cField)
		    ENDIF
		    SET ORDER TO TAG (m.cField)
		    GOTO (m.nRecno)
		    THIS.Refresh()
		    m.oColumn.SetFocus()
		  ENDIF
		
		  * Highlight the sort column color
		  FOR ix = 1 TO THIS.ColumnCount
		    IF THIS.Columns[m.ix].ColumnOrder == m.oColumn.ColumnOrder
		      THIS.Columns[m.ix].Header1.Fontbold = .T.
		    ELSE
		      THIS.Columns[m.ix].Header1.Fontbold = .F.
		    ENDIF
		  ENDFOR
		
	ENDPROC

	PROCEDURE Grdgrid.Init
		* There are a number of optional field and naming options depending on the version of the table.
		IF FCOUNT('cmEventLog') > 7
		  IF TYPE('cmEventlog.where') != 'U'
		    THIS.Column6.ControlSource = 'cmEventlog.Where'
		  ELSE
		    THIS.Column6.ControlSource = 'cmEventlog.EventWhere'
		  ENDIF
		ENDIF
		IF TYPE('cmEventlog.Time') != 'U'
		  THIS.Column5.ControlSource = 'cmEventlog.Time'
		ELSE
		  THIS.Column5.ControlSource = 'cmEventlog.EventTime'
		ENDIF
		
		RETURN DODEFAULT()
		
	ENDPROC

	PROCEDURE Pgfpageframecustom1.afterpagechange
		LPARAMETERS nPageIx
		
		  SELECT cmEventlog
		
		  DO CASE
		    CASE m.nPageIx = 1
		      SET FILTER TO
		    CASE m.nPageIx = 2
		      SET FILTER TO eventtype = EVENT_TYPE_SECURITY
		    CASE m.nPageIx = 3
		      SET FILTER TO eventtype = EVENT_TYPE_REGISTRY
		    CASE m.nPageIx = 4
		      SET FILTER TO eventtype = EVENT_TYPE_ERROR
		    CASE m.nPageIx = 5
		      SET FILTER TO eventtype != EVENT_TYPE_SECURITY AND eventtype != EVENT_TYPE_REGISTRY AND eventtype != EVENT_TYPE_ERROR
		  ENDCASE
		
		  GO TOP
		  THISFORM.Refresh()
		
	ENDPROC

	PROCEDURE Pgfpageframecustom1.Page1.RightClick
		THIS.Parent.RightClick(.T.)
		
	ENDPROC

	PROCEDURE Pgfpageframecustom1.Page2.RightClick
		THIS.Parent.RightClick(.T.)
		
	ENDPROC

	PROCEDURE Pgfpageframecustom1.Page3.RightClick
		THIS.Parent.RightClick(.T.)
		
	ENDPROC

	PROCEDURE Pgfpageframecustom1.Page4.RightClick
		THIS.Parent.RightClick(.T.)
		
	ENDPROC

	PROCEDURE Pgfpageframecustom1.Page5.RightClick
		THIS.Parent.RightClick(.T.)
		
	ENDPROC

	PROCEDURE Shpsplitterbar1.aftermove
		* Don't let the form shrink below where we are located.
		THISFORM.MinHeight = MAX(THIS.Top + THIS.nMinRight + 55, THISFORM.nOriginalHeight)
		
	ENDPROC

ENDDEFINE

DEFINE CLASS frmgetpassword AS frmmodaldialogcustom OF "..\custom\cforms.vcx" 		&& Get Password dialog
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="txtPassword" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblPassword" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Image1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblPrompt" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cntokcancel1" UniqueID="" Timestamp="" />

	#INCLUDE "codemine.h"
	*<DefinedPropArrayMethod>
		*p: cpassword		&& Password string entered
	*</DefinedPropArrayMethod>

	BorderStyle = 2
	Caption = "Password Required"
	cpassword = 		&& Password string entered
	Desktop = .T.
	DoCreate = .T.
	Height = 141
	lreleaseonclose = .F.
	Name = "frmgetpassword"
	omessage = .NULL.
	ostring = .F.
	ShowWindow = 1
	Width = 360
	WindowType = 1

	ADD OBJECT 'Cntokcancel1' AS cntokcancelcustom WITH ;
		BackStyle = 0, ;
		Left = 98, ;
		Name = "Cntokcancel1", ;
		Top = 107, ;
		cmdcancel.Name = "cmdcancel", ;
		cmdok.Name = "cmdok"
		*< END OBJECT: ClassLib="..\custom\cbutton.vcx" BaseClass="container" />

	ADD OBJECT 'Image1' AS image WITH ;
		BackStyle = 0, ;
		Height = 32, ;
		Left = 12, ;
		Name = "Image1", ;
		Picture = ..\graphics\secur05.bmp, ;
		Top = 8, ;
		Width = 32
		*< END OBJECT: BaseClass="image" />

	ADD OBJECT 'lblPassword' AS lblfieldlabelcustom WITH ;
		Caption = "Password:", ;
		FontBold = .F., ;
		Height = 16, ;
		Left = 35, ;
		Name = "lblPassword", ;
		TabIndex = 2, ;
		Top = 63, ;
		Width = 55
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblPrompt' AS lbltextcustom WITH ;
		AutoSize = .F., ;
		Caption = "Please enter the required password now.", ;
		FontBold = .F., ;
		FontItalic = .T., ;
		Height = 37, ;
		Left = 62, ;
		Name = "lblPrompt", ;
		TabIndex = 1, ;
		Top = 8, ;
		Width = 286, ;
		WordWrap = .T.
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'txtPassword' AS txttextboxcustom WITH ;
		Format = "K", ;
		Height = 24, ;
		Left = 122, ;
		Name = "txtPassword", ;
		PasswordChar = "*", ;
		TabIndex = 3, ;
		Top = 60, ;
		Width = 173
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />
	
	PROCEDURE Init
		LPARAMETER cPrompt
		
		  * First parameter (optional) is prompt text to display in dialog.
		  IF NOT EMPTY(m.cPrompt)
		    THISFORM.lblPrompt.Caption = m.cPrompt
		  ENDIF
		  RETURN DODEFAULT()
		
	ENDPROC

	PROCEDURE saveallchanges
		THIS.uValue = .T.
		THIS.cPassWord = TRIM(THIS.txtPassword.Value)
		RETURN .T.
		
	ENDPROC

	PROCEDURE Cntokcancel1.cmdcancel.Click
		thisform.Release()
	ENDPROC

ENDDEFINE

DEFINE CLASS frmgroupeditor AS frmmodaldialogcustom OF "..\custom\cforms.vcx" 		&& Group properties editor.
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="edtDescription" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabel3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntGroup" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabel4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtGroupName" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cntokcancel1" UniqueID="" Timestamp="" />

	#INCLUDE "codemine.h"
	*<DefinedPropArrayMethod>
		*p: cdescription		&& Group description
		*p: cgroupkeyvalue		&& Pack value string for the group key
		*p: cgroupname		&& Group name
		*p: cgroupnamelocalized		&& Localized group name
		*p: leditname		&& Set true if allowed to edit name.
		*p: ogroup		&& Group properties object.
	*</DefinedPropArrayMethod>

	BorderStyle = 2
	Caption = "Group Properties "
	cdescription = 		&& Group description
	cgroupkeyvalue = 		&& Pack value string for the group key
	cgroupname = 		&& Group name
	cgroupnamelocalized = 		&& Localized group name
	Closable = .F.
	ControlBox = .F.
	Desktop = .T.
	DoCreate = .T.
	Height = 250
	Icon = ..\bec\
	lreleaseonclose = .F.
	lrememberposition = .T.
	MaxWidth = -1
	MinButton = .F.
	MinHeight = 160
	MinWidth = 300
	Name = "frmgroupeditor"
	omessage = .NULL.
	oregistry = .NULL.
	osecurity = .NULL.
	ostring = .NULL.
	ScaleMode = 3
	Width = 510

	ADD OBJECT 'cntGroup' AS cntlocalizedmover WITH ;
		BorderWidth = 2, ;
		Height = 126, ;
		Left = 11, ;
		Name = "cntGroup", ;
		SpecialEffect = 0, ;
		TabIndex = 5, ;
		Top = 83, ;
		Width = 489, ;
		cmdDeselect.Caption = "<< Remove", ;
		cmdDeselect.Height = 23, ;
		cmdDeselect.Left = 211, ;
		cmdDeselect.Name = "cmdDeselect", ;
		cmdDeselect.Top = 79, ;
		cmdDeselect.Width = 66, ;
		cmdDeselectAll.Left = 241, ;
		cmdDeselectAll.Name = "cmdDeselectAll", ;
		cmdDeselectAll.Top = 145, ;
		cmdSelect.Caption = "Grant >>", ;
		cmdSelect.Height = 23, ;
		cmdSelect.Left = 211, ;
		cmdSelect.Name = "cmdSelect", ;
		cmdSelect.Top = 44, ;
		cmdSelect.Width = 66, ;
		cmdSelectAll.Left = 133, ;
		cmdSelectAll.Name = "cmdSelectAll", ;
		cmdSelectAll.Top = 145, ;
		Lbllabel1.Caption = "Privileges not granted:", ;
		Lbllabel1.Height = 16, ;
		Lbllabel1.Left = 6, ;
		Lbllabel1.Name = "Lbllabel1", ;
		Lbllabel1.Top = 8, ;
		Lbllabel1.Width = 126, ;
		Lbllabel2.Caption = "Privileges granted:", ;
		Lbllabel2.Height = 16, ;
		Lbllabel2.Left = 281, ;
		Lbllabel2.Name = "Lbllabel2", ;
		Lbllabel2.Top = 8, ;
		Lbllabel2.Width = 104, ;
		lstSelected.DragIcon = ..\graphics\dragmove.cur, ;
		lstSelected.Height = 89, ;
		lstSelected.Left = 284, ;
		lstSelected.Name = "lstSelected", ;
		lstSelected.Top = 24, ;
		lstSelected.Width = 195, ;
		lstSource.DragIcon = ..\graphics\dragmove.cur, ;
		lstSource.Height = 89, ;
		lstSource.Left = 7, ;
		lstSource.Name = "lstSource", ;
		lstSource.Top = 24, ;
		lstSource.Width = 195
		*< END OBJECT: ClassLib="cmsecure.vcx" BaseClass="container" />

	ADD OBJECT 'Cntokcancel1' AS cntokcancelcustom WITH ;
		BackStyle = 0, ;
		Left = 173, ;
		Name = "Cntokcancel1", ;
		Top = 219, ;
		cmdCancel.Name = "cmdCancel", ;
		cmdOK.Name = "cmdOK"
		*< END OBJECT: ClassLib="..\custom\cbutton.vcx" BaseClass="container" />

	ADD OBJECT 'edtDescription' AS edteditboxcustom WITH ;
		cvaluesource = THISFORM.cDescription, ;
		FontSize = 9, ;
		Height = 38, ;
		lallowenter = .F., ;
		lallowzoom = .F., ;
		Left = 84, ;
		lnoinitdata = .T., ;
		Name = "edtDescription", ;
		ScrollBars = 0, ;
		TabIndex = 4, ;
		Top = 34, ;
		Width = 405
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="editbox" />

	ADD OBJECT 'Lbllabel3' AS lblfieldlabelcustom WITH ;
		Caption = "Description:", ;
		FontBold = .F., ;
		Height = 17, ;
		Left = 6, ;
		Name = "Lbllabel3", ;
		TabIndex = 1, ;
		Top = 37, ;
		Width = 75
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabel4' AS lblfieldlabelcustom WITH ;
		Caption = "Group Name:", ;
		FontBold = .F., ;
		Height = 17, ;
		Left = 6, ;
		Name = "Lbllabel4", ;
		TabIndex = 3, ;
		Top = 10, ;
		Width = 75
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'txtGroupName' AS txttextboxcustom WITH ;
		creadonlydisplay = Dim,Nofocus, ;
		cvaluesource = THISFORM.cGroupNameLocalized, ;
		FontSize = 9, ;
		Height = 22, ;
		lallowzoom = .F., ;
		Left = 84, ;
		lnoinitdata = .T., ;
		lrequired = .T., ;
		Name = "txtGroupName", ;
		ReadOnly = .F., ;
		TabIndex = 2, ;
		Top = 7, ;
		Width = 177
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />
	
	PROCEDURE Init
		LPARAMETER cGroupKeyValue, cGroupNameLocalized, cDescription, cGroupName
		*++
		* Group properties editor. Takes 4 parameters:
		*   1 - Group key value string
		*   2 - Group name (localized)
		*   3 - Description
		*   4 - Key name
		*--
		  THIS.oGroup = CREATEOBJECT('cmGroupValue')
		  IF NOT THISFORM.oGroup.Scatter(m.cGroupKeyValue, m.cGroupName)
		    THISFORM.DisplayMessage('%MsgGrpCorrupted')
		  ENDIF
		
		  THIS.cGroupKeyValue = m.cGroupKeyValue
		  THIS.cGroupName = m.cGroupName
		  THIS.cDescription = m.cDescription
		  THIS.cGroupNameLocalized= m.cGroupNameLocalized
		
		  * If name is not specified yet, allow user to specify it.
		  THISFORM.lEditName = EMPTY(m.cGroupNameLocalized)
		
		  * Update title bar to include username.
		  IF NOT EMPTY(m.cGroupNameLocalized)
		    THISFORM.Caption = THISFORM.Caption + ' - ' + m.cGroupNameLocalized
		  ENDIF
		
		  * Initialize selection list with available privileges.
		  THISFORM.cntGroup.SetMoverValue('%Shared.Security.Privileges', 'Privilege', THISFORM.oGroup.cPrivileges)
		  RETURN DODEFAULT()
		
	ENDPROC

	PROCEDURE saveallchanges
		LOCAL cList
		
		IF THIS.lChanged
		  * Store changed data back to original packed parameter string.
		  THIS.oGroup.cPrivileges = THIS.cntGroup.GetMoverValue()
		
		  * For a new key, make sure the correct name is set.
		  THIS.oGroup.cName = ALLTRIM(THIS.cGroupName)
		
		  * Store localized list of Privileges in event log entry.
		  THIS.cntGroup.GetValueList(@m.cList)
		  THIS.oSecurity.RecordEvent(EVENT_SEC_GRPDEFINE, EVENT_TYPE_SECURITY, THISFORM.cGroupNameLocalized + ': ' + m.cList)
		  THIS.cGroupKeyValue = THISFORM.oGroup.Gather()
		  THIS.uValue = .T.
		ENDIF
		RETURN .T.
		
	ENDPROC

	PROCEDURE txtGroupName.afterchange
		* Set both key name and localized name.
		THISFORM.cGroupName = THISFORM.cGroupNameLocalized
		
	ENDPROC

	PROCEDURE txtGroupName.fieldvalid
		LOCAL cMsg
		  DO CASE
		    CASE '.' $ THIS.Value OR ',' $ THIS.Value
		      m.cMsg = '%MsgGrpBadName'
		    CASE THISFORM.oRegistry.GetKeyValueEx('Security.Groups.' + TRIM(THIS.Value))
		      m.cMsg = '%MsgGrpNotUnique'
		  ENDCASE
		  IF NOT EMPTY(m.cMsg)
		    THISFORM.DisplayMessage(m.cMsg)
		    RETURN .F.
		  ENDIF
		  RETURN .T.
		
	ENDPROC

	PROCEDURE txtGroupName.Refresh
		THIS.lReadOnly = NOT THISFORM.lEditName
		DODEFAULT()
		
	ENDPROC

	PROCEDURE txtGroupName.storetranslation
		LPARAMETER cValue
		  * Trim spaces off before storing
		  RETURN ALLTRIM(m.cValue)
		
	ENDPROC

ENDDEFINE

DEFINE CLASS frmlogon AS frmmodaldialogcustom OF "..\custom\cforms.vcx" 		&& Application logon dialog box
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Lbllabel1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabel2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtUsername" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtPassword" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntOkCancel" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom1" UniqueID="" Timestamp="" />

	#INCLUDE "codemine.h"
	*<DefinedPropArrayMethod>
		*p: nfailcount		&& Number of chances user has to enter correct password.
		*p: oparams		&& Modal dialog parameters object.
	*</DefinedPropArrayMethod>

	BackColor = 255,255,255
	BorderStyle = 2
	Caption = "Logon"
	cversion = 2.0.0
	Desktop = .T.
	DoCreate = .T.
	Height = 225
	lreleaseonclose = .F.
	lrememberposition = .F.
	Name = "frmlogon"
	nfailcount = 5		&& Number of chances user has to enter correct password.
	osecurity = .NULL.
	ShowWindow = 1
	TitleBar = 0
	Width = 425
	Mwresize1.lblHighLight.Name = "lblHighLight"
	Mwresize1.lblShading.Name = "lblShading"
	Mwresize1.Left = 408
	Mwresize1.Name = "Mwresize1"
	Mwresize1.Top = 204

	ADD OBJECT 'cntOkCancel' AS cntokcancelcustom WITH ;
		BackStyle = 0, ;
		Height = 60, ;
		Left = 92, ;
		Name = "cntOkCancel", ;
		Top = 159, ;
		Width = 240, ;
		cmdcancel.Caption = "\<Exit", ;
		cmdcancel.FontName = "Segoe UI", ;
		cmdcancel.FontSize = 12, ;
		cmdcancel.Height = 48, ;
		cmdcancel.Left = 132, ;
		cmdcancel.Name = "cmdcancel", ;
		cmdcancel.Top = 0, ;
		cmdcancel.Width = 107, ;
		cmdok.Caption = "\<Logon", ;
		cmdok.FontName = "Segoe UI", ;
		cmdok.FontSize = 12, ;
		cmdok.Height = 48, ;
		cmdok.Left = 1, ;
		cmdok.llocalizecaption = .T., ;
		cmdok.Name = "cmdok", ;
		cmdok.Top = 2, ;
		cmdok.Width = 107
		*< END OBJECT: ClassLib="..\custom\cbutton.vcx" BaseClass="container" />

	ADD OBJECT 'Lbllabel1' AS lblfieldlabelcustom WITH ;
		Caption = "Username:", ;
		FontBold = .F., ;
		FontName = "Segoe UI", ;
		FontSize = 12, ;
		Height = 23, ;
		Left = 34, ;
		Name = "Lbllabel1", ;
		Top = 62, ;
		Width = 76
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabel2' AS lblfieldlabelcustom WITH ;
		Caption = "Password:", ;
		FontBold = .F., ;
		FontName = "Segoe UI", ;
		FontSize = 12, ;
		Height = 23, ;
		Left = 34, ;
		Name = "Lbllabel2", ;
		Top = 101, ;
		Width = 72
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom1' AS lbllabelcustom WITH ;
		Caption = "Log In", ;
		FontBold = .T., ;
		FontName = "Segoe UI", ;
		FontSize = 14, ;
		ForeColor = 128,0,0, ;
		Height = 27, ;
		Left = 24, ;
		Name = "Lbllabelcustom1", ;
		Top = 12, ;
		Width = 59
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'txtPassword' AS txttextboxcustom WITH ;
		FontName = "Segoe UI", ;
		FontSize = 12, ;
		Format = "K", ;
		Height = 26, ;
		Left = 127, ;
		Name = "txtPassword", ;
		PasswordChar = "*", ;
		Top = 98, ;
		Width = 242
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtUsername' AS txttextboxcustom WITH ;
		FontName = "Segoe UI", ;
		FontSize = 12, ;
		Format = "K", ;
		Height = 26, ;
		Left = 127, ;
		Name = "txtUsername", ;
		Top = 59, ;
		Width = 242
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />
	
	PROCEDURE beforeclose
		LPARAMETERS nCloseReason
		*++
		*>>Save or discard any changes, and return .T. if the form can be closed.
		* Provides default behavior. Individual forms may subclass this method as appropriate.
		*--
		  IF m.nCloseReason = CLOSE_BY_OK
		    RETURN THIS.Save()    && Only perform login on OK button.
		  ENDIF
		  RETURN THIS.CancelAllChanges()
		
	ENDPROC

	PROCEDURE Init
		LPARAMETER cDefault, cCompany
		*++
		* Application logon dialog. Takes 1 parameter, the default username.
		*--
		  * This never executes, but will cause the project manager to pull in 
		  * cmSecMan.vcx the first time a 6.1 or 7.0 project is rebuilt.
		  IF .F.
		    SET CLASSLIB TO cmSecMan.vcx ADDITIVE
		  ENDIF
		
		  IF NOT EMPTY(m.cDefault)
		    THIS.txtUsername.Value = PROPER(TRIM(m.cDefault))
		    THIS.SetNextControl(THIS.txtPassword)
		  ENDIF
		
		  * Change caption to company logging in to.
		  IF NOT EMPTY(m.cCompany)
		     this.Caption = 'Logon to ' + ALLTRIM(m.cCompany)
		  ENDIF 
		     
		  * Create a username properties value object for the form.
		  THIS.AddObject('oUser', 'cmUsernameValue')
		  RETURN DODEFAULT()
		
	ENDPROC

	PROCEDURE saveallchanges
		IF NOT THIS.oSecurity.Logon(TRIM(THIS.txtUsername.Value), TRIM(THIS.txtPassword.Value))
		  THIS.oMessage.DisplayLastMessage()   && Security manager set the reason for failure.
		  THIS.txtPassword.Setfocus()
		  THIS.nFailCount = THIS.nFailCount - 1
		  IF THIS.nFailCount <= 0
		    THIS.oSecurity.RecordEvent(EVENT_SEC_LOGONFAIL, EVENT_TYPE_SECURITY, THIS.txtUsername.Value)
		    RETURN .T.
		  ENDIF
		  RETURN .F.
		ENDIF
		
		* Succeful logon, return success.
		THIS.uValue = .T.
		RETURN .T.
		
	ENDPROC

	PROCEDURE cntOkCancel.cmdok.Refresh
		THIS.Enabled = NOT EMPTY(THISFORM.txtUsername.Value)
		
	ENDPROC

	PROCEDURE txtUsername.InteractiveChange
		THIS.Parent.cntOKcancel.Refresh()
		RETURN DODEFAULT()
		
	ENDPROC

	PROCEDURE txtUsername.KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		
		  * Do not allow periods in user name field, since period is the appReg pather delimiter character.
		  IF m.nKeyCode = ASC('.')
		    NODEFAULT 
		  ELSE
		    RETURN DODEFAULT(m.nKeyCode, m.nShiftAltCtrl)
		  ENDIF
		
	ENDPROC

ENDDEFINE

DEFINE CLASS frmsetlogonpassword AS frmsetpassword OF "cmsecure.vcx" 		&& Set the logon password for the currently logged-on username.
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="txtOldPassword" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblOldPassword" UniqueID="" Timestamp="" />

	BorderStyle = 3
	Caption = "Set Password for "
	DoCreate = .T.
	Height = 168
	lreleaseonclose = .T.
	Name = "frmsetlogonpassword"
	Width = 400
	Cntokcancel1.BackStyle = 0
	Cntokcancel1.cmdcancel.Name = "cmdcancel"
	Cntokcancel1.cmdok.Name = "cmdok"
	Cntokcancel1.Left = 118
	Cntokcancel1.Name = "Cntokcancel1"
	Cntokcancel1.TabIndex = 8
	Cntokcancel1.Top = 132
	Image1.Height = 32
	Image1.Name = "Image1"
	Image1.Width = 32
	lblConfirm.Left = 54
	lblConfirm.Name = "lblConfirm"
	lblConfirm.TabIndex = 5
	lblConfirm.Top = 104
	lblPassword.Left = 35
	lblPassword.Name = "lblPassword"
	lblPassword.TabIndex = 3
	lblPassword.Top = 76
	lblPrompt.Name = "lblPrompt"
	lblPrompt.TabIndex = 7
	txtConfirm.Left = 138
	txtConfirm.Name = "txtConfirm"
	txtConfirm.TabIndex = 6
	txtConfirm.Top = 102
	txtPassword.Left = 138
	txtPassword.Name = "txtPassword"
	txtPassword.TabIndex = 4
	txtPassword.Top = 74

	ADD OBJECT 'lblOldPassword' AS lblfieldlabelcustom WITH ;
		Caption = "Current Password:", ;
		Height = 16, ;
		Left = 24, ;
		Name = "lblOldPassword", ;
		TabIndex = 1, ;
		Top = 50, ;
		Width = 94
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'txtOldPassword' AS txttextboxcustom WITH ;
		Height = 22, ;
		Left = 138, ;
		Name = "txtOldPassword", ;
		PasswordChar = "*", ;
		TabIndex = 2, ;
		Top = 47, ;
		Width = 188
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />
	
	PROCEDURE Init
		LPARAMETER cText
		*++
		* Parameters:
		*	cText	- Custom message text to display in top portion of the dialog window.
		*
		* If dialog return value is .T., the cPassword property contains the new password text.
		*--
		  * Append username to caption
		  THIS.Caption = THIS.Caption + THIS.oSecurity.GetUserProperty('User')
		
		  * Check for locked password, or no current user, and abort in either case.
		  IF NOT THIS.oSecurity.IsLoggedOn()
		    THIS.DisplayMessage('%MsgNotLoggedOn')
		    RETURN .F.
		  ENDIF
		  IF THIS.oSecurity.GetUserProperty('Locked')
		    THIS.DisplayMessage('%MsgPasswordLocked')
		    RETURN .F.
		  ENDIF
		
		  IF NOT EMPTY(m.cText)
		    THIS.lblPrompt.Caption = m.cText
		  ENDIF
		  THIS.nMinLength = THIS.oSecurity.GetUserProperty('Length')
		  THIS.lChanged = .T.
		  RETURN frmForm::Init()
		
	ENDPROC

	PROCEDURE saveallchanges
		THIS.cPassword = TRIM(THISFORM.cPassword)
		IF NOT THIS.oSecurity.SetPassword(THIS.cPassword)
		  THIS.DisplayMessage('%msgPasswordMustChange')
		  THIS.SetNextControl(THIS.txtPassword)
		  RETURN .F.
		ENDIF
		THIS.uValue = .T.
		thisform.Release()
		RETURN .T.
		
	ENDPROC

	PROCEDURE Cntokcancel1.cmdok.Click
		DODEFAULT()
		
	ENDPROC

	PROCEDURE txtOldPassword.formvalid
		IF NOT THISFORM.oSecurity.IsCurrentPassword(TRIM(THIS.Value))
		  THISFORM.DisplayMessage('%msgWrongPassword')
		  RETURN .F.
		ENDIF
		RETURN DODEFAULT()
		
	ENDPROC

	PROCEDURE txtPassword.Refresh
		THIS.lRequired = THISFORM.oSecurity.GetUserProperty('Required')
		RETURN txtTextbox::Refresh()
		
	ENDPROC

ENDDEFINE

DEFINE CLASS frmsetpassword AS frmmodaldialogcustom OF "..\custom\cforms.vcx" 		&& Password Editor.
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="lblPassword" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblConfirm" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtPassword" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtConfirm" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblPrompt" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Image1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cntokcancel1" UniqueID="" Timestamp="" />

	#INCLUDE "codemine.h"
	*<DefinedPropArrayMethod>
		*p: cpassword		&& New password value
		*p: nminlength		&& MinimumPassword Length
		*p: ouser		&& Reference to a Codemine User object to set the password for.
	*</DefinedPropArrayMethod>

	BorderStyle = 2
	Caption = "Set Password"
	cpassword = 		&& New password value
	cversion = 2.0.0
	Desktop = .T.
	DoCreate = .T.
	Height = 157
	lreleaseonclose = .F.
	lrememberposition = .T.
	Name = "frmsetpassword"
	nminlength = 1		&& MinimumPassword Length
	osecurity = .NULL.
	ostring = .F.
	ouser = .NULL.		&& Reference to a Codemine User object to set the password for.
	ShowWindow = 1
	Width = 400
	WindowType = 1

	ADD OBJECT 'Cntokcancel1' AS cntokcancelcustom WITH ;
		BackStyle = 0, ;
		Left = 118, ;
		Name = "Cntokcancel1", ;
		Top = 122, ;
		ZOrderSet = 6, ;
		cmdcancel.Name = "cmdcancel", ;
		cmdok.Name = "cmdok"
		*< END OBJECT: ClassLib="..\custom\cbutton.vcx" BaseClass="container" />

	ADD OBJECT 'Image1' AS image WITH ;
		BackStyle = 0, ;
		Height = 32, ;
		Left = 12, ;
		Name = "Image1", ;
		Picture = ..\graphics\secur07.ico, ;
		Top = 9, ;
		Width = 32, ;
		ZOrderSet = 5
		*< END OBJECT: BaseClass="image" />

	ADD OBJECT 'lblConfirm' AS lblfieldlabelcustom WITH ;
		Caption = "Confirmation:", ;
		FontBold = .F., ;
		FontSize = 9, ;
		Height = 17, ;
		Left = 54, ;
		Name = "lblConfirm", ;
		TabIndex = 3, ;
		Top = 87, ;
		Width = 81, ;
		ZOrderSet = 1
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblPassword' AS lblfieldlabelcustom WITH ;
		Caption = "New Password:", ;
		FontBold = .F., ;
		FontSize = 9, ;
		Left = 35, ;
		Name = "lblPassword", ;
		TabIndex = 1, ;
		Top = 58, ;
		ZOrderSet = 0
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblPrompt' AS lbltextcustom WITH ;
		Alignment = 0, ;
		AutoSize = .F., ;
		Caption = "Please type the new password twice in the spaces below.", ;
		FontBold = .F., ;
		FontExtend = .F., ;
		FontItalic = .T., ;
		FontSize = 9, ;
		Height = 33, ;
		Left = 60, ;
		Name = "lblPrompt", ;
		Top = 8, ;
		Width = 333, ;
		WordWrap = .T., ;
		ZOrderSet = 4
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'txtConfirm' AS txttextboxcustom WITH ;
		cdisplayname = Confirmation Value, ;
		FontSize = 9, ;
		Format = "", ;
		Height = 22, ;
		Left = 138, ;
		Name = "txtConfirm", ;
		PasswordChar = "*", ;
		TabIndex = 4, ;
		Top = 84, ;
		Width = 188, ;
		ZOrderSet = 3
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtPassword' AS txttextboxcustom WITH ;
		cvaluesource = THISFORM.cPassword, ;
		FontSize = 9, ;
		Height = 22, ;
		Left = 138, ;
		Name = "txtPassword", ;
		PasswordChar = "*", ;
		TabIndex = 2, ;
		Top = 55, ;
		Width = 188, ;
		ZOrderSet = 2
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />
	
	PROCEDURE confirmcancel
		RETURN .T.  && Never need confirmation
		
	ENDPROC

	PROCEDURE Init
		LPARAMETER cText, oUser
		*++
		* This dialog accepts a password string and confirmation, ensures that the confirmation 
		* matches, and makes the password string available to the caller on return. It is used
		* to accept new password values for user accounts from the user account editor, and 
		* during logon when a password is expired. It is also used (without the oUser parameter)
		* by the Registry Editor to set the value of password keys.
		*
		* Parameters:
		*	cText	- Message text to display in top portion of dialog window.
		* 	oUser	- Optional User object to set the password for.
		*
		* If dialog return value is .T., the cPassword property contains the new password value.
		*--
		  IF NOT EMPTY(m.cText)
		    THIS.lblPrompt.Caption = m.cText
		  ENDIF
		
		  IF PCOUNT() > 1 AND NOT ISNULL(m.oUser)
		    THIS.oUser = m.oUser
		    THIS.nMinLength = m.oUser.nMinPasswordLength
		    THIS.txtPassword.lRequired = m.oUser.lPasswordRequired
		  ENDIF
		  RETURN DODEFAULT()
		
	ENDPROC

	PROCEDURE saveallchanges
		* Trim the password and leave it where caller can access it.
		THIS.cPassword = TRIM(THIS.cPassword)
		
		* If we are operating on a user object, set its password to the new value.
		IF NOT ISNULL(THIS.oUser)
		  IF NOT THIS.oUser.SetPassword(THIS.cPassword)
		    THIS.DisplayMessage('%msgPasswordMustChange')
		    THIS.SetNextControl(THIS.txtPassword)
		    RETURN .F.
		  ENDIF
		ENDIF
		
		THIS.uValue = .T.
		RETURN .T.
		
	ENDPROC

	PROCEDURE txtConfirm.GotFocus
		THIS.Value = ''
		RETURN DODEFAULT()
		
	ENDPROC

	PROCEDURE txtPassword.formvalid
		* Form level validation for this control, must return .T. before form.Save() can complete.
		* The password and confirmation string must match.
		IF NOT TRIM(THIS.Value) == TRIM(THISFORM.txtConfirm.Value)
		  THISFORM.DisplayMessage('%MsgPasswordMismatch')
		  RETURN .F.
		ENDIF
		
		IF THIS.lRequired AND LEN(TRIM(THIS.Value)) < THISFORM.nMinLength
		  THISFORM.DisplayMessage('%MsgPasswordTooShort', THISFORM.nMinLength)
		  RETURN .F.
		ENDIF
		RETURN .T.
		
	ENDPROC

	PROCEDURE txtPassword.GotFocus
		THISFORM.cPassword = ''
		RETURN DODEFAULT()
		
	ENDPROC

	PROCEDURE txtPassword.Init
		THIS.cDisplayName = THISFORM.lblPassword.Caption
		RETURN DODEFAULT()
		
	ENDPROC

ENDDEFINE

DEFINE CLASS frmusereditor AS frmmodaldialogcustom OF "..\custom\cforms.vcx" 		&& Username value editor.
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="pgfPageFrame" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfPageFrame.pagUsers.txtUsername" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfPageFrame.pagUsers.Lbllabel1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfPageFrame.pagUsers.edtDescription" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfPageFrame.pagUsers.Lbllabel2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfPageFrame.pagUsers.txtFullName" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfPageFrame.pagUsers.Lbllabel3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfPageFrame.pagUsers.Lbllabel4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfPageFrame.pagUsers.lblLastLogon" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfPageFrame.pagUsers.chkDisabled" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfPageFrame.pagPassword.Shpshapecustom1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfPageFrame.pagPassword.chkChangePassword" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfPageFrame.pagPassword.chkPasswordLocked" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfPageFrame.pagPassword.chkAutologonx" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfPageFrame.pagPassword.spnMinLength" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfPageFrame.pagPassword.Lbllabel1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfPageFrame.pagPassword.chkPassword" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfPageFrame.pagPassword.chkPasswordRequired" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfPageFrame.pagPassword.Lblfieldlabelcustom1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfPageFrame.pagPassword.spnGrace" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfPageFrame.pagPassword.Lblfieldlabelcustom2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfPageFrame.pagPassword.Lbllabel4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfPageFrame.pagPassword.lblLastPasswordChange" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfPageFrame.pagPassword.spnPasswordLife" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfPageFrame.pagPassword.Lbltextcustom1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfPageFrame.pagGroups.cntGroups" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfPageFrame.pagPrivs.cntPrivs" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cntokcancel1" UniqueID="" Timestamp="" />

	#INCLUDE "codemine.h"
	*<DefinedPropArrayMethod>
		*p: cdescription		&& Description text for the user.
		*p: cuserkeyvalue		&& Paked username key value
		*p: cusername		&& Usrename we are editing
		*p: leditname		&& Set true if allowed to edit name.
		*p: ouser		&& User Properties object.
		*a: apageinitialized[4,0]		&& Flag array set true as each page is initialized.
	*</DefinedPropArrayMethod>

	BorderStyle = 3
	Caption = "User Properties"
	cdescription = 		&& Description text for the user.
	Closable = .F.
	ControlBox = .F.
	cuserkeyvalue = 		&& Paked username key value
	cusername = 		&& Usrename we are editing
	cversion = 2.0.0
	Desktop = .T.
	DoCreate = .T.
	Height = 376
	Icon = ..\
	lreleaseonclose = .F.
	lrememberposition = .T.
	lremembersize = .T.
	MaxWidth = -1
	MinButton = .F.
	MinHeight = 160
	MinWidth = 300
	Name = "frmusereditor"
	omessage = .NULL.
	oregistry = .NULL.
	osecurity = .NULL.
	ostring = .NULL.
	ouser = .NULL.		&& User Properties object.
	ScaleMode = 3
	Width = 628
	WindowType = 1
	Mwresize1.lblHighLight.Name = "lblHighLight"
	Mwresize1.lblShading.Name = "lblShading"
	Mwresize1.Name = "Mwresize1"

	ADD OBJECT 'Cntokcancel1' AS cntokcancelcustom WITH ;
		BackStyle = 0, ;
		Height = 38, ;
		Left = 216, ;
		Name = "Cntokcancel1", ;
		Top = 324, ;
		Width = 180, ;
		cmdCancel.Height = 37, ;
		cmdCancel.Left = 87, ;
		cmdCancel.Name = "cmdCancel", ;
		cmdCancel.Top = 0, ;
		cmdCancel.Width = 75, ;
		cmdOK.Height = 37, ;
		cmdOK.Left = 1, ;
		cmdOK.Name = "cmdOK", ;
		cmdOK.Top = 0, ;
		cmdOK.Width = 75
		*< END OBJECT: ClassLib="..\custom\cbutton.vcx" BaseClass="container" />

	ADD OBJECT 'pgfPageFrame' AS pgfpageframecustom WITH ;
		ErasePage = .T., ;
		Height = 307, ;
		lapplyformbackground = .F., ;
		Left = 7, ;
		Name = "pgfPageFrame", ;
		PageCount = 4, ;
		TabStyle = 1, ;
		Top = 5, ;
		Width = 617, ;
		Page1.Caption = "\<User Information", ;
		Page1.FontSize = 9, ;
		Page1.Name = "pagUsers", ;
		Page2.Caption = "\<Password", ;
		Page2.FontSize = 9, ;
		Page2.Name = "pagPassword", ;
		Page3.Caption = "\<Group Memberships", ;
		Page3.FontSize = 9, ;
		Page3.Name = "pagGroups", ;
		Page4.Caption = "Pri\<vileges", ;
		Page4.FontSize = 9, ;
		Page4.Name = "pagPrivs"
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="pageframe" />

	ADD OBJECT 'pgfPageFrame.pagGroups.cntGroups' AS cntlocalizedmover WITH ;
		Height = 257, ;
		Left = 17, ;
		Name = "cntGroups", ;
		Top = 10, ;
		Width = 587, ;
		cmdDeselect.Caption = "<< Remove", ;
		cmdDeselect.Height = 23, ;
		cmdDeselect.Left = 246, ;
		cmdDeselect.Name = "cmdDeselect", ;
		cmdDeselect.Top = 71, ;
		cmdDeselect.Width = 90, ;
		cmdDeselectAll.Left = 246, ;
		cmdDeselectAll.Name = "cmdDeselectAll", ;
		cmdDeselectAll.Top = 141, ;
		cmdDeselectAll.Width = 90, ;
		cmdSelect.Caption = "Add >>", ;
		cmdSelect.Height = 23, ;
		cmdSelect.Left = 246, ;
		cmdSelect.Name = "cmdSelect", ;
		cmdSelect.Top = 36, ;
		cmdSelect.Width = 90, ;
		cmdSelectAll.Left = 246, ;
		cmdSelectAll.Name = "cmdSelectAll", ;
		cmdSelectAll.Top = 106, ;
		cmdSelectAll.Width = 90, ;
		Lbllabel1.Caption = "Not a Member of:", ;
		Lbllabel1.Left = -1, ;
		Lbllabel1.Name = "Lbllabel1", ;
		Lbllabel1.Top = 0, ;
		Lbllabel2.Caption = "Member of:", ;
		Lbllabel2.Height = 17, ;
		Lbllabel2.Left = 365, ;
		Lbllabel2.Name = "Lbllabel2", ;
		Lbllabel2.Top = 0, ;
		Lbllabel2.Width = 63, ;
		lstSelected.Height = 229, ;
		lstSelected.Left = 365, ;
		lstSelected.Name = "lstSelected", ;
		lstSelected.Top = 16, ;
		lstSelected.Width = 209, ;
		lstSource.Height = 241, ;
		lstSource.Left = 1, ;
		lstSource.Name = "lstSource", ;
		lstSource.Top = 16, ;
		lstSource.Width = 214
		*< END OBJECT: ClassLib="cmsecure.vcx" BaseClass="container" />

	ADD OBJECT 'pgfPageFrame.pagPassword.chkAutologonx' AS chkcheckbox WITH ;
		Alignment = 0, ;
		Caption = "Autologon password required", ;
		cvaluesource = THISFORM.oUser.lAutoLogonPassword, ;
		FontSize = 9, ;
		Height = 18, ;
		Left = 28, ;
		lnoinitdata = .T., ;
		Name = "chkAutologonx", ;
		TabIndex = 3, ;
		Top = 111, ;
		Value = .F., ;
		Visible = .F., ;
		Width = 187
		*< END OBJECT: ClassLib="codemine.vcx" BaseClass="checkbox" />

	ADD OBJECT 'pgfPageFrame.pagPassword.chkChangePassword' AS chkcheckbox WITH ;
		Alignment = 0, ;
		Caption = "Must Change Password Next Login", ;
		cvaluesource = THISFORM.oUser.lPasswordMustChange, ;
		FontBold = .F., ;
		FontSize = 9, ;
		Height = 18, ;
		Left = 268, ;
		lnoinitdata = .T., ;
		Name = "chkChangePassword", ;
		TabIndex = 11, ;
		Top = 160, ;
		Value = .F., ;
		Width = 219
		*< END OBJECT: ClassLib="codemine.vcx" BaseClass="checkbox" />

	ADD OBJECT 'pgfPageFrame.pagPassword.chkPassword' AS chkcheckbox WITH ;
		Alignment = 0, ;
		Caption = "Set Password...", ;
		FontBold = .F., ;
		FontSize = 9, ;
		Height = 17, ;
		Left = 28, ;
		lnoinitdata = .T., ;
		Name = "chkPassword", ;
		TabIndex = 1, ;
		Top = 20, ;
		Value = .F., ;
		Width = 126
		*< END OBJECT: ClassLib="codemine.vcx" BaseClass="checkbox" />

	ADD OBJECT 'pgfPageFrame.pagPassword.chkPasswordLocked' AS chkcheckbox WITH ;
		Alignment = 0, ;
		Caption = "User cannot change password", ;
		cvaluesource = THISFORM.oUser.lPasswordLocked, ;
		FontBold = .F., ;
		FontSize = 9, ;
		Height = 18, ;
		Left = 28, ;
		lnoinitdata = .T., ;
		Name = "chkPasswordLocked", ;
		TabIndex = 2, ;
		Top = 69, ;
		Value = .F., ;
		Width = 192
		*< END OBJECT: ClassLib="codemine.vcx" BaseClass="checkbox" />

	ADD OBJECT 'pgfPageFrame.pagPassword.chkPasswordRequired' AS chkcheckbox WITH ;
		Alignment = 0, ;
		BackStyle = 1, ;
		Caption = "Password required", ;
		cvaluesource = THISFORM.oUser.lPasswordRequired, ;
		FontBold = .F., ;
		FontSize = 9, ;
		Height = 18, ;
		Left = 245, ;
		lnoinitdata = .T., ;
		Name = "chkPasswordRequired", ;
		TabIndex = 7, ;
		Top = 7, ;
		Value = .F., ;
		Width = 123
		*< END OBJECT: ClassLib="codemine.vcx" BaseClass="checkbox" />

	ADD OBJECT 'pgfPageFrame.pagPassword.Lblfieldlabelcustom1' AS lblfieldlabelcustom WITH ;
		Caption = "Must Change Every", ;
		FontBold = .F., ;
		FontSize = 9, ;
		Height = 17, ;
		Left = 277, ;
		Name = "Lblfieldlabelcustom1", ;
		TabIndex = 5, ;
		Top = 77, ;
		Width = 107
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'pgfPageFrame.pagPassword.Lblfieldlabelcustom2' AS lblfieldlabelcustom WITH ;
		Caption = "Grace Logins:", ;
		FontBold = .F., ;
		FontSize = 9, ;
		Height = 17, ;
		Left = 304, ;
		Name = "Lblfieldlabelcustom2", ;
		TabIndex = 6, ;
		Top = 122, ;
		Width = 79
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'pgfPageFrame.pagPassword.Lbllabel1' AS lblfieldlabelcustom WITH ;
		Caption = "Minimum Length:", ;
		FontBold = .F., ;
		FontSize = 9, ;
		Height = 17, ;
		Left = 284, ;
		Name = "Lbllabel1", ;
		TabIndex = 4, ;
		Top = 29, ;
		Width = 97
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'pgfPageFrame.pagPassword.Lbllabel4' AS lblfieldlabelcustom WITH ;
		Caption = "(Last changed: ", ;
		FontBold = .F., ;
		FontItalic = .T., ;
		FontSize = 8, ;
		Height = 16, ;
		Left = 41, ;
		Name = "Lbllabel4", ;
		TabIndex = 12, ;
		Top = 39, ;
		Width = 78
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'pgfPageFrame.pagPassword.lblLastPasswordChange' AS lbltextcustom WITH ;
		AutoSize = .F., ;
		Caption = "Never)", ;
		FontItalic = .T., ;
		FontSize = 8, ;
		Height = 16, ;
		Left = 117, ;
		Name = "lblLastPasswordChange", ;
		TabIndex = 13, ;
		Top = 39, ;
		Width = 116
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'pgfPageFrame.pagPassword.Lbltextcustom1' AS lbltextcustom WITH ;
		Caption = "days.", ;
		Height = 16, ;
		Left = 438, ;
		Name = "Lbltextcustom1", ;
		TabIndex = 14, ;
		Top = 77, ;
		Width = 29
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'pgfPageFrame.pagPassword.Shpshapecustom1' AS shpshapecustom WITH ;
		Height = 181, ;
		Left = 239, ;
		Name = "Shpshapecustom1", ;
		Top = 14, ;
		Width = 305
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="shape" />

	ADD OBJECT 'pgfPageFrame.pagPassword.spnGrace' AS spnspinnercustom WITH ;
		cvaluesource = THISFORM.oUser.nGraceLogins, ;
		FontSize = 9, ;
		Height = 21, ;
		InputMask = "9", ;
		KeyboardHighValue = 9, ;
		KeyboardLowValue = 1, ;
		Left = 392, ;
		lnoinitdata = .T., ;
		Margin = 1, ;
		Name = "spnGrace", ;
		SelectOnEntry = .T., ;
		SpinnerHighValue = 9.00, ;
		SpinnerLowValue = 1.00, ;
		TabIndex = 10, ;
		Top = 120, ;
		Width = 41
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="spinner" />

	ADD OBJECT 'pgfPageFrame.pagPassword.spnMinLength' AS spnspinnercustom WITH ;
		cvaluesource = THISFORM.oUser.nMinPasswordLength, ;
		FontSize = 9, ;
		Height = 22, ;
		InputMask = "99", ;
		KeyboardHighValue = 10, ;
		KeyboardLowValue = 0, ;
		Left = 392, ;
		lnoinitdata = .T., ;
		Name = "spnMinLength", ;
		SelectOnEntry = .T., ;
		SpinnerHighValue = 10.00, ;
		SpinnerLowValue = 0.00, ;
		TabIndex = 8, ;
		Top = 26, ;
		Width = 41
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="spinner" />

	ADD OBJECT 'pgfPageFrame.pagPassword.spnPasswordLife' AS spnspinnercustom WITH ;
		cvaluesource = THISFORM.oUser.nPasswordLife, ;
		FontSize = 9, ;
		Height = 21, ;
		Increment = 5.00, ;
		InputMask = "99", ;
		KeyboardHighValue = 90, ;
		KeyboardLowValue = 0, ;
		Left = 392, ;
		lnoinitdata = .T., ;
		Margin = 1, ;
		Name = "spnPasswordLife", ;
		SelectOnEntry = .T., ;
		SpinnerHighValue = 90.00, ;
		SpinnerLowValue = 0.00, ;
		TabIndex = 9, ;
		Top = 75, ;
		Width = 41
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="spinner" />

	ADD OBJECT 'pgfPageFrame.pagPrivs.cntPrivs' AS cntlocalizedmover WITH ;
		Height = 257, ;
		Left = 17, ;
		Name = "cntPrivs", ;
		Top = 10, ;
		Width = 587, ;
		cmdDeselect.Caption = "<< Remove", ;
		cmdDeselect.Height = 23, ;
		cmdDeselect.Left = 252, ;
		cmdDeselect.Name = "cmdDeselect", ;
		cmdDeselect.Top = 71, ;
		cmdDeselect.Width = 90, ;
		cmdDeselectAll.Left = 252, ;
		cmdDeselectAll.Name = "cmdDeselectAll", ;
		cmdDeselectAll.Top = 141, ;
		cmdDeselectAll.Width = 90, ;
		cmdSelect.Caption = "Grant >>", ;
		cmdSelect.Height = 23, ;
		cmdSelect.Left = 252, ;
		cmdSelect.Name = "cmdSelect", ;
		cmdSelect.Top = 36, ;
		cmdSelect.Width = 90, ;
		cmdSelectAll.Left = 252, ;
		cmdSelectAll.Name = "cmdSelectAll", ;
		cmdSelectAll.Top = 106, ;
		cmdSelectAll.Width = 90, ;
		Lbllabel1.Caption = "Not Granted:", ;
		Lbllabel1.Name = "Lbllabel1", ;
		Lbllabel2.Caption = "Granted:", ;
		Lbllabel2.Height = 17, ;
		Lbllabel2.Left = 368, ;
		Lbllabel2.Name = "Lbllabel2", ;
		Lbllabel2.Top = 0, ;
		Lbllabel2.Width = 49, ;
		lstSelected.Height = 229, ;
		lstSelected.Left = 367, ;
		lstSelected.Name = "lstSelected", ;
		lstSelected.Top = 16, ;
		lstSelected.Width = 208, ;
		lstSource.Height = 229, ;
		lstSource.Left = 1, ;
		lstSource.Name = "lstSource", ;
		lstSource.Top = 16, ;
		lstSource.Width = 226
		*< END OBJECT: ClassLib="cmsecure.vcx" BaseClass="container" />

	ADD OBJECT 'pgfPageFrame.pagUsers.chkDisabled' AS chkcheckbox WITH ;
		Alignment = 0, ;
		Caption = "Account Disabled", ;
		cvaluesource = THISFORM.oUser.lDisabled, ;
		FontBold = .F., ;
		FontSize = 9, ;
		Height = 18, ;
		Left = 370, ;
		lnoinitdata = .T., ;
		Name = "chkDisabled", ;
		TabIndex = 7, ;
		Top = 240, ;
		Value = .F., ;
		Width = 120
		*< END OBJECT: ClassLib="codemine.vcx" BaseClass="checkbox" />

	ADD OBJECT 'pgfPageFrame.pagUsers.edtDescription' AS edteditboxcustom WITH ;
		cvaluesource = THISFORM.cDescription, ;
		FontSize = 9, ;
		Height = 158, ;
		lallowenter = .F., ;
		lallowzoom = .F., ;
		Left = 80, ;
		lnoinitdata = .T., ;
		Name = "edtDescription", ;
		ScrollBars = 0, ;
		TabIndex = 3, ;
		Top = 55, ;
		Width = 452
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="editbox" />

	ADD OBJECT 'pgfPageFrame.pagUsers.Lbllabel1' AS lblfieldlabelcustom WITH ;
		Alignment = 1, ;
		Caption = "Username:", ;
		FontBold = .F., ;
		FontSize = 9, ;
		Height = 17, ;
		Left = 14, ;
		Name = "Lbllabel1", ;
		TabIndex = 4, ;
		Top = 22, ;
		Width = 64
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'pgfPageFrame.pagUsers.Lbllabel2' AS lblfieldlabelcustom WITH ;
		Alignment = 1, ;
		Caption = "Description:", ;
		FontBold = .F., ;
		FontSize = 9, ;
		Height = 17, ;
		Left = 10, ;
		Name = "Lbllabel2", ;
		TabIndex = 5, ;
		Top = 58, ;
		Width = 68
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'pgfPageFrame.pagUsers.Lbllabel3' AS lblfieldlabelcustom WITH ;
		Alignment = 1, ;
		Caption = "Fullname:", ;
		FontBold = .F., ;
		FontSize = 9, ;
		Height = 17, ;
		Left = 206, ;
		Name = "Lbllabel3", ;
		TabIndex = 6, ;
		Top = 23, ;
		Width = 57
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'pgfPageFrame.pagUsers.Lbllabel4' AS lblfieldlabelcustom WITH ;
		Caption = "Last Logon was:", ;
		FontBold = .F., ;
		FontSize = 9, ;
		Left = 17, ;
		Name = "Lbllabel4", ;
		TabIndex = 7, ;
		Top = 240
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'pgfPageFrame.pagUsers.lblLastLogon' AS lbltextcustom WITH ;
		AutoSize = .F., ;
		Caption = "Never", ;
		FontBold = .T., ;
		FontItalic = .T., ;
		FontSize = 9, ;
		Height = 18, ;
		Left = 119, ;
		Name = "lblLastLogon", ;
		TabIndex = 8, ;
		Top = 240, ;
		Width = 246
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'pgfPageFrame.pagUsers.txtFullName' AS txttextboxcustom WITH ;
		cvaluesource = THISFORM.oUser.cFullname, ;
		FontSize = 9, ;
		Height = 22, ;
		Left = 268, ;
		lnoinitdata = .T., ;
		Name = "txtFullName", ;
		TabIndex = 2, ;
		Top = 20, ;
		Width = 264
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'pgfPageFrame.pagUsers.txtUsername' AS txttextboxcustom WITH ;
		creadonlydisplay = Dim,Nofocus, ;
		cvaluesource = THISFORM.cUsername, ;
		FontSize = 9, ;
		Height = 22, ;
		Left = 80, ;
		lnoinitdata = .T., ;
		lrequired = .T., ;
		Name = "txtUsername", ;
		TabIndex = 1, ;
		Top = 19, ;
		Width = 119
		*< END OBJECT: ClassLib="..\custom\ccontrol.vcx" BaseClass="textbox" />
	
	PROCEDURE Init
		LPARAMETER cUserKeyValue, cUserName, cDescription
		*++
		* User properties editor. Takes 3 parameters:
		*   1 - User key value string
		*   2 - User key name
		*   3 - Description
		*
		* This and all framework modal dialogs has form.Desktop set to .T. so they will not be
		* clipped when called from an SDI or other Top-Level form, without the containing VFP window.
		*--
		  THIS.oUser = CreateNewObject('cmUsernameValue')
		  IF NOT THIS.oUser.Scatter(m.cUserKeyValue, m.cUserName)
		    * Display message on data load error, but allow edit to continue.
		    THIS.DisplayMessage('%MsgUserCorrupted')
		  ENDIF
		
		  THIS.cUserKeyValue = m.cUserKeyValue
		  THIS.cUserName = m.cUserName
		  THIS.cDescription = m.cDescription
		  THIS.lChanged = THISFORM.oUser.lEmpty
		
		  * Update title bar to include username.
		  IF NOT EMPTY(m.cUserName)
		    THIS.Caption = THISFORM.Caption + ' - ' + m.cUserName
		  ENDIF
		
		  * If name is not specified yet, allow user to specify it.
		  THIS.lEditName = EMPTY(m.cUsername)
		
		  IF THIS.lEditName
		    THIS.SetNextControl(THIS.pgfPageFrame.pagUsers.txtusername)
		  ELSE
		    THIS.SetNextControl(THIS.pgfPageFrame.pagUsers.txtFullName)
		  ENDIF
		  RETURN DODEFAULT()
		
	ENDPROC

	PROCEDURE saveallchanges
		LOCAL cMsg, cList
		
		  IF THIS.lChanged
		    * Copy Group and Privilege changes back to User object.
		    IF THISFORM.pgfPageFrame.pagGroups.cntGroups.lChanged
		      THISFORM.oUser.cGroups = THISFORM.pgfPageFrame.pagGroups.cntGroups.GetMoverValue()
		
		      * Store localized list of groups in event log entry.
		      THISFORM.pgfPageFrame.pagGroups.cntGroups.GetValueList(@m.cList)
		      IF NOT THISFORM.oUser.lEmpty
		        THISFORM.oSecurity.RecordEvent(EVENT_SEC_GRPMEMBER, EVENT_TYPE_SECURITY, THIS.cUsername + ': ' + m.cList)
		      ENDIF
		    ENDIF
		    IF THISFORM.pgfPageFrame.pagPrivs.cntPrivs.lChanged
		      THISFORM.oUser.cPrivileges = THISFORM.pgfPageFrame.pagPrivs.cntPrivs.GetMoverValue()
		
		      * Store localized list of Privileges in event log entry.
		      THISFORM.pgfPageFrame.pagPrivs.cntPrivs.GetValueList(@m.cList)
		      IF NOT THISFORM.oUser.lEmpty
		        THISFORM.oSecurity.RecordEvent(EVENT_SEC_PRIV, EVENT_TYPE_SECURITY, THIS.cUsername + ': ' + m.cList)
		      ENDIF
		    ENDIF
		
		    * For a new key, make sure the correct name is set.
		    THISFORM.oUser.cName = ALLTRIM(THIS.cUserName)
		
		    * Store changed data back to original packed parameter string.
		    THISFORM.cUserKeyValue = THISFORM.oUser.Gather()
		    THIS.uValue = .T.
		  ENDIF
		  RETURN .T.
		
	ENDPROC

	PROCEDURE pgfPageFrame.pagGroups.Activate
		* Initialize the mover boxes the first time the page is activated.
		IF NOT THISFORM.aPageInitialized[THIS.PageOrder]
		  THISFORM.aPageInitialized[THIS.PageOrder] = .T.
		  THIS.cntGroups.SetMoverValue('Security.Groups', 'Group', THISFORM.oUser.cGroups)
		ENDIF
		
	ENDPROC

	PROCEDURE pgfPageFrame.pagGroups.RightClick
		THIS.Parent.RightClick(.T.)
		
	ENDPROC

	PROCEDURE pgfPageFrame.pagPassword.chkChangePassword.afterchange
		THIS.Parent.spnGrace.Refresh()
		
	ENDPROC

	PROCEDURE pgfPageFrame.pagPassword.chkChangePassword.showcontrol
		IF NOT ISNULL(THISFORM.oUser)
		  THIS.Enabled = THISFORM.oUser.lPasswordRequired
		ENDIF
		
	ENDPROC

	PROCEDURE pgfPageFrame.pagPassword.chkChangePassword.Valid
		IF DODEFAULT()
		   IF this.Parent.chkPasswordLocked.Value
		      this.Value = .f.
		   ENDIF
		ENDIF 
	ENDPROC

	PROCEDURE pgfPageFrame.pagPassword.chkPassword.formvalid
		WITH THISFORM.oUser
		  * Enforce password required setting now, unless user must change password on next login anyway.
		  IF .lPasswordRequired AND NOT .lPasswordMustChange AND EMPTY(.cPassword) AND NOT .lDisabled
		    THISFORM.DisplayMessage('%msgPasswordTooShort', .nMinPasswordLength)
		    RETURN .F.
		  ENDIF
		ENDWITH
		RETURN .T.
		
	ENDPROC

	PROCEDURE pgfPageFrame.pagPassword.chkPassword.Refresh
		THIS.Value = NOT EMPTY(THISFORM.oUser.cPassword)
		
	ENDPROC

	PROCEDURE pgfPageFrame.pagPassword.chkPassword.UIEnable
		LPARAMETER lEnable
		  IF m.lEnable
		    THIS.Refresh()
		  ENDIF
		
	ENDPROC

	PROCEDURE pgfPageFrame.pagPassword.chkPassword.Valid
		LOCAL oDialog
		
		  THIS.Value = NOT THIS.Value
		  m.oDialog = CreateLocalized(THISFORM.oSecurity.cSetPasswordDialogClass,, THISFORM.oUser)
		  m.oDialog.Show()
		  IF m.oDialog.uValue AND THISFORM.BeforeChange()
		    * Update time display of last password change
		    THIS.Parent.lblLastPasswordChange.Refresh()
		  ENDIF
		  THIS.Refresh()
		  RETURN .T.
		
	ENDPROC

	PROCEDURE pgfPageFrame.pagPassword.chkPasswordLocked.Click
		IF DODEFAULT()
		   IF this.Parent.chkchangepassword.value
		      this.Value = .f.
		   ENDIF
		ENDIF 
	ENDPROC

	PROCEDURE pgfPageFrame.pagPassword.chkPasswordRequired.afterchange
		THIS.Parent.Refresh()
		
	ENDPROC

	PROCEDURE pgfPageFrame.pagPassword.lblLastPasswordChange.Refresh
		IF NOT EMPTY(THISFORM.oUser.tLastPasswordChange)
		  THIS.Caption = THISFORM.oString.FormatDate(THISFORM.oUser.tLastPasswordChange) + ')'
		ENDIF
		
	ENDPROC

	PROCEDURE pgfPageFrame.pagPassword.lblLastPasswordChange.UIEnable
		LPARAMETERS lEnable
		
		IF m.lEnable
		  THIS.Refresh()
		ENDIF
		
	ENDPROC

	PROCEDURE pgfPageFrame.pagPassword.RightClick
		THIS.Parent.RightClick(.T.)
		
	ENDPROC

	PROCEDURE pgfPageFrame.pagPassword.spnGrace.afterchange
		THISFORM.oUser.nLoginsLeft = THISFORM.oUser.nGraceLogins
		
	ENDPROC

	PROCEDURE pgfPageFrame.pagPassword.spnGrace.showcontrol
		IF NOT ISNULL(THISFORM.oUser)
		  THIS.Enabled = THISFORM.oUser.lPasswordRequired ;
		                 AND (THISFORM.oUser.nPasswordLife > 0 OR THISFORM.oUser.lPasswordMustChange)
		ENDIF
		
	ENDPROC

	PROCEDURE pgfPageFrame.pagPassword.spnMinLength.showcontrol
		IF NOT ISNULL(THISFORM.oUser)
		  THIS.Enabled = THISFORM.oUser.lPasswordRequired
		ENDIF
		
	ENDPROC

	PROCEDURE pgfPageFrame.pagPassword.spnPasswordLife.afterchange
		THIS.Parent.spnGrace.Refresh()
		
	ENDPROC

	PROCEDURE pgfPageFrame.pagPassword.spnPasswordLife.DownClick
		THIS.Valid()
		
	ENDPROC

	PROCEDURE pgfPageFrame.pagPassword.spnPasswordLife.showcontrol
		IF NOT ISNULL(THISFORM.oUser)
		  THIS.Enabled = THISFORM.oUser.lPasswordRequired
		ENDIF
		
	ENDPROC

	PROCEDURE pgfPageFrame.pagPassword.spnPasswordLife.UpClick
		THIS.Valid()
		
	ENDPROC

	PROCEDURE pgfPageFrame.pagPrivs.Activate
		* Initialize the mover boxes the first time the page is activated.
		IF NOT THISFORM.aPageInitialized[THIS.PageOrder]
		  THISFORM.aPageInitialized[THIS.PageOrder] = .T.
		  THIS.cntPrivs.SetMoverValue('Security.Privileges', 'Privilege', THISFORM.oUser.cPrivileges)
		ENDIF
		
	ENDPROC

	PROCEDURE pgfPageFrame.pagPrivs.RightClick
		THIS.Parent.RightClick(.T.)
		
	ENDPROC

	PROCEDURE pgfPageFrame.pagUsers.lblLastLogon.Refresh
		LOCAL cTime
		
		* Format last logon time for display.
		IF NOT EMPTY(THISFORM.oUser.tLastLogonTime)
		  m.cTime = TTOC(THISFORM.oUser.tLastLogonTime)
		  THIS.Caption = THISFORM.oString.FormatDate(THISFORM.oUser.tLastLogonTime) + SUBSTR(m.cTime, AT(' ', m.cTime))
		ENDIF
		
	ENDPROC

	PROCEDURE pgfPageFrame.pagUsers.Refresh
		* Refresh the last-logon time label. Labels are not automaticaly refreshed in VFP5.0+ as in 3.0
		THIS.lblLastLogon.Refresh()
		
	ENDPROC

	PROCEDURE pgfPageFrame.pagUsers.RightClick
		THIS.Parent.RightClick(.T.)
		
	ENDPROC

	PROCEDURE pgfPageFrame.pagUsers.txtUsername.fieldvalid
		LOCAL cMsg
		
		  DO CASE
		    CASE '.' $ THIS.Value OR ',' $ THIS.Value
		      m.cMsg = '%MsgUserBadName'
		    CASE THISFORM.oRegistry.GetKeyValueEx('Security.Users.' + THIS.Value)
		      m.cMsg = '%MsgUserNotUnique'
		  ENDCASE
		  IF NOT EMPTY(m.cMsg)
		    THISFORM.DisplayMessage(m.cMsg)
		    RETURN 0
		  ENDIF
		  RETURN .T.
		
	ENDPROC

	PROCEDURE pgfPageFrame.pagUsers.txtUsername.Refresh
		THIS.lReadOnly = NOT THISFORM.lEditName
		DODEFAULT()
		
	ENDPROC

	PROCEDURE pgfPageFrame.pagUsers.txtUsername.storetranslation
		LPARAMETER cValue
		  RETURN ALLTRIM(m.cValue)
		
	ENDPROC

ENDDEFINE
