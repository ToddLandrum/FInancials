*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="cmactivx.vcx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS oleimagelist AS olecontrol 
 	*< CLASSDATA: Baseclass="olecontrol" Timestamp="" Scale="Pixels" Uniqueid="" Nombre="oleimagelist" Parent="" ObjName="oleimagelist" OLEObject="C:\WINDOWS\SYSTEM\COMCTL32.OCX" Value="0M8R4KGxGuEAAAAAAAAAAAAAAAAAAAAAPgADAP7/CQAGAAAAAAAAAAAAAAABAAAAAQAAAAAAAAAAEAAAAgvbwBvAHQAIABFAG4AdAByAHkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWAAUA//////////8BAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMA5SSmWZL8BAwAAAEABAAAAAAAAAwBPAGwAZQBPAGIAagBlAGMAdABEAGEAdABhAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4AAgEDAAAAAgAAAP////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAXAAAAAAAAAADAEEAYwBjAGUAcwBzAE8AYgBqAFMAaQB0AGUARABhAHQAYQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJgACAP///////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAABPAAAAAAAAAAMAQwBoAGEAbgBnAGUAZABQAHIAbwBwAHMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcAAIA////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAAQAAAAAAAAABAAAAAIAAAD+/////v////7///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////+PjdpYap0bEK/AQhAQKo2nIUM0EggAAADtAwAA7QMAAIB+4eYCAAUAIAAAAAAAAADAwMAA//8AAAHvzasAAAUATwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAABcAAAA4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgcWhqIFp0dVFoYTtqZGZuW2lhZXRyIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA0EiFggYAAAD/////BQAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==" ProjectClassIcon="..\graphics\imglist.bmp" ClassIcon="..\graphics\imglist.bmp" />

	Height = 100
	Name = "oleimagelist"
	Width = 100

ENDDEFINE

DEFINE CLASS oleimagelist6 AS olecontrol 
 	*< CLASSDATA: Baseclass="olecontrol" Timestamp="" Scale="Pixels" Uniqueid="" Nombre="oleimagelist6" Parent="" ObjName="oleimagelist6" OLEObject="C:\WINDOWS\SYSTEM\MSCOMCTL.OCX" Value="0M8R4KGxGuEAAAAAAAAAAAAAAAAAAAAAPgADAP7/CQAGAAAAAAAAAAAAAAABAAAAAQAAAAAAAAAAEAAAAgvbwBvAHQAIABFAG4AdAByAHkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWAAUA//////////8BAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOAibjeWZL8BAwAAAEABAAAAAAAAAwBPAGwAZQBPAGIAagBlAGMAdABEAGEAdABhAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4AAgEDAAAAAgAAAP////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAXAAAAAAAAAADAEEAYwBjAGUAcwBzAE8AYgBqAFMAaQB0AGUARABhAHQAYQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJgACAP///////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAABcAAAAAAAAAAMAQwBoAGEAbgBnAGUAZABQAHIAbwBwAHMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcAAIA////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAAQAAAAAAAAABAAAAAIAAAD+/////vjfyQskYXREbFqAMDwKDYoIUM0EggAAADtAwAA7QMAAIB+4eYAAAYAIAAAAAAAAADAwMAA//9uAAHvzasAAAUAXAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAACQAAAA4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA5MzY4MjY1RS04NUZFLTExZDEtOEJFMy0wMDAwRjg3NTREQTEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfEeFggYAZAD/////BQAAgHxHhYIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==" ProjectClassIcon="..\graphics\imglist.bmp" ClassIcon="..\graphics\imglist.bmp" />

	Height = 41
	Name = "oleimagelist6"
	Width = 40

ENDDEFINE

DEFINE CLASS olelistview AS olecontrol 		&& ActiveX List View Control
 	*< CLASSDATA: Baseclass="olecontrol" Timestamp="" Scale="Pixels" Uniqueid="" Nombre="olelistview" Parent="" ObjName="olelistview" OLEObject="C:\WINDOWS\SYSTEM\comctl32.ocx" Value="0M8R4KGxGuEAAAAAAAAAAAAAAAAAAAAAPgADAP7/CQAGAAAAAAAAAAAAAAABAAAAAQAAAAAAAAAAEAAAAgvbwBvAHQAIABFAG4AdAByAHkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWAAUA//////////8BAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAICZ6Px348EBAwAAAEABAAAAAAAAAwBPAGwAZQBPAGIAagBlAGMAdABEAGEAdABhAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4AAgEDAAAAAgAAAP////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbgAAAAAAAAADAEEAYwBjAGUAcwBzAE8AYgBqAFMAaQB0AGUARABhAHQAYQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJgACAP///////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAABPAAAAAAAAAAMAQwBoAGEAbgBnAGUAZABQAHIAbwBwAHMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcAAIA////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAAQAAAAAAAAABAAAAAIAAAD+/////vjdpYap0bEK/AQhAQKo2nIUM0EggAAABWCgAAVgoAAAA22PQCAAUAHAAAAAAAAAAAAAAAAAYAAFYKAAAB782rTwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAABcAAAA4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgcWhqIFp0dVFoYTtqZGZuW2lhZXRyIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFAAAQ14IGAAAACAAAgAUAAID4CIQAAAAAAAAAAAAf3uy9AQAFAMjGx4IAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADMxIDQ0OCA1iDmCAA==" ProjectClassIcon="..\graphics\lstview.bmp" ClassIcon="..\graphics\lstview.bmp" />

	#INCLUDE "codemine.h"
	*<DefinedPropArrayMethod>
		*m: contextmenubuild
		*m: contextmenuexecute
		*p: cdisplayname		&& Display name
		*p: chelpkey
		*p: creposition		&& Reposition options: Vfollow,Vstretch,Vcenter,Hfollow,Hstretch,Hcenter
		*p: nbottom		&& Internal use for cReposition options.
		*p: ncontrolflags		&& Internal control bit flags
		*p: nright		&& Internal use for cReposition options.
	*</DefinedPropArrayMethod>

	cdisplayname = 		&& Display name
	chelpkey = 
	creposition = 		&& Reposition options: Vfollow,Vstretch,Vcenter,Hfollow,Hstretch,Hcenter
	Height = 100
	Name = "olelistview"
	nbottom = .NULL.		&& Internal use for cReposition options.
	ncontrolflags = 0		&& Internal control bit flags
	nright = .NULL.		&& Internal use for cReposition options.
	Width = 100
	
	PROCEDURE contextmenubuild
		*++
		* Build Default context menu items.
		*--
		  IF PEMSTATUS(THISFORM, 'DisplayHelp', 5)
		    THISFORM.ContextMenuBar(CTX_BAR_CTL_HELP, '%barHelp')
		    THISFORM.ContextMenuSeparator(CTX_BAR_CTL_SEP1)
		  ENDIF
		
	ENDPROC

	PROCEDURE contextmenuexecute
		LPARAMETER cOption
		  m.cOption = PROPER(m.cOption)
		  DO CASE
		    CASE m.cOption = '%barhelp'
		      THISFORM.DisplayHelp(THIS)    && And display the help dialog.
		  ENDCASE
		
	ENDPROC

	PROCEDURE Error
		LPARAMETERS nError, cMethod, nLine
		LOCAL cMsg
		
		  m.cMsg = MESSAGE()   && Save error message text - TYPE() may override it.
		
		  * Fatal coding error - Pass it on to CodeMine Application error handler if available.
		  IF VARTYPE(THISFORM.oMessage) == 'O'
		    RETURN THISFORM.oMessage.FatalError(m.cMsg, m.cMethod, m.nLine)
		  ENDIF
		
		  * Not in a Codemine form, or no message handler object.
		  ERROR 'Error at line ' + LTRIM(STR(m.nLine)) + ' of ' + m.cMethod + CHR(13) + m.cMsg
		
	ENDPROC

	PROCEDURE MouseUp
		LPARAMETERS nButton, nShift, x, y
		*++
		* Put up context menu if supported for this form.
		*--
		LOCAL cOption
		
		  IF m.nButton = 2 AND m.nShift = 0
		    IF PEMSTATUS(THISFORM, 'ContextMenuInit', 5)
		      IF THISFORM.ContextMenuInit() AND THIS.ContextMenuBuild()
		
		        * Move focus off outline and disable it while menu is open. This prevents 
		        * the main VFP window from changing to inactive colors while the menu is open.
		        IF TYPE('THISFORM.chkTemporaryFocus___.Name') != 'C'
		          THISFORM.AddObject('chkTemporaryFocus___', 'Checkbox')
		          WITH THISFORM.chkTemporaryFocus___
		            .Top = -50
		            .Tabstop = .F.
		            .Visible = .T.
		          ENDWITH
		        ENDIF
		        THISFORM.chkTemporaryFocus___.Setfocus()
		
		        THIS.Enabled = .F.
		        m.cOption = THISFORM.ContextMenuActivate()
		        THIS.Enabled = .T.
		        THIS.Setfocus()
		
		        IF NOT EMPTY(m.cOption)
		          THIS.ContextMenuExecute(m.cOption)
		        ENDIF
		      ENDIF
		    ENDIF
		  ENDIF
		
	ENDPROC

ENDDEFINE

DEFINE CLASS olelistview6 AS olecontrol 
 	*< CLASSDATA: Baseclass="olecontrol" Timestamp="" Scale="Pixels" Uniqueid="" Nombre="olelistview6" Parent="" ObjName="olelistview6" OLEObject="C:\WINNT\system32\mscomctl.ocx" Value="0M8R4KGxGuEAAAAAAAAAAAAAAAAAAAAAPgADAP7/CQAGAAAAAAAAAAAAAAABAAAAAQAAAAAAAAAAEAAAAgvbwBvAHQAIABFAG4AdAByAHkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWAAUA//////////8BAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEASE36lLcUBAwAAAEABAAAAAAAAAwBPAGwAZQBPAGIAagBlAGMAdABEAGEAdABhAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4AAgEDAAAAAgAAAP////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcgAAAAAAAAADAEEAYwBjAGUAcwBzAE8AYgBqAFMAaQB0AGUARABhAHQAYQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJgACAP///////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAABcAAAAAAAAAAMAQwBoAGEAbgBnAGUAZABQAHIAbwBwAHMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcAAIA////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAAQAAAAAAAAABAAAAAIAAAD+/////vi4XREbFqAMDwKDYoIUM0EggAAADXGQAA/QsAAE4IfesBAAYAHAAAAAAAAAAAAAAAAAYAANcZAAAB782rXAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAACQAAAA4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA5MzY4MjY1RS04NUZFLTExZDEtOEJFMy0wMDAwRjg3NTREQTEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFAJCapncHgJhwCAAAgAUAAIAAAQOAAAAAAAAAAAAAAAAAH97svQEABQBoRh0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==" ProjectClassIcon="..\graphics\lstview.bmp" ClassIcon="..\graphics\lstview.bmp" />

	#INCLUDE "codemine.h"
	*<DefinedPropArrayMethod>
		*m: add		&& Adds a new member to a Collection.
		*m: builditem		&& Custom developer code to build the contents of each list item.
		*m: buildlist		&& Custom developer code to build the contents of the list display.
		*m: contextmenubuild
		*m: contextmenuexecute
		*m: delete		&& Delete Event.
		*m: hittestp		&& HitTest() method in units of pixels for correct operation with VFP.
		*m: isreloadneeded
		*m: loaddata
		*m: needrebuild
		*m: rebuild
		*m: _rebuildcontrol
		*p: cdisplayname		&& Control display name
		*p: chelpkey		&& Help key name
		*p: creposition		&& Reposition options: Vfollow,Vstretch,Vcenter,Hfollow,Hstretch,Hcenter
		*p: cworkarea
		*p: ldragcanstart		&& Internal flag set to .T. if MouseMove can start a drag operation.
		*p: nbottom		&& Internal use for cReposition options.
		*p: ncontrolflags		&& Internal control bit flags
		*p: nright		&& Internal use for cReposition options.
		*p: ntwipconvertx
		*p: ntwipconverty
	*</DefinedPropArrayMethod>

	cdisplayname = 		&& Control display name
	chelpkey = 		&& Help key name
	creposition = 		&& Reposition options: Vfollow,Vstretch,Vcenter,Hfollow,Hstretch,Hcenter
	Height = 116
	Name = "olelistview6"
	nbottom = .NULL.		&& Internal use for cReposition options.
	ncontrolflags = 0		&& Internal control bit flags
	nright = .NULL.		&& Internal use for cReposition options.
	ntwipconvertx = 1
	ntwipconverty = 1
	Width = 250
	
	PROCEDURE add		&& Adds a new member to a Collection.
		*++
		* Add a new row to the end of the current navigation array. The current record in the
		* control workarea contains the new record to reference.
		*--
		LOCAL nNewRow, nCol, cEmpty, cExpressions
		
		  m.nNewRow = -1
		  WITH THIS
		    * Rebuild the control if parent changed since last refresh, or rebuild explicitly requested via flag.
		    IF THIS._RebuildControl()
		      * For table-buffered cursors, the new row may already exist in the control
		      * since we just rebuilt the full contents.
		      m.nNewRow = ._Findrow(RECNO(.cWorkarea))
		    ENDIF
		
		    IF m.nNewRow < 0
		      * Remove global "Empty" display, if present.
		      .SetEmpty(.F.)
		
		      * Add the new row to the control.
		      m.nNewRow = .AddItem(.BuildRow())
		      .ListData(m.nNewRow) = RECNO()
		      .ListSubText(m.nNewRow) = .BuildSubtext()
		      .ListSubHeight(m.nNewRow) = .CalcSubTextHeight(m.nNewRow)
		    ENDIF
		    .ListIndex = m.nNewRow
		
		    * Translate NewText string on first use, if necessary.
		    IF LEFT(.cNewText, 1) = '%' AND NOT ISNULL(THISFORM.oMessage)
		      .cNewText = THISFORM.oMessage.TranslateString(.cNewText)
		    ENDIF
		    m.cExpressions = CHRTRAN(.cNewText, '|', ';')
		    FOR nCol = 1 TO .ColumnCount
		      m.cEmpty = GetToken(@m.cExpressions, ';')
		      IF EMPTY(.CellText(m.nNewRow, m.nCol))
		        .CellText(m.nNewRow, m.nCol) = m.cEmpty
		      ENDIF
		    ENDFOR
		  ENDWITH
		  RETURN .T.
		
	ENDPROC

	PROCEDURE builditem		&& Custom developer code to build the contents of each list item.
		*++
		* Return text to add to the current row on rebuild/refresh.
		*
		* Returning an empty string during rebuild will skip that row.
		*--
		  RETURN ''
		
	ENDPROC

	PROCEDURE buildlist		&& Custom developer code to build the contents of the list display.
	ENDPROC

	PROCEDURE Click
		LPARAMETERS nRow
		* Triggered when row changes.
		
		  IF NOT EMPTY(THIS.cWorkarea) AND THIS.ListIndex >= 0
		    LOCAL nNewRec
		    m.nNewRec = THIS.ListData(m.nRow)
		    IF NOT EMPTY(m.nNewRec) AND m.nNewRec != RECNO(THIS.cWorkarea)
		      IF NOT THISFORM.Goto(m.nNewRec, THIS.cWorkarea)
		        * If record couldn't move, make sure we correctly display whatever record we are left on.
		        THIS.Refresh()
		        RETURN .F.
		      ENDIF
		    ENDIF
		  ENDIF
		  RETURN .T.
		
	ENDPROC

	PROCEDURE contextmenubuild
		*++
		* Build Default context menu items.
		*--
		  IF PEMSTATUS(THISFORM, 'DisplayHelp', 5)
		    THISFORM.ContextMenuBar(CTX_BAR_CTL_HELP, '%barHelp')
		    THISFORM.ContextMenuSeparator(CTX_BAR_CTL_SEP1)
		  ENDIF
		
	ENDPROC

	PROCEDURE contextmenuexecute
		LPARAMETER cOption
		  m.cOption = PROPER(m.cOption)
		  DO CASE
		    CASE m.cOption = '%barhelp'
		      THISFORM.DisplayHelp(THIS)    && And display the help dialog.
		  ENDCASE
		
	ENDPROC

	PROCEDURE DblClick
		IF NOT EMPTY(THIS.cWorkarea) AND THISFORM.IsEnabled('Edit', THIS.cWorkarea)
		  THISFORM.Edit(THIS.cWorkarea)
		ENDIF
		
	ENDPROC

	PROCEDURE delete		&& Delete Event.
		*++
		* Delete the current navigation array row.
		*--
		LOCAL ix, nCol, cExpressions
		
		  m.ix = THIS.ListIndex
		
		  * If the current record is not deleted, assume the current list 
		  * row was removed from the edit buffer but still needs to be removed from the list.
		  IF m.ix >= 0 AND THIS.ListCount > 0 ;
		  AND (NOT DELETED(THIS.cWorkarea) OR RECNO(THIS.cWorkarea) = THIS.ListData(m.ix))
		    THIS.RemoveItem(m.ix)
		    IF THIS.ListCount = 0
		      THIS.SetEmpty(.T.)
		    ENDIF
		  ENDIF
		
	ENDPROC

	PROCEDURE Error
		LPARAMETERS nError, cMethod, nLine
		LOCAL cMsg
		
		  m.cMsg = MESSAGE()   && Save error message text - TYPE() may override it.
		
		  * Fatal coding error - Pass it on to CodeMine Application error handler if available.
		  IF VARTYPE(THISFORM.oMessage) == 'O'
		    RETURN THISFORM.oMessage.FatalError(m.cMsg, m.cMethod, m.nLine)
		  ENDIF
		
		  * Not in a Codemine form, or no message handler object.
		  ERROR 'Error at line ' + LTRIM(STR(m.nLine)) + ' of ' + m.cMethod + CHR(13) + m.cMsg
		
	ENDPROC

	PROCEDURE GotFocus
		* Context menu may get left stuck open, so we need to clear it here.
		* Release all the bars first, so menu manager will know to ignore BAR() function results.
		RELEASE BAR ALL OF ctxMenu
		DEACTIVATE POPUP ctxMenu
		
		* If there is no selected row, select the first row on focus.
		IF THIS.Selected < 0
		  THIS.Selected = 0
		ENDIF
		
	ENDPROC

	PROCEDURE hittestp		&& HitTest() method in units of pixels for correct operation with VFP.
		LPARAMETERS x, y
		
		  * Convert coordinates to pixels and pass on to default code.
		  RETURN THIS.HitTest(m.x * THIS.nTwipConvertX, m.y * THIS.nTwipConvertY)
		
	ENDPROC

	PROCEDURE Init
		* Get conversion rates between Twips and Pixels
		LOCAL nHWnd, nHDC
		
		  * Declare some Windows API functions
		  DECLARE INTEGER GetActiveWindow IN win32api
		  DECLARE INTEGER GetDC           IN win32api INTEGER nHDC
		  DECLARE INTEGER GetDeviceCaps   IN win32api INTEGER nHDC, INTEGER nIndex
		*  DECLARE INTEGER GetKeyState     IN win32api INTEGER nKey
		
		  * Get the VFP window information
		  nHWnd = GetActiveWindow()
		  nHDC  = GetDC(m.nHWnd)
		
		  THIS.nTwipConvertX = 1440 / GetDeviceCaps(m.nHDC, 88)  && 88 = X pixels
		  THIS.nTwipConvertY = 1440 / GetDeviceCaps(m.nHDC, 90)  && 90 = Y pixels
		
		  * Add custom runtime properties
		  THIS.AddProperty('nControlFlags', 0)
		  THIS.AddProperty('nLastSearch', 0)
		  THIS.AddProperty('cSearchText', '')
		  THIS.AddProperty('lNeedRebuild', .T.)
		  THIS.AddProperty('lNeedReload', .T.)
		  THIS.AddProperty('cParentKey', '')
		  THIS.AddProperty('uParentKeyValue')
		
	ENDPROC

	PROCEDURE isreloadneeded
		*++
		* Determine if the parent record has moved, or some other condition requires a requery of source cursors.
		*
		* May be overridden to provide any additional criteria that would require a requery of the source.
		*--
		  IF NOT EMPTY(THIS.cParentKey) ;
		  AND (VARTYPE(THIS.uParentKeyValue) = 'L' OR NOT THIS.uParentKeyValue == EVALUATE(THIS.cParentKey))
		    * Remember the current parent record, so we can check for change on the next refresh.
		    THIS.uParentKeyValue = EVALUATE(THIS.cParentKey)
		    RETURN .T.
		  ENDIF
		  RETURN .F.
		
	ENDPROC

	PROCEDURE loaddata
		*++
		* Custom developer code to build the list items.
		*--
		  IF NOT EMPTY(THIS.cParentKey)
		    THIS.uParentKeyValue = EVALUATE(THIS.cParentKey)
		  ENDIF
		  RETURN .T.
		
	ENDPROC

	PROCEDURE MouseDown
		LPARAMETERS button, shift, x, y
		LOCAL oNode
		
		  IF THIS.DragMode = 1
		    m.oNode = THIS.HitTestP(x, y)
		    IF NOT ISNULL(m.oNode)
		      THIS.lDragCanStart = .T.
		    ENDIF
		  ENDIF
		
	ENDPROC

	PROCEDURE MouseMove
		LPARAMETERS nButton, shift, x, y
		LOCAL oNode
		
		  IF THIS.DragMode = 1
		    m.oNode = THIS.HitTestP(x, y)
		    IF NOT ISNULL(m.oNode) AND THIS.lDragCanStart
		      IF m.nButton = 1
		        THIS.Drag()
		      ENDIF
		    ENDIF
		    THIS.lDragCanStart = .F.
		  ENDIF
		
	ENDPROC

	PROCEDURE MouseUp
		LPARAMETERS nButton, nShift, x, y
		*++
		* Put up context menu if supported for this form.
		*--
		LOCAL cOption
		
		  IF THIS.DragMode = 1
		    THIS.lDragCanStart = .F.
		    THIS.DropHighlight = .NULL.
		  ENDIF
		
		  IF m.nButton = 2 AND m.nShift = 0
		    IF PEMSTATUS(THISFORM, 'ContextMenuInit', 5)
		      IF THISFORM.ContextMenuInit() AND THIS.ContextMenuBuild()
		
		        * Move focus off outline and disable it while menu is open. This prevents 
		        * the main VFP window from changing to inactive colors while the menu is open.
		        IF TYPE('THISFORM.chkTemporaryFocus___.Name') != 'C'
		          THISFORM.AddObject('chkTemporaryFocus___', 'Checkbox')
		          WITH THISFORM.chkTemporaryFocus___
		            .Top = -50
		            .Tabstop = .F.
		            .Visible = .T.
		          ENDWITH
		        ENDIF
		        THISFORM.chkTemporaryFocus___.Setfocus()
		
		        THIS.Enabled = .F.
		        m.cOption = THISFORM.ContextMenuActivate()
		        THIS.Enabled = .T.
		        THIS.Setfocus()
		
		        IF NOT EMPTY(m.cOption)
		          THIS.ContextMenuExecute(m.cOption)
		        ENDIF
		      ENDIF
		    ENDIF
		  ENDIF
		
	ENDPROC

	PROCEDURE needrebuild
		* Set flag to rebuild on next refresh
		THIS.lNeedRebuild = .T.
		
	ENDPROC

	PROCEDURE rebuild
		IF NOT EMPTY(THIS.cWorkarea) AND BITTEST(THIS.nControlFlags, CTLFLAG_INITIALIZED)
		  LOCAL nRow, nSelect, nRecno, cRowItem, cAlias
		
		  m.nSelect = SELECT()
		  SELECT (THIS.cWorkarea)
		  m.nRecno = RECNO()
		
		  * If Row-Buffering Open the table in another workarea so we dont mess up buffering.
		  * If table buffering, use cursor directly, so we have access to modified data in the update buffer.
		  IF CURSORGETPROP('Buffering', THIS.cWorkarea) <=3
		    UseAgain(THIS.cWorkarea)
		  ENDIF
		
		  * Remember the alias we are using (temp or original)
		  m.cAlias = ALIAS()
		
		  THIS.ClearList()
		  IF EMPTY(THIS.cFilter)
		    THIS.cFilter = '.T.'
		  ENDIF
		
		  SCAN FOR EVALUATE(THIS.cFilter)
		    m.cRowItem = THIS.BuildRow()
		    IF NOT EMPTY(m.cRowItem)
		      m.nRow = THIS.AddItem(m.cRowItem)
		      THIS.ListData(m.nRow) = RECNO()
		*      THIS.FormatRow(m.nRow)
		    ENDIF
		  ENDSCAN
		
		  * Set the initial selected row to reflect current record.
		  THIS.ListIndex = THIS._FindRow(m.nRecno)
		
		  * Restore original record position, or close clone as appropriate.
		  SELECT (m.cAlias)  && Setting ListIndex can trigger Change(), which can change workareas.
		  IF ALIAS() == UPPER(TRIM(THIS.cWorkarea))
		    IF m.nRecno <= RECCOUNT()
		      GOTO (m.nRecno)
		    ENDIF
		  ELSE
		    USE   && Close temporary workarea
		  ENDIF
		  SELECT (m.nSelect)
		ENDIF
		
	ENDPROC

	PROCEDURE Refresh
		LOCAL ix, nSelect
		
		* If called before Init() event completes, we don't do anything. All CodeMine controls
		* need to allow for the possibility of Refresh() being called before Init(), since user
		* code in controls lower in Z order may trigger the refresh of other controls.
		IF PEMSTATUS(THIS, 'nControlFlags', 5)
		  WITH THIS
		    * For this control, we also do nothing until FirstDraw() event has completed.
		    IF BITTEST(.nControlFlags, CTLFLAG_INITIALIZED)
		      THIS._RebuildControl()
		
		      IF .ListCount = 0
		        .ListIndex = -1
		      ELSE
		        IF .ListIndex = 0 OR RECNO(.cWorkarea) != .ListData(.ListIndex)
		          .ListIndex = THIS._FindRow(RECNO(.cWorkarea))
		        ENDIF
		
		        * Update the displayed text for the current record on each refresh
		        IF .ListIndex >= 0
		          m.nSelect = SELECT()
		          SELECT (.cWorkarea)
		          .ListText(.ListIndex) = .BuildRow()
		          .ListSubText(.ListIndex) = .BuildSubtext()
		          .ListSubHeight(.ListIndex) = .CalcSubTextHeight(.ListIndex) + .nRowHeightPad
		          .FormatRow(.ListIndex)
		          SELECT (m.nSelect)
		        ENDIF
		      ENDIF
		    ENDIF
		  ENDWITH
		ENDIF
		
	ENDPROC

	PROCEDURE UIEnable
		LPARAMETERS lEnable
		
		* Refresh navigator whenever it's page activates.
		IF m.lEnable
		  THIS.Refresh()   && will call rebuild() if needed
		ENDIF
		
	ENDPROC

	PROCEDURE _rebuildcontrol
		*++
		* Call LoadData() and Rebuild() as necessary to maintain correct data in the display.
		*
		* Return True if contents were rebuilt, or false if not.
		*--
		
		  * The first time run, check properties and remember parent cursor key info.
		  IF NOT BITTEST(THIS.nControlFlags, CTLFLAG_INITIALIZED)
		    LOCAL oCursor
		    IF EMPTY(THIS.cWorkarea) OR NOT USED(THIS.cWorkarea)
		      RETURN .F.
		    ENDIF
		    THIS.lNeedReload = .T.
		    THIS.cWorkarea = PROPER(THIS.cWorkarea)
		    THIS.nControlFlags = BITSET(THIS.nControlFlags, CTLFLAG_INITIALIZED)
		    m.oCursor = THISFORM.oCDE.GetCursor(THIS.cWorkarea)
		    IF NOT ISNULL(m.oCursor) AND NOT ISNULL(m.oCursor.oParent)
		      WITH m.oCursor.oParent
		        THIS.cParentKey = .cWorkarea + '.' + .cPrimaryKeyField
		      ENDWITH
		    ENDIF
		    THISFORM.cmDataManager.RegisterNavControl(THIS, THIS.cWorkarea, THISFORM)
		  ENDIF
		
		  WITH THIS
		    * Always call IsReloadNeeded() first, because it sets "currently loaded" properties.
		    IF THIS.IsReloadNeeded() OR .lNeedReload
		      .lNeedReload = .F.
		      .lNeedRebuild = .T.
		      .LoadData()    && Reload/Requery any cursor data the control is built from.
		    ENDIF
		
		    IF .lNeedRebuild
		      .lNeedRebuild = .F.
		      .Rebuild()     && Rebuild the control contents
		      RETURN .T.
		    ENDIF
		  ENDWITH
		  RETURN .F.
		
	ENDPROC

ENDDEFINE

DEFINE CLASS oleoutline AS olecontrol 		&& ActiveX Outline control
 	*< CLASSDATA: Baseclass="olecontrol" Timestamp="" Scale="Pixels" Uniqueid="" Nombre="oleoutline" Parent="" ObjName="oleoutline" OLEObject="C:\WINDOWS\SYSTEM\MSOUTL32.OCX" Value="0M8R4KGxGuEAAAAAAAAAAAAAAAAAAAAAPgADAP7/CQAGAAAAAAAAAAAAAAABAAAAAQAAAAAAAAAAEAAAAgvbwBvAHQAIABFAG4AdAByAHkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWAAUA//////////8BAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAECVml28rbwBAwAAAEABAAAAAAAAAwBPAGwAZQBPAGIAagBlAGMAdABEAGEAdABhAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4AAgEDAAAAAgAAAP////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWAAAAAAAAAADAEEAYwBjAGUAcwBzAE8AYgBqAFMAaQB0AGUARABhAHQAYQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJgACAP///////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAABcAAAAAAAAAAMAQwBoAGEAbgBnAGUAZABQAHIAbwBwAHMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcAAIA////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAAQAAAAAAAAABAAAAAIAAAD+/////vk++ya4aEJR7AN0BD3tGAAABAFYKAABWCgAATQAAAAAAAADY0LgAAANS4wuRj84RneMAqgBLuFEBAAAAkAGQXAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAACQAAAA4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA3NUUwNUZFMC01OUQ2LTEwMUItQTNDOS0wODAwMkIyRjQ5RkLQzxHgobEa4QAAAAAAAAAAAAAAAAAAAAA+AAMA/v8JAAYAAAABAACA0M8R4KGxGuEAAAAAAAAAAAAAAAAAAAAAPgADAP7/CQAGAAAAAAAAAAAAAAABAAAAAQAAAAAAAAAAEAAAXwEABUFyaWFsAQEAAAD/AVwDAP//////AAAAAD4AAwD+/wkABgAAAAAAAAAAAAAAAQAAAAEAAAAAAAAAABAAAP///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////zypgQAMAIEAAImBAA==" ProjectClassIcon="..\graphics\outline.bmp" ClassIcon="..\graphics\outline.bmp" />

	#INCLUDE "codemine.h"
	*<DefinedPropArrayMethod>
		*m: contextmenubuild		&& Define all the bars for a context menu. Return false if no bars are defined
		*m: contextmenuexecute
		*p: cdisplayname		&& User-friendly control name for help and error messages
		*p: chelpkey		&& Help message key name
		*p: creposition		&& Reposition options: Vfollow,Vstretch,Vcenter,Hfollow,Hstretch,Hcenter
		*p: nbottom		&& Offset of bottom edge from bottom of parent container.
		*p: nright		&& Offset of right edge from right of parent container.
	*</DefinedPropArrayMethod>

	cdisplayname = 		&& User-friendly control name for help and error messages
	chelpkey = 		&& Help message key name
	creposition = 		&& Reposition options: Vfollow,Vstretch,Vcenter,Hfollow,Hstretch,Hcenter
	Height = 100
	Name = "oleoutline"
	nbottom = .NULL.		&& Offset of bottom edge from bottom of parent container.
	nright = .NULL.		&& Offset of right edge from right of parent container.
	Width = 100
	
	PROCEDURE contextmenubuild		&& Define all the bars for a context menu. Return false if no bars are defined
		THISFORM.ContextMenuBar(CTX_BAR_CTL_HELP, '%barHelp')
		
	ENDPROC

	PROCEDURE contextmenuexecute
		LPARAMETER cOption
		  m.cOption = PROPER(m.cOption)
		  DO CASE
		    CASE m.cOption = '%barhelp'
		      IF PEMSTATUS(THISFORM, 'DisplayHelp', 5)
		        THISFORM.DisplayHelp(THIS)
		      ENDIF
		    OTHERWISE
		      RETURN .F.
		  ENDCASE
		  RETURN .T.
		
	ENDPROC

	PROCEDURE MouseDown
		LPARAMETERS nButton, nShift, x, y
		  *++
		  * Put up context menu if supported for this form.
		  *--
		  LOCAL cOption
		
		  IF m.nButton = 2 AND m.nShift = 0
		    IF PEMSTATUS(THISFORM, 'ContextMenuInit', 5) AND THISFORM.ContextMenuInit()
		      THIS.ContextMenuBuild()
		
		      * Move focus off outline and disable it while menu is open.
		      IF TYPE('THISFORM.chkTemporaryFocus___.Name') != 'C'
		        THISFORM.AddObject('chkTemporaryFocus___', 'Checkbox')
		        WITH THISFORM.chkTemporaryFocus___
		          .Top = -100
		          .Left = -100
		          .Width = 10
		          .Tabstop = .F.
		          .Visible = .T.
		        ENDWITH
		      ENDIF
		      THISFORM.chkTemporaryFocus___.Setfocus()
		      THIS.Enabled = .F.
		      m.cOption = THISFORM.ContextMenuActivate()
		      THIS.Enabled = .T.
		      THIS.Setfocus()
		
		      IF NOT EMPTY(m.cOption)
		        THIS.ContextMenuExecute(m.cOption)
		      ENDIF
		    ENDIF
		  ENDIF
		
	ENDPROC

ENDDEFINE

DEFINE CLASS olerichtextbox AS olecontrol 		&& Rich Text control
 	*< CLASSDATA: Baseclass="olecontrol" Timestamp="" Scale="Pixels" Uniqueid="" Nombre="olerichtextbox" Parent="" ObjName="olerichtextbox" OLEObject="C:\WINDOWS\SYSTEM\richtx32.ocx" Value="0M8R4KGxGuEAAAAAAAAAAAAAAAAAAAAAPgADAP7/CQAGAAAAAAAAAAAAAAABAAAAAQAAAAAAAAAAEAAAAgvbwBvAHQAIABFAG4AdAByAHkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWAAUA//////////8BAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOAnvA1448EBAwAAAEABAAAAAAAAAwBPAGwAZQBPAGIAagBlAGMAdABEAGEAdABhAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4AAgEDAAAAAgAAAP////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfAAAAAAAAAADAEEAYwBjAGUAcwBzAE8AYgBqAFMAaQB0AGUARABhAHQAYQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJgACAP///////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAABPAAAAAAAAAAMAQwBoAGEAbgBnAGUAZABQAHIAbwBwAHMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcAAIA////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAACkAAAAAAAAABAAAAAIAAAD+/////vgiHw7j9cbELm1BAIcAJQCIUM0EggAAABCFAAATQkAACFDNBIBAAYAMAAAAAAAAQAAAAEAAQAAAAAAtEQAgB1GTwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAABcAAAA4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgcWhqIFp0dVFoYTtqZGZuW2lhZXRyIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAACADAAAAFJpZ2h0TWFyZ2luABEAAABODQAAAAcAAAAAAAAAALDDQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUAAIAAAAAAAAABAAAAAQABAAIAAgAAAANS4wuRj84RneMAqgBLuFEBAAAAkAGQXwEABUFyaWFsAAAAADcyMHtcZm9udHRibHtcZjBcZnN3aXNzIE1TIFNhbnMgU2VyaWY7fXtcZjFcZnJvbWFuXGZjaGFyc2V0MiBTeW1ib2w7fXtcZjJcZnN3aXNzIEFyaWFsO317XGYzXGZzd2lzcyBBcmlhbDt9fQ0Ke1xjb2xvcnRibFxyZWQwXGdyZWVuMFxibHVlMDt9DQpcZGVmbGFuZzEwMzNccGFyZFxwbGFpblxmMlxmczE4IA0KXHBhciB9DQoAAQAAAJABkA==" ProjectClassIcon="..\graphics\richtext.bmp" ClassIcon="..\graphics\richtext.bmp" />

	#INCLUDE "codemine.h"
	*<DefinedPropArrayMethod>
		*m: afterchange		&& Event occurs after the control's value has been changed and written back to bound source.
		*m: applysecurity		&& Evaluate security access for the control.
		*m: beforechange		&& Determine if it is OK to interactively change the control's value.
		*m: contextmenubuild		&& Add context menu bars
		*m: contextmenuexecute		&& Execute context menu options
		*m: formvalid		&& Form level control validation code goes here. Must return .T. before changes can be committed.
		*m: getvalue		&& Return the current value of the control
		*m: loadtranslation		&& Data translation moving into the control value.
		*m: loadvalue		&& Load control value
		*m: set		&& Set various control properties. Parameters are property name and value to set.
		*m: setvalue		&& Set the control's value, along with any bound data source
		*m: showcontrol		&& Update control display to reflect current readonly/enable/disable state.
		*m: storetranslation		&& Data translation moving out of the control value
		*m: storevalue		&& Store control value back to datasource
		*m: undochanges		&& Undo changes that have not yet been written to bound data source.
		*p: cdisplayname		&& User-friendly control name for help and error messages
		*p: cencryptionkey		&& Encryption key for editing encrypted data
		*p: chelpkey
		*p: creadonlydisplay
		*p: creadprivilege		&& Privilege required to display data in this field.
		*p: creposition		&& Reposition options: Vfollow,Vstretch,Vcenter,Hfollow,Hstretch,Hcenter
		*p: cvaluesource		&& Data source bound to this control.
		*p: cworkarea		&& If cValueSource is a table/view field cWorkarea hold the workarea alias.
		*p: cwriteprivilege		&& Privilege required to modify data in this field.
		*p: lchanged		&& Set to true if data was changed interactively.
		*p: lenabled		&& Desired enable state
		*p: lnativebinding		&& Set to .T. if Binding Manager should use native VFP binding for the control. Only .F. is supported for this control.
		*p: lnoinitdata		&& Set True to bypass data load on Init. Useful when cValueSource is derived from Form.Init() parameters.
		*p: lreadlock		&& Read lock prevents veiwing of control data.
		*p: lreadonly		&& Desired readonly state.
		*p: lrequired		&& If True a value must be entered before changes can be saved.
		*p: lwraptowidth		&& When .T. right margin always matches right edge of the control.
		*p: lwritelock		&& Set to value of LOCKED property on each refresh. Used by form.FormValid() method to determine readonly state.
	*</DefinedPropArrayMethod>

	cdisplayname = 		&& User-friendly control name for help and error messages
	cencryptionkey = 		&& Encryption key for editing encrypted data
	chelpkey = 
	creadonlydisplay = Dim
	creadprivilege = 		&& Privilege required to display data in this field.
	creposition = 		&& Reposition options: Vfollow,Vstretch,Vcenter,Hfollow,Hstretch,Hcenter
	cvaluesource = 		&& Data source bound to this control.
	cworkarea = 		&& If cValueSource is a table/view field cWorkarea hold the workarea alias.
	cwriteprivilege = 		&& Privilege required to modify data in this field.
	Height = 90
	lenabled = .T.		&& Desired enable state
	lwraptowidth = .T.		&& When .T. right margin always matches right edge of the control.
	Name = "olerichtextbox"
	Width = 196
	
	PROCEDURE afterchange		&& Event occurs after the control's value has been changed and written back to bound source.
		* Custom developer hook
		RETURN .T.
		
	ENDPROC

	PROCEDURE applysecurity		&& Evaluate security access for the control.
		*++
		*>>Evaluate security access for the control.
		* Responsible for setting THIS.lWriteLock and THIS.lReadLock
		* Implemented as a separate method to make it easy for developers to
		* subclasses for special security requirements.
		*--
		  IF NOT EMPTY(THIS.cReadprivilege)
		    THIS.lReadLock = NOT THISFORM.oSecurity.HasPrivilege(THIS.cReadPrivilege)
		  ENDIF
		
		  * If its not readable, its not writable either.
		  IF THIS.lReadLock
		    THIS.Locked = .T.
		  ELSE
		    IF NOT EMPTY(THIS.cWritePrivilege)
		      THIS.Locked = NOT THISFORM.oSecurity.HasPrivilege(THIS.cWritePrivilege)
		    ENDIF
		  ENDIF
		
	ENDPROC

	PROCEDURE beforechange		&& Determine if it is OK to interactively change the control's value.
		*++
		*>>Determine if it is OK to interactively change the control's value.
		* Sets the lChanged flag for the control on success.
		*--
		  RETURN THISFORM.cmBindingManager.BeforeChange(THIS)
		
	ENDPROC

	PROCEDURE Change
		* Note that unlike InteractiveChange() events of native controls, 
		* this event fires for programmatic value cahnges as well as interactive.
		IF NOT THIS.Locked  && If read-only, we know this is a programatic change
		  IF BITTEST(THIS.nControlFlags, CTLFLAG_ESCAPE)
		    THIS.nControlFlags = BITCLEAR(THIS.nControlFlags, CTLFLAG_ESCAPE)
		    THIS.UndoChanges()
		  ELSE
		    IF NOT THIS.lChanged AND NOT THIS.BeforeChange()
		      * At this point, value has already changed, so 
		      * if changes are not allowed, we must restore original value.
		      THIS.UndoChanges()
		      RETURN .F.
		    ENDIF
		  ENDIF
		ENDIF
		RETURN .T.
		
	ENDPROC

	PROCEDURE contextmenubuild		&& Add context menu bars
		RETURN .T.
		
	ENDPROC

	PROCEDURE contextmenuexecute		&& Execute context menu options
		LPARAMETER cOption
		*++
		*>>Execute the selected context menu item. Usually called directly from context menu activation.
		* May also be called directly under program control to simulate user action.
		*--
		  RETURN THISFORM.cmBindingManager.ContextMenuExecute(THIS, @m.cOption)
		
	ENDPROC

	PROCEDURE Error
		LPARAMETERS nError, cMethod, nLine
		LOCAL cMsg
		
		  m.cMsg = MESSAGE()   && Save error message text - TYPE() may override it.
		
		  * Fatal coding error - Pass it on to CodeMine Application error handler if available.
		  IF VARTYPE(THISFORM.oMessage) == 'O'
		    RETURN THISFORM.oMessage.FatalError(m.cMsg, m.cMethod, m.nLine)
		  ENDIF
		
		  * Not in a Codemine form, or no message handler object.
		  ERROR 'Error at line ' + LTRIM(STR(m.nLine)) + ' of ' + m.cMethod + CHR(13) + m.cMsg
		
	ENDPROC

	PROCEDURE formvalid		&& Form level control validation code goes here. Must return .T. before changes can be committed.
		*++
		*>>Form level control validation code goes here. Must return .T. before changes can be committed.
		* Success return: .T.
		* Failure return: .F.
		*--
		LOCAL lRequired
		  m.lRequired = THIS.lRequired
		  * If we are bound to a cursor field, and in a form with a data manager, evaluate the IsRequiredRule().
		  IF NOT EMPTY(THIS.cWorkarea)
		    IF PEMSTATUS(THISFORM, 'cmDataManager', 5)
		      m.lRequired = m.lRequired OR THISFORM.cmDataManager.IsRequired(THIS.cWorkarea, THIS.cValueSource)
		    ENDIF
		  ENDIF
		  IF m.lRequired AND EMPTY(NVL(THIS.Text, ''))  && Test the text property, not the full RTF code
		    THISFORM.DisplayMessage('%msgFieldRequired', THISFORM.NiceName(THIS))
		    RETURN .F.
		  ENDIF
		  RETURN .T.
		
	ENDPROC

	PROCEDURE getvalue		&& Return the current value of the control
		RETURN THIS.TextRtf
		
	ENDPROC

	PROCEDURE GotFocus
		  * Save the undo value for the control, if it has not yet been modified.
		  IF NOT THIS.lChanged
		    THIS.LoadValue()             && Make sure most current data is loaded
		
		    * If an unbound control, store "undo" value here.
		    IF EMPTY(THIS.cValueSource)
		      THIS.uOriginalValue = THIS.GetValue()
		    ENDIF
		  ENDIF
		
	ENDPROC

	PROCEDURE Init
		*++
		* Codemine Foundation ActiveX Rich Text edit control
		*
		* Copyright 1996-2001 Soft Classics, Ltd. All rights reserved.
		*--
		  * Use our manually implimented control value datasource.
		  ASSERT EMPTY(THIS.ControlSource) AND EMPTY(THIS.lNativeBinding) ;
		         MESSAGE 'Controlsource must be empty and lNativeBinding False. Use cValueSource instead.'
		
		  * Always wrap to the current display width.
		  IF THIS.lWrapToWidth
		    THIS.RightMargin = THIS.Width - 25
		  ENDIF
		
		  * Set lReadonly if the control locked property is set.
		  IF THIS.Locked
		    THIS.lReadOnly = .T.
		  ENDIF
		
		  * Make sure binding manager is instantiated.
		  IF NOT PEMSTATUS(THISFORM, 'cmBindingManager', 5)
		    THISFORM.AddObject('cmBindingManager', 'cmBindingManager')
		  ENDIF
		
		  * Process common data-bound control binding initialization.
		  THISFORM.cmBindingManager.InitBinding(THIS)
		
	ENDPROC

	PROCEDURE KeyPress
		LPARAMETERS nKeyCode
		  * For data characters, check if changes are allowed before accepting the character.
		  * Any changes not caught here will be handled by this.Change()
		  IF NOT THIS.lChanged AND (m.nKeyCode % 128 >= ASC(' ') OR m.nKeyCode = 7) AND NOT THIS.BeforeChange()
		    NODEFAULT
		  ENDIF
		  RETURN .T.
		
	ENDPROC

	PROCEDURE loadtranslation		&& Data translation moving into the control value.
		LPARAMETER cValue
		*++
		*>>Translate bound data value into a format suitable for display.
		*--
		  IF NOT EMPTY(THIS.cEncryptionKey)
		    RETURN cmEncrypt(m.cValue, THIS.cEncryptionKey)
		  ENDIF
		  RETURN m.cValue
		
	ENDPROC

	PROCEDURE loadvalue		&& Load control value
		*++
		* Load value property from cValuesource.
		*--
		LOCAL uValue
		  THIS.lChanged = .T.    && Prevent BeforeChanged() event from firing on value change.
		  IF THISFORM.cmBindingManager.LoadValue(THIS, @m.uValue)
		    THIS.TextRTF = m.uValue
		    RETURN .T.
		  ENDIF
		  RETURN .F.
		
	ENDPROC

	PROCEDURE LostFocus
		*++
		*>>If value has changed, Store it back to cValueSource.
		*--
		  * This control has no Valid() event, so we use LostFocus Instead.
		  * Don't store if not enabled, which usually means a context menu was activated.
		  IF THIS.lChanged AND THIS.Enabled
		    THIS.StoreValue()  && Also Results in a call to AfterChange() event
		  ENDIF
		  RETURN .T.
		
	ENDPROC

	PROCEDURE MouseDown
		LPARAMETERS nButton, nShift, x, y
		*++
		* Put up context menu if supported for this form.
		*--
		LOCAL cOption
		
		  IF m.nButton = 2 AND m.nShift = 0
		    IF PEMSTATUS(THISFORM, 'ContextMenuInit', 5)
		      IF THISFORM.ContextMenuInit() AND THISFORM.cmBindingManager.ContextMenuBuild(THIS)
		        * Move focus off rich textbox and disable it while menu is open.
		        THIS.Enabled = .F.
		        THISFORM.FlushControlBuffer()
		        m.cOption = THISFORM.ContextMenuActivate()
		        THIS.Enabled = .T.
		        THISFORM.ActivateNextControl(THIS)
		
		        IF NOT EMPTY(m.cOption)
		          THIS.ContextMenuExecute(m.cOption)
		        ENDIF
		      ENDIF
		    ENDIF
		  ENDIF
		
	ENDPROC

	PROCEDURE Refresh
		*++
		* Reinitialize display buffers from control's data source.
		*--
		  IF BITTEST(THIS.nControlFlags, CTLFLAG_VALUE_LOADED)
		    THIS.nControlFlags = BITCLEAR(THIS.nControlFlags, CTLFLAG_VALUE_LOADED)
		  ELSE
		    THIS.ShowControl()
		    THIS.LoadValue()
		  ENDIF
		
	ENDPROC

	PROCEDURE Resize
		IF THIS.lWrapToWidth
		  * Always wrap to the current display width. Resize is called when control is first
		  * created, before RightMargin property is available. So we check the form's
		  * Visible property - if it is visible, we know form.init() is complete. 
		  IF THISFORM.Visible
		    THIS.RightMargin = THIS.Width - 25
		  ENDIF
		ENDIF
		
	ENDPROC

	PROCEDURE set		&& Set various control properties. Parameters are property name and value to set.
		LPARAMETERS cProperty, uValue
		*++
		*>>Set various control properties. Parameters are property name and value to set.
		*--
		  m.cProperty = LOWER(m.cProperty)
		  DO CASE
		    CASE 'readonly' $ m.cProperty
		      THIS.lReadonly = m.uValue
		      THIS.ShowControl()
		
		    CASE 'enabled' $ m.cProperty
		      THIS.lEnabled = m.uValue
		      THIS.ShowControl()
		
		    CASE INLIST(m.cProperty, 'cvaluesource', 'controlsource')
		      THIS.cWorkarea = ''
		      THIS.cValueSource = m.uValue
		      THISFORM.cmBindingManager.LoadWorkarea(THIS)
		      THIS.Refresh()
		
		    OTHERWISE
		      STORE m.uValue TO ('THIS.' + m.cProperty)
		  ENDCASE
		
	ENDPROC

	PROCEDURE setvalue		&& Set the control's value, along with any bound data source
		LPARAMETER cNewValue
		*++
		*>>Set the control's value
		*--
		  * Call form's change handler first for data-bound controls.
		  IF NOT THIS.lChanged AND NOT EMPTY(THIS.cValueSource)
		    IF PEMSTATUS(THISFORM, 'BeforeChange', 5)
		      IF NOT IIF(EMPTY(THIS.cWorkarea), THISFORM.BeforeChange(), THISFORM.BeforeChange(THIS.cWorkarea))
		        RETURN .F.
		      ENDIF
		    ENDIF
		  ENDIF
		
		  * Set value and store it. 
		  * We don't use BindMan.Setvalue() here, since this control does not support field level validation.
		  THIS.TextRTF = m.cNewValue
		  THIS.StoreValue()
		  RETURN .T.
		
	ENDPROC

	PROCEDURE showcontrol		&& Update control display to reflect current readonly/enable/disable state.
		*++
		*>>Re-evaluate security access, and update control display to reflect current state.
		*--
		LOCAL lOldWriteLock
		  * Apply desired Read-only condition, and then apply security and datasource restrictions.
		  m.lOldWriteLock = THIS.Locked
		  THIS.Locked = THIS.lReadOnly
		
		  * Check privileges and apply new setting of read-only attribute
		  THIS.ApplySecurity()
		
		  * Check for no data or Write-Protect (explicit edit mode).
		  IF NOT THIS.Locked AND NOT EMPTY(THIS.cValueSource)
		    IF EMPTY(THIS.cWorkarea)
		      THIS.Locked = NOT THISFORM.IsEditAllowed()  && Only pass workarea parameter if non-empty
		    ELSE
		      THIS.Locked = NOT THISFORM.IsEditAllowed(THIS.cWorkarea, SUBSTR(THIS.cValueSource, RAT('.', THIS.cValueSource) + 1))
		    ENDIF
		  ENDIF
		
		  * Apply or remove readonly display effect if read-only condition changed.
		  IF NOT m.lOldWriteLock == THIS.Locked
		    IF 'DIM' $ THIS.cReadOnlyDisplay
		      IF THIS.Locked
		        IF ISNULL(THIS.nBackColor)
		          THIS.nBackColor = THIS.BackColor
		          THIS.BackColor = THISFORM.BackColor
		        ENDIF
		      ELSE
		        IF NOT ISNULL(THIS.nBackColor)
		          THIS.BackColor = THIS.nBackColor
		          THIS.nBackColor = .NULL.
		        ENDIF
		      ENDIF
		    ENDIF
		  ENDIF
		
		  * Copy locked value where the frmForm.FormValid() method expects to find it.
		  THIS.lWriteLock = THIS.Locked
		
	ENDPROC

	PROCEDURE storetranslation		&& Data translation moving out of the control value
		LPARAMETER cValue
		*++
		*>>Translate control value into a format suitable for storage in bound data source.
		*--
		  IF NOT EMPTY(THIS.cEncryptionKey)
		    RETURN cmEncrypt(m.cValue, THIS.cEncryptionKey)
		  ENDIF
		  RETURN m.cValue
		
	ENDPROC

	PROCEDURE storevalue		&& Store control value back to datasource
		*++
		* Write value back to data source using table or memvar syntax as appropriate.
		*--
		  RETURN THISFORM.cmBindingManager.StoreValue(THIS, THIS.TextRTF)
		
	ENDPROC

	PROCEDURE UIEnable
		LPARAMETERS lEnableEvent
		*++
		* Controls in a page need to be refreshed when the page activates
		* because they miss refresh events when their page is inactive.
		*--
		  * Pages in Forms instaniated from a VCX trigger UIenable events for the initial active
		  * page, before the form is visible. We ignore these events, as they can mess up lNoInitData.
		  IF m.lEnableEvent AND THISFORM.Visible
		    THIS.nControlFlags = BITCLEAR(THIS.nControlFlags, CTLFLAG_VALUE_LOADED)
		    THIS.Refresh()
		  ENDIF
		
	ENDPROC

	PROCEDURE undochanges		&& Undo changes that have not yet been written to bound data source.
		*++
		*>>Undo changes to the current textbox, and restore original value.
		*--
		  IF EMPTY(THIS.cValueSource)
		    THIS.TextRtf = THIS.uOriginalValue
		  ELSE
		    THIS.LoadValue()
		  ENDIF
		  THIS.lChanged = .F.
		
	ENDPROC

ENDDEFINE

DEFINE CLASS oleslider AS olecontrol 		&& Activex Slider Control
 	*< CLASSDATA: Baseclass="olecontrol" Timestamp="" Scale="Pixels" Uniqueid="" Nombre="oleslider" Parent="" ObjName="oleslider" OLEObject="C:\WINDOWS\SYSTEM\comctl32.ocx" Value="0M8R4KGxGuEAAAAAAAAAAAAAAAAAAAAAPgADAP7/CQAGAAAAAAAAAAAAAAABAAAAAQAAAAAAAAAAEAAAAgvbwBvAHQAIABFAG4AdAByAHkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWAAUA//////////8BAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACHXCB448EBAwAAAEABAAAAAAAAAwBPAGwAZQBPAGIAagBlAGMAdABEAGEAdABhAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4AAgEDAAAAAgAAAP////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAAAAAAADAEEAYwBjAGUAcwBzAE8AYgBqAFMAaQB0AGUARABhAHQAYQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJgACAP///////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAABPAAAAAAAAAAMAQwBoAGEAbgBnAGUAZABQAHIAbwBwAHMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcAAIA////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAAQAAAAAAAAABAAAAAIAAAD+/////v////7////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////w9z83i+vNEYggCAArL09aIUM0EggAAABmEgAA5QIAAIZ+4eYCAAUAHAAAAAAAAAAFAAAAAQAAAAAAAAAKAAAATwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAABcAAAA4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgcWhqIFp0dVFoYTtqZGZuW2lhZXRyIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABDAAAAAAAAAAAAAAAAAAEAAAAAAAAAAe/NqwAABQAAAAAAAgBzAAAAAADYzLgAYFPIgh/e7L0BAAUAYFPIgv///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////w==" />

	*<DefinedPropArrayMethod>
		*p: cdisplayname		&& User-friendly control name for help and error messages
		*p: chelpkey		&& Codemine context Help key identifier
		*p: creposition		&& Reposition options: Vfollow,Vstretch,Vcenter,Hfollow,Hstretch,Hcenter
		*p: nbottom		&& Offset of bottom edge from bottom of parent container.
		*p: ncontrolflags		&& Internal control state flag bitmask
		*p: nright		&& Offset of right edge from right of parent container.
	*</DefinedPropArrayMethod>

	cdisplayname = 		&& User-friendly control name for help and error messages
	chelpkey = 		&& Codemine context Help key identifier
	creposition = 		&& Reposition options: Vfollow,Vstretch,Vcenter,Hfollow,Hstretch,Hcenter
	Height = 28
	Name = "oleslider"
	nbottom = .NULL.		&& Offset of bottom edge from bottom of parent container.
	ncontrolflags = 0		&& Internal control state flag bitmask
	nright = .NULL.		&& Offset of right edge from right of parent container.
	Width = 178
	
	PROCEDURE Error
		LPARAMETERS nError, cMethod, nLine
		LOCAL cMsg
		
		  m.cMsg = MESSAGE()   && Save error message text - TYPE() may override it.
		
		  * Fatal coding error - Pass it on to CodeMine Application error handler if available.
		  IF VARTYPE(THISFORM.oMessage) == 'O'
		    RETURN THISFORM.oMessage.FatalError(m.cMsg, m.cMethod, m.nLine)
		  ENDIF
		
		  * Not in a Codemine form, or no message handler object.
		  ERROR 'Error at line ' + LTRIM(STR(m.nLine)) + ' of ' + m.cMethod + CHR(13) + m.cMsg
		
	ENDPROC

ENDDEFINE

DEFINE CLASS oletreeview AS olecontrol 		&& ActiveX Tree Outline Control
 	*< CLASSDATA: Baseclass="olecontrol" Timestamp="" Scale="Pixels" Uniqueid="" Nombre="oletreeview" Parent="" ObjName="oletreeview" OLEObject="C:\WINDOWS\SYSTEM\comctl32.ocx" Value="0M8R4KGxGuEAAAAAAAAAAAAAAAAAAAAAPgADAP7/CQAGAAAAAAAAAAAAAAABAAAAAQAAAAAAAAAAEAAAAgvbwBvAHQAIABFAG4AdAByAHkAAAD///////////////////////////////////////////////////////8WAAUA//////////8BAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD//////////0CY3uh348EBAwAAAEABAAD/////AwBPAGwAZQBPAGIAagBlAGMAdABEAGEAdABhAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4AAgEDAAAAAgAAAP////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZgAAAAAAAAADAEEAYwBjAGUAcwBzAE8AYgBqAFMAaQB0AGUARABhAHQAYQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJgACAP///////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAABPAAAAAAAAAAMAQwBoAGEAbgBnAGUAZABQAHIAbwBwAHMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcAAIA////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAAQAAAAAAAAABAAAAAIAAAD+/////vi6BMHCoUbEK/AQhAQKo2nIUM0EggAAABKFQAAeQsAAI5+4eYCAAUAIgAAAJwAAADoAwAAAQAAAAHvzasAAAUATwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAABcAAAA4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgcWhqIFp0dVFoYTtqZGZuW2lhZXRyIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA+BP4vwYAAAAAAAAABQAAgBivpQABAAAAXAAf3uy9AQAFAGBTyIIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////zMxIDQ0OCA1iDmCAA==" ProjectClassIcon="..\graphics\treeview.bmp" ClassIcon="..\graphics\treeview.bmp" />

	#INCLUDE "codemine.h"
	*<DefinedPropArrayMethod>
		*m: contextmenubuild		&& Build custom context menu.
		*m: contextmenuexecute		&& Execute context menu items.
		*p: cdisplayname		&& User-friendly control name for help and error messages
		*p: chelpkey		&& Codemine Context help key name
		*p: creposition		&& Reposition options: Vfollow,Vstretch,Vcenter,Hfollow,Hstretch,Hcenter
		*p: nbottom		&& Offset of bottom edge from bottom of parent container.
		*p: ncontrolflags		&& Internal control state flag bitmask
		*p: nright		&& Offset of right edge from right of parent container.
	*</DefinedPropArrayMethod>

	cdisplayname = 		&& User-friendly control name for help and error messages
	chelpkey = 		&& Codemine Context help key name
	creposition = 		&& Reposition options: Vfollow,Vstretch,Vcenter,Hfollow,Hstretch,Hcenter
	Height = 111
	Name = "oletreeview"
	nbottom = .NULL.		&& Offset of bottom edge from bottom of parent container.
	ncontrolflags = 0		&& Internal control state flag bitmask
	nright = .NULL.		&& Offset of right edge from right of parent container.
	Width = 206
	
	PROCEDURE contextmenubuild		&& Build custom context menu.
		  IF PEMSTATUS(THISFORM, 'DisplayHelp', 5)
		    THISFORM.ContextMenuBar(CTX_BAR_CTL_HELP, '%barHelp')
		    THISFORM.ContextMenuSeparator(CTX_BAR_CTL_SEP1)
		  ENDIF
		
	ENDPROC

	PROCEDURE contextmenuexecute		&& Execute context menu items.
		LPARAMETER cOption
		  m.cOption = PROPER(m.cOption)
		  DO CASE
		    CASE m.cOption = '%barhelp'
		      THISFORM.DisplayHelp(THIS)    && Display the help dialog.
		    OTHERWISE
		      RETURN .F.                    && Return false if we didnt process the item.
		  ENDCASE
		  RETURN .T.
		
	ENDPROC

	PROCEDURE Error
		LPARAMETERS nError, cMethod, nLine
		LOCAL cMsg
		
		  m.cMsg = MESSAGE()   && Save error message text - TYPE() may override it.
		
		  * Fatal coding error - Pass it on to CodeMine Application error handler if available.
		  IF VARTYPE(THISFORM.oMessage) == 'O'
		    RETURN THISFORM.oMessage.FatalError(m.cMsg, m.cMethod, m.nLine)
		  ENDIF
		
		  * Not in a Codemine form, or no message handler object.
		  ERROR 'Error at line ' + LTRIM(STR(m.nLine)) + ' of ' + m.cMethod + CHR(13) + m.cMsg
		
	ENDPROC

	PROCEDURE MouseUp
		LPARAMETERS nButton, nShift, x, y
		*++
		* Put up context menu if supported for this form.
		*--
		LOCAL cOption
		
		  IF m.nButton = 2 AND m.nShift = 0
		    IF PEMSTATUS(THISFORM, 'ContextMenuInit', 5)
		      IF THISFORM.ContextMenuInit() AND THIS.ContextMenuBuild()
		
		        * Move focus off outline and disable it while menu is open. This prevents 
		        * the main VFP window from changing to inactive colors while the menu is open.
		        IF TYPE('THISFORM.chkTemporaryFocus___.Name') != 'C'
		          THISFORM.AddObject('chkTemporaryFocus___', 'Checkbox')
		          WITH THISFORM.chkTemporaryFocus___
		            .Top = -50
		            .Tabstop = .F.
		            .Visible = .T.
		          ENDWITH
		        ENDIF
		        THISFORM.chkTemporaryFocus___.Setfocus()
		
		        m.cOption = THISFORM.ContextMenuActivate()
		        THIS.Setfocus()
		
		        IF NOT EMPTY(m.cOption)
		          THIS.ContextMenuExecute(m.cOption)
		        ENDIF
		      ENDIF
		    ENDIF
		  ENDIF
		
	ENDPROC

ENDDEFINE

DEFINE CLASS oletreeview6 AS olecontrol 
 	*< CLASSDATA: Baseclass="olecontrol" Timestamp="" Scale="Pixels" Uniqueid="" Nombre="oletreeview6" Parent="" ObjName="oletreeview6" OLEObject="C:\WINDOWS\SYSTEM\MSCOMCTL.OCX" Value="0M8R4KGxGuEAAAAAAAAAAAAAAAAAAAAAPgADAP7/CQAGAAAAAAAAAAAAAAABAAAAAQAAAAAAAAAAEAAAAgvbwBvAHQAIABFAG4AdAByAHkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWAAUA//////////8BAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGB6pE5348EBAwAAAEABAAAAAAAAAwBPAGwAZQBPAGIAagBlAGMAdABEAGEAdABhAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4AAgEDAAAAAgAAAP////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAagAAAAAAAAADAEEAYwBjAGUAcwBzAE8AYgBqAFMAaQB0AGUARABhAHQAYQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJgACAP///////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAABcAAAAAAAAAAMAQwBoAGEAbgBnAGUAZABQAHIAbwBwAHMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcAAIA////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAAQAAAAAAAAABAAAAAIAAAD+/////vkEHHiYXREbFqAMDwKDYoIUM0EggAAACjEwAAGAwAALE8wWoBAAYAIgAAANxkAGToAwAASGRpdCEGhAAB782rXAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAACQAAAA4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA5MzY4MjY1RS04NUZFLTExZDEtOEJFMy0wMDAwRjg3NTREQTEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFAPAHhAAGAHIzAAAAAAUAAIAgr6UAAQAAAFwAH97svQEABQAor6UAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOScgwA=" ProjectClassIcon="..\graphics\treeview.bmp" ClassIcon="..\graphics\treeview.bmp" />

	#INCLUDE "codemine.h"
	*<DefinedPropArrayMethod>
		*m: buildnode		&& Custom developer code to build the contents of each node.
		*m: buildtree		&& Custom developer code to build the contents of the tree display.
		*m: contextmenubuild		&& Build context menu items
		*m: contextmenuexecute		&& Execute context menu options.
		*m: hittestp		&& Hit test method that accepts coordinates in units of pixels.
		*p: cdisplayname
		*p: chelpkey
		*p: creposition		&& Reposition options: Vfollow,Vstretch,Vcenter,Hfollow,Hstretch,Hcenter
		*p: ldragcanstart		&& Flag set to .t. if mousemove can start a drag. Set to .NULL. at design time to disable start of drag operations.
		*p: nbottom
		*p: ncontrolflags
		*p: nright
		*p: ntwipconvertx		&& Conversion ratio between twips and pixels
		*p: ntwipconverty		&& Conversion ratio between twips and pixels
	*</DefinedPropArrayMethod>

	cdisplayname = 
	chelpkey = 
	creposition = 		&& Reposition options: Vfollow,Vstretch,Vcenter,Hfollow,Hstretch,Hcenter
	DragIcon = ..\graphics\dragmove.cur
	Height = 117
	Name = "oletreeview6"
	nbottom = .NULL.
	ncontrolflags = 0
	nright = .NULL.
	ntwipconvertx = 1		&& Conversion ratio between twips and pixels
	ntwipconverty = 1		&& Conversion ratio between twips and pixels
	Width = 190
	
	PROCEDURE buildnode		&& Custom developer code to build the contents of each node.
	ENDPROC

	PROCEDURE buildtree		&& Custom developer code to build the contents of the tree display.
	ENDPROC

	PROCEDURE contextmenubuild		&& Build context menu items
		  IF PEMSTATUS(THISFORM, 'DisplayHelp', 5)
		    THISFORM.ContextMenuBar(CTX_BAR_CTL_HELP, '%barHelp')
		    THISFORM.ContextMenuSeparator(CTX_BAR_CTL_SEP1)
		  ENDIF
		
	ENDPROC

	PROCEDURE contextmenuexecute		&& Execute context menu options.
		LPARAMETER cOption
		  m.cOption = PROPER(m.cOption)
		  DO CASE
		    CASE m.cOption = '%barhelp'
		      THISFORM.DisplayHelp(THIS)    && Display the help dialog.
		    OTHERWISE
		      RETURN .F.                    && Return false if we didnt process the item.
		  ENDCASE
		  RETURN .T.
		
	ENDPROC

	PROCEDURE Error
		LPARAMETERS nError, cMethod, nLine
		LOCAL cMsg
		
		  m.cMsg = MESSAGE()   && Save error message text - TYPE() may override it.
		
		  * Fatal coding error - Pass it on to CodeMine Application error handler if available.
		  IF VARTYPE(THISFORM.oMessage) == 'O'
		    RETURN THISFORM.oMessage.FatalError(m.cMsg, m.cMethod, m.nLine)
		  ENDIF
		
		  * Not in a Codemine form, or no message handler object.
		  ERROR 'Error at line ' + LTRIM(STR(m.nLine)) + ' of ' + m.cMethod + CHR(13) + m.cMsg
		
	ENDPROC

	PROCEDURE hittestp		&& Hit test method that accepts coordinates in units of pixels.
		LPARAMETERS x, y
		
		  * Convert coordinates to pixels and pass on to default code.
		  RETURN THIS.HitTest(m.x * THIS.nTwipConvertX, m.y * THIS.nTwipConvertY)
		
	ENDPROC

	PROCEDURE Init
		* Get conversion rates between Twips and Pixels
		LOCAL nHWnd, nHDC
		
		  * Declare some Windows API functions
		  DECLARE INTEGER GetActiveWindow IN win32api
		  DECLARE INTEGER GetDC           IN win32api INTEGER nHDC
		  DECLARE INTEGER GetDeviceCaps   IN win32api INTEGER nHDC, INTEGER nIndex
		  DECLARE INTEGER GetKeyState     IN win32api INTEGER nKey
		
		  * Get the VFP window information
		  nHWnd = GetActiveWindow()
		  nHDC  = GetDC(m.nHWnd)
		
		  THIS.nTwipConvertX = 1440 / GetDeviceCaps(m.nHDC, 88)  && 88 = X pixels
		  THIS.nTwipConvertY = 1440 / GetDeviceCaps(m.nHDC, 90)  && 90 = Y pixels
		
	ENDPROC

	PROCEDURE MouseDown
		LPARAMETERS button, shift, x, y
		LOCAL oNode
		
		  IF NOT ISNULL(THIS.lDragCanStart)
		    m.oNode = THIS.HitTestP(x, y)
		    IF NOT ISNULL(m.oNode)
		      THIS.lDragCanStart = .T.
		    ENDIF
		  ENDIF
		
	ENDPROC

	PROCEDURE MouseMove
		LPARAMETERS nButton, shift, x, y
		LOCAL oNode
		
		  IF NOT ISNULL(THIS.lDragCanStart)
		    IF THIS.lDragCanStart
		      m.oNode = THIS.HitTestP(x, y)
		      IF NOT ISNULL(m.oNode)
		        IF m.nButton = 1
		          m.oNode.Selected = .T.
		          THIS.Drag(1)
		        ENDIF
		      ENDIF
		    ENDIF
		    THIS.lDragCanStart = .F.
		  ENDIF
		
	ENDPROC

	PROCEDURE MouseUp
		LPARAMETERS nButton, nShift, x, y
		*++
		* Put up context menu if supported for this form.
		*--
		LOCAL cOption
		
		  IF NOT ISNULL(THIS.lDragCanStart)
		    THIS.lDragCanStart = .F.
		    THIS.DropHighlight = .NULL.
		  ENDIF
		
		  IF m.nButton = 2 AND m.nShift = 0
		    IF PEMSTATUS(THISFORM, 'ContextMenuInit', 5)
		      IF THISFORM.ContextMenuInit() AND THIS.ContextMenuBuild()
		
		        * Move focus off outline and disable it while menu is open. This prevents 
		        * the main VFP window from changing to inactive colors while the menu is open.
		        IF TYPE('THISFORM.chkTemporaryFocus___.Name') != 'C'
		          THISFORM.AddObject('chkTemporaryFocus___', 'Checkbox')
		          WITH THISFORM.chkTemporaryFocus___
		            .Top = -50
		            .Tabstop = .F.
		            .Visible = .T.
		          ENDWITH
		        ENDIF
		        THISFORM.chkTemporaryFocus___.Setfocus()
		
		        m.cOption = THISFORM.ContextMenuActivate()
		        THIS.Setfocus()
		
		        IF NOT EMPTY(m.cOption)
		          THIS.ContextMenuExecute(m.cOption)
		        ENDIF
		      ENDIF
		    ENDIF
		  ENDIF
		
	ENDPROC

ENDDEFINE
