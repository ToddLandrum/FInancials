*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="cmsetup.vcx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
*< LIBCOMMENT: CodeMine application manager class and associated form classes />
*
DEFINE CLASS frminstallconfirm AS form 		&& Installation file path error confirmation dialog.
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="lblPath" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbltext1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbltext2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Imgimage1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdCancel" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdOK" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: returnvalue
	*</DefinedPropArrayMethod>

	AlwaysOnTop = .T.
	AutoCenter = .T.
	BorderStyle = 2
	Caption = "Bad Path"
	ControlBox = .F.
	Desktop = .T.
	DoCreate = .T.
	Height = 140
	MaxButton = .F.
	MinButton = .F.
	Name = "frminstallconfirm"
	ShowWindow = 2
	Width = 487
	WindowType = 1

	ADD OBJECT 'cmdCancel' AS commandbutton WITH ;
		Cancel = .T., ;
		Caption = "\<Cancel", ;
		FontSize = 8, ;
		Height = 23, ;
		Left = 248, ;
		Name = "cmdCancel", ;
		TabIndex = 2, ;
		Top = 108, ;
		Width = 75
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'cmdOK' AS commandbutton WITH ;
		Caption = "\<Reinstall", ;
		Default = .T., ;
		FontSize = 8, ;
		Height = 23, ;
		Left = 162, ;
		Name = "cmdOK", ;
		TabIndex = 1, ;
		Top = 108, ;
		Width = 75
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'Imgimage1' AS image WITH ;
		Height = 32, ;
		Left = 13, ;
		Name = "Imgimage1", ;
		Picture = ..\graphics\w95mbx1.bmp, ;
		Top = 12, ;
		Width = 32
		*< END OBJECT: BaseClass="image" />

	ADD OBJECT 'lblPath' AS label WITH ;
		Caption = "Path", ;
		FontBold = .T., ;
		Height = 17, ;
		Left = 57, ;
		Name = "lblPath", ;
		TabIndex = 3, ;
		Top = 7, ;
		Width = 339
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Lbltext1' AS label WITH ;
		Caption = "The data file path is no longer valid. The directory may have been deleted, or a required network connection may not exist.", ;
		Height = 33, ;
		Left = 57, ;
		Name = "Lbltext1", ;
		TabIndex = 4, ;
		Top = 26, ;
		Width = 414, ;
		WordWrap = .T.
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Lbltext2' AS label WITH ;
		Caption = "You need to restore the missing directory, or re-install the application to specify a new location for the data files. Do you want to re-install the application now?", ;
		Height = 33, ;
		Left = 15, ;
		Name = "Lbltext2", ;
		TabIndex = 5, ;
		Top = 65, ;
		Width = 456, ;
		WordWrap = .T.
		*< END OBJECT: BaseClass="label" />
	
	PROCEDURE Init
		LPARAMETER cPath
		
		  THIS.AddProperty('uValue', .F.)
		
		  THIS.lblPath.Caption = m.cPath
		  THIS.Caption = _SCREEN.Caption
		
	ENDPROC

	PROCEDURE Release
		LPARAMETERS lRelease
		
		  * Hide the form on a normal release, but leave its object so return value can be extracted.
		  IF THIS.Visible
		    THIS.Hide()
		    CLEAR EVENTS     && When the toplevel form closes clear the READ EVENTS.
		  ENDIF
		
		  * If called by a modal subclass, we may not want to physically release yet.
		  IF NOT m.lRelease
		    NODEFAULT
		  ENDIF
		
	ENDPROC

	PROCEDURE returnvalue
		  THIS.Release(.T.)
		  RETURN THIS.uValue
		
	ENDPROC

	PROCEDURE cmdCancel.Click
		THISFORM.uValue = .F.
		THISFORM.Release()
		
	ENDPROC

	PROCEDURE cmdOK.Click
		THISFORM.uValue = .T.
		THISFORM.Release()
		
	ENDPROC

ENDDEFINE

DEFINE CLASS frminstalldialog AS form 		&& Obsolete. Use pageframe and cntNextBackHistory control on any CodeMine form class instead.
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="pgfSteps" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfSteps.pagRegistration.txtName" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfSteps.pagRegistration.lblText1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfSteps.pagRegistration.lblName" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfSteps.pagRegistration.lblCompany" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfSteps.pagRegistration.lblSerialNo" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfSteps.pagRegistration.txtCompany" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfSteps.pagRegistration.txtSerialNo" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfSteps.pagPaths.cntLocalPath" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfSteps.pagPaths.cntLocalPath.txtPath" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfSteps.pagPaths.cntLocalPath.Command1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfSteps.pagPaths.lblLocal" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfSteps.pagPaths.lblShared" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfSteps.pagPaths.lblCommon" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfSteps.pagPaths.lblText1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfSteps.pagPaths.cntSharedPath" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfSteps.pagPaths.cntSharedPath.txtPath" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfSteps.pagPaths.cntSharedPath.Command1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfSteps.pagPaths.cntCommonPath" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfSteps.pagPaths.cntCommonPath.txtPath" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfSteps.pagPaths.cntCommonPath.Command1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdBack" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdNext" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblLabel1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Command1" UniqueID="" Timestamp="" />

	#INCLUDE "codemine.h"
	*<DefinedPropArrayMethod>
		*m: confirmcancel
		*m: displaymessage
		*m: returnvalue
		*m: saveallchanges
		*m: setdefaultpaths
		*m: stepvalid		&& Validate controls in the current step before advancing to the next one.
		*m: validatepath
		*p: ccommonfoldername		&& Default folder name for common data files.
		*p: cfilescommon		&& List of files that must exist on the common data path.
		*p: cfileslocal		&& List of files that must exist on the local data path.
		*p: cfilesshared		&& List of files that must exist on the shared data path.
		*p: clocalfoldername		&& Default folder name for local data files.
		*p: cmsgbadserialnumber		&& Bad serial number message
		*p: cmsgconfirmcancel		&& Cancel Confirmation message text.
		*p: cpromptfinish		&& Prompt for Finish button
		*p: cpromptnext		&& Prompt for next button
		*p: csharedfoldername		&& Default folder name for shared network data files.
		*p: csysregroot
	*</DefinedPropArrayMethod>

	AutoCenter = .T.
	BorderStyle = 2
	Caption = "Setup"
	ccommonfoldername = data		&& Default folder name for common data files.
	cfilescommon = 		&& List of files that must exist on the common data path.
	cfileslocal = appreg02.dbf		&& List of files that must exist on the local data path.
	cfilesshared = appdata.dbc		&& List of files that must exist on the shared data path.
	clocalfoldername = data		&& Default folder name for local data files.
	cmsgbadserialnumber = The serial number is not valid		&& Bad serial number message
	cmsgconfirmcancel = You cannot run the application until you finish this form. Do you want to quit the application now?		&& Cancel Confirmation message text.
	ControlBox = .F.
	cpromptfinish = \<Finish		&& Prompt for Finish button
	cpromptnext = \<Next >>		&& Prompt for next button
	csharedfoldername = data		&& Default folder name for shared network data files.
	csysregroot = Software\Soft Classics\CodeMine
	Desktop = .T.
	DoCreate = .T.
	Height = 218
	MaxButton = .F.
	MinButton = .F.
	Name = "frminstalldialog"
	ShowWindow = 2
	Width = 377
	WindowType = 1

	ADD OBJECT 'cmdBack' AS commandbutton WITH ;
		Caption = "<< \<Back", ;
		Enabled = .F., ;
		FontSize = 8, ;
		Height = 23, ;
		Left = 212, ;
		Name = "cmdBack", ;
		TabIndex = 3, ;
		Top = 190, ;
		Width = 75
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'cmdNext' AS commandbutton WITH ;
		Caption = "Next >>", ;
		Default = .T., ;
		FontSize = 8, ;
		Height = 23, ;
		Left = 293, ;
		Name = "cmdNext", ;
		TabIndex = 4, ;
		Top = 190, ;
		Width = 75
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'Command1' AS commandbutton WITH ;
		Cancel = .T., ;
		Caption = "\<Cancel", ;
		FontSize = 8, ;
		Height = 23, ;
		Left = 8, ;
		Name = "Command1", ;
		Top = 190, ;
		Width = 75
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'lblLabel1' AS label WITH ;
		Alignment = 2, ;
		BackStyle = 0, ;
		Caption = "First Time Registration and Setup", ;
		FontBold = .T., ;
		FontSize = 11, ;
		Height = 20, ;
		Left = 66, ;
		Name = "lblLabel1", ;
		Top = 6, ;
		Width = 245
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'pgfSteps' AS pageframe WITH ;
		ActivePage = 1, ;
		BorderWidth = 0, ;
		ErasePage = .T., ;
		Height = 147, ;
		Left = 2, ;
		Name = "pgfSteps", ;
		PageCount = 2, ;
		TabIndex = 1, ;
		Tabs = .F., ;
		Themes = .F., ;
		Top = 30, ;
		Width = 371, ;
		Page1.Caption = "Page1", ;
		Page1.Name = "pagRegistration", ;
		Page2.Caption = "Page2", ;
		Page2.Name = "pagPaths"
		*< END OBJECT: BaseClass="pageframe" />

	ADD OBJECT 'pgfSteps.pagPaths.cntCommonPath' AS container WITH ;
		BorderWidth = 0, ;
		Height = 24, ;
		Left = 79, ;
		Name = "cntCommonPath", ;
		Top = 116, ;
		Width = 280
		*< END OBJECT: BaseClass="container" />

	ADD OBJECT 'pgfSteps.pagPaths.cntCommonPath.Command1' AS commandbutton WITH ;
		Caption = "...", ;
		FontSize = 8, ;
		Height = 19, ;
		Left = 255, ;
		Name = "Command1", ;
		TabStop = .F., ;
		Top = 2, ;
		Width = 21
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'pgfSteps.pagPaths.cntCommonPath.txtPath' AS textbox WITH ;
		ControlSource = "THISFORM.cPathCommon", ;
		FontSize = 8, ;
		Height = 20, ;
		Left = 2, ;
		Margin = 1, ;
		Name = "txtPath", ;
		TabIndex = 1, ;
		Top = 2, ;
		Width = 250
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'pgfSteps.pagPaths.cntLocalPath' AS container WITH ;
		BorderWidth = 0, ;
		Height = 24, ;
		Left = 79, ;
		Name = "cntLocalPath", ;
		Top = 69, ;
		Width = 280
		*< END OBJECT: BaseClass="container" />

	ADD OBJECT 'pgfSteps.pagPaths.cntLocalPath.Command1' AS commandbutton WITH ;
		Caption = "...", ;
		FontSize = 8, ;
		Height = 19, ;
		Left = 255, ;
		Name = "Command1", ;
		TabStop = .F., ;
		Top = 2, ;
		Width = 21
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'pgfSteps.pagPaths.cntLocalPath.txtPath' AS textbox WITH ;
		ControlSource = "THISFORM.cPathLocal", ;
		FontSize = 8, ;
		Height = 20, ;
		Left = 2, ;
		Margin = 1, ;
		Name = "txtPath", ;
		TabIndex = 1, ;
		Top = 2, ;
		Width = 250
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'pgfSteps.pagPaths.cntSharedPath' AS container WITH ;
		BorderWidth = 0, ;
		Height = 24, ;
		Left = 79, ;
		Name = "cntSharedPath", ;
		Top = 93, ;
		Width = 280
		*< END OBJECT: BaseClass="container" />

	ADD OBJECT 'pgfSteps.pagPaths.cntSharedPath.Command1' AS commandbutton WITH ;
		Caption = "...", ;
		FontSize = 8, ;
		Height = 19, ;
		Left = 255, ;
		Name = "Command1", ;
		TabStop = .F., ;
		Top = 2, ;
		Width = 21
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'pgfSteps.pagPaths.cntSharedPath.txtPath' AS textbox WITH ;
		ControlSource = "THISFORM.cPathShared", ;
		FontSize = 8, ;
		Height = 20, ;
		Left = 2, ;
		Margin = 1, ;
		Name = "txtPath", ;
		TabIndex = 1, ;
		Top = 2, ;
		Width = 250
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'pgfSteps.pagPaths.lblCommon' AS label WITH ;
		Alignment = 1, ;
		BackStyle = 0, ;
		Caption = "Common Data:", ;
		FontSize = 8, ;
		Height = 17, ;
		Left = 6, ;
		Name = "lblCommon", ;
		Top = 120, ;
		Width = 72
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'pgfSteps.pagPaths.lblLocal' AS label WITH ;
		Alignment = 1, ;
		BackStyle = 0, ;
		Caption = "Local Data:", ;
		FontSize = 8, ;
		Height = 17, ;
		Left = 6, ;
		Name = "lblLocal", ;
		Top = 72, ;
		Width = 72
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'pgfSteps.pagPaths.lblShared' AS label WITH ;
		Alignment = 1, ;
		BackStyle = 0, ;
		Caption = "Shared Data:", ;
		FontSize = 8, ;
		Height = 17, ;
		Left = 6, ;
		Name = "lblShared", ;
		Top = 96, ;
		Width = 72
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'pgfSteps.pagPaths.lblText1' AS label WITH ;
		BackStyle = 0, ;
		Caption = "Now the application needs to know where to find its data files. Please fill in the correct paths below.", ;
		FontItalic = .T., ;
		FontSize = 8, ;
		Height = 43, ;
		Left = 29, ;
		Name = "lblText1", ;
		TabIndex = 4, ;
		Top = 3, ;
		Width = 313, ;
		WordWrap = .T.
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'pgfSteps.pagRegistration.lblCompany' AS label WITH ;
		Alignment = 1, ;
		BackStyle = 0, ;
		Caption = "Organization:", ;
		FontSize = 8, ;
		Height = 16, ;
		Left = 6, ;
		Name = "lblCompany", ;
		TabIndex = 6, ;
		Top = 92, ;
		Width = 71
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'pgfSteps.pagRegistration.lblName' AS label WITH ;
		Alignment = 1, ;
		BackStyle = 0, ;
		Caption = "Your Name:", ;
		FontSize = 8, ;
		Height = 16, ;
		Left = 13, ;
		Name = "lblName", ;
		TabIndex = 5, ;
		Top = 66, ;
		Width = 64
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'pgfSteps.pagRegistration.lblSerialNo' AS label WITH ;
		Alignment = 1, ;
		BackStyle = 0, ;
		Caption = "Serial Number:", ;
		FontSize = 8, ;
		Height = 16, ;
		Left = 0, ;
		Name = "lblSerialNo", ;
		TabIndex = 7, ;
		Top = 118, ;
		Width = 77
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'pgfSteps.pagRegistration.lblText1' AS label WITH ;
		BackStyle = 0, ;
		Caption = "Before you can run the application, you need to fill in the registration information and serial number. The serial number can be found on the installation diskettes or licensing agreement.", ;
		FontItalic = .T., ;
		FontSize = 8, ;
		Height = 52, ;
		Left = 17, ;
		Name = "lblText1", ;
		TabIndex = 4, ;
		Top = 3, ;
		Width = 336, ;
		WordWrap = .T.
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'pgfSteps.pagRegistration.txtCompany' AS textbox WITH ;
		ControlSource = "THISFORM.cCompany", ;
		FontSize = 8, ;
		Height = 20, ;
		Left = 82, ;
		Margin = 1, ;
		Name = "txtCompany", ;
		TabIndex = 2, ;
		Top = 91, ;
		Width = 280
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'pgfSteps.pagRegistration.txtName' AS textbox WITH ;
		ControlSource = "THISFORM.cName", ;
		FontSize = 8, ;
		Height = 20, ;
		Left = 82, ;
		Margin = 1, ;
		Name = "txtName", ;
		TabIndex = 1, ;
		Top = 66, ;
		Width = 280
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'pgfSteps.pagRegistration.txtSerialNo' AS textbox WITH ;
		ControlSource = "THISFORM.cSerialNo", ;
		FontName = "Courier New", ;
		FontSize = 8, ;
		Height = 20, ;
		InputMask = "XXXXXX-XXXXX", ;
		Left = 82, ;
		Margin = 1, ;
		Name = "txtSerialNo", ;
		TabIndex = 3, ;
		Top = 116, ;
		Width = 132
		*< END OBJECT: BaseClass="textbox" />
	
	PROCEDURE confirmcancel
		* No message manager exists at this point, so use native messagebox function.
		RETURN MESSAGEBOX(THIS.cMsgConfirmCancel, 36, THIS.Caption) = 6
		
	ENDPROC

	PROCEDURE displaymessage
		LPARAMETER cMsg, cParam
		*++
		* This form runs before we know where the registry is located, so the
		* message object does not yet exist. We need to process messages manually 
		* here with hard-coded text strings.
		*--
		  DO CASE
		    CASE LOWER(m.cMsg) = '%msgfieldrequired'
		      m.cMsg = 'Field "' + STRTRAN(m.cParam, ':', '') + '" is required'
		    CASE LOWER(m.cMsg) = '%msgbadpath'
		      m.cMsg = m.cParam + ' is not a valid path'
		  ENDCASE
		
		  * Use MESSAGEBOX() to display the message so it will display even when 
		  * the main VFP window is hidden, as is the case with SDI apps.
		  ??CHR(7)
		  MESSAGEBOX(m.cMsg, 48, THISFORM.Caption)
		  RETURN .T.
		
	ENDPROC

	PROCEDURE Init
		LPARAMETER lPathOnly
		*++
		* Setup registration info and file search paths.
		*
		* If the lPathOnly parameter is .T. then only allow path info to be changed.
		* This option is useful for updating paths without full reinstall.
		*--
		  IF m.lPathOnly
		    WITH THIS.pgfSteps
		      .pagRegistration.txtName.ReadOnly = .T.
		      .pagRegistration.txtCompany.ReadOnly = .T.
		      .pagRegistration.txtSerialNo.ReadOnly = .T.
		      .ActivePage = 2    && Go to the paths page
		    ENDWITH
		  ENDIF
		  RETURN .T.
		
	ENDPROC

	PROCEDURE Load
		LOCAL cValue, cWinRoot
		
		  * Hold a reference to the application object.
		  THIS.AddProperty('oApp', FindGlobalObject('appApplication'))
		  THIS.AddProperty('uValue', .F.)    && Return value
		
		  THIS.AddProperty('cName', '')
		  THIS.AddProperty('cCompany', '')
		  THIS.AddProperty('cSerialNo', '')
		  THIS.AddProperty('cPathLocal', '')
		  THIS.AddProperty('cPathShared', '')
		  THIS.AddProperty('cPathCommon', '')
		
		  * Determine system registry key to use. If application object exists,
		  * it has an application-specific key name. 
		  IF NOT ISNULL(THIS.oApp)
		    THIS.cSysRegRoot = THIS.oApp.cSysRegRoot
		  ENDIF
		
		  * Windows & Windows NT use 2 different roots.
		  m.cWinRoot = 'Software\Microsoft\Windows\CurrentVersion'
		  IF NOT cmRegGetValue(HKEY_LOCAL_MACHINE, m.cWinRoot + '\RegisteredOwner', @cValue)
		    m.cWinRoot = 'Software\Microsoft\Windows NT\CurrentVersion'
		  ENDIF
		
		  IF cmRegGetValue(HKEY_LOCAL_MACHINE, THISFORM.cSysRegRoot + '\RegisteredOwner', @m.cValue) ;
		  OR cmRegGetValue(HKEY_LOCAL_MACHINE, m.cWinRoot + '\RegisteredOwner', @m.cValue)
		    THIS.cName = m.cValue
		  ENDIF
		  IF cmRegGetValue(HKEY_LOCAL_MACHINE, THISFORM.cSysRegRoot + '\RegisteredOrganization', @m.cValue) ;
		  OR cmRegGetValue(HKEY_LOCAL_MACHINE, m.cWinRoot + '\RegisteredOrganization', @m.cValue)
		    THIS.cCompany = m.cValue
		  ENDIF
		  IF cmRegGetValue(HKEY_LOCAL_MACHINE, THISFORM.cSysRegRoot + '\SerialNumber', @m.cValue)
		    THIS.cSerialNo = m.cValue
		  ENDIF
		
		  * Set default paths, then overwrite any that already have override keys
		  THIS.SetDefaultPaths()
		
		  IF cmRegGetValue(HKEY_LOCAL_MACHINE, THISFORM.cSysRegRoot + '\Paths\Local', @m.cValue)
		    THIS.cPathLocal = m.cValue
		  ENDIF
		  IF cmRegGetValue(HKEY_LOCAL_MACHINE, THISFORM.cSysRegRoot + '\Paths\Shared', @m.cValue)
		    THIS.cPathShared = m.cValue
		  ENDIF
		  IF cmRegGetValue(HKEY_LOCAL_MACHINE, THISFORM.cSysRegRoot + '\Paths\Common', @m.cValue)
		    THIS.cPathCommon = m.cValue
		  ENDIF
		  RETURN .T.
		
	ENDPROC

	PROCEDURE Release
		LPARAMETERS lRelease
		
		  * Hide the form on a normal release, but leave its object so return value can be extracted.
		  IF THIS.Visible
		    THIS.Hide()
		    CLEAR EVENTS     && When the toplevel form closes clear the READ EVENTS.
		  ENDIF
		
		  * If called by a modal subclass, we may not want to physically release yet.
		  IF NOT m.lRelease
		    NODEFAULT
		  ENDIF
		
	ENDPROC

	PROCEDURE returnvalue
		  THIS.Release(.T.)
		  RETURN THIS.uValue
		
	ENDPROC

	PROCEDURE saveallchanges
		* Store edited values to the system registry.
		cmRegSetString(HKEY_LOCAL_MACHINE, THISFORM.cSysRegRoot + '\RegisteredOwner', THIS.cName)
		cmRegSetString(HKEY_LOCAL_MACHINE, THISFORM.cSysRegRoot + '\RegisteredOrganization', THIS.cCompany)
		cmRegSetString(HKEY_LOCAL_MACHINE, THISFORM.cSysRegRoot + '\SerialNumber', THIS.cSerialNo)
		
		* We always need a local data path, for appreg02.dbf if nothing else.
		cmRegSetString(HKEY_LOCAL_MACHINE, THISFORM.cSysRegRoot + '\Paths\Local', THIS.cPathLocal)
		
		* Shared and common paths are optional. All shared data may be over data server connections.
		WITH THISFORM.pgfSteps.pagPaths
		  IF NOT .cntSharedPath.Visible      && If control is hidden, force this element to blank
		    THIS.cPathShared = ''
		  ENDIF
		  IF NOT .cntCommonPath.Visible      && If control is hidden, force this element to blank
		    THIS.cPathCommon = ''
		  ENDIF
		  cmRegSetString(HKEY_LOCAL_MACHINE, THISFORM.cSysRegRoot + '\Paths\Shared', THIS.cPathShared)
		  cmRegSetString(HKEY_LOCAL_MACHINE, THISFORM.cSysRegRoot + '\Paths\Common', THIS.cPathCommon)
		ENDWITH
		
		THIS.uValue = .T.  && Success return code
		RETURN .T.
		
	ENDPROC

	PROCEDURE setdefaultpaths
		LOCAL cRoot, cPath
		  * Find application root directory
		  m.cRoot = ADDBS(JUSTPATH(IIF('...' $ SYS(16, 1), SYS(16, 2), SYS(16,1))))
		  IF NOT DIRECTORY(m.cRoot)    && In dev Env, we might not get a valid value.
		    m.cRoot = SYS(5) + CURDIR()
		  ENDIF
		
		  * Only set defaults if developer didn't already set a value.
		  IF EMPTY(THIS.cPathShared)
		    m.cPath = IIF(DIRECTORY(ADDBS(m.cRoot + THIS.cSharedFolderName)), ADDBS(m.cRoot + THIS.cSharedFolderName), m.cRoot)
		    IF THIS.ValidatePath(m.cPath, THIS.cFilesShared)
		      THIS.cPathShared = LOWER(m.cPath)
		    ENDIF
		  ENDIF
		
		  IF EMPTY(THIS.cPathLocal)
		    m.cPath = IIF(DIRECTORY(ADDBS(m.cRoot + THIS.cLocalFolderName)), ADDBS(m.cRoot + THIS.cLocalFolderName), m.cRoot)
		    IF THIS.ValidatePath(m.cPath, THIS.cFilesLocal)
		      THIS.cPathLocal = LOWER(m.cPath)
		    ENDIF
		  ENDIF
		
		  * First look for common data files with local data, then try common data folder one level up.
		  * We only define the optional Common data path if cFilesCommon contains a list of required files.
		  IF EMPTY(THIS.cPathCommon) AND NOT EMPTY(THIS.cFilesCommon)
		    m.cPath = IIF(DIRECTORY(ADDBS(m.cRoot + THIS.cLocalFolderName)), ADDBS(m.cRoot + THIS.cLocalFolderName), m.cRoot)
		    IF THIS.ValidatePath(m.cPath, THIS.cFilesCommon)
		      THIS.cPathCommon = LOWER(m.cPath)
		    ELSE
		      m.cPath = FULLPATH(ADDBS('..\' + THIS.cCommonFolderName), m.cRoot)
		      IF DIRECTORY(m.cPath) AND THIS.ValidatePath(m.cPath, THIS.cFilesCommon)
		        THIS.cPathCommon = LOWER(m.cPath)
		      ENDIF
		    ENDIF
		  ENDIF
		
	ENDPROC

	PROCEDURE stepvalid		&& Validate controls in the current step before advancing to the next one.
		LPARAMETER nStep
		*++
		* Validate the current dialog step before proceeding
		*--
		  DO CASE
		    CASE m.nStep = 1
		      LOCAL cLeft, cRight
		      IF NOT ISNULL(THIS.oApp)   && Need applicaiton object for hash algorithm
		        m.cLeft = LEFT(THIS.cSerialNo, 6)
		        m.cRight = RIGHT(THIS.cSerialNo, 5)
		        IF NOT THIS.oApp.SerialHash(m.cLeft) ==  m.cRight
		          THIS.DisplayMessage(THISFORM.cMsgBadSerialNumber)
		          THIS.pgfSteps.pagRegistration.txtSerialNo.Setfocus()
		          RETURN .F.
		        ENDIF
		      ENDIF
		
		    CASE m.nStep = 2
		      IF NOT THISFORM.ValidatePath(THIS.cPathLocal, THIS.cFilesLocal)
		        THIS.DisplayMessage('Local path does not contain some of these required files: ' + THIS.cFilesLocal)
		        THIS.pgfSteps.pagPaths.cntLocalPath.Setfocus()
		        RETURN .F.
		      ENDIF
		      IF NOT THISFORM.ValidatePath(THIS.cPathShared, THIS.cFilesShared)
		        THIS.DisplayMessage('Shared path does not contain some of these required files: ' + THIS.cFilesShared)
		        THIS.pgfSteps.pagPaths.cntSharedPath.Setfocus()
		        RETURN .F.
		      ENDIF
		      IF NOT THISFORM.ValidatePath(THIS.cPathCommon, THIS.cFilesCommon)
		        THIS.DisplayMessage('Common path does not contain some of these required files: ' + THIS.cFilesCommon)
		        THIS.pgfSteps.pagPaths.cntCommonPath.Setfocus()
		        RETURN .F.
		      ENDIF
		
		  ENDCASE
		  RETURN .T.
		
	ENDPROC

	PROCEDURE validatepath
		LPARAMETERS cPath, cFileList
		*++
		* Parameters: 
		*	cPath -     Path to test
		*	cFileList -List of files that must exist in the specified path.
		*--
		LOCAL cFile
		  DO WHILE NOT EMPTY(m.cFileList)
		    m.cFile = GetToken(@m.cFileList, ',')
		    IF NOT EMPTY(m.cFile) AND NOT FILE(ADDBS(m.cPath) + m.cFile)
		      RETURN .F.
		    ENDIF
		  ENDDO
		  RETURN .T.
		
	ENDPROC

	PROCEDURE cmdBack.Click
		WITH THISFORM.pgfSteps
		  IF .Activepage > 1
		    .Activepage = .Activepage - 1
		    .Pages[.Activepage].Controls[1].SetFocus()
		    THIS.Refresh()
		    THISFORM.cmdNext.Refresh()
		  ENDIF
		ENDWITH
		
	ENDPROC

	PROCEDURE cmdBack.Refresh
		THIS.Enabled = THISFORM.pgfSteps.ActivePage > 1
		
	ENDPROC

	PROCEDURE cmdNext.Click
		WITH THISFORM.pgfSteps
		  IF .Activepage < .Pagecount
		    IF THISFORM.StepValid(.Activepage)
		      .Activepage = .Activepage + 1
		      .Pages[.Activepage].Controls[1].SetFocus()
		      THIS.Refresh()
		      THISFORM.cmdBack.Refresh()
		    ENDIF
		  ELSE
		    IF THISFORM.StepValid(.Activepage) AND THISFORM.SaveAllChanges()
		      RETURN THISFORM.Release()
		    ENDIF
		  ENDIF
		ENDWITH
		
	ENDPROC

	PROCEDURE cmdNext.Refresh
		IF THISFORM.pgfSteps.Pagecount = THISFORM.pgfSteps.Activepage
		  THIS.Caption = THISFORM.cPromptFinish
		ELSE
		  THIS.Caption = THISFORM.cPromptNext
		ENDIF
		
	ENDPROC

	PROCEDURE Command1.Click
		IF THISFORM.ConfirmCancel()
		  THISFORM.Release()
		ENDIF
		
	ENDPROC

	PROCEDURE pgfSteps.pagPaths.cntCommonPath.Command1.Click
		LOCAL cPath
		  m.cPath = GETDIR(TRIM(THIS.Parent.txtPath.Value), '', '', 1+2+8+16+64)
		  IF NOT EMPTY(m.cPath)
		    THIS.Parent.txtPath.Value = LOWER(m.cPath)
		  ENDIF
		  THIS.Parent.txtPath.SetFocus()
		
	ENDPROC

	PROCEDURE pgfSteps.pagPaths.cntCommonPath.txtPath.KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		
		  * Implement basic Copy & Paste in the control, for cases where no VFP menu is available.
		  IF m.nShiftAltCtrl = 2 AND m.nKeyCode = 3  && Ctrl+C (Copy)
		    IF THIS.SelLength > 0
		      _CLIPTEXT = TRIM(SUBSTR(THIS.Value, THIS.SelStart, THIS.SelLength))
		    ENDIF
		  ENDIF
		
	ENDPROC

	PROCEDURE pgfSteps.pagPaths.cntLocalPath.Command1.Click
		LOCAL cPath
		  m.cPath = GETDIR(TRIM(THIS.Parent.txtPath.Value), '', '', 1+2+8+16+64)
		  IF NOT EMPTY(m.cPath)
		    THIS.Parent.txtPath.Value = LOWER(m.cPath)
		  ENDIF
		  THIS.Parent.txtPath.SetFocus()
		
	ENDPROC

	PROCEDURE pgfSteps.pagPaths.cntLocalPath.txtPath.KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		
		  * Implement basic Copy & Paste in the control, for cases where no VFP menu is available.
		  IF m.nShiftAltCtrl = 2 AND m.nKeyCode = 3  && Ctrl+C (Copy)
		    IF THIS.SelLength > 0
		      _CLIPTEXT = TRIM(SUBSTR(THIS.Value, THIS.SelStart, THIS.SelLength))
		    ENDIF
		  ENDIF
		
	ENDPROC

	PROCEDURE pgfSteps.pagPaths.cntSharedPath.Command1.Click
		LOCAL cPath
		  m.cPath = GETDIR(TRIM(THIS.Parent.txtPath.Value), '', '', 1+2+8+16+64)
		  IF NOT EMPTY(m.cPath)
		    THIS.Parent.txtPath.Value = LOWER(m.cPath)
		  ENDIF
		  THIS.Parent.txtPath.SetFocus()
		
	ENDPROC

	PROCEDURE pgfSteps.pagPaths.cntSharedPath.txtPath.KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		
		  * Implement basic Copy & Paste in the control, for cases where no VFP menu is available.
		  IF m.nShiftAltCtrl = 2 AND m.nKeyCode = 3  && Ctrl+C (Copy)
		    IF THIS.SelLength > 0
		      _CLIPTEXT = TRIM(SUBSTR(THIS.Value, THIS.SelStart, THIS.SelLength))
		    ENDIF
		  ENDIF
		
	ENDPROC

	PROCEDURE pgfSteps.pagRegistration.txtSerialNo.Init
		* If no serial number at this point, developer doesn't require them, so generate
		* a default value to keep the rest of the installation process happy.
		IF NOT THIS.Visible AND EMPTY(THISFORM.cSerialNo) AND NOT ISNULL(THISFORM.oApp)
		  THISFORM.cSerialNo = 'Serial-' + THISFORM.oApp.SerialHash('Serial')
		ENDIF
		
	ENDPROC

ENDDEFINE

DEFINE CLASS frmsplashscreen AS form 		&& Foundation class for the splash screen that appears while the application is loading.
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Timer" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdClick" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*p: nmaxtime		&& Number of seconds before form will release itself, if not explicitly released sooner.
	*</DefinedPropArrayMethod>

	AlwaysOnTop = .T.
	AutoCenter = .T.
	Caption = ""
	Closable = .F.
	ControlBox = .F.
	Desktop = .T.
	DoCreate = .T.
	Height = 104
	MaxButton = .F.
	MinButton = .F.
	MousePointer = 14
	Movable = .F.
	Name = "frmsplashscreen"
	nmaxtime = 3		&& Number of seconds before form will release itself, if not explicitly released sooner.
	ShowWindow = 1
	Width = 269

	ADD OBJECT 'cmdClick' AS commandbutton WITH ;
		Caption = "Command1", ;
		Height = 36, ;
		Left = 8, ;
		Name = "cmdClick", ;
		Style = 1, ;
		Top = 44, ;
		Width = 28
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'Timer' AS timer WITH ;
		Height = 23, ;
		Left = 12, ;
		Name = "Timer", ;
		Top = 8, ;
		Width = 23
		*< END OBJECT: BaseClass="timer" />
	
	PROCEDURE Click
		THIS.Release()
		
	ENDPROC

	PROCEDURE Init
		*++
		*    CodeMine Splash screen class
		*  Copyright 1997-2002 Soft Classics Ltd.
		*
		* This class is based directly on the VFP form class because it
		* does not need any of the CodeMine functionality. It never receives
		* focus - it is just displayed for a few seconds during startup and released.
		*--
		
		THIS.Timer.Interval = THIS.nMaxTime * 1000
		THIS.cmdClick.ZOrder(0)
		
	ENDPROC

	PROCEDURE Load
		* Declare Windows API color function so Codemine 3D labels will work properly
		DECLARE INTEGER GetSysColor IN user32.dll INTEGER nColorValue
		
	ENDPROC

	PROCEDURE cmdClick.Click
		THISFORM.Release()
		
	ENDPROC

	PROCEDURE cmdClick.Init
		*++
		* This invisible button sizes itself to fill the whole form, to intercept 
		* any mouse click, and close the splash screen.
		*--
		  STORE -5 TO THIS.Top, THIS.Left
		  THIS.Height = THISFORM.Height + 10
		  THIS.Width = THISFORM.Width + 10
		
	ENDPROC

	PROCEDURE Timer.Timer
		* Release the form when the timer expires.
		THISFORM.Release()
		
	ENDPROC

ENDDEFINE
